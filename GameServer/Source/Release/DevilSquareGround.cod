; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\DevilSquareGround.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CDevilSquareGround@@QAE@XZ			; CDevilSquareGround::CDevilSquareGround
PUBLIC	??1CDevilSquareGround@@UAE@XZ			; CDevilSquareGround::~CDevilSquareGround
PUBLIC	?Init@CDevilSquareGround@@QAEXH@Z		; CDevilSquareGround::Init
PUBLIC	?Clear@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::Clear
PUBLIC	?SetBonus@CDevilSquareGround@@QAEXHHH@Z		; CDevilSquareGround::SetBonus
PUBLIC	?IncBonus@CDevilSquareGround@@QAEXM@Z		; CDevilSquareGround::IncBonus
PUBLIC	?Set@CDevilSquareGround@@QAEXGHH@Z		; CDevilSquareGround::Set
PUBLIC	?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z	; CDevilSquareGround::SetBoss
PUBLIC	?IncObjCount@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::IncObjCount
PUBLIC	?GetObjCount@CDevilSquareGround@@QAEJXZ		; CDevilSquareGround::GetObjCount
PUBLIC	?RegenBossMonster@CDevilSquareGround@@QAEXH@Z	; CDevilSquareGround::RegenBossMonster
PUBLIC	?FindMonsterType@CDevilSquareGround@@QAEHG@Z	; CDevilSquareGround::FindMonsterType
PUBLIC	?GetMonsterType@CDevilSquareGround@@QAEGH@Z	; CDevilSquareGround::GetMonsterType
PUBLIC	?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::SendRankingInfo
PUBLIC	?ClearScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::ClearScore
PUBLIC	?SortScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::SortScore
PUBLIC	?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::InsertObj
PUBLIC	?SendScore@CDevilSquareGround@@QAEXXZ		; CDevilSquareGround::SendScore
PUBLIC	?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ ; CDevilSquareGround::GetPlayUserCountRightNow
PUBLIC	?AddUser@CDevilSquareGround@@QAEHH@Z		; CDevilSquareGround::AddUser
PUBLIC	?DelUser@CDevilSquareGround@@QAEHH@Z		; CDevilSquareGround::DelUser
PUBLIC	?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z	; CDevilSquareGround::ChangeUserIndex
PUBLIC	?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate
PUBLIC	?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
PUBLIC	?_Reallocate@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
PUBLIC	??_GCDevilSquareGround@@UAEPAXI@Z		; CDevilSquareGround::`scalar deleting destructor'
PUBLIC	?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ; DevilSquareScoreSort
PUBLIC	??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
PUBLIC	??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
PUBLIC	??_7CDevilSquareGround@@6B@			; CDevilSquareGround::`vftable'
PUBLIC	??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@ ; `string'
PUBLIC	??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CDevilSquareGround@@6B@			; CDevilSquareGround::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDevilSquareGround@@@8			; CDevilSquareGround `RTTI Type Descriptor'
PUBLIC	??_R3CDevilSquareGround@@8			; CDevilSquareGround::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDevilSquareGround@@8			; CDevilSquareGround::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDevilSquareGround@@8		; CDevilSquareGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	_rand:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCKillPlayerExpSend@@YAXHHHHH@Z:PROC		; GCKillPlayerExpSend
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@PA_JHH@Z:PROC ; gObjLevelUp
EXTRN	?gObjCheckMaxZen@@YAHHH@Z:PROC			; gObjCheckMaxZen
EXTRN	??_ECDevilSquareGround@@UAEPAXI@Z:PROC		; CDevilSquareGround::`vector deleting destructor'
EXTRN	?DataSendRank@@YAXPADH@Z:PROC			; DataSendRank
EXTRN	?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAE0@Z:PROC ; CMonsterSetBase::GetBoxPosition
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ:PROC ; CCrywolfSync::GetGettingExpPenaltyRate
EXTRN	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; CheckItemOptForGetExpEx
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?g_iCrywolfApplyMvpPenalty@@3HA:DWORD		; g_iCrywolfApplyMvpPenalty
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CDevilSquareGround@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDevilSquareGround@@8 DD FLAT:??_R0?AVCDevilSquareGround@@@8 ; CDevilSquareGround::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_R2CDevilSquareGround@@8
rdata$r	SEGMENT
??_R2CDevilSquareGround@@8 DD FLAT:??_R1A@?0A@EA@CDevilSquareGround@@8 ; CDevilSquareGround::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDevilSquareGround@@8
rdata$r	SEGMENT
??_R3CDevilSquareGround@@8 DD 00H			; CDevilSquareGround::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDevilSquareGround@@@8
data$r	SEGMENT
??_R0?AVCDevilSquareGround@@@8 DD FLAT:??_7type_info@@6B@ ; CDevilSquareGround `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDevilSquareGround@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDevilSquareGround@@6B@
rdata$r	SEGMENT
??_R4CDevilSquareGround@@6B@ DD 00H			; CDevilSquareGround::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDevilSquareGround@@@8
	DD	FLAT:??_R3CDevilSquareGround@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@
CONST	SEGMENT
??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@ DB 'R'
	DB	'ank :[%d] : [%s][%s][%d][%d][%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@ DB '[Dev'
	DB	'ilSquare] Rank [%d]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@
CONST	SEGMENT
??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@ DB '['
	DB	'DevilSquare] Boss %d %d %d create ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CDevilSquareGround@@6B@
CONST	SEGMENT
??_7CDevilSquareGround@@6B@ DD FLAT:??_R4CDevilSquareGround@@6B@ ; CDevilSquareGround::`vftable'
	DD	FLAT:??_ECDevilSquareGround@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
___formal$ = 28						; size = 4
??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z PROC ; std::_Pop_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2441 : 	{	// pop *_First to *_Dest and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2442 : 	*_Dest = _Move(*_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00009	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  0000c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000e	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	50		 push	 eax
  0001c	6a 00		 push	 0
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00024	83 c4 14	 add	 esp, 20			; 00000014H

; 2444 : 		_Move(_Val), _Pred);
; 2445 : 	}

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??$_Pop_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00$$QAPAU1@P6A_NABQAU1@2@ZPAH@Z ENDP ; std::_Pop_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2632 : 	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2633 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 2634 : 	_CSTD memmove(&*_Dest - _Count, &*_First,

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000d	2b c8		 sub	 ecx, eax
  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00012	51		 push	 ecx
  00013	2b f1		 sub	 esi, ecx
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2635 : 		_Count * sizeof (*_First));
; 2636 : 	return (_Dest - _Count);

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi

; 2637 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$ = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z PROC ; std::_Pop_heap_0<OBJECTSTRUCT * *,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2451 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2452 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 2442 : 	*_Dest = _Move(*_First);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00009	ff 75 10	 push	 DWORD PTR __Pred$[ebp]

; 2452 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0000f	89 45 0c	 mov	 DWORD PTR __Val$[ebp], eax

; 2442 : 	*_Dest = _Move(*_First);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00017	2b d1		 sub	 edx, ecx
  00019	8d 45 0c	 lea	 eax, DWORD PTR __Val$[ebp]
  0001c	83 ea 04	 sub	 edx, 4
  0001f	50		 push	 eax
  00020	c1 fa 02	 sar	 edx, 2
  00023	52		 push	 edx
  00024	6a 00		 push	 0
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 2453 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2454 : 		_Move(_Val), _Pred, _Dist_type(_First));
; 2455 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Pop_heap_0@PAPAUOBJECTSTRUCT@@PAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ENDP ; std::_Pop_heap_0<OBJECTSTRUCT * *,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z PROC ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2361 : 	{	// percolate _Hole to _Top or where _Val belongs, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 2362 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Hole$[ebp]
  00008	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000b	99		 cdq
  0000c	2b c2		 sub	 eax, edx
  0000e	8b f0		 mov	 esi, eax
  00010	d1 fe		 sar	 esi, 1

; 2363 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);

  00012	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00015	7d 40		 jge	 SHORT $LN16@Push_heap
  00017	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001a	53		 push	 ebx
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Push_heap:
  00020	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00023	8d 1c b1	 lea	 ebx, DWORD PTR [ecx+esi*4]
  00026	53		 push	 ebx
  00027	ff 55 18	 call	 DWORD PTR __Pred$[ebp]

; 2364 : 		_Idx = (_Hole - 1) / 2)
; 2365 : 		{	// move _Hole up to parent
; 2366 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002d	83 c4 08	 add	 esp, 8
  00030	84 c0		 test	 al, al
  00032	74 16		 je	 SHORT $LN17@Push_heap
  00034	8b 03		 mov	 eax, DWORD PTR [ebx]
  00036	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax
  00039	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0003c	99		 cdq

; 2367 : 		_Hole = _Idx;

  0003d	8b fe		 mov	 edi, esi
  0003f	2b c2		 sub	 eax, edx
  00041	8b f0		 mov	 esi, eax
  00043	d1 fe		 sar	 esi, 1
  00045	39 7d 10	 cmp	 DWORD PTR __Top$[ebp], edi
  00048	7c d6		 jl	 SHORT $LL4@Push_heap
$LN17@Push_heap:

; 2368 : 		}
; 2369 : 
; 2370 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0004a	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0004d	5b		 pop	 ebx
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 2371 : 	}

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
$LN16@Push_heap:

; 2368 : 		}
; 2369 : 
; 2370 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  00057	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0005f	89 0c b8	 mov	 DWORD PTR [eax+edi*4], ecx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 2371 : 	}

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ENDP ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z PROC ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 2643 : 	{	// move [_First, _Last) backwards to [..., _Dest), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2633 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 2634 : 	_CSTD memmove(&*_Dest - _Count, &*_First,

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000d	2b c8		 sub	 ecx, eax
  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00012	51		 push	 ecx
  00013	2b f1		 sub	 esi, ecx
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 _memmove
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2644 : 	return (_Move_backward(_First, _Last,

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi

; 2645 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2646 : 	}

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??$_Move_backward@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00@Z ENDP ; std::_Move_backward<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$1 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Pop_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2460 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2444 : 		_Move(_Val), _Pred);
; 2445 : 	}
; 2446 : 
; 2447 : template<class _RanIt,
; 2448 : 	class _Ty,
; 2449 : 	class _Pr> inline
; 2450 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2451 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2452 : 	_Ty _Val = _Move(*(_Last - 1));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]

; 2442 : 	*_Dest = _Move(*_First);

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00009	ff 75 10	 push	 DWORD PTR __Pred$[ebp]

; 2444 : 		_Move(_Val), _Pred);
; 2445 : 	}
; 2446 : 
; 2447 : template<class _RanIt,
; 2448 : 	class _Ty,
; 2449 : 	class _Pr> inline
; 2450 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2451 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2452 : 	_Ty _Val = _Move(*(_Last - 1));

  0000c	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0000f	89 45 0c	 mov	 DWORD PTR __Val$1[ebp], eax

; 2442 : 	*_Dest = _Move(*_First);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	89 42 fc	 mov	 DWORD PTR [edx-4], eax

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00017	2b d1		 sub	 edx, ecx
  00019	8d 45 0c	 lea	 eax, DWORD PTR __Val$1[ebp]
  0001c	83 ea 04	 sub	 edx, 4
  0001f	50		 push	 eax
  00020	c1 fa 02	 sar	 edx, 2
  00023	52		 push	 edx
  00024	6a 00		 push	 0
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 2461 : 	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
; 2462 : 		_Val_type(_First));
; 2463 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Pop_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Pop_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z PROC ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2415 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2416 : 	_Diff _Top = _Hole;
; 2417 : 	_Diff _Idx = 2 * _Hole + 2;
; 2418 : 
; 2419 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Hole$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	8d 34 5d 02 00
	00 00		 lea	 esi, DWORD PTR [ebx*2+2]
  00016	89 5d 0c	 mov	 DWORD PTR __Top$1$[ebp], ebx
  00019	3b f1		 cmp	 esi, ecx
  0001b	7d 2c		 jge	 SHORT $LN38@Adjust_hea
  0001d	0f 1f 00	 npad	 3
$LL4@Adjust_hea:

; 2420 : 		{	// move _Hole down to larger child
; 2421 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00020	8d 0c b7	 lea	 ecx, DWORD PTR [edi+esi*4]
  00023	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00026	50		 push	 eax
  00027	51		 push	 ecx
  00028	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  0002b	83 c4 08	 add	 esp, 8
  0002e	84 c0		 test	 al, al
  00030	74 01		 je	 SHORT $LN5@Adjust_hea

; 2422 : 			--_Idx;

  00032	4e		 dec	 esi
$LN5@Adjust_hea:

; 2423 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00033	8b 04 b7	 mov	 eax, DWORD PTR [edi+esi*4]
  00036	8b 4d 10	 mov	 ecx, DWORD PTR __Bottom$[ebp]
  00039	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax

; 2424 : 		_Hole = _Idx;

  0003c	8b de		 mov	 ebx, esi
  0003e	8d 34 75 02 00
	00 00		 lea	 esi, DWORD PTR [esi*2+2]
  00045	3b f1		 cmp	 esi, ecx
  00047	7c d7		 jl	 SHORT $LL4@Adjust_hea
$LN38@Adjust_hea:

; 2425 : 		}
; 2426 : 
; 2427 : 	if (_Idx == _Bottom)

  00049	75 0a		 jne	 SHORT $LN6@Adjust_hea

; 2428 : 		{	// only child at bottom, move _Hole down to it
; 2429 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  0004b	8b 44 8f fc	 mov	 eax, DWORD PTR [edi+ecx*4-4]
  0004f	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax

; 2430 : 		_Hole = _Bottom - 1;

  00052	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
$LN6@Adjust_hea:

; 2362 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00055	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00058	99		 cdq
  00059	2b c2		 sub	 eax, edx
  0005b	8b f0		 mov	 esi, eax
  0005d	d1 fe		 sar	 esi, 1

; 2363 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);

  0005f	39 5d 0c	 cmp	 DWORD PTR __Top$1$[ebp], ebx
  00062	7d 28		 jge	 SHORT $LN36@Adjust_hea
$LL20@Adjust_hea:
  00064	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00067	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  0006a	50		 push	 eax
  0006b	ff 55 18	 call	 DWORD PTR __Pred$[ebp]
  0006e	83 c4 08	 add	 esp, 8
  00071	84 c0		 test	 al, al
  00073	74 17		 je	 SHORT $LN36@Adjust_hea

; 2364 : 		_Idx = (_Hole - 1) / 2)
; 2365 : 		{	// move _Hole up to parent
; 2366 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  00075	8b 04 b7	 mov	 eax, DWORD PTR [edi+esi*4]
  00078	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax
  0007b	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0007e	99		 cdq

; 2367 : 		_Hole = _Idx;

  0007f	8b de		 mov	 ebx, esi
  00081	2b c2		 sub	 eax, edx
  00083	8b f0		 mov	 esi, eax
  00085	d1 fe		 sar	 esi, 1
  00087	39 5d 0c	 cmp	 DWORD PTR __Top$1$[ebp], ebx
  0008a	7c d8		 jl	 SHORT $LL20@Adjust_hea
$LN36@Adjust_hea:

; 2368 : 		}
; 2369 : 
; 2370 : 	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole

  0008c	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0008f	8b 00		 mov	 eax, DWORD PTR [eax]
  00091	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 2431 : 		}
; 2432 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
; 2433 : 	}

  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ENDP ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::_Move<OBJECTSTRUCT * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::_Move<OBJECTSTRUCT * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT * * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAPAUOBJECTSTRUCT@@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z PROC ; std::swap<OBJECTSTRUCT *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUOBJECTSTRUCT@@@std@@YAXAAPAUOBJECTSTRUCT@@0@Z ENDP ; std::swap<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z PROC ; std::_Med3<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3079 : 	{	// sort median of three elements to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00004	8b 5d 14	 mov	 ebx, DWORD PTR __Pred$[ebp]
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000f	57		 push	 edi
  00010	56		 push	 esi
  00011	ff d3		 call	 ebx
  00013	83 c4 08	 add	 esp, 8
  00016	84 c0		 test	 al, al
  00018	74 08		 je	 SHORT $LN9@Med3
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  0001c	8b 07		 mov	 eax, DWORD PTR [edi]
  0001e	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00020	89 0f		 mov	 DWORD PTR [edi], ecx
$LN9@Med3:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00022	56		 push	 esi
  00023	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00026	ff d3		 call	 ebx
  00028	83 c4 08	 add	 esp, 8
  0002b	84 c0		 test	 al, al
  0002d	74 1e		 je	 SHORT $LN37@Med3
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0002f	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]

; 53   : 	_Left = _Move(_Right);

  00032	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00034	57		 push	 edi
  00035	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00036	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  00038	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  0003a	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0003c	ff d3		 call	 ebx
  0003e	83 c4 08	 add	 esp, 8
  00041	84 c0		 test	 al, al
  00043	74 08		 je	 SHORT $LN37@Med3
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00045	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  00047	8b 07		 mov	 eax, DWORD PTR [edi]
  00049	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  0004b	89 0f		 mov	 DWORD PTR [edi], ecx
$LN37@Med3:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3088 : 	}

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??$_Med3@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ENDP ; std::_Med3<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<OBJECTSTRUCT *,OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAUOBJECTSTRUCT@@PAU1@PAU1@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<OBJECTSTRUCT *,OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z
_TEXT	SEGMENT
tv203 = -8						; size = 4
__Val$1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z PROC ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>, COMDAT

; 3046 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3047 : 	if (_First != _Last)

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000c	3b c8		 cmp	 ecx, eax
  0000e	0f 84 94 00 00
	00		 je	 $LN3@Insertion_

; 3048 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00014	57		 push	 edi
  00015	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00018	3b f8		 cmp	 edi, eax
  0001a	0f 84 87 00 00
	00		 je	 $LN37@Insertion_
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	8d 77 fc	 lea	 esi, DWORD PTR [edi-4]
  00025	89 75 f8	 mov	 DWORD PTR tv203[ebp], esi
$LL2@Insertion_:

; 3049 : 			{	// order next element
; 3050 : 			_BidIt _Next1 = _Next;
; 3051 : 			_Ty _Val = _Move(*_Next);

  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	8b df		 mov	 ebx, edi
  0002c	89 45 fc	 mov	 DWORD PTR __Val$1[ebp], eax

; 3052 : 
; 3053 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  0002f	8d 45 fc	 lea	 eax, DWORD PTR __Val$1[ebp]
  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00037	83 c4 08	 add	 esp, 8
  0003a	84 c0		 test	 al, al
  0003c	74 25		 je	 SHORT $LN9@Insertion_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2633 : 	ptrdiff_t _Count = _Last - _First;

  0003e	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  00041	8b c7		 mov	 eax, edi
  00043	2b c3		 sub	 eax, ebx
  00045	c1 f8 02	 sar	 eax, 2

; 2634 : 	_CSTD memmove(&*_Dest - _Count, &*_First,

  00048	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0004f	8b c7		 mov	 eax, edi
  00051	51		 push	 ecx
  00052	2b c1		 sub	 eax, ecx
  00054	83 c0 04	 add	 eax, 4
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 _memmove
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3058 : 			else

  00061	eb 2c		 jmp	 SHORT $LN39@Insertion_
$LN9@Insertion_:

; 3059 : 				{	// look for insertion point after first
; 3060 : 				for (_BidIt _First1 = _Next1;
; 3061 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);

  00063	ff 75 f8	 push	 DWORD PTR tv203[ebp]
  00066	8d 45 fc	 lea	 eax, DWORD PTR __Val$1[ebp]
  00069	50		 push	 eax
  0006a	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  0006d	83 c4 08	 add	 esp, 8
  00070	84 c0		 test	 al, al
  00072	74 18		 je	 SHORT $LN6@Insertion_
$LL7@Insertion_:

; 3062 : 					_Next1 = _First1)
; 3063 : 					*_Next1 = _Move(*_First1);	// move hole down

  00074	8b 06		 mov	 eax, DWORD PTR [esi]
  00076	89 03		 mov	 DWORD PTR [ebx], eax
  00078	8b de		 mov	 ebx, esi
  0007a	83 ee 04	 sub	 esi, 4
  0007d	8d 45 fc	 lea	 eax, DWORD PTR __Val$1[ebp]
  00080	56		 push	 esi
  00081	50		 push	 eax
  00082	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00085	83 c4 08	 add	 esp, 8
  00088	84 c0		 test	 al, al
  0008a	75 e8		 jne	 SHORT $LL7@Insertion_
$LN6@Insertion_:
  0008c	8b 75 f8	 mov	 esi, DWORD PTR tv203[ebp]
$LN39@Insertion_:

; 3064 : 				*_Next1 = _Move(_Val);	// insert element in hole

  0008f	8b 45 fc	 mov	 eax, DWORD PTR __Val$1[ebp]
  00092	83 c7 04	 add	 edi, 4
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00098	83 c6 04	 add	 esi, 4
  0009b	89 03		 mov	 DWORD PTR [ebx], eax
  0009d	89 75 f8	 mov	 DWORD PTR tv203[ebp], esi
  000a0	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  000a3	75 83		 jne	 SHORT $LL2@Insertion_
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
$LN37@Insertion_:
  000a7	5f		 pop	 edi
$LN3@Insertion_:

; 3065 : 				}
; 3066 : 			}
; 3067 : 	}

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ENDP ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Val$1 = 12						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2523 : 	{	// order heap by repeatedly popping, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2524 : 	for (; 2 <= _Last - _First; --_Last)

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	2b f7		 sub	 esi, edi
  0000d	8b c6		 mov	 eax, esi
  0000f	83 e0 fc	 and	 eax, -4			; fffffffcH
  00012	83 f8 08	 cmp	 eax, 8
  00015	7c 3a		 jl	 SHORT $LN3@Sort_heap
  00017	53		 push	 ebx
  00018	8b 5d 10	 mov	 ebx, DWORD PTR __Pred$[ebp]
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Sort_heap:

; 2444 : 		_Move(_Val), _Pred);
; 2445 : 	}
; 2446 : 
; 2447 : template<class _RanIt,
; 2448 : 	class _Ty,
; 2449 : 	class _Pr> inline
; 2450 : 	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
; 2451 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred
; 2452 : 	_Ty _Val = _Move(*(_Last - 1));

  00020	8b 44 37 fc	 mov	 eax, DWORD PTR [edi+esi-4]
  00024	89 45 0c	 mov	 DWORD PTR __Val$1[ebp], eax

; 2442 : 	*_Dest = _Move(*_First);

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	89 44 37 fc	 mov	 DWORD PTR [edi+esi-4], eax

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  0002d	83 c6 fc	 add	 esi, -4			; fffffffcH
  00030	53		 push	 ebx
  00031	8d 45 0c	 lea	 eax, DWORD PTR __Val$1[ebp]
  00034	50		 push	 eax
  00035	8b c6		 mov	 eax, esi
  00037	c1 f8 02	 sar	 eax, 2
  0003a	50		 push	 eax
  0003b	6a 00		 push	 0
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 ??$_Adjust_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Adjust_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 2524 : 	for (; 2 <= _Last - _First; --_Last)

  00043	8b c6		 mov	 eax, esi

; 2443 : 	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),

  00045	83 c4 14	 add	 esp, 20			; 00000014H

; 2524 : 	for (; 2 <= _Last - _First; --_Last)

  00048	83 e0 fc	 and	 eax, -4			; fffffffcH
  0004b	83 f8 08	 cmp	 eax, 8
  0004e	7d d0		 jge	 SHORT $LL4@Sort_heap
  00050	5b		 pop	 ebx
$LN3@Sort_heap:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 2525 : 		_Pop_heap(_First, _Last, _Pred);
; 2526 : 	}

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z
_TEXT	SEGMENT
__Val$1 = -8						; size = 4
tv222 = -4						; size = 4
__Hole$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z PROC ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2488 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2489 : 	_Diff _Bottom = _Last - _First;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000d	2b cf		 sub	 ecx, edi
  0000f	c1 f9 02	 sar	 ecx, 2

; 2490 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00012	8b c1		 mov	 eax, ecx
  00014	89 4d 0c	 mov	 DWORD PTR __Last$[ebp], ecx
  00017	99		 cdq
  00018	2b c2		 sub	 eax, edx
  0001a	8b d0		 mov	 edx, eax
  0001c	d1 fa		 sar	 edx, 1
  0001e	85 d2		 test	 edx, edx
  00020	0f 8e 7c 00 00
	00		 jle	 $LN3@Make_heap

; 2489 : 	_Diff _Bottom = _Last - _First;

  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	8d 34 55 02 00
	00 00		 lea	 esi, DWORD PTR [edx*2+2]
  0002f	90		 npad	 1
$LL2@Make_heap:

; 2491 : 		{	// reheap top half, bottom to top
; 2492 : 		--_Hole;
; 2493 : 		_Ty _Val = _Move(*(_First + _Hole));

  00030	8b 44 97 fc	 mov	 eax, DWORD PTR [edi+edx*4-4]
  00034	4a		 dec	 edx
  00035	83 ee 02	 sub	 esi, 2
  00038	89 55 08	 mov	 DWORD PTR __Hole$1$[ebp], edx
  0003b	89 75 fc	 mov	 DWORD PTR tv222[ebp], esi

; 2494 : 		_Adjust_heap(_First, _Hole, _Bottom,

  0003e	8b da		 mov	 ebx, edx
  00040	89 45 f8	 mov	 DWORD PTR __Val$1[ebp], eax

; 2419 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

  00043	3b f1		 cmp	 esi, ecx
  00045	7d 2c		 jge	 SHORT $LN14@Make_heap
$LL15@Make_heap:

; 2420 : 		{	// move _Hole down to larger child
; 2421 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00047	8d 0c b7	 lea	 ecx, DWORD PTR [edi+esi*4]
  0004a	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	ff 55 10	 call	 DWORD PTR __Pred$[ebp]
  00052	83 c4 08	 add	 esp, 8
  00055	84 c0		 test	 al, al
  00057	74 01		 je	 SHORT $LN16@Make_heap

; 2422 : 			--_Idx;

  00059	4e		 dec	 esi
$LN16@Make_heap:

; 2423 : 		*(_First + _Hole) = _Move(*(_First + _Idx));

  0005a	8b 04 b7	 mov	 eax, DWORD PTR [edi+esi*4]
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00060	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax

; 2424 : 		_Hole = _Idx;

  00063	8b de		 mov	 ebx, esi
  00065	8d 34 75 02 00
	00 00		 lea	 esi, DWORD PTR [esi*2+2]
  0006c	3b f1		 cmp	 esi, ecx
  0006e	7c d7		 jl	 SHORT $LL15@Make_heap
  00070	8b 55 08	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN14@Make_heap:

; 2425 : 		}
; 2426 : 
; 2427 : 	if (_Idx == _Bottom)

  00073	3b f1		 cmp	 esi, ecx
  00075	75 0a		 jne	 SHORT $LN17@Make_heap

; 2428 : 		{	// only child at bottom, move _Hole down to it
; 2429 : 		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));

  00077	8b 44 8f fc	 mov	 eax, DWORD PTR [edi+ecx*4-4]
  0007b	89 04 9f	 mov	 DWORD PTR [edi+ebx*4], eax

; 2430 : 		_Hole = _Bottom - 1;

  0007e	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
$LN17@Make_heap:

; 2431 : 		}
; 2432 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00081	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00084	8d 45 f8	 lea	 eax, DWORD PTR __Val$1[ebp]
  00087	50		 push	 eax
  00088	52		 push	 edx
  00089	53		 push	 ebx
  0008a	57		 push	 edi
  0008b	e8 00 00 00 00	 call	 ??$_Push_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@HH$$QAPAU1@P6A_NABQAU1@2@Z@Z ; std::_Push_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 2490 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00090	8b 55 08	 mov	 edx, DWORD PTR __Hole$1$[ebp]

; 2431 : 		}
; 2432 : 	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);

  00093	83 c4 14	 add	 esp, 20			; 00000014H

; 2490 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

  00096	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00099	8b 75 fc	 mov	 esi, DWORD PTR tv222[ebp]
  0009c	85 d2		 test	 edx, edx
  0009e	7f 90		 jg	 SHORT $LL2@Make_heap
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
$LN3@Make_heap:
  000a2	5f		 pop	 edi

; 2495 : 			_Move(_Val), _Pred);
; 2496 : 		}
; 2497 : 	}

  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ENDP ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z PROC ; std::_Val_type<OBJECTSTRUCT * *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ENDP ; std::_Val_type<OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z PROC ; std::_Dist_type<OBJECTSTRUCT * *>, COMDAT

; 935  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 936  : 	}

  00002	c3		 ret	 0
??$_Dist_type@PAPAUOBJECTSTRUCT@@@std@@YAPAHPAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Dist_type<OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@X@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@X@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z PROC ; std::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAPAUOBJECTSTRUCT@@AAPAPAU0@X@?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@QAE@AAPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *>::pair<OBJECTSTRUCT * *,OBJECTSTRUCT * *><OBJECTSTRUCT * * &,OBJECTSTRUCT * * &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::iter_swap<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 27   : 	{	// swap *_Left and *_Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 30   : 
; 31   : 		// TEMPLATE FUNCTION swap
; 32   : template<class _Ty,
; 33   : 	size_t _Size> inline
; 34   : 	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
; 35   : 		_NOEXCEPT_OP(_NOEXCEPT_OP(swap(*_Left, *_Right)))
; 36   : 	{	// exchange arrays stored at _Left and _Right
; 37   : 	if (&_Left != &_Right)
; 38   : 		{	// worth swapping, swap ranges
; 39   : 		_Ty *_First1 = _Left;
; 40   : 		_Ty *_Last1 = _First1 + _Size;
; 41   : 		_Ty *_First2 = _Right;
; 42   : 		for (; _First1 != _Last1; ++_First1, ++_First2)
; 43   : 			_STD iter_swap(_First1, _First2);
; 44   : 		}
; 45   : 	}
; 46   : 
; 47   : template<class _Ty> inline
; 48   : 	void swap(_Ty& _Left, _Ty& _Right)
; 49   : 		_NOEXCEPT_OP(is_nothrow_move_constructible<_Ty>::value
; 50   : 			&& is_nothrow_move_assignable<_Ty>::value)
; 51   : 	{	// exchange values stored at _Left and _Right
; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 28   : 	swap(*_Left, *_Right);
; 29   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$iter_swap@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::iter_swap<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
tv410 = -8						; size = 4
__First$1$ = -4						; size = 4
tv409 = 8						; size = 4
__First$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z PROC ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3093 : 	{	// sort median element to middle

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3094 : 	if (40 < _Last - _First)

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	c1 f8 02	 sar	 eax, 2
  00015	57		 push	 edi

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00016	56		 push	 esi

; 3094 : 	if (40 < _Last - _First)

  00017	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001a	0f 8e 52 01 00
	00		 jle	 $LN2@Median

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00020	8b 7d 14	 mov	 edi, DWORD PTR __Pred$[ebp]

; 3095 : 		{	// median of nine
; 3096 : 		size_t _Step = (_Last - _First + 1) / 8;

  00023	40		 inc	 eax
  00024	99		 cdq
  00025	83 e2 07	 and	 edx, 7
  00028	03 c2		 add	 eax, edx
  0002a	c1 f8 03	 sar	 eax, 3

; 3097 : 		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);

  0002d	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00034	c1 e0 02	 shl	 eax, 2
  00037	89 4d f8	 mov	 DWORD PTR tv410[ebp], ecx
  0003a	89 45 08	 mov	 DWORD PTR tv409[ebp], eax
  0003d	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00040	53		 push	 ebx
  00041	ff d7		 call	 edi
  00043	83 c4 08	 add	 esp, 8
  00046	84 c0		 test	 al, al
  00048	74 08		 je	 SHORT $LN13@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0004a	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  0004c	8b 06		 mov	 eax, DWORD PTR [esi]
  0004e	89 03		 mov	 DWORD PTR [ebx], eax

; 54   : 	_Right = _Move(_Tmp);

  00050	89 0e		 mov	 DWORD PTR [esi], ecx
$LN13@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00052	8b 45 f8	 mov	 eax, DWORD PTR tv410[ebp]
  00055	03 c6		 add	 eax, esi
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	ff d7		 call	 edi
  0005b	83 c4 08	 add	 esp, 8
  0005e	84 c0		 test	 al, al
  00060	74 20		 je	 SHORT $LN41@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00062	8b 55 f8	 mov	 edx, DWORD PTR tv410[ebp]

; 53   : 	_Left = _Move(_Right);

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00067	56		 push	 esi
  00068	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00069	8b 0c 32	 mov	 ecx, DWORD PTR [edx+esi]

; 53   : 	_Left = _Move(_Right);

  0006c	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 54   : 	_Right = _Move(_Tmp);

  0006f	89 0b		 mov	 DWORD PTR [ebx], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00071	ff d7		 call	 edi
  00073	83 c4 08	 add	 esp, 8
  00076	84 c0		 test	 al, al
  00078	74 08		 je	 SHORT $LN41@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0007a	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  0007c	8b 06		 mov	 eax, DWORD PTR [esi]
  0007e	89 03		 mov	 DWORD PTR [ebx], eax

; 54   : 	_Right = _Move(_Tmp);

  00080	89 0e		 mov	 DWORD PTR [esi], ecx
$LN41@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3098 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00082	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  00085	8b c6		 mov	 eax, esi
  00087	2b 45 08	 sub	 eax, DWORD PTR tv409[ebp]

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0008a	50		 push	 eax
  0008b	56		 push	 esi

; 3098 : 		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  0008c	89 45 fc	 mov	 DWORD PTR __First$1$[ebp], eax

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0008f	ff d7		 call	 edi
  00091	83 c4 08	 add	 esp, 8
  00094	84 c0		 test	 al, al
  00096	74 0b		 je	 SHORT $LN60@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00098	8b 55 fc	 mov	 edx, DWORD PTR __First$1$[ebp]
  0009b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009d	8b 02		 mov	 eax, DWORD PTR [edx]
  0009f	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  000a1	89 0a		 mov	 DWORD PTR [edx], ecx
$LN60@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  000a3	8b 45 08	 mov	 eax, DWORD PTR tv409[ebp]
  000a6	03 c6		 add	 eax, esi
  000a8	56		 push	 esi
  000a9	50		 push	 eax
  000aa	ff d7		 call	 edi
  000ac	83 c4 08	 add	 esp, 8
  000af	84 c0		 test	 al, al
  000b1	74 25		 je	 SHORT $LN88@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  000b3	8b 55 08	 mov	 edx, DWORD PTR tv409[ebp]

; 53   : 	_Left = _Move(_Right);

  000b6	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000b8	ff 75 fc	 push	 DWORD PTR __First$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  000bb	8b 0c 32	 mov	 ecx, DWORD PTR [edx+esi]

; 53   : 	_Left = _Move(_Right);

  000be	89 04 32	 mov	 DWORD PTR [edx+esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000c1	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  000c2	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000c4	ff d7		 call	 edi
  000c6	83 c4 08	 add	 esp, 8
  000c9	84 c0		 test	 al, al
  000cb	74 0b		 je	 SHORT $LN88@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  000cd	8b 55 fc	 mov	 edx, DWORD PTR __First$1$[ebp]
  000d0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000d2	8b 02		 mov	 eax, DWORD PTR [edx]
  000d4	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  000d6	89 0a		 mov	 DWORD PTR [edx], ecx
$LN88@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3099 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000d8	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  000db	8b f8		 mov	 edi, eax
  000dd	2b 45 f8	 sub	 eax, DWORD PTR tv410[ebp]
  000e0	2b 7d 08	 sub	 edi, DWORD PTR tv409[ebp]

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000e3	50		 push	 eax
  000e4	57		 push	 edi

; 3099 : 		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000e5	89 45 08	 mov	 DWORD PTR __First$1$[ebp], eax

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  000e8	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000eb	83 c4 08	 add	 esp, 8
  000ee	84 c0		 test	 al, al
  000f0	74 0b		 je	 SHORT $LN107@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  000f2	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  000f5	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  000fb	89 0a		 mov	 DWORD PTR [edx], ecx
$LN107@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  000fd	57		 push	 edi
  000fe	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00101	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00104	83 c4 08	 add	 esp, 8
  00107	84 c0		 test	 al, al
  00109	74 24		 je	 SHORT $LN135@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0010b	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]

; 53   : 	_Left = _Move(_Right);

  0010e	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00110	ff 75 08	 push	 DWORD PTR __First$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00113	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  00115	89 02		 mov	 DWORD PTR [edx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00117	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  00118	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0011a	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0011d	83 c4 08	 add	 esp, 8
  00120	84 c0		 test	 al, al
  00122	74 0b		 je	 SHORT $LN135@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00124	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  00127	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00129	8b 02		 mov	 eax, DWORD PTR [edx]
  0012b	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  0012d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN135@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0012f	53		 push	 ebx
  00130	56		 push	 esi
  00131	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00134	83 c4 08	 add	 esp, 8
  00137	84 c0		 test	 al, al
  00139	74 08		 je	 SHORT $LN154@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0013b	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  0013d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0013f	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00141	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN154@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00143	56		 push	 esi
  00144	57		 push	 edi
  00145	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00148	83 c4 08	 add	 esp, 8
  0014b	84 c0		 test	 al, al
  0014d	74 61		 je	 SHORT $LN229@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0014f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 53   : 	_Left = _Move(_Right);

  00151	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00153	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00154	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00156	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  00157	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00159	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0015c	83 c4 08	 add	 esp, 8
  0015f	84 c0		 test	 al, al
  00161	74 4d		 je	 SHORT $LN229@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  00165	8b 03		 mov	 eax, DWORD PTR [ebx]
  00167	5f		 pop	 edi
  00168	89 06		 mov	 DWORD PTR [esi], eax
  0016a	5e		 pop	 esi

; 54   : 	_Right = _Move(_Tmp);

  0016b	89 0b		 mov	 DWORD PTR [ebx], ecx
  0016d	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3104 : 	}

  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
$LN2@Median:

; 3080 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00172	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  00175	57		 push	 edi
  00176	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00179	83 c4 08	 add	 esp, 8
  0017c	84 c0		 test	 al, al
  0017e	74 08		 je	 SHORT $LN201@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00180	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 53   : 	_Left = _Move(_Right);

  00182	8b 06		 mov	 eax, DWORD PTR [esi]
  00184	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  00186	89 0e		 mov	 DWORD PTR [esi], ecx
$LN201@Median:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3082 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00188	57		 push	 edi
  00189	53		 push	 ebx
  0018a	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  0018d	83 c4 08	 add	 esp, 8
  00190	84 c0		 test	 al, al
  00192	74 1c		 je	 SHORT $LN229@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00194	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  00196	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00198	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00199	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0019b	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  0019c	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3085 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0019e	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  001a1	83 c4 08	 add	 esp, 8
  001a4	84 c0		 test	 al, al
  001a6	74 08		 je	 SHORT $LN229@Median
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  001a8	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 53   : 	_Left = _Move(_Right);

  001aa	8b 06		 mov	 eax, DWORD PTR [esi]
  001ac	89 07		 mov	 DWORD PTR [edi], eax

; 54   : 	_Right = _Move(_Tmp);

  001ae	89 0e		 mov	 DWORD PTR [esi], ecx
$LN229@Median:
  001b0	5f		 pop	 edi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3104 : 	}

  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c3		 ret	 0
??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ENDP ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@PAPAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@PAPAU1@@Z PROC ; std::_Rechecked<OBJECTSTRUCT * *,OBJECTSTRUCT * *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAUOBJECTSTRUCT@@PAPAU1@@std@@YAAAPAPAUOBJECTSTRUCT@@AAPAPAU1@PAPAU1@@Z ENDP ; std::_Rechecked<OBJECTSTRUCT * *,OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z PROC ; std::_Uninit_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z ENDP ; std::_Uninit_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z PROC ; std::_Unchecked<OBJECTSTRUCT * *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@@Z ENDP ; std::_Unchecked<OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z PROC ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z ENDP ; std::allocator<OBJECTSTRUCT *>::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::_Insertion_sort<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3072 : 	{	// insertion sort [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3073 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00003	6a 00		 push	 0
  00005	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00008	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
  00013	83 c4 10	 add	 esp, 16			; 00000010H

; 3074 : 	}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$_Insertion_sort@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::_Insertion_sort<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2532 : 	_DEBUG_RANGE(_First, _Last);
; 2533 : 	_DEBUG_POINTER_IF(2 <= _Last - _First, _Pred);
; 2534 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2535 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00000	e9 00 00 00 00	 jmp	 ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
??$sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z PROC ; std::make_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 2502 : 	{	// make [_First, _Last) into a heap, using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2503 : 	_DEBUG_RANGE(_First, _Last);
; 2504 : 	if (2 <= _Last - _First)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000b	2b c2		 sub	 eax, edx
  0000d	83 e0 fc	 and	 eax, -4			; fffffffcH
  00010	83 f8 08	 cmp	 eax, 8
  00013	7c 11		 jl	 SHORT $LN2@make_heap

; 2505 : 		{	// validate _Pred and heapify
; 2506 : 		_DEBUG_POINTER(_Pred);
; 2507 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,

  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  0001c	51		 push	 ecx
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00023	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@make_heap:

; 2508 : 			_Dist_type(_First), _Val_type(_First));
; 2509 : 		}
; 2510 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$make_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ENDP ; std::make_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z
_TEXT	SEGMENT
tv460 = -12						; size = 4
__Gfirst$1$ = -12					; size = 4
__Glast$1$ = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z PROC ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3110 : 	{	// partition [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3111 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00006	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi

; 3112 : 	_Median(_First, _Mid, _Last - 1, _Pred);

  0000d	8b 75 14	 mov	 esi, DWORD PTR __Pred$[ebp]
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  00014	2b c7		 sub	 eax, edi
  00016	c1 f8 02	 sar	 eax, 2
  00019	99		 cdq
  0001a	2b c2		 sub	 eax, edx
  0001c	d1 f8		 sar	 eax, 1
  0001e	56		 push	 esi
  0001f	8d 1c 87	 lea	 ebx, DWORD PTR [edi+eax*4]
  00022	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00025	50		 push	 eax
  00026	53		 push	 ebx
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??$_Median@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@00P6A_NABQAU1@1@Z@Z ; std::_Median<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 3113 : 	_RanIt _Pfirst = _Mid;
; 3114 : 	_RanIt _Plast = _Pfirst + 1;

  00030	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  00033	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi

; 3115 : 
; 3116 : 	while (_First < _Pfirst
; 3117 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 3118 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  00036	39 5d 0c	 cmp	 DWORD PTR __First$[ebp], ebx
  00039	73 2d		 jae	 SHORT $LN142@Unguarded_
  0003b	8b 7d 0c	 mov	 edi, DWORD PTR __First$[ebp]
  0003e	66 90		 npad	 2
$LL2@Unguarded_:
  00040	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00043	53		 push	 ebx
  00044	50		 push	 eax
  00045	89 45 f4	 mov	 DWORD PTR tv460[ebp], eax
  00048	ff d6		 call	 esi
  0004a	83 c4 08	 add	 esp, 8
  0004d	84 c0		 test	 al, al
  0004f	75 14		 jne	 SHORT $LN165@Unguarded_
  00051	ff 75 f4	 push	 DWORD PTR tv460[ebp]
  00054	53		 push	 ebx
  00055	ff d6		 call	 esi
  00057	83 c4 08	 add	 esp, 8
  0005a	84 c0		 test	 al, al
  0005c	75 07		 jne	 SHORT $LN165@Unguarded_

; 3119 : 		--_Pfirst;

  0005e	8b 5d f4	 mov	 ebx, DWORD PTR tv460[ebp]
  00061	3b fb		 cmp	 edi, ebx
  00063	72 db		 jb	 SHORT $LL2@Unguarded_
$LN165@Unguarded_:
  00065	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
$LN142@Unguarded_:

; 3120 : 	while (_Plast < _Last
; 3121 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3122 : 		&& !_Pred(*_Pfirst, *_Plast))

  00068	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0006b	3b f8		 cmp	 edi, eax
  0006d	73 29		 jae	 SHORT $LN5@Unguarded_
  0006f	90		 npad	 1
$LL4@Unguarded_:
  00070	53		 push	 ebx
  00071	57		 push	 edi
  00072	ff d6		 call	 esi
  00074	83 c4 08	 add	 esp, 8
  00077	84 c0		 test	 al, al
  00079	75 17		 jne	 SHORT $LN170@Unguarded_
  0007b	57		 push	 edi
  0007c	53		 push	 ebx
  0007d	ff d6		 call	 esi
  0007f	83 c4 08	 add	 esp, 8
  00082	84 c0		 test	 al, al
  00084	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00087	75 0c		 jne	 SHORT $LN166@Unguarded_

; 3123 : 		++_Plast;

  00089	83 c7 04	 add	 edi, 4
  0008c	3b f8		 cmp	 edi, eax
  0008e	72 e0		 jb	 SHORT $LL4@Unguarded_

; 3120 : 	while (_Plast < _Last
; 3121 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 3122 : 		&& !_Pred(*_Pfirst, *_Plast))

  00090	eb 03		 jmp	 SHORT $LN166@Unguarded_
$LN170@Unguarded_:
  00092	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
$LN166@Unguarded_:
  00095	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN5@Unguarded_:

; 3126 : 	_RanIt _Glast = _Pfirst;

  00098	8b d3		 mov	 edx, ebx
  0009a	8b f7		 mov	 esi, edi
  0009c	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN173@Unguarded_:

; 3124 : 
; 3125 : 	_RanIt _Gfirst = _Plast;

  0009f	89 75 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], esi
$LL6@Unguarded_:

; 3130 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000a2	3b f0		 cmp	 esi, eax
  000a4	73 3c		 jae	 SHORT $LN146@Unguarded_
$LL11@Unguarded_:

; 3131 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  000a6	56		 push	 esi
  000a7	53		 push	 ebx
  000a8	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000ab	83 c4 08	 add	 esp, 8
  000ae	84 c0		 test	 al, al
  000b0	75 1f		 jne	 SHORT $LN9@Unguarded_

; 3132 : 				;
; 3133 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000b7	83 c4 08	 add	 esp, 8
  000ba	84 c0		 test	 al, al
  000bc	75 1b		 jne	 SHORT $LN167@Unguarded_

; 3134 : 				break;
; 3135 : 			else if (_Plast++ != _Gfirst)

  000be	8b c7		 mov	 eax, edi
  000c0	83 c7 04	 add	 edi, 4
  000c3	3b c6		 cmp	 eax, esi
  000c5	74 0a		 je	 SHORT $LN9@Unguarded_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  000c7	8b 4f fc	 mov	 ecx, DWORD PTR [edi-4]

; 53   : 	_Left = _Move(_Right);

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 54   : 	_Right = _Move(_Tmp);

  000cf	89 0e		 mov	 DWORD PTR [esi], ecx
$LN9@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3130 : 		for (; _Gfirst < _Last; ++_Gfirst)

  000d1	83 c6 04	 add	 esi, 4
  000d4	3b 75 10	 cmp	 esi, DWORD PTR __Last$[ebp]
  000d7	72 cd		 jb	 SHORT $LL11@Unguarded_
$LN167@Unguarded_:
  000d9	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]
  000dc	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  000df	89 75 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], esi
$LN146@Unguarded_:

; 3137 : 		for (; _First < _Glast; --_Glast)

  000e2	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000e5	3b d0		 cmp	 edx, eax
  000e7	76 4e		 jbe	 SHORT $LN172@Unguarded_
  000e9	8b 75 f8	 mov	 esi, DWORD PTR __Glast$1$[ebp]
  000ec	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  000ef	90		 npad	 1
$LL14@Unguarded_:

; 3138 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  000f0	53		 push	 ebx
  000f1	57		 push	 edi
  000f2	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  000f5	83 c4 08	 add	 esp, 8
  000f8	84 c0		 test	 al, al
  000fa	75 1b		 jne	 SHORT $LN12@Unguarded_

; 3139 : 				;
; 3140 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  000fc	57		 push	 edi
  000fd	53		 push	 ebx
  000fe	ff 55 14	 call	 DWORD PTR __Pred$[ebp]
  00101	83 c4 08	 add	 esp, 8
  00104	84 c0		 test	 al, al
  00106	75 1e		 jne	 SHORT $LN171@Unguarded_

; 3141 : 				break;
; 3142 : 			else if (--_Pfirst != _Glast - 1)

  00108	83 eb 04	 sub	 ebx, 4
  0010b	3b df		 cmp	 ebx, edi
  0010d	74 08		 je	 SHORT $LN12@Unguarded_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0010f	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  00111	8b 07		 mov	 eax, DWORD PTR [edi]
  00113	89 03		 mov	 DWORD PTR [ebx], eax

; 54   : 	_Right = _Move(_Tmp);

  00115	89 0f		 mov	 DWORD PTR [edi], ecx
$LN12@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3137 : 		for (; _First < _Glast; --_Glast)

  00117	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0011a	83 ee 04	 sub	 esi, 4
  0011d	83 ef 04	 sub	 edi, 4
  00120	3b c6		 cmp	 eax, esi
  00122	72 cc		 jb	 SHORT $LL14@Unguarded_
  00124	eb 03		 jmp	 SHORT $LN168@Unguarded_
$LN171@Unguarded_:
  00126	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
$LN168@Unguarded_:
  00129	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  0012c	89 75 f8	 mov	 DWORD PTR __Glast$1$[ebp], esi
  0012f	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]

; 3143 : 				_STD iter_swap(_Pfirst, _Glast - 1);
; 3144 : 		if (_Glast == _First && _Gfirst == _Last)

  00132	3b d0		 cmp	 edx, eax
  00134	8b 75 f4	 mov	 esi, DWORD PTR __Gfirst$1$[ebp]
$LN172@Unguarded_:
  00137	75 37		 jne	 SHORT $LN26@Unguarded_
  00139	3b 75 10	 cmp	 esi, DWORD PTR __Last$[ebp]
  0013c	74 76		 je	 SHORT $LN148@Unguarded_

; 3145 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
; 3146 : 
; 3147 : 		if (_Glast == _First)
; 3148 : 			{	// no room at bottom, rotate pivot upward
; 3149 : 			if (_Plast != _Gfirst)

  0013e	3b fe		 cmp	 edi, esi
  00140	74 08		 je	 SHORT $LN73@Unguarded_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00142	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  00144	8b 07		 mov	 eax, DWORD PTR [edi]
  00146	89 03		 mov	 DWORD PTR [ebx], eax

; 54   : 	_Right = _Move(_Tmp);

  00148	89 0f		 mov	 DWORD PTR [edi], ecx
$LN73@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3151 : 			++_Plast;

  0014a	83 c7 04	 add	 edi, 4

; 3152 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  0014d	8b d3		 mov	 edx, ebx
  0014f	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  00152	83 c3 04	 add	 ebx, 4
  00155	8b fe		 mov	 edi, esi
  00157	83 c6 04	 add	 esi, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  0015a	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0015c	8b 07		 mov	 eax, DWORD PTR [edi]
  0015e	89 02		 mov	 DWORD PTR [edx], eax

; 29   : 	}

  00160	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]
  00163	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]

; 54   : 	_Right = _Move(_Tmp);

  00166	89 0f		 mov	 DWORD PTR [edi], ecx

; 29   : 	}

  00168	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  0016b	e9 2f ff ff ff	 jmp	 $LN173@Unguarded_
$LN26@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3156 : 			if (--_Glast != --_Pfirst)

  00170	83 ea 04	 sub	 edx, 4
  00173	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
  00176	3b 75 10	 cmp	 esi, DWORD PTR __Last$[ebp]
  00179	75 26		 jne	 SHORT $LN29@Unguarded_
  0017b	83 eb 04	 sub	 ebx, 4
  0017e	3b d3		 cmp	 edx, ebx
  00180	74 08		 je	 SHORT $LN101@Unguarded_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00182	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  00184	8b 03		 mov	 eax, DWORD PTR [ebx]
  00186	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00188	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN101@Unguarded_:

; 53   : 	_Left = _Move(_Right);

  0018a	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3158 : 			_STD iter_swap(_Pfirst, --_Plast);

  0018d	83 ef 04	 sub	 edi, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  00190	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 53   : 	_Left = _Move(_Right);

  00192	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3160 : 		else

  00194	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00197	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  0019a	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3160 : 		else

  0019c	e9 01 ff ff ff	 jmp	 $LL6@Unguarded_
$LN29@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 52   : 	_Ty _Tmp = _Move(_Left);

  001a1	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 53   : 	_Left = _Move(_Right);

  001a3	8b 02		 mov	 eax, DWORD PTR [edx]
  001a5	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3161 : 			_STD iter_swap(_Gfirst++, --_Glast);

  001a7	83 c6 04	 add	 esi, 4

; 3162 : 		}

  001aa	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 54   : 	_Right = _Move(_Tmp);

  001ad	89 0a		 mov	 DWORD PTR [edx], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3162 : 		}

  001af	e9 eb fe ff ff	 jmp	 $LN173@Unguarded_
$LN148@Unguarded_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  001b4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : 				second(_STD forward<_Other2>(_Val2))

  001b7	89 78 04	 mov	 DWORD PTR [eax+4], edi
  001ba	5f		 pop	 edi
  001bb	5e		 pop	 esi

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  001bc	89 18		 mov	 DWORD PTR [eax], ebx
  001be	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3163 : 	}

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ENDP ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z PROC ; std::_Uninitialized_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAUOBJECTSTRUCT@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<OBJECTSTRUCT * *,OBJECTSTRUCT * *,std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >, COMDAT

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z PROC ; std::_Ptr_cat<OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAUOBJECTSTRUCT@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUOBJECTSTRUCT@@0@Z ENDP ; std::_Ptr_cat<OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z PROC ; std::forward<std::allocator<OBJECTSTRUCT *> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<OBJECTSTRUCT *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z PROC ; std::forward<OBJECTSTRUCT * const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAUOBJECTSTRUCT@@@std@@YAABQAUOBJECTSTRUCT@@ABQAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@AAPAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@AAPAU3@@Z PROC ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAXAAV?$allocator@PAUOBJECTSTRUCT@@@1@PAPAUOBJECTSTRUCT@@AAPAU3@@Z ENDP ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAUOBJECTSTRUCT@@@std@@YAAAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<OBJECTSTRUCT * const>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<OBJECTSTRUCT * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z
_TEXT	SEGMENT
__Mid$1 = -8						; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z PROC ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3169 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3170 : 	_Diff _Count;
; 3171 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  00003	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000e	8b ce		 mov	 ecx, esi
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00014	2b cf		 sub	 ecx, edi
  00016	c1 f9 02	 sar	 ecx, 2
  00019	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0001c	7e 72		 jle	 SHORT $LN7@Sort
  0001e	8b 5d 10	 mov	 ebx, DWORD PTR __Ideal$[ebp]
$LL2@Sort:
  00021	85 db		 test	 ebx, ebx
  00023	0f 8e 80 00 00
	00		 jle	 $LN3@Sort

; 3172 : 		{	// divide and conquer by quicksort
; 3173 : 		pair<_RanIt, _RanIt> _Mid =
; 3174 : 			_Unguarded_partition(_First, _Last, _Pred);

  00029	52		 push	 edx
  0002a	56		 push	 esi
  0002b	8d 45 f8	 lea	 eax, DWORD PTR __Mid$1[ebp]
  0002e	57		 push	 edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??$_Unguarded_partition@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YA?AU?$pair@PAPAUOBJECTSTRUCT@@PAPAU1@@0@PAPAUOBJECTSTRUCT@@0P6A_NABQAU2@1@Z@Z ; std::_Unguarded_partition<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3175 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00035	8b c3		 mov	 eax, ebx

; 3176 : 
; 3177 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00037	8b ce		 mov	 ecx, esi
  00039	99		 cdq
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	2b c2		 sub	 eax, edx
  0003f	8b d8		 mov	 ebx, eax
  00041	d1 fb		 sar	 ebx, 1
  00043	8b c3		 mov	 eax, ebx
  00045	99		 cdq
  00046	2b c2		 sub	 eax, edx
  00048	8b 55 fc	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0004b	d1 f8		 sar	 eax, 1
  0004d	2b ca		 sub	 ecx, edx
  0004f	03 d8		 add	 ebx, eax
  00051	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00054	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00057	2b c7		 sub	 eax, edi
  00059	83 e0 fc	 and	 eax, -4			; fffffffcH
  0005c	3b c1		 cmp	 eax, ecx

; 3178 : 			{	// loop on second half
; 3179 : 			_Sort(_First, _Mid.first, _Ideal, _Pred);

  0005e	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  00061	50		 push	 eax
  00062	53		 push	 ebx
  00063	7d 0f		 jge	 SHORT $LN5@Sort
  00065	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00068	50		 push	 eax
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3180 : 			_First = _Mid.second;

  0006f	8b 7d fc	 mov	 edi, DWORD PTR __Mid$1[ebp+4]

; 3181 : 			}
; 3182 : 		else

  00072	eb 0a		 jmp	 SHORT $LN35@Sort
$LN5@Sort:

; 3183 : 			{	// loop on first half
; 3184 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  00074	56		 push	 esi
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>

; 3185 : 			_Last = _Mid.first;

  0007b	8b 75 f8	 mov	 esi, DWORD PTR __Mid$1[ebp]
$LN35@Sort:

; 3170 : 	_Diff _Count;
; 3171 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

  0007e	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00081	8b ce		 mov	 ecx, esi
  00083	2b cf		 sub	 ecx, edi

; 3183 : 			{	// loop on first half
; 3184 : 			_Sort(_Mid.second, _Last, _Ideal, _Pred);

  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	c1 f9 02	 sar	 ecx, 2
  0008b	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0008e	7f 91		 jg	 SHORT $LL2@Sort
$LN7@Sort:

; 3190 : 		{	// heap sort if too many divisions
; 3191 : 		_STD make_heap(_First, _Last, _Pred);
; 3192 : 		_STD sort_heap(_First, _Last, _Pred);
; 3193 : 		}
; 3194 : 	else if (2 <= _Count)

  00090	83 f9 02	 cmp	 ecx, 2
  00093	7c 0d		 jl	 SHORT $LN9@Sort

; 2536 : 	}
; 2537 : 
; 2538 : 		// TEMPLATE FUNCTION sort_heap
; 2539 : template<class _RanIt> inline
; 2540 : 	void sort_heap(_RanIt _First, _RanIt _Last)
; 2541 : 	{	// order heap by repeatedly popping, using operator<
; 2542 : 	_STD sort_heap(_First, _Last, less<>());
; 2543 : 	}
; 2544 : 
; 2545 : 		// TEMPLATE FUNCTION lower_bound WITH PRED
; 2546 : template<class _FwdIt,
; 2547 : 	class _Ty,
; 2548 : 	class _Diff,
; 2549 : 	class _Pr> inline
; 2550 : 	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
; 2551 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2552 : 	{	// find first element not before _Val, using _Pred
; 2553 : 	_Diff _Count = 0;
; 2554 : 	_Distance(_First, _Last, _Count);
; 2555 : 
; 2556 : 	while (0 < _Count)
; 2557 : 		{	// divide and conquer, find half that contains answer
; 2558 : 		_Diff _Count2 = _Count / 2;
; 2559 : 		_FwdIt _Mid = _First;
; 2560 : 		_STD advance(_Mid, _Count2);
; 2561 : 
; 2562 : 		if (_Pred(*_Mid, _Val))
; 2563 : 			{	// try top half
; 2564 : 			_First = ++_Mid;
; 2565 : 			_Count -= _Count2 + 1;
; 2566 : 			}
; 2567 : 		else
; 2568 : 			_Count = _Count2;
; 2569 : 		}
; 2570 : 	return (_First);
; 2571 : 	}
; 2572 : 
; 2573 : template<class _FwdIt,
; 2574 : 	class _Ty,
; 2575 : 	class _Pr> inline
; 2576 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
; 2577 : 		const _Ty& _Val, _Pr _Pred)
; 2578 : 	{	// find first element not before _Val, using _Pred
; 2579 : 	return (_Rechecked(_First,
; 2580 : 		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2581 : 			_Dist_type(_First))));
; 2582 : 	}
; 2583 : 
; 2584 : 		// TEMPLATE FUNCTION lower_bound
; 2585 : template<class _FwdIt,
; 2586 : 	class _Ty> inline
; 2587 : 	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2588 : 	{	// find first element not before _Val, using operator<
; 2589 : 	return (_STD lower_bound(_First, _Last, _Val, less<>()));
; 2590 : 	}
; 2591 : 
; 2592 : 		// TEMPLATE FUNCTION upper_bound WITH PRED
; 2593 : template<class _FwdIt,
; 2594 : 	class _Ty,
; 2595 : 	class _Diff,
; 2596 : 	class _Pr> inline
; 2597 : 	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
; 2598 : 		const _Ty& _Val, _Pr _Pred, _Diff *)
; 2599 : 	{	// find first element that _Val is before, using _Pred
; 2600 : 	_Diff _Count = 0;
; 2601 : 	_Distance(_First, _Last, _Count);
; 2602 : 
; 2603 : 	while (0 < _Count)
; 2604 : 		{	// divide and conquer, find half that contains answer
; 2605 : 		_Diff _Count2 = _Count / 2;
; 2606 : 		_FwdIt _Mid = _First;
; 2607 : 		_STD advance(_Mid, _Count2);
; 2608 : 
; 2609 : 		if (!_Pred(_Val, *_Mid))
; 2610 : 			{	// try top half
; 2611 : 			_First = ++_Mid;
; 2612 : 			_Count -= _Count2 + 1;
; 2613 : 			}
; 2614 : 		else
; 2615 : 			_Count = _Count2;
; 2616 : 		}
; 2617 : 	return (_First);
; 2618 : 	}
; 2619 : 
; 2620 : template<class _FwdIt,
; 2621 : 	class _Ty,
; 2622 : 	class _Pr> inline
; 2623 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
; 2624 : 		const _Ty& _Val, _Pr _Pred)
; 2625 : 	{	// find first element that _Val is before, using _Pred
; 2626 : 	return (_Rechecked(_First,
; 2627 : 		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
; 2628 : 			_Dist_type(_First))));
; 2629 : 	}
; 2630 : 
; 2631 : 		// TEMPLATE FUNCTION upper_bound
; 2632 : template<class _FwdIt,
; 2633 : 	class _Ty> inline
; 2634 : 	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2635 : 	{	// find first element that _Val is before, using operator<
; 2636 : 	return (_STD upper_bound(_First, _Last, _Val, less<>()));
; 2637 : 	}
; 2638 : 
; 2639 : 		// TEMPLATE FUNCTION equal_range WITH PRED
; 2640 : template<class _FwdIt,
; 2641 : 	class _Ty,
; 2642 : 	class _Diff,
; 2643 : 	class _Pr> inline
; 2644 : 	pair<_FwdIt, _FwdIt>
; 2645 : 		_Equal_range(_FwdIt _First, _FwdIt _Last,
; 2646 : 			const _Ty& _Val, _Pr _Pred, _Diff *)
; 2647 : 	{	// find range equivalent to _Val, using _Pred
; 2648 : 	_Diff _Count = 0;
; 2649 : 	_Distance(_First, _Last, _Count);
; 2650 : 
; 2651 : 	while (0 < _Count)
; 2652 : 		{	// divide and conquer, check midpoint
; 2653 : 		_Diff _Count2 = _Count / 2;
; 2654 : 		_FwdIt _Mid = _First;
; 2655 : 		_STD advance(_Mid, _Count2);
; 2656 : 
; 2657 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))
; 2658 : 			{	// range begins above _Mid, loop
; 2659 : 			_First = ++_Mid;
; 2660 : 			_Count -= _Count2 + 1;
; 2661 : 			}
; 2662 : 		else if (_Pred(_Val, *_Mid))
; 2663 : 			_Count = _Count2;	// range in first half, loop
; 2664 : 		else
; 2665 : 			{	// range straddles _Mid, find each end and return
; 2666 : 			_FwdIt _First2 = _STD lower_bound(_First, _Mid, _Val, _Pred);
; 2667 : 			_STD advance(_First, _Count);
; 2668 : 			_FwdIt _Last2 = _STD upper_bound(++_Mid, _First, _Val, _Pred);
; 2669 : 			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
; 2670 : 			}
; 2671 : 		}
; 2672 : 
; 2673 : 	return (pair<_FwdIt, _FwdIt>(_First, _First));	// empty range
; 2674 : 	}
; 2675 : 
; 2676 : template<class _FwdIt,
; 2677 : 	class _Ty,
; 2678 : 	class _Pr> inline
; 2679 : 	pair<_FwdIt, _FwdIt>
; 2680 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2681 : 			const _Ty& _Val, _Pr _Pred)
; 2682 : 	{	// find range equivalent to _Val, using _Pred
; 2683 : 	pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(
; 2684 : 		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
; 2685 : 			_Val, _Pred, _Dist_type(_First)));
; 2686 : 	return (pair<_FwdIt, _FwdIt>(
; 2687 : 		_Rechecked(_First, _Ans.first),
; 2688 : 		_Rechecked(_Last, _Ans.second)));
; 2689 : 	}
; 2690 : 
; 2691 : 		// TEMPLATE FUNCTION equal_range
; 2692 : template<class _FwdIt,
; 2693 : 	class _Ty> inline
; 2694 : 	pair<_FwdIt, _FwdIt>
; 2695 : 		equal_range(_FwdIt _First, _FwdIt _Last,
; 2696 : 			const _Ty& _Val)
; 2697 : 	{	// find range equivalent to _Val, using operator<
; 2698 : 	return (_STD equal_range(_First, _Last, _Val, less<>()));
; 2699 : 	}
; 2700 : 
; 2701 : 		// TEMPLATE FUNCTION binary_search WITH PRED
; 2702 : template<class _FwdIt,
; 2703 : 	class _Ty,
; 2704 : 	class _Pr> inline
; 2705 : 	bool binary_search(_FwdIt _First, _FwdIt _Last,
; 2706 : 		const _Ty& _Val, _Pr _Pred)
; 2707 : 	{	// test if _Val equivalent to some element, using _Pred
; 2708 : 	_First = _STD lower_bound(_First, _Last, _Val, _Pred);
; 2709 : 	return (_First != _Last && !_Pred(_Val, *_First));
; 2710 : 	}
; 2711 : 
; 2712 : 		// TEMPLATE FUNCTION binary_search
; 2713 : template<class _FwdIt,
; 2714 : 	class _Ty> inline
; 2715 : 	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
; 2716 : 	{	// test if _Val equivalent to some element, using operator<
; 2717 : 	return (_STD binary_search(_First, _Last, _Val, less<>()));
; 2718 : 	}
; 2719 : 
; 2720 : 		// TEMPLATE FUNCTION merge WITH PRED
; 2721 : template<class _InIt1,
; 2722 : 	class _InIt2,
; 2723 : 	class _OutIt,
; 2724 : 	class _Pr> inline
; 2725 : 	_OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
; 2726 : 		_InIt2 _First2, _InIt2 _Last2,
; 2727 : 		_OutIt _Dest, _Pr _Pred)
; 2728 : 	{	// copy merging ranges, both using _Pred
; 2729 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2730 : 		for (; ; )
; 2731 : 			{	// merge either first or second
; 2732 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2733 : 				{	// merge first
; 2734 : 				*_Dest++ = *_First2++;
; 2735 : 				if (_First2 == _Last2)
; 2736 : 					break;
; 2737 : 				}
; 2738 : 			else
; 2739 : 				{	// merge second
; 2740 : 				*_Dest++ = *_First1++;
; 2741 : 				if (_First1 == _Last1)
; 2742 : 					break;
; 2743 : 				}
; 2744 : 			}
; 2745 : 
; 2746 : 	_Dest = _Copy_impl(_First1, _Last1, _Dest);	// copy any tail
; 2747 : 	return (_Copy_impl(_First2, _Last2, _Dest));
; 2748 : 	}
; 2749 : 
; 2750 :  #if _ITERATOR_DEBUG_LEVEL == 0
; 2751 : template<class _InIt1,
; 2752 : 	class _InIt2,
; 2753 : 	class _OutIt,
; 2754 : 	class _Pr> inline
; 2755 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2756 : 		_InIt2 _First2, _InIt2 _Last2,
; 2757 : 		_OutIt _Dest, _Pr _Pred)
; 2758 : 	{	// copy merging ranges, both using _Pred
; 2759 : 	return (_Merge0(_Unchecked(_First1), _Unchecked(_Last1),
; 2760 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2761 : 		_Dest, _Pred));
; 2762 : 	}
; 2763 : 
; 2764 :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2765 : template<class _InIt1,
; 2766 : 	class _InIt2,
; 2767 : 	class _OutIt,
; 2768 : 	class _Pr> inline
; 2769 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2770 : 		_InIt2 _First2, _InIt2 _Last2,
; 2771 : 		_OutIt _Dest, _Pr _Pred, input_iterator_tag,
; 2772 : 		input_iterator_tag, _Mutable_iterator_tag)
; 2773 : 	{	// copy merging ranges, both using _Pred, arbitrary iterators
; 2774 : 	return (_Merge0(_First1, _Last1,
; 2775 : 		_First2, _Last2,
; 2776 : 		_Dest, _Pred));
; 2777 : 	}
; 2778 : 
; 2779 : template<class _InIt1,
; 2780 : 	class _InIt2,
; 2781 : 	class _OutIt,
; 2782 : 	class _Pr> inline
; 2783 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2784 : 		_InIt2 _First2, _InIt2 _Last2,
; 2785 : 		_OutIt _Dest, _Pr _Pred, random_access_iterator_tag,
; 2786 : 		random_access_iterator_tag, random_access_iterator_tag)
; 2787 : 	{	// copy merging ranges, both using _Pred, random-access iterators
; 2788 : 	_OutIt _Ans = _Dest + (_Last1 - _First1)
; 2789 : 		+ (_Last2 - _First2);	// also checks range
; 2790 : 	_Merge0(_First1, _Last1,
; 2791 : 		_First2, _Last2,
; 2792 : 		_Dest, _Pred);
; 2793 : 	return (_Ans);
; 2794 : 	}
; 2795 : 
; 2796 : template<class _InIt1,
; 2797 : 	class _InIt2,
; 2798 : 	class _OutIt,
; 2799 : 	class _Pr> inline
; 2800 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2801 : 		_InIt2 _First2, _InIt2 _Last2,
; 2802 : 		_OutIt _Dest, _Pr _Pred, true_type)
; 2803 : 	{	// copy merging ranges, both using _Pred, checked dest
; 2804 : 	return (_Merge2(_First1, _Last1,
; 2805 : 		_First2, _Last2,
; 2806 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2807 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2808 : 	}
; 2809 : 
; 2810 : template<class _InIt1,
; 2811 : 	class _InIt2,
; 2812 : 	class _OutIt,
; 2813 : 	class _Pr> inline
; 2814 : _SCL_INSECURE_DEPRECATE
; 2815 : 	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
; 2816 : 		_InIt2 _First2, _InIt2 _Last2,
; 2817 : 		_OutIt _Dest, _Pr _Pred, false_type)
; 2818 : 	{	// copy merging ranges, both using _Pred, unchecked dest
; 2819 : 	return (_Merge2(_First1, _Last1,
; 2820 : 		_First2, _Last2,
; 2821 : 		_Dest, _Pred, _Iter_cat(_First1),
; 2822 : 		_Iter_cat(_First2), _Iter_cat(_Dest)));
; 2823 : 	}
; 2824 : 
; 2825 : template<class _InIt1,
; 2826 : 	class _InIt2,
; 2827 : 	class _OutIt,
; 2828 : 	class _Pr> inline
; 2829 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2830 : 		_InIt2 _First2, _InIt2 _Last2,
; 2831 : 		_OutIt _Dest, _Pr _Pred)
; 2832 : 	{	// copy merging ranges, both using _Pred
; 2833 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2834 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2835 : 	_DEBUG_POINTER_IF(_First1 != _Last1 || _First2 != _Last2, _Dest);
; 2836 : 	return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),
; 2837 : 		_Unchecked(_First2), _Unchecked(_Last2),
; 2838 : 		_Dest, _Pred, _Is_checked(_Dest)));
; 2839 : 	}
; 2840 : 
; 2841 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2842 : template<class _InIt1,
; 2843 : 	class _InIt2,
; 2844 : 	class _OutTy,
; 2845 : 	size_t _OutSize,
; 2846 : 	class _Pr> inline
; 2847 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2848 : 		_InIt2 _First2, _InIt2 _Last2,
; 2849 : 		_OutTy (&_Dest)[_OutSize], _Pr _Pred)
; 2850 : 	{	// copy merging ranges, both using _Pred, array dest
; 2851 : 	return (_Unchecked(
; 2852 : 		_STD merge(_First1, _Last1,
; 2853 : 			_First2, _Last2,
; 2854 : 			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
; 2855 : 	}
; 2856 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2857 :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 2858 : 
; 2859 : 		// TEMPLATE FUNCTION merge
; 2860 : template<class _InIt1,
; 2861 : 	class _InIt2,
; 2862 : 	class _OutIt> inline
; 2863 : 	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
; 2864 : 		_InIt2 _First2, _InIt2 _Last2,
; 2865 : 		_OutIt _Dest)
; 2866 : 	{	// copy merging ranges, both using operator<
; 2867 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2868 : 		less<>()));
; 2869 : 	}
; 2870 : 
; 2871 :  #if _ITERATOR_DEBUG_ARRAY_OVERLOADS
; 2872 : template<class _InIt1,
; 2873 : 	class _InIt2,
; 2874 : 	class _OutTy,
; 2875 : 	size_t _OutSize> inline
; 2876 : 	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
; 2877 : 		_InIt2 _First2, _InIt2 _Last2,
; 2878 : 		_OutTy (&_Dest)[_OutSize])
; 2879 : 	{	// copy merging ranges, both using operator<, array dest
; 2880 : 	return (_STD merge(_First1, _Last1, _First2, _Last2, _Dest,
; 2881 : 		less<>()));
; 2882 : 	}
; 2883 :  #endif /* _ITERATOR_DEBUG_ARRAY_OVERLOADS */
; 2884 : 
; 2885 : 		// TEMPLATE FUNCTION inplace_merge WITH PRED
; 2886 : template<class _BidIt1,
; 2887 : 	class _BidIt2,
; 2888 : 	class _BidIt3,
; 2889 : 	class _Pr> inline
; 2890 : 	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
; 2891 : 		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred,
; 2892 : 		bool _In_place = false)
; 2893 : 	{	// merge backwards to _Dest, using _Pred
; 2894 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2895 : 		for (; ; )
; 2896 : 			{	// merge either first or second
; 2897 : 			if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))
; 2898 : 				{	// merge first
; 2899 : 				*--_Dest = _Move(*_Last1);
; 2900 : 				++_Last2;
; 2901 : 				if (_First1 == _Last1)
; 2902 : 					break;
; 2903 : 				}
; 2904 : 			else
; 2905 : 				{	// merge second
; 2906 : 				*--_Dest = _Move(*_Last2);
; 2907 : 				++_Last1;
; 2908 : 				if (_First2 == _Last2)
; 2909 : 					break;
; 2910 : 				}
; 2911 : 			}
; 2912 : 
; 2913 : 	_Dest = _Move_backward(_First2, _Last2, _Dest);	// move any tail
; 2914 : 	if (!_In_place)
; 2915 : 		_Dest = _Move_backward(_First1, _Last1, _Dest);
; 2916 : 	return (_Dest);
; 2917 : 	}
; 2918 : 
; 2919 : template<class _InIt1,
; 2920 : 	class _InIt2,
; 2921 : 	class _OutIt,
; 2922 : 	class _Pr> inline
; 2923 : 	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
; 2924 : 		_InIt2 _First2, _InIt2 _Last2,
; 2925 : 		_OutIt _Dest, _Pr _Pred, bool _In_place = false)
; 2926 : 	{	// move merging ranges, both using _Pred
; 2927 : 	if (_First1 != _Last1 && _First2 != _Last2)
; 2928 : 		for (; ; )
; 2929 : 			{	// merge either first or second
; 2930 : 			if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 2931 : 				{	// merge first
; 2932 : 				*_Dest++ = _Move(*_First2++);
; 2933 : 				if (_First2 == _Last2)
; 2934 : 					break;
; 2935 : 				}
; 2936 : 			else
; 2937 : 				{	// merge second
; 2938 : 				*_Dest++ = _Move(*_First1++);
; 2939 : 				if (_First1 == _Last1)
; 2940 : 					break;
; 2941 : 				}
; 2942 : 			}
; 2943 : 
; 2944 : 	_Dest = _Move(_First1, _Last1, _Dest);	// move any tail
; 2945 : 	if (!_In_place)
; 2946 : 		_Dest = _Move(_First2, _Last2, _Dest);
; 2947 : 	return (_Dest);
; 2948 : 	}
; 2949 : 
; 2950 : template<class _BidIt,
; 2951 : 	class _Diff,
; 2952 : 	class _Ty,
; 2953 : 	class _Pr> inline
; 2954 : 	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
; 2955 : 		_Diff _Count1, _Diff _Count2,
; 2956 : 			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
; 2957 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 2958 : 	if (_Count1 == 0 || _Count2 == 0)
; 2959 : 		;	// do nothing
; 2960 : 	else if (_Count1 + _Count2 == 2)
; 2961 : 		{	// order two one-element partitions
; 2962 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 2963 : 			_STD iter_swap(_First, _Mid);
; 2964 : 		}
; 2965 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
; 2966 : 		{	// buffer left partition, then merge
; 2967 : 		_Move(_First, _Mid, _Tempbuf._Init());
; 2968 : 		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2969 : 			_Mid, _Last, _First, _Pred, true);
; 2970 : 		}
; 2971 : 	else if (_Count2 <= _Tempbuf._Maxlen())
; 2972 : 		{	// buffer right partition, then merge
; 2973 : 		_Move(_Mid, _Last, _Tempbuf._Init());
; 2974 : 		_Merge_backward(_First, _Mid,
; 2975 : 			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred, true);
; 2976 : 		}
; 2977 : 	else
; 2978 : 		{	// buffer too small, divide and conquer
; 2979 : 		_BidIt _Firstn, _Lastn;
; 2980 : 		_Diff _Count1n, _Count2n;
; 2981 : 		if (_Count2 < _Count1)
; 2982 : 			{	// left larger, cut it in half and partition right to match
; 2983 : 			_Count1n = _Count1 / 2, _Count2n = 0;
; 2984 : 			_Firstn = _First;
; 2985 : 			_STD advance(_Firstn, _Count1n);
; 2986 : 			_Lastn = _STD lower_bound(_Mid, _Last, *_Firstn, _Pred);
; 2987 : 			_Distance(_Mid, _Lastn, _Count2n);
; 2988 : 			}
; 2989 : 		else
; 2990 : 			{	// right larger, cut it in half and partition left to match
; 2991 : 			_Count1n = 0, _Count2n = _Count2 / 2;
; 2992 : 			_Lastn = _Mid;
; 2993 : 			_STD advance(_Lastn, _Count2n);
; 2994 : 			_Firstn = _STD upper_bound(_First, _Mid, *_Lastn, _Pred);
; 2995 : 			_Distance(_First, _Firstn, _Count1n);
; 2996 : 			}
; 2997 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2998 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle
; 2999 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 3000 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part
; 3001 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 3002 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
; 3003 : 		}
; 3004 : 	}
; 3005 : 
; 3006 : template<class _BidIt,
; 3007 : 	class _Diff,
; 3008 : 	class _Ty,
; 3009 : 	class _Pr> inline
; 3010 : 	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
; 3011 : 		_Diff *, _Ty *)
; 3012 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 3013 : 	_Diff _Count1 = 0;
; 3014 : 	_Distance(_First, _Mid, _Count1);
; 3015 : 	_Diff _Count2 = 0;
; 3016 : 	_Distance(_Mid, _Last, _Count2);
; 3017 : 	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
; 3018 : 	_Buffered_merge(_First, _Mid, _Last,
; 3019 : 		_Count1, _Count2, _Tempbuf, _Pred);
; 3020 : 	}
; 3021 : 
; 3022 : template<class _BidIt,
; 3023 : 	class _Pr> inline
; 3024 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
; 3025 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred
; 3026 : 	_DEBUG_ORDER_PRED(_First, _Mid, _Pred);
; 3027 : 	_DEBUG_ORDER_PRED(_Mid, _Last, _Pred);
; 3028 : 	if (_First != _Mid && _Mid != _Last)
; 3029 : 		_Inplace_merge(
; 3030 : 			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
; 3031 : 			_Dist_type(_First), _Val_type(_First));
; 3032 : 	}
; 3033 : 
; 3034 : 		// TEMPLATE FUNCTION inplace_merge
; 3035 : template<class _BidIt> inline
; 3036 : 	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
; 3037 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<
; 3038 : 	_STD inplace_merge(_First, _Mid, _Last, less<>());
; 3039 : 	}
; 3040 : 
; 3041 : 		// TEMPLATE FUNCTION sort WITH PRED
; 3042 : template<class _BidIt,
; 3043 : 	class _Pr,
; 3044 : 	class _Ty> inline
; 3045 : 	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
; 3046 : 	{	// insertion sort [_First, _Last), using _Pred
; 3047 : 	if (_First != _Last)
; 3048 : 		for (_BidIt _Next = _First; ++_Next != _Last; )
; 3049 : 			{	// order next element
; 3050 : 			_BidIt _Next1 = _Next;
; 3051 : 			_Ty _Val = _Move(*_Next);
; 3052 : 
; 3053 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))
; 3054 : 				{	// found new earliest element, move to front
; 3055 : 				_Move_backward(_First, _Next, ++_Next1);
; 3056 : 				*_First = _Move(_Val);
; 3057 : 				}
; 3058 : 			else
; 3059 : 				{	// look for insertion point after first
; 3060 : 				for (_BidIt _First1 = _Next1;
; 3061 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3062 : 					_Next1 = _First1)
; 3063 : 					*_Next1 = _Move(*_First1);	// move hole down
; 3064 : 				*_Next1 = _Move(_Val);	// insert element in hole
; 3065 : 				}
; 3066 : 			}
; 3067 : 	}
; 3068 : 
; 3069 : template<class _BidIt,
; 3070 : 	class _Pr> inline
; 3071 : 	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
; 3072 : 	{	// insertion sort [_First, _Last), using _Pred
; 3073 : 	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

  00095	6a 00		 push	 0
  00097	52		 push	 edx
  00098	56		 push	 esi
  00099	57		 push	 edi
  0009a	e8 00 00 00 00	 call	 ??$_Insertion_sort1@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@ZPAU1@@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z0@Z ; std::_Insertion_sort1<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &),OBJECTSTRUCT *>
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@Sort:
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx

; 3195 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3196 : 	}

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN3@Sort:

; 3186 : 			}
; 3187 : 		}
; 3188 : 
; 3189 : 	if (_ISORT_MAX < _Count)

  000a9	83 f9 20	 cmp	 ecx, 32			; 00000020H
  000ac	7e e2		 jle	 SHORT $LN7@Sort

; 2504 : 	if (2 <= _Last - _First)

  000ae	8b c6		 mov	 eax, esi
  000b0	2b c7		 sub	 eax, edi
  000b2	83 e0 fc	 and	 eax, -4			; fffffffcH
  000b5	83 f8 08	 cmp	 eax, 8
  000b8	7c 12		 jl	 SHORT $LN12@Sort

; 2505 : 		{	// validate _Pred and heapify
; 2506 : 		_DEBUG_POINTER(_Pred);
; 2507 : 		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,

  000ba	6a 00		 push	 0
  000bc	6a 00		 push	 0
  000be	52		 push	 edx
  000bf	56		 push	 esi
  000c0	57		 push	 edi
  000c1	e8 00 00 00 00	 call	 ??$_Make_heap@PAPAUOBJECTSTRUCT@@HPAU1@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@ZPAH0@Z ; std::_Make_heap<OBJECTSTRUCT * *,int,OBJECTSTRUCT *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  000c6	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  000c9	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@Sort:

; 2508 : 			_Dist_type(_First), _Val_type(_First));
; 2509 : 		}
; 2510 : 	}
; 2511 : 
; 2512 : 		// TEMPLATE FUNCTION make_heap
; 2513 : template<class _RanIt> inline
; 2514 : 	void make_heap(_RanIt _First, _RanIt _Last)
; 2515 : 	{	// make [_First, _Last) into a heap, using operator<
; 2516 : 	_STD make_heap(_First, _Last, less<>());
; 2517 : 	}
; 2518 : 
; 2519 : 		// TEMPLATE FUNCTION sort_heap WITH PRED
; 2520 : template<class _RanIt,
; 2521 : 	class _Pr> inline
; 2522 : 	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2523 : 	{	// order heap by repeatedly popping, using _Pred
; 2524 : 	for (; 2 <= _Last - _First; --_Last)
; 2525 : 		_Pop_heap(_First, _Last, _Pred);
; 2526 : 	}
; 2527 : 
; 2528 : template<class _RanIt,
; 2529 : 	class _Pr> inline
; 2530 : 	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
; 2531 : 	{	// order heap by repeatedly popping, using _Pred
; 2532 : 	_DEBUG_RANGE(_First, _Last);
; 2533 : 	_DEBUG_POINTER_IF(2 <= _Last - _First, _Pred);
; 2534 : 	_DEBUG_HEAP_PRED(_First, _Last, _Pred);
; 2535 : 	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);

  000cc	52		 push	 edx
  000cd	56		 push	 esi
  000ce	57		 push	 edi
  000cf	e8 00 00 00 00	 call	 ??$_Sort_heap@PAPAUOBJECTSTRUCT@@P6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0P6A_NABQAU1@1@Z@Z ; std::_Sort_heap<OBJECTSTRUCT * *,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 3195 : 		_Insertion_sort(_First, _Last, _Pred);	// small
; 3196 : 	}

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ENDP ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >, COMDAT

; 396  : 	{	// convert to unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 397  : 	return (_Iter._Unchecked());

  00003	8b 45 08	 mov	 eax, DWORD PTR __Iter$[ebp]

; 398  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAPAPAUOBJECTSTRUCT@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Umove<OBJECTSTRUCT * *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAUOBJECTSTRUCT@@@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEPAPAUOBJECTSTRUCT@@PAPAU2@00@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Umove<OBJECTSTRUCT * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@YAXPAPAUOBJECTSTRUCT@@0AAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1><std::allocator<OBJECTSTRUCT *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1><std::allocator<OBJECTSTRUCT *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@ABQAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@AAPAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z PROC ; std::addressof<OBJECTSTRUCT * const>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAUOBJECTSTRUCT@@@std@@YAPBQAUOBJECTSTRUCT@@ABQAU1@@Z ENDP ; std::addressof<OBJECTSTRUCT * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>, COMDAT

; 3201 : 	{	// order [_First, _Last), using _Pred

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3204 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  0000d	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00010	c1 fa 02	 sar	 edx, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3204 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00013	52		 push	 edx
  00014	51		 push	 ecx
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 3205 : 	}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@P6A_NABQAUOBJECTSTRUCT@@0@Z@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@0P6A_NABQAUOBJECTSTRUCT@@1@Z@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator-, COMDAT
; _this$ = ecx

; 383  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 04	 add	 edx, 4
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEAAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Unchecked, COMDAT
; _this$ = ecx

; 320  : 		return (_Unchecked_type(this->_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 321  : 		}

  00002	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEPAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator-, COMDAT
; _this$ = ecx

; 192  : 		{	// return difference of iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000a	c1 f8 02	 sar	 eax, 2

; 195  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAPAUOBJECTSTRUCT@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lhs$ = 8						; size = 4
_rhs$ = 12						; size = 4
?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z PROC	; DevilSquareScoreSort, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 22   : 	if ( lhs->m_nEventScore == rhs->m_nEventScore )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lhs$[ebp]
  00006	56		 push	 esi
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _rhs$[ebp]
  0000c	8b 30		 mov	 esi, DWORD PTR [eax]
  0000e	8b 82 28 12 00
	00		 mov	 eax, DWORD PTR [edx+4648]
  00014	8b 8e 28 12 00
	00		 mov	 ecx, DWORD PTR [esi+4648]
  0001a	3b c1		 cmp	 eax, ecx
  0001c	75 14		 jne	 SHORT $LN6@DevilSquar

; 23   : 	{
; 24   : 		if ( lhs->Level < rhs->Level)

  0001e	66 8b 82 96 00
	00 00		 mov	 ax, WORD PTR [edx+150]
  00025	66 3b 86 96 00
	00 00		 cmp	 ax, WORD PTR [esi+150]
  0002c	5e		 pop	 esi
  0002d	0f 9c c0	 setl	 al

; 33   : 	{
; 34   : 		return true;
; 35   : 	}
; 36   : 
; 37   : 	return false;
; 38   : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN6@DevilSquar:

; 25   : 		{
; 26   : 			return true;
; 27   : 		}
; 28   : 
; 29   : 		return false;
; 30   : 	}
; 31   : 
; 32   : 	if ( lhs->m_nEventScore > rhs->m_nEventScore)

  00032	0f 9f c0	 setg	 al
  00035	5e		 pop	 esi

; 33   : 	{
; 34   : 		return true;
; 35   : 	}
; 36   : 
; 37   : 	return false;
; 38   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ENDP	; DevilSquareScoreSort
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDevilSquareGround@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDevilSquareGround@@UAEPAXI@Z PROC			; CDevilSquareGround::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 1c 05 00 00	 push	 1308			; 0000051cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCDevilSquareGround@@UAEPAXI@Z ENDP			; CDevilSquareGround::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0000b	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00014	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00017	2b d6		 sub	 edx, esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00019	83 e2 fc	 and	 edx, -4			; fffffffcH
  0001c	52		 push	 edx
  0001d	56		 push	 esi
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002c	2b f1		 sub	 esi, ecx
  0002e	c1 fe 02	 sar	 esi, 2

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	2b c1		 sub	 eax, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0004c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004f	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00055	89 1f		 mov	 DWORD PTR [edi], ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1642 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Reallocate@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBE_NPBQAUOBJECTSTRUCT@@@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IBEII@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXPAPAUOBJECTSTRUCT@@0@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN205@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@IAEXI@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN205@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIXZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::~vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >,std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >::_Vector_val<std::_Simple_types<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAPAPAUOBJECTSTRUCT@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >::_Vector_alloc<std::_Vec_base_types<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ; std::allocator<OBJECTSTRUCT *>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAIABV?$allocator@PAUOBJECTSTRUCT@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAIABV?$allocator@PAUOBJECTSTRUCT@@@2@@Z PROC ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@SAIABV?$allocator@PAUOBJECTSTRUCT@@@2@@Z ENDP ; std::allocator_traits<std::allocator<OBJECTSTRUCT *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ PROC ; std::allocator<OBJECTSTRUCT *>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUOBJECTSTRUCT@@@std@@QBEIXZ ENDP ; std::allocator<OBJECTSTRUCT *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z PROC ; std::allocator<OBJECTSTRUCT *>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::allocator<OBJECTSTRUCT *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z PROC ; std::allocator<OBJECTSTRUCT *>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@PAUOBJECTSTRUCT@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ENDP ; std::allocator<OBJECTSTRUCT *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z
_TEXT	SEGMENT
_nExUserIndex$ = 8					; size = 4
_nCurrentUserIndex$ = 12				; size = 4
?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z PROC	; CDevilSquareGround::ChangeUserIndex, COMDAT
; _this$ = ecx

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 596  : 	EnterCriticalSection(&this->m_UserCrit);

  00008	8d bb 04 05 00
	00		 lea	 edi, DWORD PTR [ebx+1284]
  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  00015	8b 75 08	 mov	 esi, DWORD PTR _nExUserIndex$[ebp]
  00018	8d 83 dc 04 00
	00		 lea	 eax, DWORD PTR [ebx+1244]

; 597  : 
; 598  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  0001e	33 d2		 xor	 edx, edx
$LL4@ChangeUser:

; 599  : 	{
; 600  : 		if( this->m_UserData[i] == nExUserIndex )

  00020	39 30		 cmp	 DWORD PTR [eax], esi
  00022	74 19		 je	 SHORT $LN8@ChangeUser

; 597  : 
; 598  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  00024	42		 inc	 edx
  00025	83 c0 04	 add	 eax, 4
  00028	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0002b	7c f3		 jl	 SHORT $LL4@ChangeUser

; 605  : 		}
; 606  : 	}
; 607  : 	LeaveCriticalSection(&this->m_UserCrit);

  0002d	57		 push	 edi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 608  : 	return false;

  00036	33 c0		 xor	 eax, eax
  00038	5b		 pop	 ebx

; 609  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN8@ChangeUser:

; 601  : 		{
; 602  : 			this->m_UserData[i] = nCurrentUserIndex;

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _nCurrentUserIndex$[ebp]

; 603  : 			LeaveCriticalSection(&this->m_UserCrit);

  00040	57		 push	 edi
  00041	89 84 93 dc 04
	00 00		 mov	 DWORD PTR [ebx+edx*4+1244], eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 604  : 			return true;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	5b		 pop	 ebx

; 609  : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z ENDP	; CDevilSquareGround::ChangeUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?DelUser@CDevilSquareGround@@QAEHH@Z
_TEXT	SEGMENT
_sUserIndex$ = 8					; size = 4
?DelUser@CDevilSquareGround@@QAEHH@Z PROC		; CDevilSquareGround::DelUser, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 579  : 	EnterCriticalSection(&this->m_UserCrit);

  00008	8d bb 04 05 00
	00		 lea	 edi, DWORD PTR [ebx+1284]
  0000e	57		 push	 edi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  00015	8b 75 08	 mov	 esi, DWORD PTR _sUserIndex$[ebp]
  00018	8d 93 dc 04 00
	00		 lea	 edx, DWORD PTR [ebx+1244]

; 580  : 
; 581  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  0001e	33 c0		 xor	 eax, eax
$LL4@DelUser:

; 582  : 	{
; 583  : 		if( this->m_UserData[i] == sUserIndex )

  00020	39 32		 cmp	 DWORD PTR [edx], esi
  00022	74 19		 je	 SHORT $LN8@DelUser

; 580  : 
; 581  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  00024	40		 inc	 eax
  00025	83 c2 04	 add	 edx, 4
  00028	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0002b	7c f3		 jl	 SHORT $LL4@DelUser

; 588  : 		}
; 589  : 	}
; 590  : 	LeaveCriticalSection(&this->m_UserCrit);

  0002d	57		 push	 edi
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 591  : 	return false;

  00036	33 c0		 xor	 eax, eax
  00038	5b		 pop	 ebx

; 592  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN8@DelUser:

; 584  : 		{
; 585  : 			this->m_UserData[i] = -1;
; 586  : 			LeaveCriticalSection(&this->m_UserCrit);

  0003d	57		 push	 edi
  0003e	c7 84 83 dc 04
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ebx+eax*4+1244], -1
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi

; 587  : 			return true;

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	5b		 pop	 ebx

; 592  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?DelUser@CDevilSquareGround@@QAEHH@Z ENDP		; CDevilSquareGround::DelUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?AddUser@CDevilSquareGround@@QAEHH@Z
_TEXT	SEGMENT
_sUserIndex$ = 8					; size = 4
?AddUser@CDevilSquareGround@@QAEHH@Z PROC		; CDevilSquareGround::AddUser, COMDAT
; _this$ = ecx

; 561  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 562  : 	EnterCriticalSection(&this->m_UserCrit);

  00007	8d b7 04 05 00
	00		 lea	 esi, DWORD PTR [edi+1284]
  0000d	56		 push	 esi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 563  : 
; 564  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  00014	33 d2		 xor	 edx, edx
  00016	8d 87 dc 04 00
	00		 lea	 eax, DWORD PTR [edi+1244]
  0001c	0f 1f 40 00	 npad	 4
$LL4@AddUser:

; 565  : 	{
; 566  : 		if( this->m_UserData[i] == -1 )

  00020	83 38 ff	 cmp	 DWORD PTR [eax], -1
  00023	74 18		 je	 SHORT $LN8@AddUser

; 563  : 
; 564  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  00025	42		 inc	 edx
  00026	83 c0 04	 add	 eax, 4
  00029	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  0002c	7c f2		 jl	 SHORT $LL4@AddUser

; 571  : 		}
; 572  : 	}
; 573  : 	LeaveCriticalSection(&this->m_UserCrit);

  0002e	56		 push	 esi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00035	5f		 pop	 edi

; 574  : 	return false;

  00036	33 c0		 xor	 eax, eax
  00038	5e		 pop	 esi

; 575  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN8@AddUser:

; 567  : 		{
; 568  : 			this->m_UserData[i] = sUserIndex;

  0003d	8b 45 08	 mov	 eax, DWORD PTR _sUserIndex$[ebp]

; 569  : 			LeaveCriticalSection(&this->m_UserCrit);

  00040	56		 push	 esi
  00041	89 84 97 dc 04
	00 00		 mov	 DWORD PTR [edi+edx*4+1244], eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004e	5f		 pop	 edi

; 570  : 			return true;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	5e		 pop	 esi

; 575  : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?AddUser@CDevilSquareGround@@QAEHH@Z ENDP		; CDevilSquareGround::AddUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ
_TEXT	SEGMENT
?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ PROC ; CDevilSquareGround::GetPlayUserCountRightNow, COMDAT
; _this$ = ecx

; 540  : {

  00000	53		 push	 ebx

; 541  : 	int nPlayUserCount = 0;

  00001	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00007	8d 91 dc 04 00
	00		 lea	 edx, DWORD PTR [ecx+1244]
  0000d	56		 push	 esi
  0000e	33 f6		 xor	 esi, esi
  00010	57		 push	 edi
  00011	8d 7e 0a	 lea	 edi, DWORD PTR [esi+10]
$LL4@GetPlayUse:

; 544  : 	{
; 545  : 		if( this->m_UserData[i] != -1 )

  00014	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00016	83 f9 ff	 cmp	 ecx, -1
  00019	74 28		 je	 SHORT $LN2@GetPlayUse

; 546  : 		{
; 547  : 			int nUserIndex = this->m_UserData[i];
; 548  : 
; 549  : 			if( OBJMAX_RANGE(nUserIndex) &&
; 550  : 				gObj[nUserIndex].Type == OBJ_USER &&

  0001b	85 c9		 test	 ecx, ecx
  0001d	78 24		 js	 SHORT $LN2@GetPlayUse
  0001f	33 c0		 xor	 eax, eax
  00021	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	74 15		 je	 SHORT $LN2@GetPlayUse
  0002e	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00034	80 7c 18 50 01	 cmp	 BYTE PTR [eax+ebx+80], 1
  00039	75 08		 jne	 SHORT $LN2@GetPlayUse
  0003b	83 7c 18 04 03	 cmp	 DWORD PTR [eax+ebx+4], 3
  00040	75 01		 jne	 SHORT $LN2@GetPlayUse

; 551  : 				gObj[nUserIndex].Connected == PLAYER_PLAYING )
; 552  : 			{
; 553  : 				nPlayUserCount++;

  00042	46		 inc	 esi
$LN2@GetPlayUse:

; 542  : 
; 543  : 	for(int i = 0; i < MAX_DEVILSQUARE_USER; i++)

  00043	83 c2 04	 add	 edx, 4
  00046	83 ef 01	 sub	 edi, 1
  00049	75 c9		 jne	 SHORT $LL4@GetPlayUse

; 554  : 			}
; 555  : 		}
; 556  : 	}
; 557  : 	return nPlayUserCount;

  0004b	5f		 pop	 edi
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx

; 558  : }

  00050	c3		 ret	 0
?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ ENDP ; CDevilSquareGround::GetPlayUserCountRightNow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?SendScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
_iExp64$1 = -16						; size = 8
_iSize$1$ = -8						; size = 4
_iUserCount$1$ = -4					; size = 4
?SendScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::SendScore, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00009	8b 87 d8 02 00
	00		 mov	 eax, DWORD PTR [edi+728]
  0000f	2b 87 d4 02 00
	00		 sub	 eax, DWORD PTR [edi+724]
  00015	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 331  : 	if ( this->m_DevilSquareRankList.size() < 1 )

  00018	83 f8 01	 cmp	 eax, 1
  0001b	0f 82 01 04 00
	00		 jb	 $LN6@SendScore
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00021	8b 87 d8 02 00
	00		 mov	 eax, DWORD PTR [edi+728]
  00027	2b 87 d4 02 00
	00		 sub	 eax, DWORD PTR [edi+724]

; 46   : 		: _Ptr(_Parg)

  0002d	8b 8f d4 02 00
	00		 mov	 ecx, DWORD PTR [edi+724]
  00033	53		 push	 ebx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00034	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 336  : 	BYTE count = 1;

  00037	b3 01		 mov	 bl, 1
  00039	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003a	89 45 fc	 mov	 DWORD PTR _iUserCount$1$[ebp], eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0003d	3b 8f d8 02 00
	00		 cmp	 ecx, DWORD PTR [edi+728]
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 342  : 	for ( ; Itor != this->m_DevilSquareRankList.end() ; Itor++ )

  00043	0f 84 e0 00 00
	00		 je	 $LN377@SendScore
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SendScore:

; 343  : 	{
; 344  : 		memcpy(this->m_DevilSquareScoreInfoTOP10.Score[count].Name , (*(Itor))->Name, MAX_ACCOUNT_LEN);
; 345  : 		this->m_DevilSquareScoreInfoTOP10.Score[count].TotalScore = (*(Itor))->m_nEventScore;
; 346  : 
; 347  : 		if ( iUserCount <= 6 )

  00050	83 7d fc 06	 cmp	 DWORD PTR _iUserCount$1$[ebp], 6
  00054	0f b6 d3	 movzx	 edx, bl
  00057	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0005a	8d 34 c7	 lea	 esi, DWORD PTR [edi+eax*8]
  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	f3 0f 7e 40 5d	 movq	 xmm0, QWORD PTR [eax+93]
  00064	66 0f d6 86 e5
	02 00 00	 movq	 QWORD PTR [esi+741], xmm0
  0006c	66 8b 40 65	 mov	 ax, WORD PTR [eax+101]
  00070	66 89 86 ed 02
	00 00		 mov	 WORD PTR [esi+749], ax
  00077	8b 01		 mov	 eax, DWORD PTR [ecx]
  00079	8b 80 28 12 00
	00		 mov	 eax, DWORD PTR [eax+4648]
  0007f	89 86 f1 02 00
	00		 mov	 DWORD PTR [esi+753], eax
  00085	7f 1b		 jg	 SHORT $LN9@SendScore

; 348  : 		{
; 349  : 			if ( count < 4 )	// For DS from 0 to 3

  00087	80 fb 04	 cmp	 bl, 4
  0008a	73 6e		 jae	 SHORT $LN17@SendScore

; 350  : 			{
; 351  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[count-1][0];

  0008c	8b 84 d7 ec 03
	00 00		 mov	 eax, DWORD PTR [edi+edx*8+1004]
  00093	89 86 f9 02 00
	00		 mov	 DWORD PTR [esi+761], eax

; 352  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[count-1][1];

  00099	8b 84 d7 f0 03
	00 00		 mov	 eax, DWORD PTR [edi+edx*8+1008]

; 353  : 			}
; 354  : 			else

  000a0	eb 6a		 jmp	 SHORT $LN380@SendScore
$LN9@SendScore:

; 355  : 			{
; 356  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[3][0];
; 357  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[3][1];
; 358  : 			}
; 359  : 		}
; 360  : 		else
; 361  : 		{
; 362  : 			int lc5 = count*100/iUserCount;

  000a2	6b c2 64	 imul	 eax, edx, 100
  000a5	99		 cdq
  000a6	f7 7d fc	 idiv	 DWORD PTR _iUserCount$1$[ebp]

; 363  : 
; 364  : 			if ( count == 1 )

  000a9	80 fb 01	 cmp	 bl, 1
  000ac	75 1a		 jne	 SHORT $LN13@SendScore

; 365  : 			{
; 366  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[0][0];

  000ae	8b 87 f4 03 00
	00		 mov	 eax, DWORD PTR [edi+1012]
  000b4	89 87 11 03 00
	00		 mov	 DWORD PTR [edi+785], eax

; 367  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[0][1];

  000ba	8b 87 f8 03 00
	00		 mov	 eax, DWORD PTR [edi+1016]
  000c0	89 87 0d 03 00
	00		 mov	 DWORD PTR [edi+781], eax
  000c6	eb 4a		 jmp	 SHORT $LN18@SendScore
$LN13@SendScore:

; 368  : 			}
; 369  : 			else if ( lc5 <= 30 )

  000c8	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000cb	7f 14		 jg	 SHORT $LN15@SendScore

; 370  : 			{
; 371  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[1][0];

  000cd	8b 87 fc 03 00
	00		 mov	 eax, DWORD PTR [edi+1020]
  000d3	89 86 f9 02 00
	00		 mov	 DWORD PTR [esi+761], eax

; 372  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[1][1];

  000d9	8b 87 00 04 00
	00		 mov	 eax, DWORD PTR [edi+1024]
  000df	eb 2b		 jmp	 SHORT $LN380@SendScore
$LN15@SendScore:

; 373  : 			}
; 374  : 			else if ( lc5 <= 50 )

  000e1	83 f8 32	 cmp	 eax, 50			; 00000032H
  000e4	7f 14		 jg	 SHORT $LN17@SendScore

; 375  : 			{
; 376  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[2][0];

  000e6	8b 87 04 04 00
	00		 mov	 eax, DWORD PTR [edi+1028]
  000ec	89 86 f9 02 00
	00		 mov	 DWORD PTR [esi+761], eax

; 377  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[2][1];

  000f2	8b 87 08 04 00
	00		 mov	 eax, DWORD PTR [edi+1032]

; 378  : 			}
; 379  : 			else

  000f8	eb 12		 jmp	 SHORT $LN380@SendScore
$LN17@SendScore:

; 380  : 			{
; 381  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusZen = this->m_Bonus[3][0];

  000fa	8b 87 0c 04 00
	00		 mov	 eax, DWORD PTR [edi+1036]
  00100	89 86 f9 02 00
	00		 mov	 DWORD PTR [esi+761], eax

; 382  : 				this->m_DevilSquareScoreInfoTOP10.Score[count].BonusExp = this->m_Bonus[3][1];

  00106	8b 87 10 04 00
	00		 mov	 eax, DWORD PTR [edi+1040]
$LN380@SendScore:
  0010c	89 86 f5 02 00
	00		 mov	 DWORD PTR [esi+757], eax
$LN18@SendScore:

; 383  : 			}
; 384  : 		}
; 385  : 
; 386  : 		count++;

  00112	80 c3 01	 add	 bl, 1

; 387  : 
; 388  : 		if ( count >= 10 )

  00115	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00118	73 0f		 jae	 SHORT $LN377@SendScore
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0011a	83 c1 04	 add	 ecx, 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0011d	3b 8f d8 02 00
	00		 cmp	 ecx, DWORD PTR [edi+728]
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 342  : 	for ( ; Itor != this->m_DevilSquareRankList.end() ; Itor++ )

  00123	0f 85 27 ff ff
	ff		 jne	 $LL4@SendScore
$LN377@SendScore:

; 389  : 		{
; 390  : 			break;
; 391  : 		}
; 392  : 	}
; 393  : 
; 394  : 	this->m_DevilSquareScoreInfoTOP10.Count  = count;
; 395  : 	int iSize = count * 24 + 5;

  00129	0f b6 c3	 movzx	 eax, bl

; 396  : 
; 397  : 	PHeadSetB((LPBYTE)&this->m_DevilSquareScoreInfoTOP10, 0x93, iSize);

  0012c	8d 8f e0 02 00
	00		 lea	 ecx, DWORD PTR [edi+736]
  00132	88 9f e4 02 00
	00		 mov	 BYTE PTR [edi+740], bl
  00138	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0013b	8d 04 c5 05 00
	00 00		 lea	 eax, DWORD PTR [eax*8+5]
  00142	50		 push	 eax
  00143	68 93 00 00 00	 push	 147			; 00000093H
  00148	51		 push	 ecx
  00149	89 45 f8	 mov	 DWORD PTR _iSize$1$[ebp], eax
  0014c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 398  : 	count = 1;
; 399  : 
; 400  : 	Itor = this->m_DevilSquareRankList.begin();
; 401  : 
; 402  : 	LogAddTD("[DevilSquare] Rank [%d]", this->m_iIndex);

  00151	ff b7 f0 03 00
	00		 push	 DWORD PTR [edi+1008]
  00157	8b b7 d4 02 00
	00		 mov	 esi, DWORD PTR [edi+724]
  0015d	b3 01		 mov	 bl, 1
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NLONHAKI@?$FLDevilSquare?$FN?5Rank?5?$FL?$CFd?$FN?$AA@
  00164	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016a	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0016d	3b b7 d8 02 00
	00		 cmp	 esi, DWORD PTR [edi+728]
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 404  : 	for ( ; Itor != this->m_DevilSquareRankList.end(); Itor++ )

  00173	0f 84 a7 02 00
	00		 je	 $LN378@SendScore
  00179	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@SendScore:

; 405  : 	{
; 406  : 		if ( iUserCount <= 6 )

  00180	8b 4d fc	 mov	 ecx, DWORD PTR _iUserCount$1$[ebp]
  00183	83 f9 06	 cmp	 ecx, 6
  00186	7f 1e		 jg	 SHORT $LN20@SendScore

; 407  : 		{
; 408  : 			if ( count < 4 )

  00188	80 fb 04	 cmp	 bl, 4
  0018b	73 6d		 jae	 SHORT $LN28@SendScore

; 409  : 			{
; 410  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[count-1][0];

  0018d	0f b6 cb	 movzx	 ecx, bl
  00190	8b 84 cf ec 03
	00 00		 mov	 eax, DWORD PTR [edi+ecx*8+1004]
  00197	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 411  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[count-1][1];

  0019d	8b 84 cf f0 03
	00 00		 mov	 eax, DWORD PTR [edi+ecx*8+1008]

; 412  : 			}
; 413  : 			else

  001a4	eb 66		 jmp	 SHORT $LN381@SendScore
$LN20@SendScore:

; 414  : 			{
; 415  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[3][0];
; 416  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[3][1];
; 417  : 			}
; 418  : 		}
; 419  : 		else
; 420  : 		{
; 421  : 			int lc7 = count*100/iUserCount;

  001a6	0f b6 c3	 movzx	 eax, bl
  001a9	6b c0 64	 imul	 eax, eax, 100
  001ac	99		 cdq
  001ad	f7 f9		 idiv	 ecx

; 422  : 
; 423  : 			if ( count ==1 )

  001af	80 fb 01	 cmp	 bl, 1
  001b2	75 14		 jne	 SHORT $LN24@SendScore

; 424  : 			{
; 425  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[0][0];

  001b4	8b 87 f4 03 00
	00		 mov	 eax, DWORD PTR [edi+1012]
  001ba	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 426  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[0][1];

  001c0	8b 87 f8 03 00
	00		 mov	 eax, DWORD PTR [edi+1016]
  001c6	eb 44		 jmp	 SHORT $LN381@SendScore
$LN24@SendScore:

; 427  : 			}
; 428  : 			else if ( lc7 <= 30 )

  001c8	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  001cb	7f 14		 jg	 SHORT $LN26@SendScore

; 429  : 			{
; 430  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[1][0];

  001cd	8b 87 fc 03 00
	00		 mov	 eax, DWORD PTR [edi+1020]
  001d3	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 431  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[1][1];

  001d9	8b 87 00 04 00
	00		 mov	 eax, DWORD PTR [edi+1024]
  001df	eb 2b		 jmp	 SHORT $LN381@SendScore
$LN26@SendScore:

; 432  : 			}
; 433  : 			else if ( lc7 <= 50 )

  001e1	83 f8 32	 cmp	 eax, 50			; 00000032H
  001e4	7f 14		 jg	 SHORT $LN28@SendScore

; 434  : 			{
; 435  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[2][0];

  001e6	8b 87 04 04 00
	00		 mov	 eax, DWORD PTR [edi+1028]
  001ec	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 436  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[2][1];

  001f2	8b 87 08 04 00
	00		 mov	 eax, DWORD PTR [edi+1032]

; 437  : 			}
; 438  : 			else

  001f8	eb 12		 jmp	 SHORT $LN381@SendScore
$LN28@SendScore:

; 439  : 			{
; 440  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen = this->m_Bonus[3][0];

  001fa	8b 87 0c 04 00
	00		 mov	 eax, DWORD PTR [edi+1036]
  00200	89 87 f9 02 00
	00		 mov	 DWORD PTR [edi+761], eax

; 441  : 				this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp = this->m_Bonus[3][1];

  00206	8b 87 10 04 00
	00		 mov	 eax, DWORD PTR [edi+1040]
$LN381@SendScore:

; 442  : 			}
; 443  : 		}
; 444  : 
; 445  : 		if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  0020c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00211	89 87 f5 02 00
	00		 mov	 DWORD PTR [edi+757], eax
  00217	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  0021c	83 f8 01	 cmp	 eax, 1
  0021f	75 33		 jne	 SHORT $LN30@SendScore
  00221	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  00228	74 2a		 je	 SHORT $LN30@SendScore

; 446  : 		{
; 447  : 			this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp =  (this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  0022a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0022f	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  00234	8b c8		 mov	 ecx, eax
  00236	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0023b	0f af 8f f5 02
	00 00		 imul	 ecx, DWORD PTR [edi+757]
  00242	f7 e9		 imul	 ecx
  00244	c1 fa 05	 sar	 edx, 5
  00247	8b c2		 mov	 eax, edx
  00249	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024c	03 c2		 add	 eax, edx
  0024e	89 87 f5 02 00
	00		 mov	 DWORD PTR [edi+757], eax
$LN30@SendScore:

; 448  : 		}
; 449  : 
; 450  : 		__int64 iExp64 = this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp;

  00254	8b 87 f5 02 00
	00		 mov	 eax, DWORD PTR [edi+757]
  0025a	99		 cdq
  0025b	89 45 f0	 mov	 DWORD PTR _iExp64$1[ebp], eax

; 451  : 
; 452  : 		CheckItemOptForGetExpEx((*(Itor)),iExp64,TRUE);

  0025e	8d 45 f0	 lea	 eax, DWORD PTR _iExp64$1[ebp]
  00261	6a 01		 push	 1
  00263	50		 push	 eax
  00264	ff 36		 push	 DWORD PTR [esi]
  00266	89 55 f4	 mov	 DWORD PTR _iExp64$1[ebp+4], edx
  00269	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 453  : 		(*(Itor))->Experience += (DWORD)iExp64;

  0026e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00270	8b 45 f0	 mov	 eax, DWORD PTR _iExp64$1[ebp]

; 454  : 		bool ret = gObjLevelUp((*(Itor)), &iExp64, 0, EVENT_TYPE_DEVILSQUARE);

  00273	6a 02		 push	 2
  00275	6a 00		 push	 0
  00277	01 81 a0 00 00
	00		 add	 DWORD PTR [ecx+160], eax
  0027d	8d 45 f0	 lea	 eax, DWORD PTR _iExp64$1[ebp]
  00280	50		 push	 eax
  00281	ff 36		 push	 DWORD PTR [esi]
  00283	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@PA_JHH@Z ; gObjLevelUp

; 455  : 
; 456  : 		(*(Itor))->m_nEventMoney = this->m_DevilSquareScoreInfoTOP10.Score[0].BonusZen;

  00288	8b 16		 mov	 edx, DWORD PTR [esi]
  0028a	8a f8		 mov	 bh, al
  0028c	8b 8f f9 02 00
	00		 mov	 ecx, DWORD PTR [edi+761]
  00292	89 8a 30 12 00
	00		 mov	 DWORD PTR [edx+4656], ecx

; 457  : 
; 458  : 		if ( gObjCheckMaxZen((*(Itor))->m_Index, (*(Itor))->m_nEventMoney) == FALSE )

  00298	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0029a	ff b1 30 12 00
	00		 push	 DWORD PTR [ecx+4656]
  002a0	ff 31		 push	 DWORD PTR [ecx]
  002a2	e8 00 00 00 00	 call	 ?gObjCheckMaxZen@@YAHHH@Z ; gObjCheckMaxZen
  002a7	83 c4 24	 add	 esp, 36			; 00000024H
  002aa	85 c0		 test	 eax, eax
  002ac	75 0e		 jne	 SHORT $LN31@SendScore

; 459  : 		{
; 460  : 			int Zen = MAX_ZEN - (*(Itor))->Money;
; 461  : 			(*(Itor))->Money += Zen;

  002ae	8b 06		 mov	 eax, DWORD PTR [esi]
  002b0	c7 80 cc 00 00
	00 00 94 35 77	 mov	 DWORD PTR [eax+204], 2000000000 ; 77359400H

; 462  : 		}
; 463  : 		else

  002ba	eb 0e		 jmp	 SHORT $LN32@SendScore
$LN31@SendScore:

; 464  : 		{
; 465  : 			(*(Itor))->Money += (*(Itor))->m_nEventMoney;

  002bc	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002be	8b 81 30 12 00
	00		 mov	 eax, DWORD PTR [ecx+4656]
  002c4	01 81 cc 00 00
	00		 add	 DWORD PTR [ecx+204], eax
$LN32@SendScore:

; 466  : 		}
; 467  : 
; 468  : 		GCMoneySend((*(Itor))->m_Index, (*(Itor))->Money);

  002ca	8b 06		 mov	 eax, DWORD PTR [esi]
  002cc	ff b0 cc 00 00
	00		 push	 DWORD PTR [eax+204]
  002d2	ff 30		 push	 DWORD PTR [eax]
  002d4	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  002d9	83 c4 08	 add	 esp, 8

; 469  : 
; 470  : 		if ( ret == true )

  002dc	80 ff 01	 cmp	 bh, 1
  002df	75 1b		 jne	 SHORT $LN33@SendScore

; 471  : 		{
; 472  : 			GCKillPlayerExpSend((*(Itor))->m_Index, (WORD)-1, this->m_DevilSquareScoreInfoTOP10.Score[0].BonusExp, 0, 0);

  002e1	8b 06		 mov	 eax, DWORD PTR [esi]
  002e3	6a 00		 push	 0
  002e5	6a 00		 push	 0
  002e7	ff b7 f5 02 00
	00		 push	 DWORD PTR [edi+757]
  002ed	68 ff ff 00 00	 push	 65535			; 0000ffffH
  002f2	ff 30		 push	 DWORD PTR [eax]
  002f4	e8 00 00 00 00	 call	 ?GCKillPlayerExpSend@@YAXHHHHH@Z ; GCKillPlayerExpSend
  002f9	83 c4 14	 add	 esp, 20			; 00000014H
$LN33@SendScore:

; 473  : 		}
; 474  : 
; 475  : 		if( count == 1 )

  002fc	80 fb 01	 cmp	 bl, 1
  002ff	75 20		 jne	 SHORT $LN34@SendScore

; 476  : 		{
; 477  : 			g_EventItemBagManager.OpenSpecial(EventBagSpecial::DevilSquare1, (*(Itor))->m_Index, (*(Itor))->MapNumber, (*(Itor))->X, (*(Itor))->Y);

  00301	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00303	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0030a	50		 push	 eax
  0030b	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00312	50		 push	 eax
  00313	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0031a	50		 push	 eax
  0031b	ff 31		 push	 DWORD PTR [ecx]
  0031d	6a 1a		 push	 26			; 0000001aH
  0031f	eb 48		 jmp	 SHORT $LN382@SendScore
$LN34@SendScore:

; 478  : 		}
; 479  : 		else if( count == 2)

  00321	80 fb 02	 cmp	 bl, 2
  00324	75 20		 jne	 SHORT $LN36@SendScore

; 480  : 		{
; 481  : 			g_EventItemBagManager.OpenSpecial(EventBagSpecial::DevilSquare2, (*(Itor))->m_Index, (*(Itor))->MapNumber, (*(Itor))->X, (*(Itor))->Y);

  00326	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00328	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0032f	50		 push	 eax
  00330	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00337	50		 push	 eax
  00338	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0033f	50		 push	 eax
  00340	ff 31		 push	 DWORD PTR [ecx]
  00342	6a 1b		 push	 27			; 0000001bH
  00344	eb 23		 jmp	 SHORT $LN382@SendScore
$LN36@SendScore:

; 482  : 		}
; 483  : 		else if( count == 3)

  00346	80 fb 03	 cmp	 bl, 3
  00349	75 28		 jne	 SHORT $LN38@SendScore

; 484  : 		{
; 485  : 			g_EventItemBagManager.OpenSpecial(EventBagSpecial::DevilSquare3, (*(Itor))->m_Index, (*(Itor))->MapNumber, (*(Itor))->X, (*(Itor))->Y);

  0034b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0034d	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00354	50		 push	 eax
  00355	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  0035c	50		 push	 eax
  0035d	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  00364	50		 push	 eax
  00365	ff 31		 push	 DWORD PTR [ecx]
  00367	6a 1c		 push	 28			; 0000001cH
$LN382@SendScore:
  00369	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0036e	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
$LN38@SendScore:

; 486  : 		}
; 487  : 
; 488  : 		this->SendRankingInfo((*(Itor)));

  00373	ff 36		 push	 DWORD PTR [esi]
  00375	8b cf		 mov	 ecx, edi
  00377	e8 00 00 00 00	 call	 ?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::SendRankingInfo

; 489  : 
; 490  : 		LogAddTD("Rank :[%d] : [%s][%s][%d][%d][%d]", count, (*(Itor))->AccountID, (*(Itor))->Name, (*(Itor))->m_nEventMoney, (*(Itor))->m_nEventExp, (*(Itor))->m_nEventScore);

  0037c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0037e	ff b1 28 12 00
	00		 push	 DWORD PTR [ecx+4648]
  00384	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00387	ff b1 2c 12 00
	00		 push	 DWORD PTR [ecx+4652]
  0038d	ff b1 30 12 00
	00		 push	 DWORD PTR [ecx+4656]
  00393	50		 push	 eax
  00394	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00397	50		 push	 eax
  00398	0f b6 c3	 movzx	 eax, bl
  0039b	50		 push	 eax
  0039c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JEAIPIFD@Rank?5?3?$FL?$CFd?$FN?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL?$CFd?$FN?$FL?$CFd@
  003a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 491  : 		memcpy(this->m_DevilSquareScoreInfoTOP10.Score[0].Name , (*(Itor))->Name, MAX_ACCOUNT_LEN);

  003a7	8b 06		 mov	 eax, DWORD PTR [esi]

; 492  : 		this->m_DevilSquareScoreInfoTOP10.Score[0].TotalScore = (*(Itor))->m_nEventScore;
; 493  : 		this->m_DevilSquareScoreInfoTOP10.MyRank = count;
; 494  : 		count++;
; 495  : 
; 496  : 		DataSend((*(Itor))->m_Index, (BYTE *)&this->m_DevilSquareScoreInfoTOP10 , iSize);

  003a9	ff 75 f8	 push	 DWORD PTR _iSize$1$[ebp]
  003ac	f3 0f 7e 40 5d	 movq	 xmm0, QWORD PTR [eax+93]
  003b1	66 0f d6 87 e5
	02 00 00	 movq	 QWORD PTR [edi+741], xmm0
  003b9	66 8b 40 65	 mov	 ax, WORD PTR [eax+101]
  003bd	66 89 87 ed 02
	00 00		 mov	 WORD PTR [edi+749], ax
  003c4	8b 06		 mov	 eax, DWORD PTR [esi]
  003c6	8b 80 28 12 00
	00		 mov	 eax, DWORD PTR [eax+4648]
  003cc	89 87 f1 02 00
	00		 mov	 DWORD PTR [edi+753], eax
  003d2	8d 87 e0 02 00
	00		 lea	 eax, DWORD PTR [edi+736]
  003d8	88 9f e3 02 00
	00		 mov	 BYTE PTR [edi+739], bl
  003de	fe c3		 inc	 bl
  003e0	50		 push	 eax
  003e1	8b 06		 mov	 eax, DWORD PTR [esi]
  003e3	ff 30		 push	 DWORD PTR [eax]
  003e5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 497  : 
; 498  : #ifdef POINTEX
; 499  : 		g_ShopPointEx.AddEventBonus((*(Itor))->m_Index, ShopPointExEvent::DS);
; 500  : #endif
; 501  : 
; 502  : #if( __4GAMERS__ == 1 )
; 503  : 		g_Achievements.GD_UpdateEventDataDS((*(Itor)), (*(Itor))->m_nEventExp, (*(Itor))->m_nEventScore);
; 504  : #endif
; 505  : 
; 506  : 		(*(Itor))->m_nEventScore = 0;

  003ea	8b 06		 mov	 eax, DWORD PTR [esi]
  003ec	83 c4 28	 add	 esp, 40			; 00000028H
  003ef	c7 80 28 12 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4648], 0

; 507  : 		(*(Itor))->m_nEventMoney = 0;

  003f9	8b 06		 mov	 eax, DWORD PTR [esi]
  003fb	c7 80 30 12 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4656], 0

; 508  : 		(*(Itor))->m_nEventExp = 0;

  00405	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00407	83 c6 04	 add	 esi, 4
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 508  : 		(*(Itor))->m_nEventExp = 0;

  0040a	c7 80 2c 12 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+4652], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00414	3b b7 d8 02 00
	00		 cmp	 esi, DWORD PTR [edi+728]
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 404  : 	for ( ; Itor != this->m_DevilSquareRankList.end(); Itor++ )

  0041a	0f 85 60 fd ff
	ff		 jne	 $LL7@SendScore
$LN378@SendScore:
  00420	5e		 pop	 esi
  00421	5b		 pop	 ebx
$LN6@SendScore:
  00422	5f		 pop	 edi

; 509  : 	}
; 510  : }

  00423	8b e5		 mov	 esp, ebp
  00425	5d		 pop	 ebp
  00426	c3		 ret	 0
?SendScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::SendScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquareGround::InsertObj, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 306  : 	if ( lpObj->Authority != 2 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 be bc 01 00
	00 02		 cmp	 DWORD PTR [esi+444], 2
  00011	74 5d		 je	 SHORT $LN2@InsertObj

; 307  : 	{
; 308  : 		if ( lpObj->Class >= 0 && lpObj->Class < MAX_TYPE_PLAYER)

  00013	0f b7 96 90 00
	00 00		 movzx	 edx, WORD PTR [esi+144]
  0001a	83 fa 07	 cmp	 edx, 7
  0001d	73 42		 jae	 SHORT $LN4@InsertObj

; 309  : 		{
; 310  : 			if ( DS_LEVEL_RANGE(lpObj->m_bDevilSquareIndex) != FALSE )

  0001f	53		 push	 ebx
  00020	8a 9e 34 12 00
	00		 mov	 bl, BYTE PTR [esi+4660]
  00026	b8 06 00 00 00	 mov	 eax, 6
  0002b	3a c3		 cmp	 al, bl
  0002d	1b c0		 sbb	 eax, eax
  0002f	83 c0 01	 add	 eax, 1
  00032	74 2c		 je	 SHORT $LN8@InsertObj

; 311  : 			{
; 312  : 				lpObj->m_nEventScore +=  this->m_BonusScoreTable[lpObj->Class][lpObj->m_bDevilSquareIndex] / 100;

  00034	8b c2		 mov	 eax, edx
  00036	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0003d	2b c8		 sub	 ecx, eax
  0003f	0f b6 c3	 movzx	 eax, bl
  00042	03 c8		 add	 ecx, eax
  00044	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00049	f7 ac 8f 18 04
	00 00		 imul	 DWORD PTR [edi+ecx*4+1048]
  00050	c1 fa 05	 sar	 edx, 5
  00053	8b c2		 mov	 eax, edx
  00055	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00058	03 c2		 add	 eax, edx
  0005a	01 86 28 12 00
	00		 add	 DWORD PTR [esi+4648], eax
$LN8@InsertObj:
  00060	5b		 pop	 ebx
$LN4@InsertObj:

; 313  : 			}
; 314  : 		}
; 315  : 
; 316  : 		this->m_DevilSquareRankList.push_back(lpObj);

  00061	8d 45 08	 lea	 eax, DWORD PTR _lpObj$[ebp]
  00064	50		 push	 eax
  00065	8d 8f d4 02 00
	00		 lea	 ecx, DWORD PTR [edi+724]
  0006b	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUOBJECTSTRUCT@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXABQAUOBJECTSTRUCT@@@Z ; std::vector<OBJECTSTRUCT *,std::allocator<OBJECTSTRUCT *> >::push_back
$LN2@InsertObj:
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 317  : 	}
; 318  : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquareGround::InsertObj
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?SortScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?SortScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::SortScore, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00000	8b 81 d8 02 00
	00		 mov	 eax, DWORD PTR [ecx+728]

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00006	8b d0		 mov	 edx, eax

; 46   : 		: _Ptr(_Parg)

  00008	8b 89 d4 02 00
	00		 mov	 ecx, DWORD PTR [ecx+724]

; 194  : 		return (this->_Ptr - _Right._Ptr);

  0000e	2b d1		 sub	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3204 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00010	68 00 00 00 00	 push	 OFFSET ?DevilSquareScoreSort@@YA_NABQAUOBJECTSTRUCT@@0@Z ; DevilSquareScoreSort
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 194  : 		return (this->_Ptr - _Right._Ptr);

  00015	c1 fa 02	 sar	 edx, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm

; 3204 : 	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);

  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??$_Sort@PAPAUOBJECTSTRUCT@@HP6A_NABQAU1@0@Z@std@@YAXPAPAUOBJECTSTRUCT@@0HP6A_NABQAU1@1@Z@Z ; std::_Sort<OBJECTSTRUCT * *,int,bool (__cdecl*)(OBJECTSTRUCT * const &,OBJECTSTRUCT * const &)>
  00020	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 298  : }

  00023	c3		 ret	 0
?SortScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::SortScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?ClearScore@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?ClearScore@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::ClearScore, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 81 d4 02 00
	00		 mov	 eax, DWORD PTR [ecx+724]
  00006	89 81 d8 02 00
	00		 mov	 DWORD PTR [ecx+728], eax
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 289  : }

  0000c	c3		 ret	 0
?ClearScore@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::ClearScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquareGround::SendRankingInfo, COMDAT
; _this$ = ecx

; 518  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 519  : 	if ( lpObj->m_nEventScore <= 0 )

  00013	8b 81 28 12 00
	00		 mov	 eax, DWORD PTR [ecx+4648]
  00019	85 c0		 test	 eax, eax
  0001b	7e 5d		 jle	 SHORT $LN1@SendRankin

; 520  : 	{
; 521  : 		return;
; 522  : 	}
; 523  : 
; 524  : 	PMSG_ANS_EVENTUSERSCORE pMsg;
; 525  : 
; 526  : 	pMsg.h.c = 0xC1;
; 527  : 	pMsg.h.headcode = 0x01;
; 528  : 	pMsg.h.size = sizeof(pMsg);
; 529  : 	pMsg.Score = lpObj->m_nEventScore;
; 530  : 	pMsg.SquareNum = lpObj->m_bDevilSquareIndex;
; 531  : 	pMsg.Class = lpObj->Class;
; 532  : 	pMsg.ServerCode = gGameServerCode;
; 533  : 	memcpy(pMsg.AccountID, lpObj->AccountID, MAX_ACCOUNT_LEN);

  0001d	f3 0f 7e 41 52	 movq	 xmm0, QWORD PTR [ecx+82]
  00022	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+28], eax
  00025	0f b6 81 34 12
	00 00		 movzx	 eax, BYTE PTR [ecx+4660]
  0002c	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+36], eax
  0002f	0f b7 81 90 00
	00 00		 movzx	 eax, WORD PTR [ecx+144]
  00036	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+32], eax
  00039	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00040	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+24], eax
  00043	0f b7 41 5a	 movzx	 eax, WORD PTR [ecx+90]
  00047	66 89 45 df	 mov	 WORD PTR _pMsg$[ebp+11], ax

; 534  : 	memcpy(pMsg.GameID, lpObj->Name, MAX_ACCOUNT_LEN);

  0004b	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  0004f	66 89 45 e9	 mov	 WORD PTR _pMsg$[ebp+21], ax

; 535  : 
; 536  : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00053	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00056	66 0f d6 45 d7	 movq	 QWORD PTR _pMsg$[ebp+3], xmm0
  0005b	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  00060	6a 28		 push	 40			; 00000028H
  00062	50		 push	 eax
  00063	66 c7 45 d4 c1
	28		 mov	 WORD PTR _pMsg$[ebp], 10433 ; 000028c1H
  00069	c6 45 d6 01	 mov	 BYTE PTR _pMsg$[ebp+2], 1
  0006d	66 0f d6 45 e1	 movq	 QWORD PTR _pMsg$[ebp+13], xmm0
  00072	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  00077	83 c4 08	 add	 esp, 8
$LN1@SendRankin:

; 537  : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?SendRankingInfo@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquareGround::SendRankingInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?GetMonsterType@CDevilSquareGround@@QAEGH@Z
_TEXT	SEGMENT
_sTemp$ = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_currtime$ = 8						; size = 4
?GetMonsterType@CDevilSquareGround@@QAEGH@Z PROC	; CDevilSquareGround::GetMonsterType, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 255  : 	WORD sTemp[MAX_ST_DEVILSQUARE_MONSTER];
; 256  : 	int icount = 0;

  00012	33 f6		 xor	 esi, esi
  00014	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _currtime$[ebp]
  0001b	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
  00020	8d 56 0f	 lea	 edx, DWORD PTR [esi+15]
$LL4@GetMonster:

; 259  : 	{
; 260  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type != (WORD)-1 )

  00023	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00026	66 3b cb	 cmp	 cx, bx
  00029	74 10		 je	 SHORT $LN2@GetMonster

; 261  : 		{
; 262  : 			if ( currtime >= this->m_DevilSquareMonsterInfo[i].m_RegenStartTime )

  0002b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0002e	7c 0b		 jl	 SHORT $LN2@GetMonster

; 263  : 			{
; 264  : 				if ( currtime <= this->m_DevilSquareMonsterInfo[i].m_RegenEndTime )

  00030	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  00033	7f 06		 jg	 SHORT $LN2@GetMonster

; 265  : 				{
; 266  : 					sTemp[icount] = this->m_DevilSquareMonsterInfo[i].m_Type;

  00035	66 89 4c 75 dc	 mov	 WORD PTR _sTemp$[ebp+esi*2], cx

; 267  : 					icount++;

  0003a	46		 inc	 esi
$LN2@GetMonster:

; 257  : 
; 258  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  0003b	83 c0 10	 add	 eax, 16			; 00000010H
  0003e	83 ea 01	 sub	 edx, 1
  00041	75 e0		 jne	 SHORT $LL4@GetMonster

; 268  : 				}
; 269  : 			}
; 270  : 		}
; 271  : 	}
; 272  : 
; 273  : 	if ( icount == 0 )

  00043	85 f6		 test	 esi, esi
  00045	75 18		 jne	 SHORT $LN8@GetMonster

; 274  : 	{
; 275  : 		return (BYTE)-1;

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0004e	5b		 pop	 ebx

; 279  : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	33 cd		 xor	 ecx, ebp
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN8@GetMonster:

; 276  : 	}
; 277  : 
; 278  : 	return sTemp[rand()%icount];

  0005f	e8 00 00 00 00	 call	 _rand
  00064	99		 cdq
  00065	f7 fe		 idiv	 esi

; 279  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	33 cd		 xor	 ecx, ebp
  0006e	66 8b 44 55 dc	 mov	 ax, WORD PTR _sTemp$[ebp+edx*2]
  00073	5b		 pop	 ebx
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
?GetMonsterType@CDevilSquareGround@@QAEGH@Z ENDP	; CDevilSquareGround::GetMonsterType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?FindMonsterType@CDevilSquareGround@@QAEHG@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
?FindMonsterType@CDevilSquareGround@@QAEHG@Z PROC	; CDevilSquareGround::FindMonsterType, COMDAT
; _this$ = ecx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 239  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00003	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00006	33 d2		 xor	 edx, edx
  00008	66 8b 4d 08	 mov	 cx, WORD PTR _type$[ebp]
  0000c	0f 1f 40 00	 npad	 4
$LL4@FindMonste:

; 240  : 	{
; 241  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type == type )

  00010	66 39 08	 cmp	 WORD PTR [eax], cx
  00013	74 0f		 je	 SHORT $LN8@FindMonste

; 239  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00015	42		 inc	 edx
  00016	83 c0 10	 add	 eax, 16			; 00000010H
  00019	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  0001c	7c f2		 jl	 SHORT $LL4@FindMonste

; 244  : 		}
; 245  : 	}
; 246  : 
; 247  : 	return FALSE;

  0001e	33 c0		 xor	 eax, eax

; 248  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@FindMonste:

; 242  : 		{
; 243  : 			return TRUE;

  00024	b8 01 00 00 00	 mov	 eax, 1

; 248  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?FindMonsterType@CDevilSquareGround@@QAEHG@Z ENDP	; CDevilSquareGround::FindMonsterType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?RegenBossMonster@CDevilSquareGround@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv563 = -4						; size = 4
_currtime$ = 8						; size = 4
?RegenBossMonster@CDevilSquareGround@@QAEXH@Z PROC	; CDevilSquareGround::RegenBossMonster, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx

; 191  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00008	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00012	8d b0 10 01 00
	00		 lea	 esi, DWORD PTR [eax+272]
  00018	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  0001d	57		 push	 edi
  0001e	89 45 fc	 mov	 DWORD PTR tv563[ebp], eax
$LL4@RegenBossM:

; 192  : 	{
; 193  : 		if ( this->m_DevilSquareBossMonsterInfo[i].m_Type != (WORD)-1 )

  00021	66 39 4e e4	 cmp	 WORD PTR [esi-28], cx
  00025	0f 84 9e 01 00
	00		 je	 $LN2@RegenBossM

; 194  : 		{
; 195  : 			if ( currtime == this->m_DevilSquareBossMonsterInfo[i].m_RegenStartTime )

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _currtime$[ebp]
  0002e	3b 4e e8	 cmp	 ecx, DWORD PTR [esi-24]
  00031	0f 85 8d 01 00
	00		 jne	 $LN18@RegenBossM

; 196  : 			{
; 197  : 				int iMapNumber = (this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber >= DEVIL_SQUARE_GROUND_1&& this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber <= DEVIL_SQUARE_GROUND_4)?MAP_INDEX_DEVILSQUARE:(this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber>=DEVIL_SQUARE_GROUND_5  && this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber < 7 )?MAP_INDEX_DEVILSQUARE2:-1;

  00037	8b 06		 mov	 eax, DWORD PTR [esi]
  00039	85 c0		 test	 eax, eax
  0003b	78 0c		 js	 SHORT $LN9@RegenBossM
  0003d	83 f8 03	 cmp	 eax, 3
  00040	7f 07		 jg	 SHORT $LN9@RegenBossM
  00042	bb 09 00 00 00	 mov	 ebx, 9
  00047	eb 14		 jmp	 SHORT $LN11@RegenBossM
$LN9@RegenBossM:
  00049	83 f8 04	 cmp	 eax, 4
  0004c	7c 0c		 jl	 SHORT $LN10@RegenBossM
  0004e	83 f8 07	 cmp	 eax, 7
  00051	7d 07		 jge	 SHORT $LN10@RegenBossM
  00053	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
  00058	eb 03		 jmp	 SHORT $LN11@RegenBossM
$LN10@RegenBossM:
  0005a	83 cb ff	 or	 ebx, -1
$LN11@RegenBossM:

; 198  : 
; 199  : 				int iMonIndex = gObjAddMonster(iMapNumber);

  0005d	53		 push	 ebx
  0005e	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00063	0f bf f8	 movsx	 edi, ax
  00066	83 c4 04	 add	 esp, 4

; 200  : 
; 201  : 				if ( iMonIndex >= 0 )

  00069	85 ff		 test	 edi, edi
  0006b	0f 88 50 01 00
	00		 js	 $LN17@RegenBossM

; 202  : 				{
; 203  : 					gObjSetMonster(iMonIndex, this->m_DevilSquareBossMonsterInfo[i].m_Type);

  00071	0f b7 46 e4	 movzx	 eax, WORD PTR [esi-28]
  00075	50		 push	 eax
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 204  : 					gObj[iMonIndex].MapNumber = iMapNumber;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	83 c4 08	 add	 esp, 8
  00084	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  0008a	88 9c 07 23 01
	00 00		 mov	 BYTE PTR [edi+eax+291], bl

; 205  : 					gMSetBase.GetBoxPosition(gObj[iMonIndex].MapNumber,

  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00097	8d 81 21 01 00
	00		 lea	 eax, DWORD PTR [ecx+289]
  0009d	03 c7		 add	 eax, edi
  0009f	50		 push	 eax
  000a0	8d 81 20 01 00
	00		 lea	 eax, DWORD PTR [ecx+288]
  000a6	03 c7		 add	 eax, edi
  000a8	50		 push	 eax
  000a9	ff 76 fc	 push	 DWORD PTR [esi-4]
  000ac	0f b6 84 39 23
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+291]
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A ; gMSetBase
  000b9	ff 76 f8	 push	 DWORD PTR [esi-8]
  000bc	ff 76 f4	 push	 DWORD PTR [esi-12]
  000bf	ff 76 f0	 push	 DWORD PTR [esi-16]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?GetBoxPosition@CMonsterSetBase@@QAEHHHHHHAAE0@Z ; CMonsterSetBase::GetBoxPosition

; 206  : 						this->m_DevilSquareBossMonsterInfo[i].X, this->m_DevilSquareBossMonsterInfo[i].Y,
; 207  : 						this->m_DevilSquareBossMonsterInfo[i].TX, this->m_DevilSquareBossMonsterInfo[i].TY,
; 208  : 						gObj[iMonIndex].X, gObj[iMonIndex].Y);
; 209  : 					int map = gObj[iMonIndex].MapNumber;
; 210  : 					int x = gObj[iMonIndex].X;
; 211  : 					int y = gObj[iMonIndex].Y;

  000c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ce	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]

; 212  : 
; 213  : 					LogAddTD("[DevilSquare] Boss %d %d %d create ", map, x, y);

  000d6	50		 push	 eax
  000d7	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  000df	50		 push	 eax
  000e0	0f b6 84 39 23
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+291]
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EDJNDEMF@?$FLDevilSquare?$FN?5Boss?5?$CFd?5?$CFd?5?$CFd?5crea@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 214  : 
; 215  : 					gObj[iMonIndex].TX = gObj[iMonIndex].X;

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	83 c4 10	 add	 esp, 16			; 00000010H

; 216  : 					gObj[iMonIndex].TY = gObj[iMonIndex].Y;
; 217  : 					gObj[iMonIndex].MTX = gObj[iMonIndex].X;
; 218  : 					gObj[iMonIndex].MTY = gObj[iMonIndex].Y;
; 219  : 					gObj[iMonIndex].StartX = gObj[iMonIndex].X;
; 220  : 					gObj[iMonIndex].StartY = gObj[iMonIndex].Y;
; 221  : 					gObj[iMonIndex].m_bDevilSquareIndex = this->m_iIndex;
; 222  : 					gObj[iMonIndex].DieRegen = FALSE;
; 223  : 					gObj[iMonIndex].m_PosNum = -1;

  000fd	83 ca ff	 or	 edx, -1
  00100	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  00108	88 84 39 52 01
	00 00		 mov	 BYTE PTR [ecx+edi+338], al
  0010f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00115	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  0011d	88 84 39 53 01
	00 00		 mov	 BYTE PTR [ecx+edi+339], al
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012a	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  00132	88 84 39 54 01
	00 00		 mov	 BYTE PTR [ecx+edi+340], al
  00139	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013f	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  00147	88 84 39 55 01
	00 00		 mov	 BYTE PTR [ecx+edi+341], al
  0014e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00154	0f b6 84 39 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+288]
  0015c	88 84 39 4e 01
	00 00		 mov	 BYTE PTR [ecx+edi+334], al
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00169	0f b6 84 39 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edi+289]
  00171	88 84 39 4f 01
	00 00		 mov	 BYTE PTR [ecx+edi+335], al
  00178	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0017b	8a 88 f0 03 00
	00		 mov	 cl, BYTE PTR [eax+1008]
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00186	88 8c 07 34 12
	00 00		 mov	 BYTE PTR [edi+eax+4660], cl
  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00192	c6 84 07 8a 05
	00 00 00	 mov	 BYTE PTR [edi+eax+1418], 0
  0019a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019f	66 89 94 07 98
	05 00 00	 mov	 WORD PTR [edi+eax+1432], dx

; 224  : 					gObj[iMonIndex].Live = TRUE;

  001a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ac	c6 44 07 51 01	 mov	 BYTE PTR [edi+eax+81], 1

; 225  : 					gObj[iMonIndex].m_State = 1;

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b6	c7 84 07 d0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [edi+eax+464], 1
$LN17@RegenBossM:
  001c1	8b 45 fc	 mov	 eax, DWORD PTR tv563[ebp]
$LN18@RegenBossM:
  001c4	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
$LN2@RegenBossM:

; 191  : 	for ( int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  001c9	83 c6 20	 add	 esi, 32			; 00000020H
  001cc	83 e8 01	 sub	 eax, 1
  001cf	89 45 fc	 mov	 DWORD PTR tv563[ebp], eax
  001d2	0f 85 49 fe ff
	ff		 jne	 $LL4@RegenBossM
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx

; 226  : 				}
; 227  : 			}
; 228  : 		}
; 229  : 	}
; 230  : }

  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 04 00	 ret	 4
?RegenBossMonster@CDevilSquareGround@@QAEXH@Z ENDP	; CDevilSquareGround::RegenBossMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?GetObjCount@CDevilSquareGround@@QAEJXZ
_TEXT	SEGMENT
?GetObjCount@CDevilSquareGround@@QAEJXZ PROC		; CDevilSquareGround::GetObjCount, COMDAT
; _this$ = ecx

; 182  : 	return this->m_dwObjCount;

  00000	8b 81 14 04 00
	00		 mov	 eax, DWORD PTR [ecx+1044]

; 183  : }

  00006	c3		 ret	 0
?GetObjCount@CDevilSquareGround@@QAEJXZ ENDP		; CDevilSquareGround::GetObjCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?IncObjCount@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?IncObjCount@CDevilSquareGround@@QAEXXZ PROC		; CDevilSquareGround::IncObjCount, COMDAT
; _this$ = ecx

; 174  : 	InterlockedIncrement((LPLONG)&this->m_dwObjCount);

  00000	f0 ff 81 14 04
	00 00		 lock	  inc	 DWORD PTR [ecx+1044]

; 175  : }

  00007	c3		 ret	 0
?IncObjCount@CDevilSquareGround@@QAEXXZ ENDP		; CDevilSquareGround::IncObjCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_starttime$ = 12					; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_tx$ = 24						; size = 4
_ty$ = 28						; size = 4
?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z PROC		; CDevilSquareGround::SetBoss, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 146  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00006	33 c0		 xor	 eax, eax
  00008	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000d	8d 96 f4 00 00
	00		 lea	 edx, DWORD PTR [esi+244]
$LL4@SetBoss:

; 147  : 	{
; 148  : 		if ( this->m_DevilSquareBossMonsterInfo[i].m_Type == (WORD)-1  )

  00013	66 39 0a	 cmp	 WORD PTR [edx], cx
  00016	74 0e		 je	 SHORT $LN8@SetBoss

; 146  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00018	40		 inc	 eax
  00019	83 c2 20	 add	 edx, 32			; 00000020H
  0001c	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0001f	7c f2		 jl	 SHORT $LL4@SetBoss
  00021	5e		 pop	 esi

; 157  : 			
; 158  : 			return;
; 159  : 		}
; 160  : 	}
; 161  : }

  00022	5d		 pop	 ebp
  00023	c2 18 00	 ret	 24			; 00000018H
$LN8@SetBoss:

; 149  : 		{
; 150  : 			this->m_DevilSquareBossMonsterInfo[i].m_Type = type;

  00026	66 8b 4d 08	 mov	 cx, WORD PTR _type$[ebp]
  0002a	8b d0		 mov	 edx, eax
  0002c	c1 e2 05	 shl	 edx, 5
  0002f	03 d6		 add	 edx, esi
  00031	66 89 8a f4 00
	00 00		 mov	 WORD PTR [edx+244], cx

; 151  : 			this->m_DevilSquareBossMonsterInfo[i].m_RegenStartTime = starttime;

  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _starttime$[ebp]
  0003b	89 8a f8 00 00
	00		 mov	 DWORD PTR [edx+248], ecx

; 152  : 			this->m_DevilSquareBossMonsterInfo[i].X = x;

  00041	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00044	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00047	c1 e1 05	 shl	 ecx, 5
  0004a	89 04 31	 mov	 DWORD PTR [ecx+esi], eax

; 153  : 			this->m_DevilSquareBossMonsterInfo[i].Y = y;

  0004d	8b 45 14	 mov	 eax, DWORD PTR _y$[ebp]
  00050	89 82 04 01 00
	00		 mov	 DWORD PTR [edx+260], eax

; 154  : 			this->m_DevilSquareBossMonsterInfo[i].TX = tx;

  00056	8b 45 18	 mov	 eax, DWORD PTR _tx$[ebp]
  00059	89 82 08 01 00
	00		 mov	 DWORD PTR [edx+264], eax

; 155  : 			this->m_DevilSquareBossMonsterInfo[i].TY = ty;

  0005f	8b 45 1c	 mov	 eax, DWORD PTR _ty$[ebp]
  00062	89 82 0c 01 00
	00		 mov	 DWORD PTR [edx+268], eax

; 156  : 			this->m_DevilSquareBossMonsterInfo[i].m_iDevilSquareNumber = this->m_iIndex;

  00068	8b 86 f0 03 00
	00		 mov	 eax, DWORD PTR [esi+1008]
  0006e	89 82 10 01 00
	00		 mov	 DWORD PTR [edx+272], eax
  00074	5e		 pop	 esi

; 157  : 			
; 158  : 			return;
; 159  : 		}
; 160  : 	}
; 161  : }

  00075	5d		 pop	 ebp
  00076	c2 18 00	 ret	 24			; 00000018H
?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z ENDP		; CDevilSquareGround::SetBoss
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?Set@CDevilSquareGround@@QAEXGHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_starttime$ = 12					; size = 4
_endtime$ = 16						; size = 4
?Set@CDevilSquareGround@@QAEXGHH@Z PROC			; CDevilSquareGround::Set, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 126  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00006	33 c0		 xor	 eax, eax
  00008	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0000d	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LL4@Set:

; 127  : 	{
; 128  : 		if ( this->m_DevilSquareMonsterInfo[i].m_Type == (WORD)-1  )

  00010	66 39 0a	 cmp	 WORD PTR [edx], cx
  00013	74 0e		 je	 SHORT $LN8@Set

; 126  : 	for (int i=0;i<MAX_ST_DEVILSQUARE_MONSTER;i++)

  00015	40		 inc	 eax
  00016	83 c2 10	 add	 edx, 16			; 00000010H
  00019	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0001c	7c f2		 jl	 SHORT $LL4@Set
  0001e	5e		 pop	 esi

; 134  : 			
; 135  : 			return;
; 136  : 		}
; 137  : 	}
; 138  : }

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
$LN8@Set:

; 129  : 		{
; 130  : 			this->m_DevilSquareMonsterInfo[i].m_Type = type;

  00023	03 c0		 add	 eax, eax
  00025	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
  00028	66 8b 45 08	 mov	 ax, WORD PTR _type$[ebp]
  0002c	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 131  : 			this->m_DevilSquareMonsterInfo[i].m_RegenStartTime = starttime;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _starttime$[ebp]
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 132  : 			this->m_DevilSquareMonsterInfo[i].m_RegenEndTime = endtime;

  00036	8b 45 10	 mov	 eax, DWORD PTR _endtime$[ebp]
  00039	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 133  : 			this->m_DevilSquareMonsterInfo[i].m_iDevilSquareNumber = this->m_iIndex;

  0003c	8b 86 f0 03 00
	00		 mov	 eax, DWORD PTR [esi+1008]
  00042	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00045	5e		 pop	 esi

; 134  : 			
; 135  : 			return;
; 136  : 		}
; 137  : 	}
; 138  : }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
?Set@CDevilSquareGround@@QAEXGHH@Z ENDP			; CDevilSquareGround::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?IncBonus@CDevilSquareGround@@QAEXM@Z
_TEXT	SEGMENT
_IncValue$ = 8						; size = 4
?IncBonus@CDevilSquareGround@@QAEXM@Z PROC		; CDevilSquareGround::IncBonus, COMDAT
; _this$ = ecx

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  : 	for(int i = 0; i < 4; i++)

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _IncValue$[ebp]
  00008	81 c1 f8 03 00
	00		 add	 ecx, 1016		; 000003f8H
  0000e	ba 04 00 00 00	 mov	 edx, 4
$LL4@IncBonus:
  00013	66 0f 6e 01	 movd	 xmm0, DWORD PTR [ecx]
  00017	8d 49 08	 lea	 ecx, DWORD PTR [ecx+8]

; 324  : 	{
; 325  : 		this->m_Bonus[i][1] = (int)(this->m_Bonus[i][1]*IncValue);

  0001a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0001d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00021	f3 0f 2c c0	 cvttss2si eax, xmm0
  00025	89 41 f8	 mov	 DWORD PTR [ecx-8], eax
  00028	83 ea 01	 sub	 edx, 1
  0002b	75 e6		 jne	 SHORT $LL4@IncBonus

; 326  : 	}
; 327  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?IncBonus@CDevilSquareGround@@QAEXM@Z ENDP		; CDevilSquareGround::IncBonus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?SetBonus@CDevilSquareGround@@QAEXHHH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_zen$ = 12						; size = 4
_exp$ = 16						; size = 4
?SetBonus@CDevilSquareGround@@QAEXHHH@Z PROC		; CDevilSquareGround::SetBonus, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 166  : 	this->m_Bonus[index][0] = exp;

  00003	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR _exp$[ebp]
  00009	89 84 d1 f4 03
	00 00		 mov	 DWORD PTR [ecx+edx*8+1012], eax

; 167  : 	this->m_Bonus[index][1] = zen;

  00010	8b 45 0c	 mov	 eax, DWORD PTR _zen$[ebp]
  00013	89 84 d1 f8 03
	00 00		 mov	 DWORD PTR [ecx+edx*8+1016], eax

; 168  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?SetBonus@CDevilSquareGround@@QAEXHHH@Z ENDP		; CDevilSquareGround::SetBonus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?Clear@CDevilSquareGround@@QAEXXZ
_TEXT	SEGMENT
?Clear@CDevilSquareGround@@QAEXXZ PROC			; CDevilSquareGround::Clear, COMDAT
; _this$ = ecx

; 117  : 	this->m_dwObjCount = 0;

  00000	c7 81 14 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1044], 0

; 118  : }

  0000a	c3		 ret	 0
?Clear@CDevilSquareGround@@QAEXXZ ENDP			; CDevilSquareGround::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?Init@CDevilSquareGround@@QAEXH@Z
_TEXT	SEGMENT
_Index$ = 8						; size = 4
?Init@CDevilSquareGround@@QAEXH@Z PROC			; CDevilSquareGround::Init, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  : 	this->m_dwObjCount = 0;
; 107  : 	this->m_iIndex = Index;

  00003	8b 45 08	 mov	 eax, DWORD PTR _Index$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 108  : 	memset(this->m_DevilSquareMonsterInfo, 0xFF, sizeof(this->m_DevilSquareMonsterInfo));

  00009	68 f0 00 00 00	 push	 240			; 000000f0H
  0000e	68 ff 00 00 00	 push	 255			; 000000ffH
  00013	89 86 f0 03 00
	00		 mov	 DWORD PTR [esi+1008], eax
  00019	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001c	50		 push	 eax
  0001d	c7 86 14 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1044], 0
  00027	e8 00 00 00 00	 call	 _memset

; 109  : 	memset(this->m_DevilSquareBossMonsterInfo, 0xFF, sizeof(this->m_DevilSquareBossMonsterInfo));

  0002c	68 e0 01 00 00	 push	 480			; 000001e0H
  00031	8d 86 f4 00 00
	00		 lea	 eax, DWORD PTR [esi+244]
  00037	68 ff 00 00 00	 push	 255			; 000000ffH
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	5e		 pop	 esi

; 110  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?Init@CDevilSquareGround@@QAEXH@Z ENDP			; CDevilSquareGround::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ??1CDevilSquareGround@@UAE@XZ
_TEXT	SEGMENT
??1CDevilSquareGround@@UAE@XZ PROC			; CDevilSquareGround::~CDevilSquareGround, COMDAT
; _this$ = ecx

; 52   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDevilSquareGround@@6B@

; 53   : 	this->m_BonusScoreTable[0][0] = 0;
; 54   : 	this->m_BonusScoreTable[0][1] = 0;
; 55   : 	this->m_BonusScoreTable[0][2] = 0;
; 56   : 	this->m_BonusScoreTable[0][3] = 170;
; 57   : 	
; 58   : 	this->m_BonusScoreTable[1][0] = 20;
; 59   : 	this->m_BonusScoreTable[1][1] = 90;
; 60   : 	this->m_BonusScoreTable[1][2] = 120;
; 61   : 	this->m_BonusScoreTable[1][3] = 400;
; 62   : 
; 63   : 	this->m_BonusScoreTable[2][0] = 10;
; 64   : 	this->m_BonusScoreTable[2][1] = 10;
; 65   : 	this->m_BonusScoreTable[2][2] = 10;
; 66   : 	this->m_BonusScoreTable[2][3] = 200;
; 67   : 
; 68   : 	this->m_BonusScoreTable[3][0] = 0;
; 69   : 	this->m_BonusScoreTable[3][1] = 0;
; 70   : 	this->m_BonusScoreTable[3][2] = 0;
; 71   : 	this->m_BonusScoreTable[3][3] = 0;
; 72   : 
; 73   : 	this->m_BonusScoreTable[0][4] = 170;
; 74   : 	this->m_BonusScoreTable[0][5] = 170;
; 75   : 
; 76   : 	this->m_BonusScoreTable[1][4] = 400;
; 77   : 	this->m_BonusScoreTable[1][5] = 400;
; 78   : 
; 79   : 	this->m_BonusScoreTable[2][4] = 200;
; 80   : 	this->m_BonusScoreTable[2][5] = 200;
; 81   : 
; 82   : 	this->m_BonusScoreTable[3][4] = 0;
; 83   : 	this->m_BonusScoreTable[3][5] = 0;
; 84   : 
; 85   : 	this->m_BonusScoreTable[4][0] = 0;
; 86   : 	this->m_BonusScoreTable[4][1] = 0;
; 87   : 	this->m_BonusScoreTable[4][2] = 0;
; 88   : 	this->m_BonusScoreTable[4][3] = 0;
; 89   : 	this->m_BonusScoreTable[4][4] = 0;
; 90   : 	this->m_BonusScoreTable[4][5] = 0;
; 91   : 
; 92   : 	this->m_BonusScoreTable[0][6] = 170;
; 93   : 	this->m_BonusScoreTable[1][6] = 400;
; 94   : 	this->m_BonusScoreTable[2][6] = 200;
; 95   : 	this->m_BonusScoreTable[3][6] = 0;
; 96   : 	this->m_BonusScoreTable[4][6] = 0;
; 97   : 
; 98   : 	DeleteCriticalSection(&this->m_UserCrit);

  00009	8d 86 04 05 00
	00		 lea	 eax, DWORD PTR [esi+1284]
  0000f	c7 86 18 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1048], 0
  00019	c7 86 1c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1052], 0
  00023	c7 86 20 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1056], 0
  0002d	c7 86 24 04 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+1060], 170 ; 000000aaH
  00037	c7 86 34 04 00
	00 14 00 00 00	 mov	 DWORD PTR [esi+1076], 20 ; 00000014H
  00041	c7 86 38 04 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+1080], 90 ; 0000005aH
  0004b	c7 86 3c 04 00
	00 78 00 00 00	 mov	 DWORD PTR [esi+1084], 120 ; 00000078H
  00055	c7 86 40 04 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1088], 400 ; 00000190H
  0005f	c7 86 50 04 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+1104], 10 ; 0000000aH
  00069	c7 86 54 04 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+1108], 10 ; 0000000aH
  00073	c7 86 58 04 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+1112], 10 ; 0000000aH
  0007d	c7 86 5c 04 00
	00 c8 00 00 00	 mov	 DWORD PTR [esi+1116], 200 ; 000000c8H
  00087	c7 86 6c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1132], 0
  00091	c7 86 70 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1136], 0
  0009b	c7 86 74 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1140], 0
  000a5	c7 86 78 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1144], 0
  000af	50		 push	 eax
  000b0	c7 86 28 04 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+1064], 170 ; 000000aaH
  000ba	c7 86 2c 04 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+1068], 170 ; 000000aaH
  000c4	c7 86 44 04 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1092], 400 ; 00000190H
  000ce	c7 86 48 04 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1096], 400 ; 00000190H
  000d8	c7 86 60 04 00
	00 c8 00 00 00	 mov	 DWORD PTR [esi+1120], 200 ; 000000c8H
  000e2	c7 86 64 04 00
	00 c8 00 00 00	 mov	 DWORD PTR [esi+1124], 200 ; 000000c8H
  000ec	c7 86 7c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1148], 0
  000f6	c7 86 80 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1152], 0
  00100	c7 86 88 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1160], 0
  0010a	c7 86 8c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1164], 0
  00114	c7 86 90 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1168], 0
  0011e	c7 86 94 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1172], 0
  00128	c7 86 98 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1176], 0
  00132	c7 86 9c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1180], 0
  0013c	c7 86 30 04 00
	00 aa 00 00 00	 mov	 DWORD PTR [esi+1072], 170 ; 000000aaH
  00146	c7 86 4c 04 00
	00 90 01 00 00	 mov	 DWORD PTR [esi+1100], 400 ; 00000190H
  00150	c7 86 68 04 00
	00 c8 00 00 00	 mov	 DWORD PTR [esi+1128], 200 ; 000000c8H
  0015a	c7 86 84 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1156], 0
  00164	c7 86 a0 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1184], 0
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00174	8b 8e d4 02 00
	00		 mov	 ecx, DWORD PTR [esi+724]
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 99   : }

  0017a	81 c6 d4 02 00
	00		 add	 esi, 724		; 000002d4H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00180	85 c9		 test	 ecx, ecx
  00182	74 25		 je	 SHORT $LN7@CDevilSqua

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00184	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00187	2b c1		 sub	 eax, ecx
  00189	c1 f8 02	 sar	 eax, 2
  0018c	50		 push	 eax
  0018d	51		 push	 ecx
  0018e	8b ce		 mov	 ecx, esi
  00190	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@I@Z ; std::_Wrap_alloc<std::allocator<OBJECTSTRUCT *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00195	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0019b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  001a2	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@CDevilSqua:
  001a9	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 99   : }

  001aa	c3		 ret	 0
??1CDevilSquareGround@@UAE@XZ ENDP			; CDevilSquareGround::~CDevilSquareGround
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ??0CDevilSquareGround@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDevilSquareGround@@QAE@XZ PROC			; CDevilSquareGround::CDevilSquareGround, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 44   : 	this->Init(0);

  00007	6a 00		 push	 0
  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDevilSquareGround@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00012	c7 86 d4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+724], 0

; 481  : 		_Mylast = pointer();

  0001c	c7 86 d8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+728], 0

; 482  : 		_Myend = pointer();

  00026	c7 86 dc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+732], 0
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp

; 44   : 	this->Init(0);

  00030	e8 00 00 00 00	 call	 ?Init@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::Init

; 45   : 	InitializeCriticalSection(&this->m_UserCrit);

  00035	8d 86 04 05 00
	00		 lea	 eax, DWORD PTR [esi+1284]
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 46   : }

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??0CDevilSquareGround@@QAE@XZ ENDP			; CDevilSquareGround::CDevilSquareGround
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 610  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquareground.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 610  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
