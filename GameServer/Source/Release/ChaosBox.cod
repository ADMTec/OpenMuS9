; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ChaosBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CChaosBox@@QAE@XZ				; CChaosBox::CChaosBox
PUBLIC	??1CChaosBox@@UAE@XZ				; CChaosBox::~CChaosBox
PUBLIC	?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxCheck
PUBLIC	?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit
PUBLIC	?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxItemDown
PUBLIC	?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::ChaosBoxMix
PUBLIC	?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::CheckDevilSquareItem
PUBLIC	?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem
PUBLIC	?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CChaosBox::DevilSquareEventChaosMix
PUBLIC	?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::LogPlusItemLevelChaosItem
PUBLIC	?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem
PUBLIC	?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z ; CChaosBox::PlusItemLevelChaosMix
PUBLIC	?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::PegasiaChaosMix
PUBLIC	?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::CircleChaosMix
PUBLIC	?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::WingChaosMix
PUBLIC	?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DefaultChaosMix
PUBLIC	?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DevilSquareItemChaosMix
PUBLIC	?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::BloodCastleItemChaosMix
PUBLIC	?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SetItemChaosMix
PUBLIC	?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DarkHorseChaosMix
PUBLIC	?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::DarkSpiritChaosMix
PUBLIC	?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::BlessPotionChaosMix
PUBLIC	?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SoulPotionChaosMix
PUBLIC	?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LifeStoneChaosMix
PUBLIC	?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::HiddenTreasureBoxItemMix
PUBLIC	?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_01Level_Mix
PUBLIC	?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_02Level_Mix
PUBLIC	?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_03Level_Mix
PUBLIC	?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::Fenrir_04Upgrade_Mix
PUBLIC	?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv1_Mix
PUBLIC	?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv2_Mix
PUBLIC	?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ShieldPotionLv3_Mix
PUBLIC	?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CondorFeather_Mix
PUBLIC	?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::NewWingChaos_Mix
PUBLIC	?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LotteryItemMix
PUBLIC	?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CherryBlossomMix
PUBLIC	?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::IllusionTemple_Mix
PUBLIC	?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SeedExtractMix
PUBLIC	?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SeedSphereCompositeMix
PUBLIC	?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ; CChaosBox::SetSeedSphereMix
PUBLIC	?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ; CChaosBox::RemoveSeedSphereMix
PUBLIC	?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::SecromiconMix
PUBLIC	?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LuckySystemItemCreate
PUBLIC	?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LuckySystemJewelCreate
PUBLIC	?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::GoldenNSilverBoxMix
PUBLIC	?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z	; CChaosBox::Wing25Mix
PUBLIC	?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::SocketItemMix
PUBLIC	?IsPlusItemJewel@CChaosBox@@QAEHH@Z		; CChaosBox::IsPlusItemJewel
PUBLIC	?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxSpecialItemDown
PUBLIC	?IsCondorItem@CChaosBox@@QAEHH@Z		; CChaosBox::IsCondorItem
PUBLIC	?Is1stLevelWing@CChaosBox@@QAEHH@Z		; CChaosBox::Is1stLevelWing
PUBLIC	?Is2ndLevelWing@CChaosBox@@QAEHH@Z		; CChaosBox::Is2ndLevelWing
PUBLIC	?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
PUBLIC	?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown
PUBLIC	?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z	; CChaosBox::RandomLevelDown
PUBLIC	?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::CastleSpecialItemMix
PUBLIC	??_GCChaosBox@@UAEPAXI@Z			; CChaosBox::`scalar deleting destructor'
PUBLIC	??_7CChaosBox@@6B@				; CChaosBox::`vftable'
PUBLIC	?g_ChaosBox@@3VCChaosBox@@A			; g_ChaosBox
PUBLIC	??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@ ; `string'
PUBLIC	??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@ ; `string'
PUBLIC	??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@ ; `string'
PUBLIC	??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@ ; `string'
PUBLIC	??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@ ; `string'
PUBLIC	??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@ ; `string'
PUBLIC	??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@ ; `string'
PUBLIC	??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@ ; `string'
PUBLIC	??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@ ; `string'
PUBLIC	??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@ ; `string'
PUBLIC	??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@ ; `string'
PUBLIC	??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@ ; `string'
PUBLIC	??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@ ; `string'
PUBLIC	??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@ ; `string'
PUBLIC	??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@ ; `string'
PUBLIC	??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@ ; `string'
PUBLIC	??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@ ; `string'
PUBLIC	??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@ ; `string'
PUBLIC	??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@ ; `string'
PUBLIC	??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0M@OEKEBNDM@DinorantMix?$AA@		; `string'
PUBLIC	??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@ ; `string'
PUBLIC	??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@ ; `string'
PUBLIC	??_C@_09CKGJGION@CircleMix?$AA@			; `string'
PUBLIC	??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ ; `string'
PUBLIC	??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ ; `string'
PUBLIC	??_C@_09GJEFJCKN@WingMix?02?$AA@		; `string'
PUBLIC	??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@ ; `string'
PUBLIC	??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ ; `string'
PUBLIC	??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ ; `string'
PUBLIC	??_C@_0L@DBFFCLIB@SetItemMix?$AA@		; `string'
PUBLIC	??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ ; `string'
PUBLIC	??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ ; `string'
PUBLIC	??_C@_0N@LDINKAHL@DarkHorseMix?$AA@		; `string'
PUBLIC	??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ ; `string'
PUBLIC	??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ ; `string'
PUBLIC	??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@		; `string'
PUBLIC	??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@		; `string'
PUBLIC	??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@ ; `string'
PUBLIC	??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ ; `string'
PUBLIC	??_C@_0O@KAEODMHN@SoulPotionMix?$AA@		; `string'
PUBLIC	??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0N@FJGBJPII@LifeStoneMix?$AA@		; `string'
PUBLIC	??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ ; `string'
PUBLIC	??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ ; `string'
PUBLIC	??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@ ; `string'
PUBLIC	??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ ; `string'
PUBLIC	??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@	; `string'
PUBLIC	??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@	; `string'
PUBLIC	??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@	; `string'
PUBLIC	??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@	; `string'
PUBLIC	??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@ ; `string'
PUBLIC	??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@ ; `string'
PUBLIC	??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@ ; `string'
PUBLIC	??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ ; `string'
PUBLIC	??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ ; `string'
PUBLIC	??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@ ; `string'
PUBLIC	??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@ ; `string'
PUBLIC	??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ ; `string'
PUBLIC	??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ ; `string'
PUBLIC	??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@ ; `string'
PUBLIC	??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@ ; `string'
PUBLIC	??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ ; `string'
PUBLIC	??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ ; `string'
PUBLIC	??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@	; `string'
PUBLIC	??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@ ; `string'
PUBLIC	??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ ; `string'
PUBLIC	??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ ; `string'
PUBLIC	??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@	; `string'
PUBLIC	??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@ ; `string'
PUBLIC	??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@	; `string'
PUBLIC	??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@ ; `string'
PUBLIC	??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0M@JCBFJDIJ@CashLottery?$AA@		; `string'
PUBLIC	??_C@_09KIGHELLC@ChaosCard?$AA@			; `string'
PUBLIC	??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@		; `string'
PUBLIC	??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@		; `string'
PUBLIC	??_C@_0O@CJDOCADP@ChaosCardMini?$AA@		; `string'
PUBLIC	??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@ ; `string'
PUBLIC	??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@ ; `string'
PUBLIC	??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@ ; `string'
PUBLIC	??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@ ; `string'
PUBLIC	??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ ; `string'
PUBLIC	??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ ; `string'
PUBLIC	??_C@_0M@PHAOGDNK@SeedExtract?$AA@		; `string'
PUBLIC	??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ ; `string'
PUBLIC	??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@ ; `string'
PUBLIC	??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ ; `string'
PUBLIC	??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@	; `string'
PUBLIC	??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ ; `string'
PUBLIC	??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@		; `string'
PUBLIC	??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@ ; `string'
PUBLIC	??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@ ; `string'
PUBLIC	??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@ ; `string'
PUBLIC	??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@	; `string'
PUBLIC	??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@ ; `string'
PUBLIC	??_C@_0L@FKBLGOD@Secromicon?$AA@		; `string'
PUBLIC	??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ ; `string'
PUBLIC	??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0M@JDLPAJDH@LuckySystem?$AA@		; `string'
PUBLIC	??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@ ; `string'
PUBLIC	??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@ ; `string'
PUBLIC	??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ ; `string'
PUBLIC	??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ ; `string'
PUBLIC	??_C@_0O@DEOFBGCG@SocketItemMix?$AA@		; `string'
PUBLIC	??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ ; `string'
PUBLIC	??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ ; `string'
PUBLIC	??_C@_0M@OFDFPMHD@25WingLevel?$AA@		; `string'
PUBLIC	??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@ ; `string'
PUBLIC	??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ ; `string'
PUBLIC	??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ ; `string'
PUBLIC	??_R4CChaosBox@@6B@				; CChaosBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCChaosBox@@@8				; CChaosBox `RTTI Type Descriptor'
PUBLIC	??_R3CChaosBox@@8				; CChaosBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CChaosBox@@8				; CChaosBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CChaosBox@@8			; CChaosBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@437f0000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?OldValue@CItem@@QAEXXZ:PROC			; CItem::OldValue
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?IsSetItem@CItem@@QAEHXZ:PROC			; CItem::IsSetItem
EXTRN	?GetName@CItem@@QAEPADXZ:PROC			; CItem::GetName
EXTRN	?IsExtItem@CItem@@QAEHXZ:PROC			; CItem::IsExtItem
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemStrengthenOption
EXTRN	?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemOptionLevel
EXTRN	?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z:PROC ; CItemSystemFor380::Is380Item
EXTRN	??0_SOCKET_SPHERE_OPTION@@QAE@XZ:PROC		; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
EXTRN	??1_SOCKET_SPHERE_OPTION@@QAE@XZ:PROC		; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
EXTRN	?IsSocketItem@CSocketItems@@QAE_NH@Z:PROC	; CSocketItems::IsSocketItem
EXTRN	?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z:PROC ; CSocketItems::GetItemOptions
EXTRN	?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z:PROC ; CSocketItems::CheckSocketOption
EXTRN	?IsSeedItem@CSocketItems@@QAEEH@Z:PROC		; CSocketItems::IsSeedItem
EXTRN	?IsSphereItem@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::IsSphereItem
EXTRN	?IsSeedSphereItem@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::IsSeedSphereItem
EXTRN	?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z:PROC ; CSocketItems::IsItemType
EXTRN	?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z:PROC ; CSocketItems::IsOptionSet
EXTRN	?GetSeedOption@CSocketItems@@QAEEHE@Z:PROC	; CSocketItems::GetSeedOption
EXTRN	?GetSphereLevel@CSocketItems@@QAEEH@Z:PROC	; CSocketItems::GetSphereLevel
EXTRN	?GetSphereOption@CSocketItems@@QAEEGE@Z:PROC	; CSocketItems::GetSphereOption
EXTRN	?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z:PROC ; CSocketItems::GetSeedOption
EXTRN	?GetOptionRate@CSocketItems@@QAEEXZ:PROC	; CSocketItems::GetOptionRate
EXTRN	?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z:PROC ; CSocketItems::CheckMountItem
EXTRN	?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z:PROC ; CSocketItems::ItemSetSeedSphere
EXTRN	?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z:PROC ; CSocketItems::ItemRemoveSeedSphere
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?gObjInventoryCommit@@YAHH@Z:PROC		; gObjInventoryCommit
EXTRN	?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z:PROC ; CheckInventoryEmptySpace
EXTRN	?gObjChaosItemSet@@YAXHHE@Z:PROC		; gObjChaosItemSet
EXTRN	?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z:PROC ; gObjChaosBoxInsertItemPos
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCUserChaosBoxSend
EXTRN	??_ECChaosBox@@UAEPAXI@Z:PROC			; CChaosBox::`vector deleting destructor'
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z:PROC ; PetItemSerialCreateSend
EXTRN	?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z:PROC	; CCastleSiegeSync::GetTaxRateChaos
EXTRN	?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z:PROC	; CCastleSiegeSync::AddTributeMoney
EXTRN	?CheckChoasMixItem@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::CheckChoasMixItem
EXTRN	?BloodCastleChaosMix@CBloodCastle@@QAE_NHH@Z:PROC ; CBloodCastle::BloodCastleChaosMix
EXTRN	?GetEventMap@CBloodCastle@@QAEHH@Z:PROC		; CBloodCastle::GetEventMap
EXTRN	?IsSetItem@CSetItemOption@@QAEHH@Z:PROC		; CSetItemOption::IsSetItem
EXTRN	?GetSetOptionName@CSetItemOption@@QAEPADHH@Z:PROC ; CSetItemOption::GetSetOptionName
EXTRN	?CheckMixContition@CSetItemOption@@QAEHHH@Z:PROC ; CSetItemOption::CheckMixContition
EXTRN	?MakeSetOption@CSetItemOption@@QAEHHH@Z:PROC	; CSetItemOption::MakeSetOption
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?GetPlusChaosRate@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetPlusChaosRate
EXTRN	?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z:PROC	; CCashLottery::GetItem
EXTRN	?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::CheckCastleOwnerMember
EXTRN	?IsPentagram@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsPentagram
EXTRN	?ClearErtel@CElementalSystem@@QAEXPAUOBJECTSTRUCT@@PAVCItem@@@Z:PROC ; CElementalSystem::ClearErtel
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A:BYTE ; g_kJewelOfHarmonySystem
EXTRN	?g_kItemSystemFor380@@3VCItemSystemFor380@@A:BYTE ; g_kItemSystemFor380
EXTRN	?g_SocketItem@@3VCSocketItems@@A:BYTE		; g_SocketItem
EXTRN	?g_SeedExtractMoney@@3HA:DWORD			; g_SeedExtractMoney
EXTRN	?g_SphereCompositeMoney@@3HA:DWORD		; g_SphereCompositeMoney
EXTRN	?g_SphereSetMoney@@3HA:DWORD			; g_SphereSetMoney
EXTRN	?g_SphereRemoveMoney@@3HA:DWORD			; g_SphereRemoveMoney
EXTRN	?g_iFenrir_01Level_MixRate@@3HA:DWORD		; g_iFenrir_01Level_MixRate
EXTRN	?g_iFenrir_02Level_MixRate@@3HA:DWORD		; g_iFenrir_02Level_MixRate
EXTRN	?g_iFenrir_03Level_MixRate@@3HA:DWORD		; g_iFenrir_03Level_MixRate
EXTRN	?g_iCrywolfApplyMvpBenefit@@3HA:DWORD		; g_iCrywolfApplyMvpBenefit
EXTRN	?g_ShieldSystemOn@@3HA:DWORD			; g_ShieldSystemOn
EXTRN	?g_iShieldPotionLv1MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv1MixSuccessRate
EXTRN	?g_iShieldPotionLv1MixMoney@@3HA:DWORD		; g_iShieldPotionLv1MixMoney
EXTRN	?g_iShieldPotionLv2MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv2MixSuccessRate
EXTRN	?g_iShieldPotionLv2MixMoney@@3HA:DWORD		; g_iShieldPotionLv2MixMoney
EXTRN	?g_iShieldPotionLv3MixSuccessRate@@3HA:DWORD	; g_iShieldPotionLv3MixSuccessRate
EXTRN	?g_iShieldPotionLv3MixMoney@@3HA:DWORD		; g_iShieldPotionLv3MixMoney
EXTRN	?gDQChaosSuccessRateLevel1@@3HA:DWORD		; gDQChaosSuccessRateLevel1
EXTRN	?gDQChaosSuccessRateLevel2@@3HA:DWORD		; gDQChaosSuccessRateLevel2
EXTRN	?gDQChaosSuccessRateLevel3@@3HA:DWORD		; gDQChaosSuccessRateLevel3
EXTRN	?gDQChaosSuccessRateLevel4@@3HA:DWORD		; gDQChaosSuccessRateLevel4
EXTRN	?gDQChaosSuccessRateLevel5@@3HA:DWORD		; gDQChaosSuccessRateLevel5
EXTRN	?gDQChaosSuccessRateLevel6@@3HA:DWORD		; gDQChaosSuccessRateLevel6
EXTRN	?gDQChaosSuccessRateLevel7@@3HA:DWORD		; gDQChaosSuccessRateLevel7
EXTRN	?gc_ChaosMixPlusItemLevel_1_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_1
EXTRN	?gc_ChaosMixPlusItemLevel_2_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_1
EXTRN	?gc_ChaosMixPlusItemLevel_3_1@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_1
EXTRN	?gc_ChaosMixPlusItemLevel_1_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_2
EXTRN	?gc_ChaosMixPlusItemLevel_2_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_2
EXTRN	?gc_ChaosMixPlusItemLevel_3_2@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_2
EXTRN	?gc_ChaosMixPlusItemLevel_1_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_1_3
EXTRN	?gc_ChaosMixPlusItemLevel_2_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_2_3
EXTRN	?gc_ChaosMixPlusItemLevel_3_3@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_3_3
EXTRN	?gc_ChaosMixPlusItemLevel_Luck@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_Luck
EXTRN	?gc_ChaosMixPlusItemLevel_Max@@3HA:DWORD	; gc_ChaosMixPlusItemLevel_Max
EXTRN	?gc_ChaosMixCondor_Div@@3HA:DWORD		; gc_ChaosMixCondor_Div
EXTRN	?gc_ChaosMixCondor_Max@@3HA:DWORD		; gc_ChaosMixCondor_Max
EXTRN	?gc_ChaosMix3rdWing_Div@@3HA:DWORD		; gc_ChaosMix3rdWing_Div
EXTRN	?gc_ChaosMix3rdWing_Max@@3HA:DWORD		; gc_ChaosMix3rdWing_Max
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?g_Lottery@@3VCCashLottery@@A:BYTE		; g_Lottery
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?g_iCastleItemMixLimit@@3HA:DWORD		; g_iCastleItemMixLimit
EXTRN	?g_ElementalSystem@@3VCElementalSystem@@A:BYTE	; g_ElementalSystem
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_ChaosBox@@3VCChaosBox@@A DB 044H DUP (?)		; g_ChaosBox
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ChaosBox$initializer$@@3P6AXXZA DD FLAT:??__Eg_ChaosBox@@YAXXZ ; g_ChaosBox$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CChaosBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CChaosBox@@8 DD FLAT:??_R0?AVCChaosBox@@@8 ; CChaosBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CChaosBox@@8
rdata$r	SEGMENT
??_R2CChaosBox@@8 DD FLAT:??_R1A@?0A@EA@CChaosBox@@8	; CChaosBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CChaosBox@@8
rdata$r	SEGMENT
??_R3CChaosBox@@8 DD 00H				; CChaosBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCChaosBox@@@8
data$r	SEGMENT
??_R0?AVCChaosBox@@@8 DD FLAT:??_7type_info@@6B@	; CChaosBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCChaosBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CChaosBox@@6B@
rdata$r	SEGMENT
??_R4CChaosBox@@6B@ DD 00H				; CChaosBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCChaosBox@@@8
	DD	FLAT:??_R3CChaosBox@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
CONST	SEGMENT
??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ DB '['
	DB	'25Wing Mix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate :'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
CONST	SEGMENT
??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ DB '['
	DB	'25Wing Mix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[25Win'
	DB	'g Mix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFDFPMHD@25WingLevel?$AA@
CONST	SEGMENT
??_C@_0M@OFDFPMHD@25WingLevel?$AA@ DB '25WingLevel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'SocketItemMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'SocketItemMix][Level 02] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Soc'
	DB	'ketItemMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEOFBGCG@SocketItemMix?$AA@
CONST	SEGMENT
??_C@_0O@DEOFBGCG@SocketItemMix?$AA@ DB 'SocketItemMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
CONST	SEGMENT
??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ DB '['
	DB	'LuckySystem][JewelOfExtension][%s][%s] CBMix Fail %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
CONST	SEGMENT
??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@ DB '['
	DB	'LuckySystem][JewelOfExtension][%s][%s] CBMix Success %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@
CONST	SEGMENT
??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@ DB '['
	DB	'LuckySystem][ItemMix] - User(ID:%s,Name:%s) Item(Name:%s,Type'
	DB	':%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@
CONST	SEGMENT
??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@ DB '[L'
	DB	'uckySystem][ItemMix] Chaos Card Item Mix Success [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Lucky'
	DB	'System] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
CONST	SEGMENT
??_C@_0M@JDLPAJDH@LuckySystem?$AA@ DB 'LuckySystem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'Secromicon Mix][%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'Secromicon Mix][%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Secrom'
	DB	'icon] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FKBLGOD@Secromicon?$AA@
CONST	SEGMENT
??_C@_0L@FKBLGOD@Secromicon?$AA@ DB 'Secromicon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@
CONST	SEGMENT
??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@ DB '['
	DB	'%s][%s] SeedSphere Remove Success - ItemInfo ( Name : %s, Ite'
	DB	'mCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOp'
	DB	'tion : %d )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@
CONST	SEGMENT
??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@ DB 'SeedSphereRemove', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@
CONST	SEGMENT
??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@ DB '['
	DB	'%s][%s] Set SeedSphere Mix Success - ItemInfo ( Name : %s, It'
	DB	'emCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusO'
	DB	'ption : %d )', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@
CONST	SEGMENT
??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@ DB '['
	DB	'%s][%s] Set Seed Mix Failed - Wrong Item Type for Set Socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@
CONST	SEGMENT
??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@ DB '['
	DB	'%s][%s] Set Seed Mix Failed - SeedSphere is NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@
CONST	SEGMENT
??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@ DB 'SetSeedSphere', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Failed - SeedSphere Data is '
	DB	'NULL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Success - SeedSphere Info ( '
	DB	'Index : %d, Type : %d, Level : %d, ItemCode : %d )', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
CONST	SEGMENT
??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@ DB '['
	DB	'%s][%s] SeedSphere Composite Mix Failed.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@
CONST	SEGMENT
??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@ DB 'SeedSphereComposite', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
CONST	SEGMENT
??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ DB '['
	DB	'%s][%s] Seed Extract Mix Failed - SeedData is NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@
CONST	SEGMENT
??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@ DB '['
	DB	'%s][%s] Seed Extract Mix Success - SeedInfo ( Index : %d, Typ'
	DB	'e : %d, Level : %d, ItemCode : %d )', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
CONST	SEGMENT
??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@ DB '['
	DB	'%s][%s] Seed Extract Mix Failed.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PHAOGDNK@SeedExtract?$AA@
CONST	SEGMENT
??_C@_0M@PHAOGDNK@SeedExtract?$AA@ DB 'SeedExtract', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
CONST	SEGMENT
??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ DB '[C'
	DB	'haosMix][Illusion Temple] Illusion Ticket [%s][%s] CBMix Fail'
	DB	' %d Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
CONST	SEGMENT
??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@ DB '[C'
	DB	'haosMix][Illusion Temple] Illusion Ticket Mix Success [%s][%s'
	DB	'], Money(%d-%d), CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@
CONST	SEGMENT
??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@ DB '['
	DB	'%s][%s] CherryBlossomMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@
CONST	SEGMENT
??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@ DB '['
	DB	'CashShop][ChaosCardMix] - User(ID:%s,Name:%s) Item(Name:%s,Ty'
	DB	'pe:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d,Ex:(%d,%d'
	DB	',%d,%d,%d,%d))', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@
CONST	SEGMENT
??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@ DB '[C'
	DB	'haosMix][ChaosCardMix] Chaos Card Item Mix Success [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@
CONST	SEGMENT
??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@ DB '[Ch'
	DB	'aosMix][LotteryItemMix] Lottery Item Mix Failed. Can''t Get I'
	DB	'tem from List.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CJDOCADP@ChaosCardMini?$AA@
CONST	SEGMENT
??_C@_0O@CJDOCADP@ChaosCardMini?$AA@ DB 'ChaosCardMini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@
CONST	SEGMENT
??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@ DB 'ChaosCardRare', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@
CONST	SEGMENT
??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@ DB 'ChaosCardGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIGHELLC@ChaosCard?$AA@
CONST	SEGMENT
??_C@_09KIGHELLC@ChaosCard?$AA@ DB 'ChaosCard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JCBFJDIJ@CashLottery?$AA@
CONST	SEGMENT
??_C@_0M@JCBFJDIJ@CashLottery?$AA@ DB 'CashLottery', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 02] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@
CONST	SEGMENT
??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@ DB '['
	DB	'ThirdWing Mix][Level 02] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@
CONST	SEGMENT
??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@ DB 'ThirdWingLevel2_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
CONST	SEGMENT
??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@ DB '['
	DB	'ThirdWing Mix][Level 01] [%s][%s] CBMix Success %d Money : %d'
	DB	'-%d, CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@
CONST	SEGMENT
??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@ DB '['
	DB	'ThirdWing Mix][Level 01] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@
CONST	SEGMENT
??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@ DB 'ThirdWingLevel1_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'CastleSpecialMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'CastleSpecialMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Lack of Money (%'
	DB	'd/%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@
CONST	SEGMENT
??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@
CONST	SEGMENT
??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@ DB 'Castle Special Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Item Error (DG:%'
	DB	'd, BGx10:%d, SGx10:%d, Other:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - Mix Count Limit '
	DB	'Over', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
CONST	SEGMENT
??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@ DB '['
	DB	'CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
CONST	SEGMENT
??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv3 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
CONST	SEGMENT
??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv3 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@
CONST	SEGMENT
??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv3 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv3 Mix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
CONST	SEGMENT
??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv2 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
CONST	SEGMENT
??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv2 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@
CONST	SEGMENT
??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv2 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv2 Mix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
CONST	SEGMENT
??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv1 Potion Mix [%s][%s] CBMix Fail %'
	DB	'd Money : %d-%d, CharmRate : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
CONST	SEGMENT
??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@ DB '['
	DB	'ChaosMix][Shield Potion] Lv1 Potion Mix Success [%s][%s], Mon'
	DB	'ey(%d-%d), CharmRate : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@
CONST	SEGMENT
??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@ DB '[Poti'
	DB	'onMix][ShieldPotion Lv1 Mix] - Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@
CONST	SEGMENT
??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@ DB 'Potio'
	DB	'nMix][ShieldPotion Lv1 Mix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 04] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 04] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 04] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@ DB 'Fenrir_04Level_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 03] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 03] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 03] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@ DB 'Fenrir_03Level_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 02] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@ DB 'Fenrir_02Level_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, C'
	DB	'harmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Fenrir Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d'
	DB	', CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@
CONST	SEGMENT
??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@ DB '['
	DB	'Fenrir Mix][Level 01] Chaos Mix Start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@
CONST	SEGMENT
??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@ DB 'Fenrir_01Level_Mix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Fail Rate:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Success:%d Type:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] CBMix Failed - iCrystalMix'
	DB	'Type is wrong : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] Chaos Mix Start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@
CONST	SEGMENT
??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@ DB 'Hidden TreasureBox M'
	DB	'ix', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
CONST	SEGMENT
??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@ DB '['
	DB	'Hidden TreasureBox Event] [%s][%s] Item Mix Failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
CONST	SEGMENT
??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ DB '['
	DB	'LifeStoneMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
CONST	SEGMENT
??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ DB '['
	DB	'LifeStoneMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Life'
	DB	'StoneMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FJGBJPII@LifeStoneMix?$AA@
CONST	SEGMENT
??_C@_0N@FJGBJPII@LifeStoneMix?$AA@ DB 'LifeStoneMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'SoulPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'SoulPotionMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Sou'
	DB	'lPotionMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KAEODMHN@SoulPotionMix?$AA@
CONST	SEGMENT
??_C@_0O@KAEODMHN@SoulPotionMix?$AA@ DB 'SoulPotionMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'BlessPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'BlessPotionMix] [%s][%s] CBMix Success %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@
CONST	SEGMENT
??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@ DB '[BlessP'
	DB	'otionMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@
CONST	SEGMENT
??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@ DB 'BlessPotionMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'DarkSpiritMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRat'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'DarkSpiritMix] [%s][%s] CBMix Success %d Money : %d-%d, Charm'
	DB	'Rate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dar'
	DB	'kSpiritMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@
CONST	SEGMENT
??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@ DB 'DarkSpiritMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
CONST	SEGMENT
??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@ DB '['
	DB	'DarkHorseMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
CONST	SEGMENT
??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@ DB '['
	DB	'DarkHorseMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmR'
	DB	'ate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dark'
	DB	'HorseMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDINKAHL@DarkHorseMix?$AA@
CONST	SEGMENT
??_C@_0N@LDINKAHL@DarkHorseMix?$AA@ DB 'DarkHorseMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
CONST	SEGMENT
??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@ DB '['
	DB	'SetItemMix] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
CONST	SEGMENT
??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@ DB '['
	DB	'SetItemMix] [%s][%s] CBMix Success %d Money : %d-%d (SetName:'
	DB	'%s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[SetIte'
	DB	'mMix] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DBFFCLIB@SetItemMix?$AA@
CONST	SEGMENT
??_C@_0L@DBFFCLIB@SetItemMix?$AA@ DB 'SetItemMix', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
CONST	SEGMENT
??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ DB '['
	DB	'WingMix,2] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
CONST	SEGMENT
??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ DB '['
	DB	'WingMix,2] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@
CONST	SEGMENT
??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@ DB '[Mi'
	DB	'xSystem][WingChaosMix] WingCharmItemNum => %d , WingCharmInde'
	DB	'x => %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@ DB '[WingMi'
	DB	'x,2] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09GJEFJCKN@WingMix?02?$AA@
CONST	SEGMENT
??_C@_09GJEFJCKN@WingMix?02?$AA@ DB 'WingMix,2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
CONST	SEGMENT
??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@ DB '['
	DB	'CircleMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
CONST	SEGMENT
??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@ DB '['
	DB	'CircleMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[CircleM'
	DB	'ix] Chaos Mix Start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CKGJGION@CircleMix?$AA@
CONST	SEGMENT
??_C@_09CKGJGION@CircleMix?$AA@ DB 'CircleMix', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@
CONST	SEGMENT
??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@ DB '['
	DB	'DinorantMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate '
	DB	': %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@
CONST	SEGMENT
??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@ DB '['
	DB	'DinorantMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRa'
	DB	'te : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Dinor'
	DB	'antMix] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEKEBNDM@DinorantMix?$AA@
CONST	SEGMENT
??_C@_0M@OEKEBNDM@DinorantMix?$AA@ DB 'DinorantMix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
CONST	SEGMENT
??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], Cha'
	DB	'rmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
CONST	SEGMENT
??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], '
	DB	'CharmRate : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@
CONST	SEGMENT
??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Not Enough Money [%d] need zen '
	DB	'[%d]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Plu'
	DB	'sItemLevel] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@
CONST	SEGMENT
??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@ DB '['
	DB	'PlusItemLevel] [%s][%s] CBMix Charm of luck over 10% (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@
CONST	SEGMENT
??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@ DB '['
	DB	'%s] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d] Ex:[%d,'
	DB	'%d,%d,%d,%d,%d,%d] Set:[%d] 380:[%d] HO:[%d,%d] Socket[%d,%d,'
	DB	'%d,%d,%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
CONST	SEGMENT
??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@ DB '['
	DB	'PlusItemLevel,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%'
	DB	'd][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex:[%d] HO:[%d,%'
	DB	'd]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@
CONST	SEGMENT
??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@ DB '[Devi'
	DB	'lSquare] Too many Devil''s Key or Eyes [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@
CONST	SEGMENT
??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@ DB '[Devil'
	DB	'Square] Charm Of Luck Over 10% [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@
CONST	SEGMENT
??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@ DB '[Devil'
	DB	'Square] Not Found Chaos Gem [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@
CONST	SEGMENT
??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@ DB '[Devil'
	DB	'Square] DiffLevel Devil''s Key or Eyes [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix Success Rate:%d Money : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix Fail %d Money : %d-%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@
CONST	SEGMENT
??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@ DB '['
	DB	'DevilSquare] [%s][%s] CBMix Not Enough Money [%d] need zen [%'
	DB	'd]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@
CONST	SEGMENT
??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@ DB '['
	DB	'DevilSquare] [%s][%s] Invalid DQItem Level [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@
CONST	SEGMENT
??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@ DB '[Devil'
	DB	'Square] Chaos Mix Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@
CONST	SEGMENT
??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@ DB '[Dev'
	DB	'ilSquare] DQItems Not Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@
CONST	SEGMENT
??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@ DB '[Devil'
	DB	'Square] Charm Of Luck Count Over', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@
CONST	SEGMENT
??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@ DB '[DevilS'
	DB	'quare] DiffLevel DQItems Found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@
CONST	SEGMENT
??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@ DB '[DevilS'
	DB	'quare] Other DQItems Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@
CONST	SEGMENT
??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@ DB '[DevilSq'
	DB	'uare] Search DevilSquareItem', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
CONST	SEGMENT
??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@ DB '['
	DB	'DevilSquare,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d]'
	DB	'[%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex[%d] HO:[%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@
CONST	SEGMENT
??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@ DB '['
	DB	'%s][%s] CBMix Success Rate:%d Money : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@
CONST	SEGMENT
??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@ DB '['
	DB	'%s][%s] CBMix Fail %d Money : %d-%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@
CONST	SEGMENT
??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@ DB '[M'
	DB	'ixSystem] WingCharmItemNum => %d , WingCharmIndex => %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@
CONST	SEGMENT
??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@ DB '['
	DB	'%s][%s] CBMix need Zen : %d SuccessRate : %d, CharmRate : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@
CONST	SEGMENT
??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@ DB '['
	DB	'%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d][%d] Ex:[%d,%'
	DB	'd,%d,%d,%d,%d,%d]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CChaosBox@@6B@
CONST	SEGMENT
??_7CChaosBox@@6B@ DD FLAT:??_R4CChaosBox@@6B@		; CChaosBox::`vftable'
	DD	FLAT:??_ECChaosBox@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ChaosBox@@YAXXZ
text$yd	SEGMENT
??__Fg_ChaosBox@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ChaosBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00005	e9 00 00 00 00	 jmp	 ??1CChaosBox@@UAE@XZ	; CChaosBox::~CChaosBox
??__Fg_ChaosBox@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ChaosBox''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ??__Eg_ChaosBox@@YAXXZ
text$di	SEGMENT
??__Eg_ChaosBox@@YAXXZ PROC				; `dynamic initializer for 'g_ChaosBox'', COMDAT

; 24   : CChaosBox g_ChaosBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00005	e8 00 00 00 00	 call	 ??0CChaosBox@@QAE@XZ	; CChaosBox::CChaosBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ChaosBox@@YAXXZ ; `dynamic atexit destructor for 'g_ChaosBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ChaosBox@@YAXXZ ENDP				; `dynamic initializer for 'g_ChaosBox''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCChaosBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCChaosBox@@UAEPAXI@Z PROC				; CChaosBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CChaosBox@@UAE@XZ	; CChaosBox::~CChaosBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCChaosBox@@UAEPAXI@Z ENDP				; CChaosBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -36						; size = 4
_iSoulGemMixCount$1$ = -32				; size = 4
_iBlessGemMixCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CastleSpecialItemMix, COMDAT
; _this$ = ecx

; 4209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 4210 : 	lpObj->ChaosLock = TRUE;
; 4211 : 	int iDefendGemCount = 0;
; 4212 : 	int iBlessGemMixCount = 0;
; 4213 : 	int iSoulGemMixCount = 0;
; 4214 : 	int iInvalidItemCount =0;
; 4215 : 	int iChaosMoney = 0;
; 4216 : 
; 4217 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4218 : 	PHeadSetB((PBYTE)&pMsg,0x86,sizeof(pMsg));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	6a 10		 push	 16			; 00000010H
  0001a	33 db		 xor	 ebx, ebx
  0001c	89 4d dc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001f	68 86 00 00 00	 push	 134			; 00000086H
  00024	50		 push	 eax
  00025	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002f	89 5d e4	 mov	 DWORD PTR _iBlessGemMixCount$1$[ebp], ebx
  00032	89 5d e0	 mov	 DWORD PTR _iSoulGemMixCount$1$[ebp], ebx
  00035	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00038	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4219 : 	pMsg.Result = CB_ERROR;

  00040	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl

; 4220 : 
; 4221 : 	if(g_CastleSiege.CheckCastleOwnerMember(lpObj->m_Index) != FALSE )

  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00048	ff 36		 push	 DWORD PTR [esi]
  0004a	e8 00 00 00 00	 call	 ?CheckCastleOwnerMember@CCastleSiege@@QAEHH@Z ; CCastleSiege::CheckCastleOwnerMember
  0004f	85 c0		 test	 eax, eax
  00051	74 0c		 je	 SHORT $LN5@CastleSpec

; 4222 : 	{
; 4223 : 		if(lpObj->GuildStatus != G_MASTER)

  00053	81 be 28 06 00
	00 80 00 00 00	 cmp	 DWORD PTR [esi+1576], 128 ; 00000080H
  0005d	74 3e		 je	 SHORT $LN7@CastleSpec
$LN5@CastleSpec:

; 4224 : 		{
; 4225 : 			LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth",

  0005f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00062	50		 push	 eax
  00063	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@INONCDCO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
$LN30@CastleSpec:
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4226 : 				lpObj->AccountID,lpObj->Name);
; 4227 : 			DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  00072	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00076	50		 push	 eax
  00077	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0007a	50		 push	 eax
  0007b	ff 36		 push	 DWORD PTR [esi]
  0007d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00082	83 c4 18	 add	 esp, 24			; 00000018H

; 4228 : 			lpObj->ChaosLock = FALSE;

  00085	89 9e 20 12 00
	00		 mov	 DWORD PTR [esi+4640], ebx
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 4340 : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
$LN7@CastleSpec:

; 4229 : 			return;
; 4230 : 		}
; 4231 : 	}
; 4232 : 	else
; 4233 : 	{
; 4234 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - No Auth",
; 4235 : 			lpObj->AccountID,lpObj->Name);
; 4236 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);
; 4237 : 		lpObj->ChaosLock = FALSE;
; 4238 : 		return;
; 4239 : 	}
; 4240 : 
; 4241 : 	if(g_iCastleItemMixLimit <= 0)

  0009d	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_iCastleItemMixLimit@@3HA, ebx ; g_iCastleItemMixLimit
  000a3	7f 0f		 jg	 SHORT $LN8@CastleSpec

; 4242 : 	{
; 4243 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Mix Count Limit Over",

  000a5	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000a8	50		 push	 eax
  000a9	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@INAPNAEI@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@

; 4244 : 			lpObj->AccountID,lpObj->Name);
; 4245 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);
; 4246 : 		lpObj->ChaosLock = FALSE;
; 4247 : 		return;

  000b2	eb b8		 jmp	 SHORT $LN30@CastleSpec
$LN8@CastleSpec:
  000b4	57		 push	 edi

; 4248 : 	}
; 4249 : 
; 4250 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000b5	33 ff		 xor	 edi, edi
  000b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@CastleSpec:

; 4251 : 	{
; 4252 : 		if(lpObj->pChaosBox[n].IsItem() == TRUE)

  000c0	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000c6	03 cf		 add	 ecx, edi
  000c8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	75 5b		 jne	 SHORT $LN26@CastleSpec

; 4253 : 		{
; 4254 : 			if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,30))

  000d2	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  000d8	ba 1e 18 00 00	 mov	 edx, 6174		; 0000181eH
  000dd	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  000e2	66 3b c2	 cmp	 ax, dx
  000e5	75 10		 jne	 SHORT $LN10@CastleSpec

; 4255 : 			{
; 4256 : 				iBlessGemMixCount += (lpObj->pChaosBox[n].m_Level + 1);

  000e7	0f bf 44 39 08	 movsx	 eax, WORD PTR [ecx+edi+8]
  000ec	8b 4d e4	 mov	 ecx, DWORD PTR _iBlessGemMixCount$1$[ebp]
  000ef	41		 inc	 ecx
  000f0	03 c8		 add	 ecx, eax
  000f2	89 4d e4	 mov	 DWORD PTR _iBlessGemMixCount$1$[ebp], ecx
  000f5	eb 39		 jmp	 SHORT $LN28@CastleSpec
$LN10@CastleSpec:

; 4257 : 			}
; 4258 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,31))

  000f7	ba 1f 18 00 00	 mov	 edx, 6175		; 0000181fH
  000fc	66 3b c2	 cmp	 ax, dx

; 4259 : 			{
; 4260 : 				iSoulGemMixCount += (lpObj->pChaosBox[n].m_Level + 1);

  000ff	8b 55 e0	 mov	 edx, DWORD PTR _iSoulGemMixCount$1$[ebp]
  00102	75 10		 jne	 SHORT $LN12@CastleSpec
  00104	0f bf 44 39 08	 movsx	 eax, WORD PTR [ecx+edi+8]
  00109	42		 inc	 edx
  0010a	8b 4d e4	 mov	 ecx, DWORD PTR _iBlessGemMixCount$1$[ebp]
  0010d	03 d0		 add	 edx, eax
  0010f	89 55 e0	 mov	 DWORD PTR _iSoulGemMixCount$1$[ebp], edx
  00112	eb 1f		 jmp	 SHORT $LN29@CastleSpec
$LN12@CastleSpec:

; 4261 : 			}
; 4262 : #ifdef __NOVUS__
; 4263 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12, 138) && lpObj->pChaosBox[n].m_Level == 2 )
; 4264 : 			{
; 4265 : 				iDefendGemCount++;
; 4266 : 			}
; 4267 : #else
; 4268 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(14,31))

  00114	b9 1f 1c 00 00	 mov	 ecx, 7199		; 00001c1fH
  00119	66 3b c1	 cmp	 ax, cx

; 4271 : 			}
; 4272 : #endif
; 4273 : 			else

  0011c	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  0011f	8b 4d e4	 mov	 ecx, DWORD PTR _iBlessGemMixCount$1$[ebp]
  00122	75 03		 jne	 SHORT $LN14@CastleSpec

; 4269 : 			{
; 4270 : 				iDefendGemCount++;

  00124	43		 inc	 ebx

; 4271 : 			}
; 4272 : #endif
; 4273 : 			else

  00125	eb 0f		 jmp	 SHORT $LN2@CastleSpec
$LN14@CastleSpec:

; 4274 : 			{
; 4275 : 				iInvalidItemCount++;

  00127	40		 inc	 eax
  00128	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  0012b	eb 09		 jmp	 SHORT $LN2@CastleSpec
$LN26@CastleSpec:
  0012d	8b 4d e4	 mov	 ecx, DWORD PTR _iBlessGemMixCount$1$[ebp]
$LN28@CastleSpec:
  00130	8b 55 e0	 mov	 edx, DWORD PTR _iSoulGemMixCount$1$[ebp]
$LN29@CastleSpec:
  00133	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@CastleSpec:

; 4248 : 	}
; 4249 : 
; 4250 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00136	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0013c	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00142	0f 8c 78 ff ff
	ff		 jl	 $LL4@CastleSpec

; 4276 : 			}
; 4277 : 		}
; 4278 : 	}
; 4279 : 
; 4280 : 	if(iBlessGemMixCount != 3
; 4281 : 		|| iSoulGemMixCount != 3
; 4282 : #ifdef __NOVUS__
; 4283 : 		|| iDefendGemCount != 1
; 4284 : #else
; 4285 : 		|| iDefendGemCount != 30
; 4286 : #endif
; 4287 : 		|| iInvalidItemCount > 0)

  00148	83 f9 03	 cmp	 ecx, 3
  0014b	0f 85 39 01 00
	00		 jne	 $LN17@CastleSpec
  00151	3b d1		 cmp	 edx, ecx
  00153	0f 85 31 01 00
	00		 jne	 $LN17@CastleSpec
  00159	83 fb 1e	 cmp	 ebx, 30			; 0000001eH
  0015c	0f 85 28 01 00
	00		 jne	 $LN17@CastleSpec
  00162	85 c0		 test	 eax, eax
  00164	0f 8f 20 01 00
	00		 jg	 $LN17@CastleSpec

; 4292 : 		lpObj->ChaosLock = FALSE;
; 4293 : 		return;
; 4294 : 	}
; 4295 : 
; 4296 : 	LogChaosItem(lpObj,"Castle Special Mix");

  0016a	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DBGJDJHA@Castle?5Special?5Mix?$AA@
  00172	56		 push	 esi
  00173	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4297 : 	LogAddTD("[CastleSpecialMix] [%s][%s] Chaos Mix Start",

  00178	8d 7e 5d	 lea	 edi, DWORD PTR [esi+93]
  0017b	57		 push	 edi
  0017c	8d 5e 52	 lea	 ebx, DWORD PTR [esi+82]
  0017f	53		 push	 ebx
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BFLNDPMH@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Chao@
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4298 : 		lpObj->AccountID,lpObj->Name);
; 4299 : 
; 4300 : 	lpObj->ChaosSuccessRate = 100;
; 4301 : 	int nChaosNeedMoney = 1000000000;
; 4302 : 
; 4303 : 	if(lpObj->Money < nChaosNeedMoney)

  0018b	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00191	83 c4 0c	 add	 esp, 12			; 0000000cH
  00194	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H
  0019e	3d 00 ca 9a 3b	 cmp	 eax, 1000000000		; 3b9aca00H
  001a3	7d 2f		 jge	 SHORT $LN18@CastleSpec

; 4304 : 	{
; 4305 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Lack of Money (%d/%d)",

  001a5	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  001aa	50		 push	 eax
  001ab	57		 push	 edi
  001ac	53		 push	 ebx
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GIAICFLK@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4306 : 			lpObj->AccountID,lpObj->Name,lpObj->Money,nChaosNeedMoney);
; 4307 : 		pMsg.Result = 2;
; 4308 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  001b8	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001bc	50		 push	 eax
  001bd	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001c0	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  001c4	50		 push	 eax
  001c5	ff 36		 push	 DWORD PTR [esi]
  001c7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001cc	83 c4 20	 add	 esp, 32			; 00000020H

; 4309 : 		lpObj->ChaosLock = FALSE;
; 4310 : 		return;

  001cf	e9 e0 00 00 00	 jmp	 $LN20@CastleSpec
$LN18@CastleSpec:

; 4311 : 	}
; 4312 : 
; 4313 : 	lpObj->Money -= nChaosNeedMoney;

  001d4	05 00 36 65 c4	 add	 eax, -1000000000	; c4653600H

; 4314 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001d9	50		 push	 eax
  001da	ff 36		 push	 DWORD PTR [esi]
  001dc	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001e2	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001e7	83 c4 08	 add	 esp, 8

; 4315 : 
; 4316 : 	if(rand() % 100 < lpObj->ChaosSuccessRate)

  001ea	e8 00 00 00 00	 call	 _rand
  001ef	99		 cdq
  001f0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001f5	f7 f9		 idiv	 ecx
  001f7	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001fd	7d 47		 jge	 SHORT $LN19@CastleSpec

; 4317 : 	{
; 4318 : #if( __4GAMERS__ == 1 )
; 4319 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4320 : #endif
; 4321 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::CastleMix, lpObj->m_Index, 255, 0, 0);

  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	68 ff 00 00 00	 push	 255			; 000000ffH
  00208	ff 36		 push	 DWORD PTR [esi]
  0020a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0020f	6a 00		 push	 0
  00211	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial

; 4322 : 		gObjInventoryCommit(lpObj->m_Index);

  00216	ff 36		 push	 DWORD PTR [esi]
  00218	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4323 : 		LogAddTD("[CastleSpecialMix] [%s][%s] CBMix Success %d Money : %d-%d",

  0021d	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  00222	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00228	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0022e	57		 push	 edi
  0022f	53		 push	 ebx
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@JMGPLGGO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0023b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4324 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,nChaosNeedMoney);
; 4325 : 		g_iCastleItemMixLimit--;

  0023e	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?g_iCastleItemMixLimit@@3HA ; g_iCastleItemMixLimit

; 4326 : 	}
; 4327 : 	else

  00244	eb 6e		 jmp	 SHORT $LN20@CastleSpec
$LN19@CastleSpec:

; 4328 : 	{
; 4329 : #if( __4GAMERS__ == 1 )
; 4330 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4331 : #endif
; 4332 : 		ChaosBoxInit(lpObj);

  00246	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00249	56		 push	 esi
  0024a	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 4333 : 		GCUserChaosBoxSend(lpObj,1);

  0024f	6a 01		 push	 1
  00251	56		 push	 esi
  00252	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4334 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  00257	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0025b	50		 push	 eax
  0025c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0025f	50		 push	 eax
  00260	ff 36		 push	 DWORD PTR [esi]
  00262	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4335 : 		LogAddTD("[CastleSpecialMix] [%s][%s] CBMix Fail %d Money : %d-%d",

  00267	68 00 ca 9a 3b	 push	 1000000000		; 3b9aca00H
  0026c	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00272	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00278	57		 push	 edi
  00279	53		 push	 ebx
  0027a	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EGPAKGJE@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00285	83 c4 2c	 add	 esp, 44			; 0000002cH

; 4336 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,nChaosNeedMoney);
; 4337 : 	}
; 4338 : 
; 4339 : 	lpObj->ChaosLock = FALSE;

  00288	eb 2a		 jmp	 SHORT $LN20@CastleSpec
$LN17@CastleSpec:

; 4288 : 	{
; 4289 : 		LogAddTD("[CastleSpecialMix] [%s][%s] Item Mix Failed - Item Error (DG:%d, BGx10:%d, SGx10:%d, Other:%d)",

  0028a	50		 push	 eax
  0028b	53		 push	 ebx
  0028c	52		 push	 edx
  0028d	51		 push	 ecx
  0028e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00291	50		 push	 eax
  00292	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00295	50		 push	 eax
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@MMBGDNIO@?$FLCastleSpecialMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Item@
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4290 : 			lpObj->AccountID,lpObj->Name,iBlessGemMixCount,iSoulGemMixCount,iDefendGemCount,iInvalidItemCount);
; 4291 : 		DataSend(lpObj->m_Index,(PBYTE)&pMsg,pMsg.h.size);

  002a1	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002a5	50		 push	 eax
  002a6	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002a9	50		 push	 eax
  002aa	ff 36		 push	 DWORD PTR [esi]
  002ac	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002b1	83 c4 28	 add	 esp, 40			; 00000028H
$LN20@CastleSpec:

; 4340 : }

  002b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b7	5f		 pop	 edi
  002b8	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002c2	33 cd		 xor	 ecx, ebp
  002c4	5e		 pop	 esi
  002c5	5b		 pop	 ebx
  002c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cb	8b e5		 mov	 esp, ebp
  002cd	5d		 pop	 ebp
  002ce	c2 04 00	 ret	 4
?CastleSpecialItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CastleSpecialItemMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z PROC	; CChaosBox::RandomLevelDown, COMDAT
; _this$ = ecx

; 4853 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4854 : 	if( lpItem == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 70		 je	 SHORT $LN1@RandomLeve

; 4855 : 		return;
; 4856 : 
; 4857 : 	if( rand()%2 < 1 )

  0000b	e8 00 00 00 00	 call	 _rand
  00010	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00015	79 05		 jns	 SHORT $LN6@RandomLeve
  00017	48		 dec	 eax
  00018	83 c8 fe	 or	 eax, -2			; fffffffeH
  0001b	40		 inc	 eax
$LN6@RandomLeve:
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	7d 07		 jge	 SHORT $LN3@RandomLeve

; 4858 : 	{
; 4859 : 		lpItem->m_Level -= 2;

  00021	66 83 46 08 fe	 add	 WORD PTR [esi+8], -2	; fffffffeH

; 4860 : 	}
; 4861 : 	else

  00026	eb 05		 jmp	 SHORT $LN4@RandomLeve
$LN3@RandomLeve:

; 4862 : 	{
; 4863 : 		lpItem->m_Level -= 3;

  00028	66 83 46 08 fd	 add	 WORD PTR [esi+8], -3	; fffffffdH
$LN4@RandomLeve:

; 4864 : 	}
; 4865 : 
; 4866 : 	lpItem->m_Option3 = 0;
; 4867 : 	lpItem->Convert(lpItem->m_Type,lpItem->m_Option1,lpItem->m_Option2,lpItem->m_Option3,lpItem->m_NewOption,lpItem->m_SetOption,lpItem->m_ItemOptionEx, lpItem->m_SocketOption, lpItem->m_SocketBonus,3);

  0002d	0f b6 86 c7 00
	00 00		 movzx	 eax, BYTE PTR [esi+199]
  00034	8b ce		 mov	 ecx, esi
  00036	6a 03		 push	 3
  00038	50		 push	 eax
  00039	8d 86 c8 00 00
	00		 lea	 eax, DWORD PTR [esi+200]
  0003f	c6 86 92 00 00
	00 00		 mov	 BYTE PTR [esi+146], 0
  00046	50		 push	 eax
  00047	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  0004e	50		 push	 eax
  0004f	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  00056	50		 push	 eax
  00057	0f b6 86 93 00
	00 00		 movzx	 eax, BYTE PTR [esi+147]
  0005e	50		 push	 eax
  0005f	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  00066	6a 00		 push	 0
  00068	50		 push	 eax
  00069	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  00070	50		 push	 eax
  00071	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert
$LN1@RandomLeve:
  0007b	5e		 pop	 esi

; 4868 : }

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ENDP	; CChaosBox::RandomLevelDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxWingMixItemDown, COMDAT
; _this$ = ecx

; 4824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4825 : 	if( lpObj->pChaosBox == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 be 10 12 00
	00 00		 cmp	 DWORD PTR [esi+4624], 0
  00011	0f 84 9a 00 00
	00		 je	 $LN3@ChaosBoxWi

; 4826 : 		return;
; 4827 : 
; 4828 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00017	53		 push	 ebx
  00018	33 db		 xor	 ebx, ebx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ChaosBoxWi:

; 4829 : 	{
; 4830 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00020	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00026	03 cb		 add	 ecx, ebx
  00028	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002d	83 f8 01	 cmp	 eax, 1
  00030	75 6c		 jne	 SHORT $LN2@ChaosBoxWi

; 4831 : 		{
; 4832 : 			if( Is2ndLevelWing(lpObj->pChaosBox[n].m_Type) != FALSE )

  00032	8b b6 10 12 00
	00		 mov	 esi, DWORD PTR [esi+4624]
  00038	8b cf		 mov	 ecx, edi
  0003a	03 f3		 add	 esi, ebx
  0003c	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?Is2ndLevelWing@CChaosBox@@QAEHH@Z ; CChaosBox::Is2ndLevelWing

; 4833 : 			{
; 4834 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  00046	8b cf		 mov	 ecx, edi
  00048	85 c0		 test	 eax, eax
  0004a	74 08		 je	 SHORT $LN7@ChaosBoxWi
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown
  00052	eb 47		 jmp	 SHORT $LN18@ChaosBoxWi
$LN7@ChaosBoxWi:

; 4835 : 			}
; 4836 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],0,0,0,0,1,0) != FALSE )

  00054	6a 00		 push	 0
  00056	6a 01		 push	 1
  00058	6a 00		 push	 0
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	6a 00		 push	 0
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions

; 4837 : 			{
; 4838 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  00066	8b cf		 mov	 ecx, edi
  00068	85 c0		 test	 eax, eax
  0006a	74 08		 je	 SHORT $LN9@ChaosBoxWi
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown
  00072	eb 27		 jmp	 SHORT $LN18@ChaosBoxWi
$LN9@ChaosBoxWi:

; 4839 : 			}
; 4840 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],0,0,0,0,0,1) != FALSE )

  00074	6a 01		 push	 1
  00076	6a 00		 push	 0
  00078	6a 00		 push	 0
  0007a	6a 00		 push	 0
  0007c	6a 00		 push	 0
  0007e	6a 00		 push	 0
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  00086	85 c0		 test	 eax, eax
  00088	74 0a		 je	 SHORT $LN11@ChaosBoxWi

; 4841 : 			{
; 4842 : 				RandomLevelDown(&lpObj->pChaosBox[n]);

  0008a	56		 push	 esi
  0008b	8b cf		 mov	 ecx, edi
  0008d	e8 00 00 00 00	 call	 ?RandomLevelDown@CChaosBox@@QAEXPAVCItem@@@Z ; CChaosBox::RandomLevelDown

; 4843 : 			}
; 4844 : 			else

  00092	eb 07		 jmp	 SHORT $LN18@ChaosBoxWi
$LN11@ChaosBoxWi:

; 4845 : 			{
; 4846 : 				lpObj->pChaosBox[n].Clear();

  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN18@ChaosBoxWi:
  0009b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
$LN2@ChaosBoxWi:

; 4826 : 		return;
; 4827 : 
; 4828 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0009e	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000a4	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  000aa	0f 8c 70 ff ff
	ff		 jl	 $LL4@ChaosBoxWi
  000b0	5b		 pop	 ebx
$LN3@ChaosBoxWi:
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi

; 4847 : 			}
; 4848 : 		}
; 4849 : 	}
; 4850 : }

  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxWingMixItemDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_iLevel$ = 12						; size = 2
_iOption1$ = 16						; size = 1
_iOption2$ = 20						; size = 1
_iOption3$ = 24						; size = 1
_iSetOption$ = 28					; size = 1
_iExcOption$ = 32					; size = 1
?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z PROC ; CChaosBox::CheckItemOptions, COMDAT
; _this$ = ecx

; 4150 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4151 : 	if( lpItem == FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpItem$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN2@CheckItemO
$LN16@CheckItemO:

; 4152 : 	{
; 4153 : 		return false;

  0000a	33 c0		 xor	 eax, eax

; 4204 : }

  0000c	5d		 pop	 ebp
  0000d	c2 1c 00	 ret	 28			; 0000001cH
$LN2@CheckItemO:

; 4154 : 	}
; 4155 : 
; 4156 : 	if( iLevel != FALSE )

  00010	66 8b 4d 0c	 mov	 cx, WORD PTR _iLevel$[ebp]
  00014	66 85 c9	 test	 cx, cx
  00017	74 06		 je	 SHORT $LN4@CheckItemO

; 4157 : 	{
; 4158 : 		if( lpItem->m_Level < iLevel )

  00019	66 39 48 08	 cmp	 WORD PTR [eax+8], cx
  0001d	7c eb		 jl	 SHORT $LN16@CheckItemO
$LN4@CheckItemO:

; 4159 : 		{
; 4160 : 			return FALSE;
; 4161 : 		}
; 4162 : 	}
; 4163 : 
; 4164 : 	if( iOption1 != FALSE )

  0001f	8a 4d 10	 mov	 cl, BYTE PTR _iOption1$[ebp]
  00022	84 c9		 test	 cl, cl
  00024	74 08		 je	 SHORT $LN6@CheckItemO

; 4165 : 	{
; 4166 : 		if( lpItem->m_Option1 < iOption1 )

  00026	38 88 90 00 00
	00		 cmp	 BYTE PTR [eax+144], cl
  0002c	72 dc		 jb	 SHORT $LN16@CheckItemO
$LN6@CheckItemO:

; 4167 : 		{
; 4168 : 			return FALSE;
; 4169 : 		}
; 4170 : 	}
; 4171 : 
; 4172 : 	if( iOption2 != FALSE )

  0002e	8a 4d 14	 mov	 cl, BYTE PTR _iOption2$[ebp]
  00031	84 c9		 test	 cl, cl
  00033	74 08		 je	 SHORT $LN8@CheckItemO

; 4173 : 	{
; 4174 : 		if( lpItem->m_Option2 < iOption2 )

  00035	38 88 91 00 00
	00		 cmp	 BYTE PTR [eax+145], cl
  0003b	72 cd		 jb	 SHORT $LN16@CheckItemO
$LN8@CheckItemO:

; 4175 : 		{
; 4176 : 			return FALSE;
; 4177 : 		}
; 4178 : 	}
; 4179 : 
; 4180 : 	if( iOption3 != FALSE )

  0003d	8a 4d 18	 mov	 cl, BYTE PTR _iOption3$[ebp]
  00040	84 c9		 test	 cl, cl
  00042	74 08		 je	 SHORT $LN10@CheckItemO

; 4181 : 	{
; 4182 : 		if( lpItem->m_Option3 < iOption3 )

  00044	38 88 92 00 00
	00		 cmp	 BYTE PTR [eax+146], cl
  0004a	72 be		 jb	 SHORT $LN16@CheckItemO
$LN10@CheckItemO:

; 4183 : 		{
; 4184 : 			return FALSE;
; 4185 : 		}
; 4186 : 	}
; 4187 : 
; 4188 : 	if( iSetOption != FALSE )

  0004c	80 7d 1c 00	 cmp	 BYTE PTR _iSetOption$[ebp], 0
  00050	74 09		 je	 SHORT $LN12@CheckItemO

; 4189 : 	{
; 4190 : 		if( lpItem->m_SetOption == FALSE )

  00052	80 b8 aa 00 00
	00 00		 cmp	 BYTE PTR [eax+170], 0
  00059	74 af		 je	 SHORT $LN16@CheckItemO
$LN12@CheckItemO:

; 4191 : 		{
; 4192 : 			return FALSE;
; 4193 : 		}
; 4194 : 	}
; 4195 : 
; 4196 : 	if( iExcOption != FALSE )

  0005b	80 7d 20 00	 cmp	 BYTE PTR _iExcOption$[ebp], 0
  0005f	74 09		 je	 SHORT $LN14@CheckItemO

; 4197 : 	{
; 4198 : 		if( lpItem->m_NewOption == FALSE )

  00061	80 b8 93 00 00
	00 00		 cmp	 BYTE PTR [eax+147], 0
  00068	74 a0		 je	 SHORT $LN16@CheckItemO
$LN14@CheckItemO:

; 4199 : 		{
; 4200 : 			return FALSE;
; 4201 : 		}
; 4202 : 	}
; 4203 : return TRUE;

  0006a	b8 01 00 00 00	 mov	 eax, 1

; 4204 : }

  0006f	5d		 pop	 ebp
  00070	c2 1c 00	 ret	 28			; 0000001cH
?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ENDP ; CChaosBox::CheckItemOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Is2ndLevelWing@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?Is2ndLevelWing@CChaosBox@@QAEHH@Z PROC			; CChaosBox::Is2ndLevelWing, COMDAT
; _this$ = ecx

; 4135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4136 : 	if( iType == ITEMGET(12,3) ||
; 4137 : 		iType == ITEMGET(12,4) ||
; 4138 : 		iType == ITEMGET(12,5) ||
; 4139 : 		iType == ITEMGET(12,6) ||
; 4140 : 		iType == ITEMGET(13,30) ||
; 4141 : 		iType == ITEMGET(12,42) ||

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 03 18 00 00	 cmp	 eax, 6147		; 00001803H
  0000b	74 30		 je	 SHORT $LN3@Is2ndLevel
  0000d	3d 04 18 00 00	 cmp	 eax, 6148		; 00001804H
  00012	74 29		 je	 SHORT $LN3@Is2ndLevel
  00014	3d 05 18 00 00	 cmp	 eax, 6149		; 00001805H
  00019	74 22		 je	 SHORT $LN3@Is2ndLevel
  0001b	3d 06 18 00 00	 cmp	 eax, 6150		; 00001806H
  00020	74 1b		 je	 SHORT $LN3@Is2ndLevel
  00022	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  00027	74 14		 je	 SHORT $LN3@Is2ndLevel
  00029	3d 2a 18 00 00	 cmp	 eax, 6186		; 0000182aH
  0002e	74 0d		 je	 SHORT $LN3@Is2ndLevel
  00030	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  00035	74 06		 je	 SHORT $LN3@Is2ndLevel

; 4145 : 	}
; 4146 : return FALSE;

  00037	33 c0		 xor	 eax, eax

; 4147 : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN3@Is2ndLevel:

; 4142 : 		iType == ITEMGET(12,49) )
; 4143 : 	{
; 4144 : 		return TRUE;

  0003d	b8 01 00 00 00	 mov	 eax, 1

; 4147 : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?Is2ndLevelWing@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::Is2ndLevelWing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Is1stLevelWing@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?Is1stLevelWing@CChaosBox@@QAEHH@Z PROC			; CChaosBox::Is1stLevelWing, COMDAT
; _this$ = ecx

; 4123 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4124 : 	if( iType == ITEMGET(12,0) ||
; 4125 : 		iType == ITEMGET(12,1) ||
; 4126 : 		iType == ITEMGET(12,2) ||

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 00 18 00 00	 cmp	 eax, 6144		; 00001800H
  0000b	74 1b		 je	 SHORT $LN3@Is1stLevel
  0000d	3d 01 18 00 00	 cmp	 eax, 6145		; 00001801H
  00012	74 14		 je	 SHORT $LN3@Is1stLevel
  00014	3d 02 18 00 00	 cmp	 eax, 6146		; 00001802H
  00019	74 0d		 je	 SHORT $LN3@Is1stLevel
  0001b	3d 29 18 00 00	 cmp	 eax, 6185		; 00001829H
  00020	74 06		 je	 SHORT $LN3@Is1stLevel

; 4130 : 	}
; 4131 : return FALSE;

  00022	33 c0		 xor	 eax, eax

; 4132 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@Is1stLevel:

; 4127 : 		iType == ITEMGET(12,41) )
; 4128 : 	{
; 4129 : 		return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 4132 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?Is1stLevelWing@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::Is1stLevelWing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?IsCondorItem@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?IsCondorItem@CChaosBox@@QAEHH@Z PROC			; CChaosBox::IsCondorItem, COMDAT
; _this$ = ecx

; 4113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4114 : 	if( iType == iCondorStone ||

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3b 41 20	 cmp	 eax, DWORD PTR [ecx+32]
  00009	74 0b		 je	 SHORT $LN3@IsCondorIt
  0000b	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  0000e	74 06		 je	 SHORT $LN3@IsCondorIt

; 4118 : 	}
; 4119 : return FALSE;

  00010	33 c0		 xor	 eax, eax

; 4120 : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN3@IsCondorIt:

; 4115 : 		iType == iCondorFeather )
; 4116 : 	{
; 4117 : 		return TRUE;

  00016	b8 01 00 00 00	 mov	 eax, 1

; 4120 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsCondorItem@CChaosBox@@QAEHH@Z ENDP			; CChaosBox::IsCondorItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv210 = 8						; size = 4
_lpObj$ = 8						; size = 4
?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxSpecialItemDown, COMDAT
; _this$ = ecx

; 1414 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi

; 1415 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0000a	33 ff		 xor	 edi, edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	33 f6		 xor	 esi, esi
$LL4@ChaosBoxSp:

; 1416 : 	{
; 1417 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00011	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00017	03 ce		 add	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 3c		 jne	 SHORT $LN2@ChaosBoxSp

; 1418 : 		{
; 1419 : 			lpObj->pChaosBox[n].m_Level = 0;

  00023	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00029	33 c9		 xor	 ecx, ecx
  0002b	66 89 4c 30 08	 mov	 WORD PTR [eax+esi+8], cx

; 1420 : 			int iType = lpObj->pChaosBox[n].m_Type;

  00030	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]

; 1421 : 
; 1422 : 			if( IsPlusItemJewel(iType) == TRUE )

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00039	03 c6		 add	 eax, esi
  0003b	89 45 08	 mov	 DWORD PTR tv210[ebp], eax
  0003e	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?IsPlusItemJewel@CChaosBox@@QAEHH@Z ; CChaosBox::IsPlusItemJewel
  00048	83 f8 01	 cmp	 eax, 1
  0004b	75 12		 jne	 SHORT $LN2@ChaosBoxSp

; 1423 : 			{
; 1424 : 				lpObj->pChaosBox[n].Clear();

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR tv210[ebp]
  00050	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 1425 : 				lpObj->pChaosBoxMap[n] = 0xFF;

  00055	8b 83 14 12 00
	00		 mov	 eax, DWORD PTR [ebx+4628]
  0005b	c6 04 07 ff	 mov	 BYTE PTR [edi+eax], 255	; 000000ffH
$LN2@ChaosBoxSp:

; 1415 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0005f	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00065	47		 inc	 edi
  00066	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  0006c	7c a3		 jl	 SHORT $LL4@ChaosBoxSp
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx

; 1426 : 			}
; 1427 : 		}
; 1428 : 	}
; 1429 : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxSpecialItemDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?IsPlusItemJewel@CChaosBox@@QAEHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
?IsPlusItemJewel@CChaosBox@@QAEHH@Z PROC		; CChaosBox::IsPlusItemJewel, COMDAT
; _this$ = ecx

; 1432 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1433 : 	switch( iType )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00006	3d 35 1c 00 00	 cmp	 eax, 7221		; 00001c35H
  0000b	7f 17		 jg	 SHORT $LN7@IsPlusItem
  0000d	74 30		 je	 SHORT $LN4@IsPlusItem
  0000f	3d 0f 18 00 00	 cmp	 eax, 6159		; 0000180fH
  00014	74 29		 je	 SHORT $LN4@IsPlusItem
  00016	3d 0c 1c 00 00	 cmp	 eax, 7180		; 00001c0cH
  0001b	7e 1c		 jle	 SHORT $LN5@IsPlusItem
  0001d	3d 0e 1c 00 00	 cmp	 eax, 7182		; 00001c0eH
  00022	eb 13		 jmp	 SHORT $LN8@IsPlusItem
$LN7@IsPlusItem:
  00024	3d 60 1c 00 00	 cmp	 eax, 7264		; 00001c60H
  00029	74 14		 je	 SHORT $LN4@IsPlusItem
  0002b	3d bc 1c 00 00	 cmp	 eax, 7356		; 00001cbcH
  00030	7e 07		 jle	 SHORT $LN5@IsPlusItem
  00032	3d be 1c 00 00	 cmp	 eax, 7358		; 00001cbeH
$LN8@IsPlusItem:
  00037	7e 06		 jle	 SHORT $LN4@IsPlusItem
$LN5@IsPlusItem:

; 1443 : 	default:
; 1444 : 		return FALSE;

  00039	33 c0		 xor	 eax, eax

; 1445 : 	}
; 1446 : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN4@IsPlusItem:

; 1434 : 	{
; 1435 : 	case ITEMGET(14, 53):
; 1436 : 	case ITEMGET(12, 15):
; 1437 : 	case ITEMGET(14, 13):
; 1438 : 	case ITEMGET(14, 14):
; 1439 : 	case ITEMGET(14, 96):
; 1440 : 	case ITEMGET(14, 189):
; 1441 : 	case ITEMGET(14, 190):
; 1442 : 		return TRUE;

  0003f	b8 01 00 00 00	 mov	 eax, 1

; 1445 : 	}
; 1446 : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?IsPlusItemJewel@CChaosBox@@QAEHH@Z ENDP		; CChaosBox::IsPlusItemJewel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$GSCopy$1$ = -176					; size = 4
tv706 = -172						; size = 4
tv704 = -168						; size = 4
tv702 = -164						; size = 4
tv700 = -160						; size = 4
tv698 = -156						; size = 4
tv696 = -152						; size = 4
tv694 = -148						; size = 4
tv692 = -144						; size = 4
tv690 = -140						; size = 4
tv688 = -136						; size = 4
tv686 = -132						; size = 4
tv684 = -128						; size = 4
tv682 = -124						; size = 4
tv680 = -120						; size = 4
tv678 = -116						; size = 4
tv676 = -112						; size = 4
tv674 = -108						; size = 4
tv671 = -104						; size = 4
tv668 = -100						; size = 4
tv666 = -96						; size = 4
tv664 = -92						; size = 4
tv662 = -88						; size = 4
_this$1$ = -84						; size = 4
_iSocketItemCount$1$ = -80				; size = 4
_iCharmOfLuckCount$1$ = -76				; size = 4
tv762 = -72						; size = 4
_iSocketItem$1$ = -68					; size = 4
_iMaterial2Index$1$ = -64				; size = 4
_iOtherItemCount$1$ = -60				; size = 4
_pMsg$ = -56						; size = 16
_iMaterialCount$ = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iMixId$ = 12						; size = 4
?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CChaosBox::SocketItemMix, COMDAT
; _this$ = ecx

; 6165 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 6166 : 	lpObj->ChaosLock = TRUE;
; 6167 : 
; 6168 : 	int iSocketItem = -1;

  00017	83 c8 ff	 or	 eax, -1
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	89 45 bc	 mov	 DWORD PTR _iSocketItem$1$[ebp], eax
  0001f	0f 57 c0	 xorps	 xmm0, xmm0

; 6169 : 	int iNeedChaosMoney;
; 6170 : 
; 6171 : 	int iSocketItemCount = 0;

  00022	33 c0		 xor	 eax, eax
  00024	89 4d ac	 mov	 DWORD PTR _this$1$[ebp], ecx

; 6172 : 	int iRecipeCount = 0;
; 6173 : 	int iMaterial1Index = -1;
; 6174 : 	int iMaterial2Index = -1;
; 6175 : 	int iMaterialCount[9] = {0};
; 6176 : 	int iCharmOfLuckCount = 0;
; 6177 : 	int iOtherItemCount = 0;
; 6178 : 
; 6179 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6180 : 
; 6181 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00027	6a 10		 push	 16			; 00000010H
  00029	89 45 b0	 mov	 DWORD PTR _iSocketItemCount$1$[ebp], eax
  0002c	83 cf ff	 or	 edi, -1
  0002f	89 45 f8	 mov	 DWORD PTR _iMaterialCount$[ebp+32], eax
  00032	33 f6		 xor	 esi, esi
  00034	89 45 b4	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00037	89 45 c4	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  0003a	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003d	68 86 00 00 00	 push	 134			; 00000086H
  00042	50		 push	 eax
  00043	89 9d 50 ff ff
	ff		 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], ebx
  00049	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  00053	89 7d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], edi
  00056	0f 11 45 d8	 movups	 XMMWORD PTR _iMaterialCount$[ebp], xmm0
  0005a	0f 11 45 e8	 movups	 XMMWORD PTR _iMaterialCount$[ebp+16], xmm0
  0005e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6182 : 	pMsg.Result = CB_ERROR;

  00066	c6 45 cb 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0006a	33 d2		 xor	 edx, edx
  0006c	c7 45 a8 bf 1c
	00 00		 mov	 DWORD PTR tv662[ebp], 7359 ; 00001cbfH
  00073	89 55 b8	 mov	 DWORD PTR tv762[ebp], edx
  00076	c7 45 a4 c0 1c
	00 00		 mov	 DWORD PTR tv664[ebp], 7360 ; 00001cc0H
  0007d	c7 45 a0 c1 1c
	00 00		 mov	 DWORD PTR tv666[ebp], 7361 ; 00001cc1H
  00084	c7 45 9c c2 1c
	00 00		 mov	 DWORD PTR tv668[ebp], 7362 ; 00001cc2H
  0008b	c7 45 98 c3 1c
	00 00		 mov	 DWORD PTR tv671[ebp], 7363 ; 00001cc3H
  00092	c7 45 94 c4 1c
	00 00		 mov	 DWORD PTR tv674[ebp], 7364 ; 00001cc4H
  00099	c7 45 90 c5 1c
	00 00		 mov	 DWORD PTR tv676[ebp], 7365 ; 00001cc5H
  000a0	c7 45 8c c6 1c
	00 00		 mov	 DWORD PTR tv678[ebp], 7366 ; 00001cc6H
  000a7	c7 45 88 c7 1c
	00 00		 mov	 DWORD PTR tv680[ebp], 7367 ; 00001cc7H
  000ae	c7 45 84 c8 1c
	00 00		 mov	 DWORD PTR tv682[ebp], 7368 ; 00001cc8H
  000b5	c7 45 80 c9 1c
	00 00		 mov	 DWORD PTR tv684[ebp], 7369 ; 00001cc9H
  000bc	c7 85 7c ff ff
	ff ca 1c 00 00	 mov	 DWORD PTR tv686[ebp], 7370 ; 00001ccaH
  000c6	c7 85 78 ff ff
	ff b4 1c 00 00	 mov	 DWORD PTR tv688[ebp], 7348 ; 00001cb4H
  000d0	c7 85 74 ff ff
	ff b5 1c 00 00	 mov	 DWORD PTR tv690[ebp], 7349 ; 00001cb5H
  000da	c7 85 70 ff ff
	ff b6 1c 00 00	 mov	 DWORD PTR tv692[ebp], 7350 ; 00001cb6H
  000e4	c7 85 6c ff ff
	ff b7 1c 00 00	 mov	 DWORD PTR tv694[ebp], 7351 ; 00001cb7H
  000ee	c7 85 68 ff ff
	ff b8 1c 00 00	 mov	 DWORD PTR tv696[ebp], 7352 ; 00001cb8H
  000f8	c7 85 64 ff ff
	ff b9 1c 00 00	 mov	 DWORD PTR tv698[ebp], 7353 ; 00001cb9H
  00102	c7 85 60 ff ff
	ff ba 1c 00 00	 mov	 DWORD PTR tv700[ebp], 7354 ; 00001cbaH
  0010c	c7 85 5c ff ff
	ff bb 1c 00 00	 mov	 DWORD PTR tv702[ebp], 7355 ; 00001cbbH
  00116	c7 85 58 ff ff
	ff bc 1c 00 00	 mov	 DWORD PTR tv704[ebp], 7356 ; 00001cbcH
  00120	c7 85 54 ff ff
	ff 35 1c 00 00	 mov	 DWORD PTR tv706[ebp], 7221 ; 00001c35H
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL4@SocketItem:

; 6185 : 		if( !lpObj->pChaosBox[n].IsItem() )

  00130	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00136	03 ca		 add	 ecx, edx
  00138	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0013d	85 c0		 test	 eax, eax
  0013f	0f 84 6c 02 00
	00		 je	 $LN85@SocketItem

; 6186 : 			continue;
; 6187 : 
; 6188 : 		if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) &&
; 6189 : 			lpObj->pChaosBox[n].m_Level >= 7 &&

  00145	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0014b	8b 4d b8	 mov	 ecx, DWORD PTR tv762[ebp]
  0014e	0f bf 44 01 06	 movsx	 eax, WORD PTR [ecx+eax+6]
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  0015e	8b 55 b8	 mov	 edx, DWORD PTR tv762[ebp]
  00161	84 c0		 test	 al, al
  00163	74 20		 je	 SHORT $LN11@SocketItem
  00165	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0016b	66 83 7c 02 08
	07		 cmp	 WORD PTR [edx+eax+8], 7
  00171	7c 12		 jl	 SHORT $LN11@SocketItem
  00173	80 bc 02 92 00
	00 00 01	 cmp	 BYTE PTR [edx+eax+146], 1
  0017b	72 08		 jb	 SHORT $LN11@SocketItem

; 6190 : 			lpObj->pChaosBox[n].m_Option3 >= 1 )
; 6191 : 		{
; 6192 : 			iSocketItemCount++;

  0017d	ff 45 b0	 inc	 DWORD PTR _iSocketItemCount$1$[ebp]
  00180	e9 2f 02 00 00	 jmp	 $LN88@SocketItem
$LN11@SocketItem:

; 6193 : 		}
; 6194 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,191) )

  00185	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0018b	0f b7 44 0a 06	 movzx	 eax, WORD PTR [edx+ecx+6]
  00190	66 3b 45 a8	 cmp	 ax, WORD PTR tv662[ebp]
  00194	75 17		 jne	 SHORT $LN13@SocketItem

; 6195 : 		{
; 6196 : 			iSocketItem = ITEMGET(0,29);
; 6197 : 			iMaterial1Index = 0;
; 6198 : 			iMaterial2Index = 8;

  00196	b9 08 00 00 00	 mov	 ecx, 8
  0019b	c7 45 bc 1d 00
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 29 ; 0000001dH
  001a2	33 ff		 xor	 edi, edi
  001a4	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6199 : 			iRecipeCount++;

  001a7	46		 inc	 esi
  001a8	e9 0a 02 00 00	 jmp	 $LN89@SocketItem
$LN13@SocketItem:

; 6200 : 		}
; 6201 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,192) )

  001ad	66 3b 45 a4	 cmp	 ax, WORD PTR tv664[ebp]
  001b1	75 1a		 jne	 SHORT $LN15@SocketItem

; 6202 : 		{
; 6203 : 			iSocketItem = ITEMGET(0,36);
; 6204 : 			iMaterial1Index = 1;
; 6205 : 			iMaterial2Index = 5;

  001b3	b9 05 00 00 00	 mov	 ecx, 5
  001b8	c7 45 bc 24 00
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 36 ; 00000024H
  001bf	bf 01 00 00 00	 mov	 edi, 1
  001c4	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6206 : 			iRecipeCount++;

  001c7	46		 inc	 esi
  001c8	e9 ea 01 00 00	 jmp	 $LN89@SocketItem
$LN15@SocketItem:

; 6207 : 		}
; 6208 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,193) )

  001cd	66 3b 45 a0	 cmp	 ax, WORD PTR tv666[ebp]
  001d1	75 1a		 jne	 SHORT $LN17@SocketItem

; 6209 : 		{
; 6210 : 			iSocketItem = ITEMGET(0,37);
; 6211 : 			
; 6212 : 			iMaterial1Index = 2;
; 6213 : 			iMaterial2Index = 8;

  001d3	b9 08 00 00 00	 mov	 ecx, 8
  001d8	c7 45 bc 25 00
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 37 ; 00000025H
  001df	bf 02 00 00 00	 mov	 edi, 2
  001e4	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6214 : 			iRecipeCount++;

  001e7	46		 inc	 esi
  001e8	e9 ca 01 00 00	 jmp	 $LN89@SocketItem
$LN17@SocketItem:

; 6215 : 		}
; 6216 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,194) )

  001ed	66 3b 45 9c	 cmp	 ax, WORD PTR tv668[ebp]
  001f1	75 1a		 jne	 SHORT $LN19@SocketItem

; 6217 : 		{
; 6218 : 			iSocketItem = ITEMGET(3,12);
; 6219 : 			iMaterial1Index = 3;
; 6220 : 			iMaterial2Index = 5;

  001f3	b9 05 00 00 00	 mov	 ecx, 5
  001f8	c7 45 bc 0c 06
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 1548 ; 0000060cH
  001ff	bf 03 00 00 00	 mov	 edi, 3
  00204	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6221 : 			iRecipeCount++;

  00207	46		 inc	 esi
  00208	e9 aa 01 00 00	 jmp	 $LN89@SocketItem
$LN19@SocketItem:

; 6222 : 		}
; 6223 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,195) )

  0020d	66 3b 45 98	 cmp	 ax, WORD PTR tv671[ebp]
  00211	75 1a		 jne	 SHORT $LN21@SocketItem

; 6224 : 		{
; 6225 : 			iSocketItem = ITEMGET(2,20);
; 6226 : 			iMaterial1Index = 2;
; 6227 : 			iMaterial2Index = 6;

  00213	b9 06 00 00 00	 mov	 ecx, 6
  00218	c7 45 bc 14 04
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 1044 ; 00000414H
  0021f	bf 02 00 00 00	 mov	 edi, 2
  00224	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6228 : 			iRecipeCount++;

  00227	46		 inc	 esi
  00228	e9 8a 01 00 00	 jmp	 $LN89@SocketItem
$LN21@SocketItem:

; 6229 : 		}
; 6230 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,196) )

  0022d	66 3b 45 94	 cmp	 ax, WORD PTR tv674[ebp]
  00231	75 17		 jne	 SHORT $LN23@SocketItem

; 6231 : 		{
; 6232 : 			iSocketItem = ITEMGET(4,25);
; 6233 : 			iMaterial1Index = 0;
; 6234 : 			iMaterial2Index = 5;

  00233	b9 05 00 00 00	 mov	 ecx, 5
  00238	c7 45 bc 19 08
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 2073 ; 00000819H
  0023f	33 ff		 xor	 edi, edi
  00241	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6235 : 			iRecipeCount++;

  00244	46		 inc	 esi
  00245	e9 6d 01 00 00	 jmp	 $LN89@SocketItem
$LN23@SocketItem:

; 6236 : 		}
; 6237 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,197) )

  0024a	66 3b 45 90	 cmp	 ax, WORD PTR tv676[ebp]
  0024e	75 1a		 jne	 SHORT $LN25@SocketItem

; 6238 : 		{
; 6239 : 			iSocketItem = ITEMGET(4,26);
; 6240 : 			iMaterial1Index = 4;
; 6241 : 			iMaterial2Index = 7;

  00250	b9 07 00 00 00	 mov	 ecx, 7
  00255	c7 45 bc 1a 08
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 2074 ; 0000081aH
  0025c	bf 04 00 00 00	 mov	 edi, 4
  00261	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6242 : 			iRecipeCount++;

  00264	46		 inc	 esi
  00265	e9 4d 01 00 00	 jmp	 $LN89@SocketItem
$LN25@SocketItem:

; 6243 : 		}
; 6244 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,198) )

  0026a	66 3b 45 8c	 cmp	 ax, WORD PTR tv678[ebp]
  0026e	75 1a		 jne	 SHORT $LN27@SocketItem

; 6245 : 		{
; 6246 : 			iSocketItem = ITEMGET(5,35);
; 6247 : 			iMaterial1Index = 2;
; 6248 : 			iMaterial2Index = 5;

  00270	b9 05 00 00 00	 mov	 ecx, 5
  00275	c7 45 bc 23 0a
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 2595 ; 00000a23H
  0027c	bf 02 00 00 00	 mov	 edi, 2
  00281	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6249 : 			iRecipeCount++;

  00284	46		 inc	 esi
  00285	e9 2d 01 00 00	 jmp	 $LN89@SocketItem
$LN27@SocketItem:

; 6250 : 		}
; 6251 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,199) )

  0028a	66 3b 45 88	 cmp	 ax, WORD PTR tv680[ebp]
  0028e	75 1a		 jne	 SHORT $LN29@SocketItem

; 6252 : 		{
; 6253 : 			iSocketItem = ITEMGET(5,37);
; 6254 : 			iMaterial1Index = 4;
; 6255 : 			iMaterial2Index = 6;

  00290	b9 06 00 00 00	 mov	 ecx, 6
  00295	c7 45 bc 25 0a
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 2597 ; 00000a25H
  0029c	bf 04 00 00 00	 mov	 edi, 4
  002a1	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6256 : 			iRecipeCount++;

  002a4	46		 inc	 esi
  002a5	e9 0d 01 00 00	 jmp	 $LN89@SocketItem
$LN29@SocketItem:

; 6257 : 		}
; 6258 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,200) )

  002aa	66 3b 45 84	 cmp	 ax, WORD PTR tv682[ebp]
  002ae	75 1a		 jne	 SHORT $LN31@SocketItem

; 6259 : 		{
; 6260 : 			iSocketItem = ITEMGET(0,30);
; 6261 : 			iMaterial1Index = 4;
; 6262 : 			iMaterial2Index = 8;

  002b0	b9 08 00 00 00	 mov	 ecx, 8
  002b5	c7 45 bc 1e 00
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 30 ; 0000001eH
  002bc	bf 04 00 00 00	 mov	 edi, 4
  002c1	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6263 : 			iRecipeCount++;

  002c4	46		 inc	 esi
  002c5	e9 ed 00 00 00	 jmp	 $LN89@SocketItem
$LN31@SocketItem:

; 6264 : 		}
; 6265 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,201) )

  002ca	66 3b 45 80	 cmp	 ax, WORD PTR tv684[ebp]
  002ce	75 1a		 jne	 SHORT $LN33@SocketItem

; 6266 : 		{
; 6267 : 			iSocketItem = ITEMGET(2,19);
; 6268 : 			iMaterial1Index = 1;
; 6269 : 			iMaterial2Index = 7;

  002d0	b9 07 00 00 00	 mov	 ecx, 7
  002d5	c7 45 bc 13 04
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 1043 ; 00000413H
  002dc	bf 01 00 00 00	 mov	 edi, 1
  002e1	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6270 : 			iRecipeCount++;

  002e4	46		 inc	 esi
  002e5	e9 cd 00 00 00	 jmp	 $LN89@SocketItem
$LN33@SocketItem:

; 6271 : 		}
; 6272 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,202) )

  002ea	66 3b 85 7c ff
	ff ff		 cmp	 ax, WORD PTR tv686[ebp]
  002f1	75 1a		 jne	 SHORT $LN35@SocketItem

; 6273 : 		{
; 6274 : 			iSocketItem = ITEMGET(5,32);
; 6275 : 			iMaterial1Index = 4;
; 6276 : 			iMaterial2Index = 5;

  002f3	b9 05 00 00 00	 mov	 ecx, 5
  002f8	c7 45 bc 20 0a
	00 00		 mov	 DWORD PTR _iSocketItem$1$[ebp], 2592 ; 00000a20H
  002ff	bf 04 00 00 00	 mov	 edi, 4
  00304	89 4d c0	 mov	 DWORD PTR _iMaterial2Index$1$[ebp], ecx

; 6277 : 			iRecipeCount++;

  00307	46		 inc	 esi
  00308	e9 aa 00 00 00	 jmp	 $LN89@SocketItem
$LN35@SocketItem:

; 6278 : 		}
; 6279 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,180) )

  0030d	66 3b 85 78 ff
	ff ff		 cmp	 ax, WORD PTR tv688[ebp]
  00314	75 08		 jne	 SHORT $LN37@SocketItem

; 6280 : 		{
; 6281 : 			iMaterialCount[0]++;

  00316	ff 45 d8	 inc	 DWORD PTR _iMaterialCount$[ebp]
  00319	e9 96 00 00 00	 jmp	 $LN88@SocketItem
$LN37@SocketItem:

; 6282 : 		}
; 6283 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,181) )

  0031e	66 3b 85 74 ff
	ff ff		 cmp	 ax, WORD PTR tv690[ebp]
  00325	75 08		 jne	 SHORT $LN39@SocketItem

; 6284 : 		{
; 6285 : 			iMaterialCount[1]++;

  00327	ff 45 dc	 inc	 DWORD PTR _iMaterialCount$[ebp+4]
  0032a	e9 85 00 00 00	 jmp	 $LN88@SocketItem
$LN39@SocketItem:

; 6286 : 		}
; 6287 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,182) )

  0032f	66 3b 85 70 ff
	ff ff		 cmp	 ax, WORD PTR tv692[ebp]
  00336	75 05		 jne	 SHORT $LN41@SocketItem

; 6288 : 		{
; 6289 : 			iMaterialCount[2]++;

  00338	ff 45 e0	 inc	 DWORD PTR _iMaterialCount$[ebp+8]
  0033b	eb 77		 jmp	 SHORT $LN88@SocketItem
$LN41@SocketItem:

; 6290 : 		}
; 6291 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,183) )

  0033d	66 3b 85 6c ff
	ff ff		 cmp	 ax, WORD PTR tv694[ebp]
  00344	75 05		 jne	 SHORT $LN43@SocketItem

; 6292 : 		{
; 6293 : 			iMaterialCount[3]++;

  00346	ff 45 e4	 inc	 DWORD PTR _iMaterialCount$[ebp+12]
  00349	eb 69		 jmp	 SHORT $LN88@SocketItem
$LN43@SocketItem:

; 6294 : 		}
; 6295 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,184) )

  0034b	66 3b 85 68 ff
	ff ff		 cmp	 ax, WORD PTR tv696[ebp]
  00352	75 05		 jne	 SHORT $LN45@SocketItem

; 6296 : 		{
; 6297 : 			iMaterialCount[4]++;

  00354	ff 45 e8	 inc	 DWORD PTR _iMaterialCount$[ebp+16]
  00357	eb 5b		 jmp	 SHORT $LN88@SocketItem
$LN45@SocketItem:

; 6298 : 		}
; 6299 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,185) )

  00359	66 3b 85 64 ff
	ff ff		 cmp	 ax, WORD PTR tv698[ebp]
  00360	75 05		 jne	 SHORT $LN47@SocketItem

; 6300 : 		{
; 6301 : 			iMaterialCount[5]++;

  00362	ff 45 ec	 inc	 DWORD PTR _iMaterialCount$[ebp+20]
  00365	eb 4d		 jmp	 SHORT $LN88@SocketItem
$LN47@SocketItem:

; 6302 : 		}
; 6303 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,186) )

  00367	66 3b 85 60 ff
	ff ff		 cmp	 ax, WORD PTR tv700[ebp]
  0036e	75 05		 jne	 SHORT $LN49@SocketItem

; 6304 : 		{
; 6305 : 			iMaterialCount[6]++;

  00370	ff 45 f0	 inc	 DWORD PTR _iMaterialCount$[ebp+24]
  00373	eb 3f		 jmp	 SHORT $LN88@SocketItem
$LN49@SocketItem:

; 6306 : 		}
; 6307 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,187) )

  00375	66 3b 85 5c ff
	ff ff		 cmp	 ax, WORD PTR tv702[ebp]
  0037c	75 05		 jne	 SHORT $LN51@SocketItem

; 6308 : 		{
; 6309 : 			iMaterialCount[7]++;

  0037e	ff 45 f4	 inc	 DWORD PTR _iMaterialCount$[ebp+28]
  00381	eb 31		 jmp	 SHORT $LN88@SocketItem
$LN51@SocketItem:

; 6310 : 		}
; 6311 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,188) )

  00383	66 3b 85 58 ff
	ff ff		 cmp	 ax, WORD PTR tv704[ebp]
  0038a	75 05		 jne	 SHORT $LN53@SocketItem

; 6312 : 		{
; 6313 : 			iMaterialCount[8]++;

  0038c	ff 45 f8	 inc	 DWORD PTR _iMaterialCount$[ebp+32]
  0038f	eb 23		 jmp	 SHORT $LN88@SocketItem
$LN53@SocketItem:

; 6314 : 		}
; 6315 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  00391	66 3b 85 54 ff
	ff ff		 cmp	 ax, WORD PTR tv706[ebp]
  00398	75 0b		 jne	 SHORT $LN55@SocketItem

; 6316 : 		{
; 6317 : 			iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  0039a	f3 0f 2c 44 0a
	24		 cvttss2si eax, DWORD PTR [edx+ecx+36]
  003a0	01 45 b4	 add	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax

; 6318 : 		}
; 6319 : 		else

  003a3	eb 0f		 jmp	 SHORT $LN88@SocketItem
$LN55@SocketItem:

; 6320 : 		{
; 6321 : 			iOtherItemCount++;

  003a5	8b 45 c4	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  003a8	8b 4d c0	 mov	 ecx, DWORD PTR _iMaterial2Index$1$[ebp]
  003ab	40		 inc	 eax
  003ac	89 45 c4	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  003af	eb 09		 jmp	 SHORT $LN2@SocketItem
$LN85@SocketItem:
  003b1	8b 55 b8	 mov	 edx, DWORD PTR tv762[ebp]
$LN88@SocketItem:
  003b4	8b 4d c0	 mov	 ecx, DWORD PTR _iMaterial2Index$1$[ebp]
$LN89@SocketItem:
  003b7	8b 45 c4	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@SocketItem:

; 6183 : 
; 6184 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)	{

  003ba	81 c2 d4 00 00
	00		 add	 edx, 212		; 000000d4H
  003c0	89 55 b8	 mov	 DWORD PTR tv762[ebp], edx
  003c3	81 fa 80 1a 00
	00		 cmp	 edx, 6784		; 00001a80H
  003c9	0f 8c 61 fd ff
	ff		 jl	 $LL4@SocketItem

; 6322 : 		}
; 6323 : 	}
; 6324 : 
; 6325 : 	if( iCharmOfLuckCount > 10 )	{

  003cf	83 7d b4 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$1$[ebp], 10 ; 0000000aH
  003d3	7e 09		 jle	 SHORT $LN57@SocketItem

; 6326 : 		pMsg.Result = 0xF0;

  003d5	c6 45 cb f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 6327 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 6328 : 		lpObj->ChaosLock = FALSE;
; 6329 : 		return;

  003d9	e9 29 02 00 00	 jmp	 $LN90@SocketItem
$LN57@SocketItem:

; 6330 : 	}
; 6331 : 
; 6332 : 	if( iOtherItemCount != 0 ||
; 6333 : 		iSocketItemCount != 3 ||
; 6334 : 		iRecipeCount != 1 ||
; 6335 : 		iMaterial1Index == -1 ||

  003de	85 c0		 test	 eax, eax
  003e0	0f 85 1d 02 00
	00		 jne	 $LN59@SocketItem
  003e6	83 7d b0 03	 cmp	 DWORD PTR _iSocketItemCount$1$[ebp], 3
  003ea	0f 85 13 02 00
	00		 jne	 $LN59@SocketItem
  003f0	83 fe 01	 cmp	 esi, 1
  003f3	0f 85 0a 02 00
	00		 jne	 $LN59@SocketItem
  003f9	83 ff ff	 cmp	 edi, -1
  003fc	0f 84 01 02 00
	00		 je	 $LN59@SocketItem
  00402	83 f9 ff	 cmp	 ecx, -1
  00405	0f 84 f8 01 00
	00		 je	 $LN59@SocketItem
  0040b	0f 1f 44 00 00	 npad	 5
$LL7@SocketItem:

; 6345 : 		if( i == iMaterial1Index && iMaterialCount[i] == 2 )

  00410	3b c7		 cmp	 eax, edi
  00412	75 07		 jne	 SHORT $LN60@SocketItem
  00414	83 7c 85 d8 02	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], 2
  00419	74 16		 je	 SHORT $LN5@SocketItem
$LN60@SocketItem:

; 6346 : 			continue;
; 6347 : 
; 6348 : 		if( i == iMaterial2Index && iMaterialCount[i] == 1 )

  0041b	3b c1		 cmp	 eax, ecx
  0041d	75 07		 jne	 SHORT $LN61@SocketItem
  0041f	83 7c 85 d8 01	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], 1
  00424	74 0b		 je	 SHORT $LN5@SocketItem
$LN61@SocketItem:

; 6349 : 			continue;
; 6350 : 
; 6351 : 		if( iMaterialCount[i] != 0 )	{

  00426	83 7c 85 d8 00	 cmp	 DWORD PTR _iMaterialCount$[ebp+eax*4], 0
  0042b	0f 85 d2 01 00
	00		 jne	 $LN59@SocketItem
$LN5@SocketItem:

; 6340 : 		lpObj->ChaosLock = FALSE;
; 6341 : 		return;
; 6342 : 	}
; 6343 : 
; 6344 : 	for(int i = 0; i < 9; i++)	{

  00431	40		 inc	 eax
  00432	83 f8 09	 cmp	 eax, 9
  00435	7c d9		 jl	 SHORT $LL7@SocketItem

; 6352 : 			pMsg.Result = 7;
; 6353 : 			DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 6354 : 			lpObj->ChaosLock = FALSE;
; 6355 : 			return;
; 6356 : 		}
; 6357 : 	}
; 6358 : 
; 6359 : 	LogChaosItem(lpObj, "SocketItemMix");

  00437	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0043a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DEOFBGCG@SocketItemMix?$AA@
  0043f	53		 push	 ebx
  00440	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6360 : 	LogAddTD("[SocketItemMix] Chaos Mix Start");

  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JPBHABAH@?$FLSocketItemMix?$FN?5Chaos?5Mix?5Start?$AA@
  0044a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6361 : 
; 6362 : 	lpObj->ChaosSuccessRate = 40;
; 6363 : 	iNeedChaosMoney = 1000000;
; 6364 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  00450	8b 75 b4	 mov	 esi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00453	83 c4 04	 add	 esp, 4

; 6365 : 
; 6366 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00456	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0045b	ff 33		 push	 DWORD PTR [ebx]
  0045d	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  00460	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
  00466	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0046b	8b c8		 mov	 ecx, eax
  0046d	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00472	f7 e9		 imul	 ecx
  00474	6a 00		 push	 0
  00476	6a 64		 push	 100			; 00000064H
  00478	52		 push	 edx
  00479	50		 push	 eax
  0047a	e8 00 00 00 00	 call	 __alldiv

; 6367 : 
; 6368 : 	if ( iChaosTaxMoney < 0 )

  0047f	33 c9		 xor	 ecx, ecx
  00481	85 c0		 test	 eax, eax
  00483	0f 48 c1	 cmovs	 eax, ecx

; 6369 : 	{
; 6370 : 		iChaosTaxMoney = 0;
; 6371 : 	}
; 6372 : 
; 6373 : 	iNeedChaosMoney += iChaosTaxMoney;

  00486	8d b8 40 42 0f
	00		 lea	 edi, DWORD PTR [eax+1000000]

; 6374 : 
; 6375 : 	if ( iNeedChaosMoney < 0 )

  0048c	85 ff		 test	 edi, edi
  0048e	0f 48 f9	 cmovs	 edi, ecx

; 6376 : 	{
; 6377 : 		iNeedChaosMoney = 0;
; 6378 : 	}
; 6379 : 
; 6380 : 	if(lpObj->Money < iNeedChaosMoney)

  00491	8b 8b cc 00 00
	00		 mov	 ecx, DWORD PTR [ebx+204]
  00497	3b cf		 cmp	 ecx, edi
  00499	7d 09		 jge	 SHORT $LN65@SocketItem

; 6381 : 	{
; 6382 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0049b	c6 45 cb 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 6383 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 6384 : 		lpObj->ChaosLock = FALSE;
; 6385 : 		return;

  0049f	e9 63 01 00 00	 jmp	 $LN90@SocketItem
$LN65@SocketItem:

; 6386 : 	}
; 6387 : 
; 6388 : 	lpObj->Money -= iNeedChaosMoney;

  004a4	2b cf		 sub	 ecx, edi
  004a6	89 8b cc 00 00
	00		 mov	 DWORD PTR [ebx+204], ecx

; 6389 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  004ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 6390 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  004b7	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  004bd	ff 33		 push	 DWORD PTR [ebx]
  004bf	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  004c4	83 c4 08	 add	 esp, 8

; 6391 : 
; 6392 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  004c7	e8 00 00 00 00	 call	 _rand
  004cc	99		 cdq
  004cd	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  004d2	f7 f9		 idiv	 ecx
  004d4	3b 93 1c 12 00
	00		 cmp	 edx, DWORD PTR [ebx+4636]
  004da	0f 8d dc 00 00
	00		 jge	 $LN66@SocketItem

; 6393 : 	{
; 6394 : 		int Option1 = TRUE;
; 6395 : 		int Option2 = 0;

  004e0	33 db		 xor	 ebx, ebx

; 6396 : 
; 6397 : 		if( rand() % 1000 <= 50 )	{

  004e2	e8 00 00 00 00	 call	 _rand
  004e7	99		 cdq
  004e8	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  004ed	f7 f9		 idiv	 ecx
  004ef	b8 01 00 00 00	 mov	 eax, 1
  004f4	83 fa 32	 cmp	 edx, 50			; 00000032H
  004f7	0f 4e d8	 cmovle	 ebx, eax

; 6398 : 			Option2 = TRUE;
; 6399 : 		}
; 6400 : 
; 6401 : 		int Rand1 = rand() % 4;

  004fa	e8 00 00 00 00	 call	 _rand
  004ff	8b f0		 mov	 esi, eax
  00501	81 e6 03 00 00
	80		 and	 esi, -2147483645	; 80000003H
  00507	79 05		 jns	 SHORT $LN87@SocketItem
  00509	4e		 dec	 esi
  0050a	83 ce fc	 or	 esi, -4			; fffffffcH
  0050d	46		 inc	 esi
$LN87@SocketItem:

; 6402 : 		int Rand2 = rand() % 1000;

  0050e	e8 00 00 00 00	 call	 _rand
  00513	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00518	99		 cdq
  00519	f7 f9		 idiv	 ecx

; 6403 : 
; 6404 : 		int Option3 = 0;

  0051b	33 c9		 xor	 ecx, ecx

; 6405 : 
; 6406 : 		switch( Rand1 )

  0051d	83 ee 01	 sub	 esi, 1
  00520	74 20		 je	 SHORT $LN69@SocketItem
  00522	83 ee 01	 sub	 esi, 1
  00525	74 0f		 je	 SHORT $LN71@SocketItem
  00527	83 ee 01	 sub	 esi, 1
  0052a	75 21		 jne	 SHORT $LN70@SocketItem

; 6420 : 		case 3:
; 6421 : 			if( Rand2 < 30 )

  0052c	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  0052f	7d 1c		 jge	 SHORT $LN70@SocketItem

; 6422 : 			{
; 6423 : 				Option3 = 3;

  00531	8d 4e 03	 lea	 ecx, DWORD PTR [esi+3]
  00534	eb 17		 jmp	 SHORT $LN70@SocketItem
$LN71@SocketItem:

; 6410 : 			{
; 6411 : 				Option3 = 1;
; 6412 : 			}
; 6413 : 			break;
; 6414 : 		case 2:
; 6415 : 			if( Rand2 < 60 )

  00536	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  00539	7d 12		 jge	 SHORT $LN70@SocketItem

; 6416 : 			{
; 6417 : 				Option3 = 2;

  0053b	b9 02 00 00 00	 mov	 ecx, 2

; 6418 : 			}
; 6419 : 			break;

  00540	eb 0b		 jmp	 SHORT $LN70@SocketItem
$LN69@SocketItem:

; 6407 : 		{
; 6408 : 		case 1:
; 6409 : 			if( Rand2 < 120 )

  00542	83 fa 78	 cmp	 edx, 120		; 00000078H
  00545	b8 01 00 00 00	 mov	 eax, 1
  0054a	0f 4c c8	 cmovl	 ecx, eax
$LN70@SocketItem:

; 6424 : 			}
; 6425 : 			break;
; 6426 : 		}
; 6427 : #if( __4GAMERS__ == 1 )
; 6428 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6429 : #endif
; 6430 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,iSocketItem,0,0,Option1,Option2,Option3,-1,0,0);

  0054d	8b 45 bc	 mov	 eax, DWORD PTR _iSocketItem$1$[ebp]
  00550	6a 00		 push	 0
  00552	6a 00		 push	 0
  00554	8b b5 50 ff ff
	ff		 mov	 esi, DWORD PTR _lpObj$GSCopy$1$[ebp]
  0055a	6a 00		 push	 0
  0055c	6a 00		 push	 0
  0055e	6a ff		 push	 -1
  00560	51		 push	 ecx
  00561	53		 push	 ebx
  00562	6a 01		 push	 1
  00564	6a 00		 push	 0
  00566	6a 00		 push	 0
  00568	50		 push	 eax
  00569	6a 00		 push	 0
  0056b	6a 00		 push	 0
  0056d	68 ff 00 00 00	 push	 255			; 000000ffH
  00572	ff 36		 push	 DWORD PTR [esi]
  00574	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6431 : 		gObjInventoryCommit(lpObj->m_Index);

  00579	ff 36		 push	 DWORD PTR [esi]
  0057b	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00580	83 c4 40	 add	 esp, 64			; 00000040H

; 6432 : 		LogAddTD("[SocketItemMix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00583	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00586	ff 75 b4	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00589	57		 push	 edi
  0058a	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00590	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00596	50		 push	 eax
  00597	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0059a	50		 push	 eax
  0059b	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@BOLCPPFJ@?$FLSocketItemMix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  005a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005a6	83 c4 1c	 add	 esp, 28			; 0000001cH
  005a9	5f		 pop	 edi
  005aa	5e		 pop	 esi
  005ab	5b		 pop	 ebx

; 6448 : 	}
; 6449 : }

  005ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005af	33 cd		 xor	 ecx, ebp
  005b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005b6	8b e5		 mov	 esp, ebp
  005b8	5d		 pop	 ebp
  005b9	c2 08 00	 ret	 8
$LN66@SocketItem:

; 6433 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 6434 : 	}
; 6435 : 	else
; 6436 : 	{
; 6437 : #if( __4GAMERS__ == 1 )
; 6438 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6439 : #endif
; 6440 : 		ChaosBoxInit(lpObj);

  005bc	8b 4d ac	 mov	 ecx, DWORD PTR _this$1$[ebp]
  005bf	53		 push	 ebx
  005c0	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6441 : 		GCUserChaosBoxSend(lpObj,0);

  005c5	6a 00		 push	 0
  005c7	53		 push	 ebx
  005c8	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6442 : 
; 6443 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  005cd	0f b6 45 c9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  005d1	50		 push	 eax
  005d2	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  005d5	50		 push	 eax
  005d6	ff 33		 push	 DWORD PTR [ebx]
  005d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6444 : 
; 6445 : 		LogAddTD("[SocketItemMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  005dd	56		 push	 esi
  005de	57		 push	 edi
  005df	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  005e5	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  005e8	ff b3 1c 12 00
	00		 push	 DWORD PTR [ebx+4636]
  005ee	50		 push	 eax
  005ef	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  005f2	50		 push	 eax
  005f3	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@KKFOLCFG@?$FLSocketItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  005f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005fe	83 c4 30	 add	 esp, 48			; 00000030H

; 6446 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 6447 : 		lpObj->ChaosLock = FALSE;

  00601	eb 17		 jmp	 SHORT $LN91@SocketItem
$LN59@SocketItem:

; 6336 : 		iMaterial2Index == -1 )
; 6337 : 	{
; 6338 : 		pMsg.Result = 7;

  00603	c6 45 cb 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN90@SocketItem:

; 6339 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00607	0f b6 45 c9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0060b	50		 push	 eax
  0060c	8d 45 c8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0060f	50		 push	 eax
  00610	ff 33		 push	 DWORD PTR [ebx]
  00612	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00617	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN91@SocketItem:

; 6448 : 	}
; 6449 : }

  0061a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0061d	5f		 pop	 edi
  0061e	5e		 pop	 esi
  0061f	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00629	33 cd		 xor	 ecx, ebp
  0062b	5b		 pop	 ebx
  0062c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00631	8b e5		 mov	 esp, ebp
  00633	5d		 pop	 ebp
  00634	c2 08 00	 ret	 8
?SocketItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CChaosBox::SocketItemMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iMaterialID$1$ = -60					; size = 4
_this$1$ = -56						; size = 4
_iCharmOfLuckCount$1$ = -52				; size = 4
_iWingCount$1$ = -48					; size = 4
_iMaterialCount$1$ = -44				; size = 4
_Option2$2$ = -40					; size = 4
_iWingValue$1$ = -40					; size = 4
_iNeedChaosMoney$2$ = -36				; size = 4
_iWingID$1$ = -36					; size = 4
_iCreationCount$1$ = -32				; size = 4
_iOtherItemCount$1$ = -28				; size = 4
_ExcOption$2$ = -24					; size = 4
_iChaosCount$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::Wing25Mix, COMDAT
; _this$ = ecx

; 6452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 6453 : 	lpObj->ChaosLock = TRUE;
; 6454 : 
; 6455 : 	int iNeedChaosMoney;
; 6456 : 	int iWingID = -1;

  00015	83 c8 ff	 or	 eax, -1
  00018	57		 push	 edi
  00019	89 45 dc	 mov	 DWORD PTR _iWingID$1$[ebp], eax

; 6457 : 	int iMaterialID = -1;
; 6458 : 
; 6459 : 	int iWingValue = 0;
; 6460 : 	int iWingCount = 0;
; 6461 : 	int iChaosCount = 0;
; 6462 : 	int iCreationCount = 0;
; 6463 : 	int iMaterialCount = 0;
; 6464 : 	int iOtherItemCount = 0;
; 6465 : 	int iCharmOfLuckCount = 0;

  0001c	33 db		 xor	 ebx, ebx
  0001e	89 45 c4	 mov	 DWORD PTR _iMaterialID$1$[ebp], eax
  00021	33 c0		 xor	 eax, eax

; 6466 : 
; 6467 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6468 : 
; 6469 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00023	6a 10		 push	 16			; 00000010H
  00025	89 45 d8	 mov	 DWORD PTR _iWingValue$1$[ebp], eax
  00028	89 45 d0	 mov	 DWORD PTR _iWingCount$1$[ebp], eax
  0002b	89 45 e8	 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  0002e	89 45 e0	 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  00031	89 45 d4	 mov	 DWORD PTR _iMaterialCount$1$[ebp], eax
  00034	89 45 e4	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00037	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003a	68 86 00 00 00	 push	 134			; 00000086H
  0003f	50		 push	 eax
  00040	89 4d c8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00043	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0004d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6470 : 	pMsg.Result = CB_ERROR;

  00055	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00058	33 ff		 xor	 edi, edi
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Wing25Mix:

; 6473 : 
; 6474 : 		if( !lpObj->pChaosBox[n].IsItem() )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 cf		 add	 ecx, edi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	85 c0		 test	 eax, eax
  0006f	0f 84 ba 00 00
	00		 je	 $LN54@Wing25Mix

; 6475 : 			continue;
; 6476 : 
; 6477 : 		if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00075	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0007b	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00080	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00085	66 3b c2	 cmp	 ax, dx
  00088	75 0c		 jne	 SHORT $LN10@Wing25Mix

; 6478 : 		{
; 6479 : 			iChaosCount++;

  0008a	8b 55 e8	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  0008d	42		 inc	 edx
  0008e	89 55 e8	 mov	 DWORD PTR _iChaosCount$1$[ebp], edx
  00091	e9 9c 00 00 00	 jmp	 $LN57@Wing25Mix
$LN10@Wing25Mix:

; 6480 : 		}
; 6481 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  00096	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  0009b	66 3b c2	 cmp	 ax, dx
  0009e	75 0f		 jne	 SHORT $LN12@Wing25Mix

; 6482 : 		{
; 6483 : 			iCreationCount++;

  000a0	8b 4d e0	 mov	 ecx, DWORD PTR _iCreationCount$1$[ebp]

; 6484 : 		}
; 6485 : 		else if( (lpObj->pChaosBox[n].m_Type >= ITEMGET(12,3) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,6)) ||

  000a3	8b 55 e8	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  000a6	41		 inc	 ecx
  000a7	89 4d e0	 mov	 DWORD PTR _iCreationCount$1$[ebp], ecx
  000aa	e9 86 00 00 00	 jmp	 $LN58@Wing25Mix
$LN12@Wing25Mix:

; 6486 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(12,42) ||
; 6487 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(12,49) ||

  000af	ba 03 18 00 00	 mov	 edx, 6147		; 00001803H
  000b4	66 3b c2	 cmp	 ax, dx
  000b7	7c 0a		 jl	 SHORT $LN17@Wing25Mix
  000b9	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  000be	66 3b c2	 cmp	 ax, dx
  000c1	7e 5e		 jle	 SHORT $LN16@Wing25Mix
$LN17@Wing25Mix:
  000c3	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  000c8	66 3b c2	 cmp	 ax, dx
  000cb	74 54		 je	 SHORT $LN16@Wing25Mix
  000cd	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  000d2	66 3b c2	 cmp	 ax, dx
  000d5	74 4a		 je	 SHORT $LN16@Wing25Mix
  000d7	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  000dc	66 3b c2	 cmp	 ax, dx
  000df	74 40		 je	 SHORT $LN16@Wing25Mix

; 6493 : 		}
; 6494 : 		else if( (lpObj->pChaosBox[n].m_Type >= ITEMGET(14,176) && lpObj->pChaosBox[n].m_Type <= ITEMGET(14,179)) )

  000e1	ba b0 1c 00 00	 mov	 edx, 7344		; 00001cb0H
  000e6	66 3b c2	 cmp	 ax, dx
  000e9	7c 13		 jl	 SHORT $LN18@Wing25Mix
  000eb	ba b3 1c 00 00	 mov	 edx, 7347		; 00001cb3H
  000f0	66 3b c2	 cmp	 ax, dx
  000f3	7f 09		 jg	 SHORT $LN18@Wing25Mix

; 6495 : 		{
; 6496 : 			iMaterialID = lpObj->pChaosBox[n].m_Type;
; 6497 : 			iMaterialCount++;

  000f5	ff 45 d4	 inc	 DWORD PTR _iMaterialCount$1$[ebp]
  000f8	98		 cwde
  000f9	89 45 c4	 mov	 DWORD PTR _iMaterialID$1$[ebp], eax
  000fc	eb 31		 jmp	 SHORT $LN54@Wing25Mix
$LN18@Wing25Mix:

; 6498 : 		}
; 6499 : 		else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )

  000fe	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00103	66 3b c2	 cmp	 ax, dx

; 6502 : 		}
; 6503 : 		else

  00106	8b 55 e8	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  00109	75 0a		 jne	 SHORT $LN20@Wing25Mix

; 6500 : 		{
; 6501 : 			iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  0010b	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00111	03 d8		 add	 ebx, eax

; 6502 : 		}
; 6503 : 		else

  00113	eb 1d		 jmp	 SHORT $LN57@Wing25Mix
$LN20@Wing25Mix:

; 6504 : 		{
; 6505 : 			iOtherItemCount++;

  00115	8b 45 e4	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  00118	8b 4d e0	 mov	 ecx, DWORD PTR _iCreationCount$1$[ebp]
  0011b	40		 inc	 eax
  0011c	89 45 e4	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  0011f	eb 17		 jmp	 SHORT $LN2@Wing25Mix
$LN16@Wing25Mix:

; 6488 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(13,30) )
; 6489 : 		{
; 6490 : 			iWingID = lpObj->pChaosBox[n].m_Type;
; 6491 : 			iWingValue = lpObj->pChaosBox[n].m_BuyMoney;
; 6492 : 			iWingCount++;

  00121	ff 45 d0	 inc	 DWORD PTR _iWingCount$1$[ebp]
  00124	98		 cwde
  00125	89 45 dc	 mov	 DWORD PTR _iWingID$1$[ebp], eax
  00128	8b 44 39 78	 mov	 eax, DWORD PTR [ecx+edi+120]
  0012c	89 45 d8	 mov	 DWORD PTR _iWingValue$1$[ebp], eax
$LN54@Wing25Mix:
  0012f	8b 55 e8	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
$LN57@Wing25Mix:
  00132	8b 4d e0	 mov	 ecx, DWORD PTR _iCreationCount$1$[ebp]
$LN58@Wing25Mix:
  00135	8b 45 e4	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@Wing25Mix:

; 6471 : 
; 6472 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)	{

  00138	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0013e	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00144	0f 8c 16 ff ff
	ff		 jl	 $LL4@Wing25Mix

; 6506 : 		}
; 6507 : 
; 6508 : 	}
; 6509 : 
; 6510 : 	if( iCharmOfLuckCount > 10 )	{

  0014a	89 5d cc	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], ebx
  0014d	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00150	7e 09		 jle	 SHORT $LN22@Wing25Mix

; 6511 : 		pMsg.Result = 0xF0;

  00152	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 6512 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 6513 : 		lpObj->ChaosLock = FALSE;
; 6514 : 		return;

  00156	e9 a2 02 00 00	 jmp	 $LN59@Wing25Mix
$LN22@Wing25Mix:

; 6515 : 	}
; 6516 : 
; 6517 : 	if( iOtherItemCount != 0 ||
; 6518 : 		iMaterialCount != 1 ||
; 6519 : 		iWingCount != 1 ||
; 6520 : 		iCreationCount != 1 ||

  0015b	85 c0		 test	 eax, eax
  0015d	0f 85 96 02 00
	00		 jne	 $LN24@Wing25Mix
  00163	83 7d d4 01	 cmp	 DWORD PTR _iMaterialCount$1$[ebp], 1
  00167	0f 85 8c 02 00
	00		 jne	 $LN24@Wing25Mix
  0016d	83 7d d0 01	 cmp	 DWORD PTR _iWingCount$1$[ebp], 1
  00171	0f 85 82 02 00
	00		 jne	 $LN24@Wing25Mix
  00177	83 f9 01	 cmp	 ecx, 1
  0017a	0f 85 79 02 00
	00		 jne	 $LN24@Wing25Mix
  00180	3b d1		 cmp	 edx, ecx
  00182	0f 85 71 02 00
	00		 jne	 $LN24@Wing25Mix

; 6525 : 		lpObj->ChaosLock = FALSE;
; 6526 : 		return;
; 6527 : 	}
; 6528 : 
; 6529 : 	LogChaosItem(lpObj, "25WingLevel");

  00188	8b 4d c8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OFDFPMHD@25WingLevel?$AA@
  00190	56		 push	 esi
  00191	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6530 : 	LogAddTD("[25Wing Mix] Chaos Mix Start");

  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNIHKHMB@?$FL25Wing?5Mix?$FN?5Chaos?5Mix?5Start?$AA@
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6531 : 
; 6532 : 	int iDivValue = 9000000;
; 6533 : 
; 6534 : 	if( iWingID == ITEMGET(13,30) || iWingID == ITEMGET(12,49) )	

  001a1	8b 45 dc	 mov	 eax, DWORD PTR _iWingID$1$[ebp]
  001a4	83 c4 04	 add	 esp, 4
  001a7	b9 40 54 89 00	 mov	 ecx, 9000000		; 00895440H
  001ac	3d 1e 1a 00 00	 cmp	 eax, 6686		; 00001a1eH
  001b1	74 07		 je	 SHORT $LN26@Wing25Mix
  001b3	3d 31 18 00 00	 cmp	 eax, 6193		; 00001831H
  001b8	75 05		 jne	 SHORT $LN25@Wing25Mix
$LN26@Wing25Mix:

; 6535 : 	{
; 6536 : 		iDivValue = 500000;

  001ba	b9 20 a1 07 00	 mov	 ecx, 500000		; 0007a120H
$LN25@Wing25Mix:

; 6537 : 	}
; 6538 : 
; 6539 : 	lpObj->ChaosSuccessRate = iWingValue/iDivValue;

  001bf	8b 45 d8	 mov	 eax, DWORD PTR _iWingValue$1$[ebp]
  001c2	99		 cdq
  001c3	f7 f9		 idiv	 ecx

; 6540 : 
; 6541 : 	if( lpObj->ChaosSuccessRate < 0 )

  001c5	b9 01 00 00 00	 mov	 ecx, 1
  001ca	85 c0		 test	 eax, eax
  001cc	0f 48 c1	 cmovs	 eax, ecx
  001cf	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 6542 : 		lpObj->ChaosSuccessRate = 1;
; 6543 : 
; 6544 : 	if( lpObj->ChaosSuccessRate > 60 )

  001d5	83 f8 3c	 cmp	 eax, 60			; 0000003cH
  001d8	7e 0a		 jle	 SHORT $LN28@Wing25Mix

; 6545 : 		lpObj->ChaosSuccessRate = 60;

  001da	c7 86 1c 12 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+4636], 60 ; 0000003cH
$LN28@Wing25Mix:

; 6546 : 
; 6547 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate*100000;

  001e4	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]

; 6548 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 6549 : 
; 6550 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001ef	8b 7d cc	 mov	 edi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  001f2	ff 36		 push	 DWORD PTR [esi]
  001f4	69 d8 a0 86 01
	00		 imul	 ebx, eax, 100000
  001fa	03 c7		 add	 eax, edi
  001fc	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
  00202	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00207	8b c8		 mov	 ecx, eax
  00209	8b c3		 mov	 eax, ebx
  0020b	f7 e9		 imul	 ecx
  0020d	6a 00		 push	 0
  0020f	6a 64		 push	 100			; 00000064H
  00211	52		 push	 edx
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 __alldiv
  00218	8b c8		 mov	 ecx, eax

; 6551 : 
; 6552 : 	if ( iChaosTaxMoney < 0 )

  0021a	33 c0		 xor	 eax, eax
  0021c	85 c9		 test	 ecx, ecx
  0021e	0f 48 c8	 cmovs	 ecx, eax

; 6553 : 	{
; 6554 : 		iChaosTaxMoney = 0;
; 6555 : 	}
; 6556 : 
; 6557 : 	iNeedChaosMoney += iChaosTaxMoney;

  00221	03 d9		 add	 ebx, ecx

; 6558 : 
; 6559 : 	if ( iNeedChaosMoney < 0 )

  00223	0f 48 d8	 cmovs	 ebx, eax

; 6560 : 	{
; 6561 : 		iNeedChaosMoney = 0;
; 6562 : 	}
; 6563 : 
; 6564 : 	if(lpObj->Money < iNeedChaosMoney)

  00226	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0022c	89 5d dc	 mov	 DWORD PTR _iNeedChaosMoney$2$[ebp], ebx
  0022f	3b c3		 cmp	 eax, ebx
  00231	7d 09		 jge	 SHORT $LN31@Wing25Mix

; 6565 : 	{
; 6566 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00233	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 6567 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 6568 : 		lpObj->ChaosLock = FALSE;
; 6569 : 		return;

  00237	e9 c1 01 00 00	 jmp	 $LN59@Wing25Mix
$LN31@Wing25Mix:

; 6570 : 	}
; 6571 : 
; 6572 : 	lpObj->Money -= iNeedChaosMoney;

  0023c	2b c3		 sub	 eax, ebx

; 6573 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0023e	51		 push	 ecx
  0023f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00244	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  0024a	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 6574 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0024f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00255	ff 36		 push	 DWORD PTR [esi]
  00257	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0025c	83 c4 08	 add	 esp, 8

; 6575 : 
; 6576 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  0025f	e8 00 00 00 00	 call	 _rand
  00264	99		 cdq
  00265	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0026a	f7 f9		 idiv	 ecx
  0026c	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00272	0f 8d 3a 01 00
	00		 jge	 $LN32@Wing25Mix

; 6577 : 	{
; 6578 : 		int Item = ITEMGET(12,262+(iMaterialID-ITEMGET(14,176)));
; 6579 : 
; 6580 : 		int Option1 = 0;
; 6581 : 		int Option2 = 0;

  00278	33 db		 xor	 ebx, ebx

; 6582 : 
; 6583 : 		if( rand() % 1000 <= iOptionRate )

  0027a	e8 00 00 00 00	 call	 _rand
  0027f	99		 cdq
  00280	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
  00285	f7 ff		 idiv	 edi
  00287	8b 45 c8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0028a	3b 50 40	 cmp	 edx, DWORD PTR [eax+64]
  0028d	b8 01 00 00 00	 mov	 eax, 1
  00292	0f 4e d8	 cmovle	 ebx, eax
  00295	89 5d d8	 mov	 DWORD PTR _Option2$2$[ebp], ebx

; 6584 : 		{
; 6585 : 			Option2 = TRUE;
; 6586 : 		}
; 6587 : 
; 6588 : 		int Option3 = 0;
; 6589 : 		int ExcOption = 0;

  00298	33 db		 xor	 ebx, ebx

; 6590 : 
; 6591 : 		int Rand = rand() % 1000;

  0029a	e8 00 00 00 00	 call	 _rand
  0029f	99		 cdq
  002a0	f7 ff		 idiv	 edi

; 6592 : 
; 6593 : 		if( Rand < 400 )

  002a2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002a7	81 fa 90 01 00
	00		 cmp	 edx, 400		; 00000190H
  002ad	0f 4c d8	 cmovl	 ebx, eax
  002b0	89 5d e8	 mov	 DWORD PTR _ExcOption$2$[ebp], ebx

; 6594 : 		{
; 6595 : 			ExcOption |= 0x10;
; 6596 : 		}
; 6597 : 
; 6598 : 		int Rand2 = rand() % 4;

  002b3	e8 00 00 00 00	 call	 _rand
  002b8	8b d8		 mov	 ebx, eax
  002ba	81 e3 03 00 00
	80		 and	 ebx, -2147483645	; 80000003H
  002c0	79 05		 jns	 SHORT $LN55@Wing25Mix
  002c2	4b		 dec	 ebx
  002c3	83 cb fc	 or	 ebx, -4			; fffffffcH
  002c6	43		 inc	 ebx
$LN55@Wing25Mix:

; 6599 : 		int Rand3 = rand() % 1000;

  002c7	e8 00 00 00 00	 call	 _rand
  002cc	99		 cdq
  002cd	f7 ff		 idiv	 edi

; 6600 : 
; 6601 : 		Option3 = 0;

  002cf	33 ff		 xor	 edi, edi

; 6602 : 
; 6603 : 		switch( Rand2 )

  002d1	83 eb 01	 sub	 ebx, 1
  002d4	74 20		 je	 SHORT $LN36@Wing25Mix
  002d6	83 eb 01	 sub	 ebx, 1
  002d9	74 0f		 je	 SHORT $LN38@Wing25Mix
  002db	83 eb 01	 sub	 ebx, 1
  002de	75 21		 jne	 SHORT $LN37@Wing25Mix

; 6613 : 		case 3:
; 6614 : 			if( Rand3 < 30 )

  002e0	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  002e3	7d 1c		 jge	 SHORT $LN37@Wing25Mix

; 6615 : 				Option3 = 3;

  002e5	8d 7b 03	 lea	 edi, DWORD PTR [ebx+3]
  002e8	eb 17		 jmp	 SHORT $LN37@Wing25Mix
$LN38@Wing25Mix:

; 6607 : 				Option3 = 1;
; 6608 : 			break;
; 6609 : 		case 2:
; 6610 : 			if( Rand3 < 60 )

  002ea	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  002ed	7d 12		 jge	 SHORT $LN37@Wing25Mix

; 6611 : 				Option3 = 2;

  002ef	bf 02 00 00 00	 mov	 edi, 2

; 6612 : 			break;

  002f4	eb 0b		 jmp	 SHORT $LN37@Wing25Mix
$LN36@Wing25Mix:

; 6604 : 		{
; 6605 : 		case 1:
; 6606 : 			if( Rand3 < 120 )

  002f6	83 fa 78	 cmp	 edx, 120		; 00000078H
  002f9	b8 01 00 00 00	 mov	 eax, 1
  002fe	0f 4c f8	 cmovl	 edi, eax
$LN37@Wing25Mix:

; 6616 : 			break;
; 6617 : 		}
; 6618 : 
; 6619 : 		int Rand4 = rand() % 2;

  00301	e8 00 00 00 00	 call	 _rand
  00306	8b d8		 mov	 ebx, eax
  00308	81 e3 01 00 00
	80		 and	 ebx, -2147483647	; 80000001H
  0030e	79 05		 jns	 SHORT $LN56@Wing25Mix
  00310	4b		 dec	 ebx
  00311	83 cb fe	 or	 ebx, -2			; fffffffeH
  00314	43		 inc	 ebx
$LN56@Wing25Mix:

; 6620 : 		int Rand5 = rand() % 1000;

  00315	e8 00 00 00 00	 call	 _rand
  0031a	99		 cdq
  0031b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00320	f7 f9		 idiv	 ecx

; 6632 : 			{
; 6633 : 				ExcOption |= 0x02;

  00322	8b 45 e8	 mov	 eax, DWORD PTR _ExcOption$2$[ebp]
  00325	83 eb 00	 sub	 ebx, 0
  00328	74 0f		 je	 SHORT $LN42@Wing25Mix

; 6621 : 
; 6622 : 		switch( Rand4 )

  0032a	83 eb 01	 sub	 ebx, 1
  0032d	75 12		 jne	 SHORT $LN43@Wing25Mix

; 6628 : 			}
; 6629 : 			break;
; 6630 : 		case 1:
; 6631 : 			if( Rand5 < 20 )

  0032f	83 fa 14	 cmp	 edx, 20			; 00000014H
  00332	7d 0d		 jge	 SHORT $LN43@Wing25Mix

; 6632 : 			{
; 6633 : 				ExcOption |= 0x02;

  00334	83 c8 02	 or	 eax, 2
  00337	eb 08		 jmp	 SHORT $LN43@Wing25Mix
$LN42@Wing25Mix:

; 6623 : 		{
; 6624 : 		case 0:
; 6625 : 			if( Rand5 < 40 )

  00339	83 fa 28	 cmp	 edx, 40			; 00000028H
  0033c	7d 03		 jge	 SHORT $LN43@Wing25Mix

; 6626 : 			{
; 6627 : 				ExcOption |= 0x01;

  0033e	83 c8 01	 or	 eax, 1
$LN43@Wing25Mix:

; 6634 : 			}
; 6635 : 			break;
; 6636 : 		}
; 6637 : #if( __4GAMERS__ == 1 )
; 6638 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6639 : #endif
; 6640 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,Option1,Option2,Option3,-1,ExcOption,0);

  00341	6a 00		 push	 0
  00343	6a 00		 push	 0
  00345	6a 00		 push	 0
  00347	50		 push	 eax
  00348	8b 45 c4	 mov	 eax, DWORD PTR _iMaterialID$1$[ebp]
  0034b	6a ff		 push	 -1
  0034d	57		 push	 edi
  0034e	ff 75 d8	 push	 DWORD PTR _Option2$2$[ebp]
  00351	05 56 fc ff ff	 add	 eax, -938		; fffffc56H
  00356	6a 00		 push	 0
  00358	6a 00		 push	 0
  0035a	6a 00		 push	 0
  0035c	50		 push	 eax
  0035d	6a 00		 push	 0
  0035f	6a 00		 push	 0
  00361	68 ff 00 00 00	 push	 255			; 000000ffH
  00366	ff 36		 push	 DWORD PTR [esi]
  00368	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6641 : 		gObjInventoryCommit(lpObj->m_Index);

  0036d	ff 36		 push	 DWORD PTR [esi]
  0036f	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00374	83 c4 40	 add	 esp, 64			; 00000040H

; 6642 : 		LogAddTD("[25Wing Mix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00377	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0037a	ff 75 cc	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  0037d	ff 75 dc	 push	 DWORD PTR _iNeedChaosMoney$2$[ebp]
  00380	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00386	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0038c	50		 push	 eax
  0038d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00390	50		 push	 eax
  00391	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@KFBIJMHJ@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
  00396	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0039c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0039f	5f		 pop	 edi
  003a0	5e		 pop	 esi
  003a1	5b		 pop	 ebx

; 6659 : 	}
; 6660 : }

  003a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a5	33 cd		 xor	 ecx, ebp
  003a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c2 04 00	 ret	 4
$LN32@Wing25Mix:

; 6643 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 6644 : 	}
; 6645 : 	else
; 6646 : 	{
; 6647 : #if( __4GAMERS__ == 1 )
; 6648 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6649 : #endif
; 6650 : 		ChaosBoxInit(lpObj);

  003b2	8b 4d c8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  003b5	56		 push	 esi
  003b6	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6651 : 		GCUserChaosBoxSend(lpObj,0);

  003bb	6a 00		 push	 0
  003bd	56		 push	 esi
  003be	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6652 : 
; 6653 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  003c3	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  003c7	50		 push	 eax
  003c8	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003cb	50		 push	 eax
  003cc	ff 36		 push	 DWORD PTR [esi]
  003ce	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6654 : 
; 6655 : 		LogAddTD("[25Wing Mix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  003d3	57		 push	 edi
  003d4	53		 push	 ebx
  003d5	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  003db	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  003de	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  003e4	50		 push	 eax
  003e5	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  003e8	50		 push	 eax
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CJEGAMMB@?$FL25Wing?5Mix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
  003ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003f4	83 c4 30	 add	 esp, 48			; 00000030H

; 6656 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 6657 : 
; 6658 : 		lpObj->ChaosLock = FALSE;

  003f7	eb 17		 jmp	 SHORT $LN60@Wing25Mix
$LN24@Wing25Mix:

; 6521 : 		iChaosCount != 1 )
; 6522 : 	{
; 6523 : 		pMsg.Result = 7;

  003f9	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN59@Wing25Mix:

; 6524 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  003fd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00401	50		 push	 eax
  00402	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00405	50		 push	 eax
  00406	ff 36		 push	 DWORD PTR [esi]
  00408	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0040d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN60@Wing25Mix:

; 6659 : 	}
; 6660 : }

  00410	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00413	5f		 pop	 edi
  00414	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0041e	33 cd		 xor	 ecx, ebp
  00420	5e		 pop	 esi
  00421	5b		 pop	 ebx
  00422	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00427	8b e5		 mov	 esp, ebp
  00429	5d		 pop	 ebp
  0042a	c2 04 00	 ret	 4
?Wing25Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::Wing25Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_nEtcItem$1$ = -36					; size = 4
_nGoldenKey$1$ = -32					; size = 4
_nGoldenBox$1$ = -28					; size = 4
_nSilverBox$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::GoldenNSilverBoxMix, COMDAT
; _this$ = ecx

; 6096 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 6097 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6098 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 6099 : 	// ----
; 6100 : 	pMsg.Result				= CB_ERROR;	//ebp-11
; 6101 : 	int nGoldenKey			= 0;		//ebp-18
; 6102 : 	int nSilverKey			= 0;		//ebp-1c

  00026	33 db		 xor	 ebx, ebx
  00028	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nGoldenKey$1$[ebp], 0

; 6103 : 	int nGoldenBox			= 0;		//ebp-20
; 6104 : 	int nSilverBox			= 0;		//ebp-24
; 6105 : 	int nEtcItem			= 0;		//ebp-28

  00036	33 f6		 xor	 esi, esi
  00038	89 5d e4	 mov	 DWORD PTR _nGoldenBox$1$[ebp], ebx
  0003b	89 5d e8	 mov	 DWORD PTR _nSilverBox$1$[ebp], ebx
  0003e	89 75 dc	 mov	 DWORD PTR _nEtcItem$1$[ebp], esi

; 6106 : 	int nType				= 0;		//ebp-2c
; 6107 : 	bool bCheckSourceItem	= false;	//ebp-30
; 6108 : 	lpObj->ChaosLock		= true;

  00041	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@GoldenNSil:

; 6111 : 	{
; 6112 : 		if( lpObj->pChaosBox[i].IsItem() )

  00050	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00056	03 ce		 add	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 29		 je	 SHORT $LN29@GoldenNSil

; 6113 : 		{
; 6114 : 			if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 113) )

  00061	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  00067	b9 71 1c 00 00	 mov	 ecx, 7281		; 00001c71H
  0006c	0f b7 44 30 06	 movzx	 eax, WORD PTR [eax+esi+6]
  00071	66 3b c1	 cmp	 ax, cx
  00074	75 09		 jne	 SHORT $LN6@GoldenNSil

; 6115 : 			{
; 6116 : 				nGoldenKey++;

  00076	8b 55 e0	 mov	 edx, DWORD PTR _nGoldenKey$1$[ebp]
  00079	42		 inc	 edx
  0007a	89 55 e0	 mov	 DWORD PTR _nGoldenKey$1$[ebp], edx
  0007d	eb 0e		 jmp	 SHORT $LN30@GoldenNSil
$LN6@GoldenNSil:

; 6117 : 			}
; 6118 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 112) )

  0007f	b9 70 1c 00 00	 mov	 ecx, 7280		; 00001c70H
  00084	66 3b c1	 cmp	 ax, cx
  00087	75 3e		 jne	 SHORT $LN8@GoldenNSil

; 6119 : 			{
; 6120 : 				nSilverKey++;

  00089	43		 inc	 ebx
$LN29@GoldenNSil:
  0008a	8b 55 e0	 mov	 edx, DWORD PTR _nGoldenKey$1$[ebp]
$LN30@GoldenNSil:
  0008d	8b 4d e4	 mov	 ecx, DWORD PTR _nGoldenBox$1$[ebp]
$LN31@GoldenNSil:
  00090	8b 45 e8	 mov	 eax, DWORD PTR _nSilverBox$1$[ebp]
$LN2@GoldenNSil:

; 6109 : 	// ----
; 6110 : 	for( int i = 0; i < CHAOS_BOX_SIZE; i++ )	//ebp-34

  00093	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00099	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  0009f	7c af		 jl	 SHORT $LL4@GoldenNSil

; 6133 : 			}
; 6134 : 		}
; 6135 : 	}
; 6136 : 	// ----
; 6137 : 	if( nEtcItem >= 1 || nGoldenKey != 1 && nSilverKey != 1 )

  000a1	83 7d dc 01	 cmp	 DWORD PTR _nEtcItem$1$[ebp], 1
  000a5	0f 8d a5 00 00
	00		 jge	 $LN20@GoldenNSil
  000ab	83 fa 01	 cmp	 edx, 1
  000ae	75 48		 jne	 SHORT $LN17@GoldenNSil

; 6138 : 	{
; 6139 : 		bCheckSourceItem = false;
; 6140 : 	}
; 6141 : 	else if( nGoldenKey == 1 && nGoldenBox == 1 && !nSilverKey && !nSilverBox )

  000b0	3b ca		 cmp	 ecx, edx
  000b2	75 44		 jne	 SHORT $LN17@GoldenNSil
  000b4	85 db		 test	 ebx, ebx
  000b6	75 40		 jne	 SHORT $LN17@GoldenNSil
  000b8	85 c0		 test	 eax, eax
  000ba	0f 85 90 00 00
	00		 jne	 $LN20@GoldenNSil

; 6142 : 	{
; 6143 : 		nType = ITEMGET(14, 123);

  000c0	b8 7b 1c 00 00	 mov	 eax, 7291		; 00001c7bH

; 6144 : 		bCheckSourceItem = true;

  000c5	eb 47		 jmp	 SHORT $LN28@GoldenNSil
$LN8@GoldenNSil:

; 6121 : 			}
; 6122 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 121) )
; 6123 : 			{
; 6124 : 				nGoldenBox++;

  000c7	8b 55 e0	 mov	 edx, DWORD PTR _nGoldenKey$1$[ebp]
  000ca	b9 79 1c 00 00	 mov	 ecx, 7289		; 00001c79H
  000cf	66 3b c1	 cmp	 ax, cx
  000d2	75 09		 jne	 SHORT $LN10@GoldenNSil
  000d4	8b 4d e4	 mov	 ecx, DWORD PTR _nGoldenBox$1$[ebp]
  000d7	41		 inc	 ecx
  000d8	89 4d e4	 mov	 DWORD PTR _nGoldenBox$1$[ebp], ecx
  000db	eb b3		 jmp	 SHORT $LN31@GoldenNSil
$LN10@GoldenNSil:

; 6125 : 			}
; 6126 : 			else if( lpObj->pChaosBox[i].m_Type == ITEMGET(14, 122) )

  000dd	b9 7a 1c 00 00	 mov	 ecx, 7290		; 00001c7aH
  000e2	66 3b c1	 cmp	 ax, cx

; 6127 : 			{
; 6128 : 				nSilverBox++;

  000e5	8b 45 e8	 mov	 eax, DWORD PTR _nSilverBox$1$[ebp]

; 6129 : 			}
; 6130 : 			else

  000e8	8b 4d e4	 mov	 ecx, DWORD PTR _nGoldenBox$1$[ebp]
  000eb	75 06		 jne	 SHORT $LN12@GoldenNSil

; 6127 : 			{
; 6128 : 				nSilverBox++;

  000ed	40		 inc	 eax
  000ee	89 45 e8	 mov	 DWORD PTR _nSilverBox$1$[ebp], eax

; 6129 : 			}
; 6130 : 			else

  000f1	eb a0		 jmp	 SHORT $LN2@GoldenNSil
$LN12@GoldenNSil:

; 6131 : 			{
; 6132 : 				nEtcItem++;

  000f3	ff 45 dc	 inc	 DWORD PTR _nEtcItem$1$[ebp]
  000f6	eb 9b		 jmp	 SHORT $LN2@GoldenNSil
$LN17@GoldenNSil:

; 6145 : 	}
; 6146 : 	else if( nSilverKey == 1 && nSilverBox == 1 && !nGoldenKey && !nGoldenBox )

  000f8	83 fb 01	 cmp	 ebx, 1
  000fb	75 53		 jne	 SHORT $LN20@GoldenNSil
  000fd	3b c3		 cmp	 eax, ebx
  000ff	75 4f		 jne	 SHORT $LN20@GoldenNSil
  00101	85 d2		 test	 edx, edx
  00103	75 4b		 jne	 SHORT $LN20@GoldenNSil
  00105	85 c9		 test	 ecx, ecx
  00107	75 47		 jne	 SHORT $LN20@GoldenNSil

; 6147 : 	{
; 6148 : 		nType = ITEMGET(14, 124);

  00109	b8 7c 1c 00 00	 mov	 eax, 7292		; 00001c7cH
$LN28@GoldenNSil:

; 6149 : 		bCheckSourceItem = true;
; 6150 : 	}
; 6151 : 	// ----
; 6152 : 	if( bCheckSourceItem )
; 6153 : 	{
; 6154 : 		ItemSerialCreateSend(lpObj->m_Index, 0xFF, 0, 0, nType, 0, 0, 0, 0, 0, -1, 0, 0);

  0010e	6a 00		 push	 0
  00110	6a 00		 push	 0
  00112	6a 00		 push	 0
  00114	6a 00		 push	 0
  00116	6a ff		 push	 -1
  00118	6a 00		 push	 0
  0011a	6a 00		 push	 0
  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	6a 00		 push	 0
  00122	50		 push	 eax
  00123	6a 00		 push	 0
  00125	6a 00		 push	 0
  00127	68 ff 00 00 00	 push	 255			; 000000ffH
  0012c	ff 37		 push	 DWORD PTR [edi]
  0012e	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6155 : 		gObjInventoryCommit(lpObj->m_Index);

  00133	ff 37		 push	 DWORD PTR [edi]
  00135	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0013a	83 c4 40	 add	 esp, 64			; 00000040H
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx

; 6161 : 	lpObj->ChaosLock = false;
; 6162 : }

  00140	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00143	33 cd		 xor	 ecx, ebp
  00145	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 04 00	 ret	 4
$LN20@GoldenNSil:

; 6156 : 		return;
; 6157 : 	}
; 6158 : 	// ----
; 6159 : 	pMsg.Result = 1;
; 6160 : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00150	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00154	50		 push	 eax
  00155	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00158	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  0015c	50		 push	 eax
  0015d	ff 37		 push	 DWORD PTR [edi]
  0015f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6161 : 	lpObj->ChaosLock = false;
; 6162 : }

  00164	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00167	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016a	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  00174	33 cd		 xor	 ecx, ebp
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 04 00	 ret	 4
?GoldenNSilverBoxMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::GoldenNSilverBoxMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_iLuckyItemDurability$1$ = -28				; size = 4
_iLuckyItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LuckySystemJewelCreate, COMDAT
; _this$ = ecx

; 6020 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 6021 : 	lpObj->ChaosLock = TRUE;
; 6022 : 
; 6023 : 	int iLuckyItemCount = 0;
; 6024 : 	float iLuckyItemDurability = 0;
; 6025 : 	int iOtherItemCount = 0;
; 6026 : 
; 6027 : 	PMSG_CHAOSMIXRESULT pMsg;
; 6028 : 
; 6029 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	0f 57 c0	 xorps	 xmm0, xmm0
  0001e	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00021	68 86 00 00 00	 push	 134			; 00000086H
  00026	50		 push	 eax
  00027	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00031	33 db		 xor	 ebx, ebx
  00033	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iLuckyItemCount$1$[ebp], 0
  0003a	f3 0f 11 45 e4	 movss	 DWORD PTR _iLuckyItemDurability$1$[ebp], xmm0
  0003f	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6030 : 	pMsg.Result = CB_ERROR;

  00047	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004a	33 ff		 xor	 edi, edi
  0004c	0f 1f 40 00	 npad	 4
$LL4@LuckySyste:

; 6033 : 	{
; 6034 : 		if( lpObj->pChaosBox[n].IsItem() )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 25		 je	 SHORT $LN19@LuckySyste

; 6035 : 		{
; 6036 : 			if( lpObj->pChaosBox[n].m_bLuckySet )

  00061	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00067	80 bc 38 ce 00
	00 00 00	 cmp	 BYTE PTR [eax+edi+206], 0
  0006f	74 14		 je	 SHORT $LN6@LuckySyste

; 6037 : 			{
; 6038 : 				iLuckyItemDurability = lpObj->pChaosBox[n].m_Durability;

  00071	f3 0f 10 44 38
	24		 movss	 xmm0, DWORD PTR [eax+edi+36]

; 6039 : 				iLuckyItemCount++;

  00077	8b 45 e8	 mov	 eax, DWORD PTR _iLuckyItemCount$1$[ebp]
  0007a	40		 inc	 eax
  0007b	f3 0f 11 45 e4	 movss	 DWORD PTR _iLuckyItemDurability$1$[ebp], xmm0
  00080	89 45 e8	 mov	 DWORD PTR _iLuckyItemCount$1$[ebp], eax

; 6040 : 			}
; 6041 : 			else

  00083	eb 04		 jmp	 SHORT $LN2@LuckySyste
$LN6@LuckySyste:

; 6042 : 			{
; 6043 : 				iOtherItemCount++;

  00085	43		 inc	 ebx
$LN19@LuckySyste:
  00086	8b 45 e8	 mov	 eax, DWORD PTR _iLuckyItemCount$1$[ebp]
$LN2@LuckySyste:

; 6031 : 
; 6032 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00089	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0008f	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00095	7c b9		 jl	 SHORT $LL4@LuckySyste

; 6044 : 			}
; 6045 : 		}
; 6046 : 	}
; 6047 : 
; 6048 : 	if( iLuckyItemCount != 1 ||

  00097	83 f8 01	 cmp	 eax, 1
  0009a	0f 85 f2 00 00
	00		 jne	 $LN9@LuckySyste
  000a0	85 db		 test	 ebx, ebx
  000a2	0f 85 ea 00 00
	00		 jne	 $LN9@LuckySyste

; 6053 : 		lpObj->ChaosLock = FALSE;
; 6054 : 		return;
; 6055 : 	}
; 6056 : 
; 6057 : 	LogChaosItem(lpObj, "LuckySystem");

  000a8	8b 7d e0	 mov	 edi, DWORD PTR _this$1$[ebp]
  000ab	8b cf		 mov	 ecx, edi
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 6058 : 	LogAddTD("[LuckySystem] Chaos Mix Start");

  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6059 : 
; 6060 : 	if( iLuckyItemDurability == 255 )

  000c3	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _iLuckyItemDurability$1$[ebp]
  000c8	83 c4 04	 add	 esp, 4
  000cb	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@437f0000
  000d2	9f		 lahf
  000d3	f6 c4 44	 test	 ah, 68			; 00000044H
  000d6	7a 0c		 jp	 SHORT $LN10@LuckySyste

; 6061 : 	{
; 6062 : 		lpObj->ChaosSuccessRate = 60;

  000d8	c7 86 1c 12 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+4636], 60 ; 0000003cH

; 6063 : 	}
; 6064 : 	else

  000e2	eb 0a		 jmp	 SHORT $LN11@LuckySyste
$LN10@LuckySyste:

; 6065 : 	{
; 6066 : 		lpObj->ChaosSuccessRate = 10;

  000e4	c7 86 1c 12 00
	00 0a 00 00 00	 mov	 DWORD PTR [esi+4636], 10 ; 0000000aH
$LN11@LuckySyste:

; 6067 : 	}
; 6068 : 
; 6069 : 	if( rand()%100 < lpObj->ChaosSuccessRate )

  000ee	e8 00 00 00 00	 call	 _rand
  000f3	99		 cdq
  000f4	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000f9	f7 f9		 idiv	 ecx
  000fb	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00101	7d 51		 jge	 SHORT $LN12@LuckySyste

; 6070 : 	{
; 6071 : 		int Item = ITEMGET(14,160);
; 6072 : #if( __4GAMERS__ == 1 )
; 6073 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 6074 : #endif
; 6075 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,0,0,0,-1,0,0);

  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	6a 00		 push	 0
  00109	6a 00		 push	 0
  0010b	6a ff		 push	 -1
  0010d	6a 00		 push	 0
  0010f	6a 00		 push	 0
  00111	6a 00		 push	 0
  00113	6a 00		 push	 0
  00115	6a 00		 push	 0
  00117	68 a0 1c 00 00	 push	 7328			; 00001ca0H
  0011c	6a 00		 push	 0
  0011e	6a 00		 push	 0
  00120	68 ff 00 00 00	 push	 255			; 000000ffH
  00125	ff 36		 push	 DWORD PTR [esi]
  00127	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6076 : 		gObjInventoryCommit(lpObj->m_Index);

  0012c	ff 36		 push	 DWORD PTR [esi]
  0012e	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00133	83 c4 40	 add	 esp, 64			; 00000040H

; 6077 : 		LogAddTD("[LuckySystem][JewelOfExtension][%s][%s] CBMix Success %d",

  00136	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00139	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0013f	50		 push	 eax
  00140	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00143	50		 push	 eax
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@MAMOGFAN@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 6078 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate);
; 6079 : 	}
; 6080 : 	else

  00152	eb 55		 jmp	 SHORT $LN13@LuckySyste
$LN12@LuckySyste:

; 6081 : 	{
; 6082 : #if( __4GAMERS__ == 1 )
; 6083 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 6084 : #endif
; 6085 : 		ChaosBoxInit(lpObj);

  00154	56		 push	 esi
  00155	8b cf		 mov	 ecx, edi
  00157	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 6086 : 		GCUserChaosBoxSend(lpObj,0);

  0015c	6a 00		 push	 0
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 6087 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00164	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00168	50		 push	 eax
  00169	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016c	50		 push	 eax
  0016d	ff 36		 push	 DWORD PTR [esi]
  0016f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 6088 : 		LogAddTD("[LuckySystem][JewelOfExtension][%s][%s] CBMix Fail %d",

  00174	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0017a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0017d	50		 push	 eax
  0017e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00181	50		 push	 eax
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LBFHIFGE@?$FLLuckySystem?$FN?$FLJewelOfExtension?$FN?$FL@
  00187	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0018d	83 c4 24	 add	 esp, 36			; 00000024H

; 6089 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate);
; 6090 : 	}
; 6091 : 
; 6092 : 	lpObj->ChaosLock = FALSE;

  00190	eb 17		 jmp	 SHORT $LN13@LuckySyste
$LN9@LuckySyste:

; 6049 : 		iOtherItemCount != 0 )
; 6050 : 	{
; 6051 : 		pMsg.Result = 7;
; 6052 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00192	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00196	50		 push	 eax
  00197	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0019a	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0019e	50		 push	 eax
  0019f	ff 36		 push	 DWORD PTR [esi]
  001a1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@LuckySyste:

; 6093 : }

  001a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ac	5f		 pop	 edi
  001ad	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001b7	33 cd		 xor	 ecx, ebp
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c2 04 00	 ret	 4
?LuckySystemJewelCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LuckySystemJewelCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Option2$1$ = -52					; size = 4
_this$1$ = -48						; size = 4
_Level$1$ = -48						; size = 4
_ItemGroup$ = -48					; size = 4
_Item$1$ = -44						; size = 4
_LuckyCard$1$ = -44					; size = 4
_iLuckyCardCount$1$ = -40				; size = 4
_Option3$1$ = -40					; size = 4
_pMsg$ = -36						; size = 16
_gear_2$ = -20						; size = 7
_gear_1$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LuckySystemItemCreate, COMDAT
; _this$ = ecx

; 5886 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 5887 : 	lpObj->ChaosLock = TRUE;
; 5888 : 
; 5889 : 	CItem* LuckyCard = NULL;

  00014	33 c0		 xor	 eax, eax
  00016	56		 push	 esi
  00017	57		 push	 edi

; 5890 : 	int iLuckyCardCount = 0;
; 5891 : 	int iOtherItemCount = 0;
; 5892 : 
; 5893 : 	BYTE gear_1[MAX_TYPE_PLAYER] = {64,62,63,62,62,65,62};
; 5894 : 	BYTE gear_2[MAX_TYPE_PLAYER] = {69,67,68,71,66,70,72};
; 5895 : 
; 5896 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5897 : 
; 5898 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	89 45 d4	 mov	 DWORD PTR _LuckyCard$1$[ebp], eax
  0001d	33 ff		 xor	 edi, edi
  0001f	89 45 d8	 mov	 DWORD PTR _iLuckyCardCount$1$[ebp], eax
  00022	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00025	68 86 00 00 00	 push	 134			; 00000086H
  0002a	50		 push	 eax
  0002b	89 4d d0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002e	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  00038	c7 45 f4 40 3e
	3f 3e		 mov	 DWORD PTR _gear_1$[ebp], 1044332096 ; 3e3f3e40H
  0003f	66 c7 45 f8 3e
	41		 mov	 WORD PTR _gear_1$[ebp+4], 16702 ; 0000413eH
  00045	c6 45 fa 3e	 mov	 BYTE PTR _gear_1$[ebp+6], 62 ; 0000003eH
  00049	c7 45 ec 45 43
	44 47		 mov	 DWORD PTR _gear_2$[ebp], 1195656005 ; 47444345H
  00050	66 c7 45 f0 42
	46		 mov	 WORD PTR _gear_2$[ebp+4], 17986 ; 00004642H
  00056	c6 45 f2 48	 mov	 BYTE PTR _gear_2$[ebp+6], 72 ; 00000048H
  0005a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5899 : 	pMsg.Result = CB_ERROR;

  00062	c6 45 df 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00066	33 f6		 xor	 esi, esi
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@LuckySyste:

; 5902 : 	{
; 5903 : 		if( lpObj->pChaosBox[n].IsItem() )

  00070	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00076	03 ce		 add	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	85 c0		 test	 eax, eax
  0007f	74 2f		 je	 SHORT $LN33@LuckySyste

; 5904 : 		{
; 5905 : 			if( lpObj->pChaosBox[n].m_Type >= ITEMGET(13,135) &&

  00081	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00087	ba 87 1a 00 00	 mov	 edx, 6791		; 00001a87H
  0008c	03 c6		 add	 eax, esi
  0008e	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00092	66 3b ca	 cmp	 cx, dx
  00095	7c 18		 jl	 SHORT $LN8@LuckySyste
  00097	ba 90 1a 00 00	 mov	 edx, 6800		; 00001a90H
  0009c	66 3b ca	 cmp	 cx, dx
  0009f	7f 0e		 jg	 SHORT $LN8@LuckySyste

; 5906 : 				lpObj->pChaosBox[n].m_Type <= ITEMGET(13,144) )
; 5907 : 			{
; 5908 : 				LuckyCard = &lpObj->pChaosBox[n];

  000a1	8b c8		 mov	 ecx, eax

; 5909 : 				iLuckyCardCount++;

  000a3	8b 45 d8	 mov	 eax, DWORD PTR _iLuckyCardCount$1$[ebp]
  000a6	40		 inc	 eax
  000a7	89 4d d4	 mov	 DWORD PTR _LuckyCard$1$[ebp], ecx
  000aa	89 45 d8	 mov	 DWORD PTR _iLuckyCardCount$1$[ebp], eax

; 5910 : 			}
; 5911 : 			else

  000ad	eb 07		 jmp	 SHORT $LN2@LuckySyste
$LN8@LuckySyste:

; 5912 : 			{
; 5913 : 				iOtherItemCount++;

  000af	47		 inc	 edi
$LN33@LuckySyste:
  000b0	8b 4d d4	 mov	 ecx, DWORD PTR _LuckyCard$1$[ebp]
  000b3	8b 45 d8	 mov	 eax, DWORD PTR _iLuckyCardCount$1$[ebp]
$LN2@LuckySyste:

; 5900 : 
; 5901 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000b6	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000bc	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000c2	7c ac		 jl	 SHORT $LL4@LuckySyste

; 5914 : 			}
; 5915 : 		}
; 5916 : 	}
; 5917 : 
; 5918 : 	if( iLuckyCardCount != 1 ||

  000c4	83 f8 01	 cmp	 eax, 1
  000c7	0f 85 fa 01 00
	00		 jne	 $LN11@LuckySyste
  000cd	85 ff		 test	 edi, edi
  000cf	0f 85 f2 01 00
	00		 jne	 $LN11@LuckySyste

; 5923 : 		lpObj->ChaosLock = FALSE;
; 5924 : 		return;
; 5925 : 	}
; 5926 : 
; 5927 : 	if( lpObj->Class == CLASS_MAGUMSA && 

  000d5	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  000dc	83 f8 03	 cmp	 eax, 3
  000df	75 20		 jne	 SHORT $LN12@LuckySyste
  000e1	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  000e5	be 89 1a 00 00	 mov	 esi, 6793		; 00001a89H
  000ea	66 3b d6	 cmp	 dx, si
  000ed	0f 84 d4 01 00
	00		 je	 $LN11@LuckySyste
  000f3	be 8e 1a 00 00	 mov	 esi, 6798		; 00001a8eH
  000f8	66 3b d6	 cmp	 dx, si
  000fb	0f 84 c6 01 00
	00		 je	 $LN11@LuckySyste
$LN12@LuckySyste:

; 5928 : 		(LuckyCard->m_Type == ITEMGET(13, 137) || LuckyCard->m_Type == ITEMGET(13, 142) ) )
; 5929 : 	{
; 5930 : 		pMsg.Result = 0;
; 5931 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5932 : 		lpObj->ChaosLock = FALSE;
; 5933 : 		return;
; 5934 : 	}
; 5935 : 
; 5936 : 	if( lpObj->Class == CLASS_FIGHTER && 

  00101	83 f8 06	 cmp	 eax, 6
  00104	75 20		 jne	 SHORT $LN14@LuckySyste
  00106	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  0010a	b9 8a 1a 00 00	 mov	 ecx, 6794		; 00001a8aH
  0010f	66 3b c1	 cmp	 ax, cx
  00112	0f 84 af 01 00
	00		 je	 $LN11@LuckySyste
  00118	b9 8f 1a 00 00	 mov	 ecx, 6799		; 00001a8fH
  0011d	66 3b c1	 cmp	 ax, cx
  00120	0f 84 a1 01 00
	00		 je	 $LN11@LuckySyste
$LN14@LuckySyste:

; 5937 : 		(LuckyCard->m_Type == ITEMGET(13,138) || LuckyCard->m_Type == ITEMGET(13,143) ) )
; 5938 : 	{
; 5939 : 		pMsg.Result = 0;
; 5940 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5941 : 		lpObj->ChaosLock = FALSE;
; 5942 : 		return;
; 5943 : 	}
; 5944 : 
; 5945 : 	LogChaosItem(lpObj, "LuckySystem");

  00126	8b 4d d0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JDLPAJDH@LuckySystem?$AA@
  0012e	53		 push	 ebx
  0012f	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5946 : 	LogAddTD("[LuckySystem] Chaos Mix Start");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IIPPLEDJ@?$FLLuckySystem?$FN?5Chaos?5Mix?5Start?$AA@
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013f	83 c4 04	 add	 esp, 4

; 5947 : 
; 5948 : 	int ItemGroup;
; 5949 : 	int Item;
; 5950 : 	int Level;
; 5951 : 	int Option1;
; 5952 : 	int Option2;
; 5953 : 	int Option3;
; 5954 : 
; 5955 : 	Option1 = TRUE;
; 5956 : 	Option2 = 0;

  00142	33 f6		 xor	 esi, esi
  00144	89 75 cc	 mov	 DWORD PTR _Option2$1$[ebp], esi

; 5957 : 	Option3 = 0;

  00147	89 75 d8	 mov	 DWORD PTR _Option3$1$[ebp], esi

; 5958 : 	Level = rand()%10;

  0014a	e8 00 00 00 00	 call	 _rand
  0014f	99		 cdq
  00150	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00155	f7 f9		 idiv	 ecx
  00157	89 55 d0	 mov	 DWORD PTR _Level$1$[ebp], edx

; 5959 : 
; 5960 : 	if( rand()%2 )	{

  0015a	e8 00 00 00 00	 call	 _rand
  0015f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00164	79 05		 jns	 SHORT $LN34@LuckySyste
  00166	48		 dec	 eax
  00167	83 c8 fe	 or	 eax, -2			; fffffffeH
  0016a	40		 inc	 eax
$LN34@LuckySyste:
  0016b	74 1c		 je	 SHORT $LN17@LuckySyste

; 5961 : 		if( rand()%2 )	{

  0016d	e8 00 00 00 00	 call	 _rand
  00172	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00177	79 05		 jns	 SHORT $LN35@LuckySyste
  00179	48		 dec	 eax
  0017a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0017d	40		 inc	 eax
$LN35@LuckySyste:
  0017e	b8 01 00 00 00	 mov	 eax, 1
  00183	0f 45 f0	 cmovne	 esi, eax
  00186	89 75 cc	 mov	 DWORD PTR _Option2$1$[ebp], esi
$LN17@LuckySyste:

; 5962 : 			Option2 = TRUE;
; 5963 : 		}
; 5964 : 	}
; 5965 : 
; 5966 : 	if( rand()%2 )	{

  00189	e8 00 00 00 00	 call	 _rand
  0018e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00193	79 05		 jns	 SHORT $LN36@LuckySyste
  00195	48		 dec	 eax
  00196	83 c8 fe	 or	 eax, -2			; fffffffeH
  00199	40		 inc	 eax
$LN36@LuckySyste:
  0019a	74 13		 je	 SHORT $LN18@LuckySyste

; 5967 : 		Option3 = 1+rand()%3;

  0019c	e8 00 00 00 00	 call	 _rand
  001a1	99		 cdq
  001a2	b9 03 00 00 00	 mov	 ecx, 3
  001a7	f7 f9		 idiv	 ecx
  001a9	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  001ac	89 7d d8	 mov	 DWORD PTR _Option3$1$[ebp], edi
$LN18@LuckySyste:

; 5968 : 	}
; 5969 : 
; 5970 : 	if( rand()%2 )	{

  001af	e8 00 00 00 00	 call	 _rand
  001b4	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001b9	79 05		 jns	 SHORT $LN37@LuckySyste
  001bb	48		 dec	 eax
  001bc	83 c8 fe	 or	 eax, -2			; fffffffeH
  001bf	40		 inc	 eax
$LN37@LuckySyste:
  001c0	74 10		 je	 SHORT $LN19@LuckySyste

; 5971 : 		Level = rand()%15;

  001c2	e8 00 00 00 00	 call	 _rand
  001c7	99		 cdq
  001c8	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  001cd	f7 f9		 idiv	 ecx
  001cf	89 55 d0	 mov	 DWORD PTR _Level$1$[ebp], edx
$LN19@LuckySyste:

; 5972 : 	}
; 5973 : 
; 5974 : 	switch( LuckyCard->m_Type )

  001d2	8b 45 d4	 mov	 eax, DWORD PTR _LuckyCard$1$[ebp]
  001d5	0f b7 50 06	 movzx	 edx, WORD PTR [eax+6]
  001d9	0f bf c2	 movsx	 eax, dx
  001dc	05 79 e5 ff ff	 add	 eax, -6791		; ffffe579H
  001e1	83 f8 09	 cmp	 eax, 9
  001e4	77 2a		 ja	 SHORT $LN32@LuckySyste
  001e6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN41@LuckySyste[eax*4]
$LN20@LuckySyste:

; 5975 : 	{
; 5976 : 	case ITEMGET(13,135):
; 5977 : 	case ITEMGET(13,140):
; 5978 : 		ItemGroup = 8;

  001ed	b9 08 00 00 00	 mov	 ecx, 8

; 5979 : 		break;

  001f2	eb 1f		 jmp	 SHORT $LN5@LuckySyste
$LN21@LuckySyste:

; 5980 : 	case ITEMGET(13,136):
; 5981 : 	case ITEMGET(13,141):
; 5982 : 		ItemGroup = 9;

  001f4	b9 09 00 00 00	 mov	 ecx, 9

; 5983 : 		break;

  001f9	eb 18		 jmp	 SHORT $LN5@LuckySyste
$LN22@LuckySyste:

; 5984 : 	case ITEMGET(13,137):
; 5985 : 	case ITEMGET(13,142):
; 5986 : 		ItemGroup = 7;

  001fb	b9 07 00 00 00	 mov	 ecx, 7

; 5987 : 		break;

  00200	eb 11		 jmp	 SHORT $LN5@LuckySyste
$LN23@LuckySyste:

; 5988 : 	case ITEMGET(13,138):
; 5989 : 	case ITEMGET(13,143):
; 5990 : 		ItemGroup = 10;

  00202	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH

; 5991 : 		break;

  00207	eb 0a		 jmp	 SHORT $LN5@LuckySyste
$LN24@LuckySyste:

; 5992 : 	case ITEMGET(13,139):
; 5993 : 	case ITEMGET(13,144):
; 5994 : 		ItemGroup = 11;

  00209	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0020e	eb 03		 jmp	 SHORT $LN5@LuckySyste
$LN32@LuckySyste:
  00210	8b 4d d0	 mov	 ecx, DWORD PTR _ItemGroup$[ebp]
$LN5@LuckySyste:

; 5995 : 		break;
; 5996 : 	}
; 5997 : 
; 5998 : 	if( LuckyCard->m_Type >= ITEMGET(13,135) && LuckyCard->m_Type <= ITEMGET(13,139) )

  00213	b8 87 1a 00 00	 mov	 eax, 6791		; 00001a87H
  00218	66 3b d0	 cmp	 dx, ax
  0021b	7c 18		 jl	 SHORT $LN25@LuckySyste
  0021d	b8 8b 1a 00 00	 mov	 eax, 6795		; 00001a8bH
  00222	66 3b d0	 cmp	 dx, ax
  00225	7f 0e		 jg	 SHORT $LN25@LuckySyste

; 5999 : 	{
; 6000 : 		Item = ITEMGET(ItemGroup,gear_1[lpObj->Class]);

  00227	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  0022e	0f b6 7c 05 f4	 movzx	 edi, BYTE PTR _gear_1$[ebp+eax]

; 6001 : 	}
; 6002 : 	else

  00233	eb 0c		 jmp	 SHORT $LN38@LuckySyste
$LN25@LuckySyste:

; 6003 : 	{
; 6004 : 		Item = ITEMGET(ItemGroup,gear_2[lpObj->Class]);

  00235	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  0023c	0f b6 7c 05 ec	 movzx	 edi, BYTE PTR _gear_2$[ebp+eax]
$LN38@LuckySyste:

; 6005 : 	}
; 6006 : 
; 6007 : 	ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,Level,0,Option1,Option2,Option3,lpObj->m_Index,0,gSetItemOption.GenSetOption(Item));

  00241	8b 33		 mov	 esi, DWORD PTR [ebx]
  00243	c1 e1 09	 shl	 ecx, 9
  00246	6a 00		 push	 0
  00248	03 f9		 add	 edi, ecx
  0024a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0024f	6a 00		 push	 0
  00251	57		 push	 edi
  00252	89 7d d4	 mov	 DWORD PTR _Item$1$[ebp], edi
  00255	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  0025a	50		 push	 eax
  0025b	6a 00		 push	 0
  0025d	56		 push	 esi
  0025e	ff 75 d8	 push	 DWORD PTR _Option3$1$[ebp]
  00261	ff 75 cc	 push	 DWORD PTR _Option2$1$[ebp]
  00264	6a 01		 push	 1
  00266	6a 00		 push	 0
  00268	ff 75 d0	 push	 DWORD PTR _Level$1$[ebp]
  0026b	57		 push	 edi
  0026c	6a 00		 push	 0
  0026e	6a 00		 push	 0
  00270	68 ff 00 00 00	 push	 255			; 000000ffH
  00275	56		 push	 esi
  00276	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 6008 : 	gObjInventoryCommit(lpObj->m_Index);

  0027b	ff 33		 push	 DWORD PTR [ebx]
  0027d	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00282	83 c4 40	 add	 esp, 64			; 00000040H

; 6009 : 
; 6010 : 	LogAddTD("[LuckySystem][ItemMix] Chaos Card Item Mix Success [%s][%s]",lpObj->AccountID,lpObj->Name);

  00285	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  00288	8d 7b 52	 lea	 edi, DWORD PTR [ebx+82]
  0028b	56		 push	 esi
  0028c	57		 push	 edi
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@LHKABBDI@?$FLLuckySystem?$FN?$FLItemMix?$FN?5Chaos?5Car@
  00292	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 6011 : 	LogAddTD("[LuckySystem][ItemMix] - User(ID:%s,Name:%s) Item(Name:%s,Type:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d)",

  00298	ff 75 d8	 push	 DWORD PTR _Option3$1$[ebp]
  0029b	8b 45 d4	 mov	 eax, DWORD PTR _Item$1$[ebp]
  0029e	ff 75 cc	 push	 DWORD PTR _Option2$1$[ebp]
  002a1	6a 01		 push	 1
  002a3	68 ff 00 00 00	 push	 255			; 000000ffH
  002a8	ff 75 d0	 push	 DWORD PTR _Level$1$[ebp]
  002ab	50		 push	 eax
  002ac	6b c0 70	 imul	 eax, eax, 112
  002af	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  002b4	50		 push	 eax
  002b5	56		 push	 esi
  002b6	57		 push	 edi
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@FMOBPLCD@?$FLLuckySystem?$FN?$FLItemMix?$FN?5?9?5User?$CIID@
  002bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002c2	83 c4 34	 add	 esp, 52			; 00000034H

; 6012 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[Item].Name,
; 6013 : 		Item, Level, (int)255,
; 6014 : 		Option1, Option2, Option3);
; 6015 : 
; 6016 : 	lpObj->ChaosLock = FALSE;

  002c5	eb 17		 jmp	 SHORT $LN39@LuckySyste
$LN11@LuckySyste:

; 5919 : 		iOtherItemCount != 0 )
; 5920 : 	{
; 5921 : 		pMsg.Result = 0;
; 5922 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002c7	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002cb	50		 push	 eax
  002cc	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002cf	c6 45 df 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  002d3	50		 push	 eax
  002d4	ff 33		 push	 DWORD PTR [ebx]
  002d6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002db	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@LuckySyste:

; 6017 : }

  002de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  002ed	33 cd		 xor	 ecx, ebp
  002ef	5b		 pop	 ebx
  002f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f5	8b e5		 mov	 esp, ebp
  002f7	5d		 pop	 ebp
  002f8	c2 04 00	 ret	 4
  002fb	90		 npad	 1
$LN41@LuckySyste:
  002fc	00 00 00 00	 DD	 $LN20@LuckySyste
  00300	00 00 00 00	 DD	 $LN21@LuckySyste
  00304	00 00 00 00	 DD	 $LN22@LuckySyste
  00308	00 00 00 00	 DD	 $LN23@LuckySyste
  0030c	00 00 00 00	 DD	 $LN24@LuckySyste
  00310	00 00 00 00	 DD	 $LN20@LuckySyste
  00314	00 00 00 00	 DD	 $LN21@LuckySyste
  00318	00 00 00 00	 DD	 $LN22@LuckySyste
  0031c	00 00 00 00	 DD	 $LN23@LuckySyste
  00320	00 00 00 00	 DD	 $LN24@LuckySyste
?LuckySystemItemCreate@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LuckySystemItemCreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -44						; size = 4
_iSecromiconPart3$1$ = -40				; size = 4
_iSecromiconPart2$1$ = -36				; size = 4
_iSecromiconPart4$1$ = -32				; size = 4
_iSecromiconPart1$1$ = -28				; size = 4
_iSecromiconPart5$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::SecromiconMix, COMDAT
; _this$ = ecx

; 5759 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5760 : 	lpObj->ChaosLock = TRUE;
; 5761 : 
; 5762 : 	int iNeedChaosMoney;
; 5763 : 	int iSecromiconPart1 = 0;
; 5764 : 	int iSecromiconPart2 = 0;
; 5765 : 	int iSecromiconPart3 = 0;
; 5766 : 	int iSecromiconPart4 = 0;
; 5767 : 	int iSecromiconPart5 = 0;
; 5768 : 	int iSecromiconPart6 = 0;
; 5769 : 	int iOtherItemCount = 0;
; 5770 : 
; 5771 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5772 : 
; 5773 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	33 ff		 xor	 edi, edi
  0001d	89 4d d4	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iSecromiconPart1$1$[ebp], 0
  00039	89 7d dc	 mov	 DWORD PTR _iSecromiconPart2$1$[ebp], edi
  0003c	89 7d d8	 mov	 DWORD PTR _iSecromiconPart3$1$[ebp], edi
  0003f	89 7d e0	 mov	 DWORD PTR _iSecromiconPart4$1$[ebp], edi
  00042	89 7d e8	 mov	 DWORD PTR _iSecromiconPart5$1$[ebp], edi
  00045	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5774 : 	pMsg.Result = CB_ERROR;

  0004d	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
$LL4@Secromicon:

; 5777 : 	{
; 5778 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 2f		 jne	 SHORT $LN32@Secromicon

; 5779 : 		{
; 5780 : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,103) )

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	b9 67 1c 00 00	 mov	 ecx, 7271		; 00001c67H
  0006d	0f b7 44 38 06	 movzx	 eax, WORD PTR [eax+edi+6]
  00072	66 3b c1	 cmp	 ax, cx
  00075	75 09		 jne	 SHORT $LN6@Secromicon

; 5781 : 			{
; 5782 : 				iSecromiconPart1++;

  00077	8b 4d e4	 mov	 ecx, DWORD PTR _iSecromiconPart1$1$[ebp]
  0007a	41		 inc	 ecx
  0007b	89 4d e4	 mov	 DWORD PTR _iSecromiconPart1$1$[ebp], ecx
  0007e	eb 14		 jmp	 SHORT $LN33@Secromicon
$LN6@Secromicon:

; 5783 : 			}
; 5784 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,104) )

  00080	b9 68 1c 00 00	 mov	 ecx, 7272		; 00001c68H
  00085	66 3b c1	 cmp	 ax, cx
  00088	0f 85 bc 00 00
	00		 jne	 $LN8@Secromicon

; 5785 : 			{
; 5786 : 				iSecromiconPart2++;

  0008e	ff 45 dc	 inc	 DWORD PTR _iSecromiconPart2$1$[ebp]
$LN32@Secromicon:
  00091	8b 4d e4	 mov	 ecx, DWORD PTR _iSecromiconPart1$1$[ebp]
$LN33@Secromicon:
  00094	8b 55 e0	 mov	 edx, DWORD PTR _iSecromiconPart4$1$[ebp]
$LN34@Secromicon:
  00097	8b 45 e8	 mov	 eax, DWORD PTR _iSecromiconPart5$1$[ebp]
$LN2@Secromicon:

; 5775 : 
; 5776 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0009a	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a0	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000a6	7c a8		 jl	 SHORT $LL4@Secromicon

; 5803 : 			}
; 5804 : 			else
; 5805 : 			{
; 5806 : 				iOtherItemCount = 0;
; 5807 : 			}
; 5808 : 		}
; 5809 : 	}
; 5810 : 
; 5811 : 	if( iOtherItemCount != 0 ||
; 5812 : 		iSecromiconPart1 != 1 ||
; 5813 : 		iSecromiconPart2 != 1 ||
; 5814 : 		iSecromiconPart3 != 1 ||
; 5815 : 		iSecromiconPart4 != 1 ||
; 5816 : 		iSecromiconPart5 != 1 ||

  000a8	83 f9 01	 cmp	 ecx, 1
  000ab	0f 85 cc 01 00
	00		 jne	 $LN19@Secromicon
  000b1	39 4d dc	 cmp	 DWORD PTR _iSecromiconPart2$1$[ebp], ecx
  000b4	0f 85 c3 01 00
	00		 jne	 $LN19@Secromicon
  000ba	39 4d d8	 cmp	 DWORD PTR _iSecromiconPart3$1$[ebp], ecx
  000bd	0f 85 ba 01 00
	00		 jne	 $LN19@Secromicon
  000c3	3b d1		 cmp	 edx, ecx
  000c5	0f 85 b2 01 00
	00		 jne	 $LN19@Secromicon
  000cb	3b c1		 cmp	 eax, ecx
  000cd	0f 85 aa 01 00
	00		 jne	 $LN19@Secromicon
  000d3	3b d9		 cmp	 ebx, ecx
  000d5	0f 85 a2 01 00
	00		 jne	 $LN19@Secromicon

; 5821 : 		lpObj->ChaosLock = FALSE;
; 5822 : 		return;
; 5823 : 	}
; 5824 : 
; 5825 : 	LogChaosItem(lpObj, "Secromicon");

  000db	8b 5d d4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000de	8b cb		 mov	 ecx, ebx
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FKBLGOD@Secromicon?$AA@
  000e5	56		 push	 esi
  000e6	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5826 : 	LogAddTD("[Secromicon] Chaos Mix Start");

  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PDFCNBKK@?$FLSecromicon?$FN?5Chaos?5Mix?5Start?$AA@
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f6	83 c4 04	 add	 esp, 4

; 5827 : 
; 5828 : 	lpObj->ChaosSuccessRate = 100;

  000f9	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 5829 : 	iNeedChaosMoney = 1000000;
; 5830 : 
; 5831 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00103	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00108	ff 36		 push	 DWORD PTR [esi]
  0010a	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0010f	8b c8		 mov	 ecx, eax
  00111	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00116	f7 e9		 imul	 ecx
  00118	6a 00		 push	 0
  0011a	6a 64		 push	 100			; 00000064H
  0011c	52		 push	 edx
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 __alldiv
  00123	8b c8		 mov	 ecx, eax

; 5832 : 
; 5833 : 	if ( iChaosTaxMoney < 0 )

  00125	33 c0		 xor	 eax, eax
  00127	85 c9		 test	 ecx, ecx
  00129	0f 48 c8	 cmovs	 ecx, eax

; 5834 : 	{
; 5835 : 		iChaosTaxMoney = 0;
; 5836 : 	}
; 5837 : 
; 5838 : 	iNeedChaosMoney += iChaosTaxMoney;

  0012c	8d b9 40 42 0f
	00		 lea	 edi, DWORD PTR [ecx+1000000]

; 5839 : 
; 5840 : 	if ( iNeedChaosMoney < 0 )

  00132	85 ff		 test	 edi, edi
  00134	0f 48 f8	 cmovs	 edi, eax

; 5841 : 	{
; 5842 : 		iNeedChaosMoney = 0;
; 5843 : 	}
; 5844 : 
; 5845 : 	if(lpObj->Money < iNeedChaosMoney)

  00137	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0013d	3b c7		 cmp	 eax, edi
  0013f	7d 67		 jge	 SHORT $LN22@Secromicon

; 5846 : 	{
; 5847 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00141	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 5848 : 		
; 5849 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 5850 : 		lpObj->ChaosLock = FALSE;
; 5851 : 		return;

  00145	e9 37 01 00 00	 jmp	 $LN35@Secromicon
$LN8@Secromicon:

; 5787 : 			}
; 5788 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,105) )

  0014a	b9 69 1c 00 00	 mov	 ecx, 7273		; 00001c69H
  0014f	66 3b c1	 cmp	 ax, cx
  00152	75 08		 jne	 SHORT $LN10@Secromicon

; 5789 : 			{
; 5790 : 				iSecromiconPart3++;

  00154	ff 45 d8	 inc	 DWORD PTR _iSecromiconPart3$1$[ebp]
  00157	e9 35 ff ff ff	 jmp	 $LN32@Secromicon
$LN10@Secromicon:

; 5791 : 			}
; 5792 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,106) )
; 5793 : 			{
; 5794 : 				iSecromiconPart4++;

  0015c	8b 55 e0	 mov	 edx, DWORD PTR _iSecromiconPart4$1$[ebp]
  0015f	b9 6a 1c 00 00	 mov	 ecx, 7274		; 00001c6aH
  00164	66 3b c1	 cmp	 ax, cx
  00167	75 0c		 jne	 SHORT $LN12@Secromicon
  00169	8b 4d e4	 mov	 ecx, DWORD PTR _iSecromiconPart1$1$[ebp]
  0016c	42		 inc	 edx
  0016d	89 55 e0	 mov	 DWORD PTR _iSecromiconPart4$1$[ebp], edx
  00170	e9 22 ff ff ff	 jmp	 $LN34@Secromicon
$LN12@Secromicon:

; 5795 : 			}
; 5796 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,107) )

  00175	b9 6b 1c 00 00	 mov	 ecx, 7275		; 00001c6bH
  0017a	66 3b c1	 cmp	 ax, cx
  0017d	75 0f		 jne	 SHORT $LN14@Secromicon

; 5797 : 			{
; 5798 : 				iSecromiconPart5++;

  0017f	8b 45 e8	 mov	 eax, DWORD PTR _iSecromiconPart5$1$[ebp]
  00182	8b 4d e4	 mov	 ecx, DWORD PTR _iSecromiconPart1$1$[ebp]
  00185	40		 inc	 eax
  00186	89 45 e8	 mov	 DWORD PTR _iSecromiconPart5$1$[ebp], eax
  00189	e9 0c ff ff ff	 jmp	 $LN2@Secromicon
$LN14@Secromicon:

; 5799 : 			}
; 5800 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,108) )

  0018e	b9 6c 1c 00 00	 mov	 ecx, 7276		; 00001c6cH
  00193	66 3b c1	 cmp	 ax, cx
  00196	8b 45 e8	 mov	 eax, DWORD PTR _iSecromiconPart5$1$[ebp]
  00199	8b 4d e4	 mov	 ecx, DWORD PTR _iSecromiconPart1$1$[ebp]
  0019c	0f 85 f8 fe ff
	ff		 jne	 $LN2@Secromicon

; 5801 : 			{
; 5802 : 				iSecromiconPart6++;

  001a2	43		 inc	 ebx
  001a3	e9 f2 fe ff ff	 jmp	 $LN2@Secromicon
$LN22@Secromicon:

; 5852 : 	}
; 5853 : 
; 5854 : 	lpObj->Money -= iNeedChaosMoney;

  001a8	2b c7		 sub	 eax, edi

; 5855 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001aa	51		 push	 ecx
  001ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001b0	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001b6	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5856 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001bb	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c1	ff 36		 push	 DWORD PTR [esi]
  001c3	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001c8	83 c4 08	 add	 esp, 8

; 5857 : 
; 5858 : 	if( rand()%100 < lpObj->ChaosSuccessRate )

  001cb	e8 00 00 00 00	 call	 _rand
  001d0	99		 cdq
  001d1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001d6	f7 f9		 idiv	 ecx
  001d8	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001de	7d 58		 jge	 SHORT $LN23@Secromicon

; 5859 : 	{
; 5860 : 		int Item = ITEMGET(14,109);
; 5861 : #if( __4GAMERS__ == 1 )
; 5862 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 5863 : #endif
; 5864 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,0,0,0,-1,0,0);

  001e0	6a 00		 push	 0
  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	6a 00		 push	 0
  001e8	6a ff		 push	 -1
  001ea	6a 00		 push	 0
  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	6a 00		 push	 0
  001f2	6a 00		 push	 0
  001f4	68 6d 1c 00 00	 push	 7277			; 00001c6dH
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	68 ff 00 00 00	 push	 255			; 000000ffH
  00202	ff 36		 push	 DWORD PTR [esi]
  00204	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5865 : 		gObjInventoryCommit(lpObj->m_Index);

  00209	ff 36		 push	 DWORD PTR [esi]
  0020b	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00210	83 c4 40	 add	 esp, 64			; 00000040H

; 5866 : 		LogAddTD("[Secromicon Mix][%s][%s] CBMix Success %d Money : %d-%d",

  00213	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00216	57		 push	 edi
  00217	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0021d	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00223	50		 push	 eax
  00224	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00227	50		 push	 eax
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FEKMLFCO@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  0022d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00233	83 c4 18	 add	 esp, 24			; 00000018H

; 5867 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney);
; 5868 : 	}
; 5869 : 	else

  00236	eb 5c		 jmp	 SHORT $LN24@Secromicon
$LN23@Secromicon:

; 5870 : 	{
; 5871 : #if( __4GAMERS__ == 1 )
; 5872 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 5873 : #endif
; 5874 : 		ChaosBoxInit(lpObj);

  00238	56		 push	 esi
  00239	8b cb		 mov	 ecx, ebx
  0023b	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5875 : 		GCUserChaosBoxSend(lpObj,0);

  00240	6a 00		 push	 0
  00242	56		 push	 esi
  00243	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5876 : 
; 5877 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00248	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0024c	50		 push	 eax
  0024d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00250	50		 push	 eax
  00251	ff 36		 push	 DWORD PTR [esi]
  00253	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5878 : 
; 5879 : 		LogAddTD("[Secromicon Mix][%s][%s] CBMix Fail %d Money : %d-%d",

  00258	57		 push	 edi
  00259	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0025f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00262	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00268	50		 push	 eax
  00269	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0026c	50		 push	 eax
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GJBOIKGG@?$FLSecromicon?5Mix?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00278	83 c4 2c	 add	 esp, 44			; 0000002cH

; 5880 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney);
; 5881 : 	}
; 5882 : 	lpObj->ChaosLock = FALSE;

  0027b	eb 17		 jmp	 SHORT $LN24@Secromicon
$LN19@Secromicon:

; 5817 : 		iSecromiconPart6 != 1 )
; 5818 : 	{
; 5819 : 		pMsg.Result = 7;

  0027d	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN35@Secromicon:

; 5820 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00281	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00285	50		 push	 eax
  00286	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00289	50		 push	 eax
  0028a	ff 36		 push	 DWORD PTR [esi]
  0028c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00291	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@Secromicon:

; 5883 : }

  00294	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00297	5f		 pop	 edi
  00298	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002a2	33 cd		 xor	 ecx, ebp
  002a4	5e		 pop	 esi
  002a5	5b		 pop	 ebx
  002a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 04 00	 ret	 4
?SecromiconMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::SecromiconMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_Pos$GSCopy$ = -44					; size = 1
_this$1$ = -40						; size = 4
_iItemPos$1$ = -36					; size = 4
_iOtherItemCount$1$ = -32				; size = 4
_iItemCount$1$ = -28					; size = 4
_Pos$GSCopy$1$ = -21					; size = 1
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Pos$ = 12						; size = 1
?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CChaosBox::RemoveSeedSphereMix, COMDAT
; _this$ = ecx

; 5666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8a 5d 0c	 mov	 bl, BYTE PTR _Pos$[ebp]

; 5667 : 	int iItemCount = 0;
; 5668 : 	int iOtherItemCount = 0;
; 5669 : 	int tmp = 0;
; 5670 : 	int iItemPos = 0;

  00014	33 c0		 xor	 eax, eax
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5671 : 	int tmp2 = 0;
; 5672 : 	int iChaosTaxMoney = 0;
; 5673 : 	int iMixNeedMoney = 0;
; 5674 : 
; 5675 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5676 : 
; 5677 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001a	6a 10		 push	 16			; 00000010H
  0001c	89 45 dc	 mov	 DWORD PTR _iItemPos$1$[ebp], eax
  0001f	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00022	68 86 00 00 00	 push	 134			; 00000086H
  00027	50		 push	 eax
  00028	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002b	88 5d eb	 mov	 BYTE PTR _Pos$GSCopy$1$[ebp], bl
  0002e	88 5d d4	 mov	 BYTE PTR _Pos$GSCopy$[ebp], bl
  00031	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iItemCount$1$[ebp], 0
  00038	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iOtherItemCount$1$[ebp], 0
  0003f	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5678 : 	pMsg.Result = CB_ERROR;

  00047	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5679 : 
; 5680 : 	if( Pos >= MAX_SOCKET_COUNT )

  0004b	80 fb 05	 cmp	 bl, 5
  0004e	72 33		 jb	 SHORT $LN5@RemoveSeed

; 5681 : 	{
; 5682 : 		pMsg.Result = 7;
; 5683 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00050	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00054	50		 push	 eax
  00055	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00058	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0005c	50		 push	 eax
  0005d	ff 36		 push	 DWORD PTR [esi]
  0005f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5684 : 		lpObj->ChaosLock = FALSE;

  00067	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx

; 5756 : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN5@RemoveSeed:
  00083	57		 push	 edi

; 5685 : 		return;
; 5686 : 	}
; 5687 : 
; 5688 : 	lpObj->ChaosLock = TRUE;
; 5689 : 
; 5690 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00084	33 db		 xor	 ebx, ebx
  00086	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00090	33 ff		 xor	 edi, edi
$LL4@RemoveSeed:

; 5691 : 	{
; 5692 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00092	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00098	03 cf		 add	 ecx, edi
  0009a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0009f	83 f8 01	 cmp	 eax, 1
  000a2	75 4b		 jne	 SHORT $LN18@RemoveSeed

; 5693 : 		{
; 5694 : 			if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) == TRUE &&
; 5695 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] != 0xFF &&

  000a4	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000af	0f bf 44 38 06	 movsx	 eax, WORD PTR [eax+edi+6]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  000ba	3c 01		 cmp	 al, 1
  000bc	75 25		 jne	 SHORT $LN7@RemoveSeed
  000be	0f b6 45 eb	 movzx	 eax, BYTE PTR _Pos$GSCopy$1$[ebp]
  000c2	03 86 10 12 00
	00		 add	 eax, DWORD PTR [esi+4624]
  000c8	8a 84 38 c8 00
	00 00		 mov	 al, BYTE PTR [eax+edi+200]
  000cf	3c ff		 cmp	 al, 255			; 000000ffH
  000d1	74 10		 je	 SHORT $LN7@RemoveSeed
  000d3	3c fe		 cmp	 al, 254			; 000000feH
  000d5	74 0c		 je	 SHORT $LN7@RemoveSeed

; 5696 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] != 0xFE )
; 5697 : 			{
; 5698 : 				iItemCount++;

  000d7	8b 45 e4	 mov	 eax, DWORD PTR _iItemCount$1$[ebp]
  000da	40		 inc	 eax

; 5699 : 				iItemPos = n;

  000db	89 5d dc	 mov	 DWORD PTR _iItemPos$1$[ebp], ebx
  000de	89 45 e4	 mov	 DWORD PTR _iItemCount$1$[ebp], eax

; 5700 : 			}
; 5701 : 			else

  000e1	eb 0f		 jmp	 SHORT $LN20@RemoveSeed
$LN7@RemoveSeed:

; 5702 : 			{
; 5703 : 				iOtherItemCount++;

  000e3	8b 4d e0	 mov	 ecx, DWORD PTR _iOtherItemCount$1$[ebp]
  000e6	8b 45 e4	 mov	 eax, DWORD PTR _iItemCount$1$[ebp]
  000e9	41		 inc	 ecx
  000ea	89 4d e0	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], ecx
  000ed	eb 06		 jmp	 SHORT $LN2@RemoveSeed
$LN18@RemoveSeed:
  000ef	8b 45 e4	 mov	 eax, DWORD PTR _iItemCount$1$[ebp]
$LN20@RemoveSeed:
  000f2	8b 4d e0	 mov	 ecx, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@RemoveSeed:

; 5685 : 		return;
; 5686 : 	}
; 5687 : 
; 5688 : 	lpObj->ChaosLock = TRUE;
; 5689 : 
; 5690 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000f5	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000fb	43		 inc	 ebx
  000fc	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00102	7c 8e		 jl	 SHORT $LL4@RemoveSeed

; 5704 : 			}
; 5705 : 		}
; 5706 : 	}
; 5707 : 
; 5708 : 	if( iOtherItemCount > 0 )

  00104	85 c9		 test	 ecx, ecx
  00106	7f 05		 jg	 SHORT $LN22@RemoveSeed

; 5709 : 	{
; 5710 : 		pMsg.Result = 7;
; 5711 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5712 : 		lpObj->ChaosLock = FALSE;
; 5713 : 		return;
; 5714 : 	}
; 5715 : 
; 5716 : 	if( iItemCount != 1 )

  00108	83 f8 01	 cmp	 eax, 1
  0010b	74 06		 je	 SHORT $LN10@RemoveSeed
$LN22@RemoveSeed:

; 5717 : 	{
; 5718 : 		pMsg.Result = 7;

  0010d	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7

; 5719 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5720 : 		lpObj->ChaosLock = FALSE;
; 5721 : 		return;

  00111	eb 3b		 jmp	 SHORT $LN21@RemoveSeed
$LN10@RemoveSeed:

; 5722 : 	}
; 5723 : 
; 5724 : 	iChaosTaxMoney = (int)((__int64)g_SphereRemoveMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00113	ff 36		 push	 DWORD PTR [esi]
  00115	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0011a	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0011f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_SphereRemoveMoney@@3HA ; g_SphereRemoveMoney
  00125	8b c8		 mov	 ecx, eax
  00127	8b c7		 mov	 eax, edi
  00129	f7 e9		 imul	 ecx
  0012b	6a 00		 push	 0
  0012d	6a 64		 push	 100			; 00000064H
  0012f	52		 push	 edx
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 __alldiv

; 5725 : 
; 5726 : 	if( iChaosTaxMoney < 0 )

  00136	33 c9		 xor	 ecx, ecx
  00138	85 c0		 test	 eax, eax
  0013a	0f 48 c1	 cmovs	 eax, ecx

; 5727 : 		iChaosTaxMoney = 0;
; 5728 : 
; 5729 : 	iMixNeedMoney = g_SphereRemoveMoney +iChaosTaxMoney;
; 5730 : 
; 5731 : 	if( lpObj->Money < iMixNeedMoney )

  0013d	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00143	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]
  00146	3b ca		 cmp	 ecx, edx
  00148	7d 34		 jge	 SHORT $LN12@RemoveSeed

; 5732 : 	{
; 5733 : 		pMsg.Result = 2;

  0014a	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN21@RemoveSeed:

; 5734 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0014e	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00152	50		 push	 eax
  00153	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00156	50		 push	 eax
  00157	ff 36		 push	 DWORD PTR [esi]
  00159	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5735 : 		lpObj->ChaosLock = FALSE;

  00161	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx

; 5756 : }

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
$LN12@RemoveSeed:

; 5736 : 		return;
; 5737 : 	}
; 5738 : 
; 5739 : 	lpObj->Money -= iMixNeedMoney;

  0017e	2b ca		 sub	 ecx, edx
  00180	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 5740 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00186	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5741 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00191	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00197	ff 36		 push	 DWORD PTR [esi]
  00199	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5742 : 
; 5743 : 	LogChaosItem(lpObj,"SeedSphereRemove");

  0019e	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a1	83 c4 08	 add	 esp, 8
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CFKCJMNE@SeedSphereRemove?$AA@
  001a9	56		 push	 esi
  001aa	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5744 : 	g_SocketItem.ItemRemoveSeedSphere(&lpObj->pChaosBox[iItemPos],Pos);

  001af	69 7d dc d4 00
	00 00		 imul	 edi, DWORD PTR _iItemPos$1$[ebp], 212
  001b6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  001bb	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  001c1	ff 75 d4	 push	 DWORD PTR _Pos$GSCopy$[ebp]
  001c4	03 c7		 add	 eax, edi
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z ; CSocketItems::ItemRemoveSeedSphere

; 5745 : 	lpObj->ChaosLock = FALSE;
; 5746 : 
; 5747 : 	gObjInventoryCommit(lpObj->m_Index);

  001cc	ff 36		 push	 DWORD PTR [esi]
  001ce	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001d8	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5748 : 	GCUserChaosBoxSend(lpObj,0);

  001dd	6a 00		 push	 0
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5749 : 
; 5750 : 	LogAddTD("[%s][%s] SeedSphere Remove Success - ItemInfo ( Name : %s, ItemCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOption : %d )",

  001e5	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  001eb	03 cf		 add	 ecx, edi
  001ed	0f b6 81 c7 00
	00 00		 movzx	 eax, BYTE PTR [ecx+199]
  001f4	50		 push	 eax
  001f5	0f b6 81 cc 00
	00 00		 movzx	 eax, BYTE PTR [ecx+204]
  001fc	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00200	50		 push	 eax
  00201	0f b6 81 cb 00
	00 00		 movzx	 eax, BYTE PTR [ecx+203]
  00208	50		 push	 eax
  00209	0f b6 81 ca 00
	00 00		 movzx	 eax, BYTE PTR [ecx+202]
  00210	50		 push	 eax
  00211	0f b6 81 c9 00
	00 00		 movzx	 eax, BYTE PTR [ecx+201]
  00218	50		 push	 eax
  00219	0f b6 81 c8 00
	00 00		 movzx	 eax, BYTE PTR [ecx+200]
  00220	50		 push	 eax
  00221	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  00225	50		 push	 eax
  00226	6b c2 70	 imul	 eax, edx, 112
  00229	52		 push	 edx
  0022a	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  0022f	50		 push	 eax
  00230	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00233	50		 push	 eax
  00234	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00237	50		 push	 eax
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0IH@MCNGCFGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Remove?5Succe@
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5751 : 		lpObj->AccountID,lpObj->Name,ItemAttribute[lpObj->pChaosBox[iItemPos].m_Type].Name,lpObj->pChaosBox[iItemPos].m_Type,lpObj->pChaosBox[iItemPos].m_Level,
; 5752 : 		lpObj->pChaosBox[iItemPos].m_SocketOption[0],lpObj->pChaosBox[iItemPos].m_SocketOption[1],lpObj->pChaosBox[iItemPos].m_SocketOption[2],lpObj->pChaosBox[iItemPos].m_SocketOption[3],lpObj->pChaosBox[iItemPos].m_SocketOption[4],
; 5753 : 		lpObj->pChaosBox[iItemPos].m_SocketBonus);
; 5754 : 
; 5755 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00243	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00247	50		 push	 eax
  00248	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0024b	50		 push	 eax
  0024c	ff 36		 push	 DWORD PTR [esi]
  0024e	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5756 : }

  00253	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00256	83 c4 48	 add	 esp, 72			; 00000048H
  00259	33 cd		 xor	 ecx, ebp
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00263	8b e5		 mov	 esp, ebp
  00265	5d		 pop	 ebp
  00266	c2 08 00	 ret	 8
?RemoveSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CChaosBox::RemoveSeedSphereMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_Pos$GSCopy$ = -268					; size = 1
_this$1$ = -264						; size = 4
_lpItem$1$ = -260					; size = 4
_iSeedSphereCount$1$ = -256				; size = 4
_btOption$ = -256					; size = 1
_iMixNeedMoney$1$ = -252				; size = 4
_iItemCount$1$ = -252					; size = 4
_iChaosCount$1$ = -248					; size = 4
_iOtherItemCount$1$ = -244				; size = 4
_iChaosTaxMoney$2$ = -240				; size = 4
_iCreationCount$1$ = -240				; size = 4
_Pos$GSCopy$1$ = -233					; size = 1
_tmpItem$ = -232					; size = 212
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Pos$ = 12						; size = 1
?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CChaosBox::SetSeedSphereMix, COMDAT
; _this$ = ecx

; 5510 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8a 45 0c	 mov	 al, BYTE PTR _Pos$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0001a	56		 push	 esi
  0001b	88 85 17 ff ff
	ff		 mov	 BYTE PTR _Pos$GSCopy$1$[ebp], al
  00021	88 85 f4 fe ff
	ff		 mov	 BYTE PTR _Pos$GSCopy$[ebp], al

; 5511 : 	int iItemCount = 0;

  00027	33 c0		 xor	 eax, eax
  00029	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx

; 5512 : 	int iOtherItemCount = 0;
; 5513 : 	int iSeedSphereCount = 0;
; 5514 : 	int iChaosCount = 0;
; 5515 : 	int iCreationCount = 0;
; 5516 : 	CItem* lpItem = 0;
; 5517 : 	CItem* lpSeedSphere = 0;
; 5518 : 	CItem tmpItem;

  0002f	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _tmpItem$[ebp]
  00035	57		 push	 edi
  00036	89 85 04 ff ff
	ff		 mov	 DWORD PTR _iItemCount$1$[ebp], eax
  0003c	33 ff		 xor	 edi, edi
  0003e	89 85 0c ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00044	89 85 00 ff ff
	ff		 mov	 DWORD PTR _iSeedSphereCount$1$[ebp], eax
  0004a	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  00050	89 85 10 ff ff
	ff		 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  00056	89 85 fc fe ff
	ff		 mov	 DWORD PTR _lpItem$1$[ebp], eax
  0005c	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 5519 : 	int iChaosTaxMoney = 0;
; 5520 : 	int iMixNeedMoney = 0;
; 5521 : 
; 5522 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5523 : 
; 5524 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00061	6a 10		 push	 16			; 00000010H
  00063	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00066	68 86 00 00 00	 push	 134			; 00000086H
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5525 : 	pMsg.Result = CB_ERROR;

  00074	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5526 : 
; 5527 : 	if( Pos >= MAX_SOCKET_COUNT )

  00078	80 bd 17 ff ff
	ff 05		 cmp	 BYTE PTR _Pos$GSCopy$1$[ebp], 5
  0007f	72 1f		 jb	 SHORT $LN5@SetSeedSph

; 5528 : 	{
; 5529 : 		pMsg.Result = 7;
; 5530 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00081	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00085	50		 push	 eax
  00086	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00089	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0008d	50		 push	 eax
  0008e	ff 33		 push	 DWORD PTR [ebx]
  00090	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5531 : 		lpObj->ChaosLock = FALSE;

  00095	89 bb 20 12 00
	00		 mov	 DWORD PTR [ebx+4640], edi

; 5532 : 		return;

  0009b	e9 82 04 00 00	 jmp	 $LN29@SetSeedSph
$LN5@SetSeedSph:

; 5533 : 	}
; 5534 : 
; 5535 : 	lpObj->ChaosLock = TRUE;

  000a0	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  000aa	33 f6		 xor	 esi, esi
  000ac	0f 1f 40 00	 npad	 4
$LL4@SetSeedSph:

; 5538 : 	{
; 5539 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  000b0	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000b6	03 ce		 add	 ecx, esi
  000b8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000bd	83 f8 01	 cmp	 eax, 1
  000c0	75 47		 jne	 SHORT $LN28@SetSeedSph

; 5540 : 		{
; 5541 : 			if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[n].m_Type) == TRUE &&

  000c2	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  000cd	0f bf 44 30 06	 movsx	 eax, WORD PTR [eax+esi+6]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  000d8	3c 01		 cmp	 al, 1
  000da	0f 85 ed 00 00
	00		 jne	 $LN7@SetSeedSph
  000e0	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000e6	0f b6 85 17 ff
	ff ff		 movzx	 eax, BYTE PTR _Pos$GSCopy$1$[ebp]
  000ed	03 ce		 add	 ecx, esi
  000ef	80 bc 08 c8 00
	00 00 fe	 cmp	 BYTE PTR [eax+ecx+200], 254 ; 000000feH
  000f7	0f 85 d0 00 00
	00		 jne	 $LN7@SetSeedSph

; 5542 : 				lpObj->pChaosBox[n].m_SocketOption[Pos] == (BYTE)-2)
; 5543 : 			{
; 5544 : 				iItemCount++;

  000fd	ff 85 04 ff ff
	ff		 inc	 DWORD PTR _iItemCount$1$[ebp]

; 5545 : 				lpItem = &lpObj->pChaosBox[n];

  00103	89 8d fc fe ff
	ff		 mov	 DWORD PTR _lpItem$1$[ebp], ecx
$LN28@SetSeedSph:
  00109	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
$LN30@SetSeedSph:
  0010f	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _iCreationCount$1$[ebp]
  00115	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@SetSeedSph:

; 5536 : 
; 5537 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0011b	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00121	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00127	7c 87		 jl	 SHORT $LL4@SetSeedSph

; 5563 : 			}
; 5564 : 		}
; 5565 : 	}
; 5566 : 
; 5567 : 
; 5568 : 	if( iOtherItemCount > 0 )

  00129	85 c0		 test	 eax, eax
  0012b	0f 8f d3 03 00
	00		 jg	 $LN17@SetSeedSph

; 5569 : 	{
; 5570 : 		pMsg.Result = 7;
; 5571 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5572 : 		lpObj->ChaosLock = FALSE;
; 5573 : 		return;
; 5574 : 	}
; 5575 : 
; 5576 : 	if( iItemCount != 1 ||
; 5577 : 		iSeedSphereCount != 1 ||
; 5578 : 		iChaosCount != 1 ||

  00131	83 bd 04 ff ff
	ff 01		 cmp	 DWORD PTR _iItemCount$1$[ebp], 1
  00138	0f 85 c6 03 00
	00		 jne	 $LN17@SetSeedSph
  0013e	83 bd 00 ff ff
	ff 01		 cmp	 DWORD PTR _iSeedSphereCount$1$[ebp], 1
  00145	0f 85 b9 03 00
	00		 jne	 $LN17@SetSeedSph
  0014b	83 f9 01	 cmp	 ecx, 1
  0014e	0f 85 b0 03 00
	00		 jne	 $LN17@SetSeedSph
  00154	3b d1		 cmp	 edx, ecx
  00156	0f 85 a8 03 00
	00		 jne	 $LN17@SetSeedSph

; 5584 : 		return;
; 5585 : 	}
; 5586 : 
; 5587 : 	if( g_SocketItem.CheckMountItem(lpItem,lpSeedSphere->m_Type,lpSeedSphere->m_Level) == FALSE )

  0015c	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00160	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00165	50		 push	 eax
  00166	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  0016a	50		 push	 eax
  0016b	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _lpItem$1$[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z ; CSocketItems::CheckMountItem
  00177	84 c0		 test	 al, al
  00179	0f 84 85 03 00
	00		 je	 $LN17@SetSeedSph

; 5588 : 	{
; 5589 : 		pMsg.Result = 7;
; 5590 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5591 : 		lpObj->ChaosLock = FALSE;
; 5592 : 		return;
; 5593 : 	}
; 5594 : 
; 5595 : 	iChaosTaxMoney = (int)((__int64)g_SphereSetMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0017f	ff 33		 push	 DWORD PTR [ebx]
  00181	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00186	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0018b	8b c8		 mov	 ecx, eax
  0018d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_SphereSetMoney@@3HA ; g_SphereSetMoney
  00192	f7 e9		 imul	 ecx
  00194	6a 00		 push	 0
  00196	6a 64		 push	 100			; 00000064H
  00198	52		 push	 edx
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 __alldiv

; 5596 : 
; 5597 : 	if( iChaosTaxMoney < 0 )

  0019f	33 c9		 xor	 ecx, ecx
  001a1	85 c0		 test	 eax, eax
  001a3	0f 48 c1	 cmovs	 eax, ecx
  001a6	89 85 10 ff ff
	ff		 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 5598 : 		iChaosTaxMoney = 0;
; 5599 : 
; 5600 : 	iMixNeedMoney = g_SphereSetMoney +iChaosTaxMoney;

  001ac	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?g_SphereSetMoney@@3HA ; g_SphereSetMoney
  001b2	89 85 04 ff ff
	ff		 mov	 DWORD PTR _iMixNeedMoney$1$[ebp], eax

; 5601 : 
; 5602 : 	if( lpObj->Money < iMixNeedMoney )

  001b8	39 83 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], eax
  001be	0f 8d 91 00 00
	00		 jge	 $LN20@SetSeedSph

; 5603 : 	{
; 5604 : 		pMsg.Result = 2;

  001c4	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 5605 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5606 : 		lpObj->ChaosLock = FALSE;
; 5607 : 		return;

  001c8	e9 3b 03 00 00	 jmp	 $LN31@SetSeedSph
$LN7@SetSeedSph:

; 5546 : 			}
; 5547 : 			else if( g_SocketItem.IsSeedSphereItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  001cd	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  001d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  001d8	0f bf 44 30 06	 movsx	 eax, WORD PTR [eax+esi+6]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?IsSeedSphereItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSeedSphereItem
  001e3	3c 01		 cmp	 al, 1
  001e5	75 13		 jne	 SHORT $LN9@SetSeedSph

; 5548 : 			{
; 5549 : 				iSeedSphereCount++;
; 5550 : 				lpSeedSphere = &lpObj->pChaosBox[n];

  001e7	8b bb 10 12 00
	00		 mov	 edi, DWORD PTR [ebx+4624]
  001ed	ff 85 00 ff ff
	ff		 inc	 DWORD PTR _iSeedSphereCount$1$[ebp]
  001f3	03 fe		 add	 edi, esi
  001f5	e9 0f ff ff ff	 jmp	 $LN28@SetSeedSph
$LN9@SetSeedSph:

; 5551 : 			}
; 5552 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  001fa	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00200	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  00205	0f b7 44 30 06	 movzx	 eax, WORD PTR [eax+esi+6]
  0020a	66 3b c1	 cmp	 ax, cx
  0020d	75 12		 jne	 SHORT $LN11@SetSeedSph

; 5553 : 			{
; 5554 : 				iChaosCount++;

  0020f	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
  00215	41		 inc	 ecx
  00216	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _iChaosCount$1$[ebp], ecx
  0021c	e9 ee fe ff ff	 jmp	 $LN30@SetSeedSph
$LN11@SetSeedSph:

; 5555 : 			}
; 5556 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )
; 5557 : 			{
; 5558 : 				iCreationCount++;

  00221	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _iCreationCount$1$[ebp]
  00227	b9 16 1c 00 00	 mov	 ecx, 7190		; 00001c16H
  0022c	66 3b c1	 cmp	 ax, cx

; 5559 : 			}
; 5560 : 			else

  0022f	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  00235	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
  0023b	75 0c		 jne	 SHORT $LN13@SetSeedSph

; 5555 : 			}
; 5556 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )
; 5557 : 			{
; 5558 : 				iCreationCount++;

  0023d	42		 inc	 edx
  0023e	89 95 10 ff ff
	ff		 mov	 DWORD PTR _iCreationCount$1$[ebp], edx

; 5559 : 			}
; 5560 : 			else

  00244	e9 d2 fe ff ff	 jmp	 $LN2@SetSeedSph
$LN13@SetSeedSph:

; 5561 : 			{
; 5562 : 				iOtherItemCount++;

  00249	40		 inc	 eax
  0024a	89 85 0c ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00250	e9 c6 fe ff ff	 jmp	 $LN2@SetSeedSph
$LN20@SetSeedSph:

; 5608 : 	}
; 5609 : 
; 5610 : 	LogChaosItem(lpObj,"SetSeedSphere");

  00255	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CGCDEDIJ@SetSeedSphere?$AA@
  00260	53		 push	 ebx
  00261	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5611 : 	BYTE btOption = 0;
; 5612 : 
; 5613 : 	btOption = g_SocketItem.GetSphereOption(lpSeedSphere->m_Type,lpSeedSphere->m_Level);

  00266	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  0026a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0026f	50		 push	 eax
  00270	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 ?GetSphereOption@CSocketItems@@QAEEGE@Z ; CSocketItems::GetSphereOption
  0027a	88 85 00 ff ff
	ff		 mov	 BYTE PTR _btOption$[ebp], al

; 5614 : 
; 5615 : 	if( btOption == (BYTE)-1 )

  00280	3c ff		 cmp	 al, 255			; 000000ffH
  00282	75 47		 jne	 SHORT $LN21@SetSeedSph

; 5616 : 	{
; 5617 : 		pMsg.Result = 7;
; 5618 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00284	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00288	50		 push	 eax
  00289	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0028c	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00290	50		 push	 eax
  00291	ff 33		 push	 DWORD PTR [ebx]
  00293	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5619 : 		lpObj->ChaosLock = FALSE;
; 5620 : 		LogAddTD("[%s][%s] Set Seed Mix Failed - SeedSphere is NULL",

  00298	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0029b	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  002a5	50		 push	 eax
  002a6	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  002a9	50		 push	 eax
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@BKFDMAJM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5S@
  002af	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002b5	83 c4 18	 add	 esp, 24			; 00000018H

; 5663 : }

  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002be	33 cd		 xor	 ecx, ebp
  002c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c5	8b e5		 mov	 esp, ebp
  002c7	5d		 pop	 ebp
  002c8	c2 08 00	 ret	 8
$LN21@SetSeedSph:

; 5621 : 			lpObj->AccountID,lpObj->Name);
; 5622 : 		return;
; 5623 : 	}
; 5624 : 
; 5625 : 	if( g_SocketItem.IsItemType(lpItem,btOption) == FALSE )

  002cb	8b bd 00 ff ff
	ff		 mov	 edi, DWORD PTR _btOption$[ebp]
  002d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  002d6	8b b5 fc fe ff
	ff		 mov	 esi, DWORD PTR _lpItem$1$[ebp]
  002dc	57		 push	 edi
  002dd	56		 push	 esi
  002de	e8 00 00 00 00	 call	 ?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z ; CSocketItems::IsItemType
  002e3	84 c0		 test	 al, al
  002e5	75 47		 jne	 SHORT $LN22@SetSeedSph

; 5626 : 	{
; 5627 : 		pMsg.Result = 7;
; 5628 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002e7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002eb	50		 push	 eax
  002ec	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002ef	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  002f3	50		 push	 eax
  002f4	ff 33		 push	 DWORD PTR [ebx]
  002f6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5629 : 		lpObj->ChaosLock = FALSE;
; 5630 : 		LogAddTD("[%s][%s] Set Seed Mix Failed - Wrong Item Type for Set Socket",

  002fb	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  002fe	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00308	50		 push	 eax
  00309	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0030c	50		 push	 eax
  0030d	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@KKBOJPIF@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Seed?5Mix?5Failed?5?9?5W@
  00312	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00318	83 c4 18	 add	 esp, 24			; 00000018H

; 5663 : }

  0031b	5f		 pop	 edi
  0031c	5e		 pop	 esi
  0031d	5b		 pop	 ebx
  0031e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00321	33 cd		 xor	 ecx, ebp
  00323	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00328	8b e5		 mov	 esp, ebp
  0032a	5d		 pop	 ebp
  0032b	c2 08 00	 ret	 8
$LN22@SetSeedSph:

; 5631 : 			lpObj->AccountID,lpObj->Name);
; 5632 : 		return;
; 5633 : 	}
; 5634 : 
; 5635 : 	lpObj->Money -= iMixNeedMoney;

  0032e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _iMixNeedMoney$1$[ebp]

; 5636 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00334	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00339	ff b5 10 ff ff
	ff		 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  0033f	29 83 cc 00 00
	00		 sub	 DWORD PTR [ebx+204], eax
  00345	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5637 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0034a	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  00350	ff 33		 push	 DWORD PTR [ebx]
  00352	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00357	83 c4 08	 add	 esp, 8

; 5638 : 
; 5639 : 	g_SocketItem.ItemSetSeedSphere(lpItem,btOption,Pos);

  0035a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0035f	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _Pos$GSCopy$[ebp]
  00365	57		 push	 edi
  00366	56		 push	 esi
  00367	e8 00 00 00 00	 call	 ?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z ; CSocketItems::ItemSetSeedSphere

; 5640 : 	float dur = (float)ItemGetDurability(lpItem->m_Type,lpItem->m_Level,lpItem->IsExtItem(),lpItem->IsSetItem());

  0036c	8b ce		 mov	 ecx, esi
  0036e	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  00373	50		 push	 eax
  00374	8b ce		 mov	 ecx, esi
  00376	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  0037b	50		 push	 eax
  0037c	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00380	50		 push	 eax
  00381	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  0038b	83 c4 10	 add	 esp, 16			; 00000010H

; 5641 : 
; 5642 : 	tmpItem.m_Number = lpItem->m_Number;
; 5643 : 	tmpItem.m_Level = lpItem->m_Level;
; 5644 : 	tmpItem.m_Durability = dur * lpItem->m_Durability / lpItem->m_BaseDurability;
; 5645 : 	tmpItem.m_JewelOfHarmonyOption = lpItem->m_JewelOfHarmonyOption;
; 5646 : 	tmpItem.m_bLOCKED = lpItem->m_bLOCKED;
; 5647 : 
; 5648 : 	tmpItem.Convert(lpItem->m_Type,lpItem->m_Option1,lpItem->m_Option2,lpItem->m_Option3,lpItem->m_NewOption,lpItem->m_SetOption,lpItem->m_ItemOptionEx,&lpItem->m_SocketOption[0],lpItem->m_SocketBonus,3);

  0038e	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _tmpItem$[ebp]
  00394	66 0f 6e c8	 movd	 xmm1, eax
  00398	8b 06		 mov	 eax, DWORD PTR [esi]
  0039a	89 85 18 ff ff
	ff		 mov	 DWORD PTR _tmpItem$[ebp], eax
  003a0	66 8b 46 08	 mov	 ax, WORD PTR [esi+8]
  003a4	66 89 85 20 ff
	ff ff		 mov	 WORD PTR _tmpItem$[ebp+8], ax
  003ab	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  003b0	0f 5b c9	 cvtdq2ps xmm1, xmm1
  003b3	6a 03		 push	 3
  003b5	f3 0f 59 c1	 mulss	 xmm0, xmm1
  003b9	f3 0f 5e 46 2c	 divss	 xmm0, DWORD PTR [esi+44]
  003be	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmpItem$[ebp+36], xmm0
  003c6	8a 86 c0 00 00
	00		 mov	 al, BYTE PTR [esi+192]
  003cc	88 45 d8	 mov	 BYTE PTR _tmpItem$[ebp+192], al
  003cf	8a 86 d1 00 00
	00		 mov	 al, BYTE PTR [esi+209]
  003d5	88 45 e9	 mov	 BYTE PTR _tmpItem$[ebp+209], al
  003d8	0f b6 86 c7 00
	00 00		 movzx	 eax, BYTE PTR [esi+199]
  003df	50		 push	 eax
  003e0	8d 86 c8 00 00
	00		 lea	 eax, DWORD PTR [esi+200]
  003e6	50		 push	 eax
  003e7	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  003ee	50		 push	 eax
  003ef	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  003f6	50		 push	 eax
  003f7	0f b6 86 93 00
	00 00		 movzx	 eax, BYTE PTR [esi+147]
  003fe	50		 push	 eax
  003ff	0f b6 86 92 00
	00 00		 movzx	 eax, BYTE PTR [esi+146]
  00406	50		 push	 eax
  00407	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  0040e	50		 push	 eax
  0040f	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  00416	50		 push	 eax
  00417	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  0041b	50		 push	 eax
  0041c	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 5649 : 	lpObj->ChaosLock = FALSE;
; 5650 : 
; 5651 : 	ItemByteConvert(&pMsg.ItemInfo[0],tmpItem);

  00421	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00427	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  00431	8b fc		 mov	 edi, esp
  00433	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  00436	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  0043b	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _tmpItem$[ebp]
  00441	f3 a5		 rep movsd
  00443	50		 push	 eax
  00444	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 5652 : 	ChaosBoxInit(lpObj);

  00449	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0044f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00455	53		 push	 ebx
  00456	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5653 : 	gObjChaosBoxInsertItemPos(lpObj->m_Index,tmpItem,0,-1);

  0045b	6a ff		 push	 -1
  0045d	6a 00		 push	 0
  0045f	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00465	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _tmpItem$[ebp]
  0046b	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00470	8b fc		 mov	 edi, esp
  00472	f3 a5		 rep movsd
  00474	ff 33		 push	 DWORD PTR [ebx]
  00476	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 5654 : 	gObjChaosItemSet(lpObj->m_Index,0,1);

  0047b	6a 01		 push	 1
  0047d	6a 00		 push	 0
  0047f	ff 33		 push	 DWORD PTR [ebx]
  00481	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet
  00486	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH

; 5655 : 	GCUserChaosBoxSend(lpObj,0);

  0048c	6a 00		 push	 0
  0048e	53		 push	 ebx
  0048f	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5656 : 
; 5657 : 	LogAddTD("[%s][%s] Set SeedSphere Mix Success - ItemInfo ( Name : %s, ItemCode : %d, Level : %d, SocketOption[%d,%d,%d,%d,%d], BonusOption : %d )",

  00494	0f b6 45 df	 movzx	 eax, BYTE PTR _tmpItem$[ebp+199]
  00498	50		 push	 eax
  00499	0f b6 45 e4	 movzx	 eax, BYTE PTR _tmpItem$[ebp+204]
  0049d	0f bf 8d 1e ff
	ff ff		 movsx	 ecx, WORD PTR _tmpItem$[ebp+6]
  004a4	50		 push	 eax
  004a5	0f b6 45 e3	 movzx	 eax, BYTE PTR _tmpItem$[ebp+203]
  004a9	50		 push	 eax
  004aa	0f b6 45 e2	 movzx	 eax, BYTE PTR _tmpItem$[ebp+202]
  004ae	50		 push	 eax
  004af	0f b6 45 e1	 movzx	 eax, BYTE PTR _tmpItem$[ebp+201]
  004b3	50		 push	 eax
  004b4	0f b6 45 e0	 movzx	 eax, BYTE PTR _tmpItem$[ebp+200]
  004b8	50		 push	 eax
  004b9	0f bf 85 20 ff
	ff ff		 movsx	 eax, WORD PTR _tmpItem$[ebp+8]
  004c0	50		 push	 eax
  004c1	6b c1 70	 imul	 eax, ecx, 112
  004c4	51		 push	 ecx
  004c5	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  004ca	50		 push	 eax
  004cb	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  004ce	50		 push	 eax
  004cf	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  004d2	50		 push	 eax
  004d3	68 00 00 00 00	 push	 OFFSET ??_C@_0II@KCLKEHBN@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5SeedSphere?5Mix?5Succ@
  004d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5658 : 		lpObj->AccountID,lpObj->Name,ItemAttribute[tmpItem.m_Type].Name,tmpItem.m_Type,tmpItem.m_Level,
; 5659 : 		tmpItem.m_SocketOption[0],tmpItem.m_SocketOption[1],tmpItem.m_SocketOption[2],tmpItem.m_SocketOption[3],tmpItem.m_SocketOption[4],
; 5660 : 		tmpItem.m_SocketBonus);
; 5661 : 
; 5662 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  004de	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  004e2	50		 push	 eax
  004e3	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  004e6	50		 push	 eax
  004e7	ff 33		 push	 DWORD PTR [ebx]
  004e9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  004ee	83 c4 44	 add	 esp, 68			; 00000044H

; 5663 : }

  004f1	5f		 pop	 edi
  004f2	5e		 pop	 esi
  004f3	5b		 pop	 ebx
  004f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f7	33 cd		 xor	 ecx, ebp
  004f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004fe	8b e5		 mov	 esp, ebp
  00500	5d		 pop	 ebp
  00501	c2 08 00	 ret	 8
$LN17@SetSeedSph:

; 5579 : 		iCreationCount != 1 )
; 5580 : 	{
; 5581 : 		pMsg.Result = 7;

  00504	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN31@SetSeedSph:

; 5582 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00508	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0050c	50		 push	 eax
  0050d	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00510	50		 push	 eax
  00511	ff 33		 push	 DWORD PTR [ebx]
  00513	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5583 : 		lpObj->ChaosLock = FALSE;

  00518	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
$LN29@SetSeedSph:

; 5663 : }

  00522	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00525	83 c4 0c	 add	 esp, 12			; 0000000cH
  00528	33 cd		 xor	 ecx, ebp
  0052a	5f		 pop	 edi
  0052b	5e		 pop	 esi
  0052c	5b		 pop	 ebx
  0052d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00532	8b e5		 mov	 esp, ebp
  00534	5d		 pop	 ebp
  00535	c2 08 00	 ret	 8
?SetSeedSphereMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CChaosBox::SetSeedSphereMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_tmpSphere$2 = -80					; size = 16
_this$1$ = -64						; size = 4
_iSeedCount$1$ = -60					; size = 4
_lpSphere$1$ = -56					; size = 4
_btLevel$3 = -56					; size = 1
_lpSeed$1$ = -52					; size = 4
_btOption$4 = -52					; size = 1
_iChaosTaxMoney$2$ = -48				; size = 4
_iSphereCount$1$ = -48					; size = 4
_iCreationCount$1$ = -44				; size = 4
_iChaosCount$1$ = -40					; size = 4
_iOtherItemCount$1$ = -36				; size = 4
_pMsg$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpObj$ = 8						; size = 4
?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SeedSphereCompositeMix, COMDAT
; _this$ = ecx

; 5372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d c0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5373 : 	int iSeedCount = 0;

  00031	33 c0		 xor	 eax, eax

; 5374 : 	int iSphereCount = 0;
; 5375 : 	int iOtherItemCount = 0;
; 5376 : 	int iChaosCount = 0;
; 5377 : 	int iCreationCount = 0;
; 5378 : 	int iChaosTaxMoney = 0;
; 5379 : 	int iMixNeedMoney = 0;
; 5380 : 	DWORD iItemValue = 0;
; 5381 : 	int iChaosMixRate = 0;
; 5382 : 	CItem* lpSeed = NULL;
; 5383 : 	CItem* lpSphere = NULL;
; 5384 : 
; 5385 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5386 : 
; 5387 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00033	6a 10		 push	 16			; 00000010H
  00035	89 45 c4	 mov	 DWORD PTR _iSeedCount$1$[ebp], eax
  00038	33 c9		 xor	 ecx, ecx
  0003a	89 45 d0	 mov	 DWORD PTR _iSphereCount$1$[ebp], eax
  0003d	33 db		 xor	 ebx, ebx
  0003f	89 45 dc	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00042	89 45 d8	 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  00045	89 45 d4	 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  00048	89 45 c8	 mov	 DWORD PTR _lpSphere$1$[ebp], eax
  0004b	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0004e	68 86 00 00 00	 push	 134			; 00000086H
  00053	50		 push	 eax
  00054	89 4d cc	 mov	 DWORD PTR _lpSeed$1$[ebp], ecx
  00057	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5388 : 	pMsg.Result = CB_ERROR;

  0005f	88 5d e3	 mov	 BYTE PTR _pMsg$[ebp+3], bl

; 5389 : 
; 5390 : 	lpObj->ChaosLock = TRUE;

  00062	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0006c	33 ff		 xor	 edi, edi
  0006e	66 90		 npad	 2
$LL4@SeedSphere:

; 5393 : 	{
; 5394 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00070	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00076	03 cf		 add	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 2f		 jne	 SHORT $LN30@SeedSphere

; 5395 : 		{
; 5396 : 			if( g_SocketItem.IsSeedItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  00082	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0008d	0f bf 44 38 06	 movsx	 eax, WORD PTR [eax+edi+6]
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ?IsSeedItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSeedItem
  00098	3c 01		 cmp	 al, 1

; 5397 : 			{
; 5398 : 				iSeedCount++;
; 5399 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  0009a	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000a0	0f 85 8f 00 00
	00		 jne	 $LN6@SeedSphere
  000a6	ff 45 c4	 inc	 DWORD PTR _iSeedCount$1$[ebp]
  000a9	03 c7		 add	 eax, edi
  000ab	89 45 cc	 mov	 DWORD PTR _lpSeed$1$[ebp], eax
$LN33@SeedSphere:

; 5403 : 			{
; 5404 : 				iSphereCount++;
; 5405 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000ae	03 58 78	 add	 ebx, DWORD PTR [eax+120]
$LN30@SeedSphere:
  000b1	8b 4d d8	 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
$LN32@SeedSphere:
  000b4	8b 55 d4	 mov	 edx, DWORD PTR _iCreationCount$1$[ebp]
  000b7	8b 45 dc	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@SeedSphere:

; 5391 : 
; 5392 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000ba	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000c0	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000c6	7c a8		 jl	 SHORT $LL4@SeedSphere

; 5419 : 			}
; 5420 : 		}
; 5421 : 	}
; 5422 : 
; 5423 : 	if( iOtherItemCount > 0 )

  000c8	85 c0		 test	 eax, eax
  000ca	0f 8f 47 02 00
	00		 jg	 $LN16@SeedSphere

; 5424 : 	{
; 5425 : 		pMsg.Result = 7;
; 5426 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5427 : 		lpObj->ChaosLock = FALSE;
; 5428 : 		return;
; 5429 : 	}
; 5430 : 
; 5431 : 	if( iSeedCount != 1 ||
; 5432 : 		iSphereCount != 1 ||
; 5433 : 		iChaosCount != 1 ||

  000d0	83 7d c4 01	 cmp	 DWORD PTR _iSeedCount$1$[ebp], 1
  000d4	0f 85 3d 02 00
	00		 jne	 $LN16@SeedSphere
  000da	83 7d d0 01	 cmp	 DWORD PTR _iSphereCount$1$[ebp], 1
  000de	0f 85 33 02 00
	00		 jne	 $LN16@SeedSphere
  000e4	83 f9 01	 cmp	 ecx, 1
  000e7	0f 85 2a 02 00
	00		 jne	 $LN16@SeedSphere
  000ed	3b d1		 cmp	 edx, ecx
  000ef	0f 85 22 02 00
	00		 jne	 $LN16@SeedSphere

; 5439 : 		return;
; 5440 : 	}
; 5441 : 
; 5442 : 	iChaosTaxMoney = (int)((__int64)g_SphereCompositeMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000f5	ff 36		 push	 DWORD PTR [esi]
  000f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000fc	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00101	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_SphereCompositeMoney@@3HA ; g_SphereCompositeMoney
  00107	8b c8		 mov	 ecx, eax
  00109	8b c7		 mov	 eax, edi
  0010b	f7 e9		 imul	 ecx
  0010d	6a 00		 push	 0
  0010f	6a 64		 push	 100			; 00000064H
  00111	52		 push	 edx
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 __alldiv

; 5443 : 
; 5444 : 	if( iChaosTaxMoney < 0 )

  00118	33 c9		 xor	 ecx, ecx
  0011a	85 c0		 test	 eax, eax
  0011c	0f 48 c1	 cmovs	 eax, ecx

; 5445 : 		iChaosTaxMoney = 0;
; 5446 : 
; 5447 : 	iMixNeedMoney = g_SphereCompositeMoney + iChaosTaxMoney;

  0011f	03 f8		 add	 edi, eax
  00121	89 45 d0	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 5448 : 
; 5449 : 	if( lpObj->Money < iMixNeedMoney )

  00124	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0012a	7d 70		 jge	 SHORT $LN18@SeedSphere

; 5450 : 	{
; 5451 : 		pMsg.Result = 2;

  0012c	c6 45 e3 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 5452 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5453 : 		lpObj->ChaosLock = FALSE;
; 5454 : 		return;

  00130	e9 e6 01 00 00	 jmp	 $LN34@SeedSphere
$LN6@SeedSphere:

; 5400 : 				lpSeed = &lpObj->pChaosBox[n];
; 5401 : 			}
; 5402 : 			else if( g_SocketItem.IsSphereItem(lpObj->pChaosBox[n].m_Type) == TRUE )

  00135	0f bf 44 38 06	 movsx	 eax, WORD PTR [eax+edi+6]
  0013a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ?IsSphereItem@CSocketItems@@QAEEH@Z ; CSocketItems::IsSphereItem
  00145	3c 01		 cmp	 al, 1

; 5403 : 			{
; 5404 : 				iSphereCount++;
; 5405 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  00147	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0014d	75 0d		 jne	 SHORT $LN8@SeedSphere
  0014f	ff 45 d0	 inc	 DWORD PTR _iSphereCount$1$[ebp]
  00152	03 c7		 add	 eax, edi
  00154	89 45 c8	 mov	 DWORD PTR _lpSphere$1$[ebp], eax

; 5406 : 				lpSphere = &lpObj->pChaosBox[n];

  00157	e9 52 ff ff ff	 jmp	 $LN33@SeedSphere
$LN8@SeedSphere:

; 5407 : 			}
; 5408 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  0015c	0f b7 44 38 06	 movzx	 eax, WORD PTR [eax+edi+6]
  00161	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  00166	66 3b c1	 cmp	 ax, cx
  00169	75 0c		 jne	 SHORT $LN10@SeedSphere

; 5409 : 			{
; 5410 : 				iChaosCount++;

  0016b	8b 4d d8	 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
  0016e	41		 inc	 ecx
  0016f	89 4d d8	 mov	 DWORD PTR _iChaosCount$1$[ebp], ecx
  00172	e9 3d ff ff ff	 jmp	 $LN32@SeedSphere
$LN10@SeedSphere:

; 5411 : 			}
; 5412 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )
; 5413 : 			{
; 5414 : 				iCreationCount++;

  00177	8b 55 d4	 mov	 edx, DWORD PTR _iCreationCount$1$[ebp]
  0017a	b9 16 1c 00 00	 mov	 ecx, 7190		; 00001c16H
  0017f	66 3b c1	 cmp	 ax, cx

; 5415 : 			}
; 5416 : 			else

  00182	8b 45 dc	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  00185	8b 4d d8	 mov	 ecx, DWORD PTR _iChaosCount$1$[ebp]
  00188	75 09		 jne	 SHORT $LN12@SeedSphere

; 5411 : 			}
; 5412 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )
; 5413 : 			{
; 5414 : 				iCreationCount++;

  0018a	42		 inc	 edx
  0018b	89 55 d4	 mov	 DWORD PTR _iCreationCount$1$[ebp], edx

; 5415 : 			}
; 5416 : 			else

  0018e	e9 27 ff ff ff	 jmp	 $LN2@SeedSphere
$LN12@SeedSphere:

; 5417 : 			{
; 5418 : 				iOtherItemCount++;

  00193	40		 inc	 eax
  00194	89 45 dc	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00197	e9 1e ff ff ff	 jmp	 $LN2@SeedSphere
$LN18@SeedSphere:

; 5455 : 	}
; 5456 : 
; 5457 : 	LogChaosItem(lpObj,"SeedSphereComposite");

  0019c	8b 4d c0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GFFNMAOC@SeedSphereComposite?$AA@
  001a4	56		 push	 esi
  001a5	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5458 : 
; 5459 : 	iChaosMixRate = 80 + (iItemValue / 200000);
; 5460 : 
; 5461 : 	if( iChaosMixRate > 90 )
; 5462 : 		iChaosMixRate = 90;
; 5463 : 
; 5464 : 	lpObj->Money -= iMixNeedMoney;
; 5465 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001aa	ff 75 d0	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  001ad	b8 8f 58 8b 4f	 mov	 eax, 1334532239		; 4f8b588fH
  001b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001b7	f7 e3		 mul	 ebx
  001b9	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  001be	2b da		 sub	 ebx, edx
  001c0	d1 eb		 shr	 ebx, 1
  001c2	03 da		 add	 ebx, edx
  001c4	c1 eb 11	 shr	 ebx, 17			; 00000011H
  001c7	83 c3 50	 add	 ebx, 80			; 00000050H
  001ca	3b d8		 cmp	 ebx, eax
  001cc	0f 4f d8	 cmovg	 ebx, eax
  001cf	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001d5	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5466 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  001da	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001e0	ff 36		 push	 DWORD PTR [esi]
  001e2	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001e7	83 c4 08	 add	 esp, 8

; 5467 : 
; 5468 : 
; 5469 : 	if( rand()%100 > iChaosMixRate )

  001ea	e8 00 00 00 00	 call	 _rand
  001ef	99		 cdq
  001f0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001f5	f7 f9		 idiv	 ecx
  001f7	3b d3		 cmp	 edx, ebx
  001f9	7e 2c		 jle	 SHORT $LN20@SeedSphere

; 5470 : 	{
; 5471 : 		ChaosBoxInit(lpObj);

  001fb	8b 4d c0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001fe	56		 push	 esi
  001ff	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5472 : 		GCUserChaosBoxSend(lpObj,0);

  00204	6a 00		 push	 0
  00206	56		 push	 esi
  00207	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5473 : 		LogAddTD("[%s][%s] SeedSphere Composite Mix Failed.",lpObj->AccountID,lpObj->Name);

  0020c	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0020f	50		 push	 eax
  00210	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00213	50		 push	 eax
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@CENILOLB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0021f	83 c4 14	 add	 esp, 20			; 00000014H

; 5474 : 	}
; 5475 : 	else

  00222	e9 07 01 00 00	 jmp	 $LN21@SeedSphere
$LN20@SeedSphere:

; 5476 : 	{
; 5477 : 		BYTE btOption = 0;
; 5478 : 		BYTE btLevel = 0;
; 5479 : 
; 5480 : 		_SOCKET_SPHERE_OPTION tmpSphere;

  00227	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$2[ebp]
  0022a	e8 00 00 00 00	 call	 ??0_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION

; 5481 : 
; 5482 : 		btOption = g_SocketItem.GetSeedOption(lpSeed->m_Type,lpSeed->m_Level);

  0022f	8b 4d cc	 mov	 ecx, DWORD PTR _lpSeed$1$[ebp]
  00232	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00239	0f b6 41 08	 movzx	 eax, BYTE PTR [ecx+8]
  0023d	50		 push	 eax
  0023e	0f bf 41 06	 movsx	 eax, WORD PTR [ecx+6]
  00242	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00247	50		 push	 eax
  00248	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEEHE@Z ; CSocketItems::GetSeedOption
  0024d	88 45 cc	 mov	 BYTE PTR _btOption$4[ebp], al

; 5483 : 		btLevel = g_SocketItem.GetSphereLevel(lpSphere->m_Type);

  00250	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00255	8b 45 c8	 mov	 eax, DWORD PTR _lpSphere$1$[ebp]
  00258	0f bf 40 06	 movsx	 eax, WORD PTR [eax+6]
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ?GetSphereLevel@CSocketItems@@QAEEH@Z ; CSocketItems::GetSphereLevel
  00262	88 45 c8	 mov	 BYTE PTR _btLevel$3[ebp], al

; 5484 : 
; 5485 : 		g_SocketItem.IsOptionSet(&tmpSphere,btOption,btLevel);

  00265	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  0026a	ff 75 c8	 push	 DWORD PTR _btLevel$3[ebp]
  0026d	8d 45 b0	 lea	 eax, DWORD PTR _tmpSphere$2[ebp]
  00270	ff 75 cc	 push	 DWORD PTR _btOption$4[ebp]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ; CSocketItems::IsOptionSet

; 5486 : 
; 5487 : 		if( tmpSphere.SeedItem != 0 )

  00279	8b 4d b4	 mov	 ecx, DWORD PTR _tmpSphere$2[ebp+4]
  0027c	85 c9		 test	 ecx, ecx
  0027e	74 66		 je	 SHORT $LN22@SeedSphere

; 5488 : 		{
; 5489 : 			pMsg.Result = TRUE;
; 5490 : 
; 5491 : 			ItemSerialCreateSend(lpObj->m_Index,0xFF,0,0,tmpSphere.SeedItem,tmpSphere.btIndex,1,0,0,0,lpObj->m_Index,0,0);

  00280	8b 06		 mov	 eax, DWORD PTR [esi]
  00282	6a 00		 push	 0
  00284	6a 00		 push	 0
  00286	6a 00		 push	 0
  00288	6a 00		 push	 0
  0028a	50		 push	 eax
  0028b	6a 00		 push	 0
  0028d	6a 00		 push	 0
  0028f	6a 00		 push	 0
  00291	6a 01		 push	 1
  00293	ff 75 b8	 push	 DWORD PTR _tmpSphere$2[ebp+8]
  00296	c6 45 e3 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  0029a	51		 push	 ecx
  0029b	6a 00		 push	 0
  0029d	6a 00		 push	 0
  0029f	68 ff 00 00 00	 push	 255			; 000000ffH
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5492 : 			gObjInventoryCommit(lpObj->m_Index);

  002aa	ff 36		 push	 DWORD PTR [esi]
  002ac	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5493 : 			LogAddTD("[%s][%s] SeedSphere Composite Mix Success - SeedSphere Info ( Index : %d, Type : %d, Level : %d, ItemCode : %d )",

  002b1	0f b6 45 bc	 movzx	 eax, BYTE PTR _tmpSphere$2[ebp+12]
  002b5	83 c4 40	 add	 esp, 64			; 00000040H
  002b8	ff 75 b4	 push	 DWORD PTR _tmpSphere$2[ebp+4]
  002bb	50		 push	 eax
  002bc	0f b6 45 b2	 movzx	 eax, BYTE PTR _tmpSphere$2[ebp+2]
  002c0	50		 push	 eax
  002c1	0f b6 45 b0	 movzx	 eax, BYTE PTR _tmpSphere$2[ebp]
  002c5	50		 push	 eax
  002c6	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002c9	83 c6 52	 add	 esi, 82			; 00000052H
  002cc	50		 push	 eax
  002cd	56		 push	 esi
  002ce	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@BGNJLNEH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002d9	83 c4 1c	 add	 esp, 28			; 0000001cH

; 5494 : 				lpObj->AccountID,lpObj->Name,tmpSphere.btOptionId,tmpSphere.btGroup,tmpSphere.btLevel,tmpSphere.SeedItem);
; 5495 : 			return;

  002dc	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$2[ebp]
  002df	e8 00 00 00 00	 call	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
  002e4	eb 52		 jmp	 SHORT $LN1@SeedSphere
$LN22@SeedSphere:

; 5496 : 		}
; 5497 : 		else
; 5498 : 		{
; 5499 : 			ChaosBoxInit(lpObj);

  002e6	8b 4d c0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002e9	56		 push	 esi
  002ea	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5500 : 			GCUserChaosBoxSend(lpObj,0);

  002ef	6a 00		 push	 0
  002f1	56		 push	 esi
  002f2	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5501 : 			LogAddTD("[%s][%s] SeedSphere Composite Mix Failed - SeedSphere Data is NULL",

  002f7	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002fa	50		 push	 eax
  002fb	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002fe	50		 push	 eax
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@CPANCMOB@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SeedSphere?5Composite?5Mi@
  00304	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0030a	83 c4 14	 add	 esp, 20			; 00000014H

; 5502 : 				lpObj->AccountID,lpObj->Name);
; 5503 : 		}
; 5504 : 	}

  0030d	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$2[ebp]
  00310	e8 00 00 00 00	 call	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION

; 5505 : 
; 5506 : 	lpObj->ChaosLock = FALSE;

  00315	eb 17		 jmp	 SHORT $LN21@SeedSphere
$LN16@SeedSphere:

; 5434 : 		iCreationCount != 1 )
; 5435 : 	{
; 5436 : 		pMsg.Result = 7;

  00317	c6 45 e3 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN34@SeedSphere:

; 5437 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0031b	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0031f	50		 push	 eax
  00320	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00323	50		 push	 eax
  00324	ff 36		 push	 DWORD PTR [esi]
  00326	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN21@SeedSphere:

; 5438 : 		lpObj->ChaosLock = FALSE;

  0032e	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN1@SeedSphere:

; 5507 : }

  00338	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0033b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00342	59		 pop	 ecx
  00343	5f		 pop	 edi
  00344	5e		 pop	 esi
  00345	5b		 pop	 ebx
  00346	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00349	33 cd		 xor	 ecx, ebp
  0034b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR _tmpSphere$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
__ehhandler$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SeedSphereCompositeMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SeedSphereCompositeMix
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -72						; size = 4
_SeedRate$1 = -72					; size = 1
_iCreationPos$1$ = -68					; size = 4
_iChaosPos$1$ = -64					; size = 4
_iHarmonyPos$1$ = -60					; size = 4
_iExcItemPos$1$ = -56					; size = 4
_iAncItemPos$1$ = -52					; size = 4
_iCreationCount$1$ = -48				; size = 4
_iAncItemCount$1$ = -44					; size = 4
_iExcItemCount$1$ = -40					; size = 4
_iItemValue$1$ = -36					; size = 4
_iChaosCount$1$ = -32					; size = 4
_iHarmonyCount$1$ = -28					; size = 4
_iOtherItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::SeedExtractMix, COMDAT
; _this$ = ecx

; 5213 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5214 : 	int iExcItemCount = 0;

  00010	33 c0		 xor	 eax, eax
  00012	89 4d b8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5215 : 	int iAncItemCount = 0;
; 5216 : 	int iHarmonyCount = 0;
; 5217 : 	int iChaosCount = 0;
; 5218 : 	int iCreationCount = 0;
; 5219 : 	int iOtherItemCount = 0;
; 5220 : 	int iChaosMixRate = 0;
; 5221 : 	DWORD iItemValue = 0;

  0001a	33 c9		 xor	 ecx, ecx
  0001c	57		 push	 edi

; 5222 : 	int iMixNeedMoney = 0;
; 5223 : 	int iChaosTaxMoney = 0;
; 5224 : 	int iAncItemPos = 0;
; 5225 : 	int iExcItemPos = 0;
; 5226 : 	int iHarmonyPos = 0;
; 5227 : 	int iChaosPos = 0;
; 5228 : 	int iCreationPos = 0;
; 5229 : 
; 5230 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5231 : 
; 5232 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001d	6a 10		 push	 16			; 00000010H
  0001f	89 45 d8	 mov	 DWORD PTR _iExcItemCount$1$[ebp], eax
  00022	89 45 d4	 mov	 DWORD PTR _iAncItemCount$1$[ebp], eax
  00025	89 45 e4	 mov	 DWORD PTR _iHarmonyCount$1$[ebp], eax
  00028	89 45 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  0002b	89 45 d0	 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  0002e	89 45 e8	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00031	89 45 cc	 mov	 DWORD PTR _iAncItemPos$1$[ebp], eax
  00034	89 45 c8	 mov	 DWORD PTR _iExcItemPos$1$[ebp], eax
  00037	89 45 c4	 mov	 DWORD PTR _iHarmonyPos$1$[ebp], eax
  0003a	89 45 c0	 mov	 DWORD PTR _iChaosPos$1$[ebp], eax
  0003d	89 45 bc	 mov	 DWORD PTR _iCreationPos$1$[ebp], eax
  00040	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00043	68 86 00 00 00	 push	 134			; 00000086H
  00048	50		 push	 eax
  00049	89 4d dc	 mov	 DWORD PTR _iItemValue$1$[ebp], ecx
  0004c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5233 : 	pMsg.Result = CB_ERROR;

  00054	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5234 : 
; 5235 : 	lpObj->ChaosLock = TRUE;
; 5236 : 
; 5237 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00058	33 db		 xor	 ebx, ebx
  0005a	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00064	33 ff		 xor	 edi, edi
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@SeedExtrac:

; 5238 : 	{
; 5239 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00070	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00076	03 cf		 add	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 46		 jne	 SHORT $LN31@SeedExtrac

; 5240 : 		{
; 5241 : 			if( lpObj->pChaosBox[n].IsExtItem() == TRUE && lpObj->pChaosBox[n].m_Level >= 4 &&

  00082	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00088	03 cf		 add	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  0008f	83 f8 01	 cmp	 eax, 1
  00092	0f 85 c1 00 00
	00		 jne	 $LN6@SeedExtrac
  00098	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0009e	66 83 7c 38 08
	04		 cmp	 WORD PTR [eax+edi+8], 4
  000a4	0f 8c af 00 00
	00		 jl	 $LN6@SeedExtrac
  000aa	80 bc 38 d1 00
	00 00 00	 cmp	 BYTE PTR [eax+edi+209], 0
  000b2	0f 85 a1 00 00
	00		 jne	 $LN6@SeedExtrac

; 5242 : 				lpObj->pChaosBox[n].m_bLOCKED == FALSE )
; 5243 : 			{
; 5244 : 				iExcItemCount++;
; 5245 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000b8	8b 4d dc	 mov	 ecx, DWORD PTR _iItemValue$1$[ebp]
  000bb	ff 45 d8	 inc	 DWORD PTR _iExcItemCount$1$[ebp]
  000be	03 4c 38 78	 add	 ecx, DWORD PTR [eax+edi+120]
  000c2	89 4d dc	 mov	 DWORD PTR _iItemValue$1$[ebp], ecx

; 5246 : 				iExcItemPos = n;

  000c5	89 5d c8	 mov	 DWORD PTR _iExcItemPos$1$[ebp], ebx
$LN31@SeedExtrac:
  000c8	8b 4d e4	 mov	 ecx, DWORD PTR _iHarmonyCount$1$[ebp]
$LN32@SeedExtrac:
  000cb	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
$LN33@SeedExtrac:
  000ce	8b 45 e8	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@SeedExtrac:

; 5234 : 
; 5235 : 	lpObj->ChaosLock = TRUE;
; 5236 : 
; 5237 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000d1	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000d7	43		 inc	 ebx
  000d8	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000de	7c 90		 jl	 SHORT $LL4@SeedExtrac

; 5273 : 			}
; 5274 : 		}
; 5275 : 	}
; 5276 : 
; 5277 : 	if( iOtherItemCount > 0 )

  000e0	85 c0		 test	 eax, eax
  000e2	0f 8f 48 03 00
	00		 jg	 $LN18@SeedExtrac

; 5278 : 	{
; 5279 : 		pMsg.Result = 7;
; 5280 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5281 : 		lpObj->ChaosLock = FALSE;
; 5282 : 		return;
; 5283 : 	}
; 5284 : 
; 5285 : 	if( iExcItemCount != 1 ||
; 5286 : 		iAncItemCount != 1 ||
; 5287 : 		iHarmonyCount != 1 ||
; 5288 : 		iChaosCount != 1 ||

  000e8	83 7d d8 01	 cmp	 DWORD PTR _iExcItemCount$1$[ebp], 1
  000ec	0f 85 3e 03 00
	00		 jne	 $LN18@SeedExtrac
  000f2	83 7d d4 01	 cmp	 DWORD PTR _iAncItemCount$1$[ebp], 1
  000f6	0f 85 34 03 00
	00		 jne	 $LN18@SeedExtrac
  000fc	83 f9 01	 cmp	 ecx, 1
  000ff	0f 85 2b 03 00
	00		 jne	 $LN18@SeedExtrac
  00105	3b d1		 cmp	 edx, ecx
  00107	0f 85 23 03 00
	00		 jne	 $LN18@SeedExtrac
  0010d	39 4d d0	 cmp	 DWORD PTR _iCreationCount$1$[ebp], ecx
  00110	0f 85 1a 03 00
	00		 jne	 $LN18@SeedExtrac

; 5293 : 		lpObj->ChaosLock = FALSE;
; 5294 : 		return;
; 5295 : 	}
; 5296 : 
; 5297 : 	iChaosTaxMoney = (int)((__int64)g_SeedExtractMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00116	ff 36		 push	 DWORD PTR [esi]
  00118	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0011d	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00122	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_SeedExtractMoney@@3HA ; g_SeedExtractMoney
  00128	8b c8		 mov	 ecx, eax
  0012a	8b c7		 mov	 eax, edi
  0012c	f7 e9		 imul	 ecx
  0012e	6a 00		 push	 0
  00130	6a 64		 push	 100			; 00000064H
  00132	52		 push	 edx
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 __alldiv
  00139	8b d8		 mov	 ebx, eax

; 5298 : 
; 5299 : 	if( iChaosTaxMoney < 0 )

  0013b	33 c0		 xor	 eax, eax
  0013d	85 db		 test	 ebx, ebx
  0013f	0f 48 d8	 cmovs	 ebx, eax

; 5300 : 		iChaosTaxMoney = 0;
; 5301 : 
; 5302 : 	iMixNeedMoney = g_SeedExtractMoney + iChaosTaxMoney;

  00142	03 fb		 add	 edi, ebx

; 5303 : 
; 5304 : 	if( lpObj->Money < iMixNeedMoney )

  00144	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0014a	0f 8d ab 00 00
	00		 jge	 $LN20@SeedExtrac

; 5305 : 	{
; 5306 : 		pMsg.Result = 2;

  00150	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 5307 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5308 : 		lpObj->ChaosLock = FALSE;
; 5309 : 		return;

  00154	e9 db 02 00 00	 jmp	 $LN34@SeedExtrac
$LN6@SeedExtrac:

; 5247 : 			}
; 5248 : 			else if( lpObj->pChaosBox[n].IsSetItem() && lpObj->pChaosBox[n].m_Level >= 4 &&

  00159	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0015f	03 cf		 add	 ecx, edi
  00161	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  00166	85 c0		 test	 eax, eax
  00168	74 2d		 je	 SHORT $LN8@SeedExtrac
  0016a	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00170	66 83 7c 38 08
	04		 cmp	 WORD PTR [eax+edi+8], 4
  00176	7c 1f		 jl	 SHORT $LN8@SeedExtrac
  00178	80 bc 38 d1 00
	00 00 00	 cmp	 BYTE PTR [eax+edi+209], 0
  00180	75 15		 jne	 SHORT $LN8@SeedExtrac

; 5249 : 				lpObj->pChaosBox[n].m_bLOCKED == FALSE )
; 5250 : 			{
; 5251 : 				iAncItemCount++;
; 5252 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  00182	8b 4d dc	 mov	 ecx, DWORD PTR _iItemValue$1$[ebp]
  00185	ff 45 d4	 inc	 DWORD PTR _iAncItemCount$1$[ebp]
  00188	03 4c 38 78	 add	 ecx, DWORD PTR [eax+edi+120]
  0018c	89 4d dc	 mov	 DWORD PTR _iItemValue$1$[ebp], ecx

; 5253 : 				iAncItemPos = n;

  0018f	89 5d cc	 mov	 DWORD PTR _iAncItemPos$1$[ebp], ebx
  00192	e9 31 ff ff ff	 jmp	 $LN31@SeedExtrac
$LN8@SeedExtrac:

; 5254 : 			}
; 5255 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,42) )

  00197	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0019d	b9 2a 1c 00 00	 mov	 ecx, 7210		; 00001c2aH
  001a2	0f b7 44 38 06	 movzx	 eax, WORD PTR [eax+edi+6]
  001a7	66 3b c1	 cmp	 ax, cx
  001aa	75 0f		 jne	 SHORT $LN10@SeedExtrac

; 5256 : 			{
; 5257 : 				iHarmonyCount++;

  001ac	8b 4d e4	 mov	 ecx, DWORD PTR _iHarmonyCount$1$[ebp]
  001af	41		 inc	 ecx

; 5258 : 				iHarmonyPos = n;

  001b0	89 5d c4	 mov	 DWORD PTR _iHarmonyPos$1$[ebp], ebx
  001b3	89 4d e4	 mov	 DWORD PTR _iHarmonyCount$1$[ebp], ecx
  001b6	e9 10 ff ff ff	 jmp	 $LN32@SeedExtrac
$LN10@SeedExtrac:

; 5259 : 			}
; 5260 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )
; 5261 : 			{
; 5262 : 				iChaosCount++;

  001bb	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  001be	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  001c3	66 3b c1	 cmp	 ax, cx
  001c6	75 0f		 jne	 SHORT $LN12@SeedExtrac

; 5263 : 				iChaosPos = n;

  001c8	8b 4d e4	 mov	 ecx, DWORD PTR _iHarmonyCount$1$[ebp]
  001cb	42		 inc	 edx
  001cc	89 55 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], edx
  001cf	89 5d c0	 mov	 DWORD PTR _iChaosPos$1$[ebp], ebx
  001d2	e9 f7 fe ff ff	 jmp	 $LN33@SeedExtrac
$LN12@SeedExtrac:

; 5264 : 			}
; 5265 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )

  001d7	b9 16 1c 00 00	 mov	 ecx, 7190		; 00001c16H
  001dc	66 3b c1	 cmp	 ax, cx

; 5269 : 			}
; 5270 : 			else

  001df	8b 45 e8	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  001e2	8b 4d e4	 mov	 ecx, DWORD PTR _iHarmonyCount$1$[ebp]
  001e5	75 0b		 jne	 SHORT $LN14@SeedExtrac

; 5266 : 			{
; 5267 : 				iCreationCount++;
; 5268 : 				iCreationPos = n;

  001e7	ff 45 d0	 inc	 DWORD PTR _iCreationCount$1$[ebp]
  001ea	89 5d bc	 mov	 DWORD PTR _iCreationPos$1$[ebp], ebx

; 5269 : 			}
; 5270 : 			else

  001ed	e9 df fe ff ff	 jmp	 $LN2@SeedExtrac
$LN14@SeedExtrac:

; 5271 : 			{
; 5272 : 				iOtherItemCount++;

  001f2	40		 inc	 eax
  001f3	89 45 e8	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  001f6	e9 d6 fe ff ff	 jmp	 $LN2@SeedExtrac
$LN20@SeedExtrac:

; 5310 : 	}
; 5311 : 
; 5312 : 	LogChaosItem(lpObj, "SeedExtract");

  001fb	8b 4d b8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PHAOGDNK@SeedExtract?$AA@
  00203	56		 push	 esi
  00204	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 5313 : 	lpObj->Money -= iMixNeedMoney;

  00209	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi

; 5314 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00214	53		 push	 ebx
  00215	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 5315 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0021a	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00220	ff 36		 push	 DWORD PTR [esi]
  00222	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5316 : 
; 5317 : 	iChaosMixRate = 80 + (iItemValue / 2000000);

  00227	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  0022c	83 c4 08	 add	 esp, 8
  0022f	f7 65 dc	 mul	 DWORD PTR _iItemValue$1$[ebp]

; 5318 : 
; 5319 : 	if( iChaosMixRate > 90 )

  00232	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH
  00237	8b fa		 mov	 edi, edx
  00239	c1 ef 13	 shr	 edi, 19			; 00000013H
  0023c	83 c7 50	 add	 edi, 80			; 00000050H
  0023f	3b f8		 cmp	 edi, eax
  00241	0f 4f f8	 cmovg	 edi, eax

; 5320 : 		iChaosMixRate = 90;
; 5321 : 
; 5322 : 	if( rand()%100 > iChaosMixRate )

  00244	e8 00 00 00 00	 call	 _rand
  00249	99		 cdq
  0024a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0024f	f7 f9		 idiv	 ecx
  00251	3b d7		 cmp	 edx, edi
  00253	0f 8e b8 00 00
	00		 jle	 $LN22@SeedExtrac

; 5323 : 	{
; 5324 : 		lpObj->pChaosBox[iAncItemPos].m_Level -= rand()%3;

  00259	69 7d cc d4 00
	00 00		 imul	 edi, DWORD PTR _iAncItemPos$1$[ebp], 212
  00260	03 be 10 12 00
	00		 add	 edi, DWORD PTR [esi+4624]
  00266	e8 00 00 00 00	 call	 _rand
  0026b	99		 cdq
  0026c	bb 03 00 00 00	 mov	 ebx, 3
  00271	f7 fb		 idiv	 ebx
  00273	66 29 57 08	 sub	 WORD PTR [edi+8], dx

; 5325 : 		lpObj->pChaosBox[iExcItemPos].m_Level -= rand()%3;

  00277	69 7d c8 d4 00
	00 00		 imul	 edi, DWORD PTR _iExcItemPos$1$[ebp], 212
  0027e	03 be 10 12 00
	00		 add	 edi, DWORD PTR [esi+4624]
  00284	e8 00 00 00 00	 call	 _rand
  00289	99		 cdq
  0028a	f7 fb		 idiv	 ebx

; 5326 : 		lpObj->pChaosBox[iHarmonyPos].Clear();

  0028c	69 4d c4 d4 00
	00 00		 imul	 ecx, DWORD PTR _iHarmonyPos$1$[ebp], 212
  00293	66 29 57 08	 sub	 WORD PTR [edi+8], dx
  00297	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  0029d	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5327 : 		lpObj->pChaosBox[iChaosPos].Clear();

  002a2	69 4d c0 d4 00
	00 00		 imul	 ecx, DWORD PTR _iChaosPos$1$[ebp], 212
  002a9	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  002af	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5328 : 		lpObj->pChaosBox[iCreationPos].Clear();

  002b4	69 4d bc d4 00
	00 00		 imul	 ecx, DWORD PTR _iCreationPos$1$[ebp], 212
  002bb	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  002c1	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5329 : 
; 5330 : 		GCUserChaosBoxSend(lpObj,0);

  002c6	6a 00		 push	 0
  002c8	56		 push	 esi
  002c9	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5331 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002ce	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002d2	50		 push	 eax
  002d3	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d6	50		 push	 eax
  002d7	ff 36		 push	 DWORD PTR [esi]
  002d9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5332 : 		lpObj->ChaosLock = FALSE;
; 5333 : 
; 5334 : 		LogAddTD("[%s][%s] Seed Extract Mix Failed.",lpObj->AccountID,lpObj->Name);

  002de	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002e1	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002eb	50		 push	 eax
  002ec	83 c6 52	 add	 esi, 82			; 00000052H
  002ef	56		 push	 esi
  002f0	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FJMAMNGP@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002fb	83 c4 20	 add	 esp, 32			; 00000020H
  002fe	5f		 pop	 edi
  002ff	5e		 pop	 esi
  00300	5b		 pop	 ebx

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  00301	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00304	33 cd		 xor	 ecx, ebp
  00306	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030b	8b e5		 mov	 esp, ebp
  0030d	5d		 pop	 ebp
  0030e	c2 04 00	 ret	 4
$LN22@SeedExtrac:

; 5335 : 	}
; 5336 : 	else
; 5337 : 	{
; 5338 : 		BYTE SeedRate = 0;
; 5339 : 		SeedRate = g_SocketItem.GetOptionRate();

  00311	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00316	e8 00 00 00 00	 call	 ?GetOptionRate@CSocketItems@@QAEEXZ ; CSocketItems::GetOptionRate
  0031b	88 45 b8	 mov	 BYTE PTR _SeedRate$1[ebp], al

; 5340 : 
; 5341 : 		_SOCKET_SEED_DATA* tmpSeed;
; 5342 : 		tmpSeed = g_SocketItem.GetSeedOption(SeedRate);

  0031e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00323	ff 75 b8	 push	 DWORD PTR _SeedRate$1[ebp]
  00326	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption
  0032b	8b f8		 mov	 edi, eax

; 5343 : 
; 5344 : 		if( tmpSeed != NULL )

  0032d	85 ff		 test	 edi, edi
  0032f	74 72		 je	 SHORT $LN24@SeedExtrac

; 5345 : 		{
; 5346 : 			pMsg.Result = TRUE;
; 5347 : 
; 5348 : 			ItemSerialCreateSend(lpObj->m_Index,0xFF,0,0,tmpSeed->SeedItem,tmpSeed->btIndex,1,0,0,0,lpObj->m_Index,0,0);

  00331	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00333	6a 00		 push	 0
  00335	6a 00		 push	 0
  00337	6a 00		 push	 0
  00339	6a 00		 push	 0
  0033b	51		 push	 ecx
  0033c	6a 00		 push	 0
  0033e	6a 00		 push	 0
  00340	6a 00		 push	 0
  00342	6a 01		 push	 1
  00344	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  00348	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0034c	50		 push	 eax
  0034d	ff 77 0c	 push	 DWORD PTR [edi+12]
  00350	6a 00		 push	 0
  00352	6a 00		 push	 0
  00354	68 ff 00 00 00	 push	 255			; 000000ffH
  00359	51		 push	 ecx
  0035a	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5349 : 			gObjInventoryCommit(lpObj->m_Index);

  0035f	ff 36		 push	 DWORD PTR [esi]
  00361	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 5350 : 			LogAddTD("[%s][%s] Seed Extract Mix Success - SeedInfo ( Index : %d, Type : %d, Level : %d, ItemCode : %d )",

  00366	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0036a	83 c4 40	 add	 esp, 64			; 00000040H
  0036d	ff 77 0c	 push	 DWORD PTR [edi+12]
  00370	50		 push	 eax
  00371	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00375	50		 push	 eax
  00376	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00379	50		 push	 eax
  0037a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0037d	83 c6 52	 add	 esi, 82			; 00000052H
  00380	50		 push	 eax
  00381	56		 push	 esi
  00382	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@HFAHDNLD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Succes@
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0038d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00390	5f		 pop	 edi
  00391	5e		 pop	 esi
  00392	5b		 pop	 ebx

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  00393	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00396	33 cd		 xor	 ecx, ebp
  00398	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039d	8b e5		 mov	 esp, ebp
  0039f	5d		 pop	 ebp
  003a0	c2 04 00	 ret	 4
$LN24@SeedExtrac:

; 5351 : 				lpObj->AccountID,lpObj->Name,tmpSeed->btOption,tmpSeed->btGroup,tmpSeed->btIndex,tmpSeed->SeedItem);
; 5352 : 
; 5353 : 		}
; 5354 : 		else
; 5355 : 		{
; 5356 : 			lpObj->pChaosBox[iAncItemPos].m_Level -= rand()%3;

  003a3	69 7d cc d4 00
	00 00		 imul	 edi, DWORD PTR _iAncItemPos$1$[ebp], 212
  003aa	03 be 10 12 00
	00		 add	 edi, DWORD PTR [esi+4624]
  003b0	e8 00 00 00 00	 call	 _rand
  003b5	99		 cdq
  003b6	bb 03 00 00 00	 mov	 ebx, 3
  003bb	f7 fb		 idiv	 ebx
  003bd	66 29 57 08	 sub	 WORD PTR [edi+8], dx

; 5357 : 			lpObj->pChaosBox[iExcItemPos].m_Level -= rand()%3;

  003c1	69 7d c8 d4 00
	00 00		 imul	 edi, DWORD PTR _iExcItemPos$1$[ebp], 212
  003c8	03 be 10 12 00
	00		 add	 edi, DWORD PTR [esi+4624]
  003ce	e8 00 00 00 00	 call	 _rand
  003d3	99		 cdq
  003d4	f7 fb		 idiv	 ebx

; 5358 : 			lpObj->pChaosBox[iHarmonyPos].Clear();

  003d6	69 4d c4 d4 00
	00 00		 imul	 ecx, DWORD PTR _iHarmonyPos$1$[ebp], 212
  003dd	66 29 57 08	 sub	 WORD PTR [edi+8], dx
  003e1	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  003e7	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5359 : 			lpObj->pChaosBox[iChaosPos].Clear();

  003ec	69 4d c0 d4 00
	00 00		 imul	 ecx, DWORD PTR _iChaosPos$1$[ebp], 212
  003f3	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  003f9	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5360 : 			lpObj->pChaosBox[iCreationPos].Clear();

  003fe	69 4d bc d4 00
	00 00		 imul	 ecx, DWORD PTR _iCreationPos$1$[ebp], 212
  00405	03 8e 10 12 00
	00		 add	 ecx, DWORD PTR [esi+4624]
  0040b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 5361 : 
; 5362 : 			GCUserChaosBoxSend(lpObj,0);

  00410	6a 00		 push	 0
  00412	56		 push	 esi
  00413	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5363 : 
; 5364 : 			LogAddTD("[%s][%s] Seed Extract Mix Failed - SeedData is NULL",lpObj->AccountID,lpObj->Name);

  00418	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0041b	50		 push	 eax
  0041c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0041f	50		 push	 eax
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@JCNMJOBM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Seed?5Extract?5Mix?5Failed@
  00425	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0042b	83 c4 14	 add	 esp, 20			; 00000014H

; 5365 : 
; 5366 : 			lpObj->ChaosLock = FALSE;

  0042e	eb 17		 jmp	 SHORT $LN35@SeedExtrac
$LN18@SeedExtrac:

; 5289 : 		iCreationCount != 1 )
; 5290 : 	{
; 5291 : 		pMsg.Result = 7;

  00430	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN34@SeedExtrac:

; 5292 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00434	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00438	50		 push	 eax
  00439	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0043c	50		 push	 eax
  0043d	ff 36		 push	 DWORD PTR [esi]
  0043f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00444	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@SeedExtrac:

; 5367 : 		}
; 5368 : 	}
; 5369 : }

  00447	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044a	5f		 pop	 edi
  0044b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00455	33 cd		 xor	 ecx, ebp
  00457	5e		 pop	 esi
  00458	5b		 pop	 ebx
  00459	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045e	8b e5		 mov	 esp, ebp
  00460	5d		 pop	 ebp
  00461	c2 04 00	 ret	 4
?SeedExtractMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::SeedExtractMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_PaperLevel$1$ = -44					; size = 4
_PotionCount$1$ = -40					; size = 4
_PaperCount$1$ = -36					; size = 4
_ChaosCount$1$ = -32					; size = 4
_iCharmOfLuckCount$1$ = -28				; size = 4
_OtherItemCount$1$ = -24				; size = 4
_PotionLevel$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::IllusionTemple_Mix, COMDAT
; _this$ = ecx

; 5100 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5101 : 	lpObj->ChaosLock = TRUE;
; 5102 : 
; 5103 : 	PMSG_CHAOSMIXRESULT pMsg;
; 5104 : 
; 5105 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 5106 : 	pMsg.Result = CB_ERROR;
; 5107 : 
; 5108 : 	int PaperCount = 0;

  00030	33 ff		 xor	 edi, edi
  00032	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 5109 : 	int PotionCount = 0;
; 5110 : 	int ChaosCount = 0;
; 5111 : 	int PotionLevel = -1;

  00036	83 cb ff	 or	 ebx, -1
  00039	89 7d dc	 mov	 DWORD PTR _PaperCount$1$[ebp], edi
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	89 7d d8	 mov	 DWORD PTR _PotionCount$1$[ebp], edi

; 5112 : 	int PaperLevel = -1;

  00042	0b c3		 or	 eax, ebx
  00044	89 7d e0	 mov	 DWORD PTR _ChaosCount$1$[ebp], edi
  00047	89 45 d4	 mov	 DWORD PTR _PaperLevel$1$[ebp], eax

; 5113 : 	int OtherItemCount = 0;

  0004a	89 7d e8	 mov	 DWORD PTR _OtherItemCount$1$[ebp], edi

; 5114 : 	int iCharmOfLuckCount = 0;

  0004d	89 7d e4	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], edi
$LL4@IllusionTe:

; 5117 : 	{
; 5118 : 		if(lpObj->pChaosBox[n].IsItem() == TRUE)

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 24		 jne	 SHORT $LN35@IllusionTe

; 5119 : 		{
; 5120 : 			if(lpObj->pChaosBox[n].m_Type == ITEMGET(13,49))

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	ba 31 1a 00 00	 mov	 edx, 6705		; 00001a31H
  0006d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00072	66 3b c2	 cmp	 ax, dx
  00075	0f 85 84 00 00
	00		 jne	 $LN9@IllusionTe

; 5121 : 			{
; 5122 : 				PaperCount++;
; 5123 : 				PaperLevel = lpObj->pChaosBox[n].m_Level;

  0007b	0f bf 44 39 08	 movsx	 eax, WORD PTR [ecx+edi+8]
  00080	ff 45 dc	 inc	 DWORD PTR _PaperCount$1$[ebp]
  00083	89 45 d4	 mov	 DWORD PTR _PaperLevel$1$[ebp], eax
$LN35@IllusionTe:
  00086	8b 45 e0	 mov	 eax, DWORD PTR _ChaosCount$1$[ebp]
$LN36@IllusionTe:
  00089	8b 55 e4	 mov	 edx, DWORD PTR _iCharmOfLuckCount$1$[ebp]
$LN37@IllusionTe:
  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _OtherItemCount$1$[ebp]
$LN2@IllusionTe:

; 5115 : 
; 5116 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0008f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00095	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0009b	7c b3		 jl	 SHORT $LL4@IllusionTe

; 5141 : 			}
; 5142 : 		}
; 5143 : 	}
; 5144 : 
; 5145 : 	if(PaperCount != 1 || PotionCount != 1 || ChaosCount != 1 || OtherItemCount != 0 || PotionLevel != PaperLevel)

  0009d	83 7d dc 01	 cmp	 DWORD PTR _PaperCount$1$[ebp], 1
  000a1	89 5d e8	 mov	 DWORD PTR _PotionLevel$1$[ebp], ebx
  000a4	75 29		 jne	 SHORT $LN18@IllusionTe
  000a6	83 7d d8 01	 cmp	 DWORD PTR _PotionCount$1$[ebp], 1
  000aa	75 23		 jne	 SHORT $LN18@IllusionTe
  000ac	83 f8 01	 cmp	 eax, 1
  000af	75 1e		 jne	 SHORT $LN18@IllusionTe
  000b1	85 c9		 test	 ecx, ecx
  000b3	75 1a		 jne	 SHORT $LN18@IllusionTe
  000b5	3b 5d d4	 cmp	 ebx, DWORD PTR _PaperLevel$1$[ebp]
  000b8	75 15		 jne	 SHORT $LN18@IllusionTe

; 5148 : 		lpObj->ChaosLock = FALSE;
; 5149 : 		return;
; 5150 : 	}
; 5151 : 
; 5152 : 	if(PotionLevel < 1 || PotionLevel > IT_MAXTEMPLE)

  000ba	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  000bd	83 f8 05	 cmp	 eax, 5
  000c0	77 0d		 ja	 SHORT $LN18@IllusionTe

; 5153 : 	{
; 5154 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 5155 : 		lpObj->ChaosLock = FALSE;
; 5156 : 		return;
; 5157 : 	}
; 5158 : 
; 5159 : 	if(iCharmOfLuckCount > 10)

  000c2	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000c5	0f 8e 90 00 00
	00		 jle	 $LN21@IllusionTe

; 5160 : 	{
; 5161 : 		pMsg.Result = 0xF0;

  000cb	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN18@IllusionTe:

; 5146 : 	{
; 5147 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000cf	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000d3	50		 push	 eax
  000d4	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d7	50		 push	 eax
  000d8	ff 36		 push	 DWORD PTR [esi]
  000da	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@IllusionTe:

; 5210 : }

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e5	5f		 pop	 edi
  000e6	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000f0	33 cd		 xor	 ecx, ebp
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN9@IllusionTe:

; 5124 : 			}
; 5125 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(13,50))

  000ff	ba 32 1a 00 00	 mov	 edx, 6706		; 00001a32H
  00104	66 3b c2	 cmp	 ax, dx
  00107	75 0d		 jne	 SHORT $LN11@IllusionTe

; 5126 : 			{
; 5127 : 				PotionCount++;

  00109	ff 45 d8	 inc	 DWORD PTR _PotionCount$1$[ebp]

; 5128 : 				PotionLevel = lpObj->pChaosBox[n].m_Level;

  0010c	0f bf 5c 39 08	 movsx	 ebx, WORD PTR [ecx+edi+8]
  00111	e9 70 ff ff ff	 jmp	 $LN35@IllusionTe
$LN11@IllusionTe:

; 5129 : 			}
; 5130 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(12,15))

  00116	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0011b	66 3b c2	 cmp	 ax, dx
  0011e	75 0c		 jne	 SHORT $LN13@IllusionTe

; 5131 : 			{
; 5132 : 				ChaosCount++;

  00120	8b 45 e0	 mov	 eax, DWORD PTR _ChaosCount$1$[ebp]
  00123	40		 inc	 eax
  00124	89 45 e0	 mov	 DWORD PTR _ChaosCount$1$[ebp], eax
  00127	e9 5d ff ff ff	 jmp	 $LN36@IllusionTe
$LN13@IllusionTe:

; 5133 : 			}
; 5134 : 			else if(lpObj->pChaosBox[n].m_Type == ITEMGET(14,53))

  0012c	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00131	66 3b c2	 cmp	 ax, dx

; 5135 : 			{
; 5136 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00134	8b 55 e4	 mov	 edx, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00137	75 13		 jne	 SHORT $LN15@IllusionTe
  00139	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  0013f	03 d0		 add	 edx, eax

; 5137 : 			}
; 5138 : 			else

  00141	8b 45 e0	 mov	 eax, DWORD PTR _ChaosCount$1$[ebp]
  00144	89 55 e4	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], edx
  00147	e9 40 ff ff ff	 jmp	 $LN37@IllusionTe
$LN15@IllusionTe:

; 5139 : 			{
; 5140 : 				OtherItemCount++;

  0014c	8b 4d e8	 mov	 ecx, DWORD PTR _OtherItemCount$1$[ebp]
  0014f	8b 45 e0	 mov	 eax, DWORD PTR _ChaosCount$1$[ebp]
  00152	41		 inc	 ecx
  00153	89 4d e8	 mov	 DWORD PTR _OtherItemCount$1$[ebp], ecx
  00156	e9 34 ff ff ff	 jmp	 $LN2@IllusionTe
$LN21@IllusionTe:

; 5162 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 5163 : 		lpObj->ChaosLock = FALSE;
; 5164 : 		return;
; 5165 : 	}
; 5166 : 
; 5167 : 	int nChaosNeedMoney = 300000 + (PotionLevel-1) * 200000;
; 5168 : 
; 5169 : 	if(lpObj->Money < nChaosNeedMoney)

  0015b	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00161	69 db 40 0d 03
	00		 imul	 ebx, ebx, 200000
  00167	81 c3 a0 86 01
	00		 add	 ebx, 100000		; 000186a0H
  0016d	3b c3		 cmp	 eax, ebx
  0016f	7d 09		 jge	 SHORT $LN22@IllusionTe

; 5170 : 	{
; 5171 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00171	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 5172 : 		
; 5173 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 5174 : 		lpObj->ChaosLock = FALSE;
; 5175 : 		return;

  00175	e9 55 ff ff ff	 jmp	 $LN18@IllusionTe
$LN22@IllusionTe:

; 5176 : 	}
; 5177 : 
; 5178 : 	lpObj->Money -= nChaosNeedMoney;

  0017a	2b c3		 sub	 eax, ebx

; 5179 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0017c	50		 push	 eax
  0017d	ff 36		 push	 DWORD PTR [esi]
  0017f	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00185	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 5180 : 
; 5181 : 	lpObj->ChaosSuccessRate = 70;
; 5182 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0018a	8b 7d e4	 mov	 edi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  0018d	83 c4 08	 add	 esp, 8
  00190	8d 47 46	 lea	 eax, DWORD PTR [edi+70]
  00193	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 5183 : 
; 5184 : 	if(rand()%100 < lpObj->ChaosSuccessRate)

  00199	e8 00 00 00 00	 call	 _rand
  0019e	99		 cdq
  0019f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a4	f7 f9		 idiv	 ecx
  001a6	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001ac	7d 57		 jge	 SHORT $LN23@IllusionTe

; 5185 : 	{
; 5186 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,ITEMGET(13,51),PotionLevel,1,0,0,0,lpObj->m_Index,0,0);

  001ae	8b 06		 mov	 eax, DWORD PTR [esi]
  001b0	6a 00		 push	 0
  001b2	6a 00		 push	 0
  001b4	6a 00		 push	 0
  001b6	6a 00		 push	 0
  001b8	50		 push	 eax
  001b9	6a 00		 push	 0
  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	6a 01		 push	 1
  001c1	ff 75 e8	 push	 DWORD PTR _PotionLevel$1$[ebp]
  001c4	68 33 1a 00 00	 push	 6707			; 00001a33H
  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	68 ff 00 00 00	 push	 255			; 000000ffH
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 5187 : 		gObjInventoryCommit(lpObj->m_Index);

  001d8	ff 36		 push	 DWORD PTR [esi]
  001da	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001df	83 c4 40	 add	 esp, 64			; 00000040H

; 5188 : 
; 5189 : 		LogAddTD("[ChaosMix][Illusion Temple] Illusion Ticket Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",

  001e2	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001e5	57		 push	 edi
  001e6	53		 push	 ebx
  001e7	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001ed	50		 push	 eax
  001ee	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001f1	50		 push	 eax
  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@NDMOHONO@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
  001f7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001fd	83 c4 18	 add	 esp, 24			; 00000018H

; 5190 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 5191 : 	}
; 5192 : 	else

  00200	e9 dd fe ff ff	 jmp	 $LN24@IllusionTe
$LN23@IllusionTe:

; 5193 : 	{
; 5194 : 		for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  00205	33 ff		 xor	 edi, edi
  00207	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@IllusionTe:

; 5195 : 		{
; 5196 : 			if(lpObj->pChaosBox[n].IsItem() == TRUE)

  00210	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00216	03 cf		 add	 ecx, edi
  00218	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0021d	83 f8 01	 cmp	 eax, 1
  00220	75 0d		 jne	 SHORT $LN5@IllusionTe

; 5197 : 			{
; 5198 : 				lpObj->pChaosBox[n].Clear();

  00222	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00228	03 cf		 add	 ecx, edi
  0022a	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN5@IllusionTe:

; 5193 : 	{
; 5194 : 		for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0022f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00235	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0023b	7c d3		 jl	 SHORT $LL7@IllusionTe

; 5199 : 			}
; 5200 : 		}
; 5201 : 
; 5202 : 
; 5203 : 		GCUserChaosBoxSend(lpObj,0);

  0023d	6a 00		 push	 0
  0023f	56		 push	 esi
  00240	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5204 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00245	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00249	50		 push	 eax
  0024a	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0024d	50		 push	 eax
  0024e	ff 36		 push	 DWORD PTR [esi]
  00250	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5205 : 
; 5206 : 		LogAddTD("[ChaosMix][Illusion Temple] Illusion Ticket [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00255	ff 75 e4	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00258	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0025b	53		 push	 ebx
  0025c	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00262	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00268	50		 push	 eax
  00269	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0026c	50		 push	 eax
  0026d	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@PMDDOCCB@?$FLChaosMix?$FN?$FLIllusion?5Temple?$FN?5Illu@
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00278	83 c4 30	 add	 esp, 48			; 00000030H

; 5207 : 			lpObj->AccountID, lpObj->Name, 	lpObj->ChaosSuccessRate,lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 5208 : 	}	
; 5209 : 	lpObj->ChaosLock = FALSE;

  0027b	e9 62 fe ff ff	 jmp	 $LN24@IllusionTe
?IllusionTemple_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::IllusionTemple_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -36						; size = 4
_pTmp$ = -32						; size = 8
_pTmp$1$ = -23						; size = 1
_pTmp$5$ = -22						; size = 1
_pTmp$4$ = -21						; size = 1
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CherryBlossomMix, COMDAT
; _this$ = ecx

; 4994 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 4995 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4996 : 
; 4997 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	89 4d dc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00024	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 4998 : 	pMsg.Result = CB_ERROR;
; 4999 : 
; 5000 : 	lpObj->ChaosLock = TRUE;
; 5001 : 
; 5002 : 	pMixTmp pTmp = {0};

  00029	32 c0		 xor	 al, al
  0002b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0002f	88 45 e9	 mov	 BYTE PTR _pTmp$1$[ebp], al
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	33 c0		 xor	 eax, eax
  00037	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  00041	89 45 e1	 mov	 DWORD PTR _pTmp$[ebp+1], eax
  00044	33 db		 xor	 ebx, ebx
  00046	8a 55 e1	 mov	 dl, BYTE PTR _pTmp$[ebp+1]
  00049	66 89 45 e5	 mov	 WORD PTR _pTmp$[ebp+5], ax
  0004d	88 45 e7	 mov	 BYTE PTR _pTmp$[ebp+7], al
  00050	8a 45 e2	 mov	 al, BYTE PTR _pTmp$[ebp+2]
  00053	8b 75 e4	 mov	 esi, DWORD PTR _pTmp$[ebp+4]
  00056	88 45 eb	 mov	 BYTE PTR _pTmp$4$[ebp], al
  00059	88 55 ea	 mov	 BYTE PTR _pTmp$5$[ebp], dl
  0005c	0f 1f 40 00	 npad	 4
$LL4@CherryBlos:

; 5005 : 	{
; 5006 : 		if( lpObj->pChaosBox[n].IsItem() == FALSE )

  00060	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00066	03 cb		 add	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	85 c0		 test	 eax, eax
  0006f	74 53		 je	 SHORT $LN2@CherryBlos

; 5007 : 			continue;
; 5008 : 
; 5009 : 		if( pTmp.m_Item == FALSE )

  00071	85 f6		 test	 esi, esi
  00073	75 37		 jne	 SHORT $LN6@CherryBlos

; 5010 : 		{
; 5011 : 			pTmp.m_Item = lpObj->pChaosBox[n].m_Type;

  00075	8b 87 10 12 00
	00		 mov	 eax, DWORD PTR [edi+4624]
  0007b	0f bf 74 18 06	 movsx	 esi, WORD PTR [eax+ebx+6]

; 5012 : 
; 5013 : 			if( pTmp.m_Item == ITEMGET(14,88) )

  00080	81 fe 58 1c 00
	00		 cmp	 esi, 7256		; 00001c58H
  00086	75 06		 jne	 SHORT $LN7@CherryBlos

; 5014 : 			{
; 5015 : 				pTmp.NeedDur = 10;

  00088	c6 45 eb 0a	 mov	 BYTE PTR _pTmp$4$[ebp], 10 ; 0000000aH
  0008c	eb 1a		 jmp	 SHORT $LN12@CherryBlos
$LN7@CherryBlos:

; 5016 : 			}
; 5017 : 			else if( pTmp.m_Item == ITEMGET(14,89) )

  0008e	81 fe 59 1c 00
	00		 cmp	 esi, 7257		; 00001c59H
  00094	75 06		 jne	 SHORT $LN9@CherryBlos

; 5018 : 			{
; 5019 : 				pTmp.NeedDur = 30;

  00096	c6 45 eb 1e	 mov	 BYTE PTR _pTmp$4$[ebp], 30 ; 0000001eH
  0009a	eb 0c		 jmp	 SHORT $LN12@CherryBlos
$LN9@CherryBlos:

; 5020 : 			}
; 5021 : 			else if( pTmp.m_Item == ITEMGET(14,90) )

  0009c	81 fe 5a 1c 00
	00		 cmp	 esi, 7258		; 00001c5aH
  000a2	75 69		 jne	 SHORT $LN11@CherryBlos

; 5022 : 			{
; 5023 : 				pTmp.NeedDur = 255;

  000a4	c6 45 eb ff	 mov	 BYTE PTR _pTmp$4$[ebp], 255 ; 000000ffH
$LN12@CherryBlos:

; 5029 : 			}
; 5030 : 
; 5031 : 			pTmp.bOk = TRUE;

  000a8	c6 45 e9 01	 mov	 BYTE PTR _pTmp$1$[ebp], 1
$LN6@CherryBlos:

; 5032 : 		}
; 5033 : 
; 5034 : 		if( pTmp.m_Item == lpObj->pChaosBox[n].m_Type )

  000ac	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  000b2	0f bf 44 19 06	 movsx	 eax, WORD PTR [ecx+ebx+6]
  000b7	3b f0		 cmp	 esi, eax
  000b9	75 56		 jne	 SHORT $LN13@CherryBlos

; 5035 : 		{
; 5036 : 			pTmp.Dur += (int)lpObj->pChaosBox[n].m_Durability;

  000bb	f3 0f 2c 44 19
	24		 cvttss2si eax, DWORD PTR [ecx+ebx+36]
  000c1	00 45 ea	 add	 BYTE PTR _pTmp$5$[ebp], al
$LN2@CherryBlos:

; 5003 : 
; 5004 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000c4	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000ca	81 fb 80 1a 00
	00		 cmp	 ebx, 6784		; 00001a80H
  000d0	7c 8e		 jl	 SHORT $LL4@CherryBlos
  000d2	8a 45 e9	 mov	 al, BYTE PTR _pTmp$1$[ebp]
$LN31@CherryBlos:

; 5041 : 			break;
; 5042 : 		}
; 5043 : 	}
; 5044 : 
; 5045 : 	if( pTmp.Dur != pTmp.NeedDur )

  000d5	0f b6 c8	 movzx	 ecx, al
  000d8	33 db		 xor	 ebx, ebx
  000da	8a 45 eb	 mov	 al, BYTE PTR _pTmp$4$[ebp]
  000dd	38 45 ea	 cmp	 BYTE PTR _pTmp$5$[ebp], al
  000e0	0f 45 cb	 cmovne	 ecx, ebx

; 5046 : 	{
; 5047 : 		pTmp.bOk = FALSE;
; 5048 : 	}
; 5049 : 
; 5050 : 	if( pTmp.m_Item == FALSE || pTmp.bOk == FALSE )

  000e3	85 f6		 test	 esi, esi
  000e5	0f 84 d5 00 00
	00		 je	 $LN17@CherryBlos
  000eb	84 c9		 test	 cl, cl
  000ed	0f 84 cd 00 00
	00		 je	 $LN17@CherryBlos

; 5054 : 		lpObj->ChaosLock = FALSE;
; 5055 : 		return;
; 5056 : 	}
; 5057 : 
; 5058 : 	int iHeight = 4;
; 5059 : 	int iWidth = 2;
; 5060 : 
; 5061 : 	if( !CheckInventoryEmptySpace(lpObj, iHeight, iWidth) )

  000f3	6a 02		 push	 2
  000f5	6a 04		 push	 4
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	85 c0		 test	 eax, eax
  00102	75 11		 jne	 SHORT $LN18@CherryBlos

; 5062 : 	{
; 5063 : 		pMsg.Result = 0xF1;

  00104	c6 45 ef f1	 mov	 BYTE PTR _pMsg$[ebp+3], 241 ; 000000f1H

; 5064 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 5065 : 		lpObj->ChaosLock = FALSE;
; 5066 : 		return;

  00108	e9 b6 00 00 00	 jmp	 $LN33@CherryBlos
$LN11@CherryBlos:

; 5024 : 			}
; 5025 : 			else
; 5026 : 			{
; 5027 : 				pTmp.m_Item = 0;

  0010d	33 f6		 xor	 esi, esi

; 5028 : 				continue;

  0010f	eb b3		 jmp	 SHORT $LN2@CherryBlos
$LN13@CherryBlos:

; 5037 : 		}
; 5038 : 		else
; 5039 : 		{
; 5040 : 			pTmp.bOk = FALSE;

  00111	32 c0		 xor	 al, al
  00113	eb c0		 jmp	 SHORT $LN31@CherryBlos
$LN18@CherryBlos:

; 5067 : 	}
; 5068 : 
; 5069 : 	int bResult = 0;
; 5070 : 
; 5071 : 	if( pTmp.m_Item == ITEMGET(14,88) )

  00115	81 fe 58 1c 00
	00		 cmp	 esi, 7256		; 00001c58H
  0011b	75 0f		 jne	 SHORT $LN19@CherryBlos

; 5072 : 	{
; 5073 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixWhite, lpObj->m_Index, 0xFF, 0, 0);

  0011d	6a 00		 push	 0
  0011f	6a 00		 push	 0
  00121	68 ff 00 00 00	 push	 255			; 000000ffH
  00126	ff 37		 push	 DWORD PTR [edi]
  00128	6a 0f		 push	 15			; 0000000fH
  0012a	eb 2c		 jmp	 SHORT $LN34@CherryBlos
$LN19@CherryBlos:

; 5074 : 	}
; 5075 : 	else if( pTmp.m_Item == ITEMGET(14,89) )

  0012c	81 fe 59 1c 00
	00		 cmp	 esi, 7257		; 00001c59H
  00132	75 0f		 jne	 SHORT $LN21@CherryBlos

; 5076 : 	{
; 5077 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixRed, lpObj->m_Index, 0xFF, 0, 0);

  00134	6a 00		 push	 0
  00136	6a 00		 push	 0
  00138	68 ff 00 00 00	 push	 255			; 000000ffH
  0013d	ff 37		 push	 DWORD PTR [edi]
  0013f	6a 10		 push	 16			; 00000010H
  00141	eb 15		 jmp	 SHORT $LN34@CherryBlos
$LN21@CherryBlos:

; 5078 : 	}
; 5079 : 	else if( pTmp.m_Item == ITEMGET(14,90) )

  00143	81 fe 5a 1c 00
	00		 cmp	 esi, 7258		; 00001c5aH
  00149	75 2a		 jne	 SHORT $LN30@CherryBlos

; 5080 : 	{
; 5081 : 		bResult = g_EventItemBagManager.OpenSpecial(EventBagSpecial::CherryMixGold, lpObj->m_Index, 0xFF, 0, 0);

  0014b	6a 00		 push	 0
  0014d	6a 00		 push	 0
  0014f	68 ff 00 00 00	 push	 255			; 000000ffH
  00154	ff 37		 push	 DWORD PTR [edi]
  00156	6a 11		 push	 17			; 00000011H
$LN34@CherryBlos:
  00158	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0015d	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  00162	0f b6 c0	 movzx	 eax, al

; 5082 : 	}
; 5083 : 
; 5084 : 	if( bResult == false )

  00165	85 c0		 test	 eax, eax
  00167	74 0c		 je	 SHORT $LN30@CherryBlos

; 5093 : 	}
; 5094 : 
; 5095 : 	gObjInventoryCommit(lpObj->m_Index);

  00169	ff 37		 push	 DWORD PTR [edi]
  0016b	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00170	83 c4 04	 add	 esp, 4

; 5096 : 	lpObj->ChaosLock = FALSE;

  00173	eb 61		 jmp	 SHORT $LN35@CherryBlos
$LN30@CherryBlos:

; 5085 : 	{
; 5086 : 		ChaosBoxInit(lpObj);

  00175	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00178	57		 push	 edi
  00179	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 5087 : 		GCUserChaosBoxSend(lpObj,0);

  0017e	6a 00		 push	 0
  00180	57		 push	 edi
  00181	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 5088 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00186	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0018a	50		 push	 eax
  0018b	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0018e	50		 push	 eax
  0018f	ff 37		 push	 DWORD PTR [edi]
  00191	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 5089 : 		LogAddTD("[%s][%s] CherryBlossomMix Fail %d Money : %d-%d",

  00196	ff b7 18 12 00
	00		 push	 DWORD PTR [edi+4632]
  0019c	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0019f	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  001a5	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  001ab	50		 push	 eax
  001ac	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  001af	50		 push	 eax
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LOGFDBNL@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CherryBlossomMix?5Fail?5?$CF@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001bb	83 c4 2c	 add	 esp, 44			; 0000002cH

; 5090 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,lpObj->ChaosMoney);
; 5091 : 		lpObj->ChaosLock = FALSE;
; 5092 : 		return;

  001be	eb 16		 jmp	 SHORT $LN35@CherryBlos
$LN17@CherryBlos:

; 5051 : 	{
; 5052 : 		pMsg.Result = 0;

  001c0	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
$LN33@CherryBlos:

; 5053 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001c3	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001c7	50		 push	 eax
  001c8	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001cb	50		 push	 eax
  001cc	ff 37		 push	 DWORD PTR [edi]
  001ce	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN35@CherryBlos:

; 5097 : }

  001d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d9	89 9f 20 12 00
	00		 mov	 DWORD PTR [edi+4640], ebx
  001df	33 cd		 xor	 ecx, ebp
  001e1	5f		 pop	 edi
  001e2	5e		 pop	 esi
  001e3	5b		 pop	 ebx
  001e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e9	8b e5		 mov	 esp, ebp
  001eb	5d		 pop	 ebp
  001ec	c2 04 00	 ret	 4
?CherryBlossomMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CherryBlossomMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -252						; size = 4
tv388 = -248						; size = 4
_iOtherItemCount$1$ = -244				; size = 4
_LotteryItem$ = -240					; size = 212
_pMsg$ = -28						; size = 16
_btExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::LotteryItemMix, COMDAT
; _this$ = ecx

; 4871 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 4872 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4873 : 
; 4874 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00017	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	6a 10		 push	 16			; 00000010H
  0001e	68 86 00 00 00	 push	 134			; 00000086H
  00023	50		 push	 eax
  00024	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  0002a	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 4875 : 	pMsg.Result = CB_ERROR;
; 4876 : 
; 4877 : 	int iChaosCardCount = 0;

  0002f	33 f6		 xor	 esi, esi
  00031	c6 45 e7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4878 : 	int iOtherItemCount = 0;

  00038	89 b5 0c ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$1$[ebp], esi

; 4879 : 	int iHeight = 0;
; 4880 : 	int iWidth = 0;
; 4881 : 	int iChaosCardType = 0;

  0003e	33 ff		 xor	 edi, edi
  00040	33 c0		 xor	 eax, eax
  00042	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv388[ebp], eax
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@LotteryIte:

; 4884 : 	{
; 4885 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00056	03 c8		 add	 ecx, eax
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 25		 jne	 SHORT $LN31@LotteryIte

; 4886 : 		{
; 4887 : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,54) )

  00062	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv388[ebp]
  00068	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0006e	0f b7 44 01 06	 movzx	 eax, WORD PTR [ecx+eax+6]
  00073	b9 36 1c 00 00	 mov	 ecx, 7222		; 00001c36H
  00078	66 3b c1	 cmp	 ax, cx
  0007b	0f 85 8b 00 00
	00		 jne	 $LN6@LotteryIte

; 4888 : 			{
; 4889 : 				iChaosCardType = 1;

  00081	bf 01 00 00 00	 mov	 edi, 1
$LN32@LotteryIte:

; 4895 : 				iChaosCardCount++;

  00086	46		 inc	 esi
$LN31@LotteryIte:
  00087	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iOtherItemCount$1$[ebp]
$LN2@LotteryIte:

; 4882 : 
; 4883 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0008d	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv388[ebp]
  00093	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  00098	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv388[ebp], eax
  0009e	3d 80 1a 00 00	 cmp	 eax, 6784		; 00001a80H
  000a3	7c ab		 jl	 SHORT $LL4@LotteryIte

; 4910 : 			}
; 4911 : 		}
; 4912 : 	}
; 4913 : 
; 4914 : 	if( iOtherItemCount > 0 || iChaosCardCount != 1 )

  000a5	85 c9		 test	 ecx, ecx
  000a7	7f 33		 jg	 SHORT $LN15@LotteryIte
  000a9	83 fe 01	 cmp	 esi, 1
  000ac	75 2e		 jne	 SHORT $LN15@LotteryIte

; 4918 : 		return;
; 4919 : 	}
; 4920 : 
; 4921 : 	if( iChaosCardType == 0 )

  000ae	85 ff		 test	 edi, edi
  000b0	74 2a		 je	 SHORT $LN15@LotteryIte

; 4922 : 	{
; 4923 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 4924 : 		lpObj->ChaosLock = FALSE;
; 4925 : 		return;
; 4926 : 	}
; 4927 : 
; 4928 : 	LogChaosItem(lpObj, "CashLottery");

  000b2	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JCBFJDIJ@CashLottery?$AA@
  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4929 : 	iHeight = 4;
; 4930 : 	iWidth = 2;
; 4931 : 
; 4932 : 	if( !CheckInventoryEmptySpace(lpObj,iHeight,iWidth) )

  000c3	6a 02		 push	 2
  000c5	6a 04		 push	 4
  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	85 c0		 test	 eax, eax
  000d2	0f 85 83 00 00
	00		 jne	 $LN17@LotteryIte

; 4933 : 	{
; 4934 : 		pMsg.Result = 0xF1;

  000d8	c6 45 e7 f1	 mov	 BYTE PTR _pMsg$[ebp+3], 241 ; 000000f1H
$LN15@LotteryIte:

; 4915 : 	{
; 4916 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000dc	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e0	50		 push	 eax
  000e1	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e4	50		 push	 eax
  000e5	ff 33		 push	 DWORD PTR [ebx]
  000e7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4917 : 		lpObj->ChaosLock = FALSE;

  000ef	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx

; 4979 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[LotteryItem.m_Type].Name,
; 4980 : 		LotteryItem.m_Type, LotteryItem.m_Level, (int)LotteryItem.m_Durability,
; 4981 : 		LotteryItem.m_Option1, LotteryItem.m_Option2, LotteryItem.m_Option3,
; 4982 : 		btExOption[0], btExOption[1], btExOption[2], btExOption[3], btExOption[4], btExOption[5]);
; 4983 : }

  000fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$LN6@LotteryIte:

; 4890 : 				iChaosCardCount++;
; 4891 : 			}
; 4892 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,92) )

  0010c	b9 5c 1c 00 00	 mov	 ecx, 7260		; 00001c5cH
  00111	66 3b c1	 cmp	 ax, cx
  00114	75 0a		 jne	 SHORT $LN8@LotteryIte

; 4893 : 			{
; 4894 : 				iChaosCardType = 2;

  00116	bf 02 00 00 00	 mov	 edi, 2

; 4895 : 				iChaosCardCount++;

  0011b	e9 66 ff ff ff	 jmp	 $LN32@LotteryIte
$LN8@LotteryIte:

; 4896 : 			}
; 4897 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,93) )

  00120	b9 5d 1c 00 00	 mov	 ecx, 7261		; 00001c5dH
  00125	66 3b c1	 cmp	 ax, cx
  00128	75 0a		 jne	 SHORT $LN10@LotteryIte

; 4898 : 			{
; 4899 : 				iChaosCardType = 3;

  0012a	bf 03 00 00 00	 mov	 edi, 3

; 4900 : 				iChaosCardCount++;

  0012f	e9 52 ff ff ff	 jmp	 $LN32@LotteryIte
$LN10@LotteryIte:

; 4901 : 			}
; 4902 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,95) )

  00134	b9 5f 1c 00 00	 mov	 ecx, 7263		; 00001c5fH
  00139	66 3b c1	 cmp	 ax, cx

; 4906 : 			}
; 4907 : 			else

  0013c	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _iOtherItemCount$1$[ebp]
  00142	75 0b		 jne	 SHORT $LN12@LotteryIte

; 4903 : 			{
; 4904 : 				iChaosCardType = 4;
; 4905 : 				iChaosCardCount++;

  00144	bf 04 00 00 00	 mov	 edi, 4
  00149	46		 inc	 esi

; 4906 : 			}
; 4907 : 			else

  0014a	e9 3e ff ff ff	 jmp	 $LN2@LotteryIte
$LN12@LotteryIte:

; 4908 : 			{
; 4909 : 				iOtherItemCount++;

  0014f	41		 inc	 ecx
  00150	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _iOtherItemCount$1$[ebp], ecx
  00156	e9 32 ff ff ff	 jmp	 $LN2@LotteryIte
$LN17@LotteryIte:

; 4935 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 4936 : 		lpObj->ChaosLock = FALSE;
; 4937 : 		return;
; 4938 : 	}
; 4939 : 
; 4940 : 	CItem LotteryItem;

  0015b	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _LotteryItem$[ebp]
  00161	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 4941 : 
; 4942 : 	if( iChaosCardType == 1 )

  00166	83 ff 01	 cmp	 edi, 1
  00169	75 0e		 jne	 SHORT $LN18@LotteryIte

; 4943 : 	{
; 4944 : 		g_Lottery.GetItem("ChaosCard",&LotteryItem);

  0016b	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00171	50		 push	 eax
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_09KIGHELLC@ChaosCard?$AA@
  00177	eb 37		 jmp	 SHORT $LN33@LotteryIte
$LN18@LotteryIte:

; 4945 : 	}
; 4946 : 	else if( iChaosCardType == 2 )

  00179	83 ff 02	 cmp	 edi, 2
  0017c	75 0e		 jne	 SHORT $LN20@LotteryIte

; 4947 : 	{
; 4948 : 		g_Lottery.GetItem("ChaosCardGold",&LotteryItem);

  0017e	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00184	50		 push	 eax
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PAMPMNGB@ChaosCardGold?$AA@
  0018a	eb 24		 jmp	 SHORT $LN33@LotteryIte
$LN20@LotteryIte:

; 4949 : 	}
; 4950 : 	else if( iChaosCardType == 3 )

  0018c	83 ff 03	 cmp	 edi, 3
  0018f	75 0e		 jne	 SHORT $LN22@LotteryIte

; 4951 : 	{
; 4952 : 		g_Lottery.GetItem("ChaosCardRare",&LotteryItem);

  00191	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00197	50		 push	 eax
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LHLDBNJL@ChaosCardRare?$AA@
  0019d	eb 11		 jmp	 SHORT $LN33@LotteryIte
$LN22@LotteryIte:

; 4953 : 	}
; 4954 : 	else if( iChaosCardType == 4 )

  0019f	83 ff 04	 cmp	 edi, 4
  001a2	75 16		 jne	 SHORT $LN24@LotteryIte

; 4955 : 	{
; 4956 : 		g_Lottery.GetItem("ChaosCardMini",&LotteryItem);

  001a4	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  001aa	50		 push	 eax
  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CJDOCADP@ChaosCardMini?$AA@
$LN33@LotteryIte:
  001b0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Lottery@@3VCCashLottery@@A ; g_Lottery
  001b5	e8 00 00 00 00	 call	 ?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z ; CCashLottery::GetItem
$LN24@LotteryIte:

; 4957 : 	}
; 4958 : 
; 4959 : 	if( LotteryItem.IsItem() == FALSE )

  001ba	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _LotteryItem$[ebp]
  001c0	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  001c5	85 c0		 test	 eax, eax
  001c7	75 3b		 jne	 SHORT $LN25@LotteryIte

; 4960 : 	{
; 4961 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001c9	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001cd	50		 push	 eax
  001ce	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001d1	50		 push	 eax
  001d2	ff 33		 push	 DWORD PTR [ebx]
  001d4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4962 : 		lpObj->ChaosLock = FALSE;
; 4963 : 		LogAddTD("[ChaosMix][LotteryItemMix] Lottery Item Mix Failed. Can't Get Item from List.");

  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@BNKLGMLJ@?$FLChaosMix?$FN?$FLLotteryItemMix?$FN?5Lotte@
  001de	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001ee	83 c4 10	 add	 esp, 16			; 00000010H
  001f1	5f		 pop	 edi
  001f2	5e		 pop	 esi
  001f3	5b		 pop	 ebx

; 4979 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[LotteryItem.m_Type].Name,
; 4980 : 		LotteryItem.m_Type, LotteryItem.m_Level, (int)LotteryItem.m_Durability,
; 4981 : 		LotteryItem.m_Option1, LotteryItem.m_Option2, LotteryItem.m_Option3,
; 4982 : 		btExOption[0], btExOption[1], btExOption[2], btExOption[3], btExOption[4], btExOption[5]);
; 4983 : }

  001f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f7	33 cd		 xor	 ecx, ebp
  001f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 04 00	 ret	 4
$LN25@LotteryIte:

; 4964 : 		return;
; 4965 : 	}
; 4966 : 
; 4967 : 	ItemSerialCreateSend(lpObj->m_Index,255,0,0,LotteryItem.m_Type,LotteryItem.m_Level,(BYTE)LotteryItem.m_Durability,LotteryItem.m_Option1,

  00204	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00206	f3 0f 2c 85 34
	ff ff ff	 cvttss2si eax, DWORD PTR _LotteryItem$[ebp+36]
  0020e	6a 00		 push	 0
  00210	6a 00		 push	 0
  00212	6a 00		 push	 0
  00214	ff 75 a3	 push	 DWORD PTR _LotteryItem$[ebp+147]
  00217	0f b6 c0	 movzx	 eax, al
  0021a	51		 push	 ecx
  0021b	ff 75 a2	 push	 DWORD PTR _LotteryItem$[ebp+146]
  0021e	ff 75 a1	 push	 DWORD PTR _LotteryItem$[ebp+145]
  00221	ff 75 a0	 push	 DWORD PTR _LotteryItem$[ebp+144]
  00224	50		 push	 eax
  00225	ff b5 18 ff ff
	ff		 push	 DWORD PTR _LotteryItem$[ebp+8]
  0022b	0f bf 85 16 ff
	ff ff		 movsx	 eax, WORD PTR _LotteryItem$[ebp+6]
  00232	50		 push	 eax
  00233	6a 00		 push	 0
  00235	6a 00		 push	 0
  00237	68 ff 00 00 00	 push	 255			; 000000ffH
  0023c	51		 push	 ecx
  0023d	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4968 : 		LotteryItem.m_Option2,LotteryItem.m_Option3,lpObj->m_Index,LotteryItem.m_NewOption,0);
; 4969 : 	gObjInventoryCommit(lpObj->m_Index);

  00242	ff 33		 push	 DWORD PTR [ebx]
  00244	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00249	83 c4 40	 add	 esp, 64			; 00000040H

; 4970 : 
; 4971 : 	LogAddTD("[ChaosMix][ChaosCardMix] Chaos Card Item Mix Success [%s][%s]",

  0024c	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  0024f	8d 7b 52	 lea	 edi, DWORD PTR [ebx+82]
  00252	56		 push	 esi
  00253	57		 push	 edi
  00254	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@IIKCCCHD@?$FLChaosMix?$FN?$FLChaosCardMix?$FN?5Chaos?5C@
  00259	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4972 : 		lpObj->AccountID,lpObj->Name);
; 4973 : 
; 4974 : 	BYTE btExOption[MAX_EXOPTION_SIZE];
; 4975 : 
; 4976 : 	ItemIsBufExOption(btExOption, &LotteryItem);

  0025f	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _LotteryItem$[ebp]
  00265	50		 push	 eax
  00266	8d 45 f4	 lea	 eax, DWORD PTR _btExOption$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 4977 : 	
; 4978 : 	LogAddTD("[CashShop][ChaosCardMix] - User(ID:%s,Name:%s) Item(Name:%s,Type:%d,Level:%d,Dur:%d,Skill:%d,Luck:%d,AddOption:%d,Ex:(%d,%d,%d,%d,%d,%d))",

  0026f	0f b6 45 f9	 movzx	 eax, BYTE PTR _btExOption$[ebp+5]
  00273	50		 push	 eax
  00274	0f b6 45 f8	 movzx	 eax, BYTE PTR _btExOption$[ebp+4]
  00278	50		 push	 eax
  00279	0f b6 45 f7	 movzx	 eax, BYTE PTR _btExOption$[ebp+3]
  0027d	50		 push	 eax
  0027e	0f b6 45 f6	 movzx	 eax, BYTE PTR _btExOption$[ebp+2]
  00282	50		 push	 eax
  00283	0f b6 45 f5	 movzx	 eax, BYTE PTR _btExOption$[ebp+1]
  00287	50		 push	 eax
  00288	0f b6 45 f4	 movzx	 eax, BYTE PTR _btExOption$[ebp]
  0028c	50		 push	 eax
  0028d	0f b6 45 a2	 movzx	 eax, BYTE PTR _LotteryItem$[ebp+146]
  00291	0f bf 8d 16 ff
	ff ff		 movsx	 ecx, WORD PTR _LotteryItem$[ebp+6]
  00298	50		 push	 eax
  00299	0f b6 45 a1	 movzx	 eax, BYTE PTR _LotteryItem$[ebp+145]
  0029d	50		 push	 eax
  0029e	0f b6 45 a0	 movzx	 eax, BYTE PTR _LotteryItem$[ebp+144]
  002a2	50		 push	 eax
  002a3	f3 0f 2c 85 34
	ff ff ff	 cvttss2si eax, DWORD PTR _LotteryItem$[ebp+36]
  002ab	50		 push	 eax
  002ac	0f bf 85 18 ff
	ff ff		 movsx	 eax, WORD PTR _LotteryItem$[ebp+8]
  002b3	50		 push	 eax
  002b4	6b c1 70	 imul	 eax, ecx, 112
  002b7	51		 push	 ecx
  002b8	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  002bd	50		 push	 eax
  002be	56		 push	 esi
  002bf	57		 push	 edi
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0IK@DOPMBJCB@?$FLCashShop?$FN?$FLChaosCardMix?$FN?5?9?5User?$CI@
  002c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4979 : 		lpObj->AccountID, lpObj->Name, ItemAttribute[LotteryItem.m_Type].Name,
; 4980 : 		LotteryItem.m_Type, LotteryItem.m_Level, (int)LotteryItem.m_Durability,
; 4981 : 		LotteryItem.m_Option1, LotteryItem.m_Option2, LotteryItem.m_Option3,
; 4982 : 		btExOption[0], btExOption[1], btExOption[2], btExOption[3], btExOption[4], btExOption[5]);
; 4983 : }

  002cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ce	83 c4 54	 add	 esp, 84			; 00000054H
  002d1	33 cd		 xor	 ecx, ebp
  002d3	5f		 pop	 edi
  002d4	5e		 pop	 esi
  002d5	5b		 pop	 ebx
  002d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002db	8b e5		 mov	 esp, ebp
  002dd	5d		 pop	 ebp
  002de	c2 04 00	 ret	 4
?LotteryItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::LotteryItemMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iBlessPackCount$1$ = -64				; size = 4
_iSoulPackCount$1$ = -60				; size = 4
_iExcItemCount$1$ = -56					; size = 4
tv722 = -52						; size = 4
_Option2$2$ = -48					; size = 4
_iOtherItemCount$1$ = -48				; size = 4
_iNeedChaosMoney$2$ = -44				; size = 4
_iCreationCount$1$ = -44				; size = 4
_iCharmOfLuckCount$1$ = -40				; size = 4
_Rand5$1$ = -36						; size = 4
_Rand3$1$ = -36						; size = 4
_iItemValue$1$ = -36					; size = 4
_iChaosCount$1$ = -32					; size = 4
_iCondorStoneCount$1$ = -28				; size = 4
_Option3$1$ = -24					; size = 4
_iCondorFeatherCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::NewWingChaos_Mix, COMDAT
; _this$ = ecx

; 4518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 4519 : 	lpObj->ChaosLock = TRUE;
; 4520 : 
; 4521 : 	int iExcItemCount = 0;

  00011	33 c0		 xor	 eax, eax

; 4522 : 	int iCondorFeatherCount = 0;

  00013	33 db		 xor	 ebx, ebx
  00015	56		 push	 esi
  00016	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00019	57		 push	 edi

; 4523 : 	int iCondorStoneCount = 0;
; 4524 : 	int iChaosCount = 0;
; 4525 : 	int iSoulPackCount = 0;
; 4526 : 	int iBlessPackCount = 0;
; 4527 : 	int iCreationCount =0;
; 4528 : 	int iOtherItemCount = 0;
; 4529 : 	int iItemValue = 0;
; 4530 : 	int iNeedChaosMoney = 0;
; 4531 : 	int iCharmOfLuckCount = 0;
; 4532 : 
; 4533 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4534 : 
; 4535 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001a	6a 10		 push	 16			; 00000010H
  0001c	89 45 c8	 mov	 DWORD PTR _iExcItemCount$1$[ebp], eax
  0001f	8b f9		 mov	 edi, ecx
  00021	89 45 e4	 mov	 DWORD PTR _iCondorStoneCount$1$[ebp], eax
  00024	89 45 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  00027	89 45 c4	 mov	 DWORD PTR _iSoulPackCount$1$[ebp], eax
  0002a	89 45 c0	 mov	 DWORD PTR _iBlessPackCount$1$[ebp], eax
  0002d	89 45 d4	 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  00030	89 45 d0	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00033	89 45 dc	 mov	 DWORD PTR _iItemValue$1$[ebp], eax
  00036	89 45 d8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00039	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003c	68 86 00 00 00	 push	 134			; 00000086H
  00041	50		 push	 eax
  00042	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0004c	89 5d e8	 mov	 DWORD PTR _iCondorFeatherCount$1$[ebp], ebx
  0004f	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4536 : 	pMsg.Result = CB_ERROR;

  00057	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0005a	33 c0		 xor	 eax, eax
  0005c	89 45 cc	 mov	 DWORD PTR tv722[ebp], eax
  0005f	90		 npad	 1
$LL4@NewWingCha:

; 4539 : 	{
; 4540 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 c8		 add	 ecx, eax
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 2e		 jne	 SHORT $LN77@NewWingCha

; 4541 : 		{
; 4542 : 			if( CheckItemOptions(&lpObj->pChaosBox[n],7,0,0,1,0,1) != FALSE )

  00072	8b 5d cc	 mov	 ebx, DWORD PTR tv722[ebp]
  00075	8b cf		 mov	 ecx, edi
  00077	03 9e 10 12 00
	00		 add	 ebx, DWORD PTR [esi+4624]
  0007d	50		 push	 eax
  0007e	6a 00		 push	 0
  00080	50		 push	 eax
  00081	6a 00		 push	 0
  00083	6a 00		 push	 0
  00085	6a 07		 push	 7
  00087	53		 push	 ebx
  00088	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  0008d	85 c0		 test	 eax, eax
  0008f	74 3a		 je	 SHORT $LN12@NewWingCha

; 4543 : 			{
; 4544 : 				iExcItemCount++;
; 4545 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  00091	8b 45 dc	 mov	 eax, DWORD PTR _iItemValue$1$[ebp]
  00094	ff 45 c8	 inc	 DWORD PTR _iExcItemCount$1$[ebp]
  00097	03 43 78	 add	 eax, DWORD PTR [ebx+120]
  0009a	89 45 dc	 mov	 DWORD PTR _iItemValue$1$[ebp], eax
$LN82@NewWingCha:

; 4560 : 			{
; 4561 : 				iBlessPackCount++;

  0009d	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
$LN77@NewWingCha:
  000a0	8b 4d e4	 mov	 ecx, DWORD PTR _iCondorStoneCount$1$[ebp]
$LN81@NewWingCha:
  000a3	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
$LN2@NewWingCha:

; 4537 : 
; 4538 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000a6	8b 45 cc	 mov	 eax, DWORD PTR tv722[ebp]
  000a9	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  000ae	89 45 cc	 mov	 DWORD PTR tv722[ebp], eax
  000b1	3d 80 1a 00 00	 cmp	 eax, 6784		; 00001a80H
  000b6	7c a8		 jl	 SHORT $LL4@NewWingCha

; 4578 : 			}
; 4579 : 		}
; 4580 : 	}
; 4581 : 
; 4582 : 	if( iCharmOfLuckCount > 10 )

  000b8	83 7d d8 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$1$[ebp], 10 ; 0000000aH
  000bc	0f 8e 8f 00 00
	00		 jle	 $LN28@NewWingCha

; 4583 : 	{
; 4584 : 		pMsg.Result = 0xF0;

  000c2	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 4585 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 4586 : 		lpObj->ChaosLock = FALSE;
; 4587 : 		return;

  000c6	e9 eb 03 00 00	 jmp	 $LN83@NewWingCha
$LN12@NewWingCha:

; 4546 : 			}
; 4547 : 			else if( lpObj->pChaosBox[n].m_Type == iCondorFeather )

  000cb	0f b7 4b 06	 movzx	 ecx, WORD PTR [ebx+6]
  000cf	0f bf c1	 movsx	 eax, cx
  000d2	3b 47 1c	 cmp	 eax, DWORD PTR [edi+28]
  000d5	75 09		 jne	 SHORT $LN14@NewWingCha

; 4548 : 			{
; 4549 : 				iCondorFeatherCount++;

  000d7	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
  000da	43		 inc	 ebx
  000db	89 5d e8	 mov	 DWORD PTR _iCondorFeatherCount$1$[ebp], ebx
  000de	eb c0		 jmp	 SHORT $LN77@NewWingCha
$LN14@NewWingCha:

; 4550 : 			}
; 4551 : 			else if( lpObj->pChaosBox[n].m_Type == iCondorStone )

  000e0	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  000e3	75 0c		 jne	 SHORT $LN16@NewWingCha

; 4552 : 			{
; 4553 : 				iCondorStoneCount++;

  000e5	8b 4d e4	 mov	 ecx, DWORD PTR _iCondorStoneCount$1$[ebp]
  000e8	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
  000eb	41		 inc	 ecx
  000ec	89 4d e4	 mov	 DWORD PTR _iCondorStoneCount$1$[ebp], ecx
  000ef	eb b2		 jmp	 SHORT $LN81@NewWingCha
$LN16@NewWingCha:

; 4554 : 			}
; 4555 : 			else if( lpObj->pChaosBox[n].m_Type == iChaosJewel )

  000f1	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000f4	75 0f		 jne	 SHORT $LN18@NewWingCha

; 4556 : 			{
; 4557 : 				iChaosCount++;

  000f6	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  000f9	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
  000fc	42		 inc	 edx
  000fd	8b 4d e4	 mov	 ecx, DWORD PTR _iCondorStoneCount$1$[ebp]
  00100	89 55 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], edx
  00103	eb a1		 jmp	 SHORT $LN2@NewWingCha
$LN18@NewWingCha:

; 4558 : 			}
; 4559 : 			else if( lpObj->pChaosBox[n].m_Type == iBlessPack )

  00105	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00108	75 05		 jne	 SHORT $LN20@NewWingCha

; 4560 : 			{
; 4561 : 				iBlessPackCount++;

  0010a	ff 45 c0	 inc	 DWORD PTR _iBlessPackCount$1$[ebp]
  0010d	eb 8e		 jmp	 SHORT $LN82@NewWingCha
$LN20@NewWingCha:

; 4562 : 			}
; 4563 : 			else if( lpObj->pChaosBox[n].m_Type == iSoulPack )

  0010f	3b 47 18	 cmp	 eax, DWORD PTR [edi+24]
  00112	75 05		 jne	 SHORT $LN22@NewWingCha

; 4564 : 			{
; 4565 : 				iSoulPackCount++;

  00114	ff 45 c4	 inc	 DWORD PTR _iSoulPackCount$1$[ebp]
  00117	eb 84		 jmp	 SHORT $LN82@NewWingCha
$LN22@NewWingCha:

; 4566 : 			}
; 4567 : 			else if( lpObj->pChaosBox[n].m_Type == iCreationJewel )

  00119	3b 47 10	 cmp	 eax, DWORD PTR [edi+16]
  0011c	75 08		 jne	 SHORT $LN24@NewWingCha

; 4568 : 			{
; 4569 : 				iCreationCount++;

  0011e	ff 45 d4	 inc	 DWORD PTR _iCreationCount$1$[ebp]
  00121	e9 77 ff ff ff	 jmp	 $LN82@NewWingCha
$LN24@NewWingCha:

; 4570 : 			}
; 4571 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )
; 4572 : 			{
; 4573 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;
; 4574 : 			}
; 4575 : 			else

  00126	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  00129	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  0012e	66 3b c8	 cmp	 cx, ax
  00131	8b 4d e4	 mov	 ecx, DWORD PTR _iCondorStoneCount$1$[ebp]
  00134	75 10		 jne	 SHORT $LN26@NewWingCha
  00136	f3 0f 2c 43 24	 cvttss2si eax, DWORD PTR [ebx+36]
  0013b	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
  0013e	01 45 d8	 add	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00141	e9 60 ff ff ff	 jmp	 $LN2@NewWingCha
$LN26@NewWingCha:

; 4576 : 			{
; 4577 : 				iOtherItemCount++;

  00146	ff 45 d0	 inc	 DWORD PTR _iOtherItemCount$1$[ebp]
  00149	8b 5d e8	 mov	 ebx, DWORD PTR _iCondorFeatherCount$1$[ebp]
  0014c	e9 55 ff ff ff	 jmp	 $LN2@NewWingCha
$LN28@NewWingCha:

; 4588 : 	}
; 4589 : 
; 4590 : 	if( iExcItemCount < 1 || 
; 4591 : 		iCondorFeatherCount != 1 ||
; 4592 : 		iCondorStoneCount != 1 ||
; 4593 : 		iChaosCount != 1 ||
; 4594 : 		iSoulPackCount != 1 ||
; 4595 : 		iBlessPackCount != 1 ||
; 4596 : 		iCreationCount != 1 ||

  00151	83 7d c8 01	 cmp	 DWORD PTR _iExcItemCount$1$[ebp], 1
  00155	0f 8c 57 03 00
	00		 jl	 $LN30@NewWingCha
  0015b	83 fb 01	 cmp	 ebx, 1
  0015e	0f 85 4e 03 00
	00		 jne	 $LN30@NewWingCha
  00164	3b cb		 cmp	 ecx, ebx
  00166	0f 85 46 03 00
	00		 jne	 $LN30@NewWingCha
  0016c	3b d3		 cmp	 edx, ebx
  0016e	0f 85 3e 03 00
	00		 jne	 $LN30@NewWingCha
  00174	39 5d c4	 cmp	 DWORD PTR _iSoulPackCount$1$[ebp], ebx
  00177	0f 85 35 03 00
	00		 jne	 $LN30@NewWingCha
  0017d	39 5d c0	 cmp	 DWORD PTR _iBlessPackCount$1$[ebp], ebx
  00180	0f 85 2c 03 00
	00		 jne	 $LN30@NewWingCha
  00186	39 5d d4	 cmp	 DWORD PTR _iCreationCount$1$[ebp], ebx
  00189	0f 85 23 03 00
	00		 jne	 $LN30@NewWingCha
  0018f	8b 45 d0	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  00192	85 c0		 test	 eax, eax
  00194	0f 8f 18 03 00
	00		 jg	 $LN30@NewWingCha

; 4601 : 		lpObj->ChaosLock = FALSE;
; 4602 : 		return;
; 4603 : 	}
; 4604 : 
; 4605 : 	LogChaosItem(lpObj, "ThirdWingLevel2_Mix");

  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FCHPIPIA@ThirdWingLevel2_Mix?$AA@
  0019f	56		 push	 esi
  001a0	8b cf		 mov	 ecx, edi
  001a2	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4606 : 	LogAddTD("[ThirdWing Mix][Level 02] Chaos Mix Start");

  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@OMLKNABI@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5@
  001ac	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4607 : 
; 4608 : #if (__CUSTOM__ == 1)
; 4609 : 
; 4610 : 	if( iItemValue > 0 )

  001b2	8b 45 dc	 mov	 eax, DWORD PTR _iItemValue$1$[ebp]
  001b5	83 c4 04	 add	 esp, 4
  001b8	85 c0		 test	 eax, eax
  001ba	7e 0d		 jle	 SHORT $LN31@NewWingCha

; 4611 : 	{
; 4612 : 		lpObj->ChaosSuccessRate = iItemValue / gc_ChaosMix3rdWing_Div;

  001bc	99		 cdq
  001bd	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gc_ChaosMix3rdWing_Div@@3HA ; gc_ChaosMix3rdWing_Div
  001c3	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN31@NewWingCha:

; 4613 : 	}
; 4614 : 
; 4615 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMix3rdWing_Max )

  001c9	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMix3rdWing_Max@@3HA ; gc_ChaosMix3rdWing_Max
  001d5	3b c1		 cmp	 eax, ecx
  001d7	7e 08		 jle	 SHORT $LN32@NewWingCha

; 4616 : 	{
; 4617 : 		lpObj->ChaosSuccessRate = gc_ChaosMix3rdWing_Max;

  001d9	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx
  001df	eb 0f		 jmp	 SHORT $LN34@NewWingCha
$LN32@NewWingCha:

; 4618 : 	}
; 4619 : 	else if( lpObj->ChaosSuccessRate < 1 )

  001e1	83 f8 01	 cmp	 eax, 1
  001e4	7d 0a		 jge	 SHORT $LN34@NewWingCha

; 4620 : 	{
; 4621 : 		lpObj->ChaosSuccessRate = 1;

  001e6	c7 86 1c 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4636], 1
$LN34@NewWingCha:

; 4622 : 	}
; 4623 : 
; 4624 : #else
; 4625 : 
; 4626 : 	if( iItemValue > 0 )
; 4627 : 	{
; 4628 : 		lpObj->ChaosSuccessRate = iItemValue / 3000000;
; 4629 : 	}
; 4630 : 
; 4631 : 	if( lpObj->ChaosSuccessRate > 40 )
; 4632 : 	{
; 4633 : 		lpObj->ChaosSuccessRate = 40;
; 4634 : 	}
; 4635 : 	else if( lpObj->ChaosSuccessRate < 1 )
; 4636 : 	{
; 4637 : 		lpObj->ChaosSuccessRate = 1;
; 4638 : 	}
; 4639 : 
; 4640 : #endif
; 4641 : 
; 4642 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4643 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  001f0	8b 45 d8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]

; 4644 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4645 : 
; 4646 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f8	01 86 1c 12 00
	00		 add	 DWORD PTR [esi+4636], eax
  001fe	ff 36		 push	 DWORD PTR [esi]
  00200	69 9e 1c 12 00
	00 40 0d 03 00	 imul	 ebx, DWORD PTR [esi+4636], 200000
  0020a	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0020f	8b c8		 mov	 ecx, eax
  00211	8b c3		 mov	 eax, ebx
  00213	f7 e9		 imul	 ecx
  00215	6a 00		 push	 0
  00217	6a 64		 push	 100			; 00000064H
  00219	52		 push	 edx
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 __alldiv
  00220	8b c8		 mov	 ecx, eax

; 4647 : 
; 4648 : 	if ( iChaosTaxMoney < 0 )

  00222	33 c0		 xor	 eax, eax
  00224	85 c9		 test	 ecx, ecx
  00226	0f 48 c8	 cmovs	 ecx, eax

; 4649 : 	{
; 4650 : 		iChaosTaxMoney = 0;
; 4651 : 	}
; 4652 : 
; 4653 : 	iNeedChaosMoney += iChaosTaxMoney;

  00229	03 d9		 add	 ebx, ecx

; 4654 : 
; 4655 : 	if ( iNeedChaosMoney < 0 )

  0022b	0f 48 d8	 cmovs	 ebx, eax

; 4656 : 	{
; 4657 : 		iNeedChaosMoney = 0;
; 4658 : 	}
; 4659 : 
; 4660 : 	if(lpObj->Money < iNeedChaosMoney)

  0022e	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00234	89 5d d4	 mov	 DWORD PTR _iNeedChaosMoney$2$[ebp], ebx
  00237	3b c3		 cmp	 eax, ebx
  00239	7d 09		 jge	 SHORT $LN37@NewWingCha

; 4661 : 	{
; 4662 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0023b	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 4663 : 		
; 4664 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 4665 : 		lpObj->ChaosLock = FALSE;
; 4666 : 		return;

  0023f	e9 72 02 00 00	 jmp	 $LN83@NewWingCha
$LN37@NewWingCha:

; 4667 : 	}
; 4668 : 
; 4669 : 	lpObj->Money -= iNeedChaosMoney;

  00244	2b c3		 sub	 eax, ebx

; 4670 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00246	51		 push	 ecx
  00247	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0024c	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00252	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4671 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  00257	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0025d	ff 36		 push	 DWORD PTR [esi]
  0025f	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00264	83 c4 08	 add	 esp, 8

; 4672 : 
; 4673 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  00267	e8 00 00 00 00	 call	 _rand
  0026c	99		 cdq
  0026d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00272	f7 f9		 idiv	 ecx
  00274	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0027a	0f 8d ea 01 00
	00		 jge	 $LN38@NewWingCha

; 4674 : 	{
; 4675 : 		int RandWing = rand()%7;

  00280	e8 00 00 00 00	 call	 _rand
  00285	99		 cdq
  00286	b9 07 00 00 00	 mov	 ecx, 7
  0028b	f7 f9		 idiv	 ecx

; 4676 : 		int Item = 0;

  0028d	33 db		 xor	 ebx, ebx

; 4677 : 
; 4678 : 		if( RandWing == 0 )

  0028f	85 d2		 test	 edx, edx
  00291	75 05		 jne	 SHORT $LN40@NewWingCha

; 4679 : 		{
; 4680 : 			Item = iStormWings;

  00293	8b 5f 24	 mov	 ebx, DWORD PTR [edi+36]
  00296	eb 3a		 jmp	 SHORT $LN52@NewWingCha
$LN40@NewWingCha:

; 4681 : 		}
; 4682 : 		else if( RandWing == 1 )

  00298	83 fa 01	 cmp	 edx, 1
  0029b	75 05		 jne	 SHORT $LN42@NewWingCha

; 4683 : 		{
; 4684 : 			Item = iRedemptionWings;

  0029d	8b 5f 28	 mov	 ebx, DWORD PTR [edi+40]
  002a0	eb 30		 jmp	 SHORT $LN52@NewWingCha
$LN42@NewWingCha:

; 4685 : 		}
; 4686 : 		else if( RandWing == 2 )

  002a2	83 fa 02	 cmp	 edx, 2
  002a5	75 05		 jne	 SHORT $LN44@NewWingCha

; 4687 : 		{
; 4688 : 			Item = iFortitudeWings;

  002a7	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]
  002aa	eb 26		 jmp	 SHORT $LN52@NewWingCha
$LN44@NewWingCha:

; 4689 : 		}
; 4690 : 		else if( RandWing == 3 )

  002ac	83 fa 03	 cmp	 edx, 3
  002af	75 05		 jne	 SHORT $LN46@NewWingCha

; 4691 : 		{
; 4692 : 			Item = iHurricaneWings;

  002b1	8b 5f 30	 mov	 ebx, DWORD PTR [edi+48]
  002b4	eb 1c		 jmp	 SHORT $LN52@NewWingCha
$LN46@NewWingCha:

; 4693 : 		}
; 4694 : 		else if( RandWing == 4 )

  002b6	83 fa 04	 cmp	 edx, 4
  002b9	75 05		 jne	 SHORT $LN48@NewWingCha

; 4695 : 		{
; 4696 : 			Item = iMonarchMantle;

  002bb	8b 5f 34	 mov	 ebx, DWORD PTR [edi+52]
  002be	eb 12		 jmp	 SHORT $LN52@NewWingCha
$LN48@NewWingCha:

; 4697 : 		}
; 4698 : 		else if( RandWing == 5 )

  002c0	83 fa 05	 cmp	 edx, 5
  002c3	75 05		 jne	 SHORT $LN50@NewWingCha

; 4699 : 		{
; 4700 : 			Item = iDimensionWings;

  002c5	8b 5f 38	 mov	 ebx, DWORD PTR [edi+56]
  002c8	eb 08		 jmp	 SHORT $LN52@NewWingCha
$LN50@NewWingCha:

; 4701 : 		}
; 4702 : 		else if( RandWing == 6 )

  002ca	83 fa 06	 cmp	 edx, 6
  002cd	75 03		 jne	 SHORT $LN52@NewWingCha

; 4703 : 		{
; 4704 : 			Item = iRFCape2;

  002cf	8b 5f 3c	 mov	 ebx, DWORD PTR [edi+60]
$LN52@NewWingCha:

; 4705 : 		}
; 4706 : 
; 4707 : 		int Option1 = 0;
; 4708 : 		int Option2 = 0;
; 4709 : 
; 4710 : 		if( rand() % 1000 <= iOptionRate )

  002d2	e8 00 00 00 00	 call	 _rand
  002d7	99		 cdq
  002d8	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002dd	f7 f9		 idiv	 ecx
  002df	b9 01 00 00 00	 mov	 ecx, 1
  002e4	b8 00 00 00 00	 mov	 eax, 0
  002e9	3b 57 40	 cmp	 edx, DWORD PTR [edi+64]
  002ec	0f 4e c1	 cmovle	 eax, ecx

; 4711 : 		{
; 4712 : 			Option2 = TRUE;
; 4713 : 		}
; 4714 : 
; 4715 : 		int Option3 = 0;
; 4716 : 		int ExcOption = 0;

  002ef	33 ff		 xor	 edi, edi
  002f1	89 45 d0	 mov	 DWORD PTR _Option2$2$[ebp], eax

; 4717 : 
; 4718 : 		int Rand = rand() %2;

  002f4	e8 00 00 00 00	 call	 _rand
  002f9	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  002fe	79 05		 jns	 SHORT $LN78@NewWingCha
  00300	48		 dec	 eax
  00301	83 c8 fe	 or	 eax, -2			; fffffffeH
  00304	40		 inc	 eax
$LN78@NewWingCha:

; 4719 : 		int Rand2;
; 4720 : 
; 4721 : 		switch( Rand )

  00305	83 e8 00	 sub	 eax, 0
  00308	74 21		 je	 SHORT $LN54@NewWingCha
  0030a	83 e8 01	 sub	 eax, 1
  0030d	75 37		 jne	 SHORT $LN55@NewWingCha

; 4727 : 			{
; 4728 : 				ExcOption |= 0x10;
; 4729 : 			}
; 4730 : 			break;
; 4731 : 		case 1:
; 4732 : 
; 4733 : 			Rand2 = rand() % 1000;

  0030f	e8 00 00 00 00	 call	 _rand
  00314	99		 cdq
  00315	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0031a	f7 f9		 idiv	 ecx

; 4734 : 
; 4735 : 			if( Rand2 < 300 )

  0031c	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  00322	7d 22		 jge	 SHORT $LN55@NewWingCha

; 4736 : 			{
; 4737 : 				ExcOption |= 0x20;

  00324	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  00329	eb 1b		 jmp	 SHORT $LN55@NewWingCha
$LN54@NewWingCha:

; 4722 : 		{
; 4723 : 		case 0:
; 4724 : 			Rand2 = rand() % 1000;

  0032b	e8 00 00 00 00	 call	 _rand
  00330	99		 cdq
  00331	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00336	f7 f9		 idiv	 ecx

; 4725 : 
; 4726 : 			if( Rand2 < 400 )

  00338	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0033d	81 fa 90 01 00
	00		 cmp	 edx, 400		; 00000190H
  00343	0f 4c f8	 cmovl	 edi, eax
$LN55@NewWingCha:

; 4738 : 			}
; 4739 : 			break;
; 4740 : 		}
; 4741 : 
; 4742 : 		int Rand3 = rand() % 4;

  00346	e8 00 00 00 00	 call	 _rand
  0034b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00350	79 05		 jns	 SHORT $LN79@NewWingCha
  00352	48		 dec	 eax
  00353	83 c8 fc	 or	 eax, -4			; fffffffcH
  00356	40		 inc	 eax
$LN79@NewWingCha:
  00357	89 45 dc	 mov	 DWORD PTR _Rand3$1$[ebp], eax

; 4743 : 		int Rand4 = rand() % 1000;

  0035a	e8 00 00 00 00	 call	 _rand
  0035f	99		 cdq
  00360	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00365	f7 f9		 idiv	 ecx

; 4744 : 
; 4745 : 		Option3 = 0;
; 4746 : 
; 4747 : 		switch( Rand3 )

  00367	8b 45 dc	 mov	 eax, DWORD PTR _Rand3$1$[ebp]
  0036a	33 c9		 xor	 ecx, ecx
  0036c	89 4d e8	 mov	 DWORD PTR _Option3$1$[ebp], ecx
  0036f	83 e8 01	 sub	 eax, 1
  00372	74 26		 je	 SHORT $LN58@NewWingCha
  00374	83 e8 01	 sub	 eax, 1
  00377	74 13		 je	 SHORT $LN60@NewWingCha
  00379	83 e8 01	 sub	 eax, 1
  0037c	75 2a		 jne	 SHORT $LN59@NewWingCha

; 4761 : 		case 3:
; 4762 : 			if( Rand4 < 30 )

  0037e	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00381	7d 25		 jge	 SHORT $LN59@NewWingCha

; 4763 : 			{
; 4764 : 				Option3 = 3;

  00383	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _Option3$1$[ebp], 3
  0038a	eb 1c		 jmp	 SHORT $LN59@NewWingCha
$LN60@NewWingCha:

; 4751 : 			{
; 4752 : 				Option3 = 1;
; 4753 : 			}
; 4754 : 			break;
; 4755 : 		case 2:
; 4756 : 			if( Rand4 < 60 )

  0038c	83 fa 3c	 cmp	 edx, 60			; 0000003cH
  0038f	7d 17		 jge	 SHORT $LN59@NewWingCha

; 4757 : 			{
; 4758 : 				Option3 = 2;

  00391	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _Option3$1$[ebp], 2

; 4759 : 			}
; 4760 : 			break;

  00398	eb 0e		 jmp	 SHORT $LN59@NewWingCha
$LN58@NewWingCha:

; 4748 : 		{
; 4749 : 		case 1:
; 4750 : 			if( Rand4 < 120 )

  0039a	83 fa 78	 cmp	 edx, 120		; 00000078H
  0039d	b8 01 00 00 00	 mov	 eax, 1
  003a2	0f 4c c8	 cmovl	 ecx, eax
  003a5	89 4d e8	 mov	 DWORD PTR _Option3$1$[ebp], ecx
$LN59@NewWingCha:

; 4765 : 			}
; 4766 : 			break;
; 4767 : 		}
; 4768 : 
; 4769 : 		int Rand5 = rand() % 4;

  003a8	e8 00 00 00 00	 call	 _rand
  003ad	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  003b2	79 05		 jns	 SHORT $LN80@NewWingCha
  003b4	48		 dec	 eax
  003b5	83 c8 fc	 or	 eax, -4			; fffffffcH
  003b8	40		 inc	 eax
$LN80@NewWingCha:
  003b9	89 45 dc	 mov	 DWORD PTR _Rand5$1$[ebp], eax

; 4770 : 		int Rand6 = rand() % 1000;

  003bc	e8 00 00 00 00	 call	 _rand
  003c1	99		 cdq
  003c2	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  003c7	f7 f9		 idiv	 ecx

; 4771 : 
; 4772 : 		switch( Rand5 )

  003c9	8b 45 dc	 mov	 eax, DWORD PTR _Rand5$1$[ebp]
  003cc	83 f8 03	 cmp	 eax, 3
  003cf	77 2d		 ja	 SHORT $LN71@NewWingCha
  003d1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN86@NewWingCha[eax*4]
$LN64@NewWingCha:

; 4773 : 		{
; 4774 : 		case 0:
; 4775 : 			if( Rand6 < 40 )

  003d8	83 fa 28	 cmp	 edx, 40			; 00000028H
  003db	7d 21		 jge	 SHORT $LN71@NewWingCha

; 4776 : 			{
; 4777 : 				ExcOption |= 0x01;

  003dd	83 cf 01	 or	 edi, 1

; 4778 : 			}
; 4779 : 			break;

  003e0	eb 1c		 jmp	 SHORT $LN71@NewWingCha
$LN66@NewWingCha:

; 4780 : 		case 1:
; 4781 : 			if( Rand6 < 20 )

  003e2	83 fa 14	 cmp	 edx, 20			; 00000014H
  003e5	7d 17		 jge	 SHORT $LN71@NewWingCha

; 4782 : 			{
; 4783 : 				ExcOption |= 0x02;

  003e7	83 cf 02	 or	 edi, 2

; 4784 : 			}
; 4785 : 			break;

  003ea	eb 12		 jmp	 SHORT $LN71@NewWingCha
$LN68@NewWingCha:

; 4786 : 		case 2:
; 4787 : 			if( Rand6 < 70 )

  003ec	83 fa 46	 cmp	 edx, 70			; 00000046H
  003ef	7d 0d		 jge	 SHORT $LN71@NewWingCha

; 4788 : 			{
; 4789 : 				ExcOption |= 0x04;

  003f1	83 cf 04	 or	 edi, 4

; 4790 : 			}
; 4791 : 			break;

  003f4	eb 08		 jmp	 SHORT $LN71@NewWingCha
$LN70@NewWingCha:

; 4792 : 		case 3:
; 4793 : 			if( Rand6 < 70 )

  003f6	83 fa 46	 cmp	 edx, 70			; 00000046H
  003f9	7d 03		 jge	 SHORT $LN71@NewWingCha

; 4794 : 			{
; 4795 : 				ExcOption |= 0x08;

  003fb	83 cf 08	 or	 edi, 8
$LN71@NewWingCha:

; 4796 : 			}
; 4797 : 			break;
; 4798 : 		}
; 4799 : #if( __4GAMERS__ == 1 )
; 4800 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4801 : #endif
; 4802 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,0,0,Option1,Option2,Option3,-1,ExcOption,0);

  003fe	8b 45 d0	 mov	 eax, DWORD PTR _Option2$2$[ebp]
  00401	6a 00		 push	 0
  00403	6a 00		 push	 0
  00405	6a 00		 push	 0
  00407	57		 push	 edi
  00408	6a ff		 push	 -1
  0040a	ff 75 e8	 push	 DWORD PTR _Option3$1$[ebp]
  0040d	50		 push	 eax
  0040e	6a 00		 push	 0
  00410	6a 00		 push	 0
  00412	6a 00		 push	 0
  00414	53		 push	 ebx
  00415	6a 00		 push	 0
  00417	6a 00		 push	 0
  00419	68 ff 00 00 00	 push	 255			; 000000ffH
  0041e	ff 36		 push	 DWORD PTR [esi]
  00420	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4803 : 		gObjInventoryCommit(lpObj->m_Index);

  00425	ff 36		 push	 DWORD PTR [esi]
  00427	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0042c	83 c4 40	 add	 esp, 64			; 00000040H

; 4804 : 		LogAddTD("[ThirdWing Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  0042f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00432	ff 75 d8	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00435	ff 75 d4	 push	 DWORD PTR _iNeedChaosMoney$2$[ebp]
  00438	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0043e	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00444	50		 push	 eax
  00445	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00448	50		 push	 eax
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@GGMOACLG@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00454	83 c4 1c	 add	 esp, 28			; 0000001cH
  00457	5f		 pop	 edi
  00458	5e		 pop	 esi
  00459	5b		 pop	 ebx

; 4820 : 	}
; 4821 : }

  0045a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0045d	33 cd		 xor	 ecx, ebp
  0045f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00464	8b e5		 mov	 esp, ebp
  00466	5d		 pop	 ebp
  00467	c2 04 00	 ret	 4
$LN38@NewWingCha:

; 4805 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 4806 : 	}
; 4807 : 	else
; 4808 : 	{
; 4809 : #if( __4GAMERS__ == 1 )
; 4810 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4811 : #endif
; 4812 : 		ChaosBoxWingMixItemDown(lpObj);

  0046a	56		 push	 esi
  0046b	8b cf		 mov	 ecx, edi
  0046d	e8 00 00 00 00	 call	 ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown

; 4813 : 		GCUserChaosBoxSend(lpObj, 0);

  00472	6a 00		 push	 0
  00474	56		 push	 esi
  00475	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4814 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0047a	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0047e	50		 push	 eax
  0047f	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00482	50		 push	 eax
  00483	ff 36		 push	 DWORD PTR [esi]
  00485	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4815 : 
; 4816 : 		LogAddTD("[ThirdWing Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  0048a	ff 75 d8	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  0048d	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00490	53		 push	 ebx
  00491	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00497	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0049d	50		 push	 eax
  0049e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  004a1	50		 push	 eax
  004a2	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@JFJPOIME@?$FLThirdWing?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  004a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  004ad	83 c4 30	 add	 esp, 48			; 00000030H

; 4817 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 4818 : 
; 4819 : 		lpObj->ChaosLock = FALSE;

  004b0	eb 17		 jmp	 SHORT $LN84@NewWingCha
$LN30@NewWingCha:

; 4597 : 		iOtherItemCount > 0 )
; 4598 : 	{
; 4599 : 		pMsg.Result = 7;

  004b2	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN83@NewWingCha:

; 4600 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  004b6	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  004ba	50		 push	 eax
  004bb	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  004be	50		 push	 eax
  004bf	ff 36		 push	 DWORD PTR [esi]
  004c1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  004c6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN84@NewWingCha:

; 4820 : 	}
; 4821 : }

  004c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004cc	5f		 pop	 edi
  004cd	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  004d7	33 cd		 xor	 ecx, ebp
  004d9	5e		 pop	 esi
  004da	5b		 pop	 ebx
  004db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e0	8b e5		 mov	 esp, ebp
  004e2	5d		 pop	 ebp
  004e3	c2 04 00	 ret	 4
  004e6	66 90		 npad	 2
$LN86@NewWingCha:
  004e8	00 00 00 00	 DD	 $LN64@NewWingCha
  004ec	00 00 00 00	 DD	 $LN66@NewWingCha
  004f0	00 00 00 00	 DD	 $LN68@NewWingCha
  004f4	00 00 00 00	 DD	 $LN70@NewWingCha
?NewWingChaos_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::NewWingChaos_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iItemValue$1$ = -56					; size = 4
_iOtherItemCount$1$ = -52				; size = 4
_iCreationCount$1$ = -48				; size = 4
_iSoulPackCount$1$ = -44				; size = 4
_iSetItemCount$1$ = -40					; size = 4
tv490 = -36						; size = 4
_iChaosCount$1$ = -32					; size = 4
_iWingCount$1$ = -28					; size = 4
_iCharmOfLuckCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::CondorFeather_Mix, COMDAT
; _this$ = ecx

; 4344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 4345 : 	lpObj->ChaosLock = TRUE;
; 4346 : 
; 4347 : 	int iWingCount = 0;
; 4348 : 	int iSetItemCount = 0;

  00011	33 c0		 xor	 eax, eax
  00013	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iWingCount$1$[ebp], 0
  0001a	56		 push	 esi
  0001b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001e	8b d9		 mov	 ebx, ecx
  00020	57		 push	 edi

; 4349 : 	int iChaosCount = 0;
; 4350 : 	int iSoulPackCount = 0;
; 4351 : 	int iCreationCount = 0;
; 4352 : 	int iOtherItemCount = 0;
; 4353 : 	int iItemValue = 0;
; 4354 : 	int iNeedChaosMoney = 0;
; 4355 : 	int iCharmOfLuckCount = 0;
; 4356 : 
; 4357 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4358 : 
; 4359 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00021	6a 10		 push	 16			; 00000010H
  00023	89 45 d8	 mov	 DWORD PTR _iSetItemCount$1$[ebp], eax
  00026	89 45 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], eax
  00029	89 45 d4	 mov	 DWORD PTR _iSoulPackCount$1$[ebp], eax
  0002c	89 45 d0	 mov	 DWORD PTR _iCreationCount$1$[ebp], eax
  0002f	89 45 cc	 mov	 DWORD PTR _iOtherItemCount$1$[ebp], eax
  00032	89 45 c8	 mov	 DWORD PTR _iItemValue$1$[ebp], eax
  00035	89 45 e8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00038	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003b	68 86 00 00 00	 push	 134			; 00000086H
  00040	50		 push	 eax
  00041	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0004b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4360 : 	pMsg.Result = CB_ERROR;

  00053	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00057	33 c0		 xor	 eax, eax
  00059	89 45 dc	 mov	 DWORD PTR tv490[ebp], eax
  0005c	0f 1f 40 00	 npad	 4
$LL4@CondorFeat:

; 4363 : 	{
; 4364 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00066	03 c8		 add	 ecx, eax
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 5f		 jne	 SHORT $LN35@CondorFeat

; 4365 : 		{
; 4366 : 			//Item* lpItem,short iLevel,BYTE iOption1,BYTE iOption2,BYTE iOption3,BYTE iSetOption,BYTE iExcOption)
; 4367 : 			if( Is2ndLevelWing(lpObj->pChaosBox[n].m_Type) && CheckItemOptions(&lpObj->pChaosBox[n],9,0,0,1,0,0) )

  00072	8b be 10 12 00
	00		 mov	 edi, DWORD PTR [esi+4624]
  00078	8b cb		 mov	 ecx, ebx
  0007a	03 7d dc	 add	 edi, DWORD PTR tv490[ebp]
  0007d	0f b7 47 06	 movzx	 eax, WORD PTR [edi+6]
  00081	98		 cwde
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ?Is2ndLevelWing@CChaosBox@@QAEHH@Z ; CChaosBox::Is2ndLevelWing
  00088	85 c0		 test	 eax, eax
  0008a	74 21		 je	 SHORT $LN6@CondorFeat
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	6a 01		 push	 1
  00092	6a 00		 push	 0
  00094	6a 00		 push	 0
  00096	6a 09		 push	 9
  00098	57		 push	 edi
  00099	8b cb		 mov	 ecx, ebx
  0009b	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  000a0	85 c0		 test	 eax, eax
  000a2	74 09		 je	 SHORT $LN6@CondorFeat

; 4368 : 			{
; 4369 : 				iWingCount++;

  000a4	8b 4d e4	 mov	 ecx, DWORD PTR _iWingCount$1$[ebp]
  000a7	41		 inc	 ecx
  000a8	89 4d e4	 mov	 DWORD PTR _iWingCount$1$[ebp], ecx
  000ab	eb 27		 jmp	 SHORT $LN36@CondorFeat
$LN6@CondorFeat:

; 4370 : 			}
; 4371 : 			else if( CheckItemOptions(&lpObj->pChaosBox[n],7,0,0,1,1,0)  )

  000ad	6a 00		 push	 0
  000af	6a 01		 push	 1
  000b1	6a 01		 push	 1
  000b3	6a 00		 push	 0
  000b5	6a 00		 push	 0
  000b7	6a 07		 push	 7
  000b9	57		 push	 edi
  000ba	8b cb		 mov	 ecx, ebx
  000bc	e8 00 00 00 00	 call	 ?CheckItemOptions@CChaosBox@@QAEHPAVCItem@@FEEEEE@Z ; CChaosBox::CheckItemOptions
  000c1	85 c0		 test	 eax, eax
  000c3	74 39		 je	 SHORT $LN8@CondorFeat

; 4372 : 			{
; 4373 : 				iSetItemCount++;
; 4374 : 				iItemValue += lpObj->pChaosBox[n].m_BuyMoney;

  000c5	8b 45 c8	 mov	 eax, DWORD PTR _iItemValue$1$[ebp]
  000c8	ff 45 d8	 inc	 DWORD PTR _iSetItemCount$1$[ebp]
  000cb	03 47 78	 add	 eax, DWORD PTR [edi+120]
  000ce	89 45 c8	 mov	 DWORD PTR _iItemValue$1$[ebp], eax
$LN35@CondorFeat:
  000d1	8b 4d e4	 mov	 ecx, DWORD PTR _iWingCount$1$[ebp]
$LN36@CondorFeat:
  000d4	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
$LN37@CondorFeat:
  000d7	8b 7d e8	 mov	 edi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
$LN2@CondorFeat:

; 4361 : 
; 4362 : 	for(int n = 0; n < CHAOS_BOX_SIZE;n++)

  000da	8b 45 dc	 mov	 eax, DWORD PTR tv490[ebp]
  000dd	05 d4 00 00 00	 add	 eax, 212		; 000000d4H
  000e2	89 45 dc	 mov	 DWORD PTR tv490[ebp], eax
  000e5	3d 80 1a 00 00	 cmp	 eax, 6784		; 00001a80H
  000ea	0f 8c 70 ff ff
	ff		 jl	 $LL4@CondorFeat

; 4395 : 			}
; 4396 : 		}
; 4397 : 	}
; 4398 : 
; 4399 : 	if( iCharmOfLuckCount > 10 )

  000f0	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  000f3	7e 59		 jle	 SHORT $LN18@CondorFeat

; 4400 : 	{
; 4401 : 		pMsg.Result = 0xF0;

  000f5	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 4402 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);
; 4403 : 		lpObj->ChaosLock = FALSE;
; 4404 : 		return;

  000f9	e9 1d 02 00 00	 jmp	 $LN38@CondorFeat
$LN8@CondorFeat:

; 4375 : 			}
; 4376 : 			else if( lpObj->pChaosBox[n].m_Type == iChaosJewel )

  000fe	0f b7 4f 06	 movzx	 ecx, WORD PTR [edi+6]
  00102	0f bf c1	 movsx	 eax, cx
  00105	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
  00108	75 0c		 jne	 SHORT $LN10@CondorFeat

; 4377 : 			{
; 4378 : 				iChaosCount++;

  0010a	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  0010d	8b 4d e4	 mov	 ecx, DWORD PTR _iWingCount$1$[ebp]
  00110	42		 inc	 edx
  00111	89 55 e0	 mov	 DWORD PTR _iChaosCount$1$[ebp], edx
  00114	eb c1		 jmp	 SHORT $LN37@CondorFeat
$LN10@CondorFeat:

; 4379 : 			}
; 4380 : 			else if( lpObj->pChaosBox[n].m_Type == iSoulPack )

  00116	3b 43 18	 cmp	 eax, DWORD PTR [ebx+24]
  00119	75 05		 jne	 SHORT $LN12@CondorFeat

; 4381 : 			{
; 4382 : 				iSoulPackCount++;

  0011b	ff 45 d4	 inc	 DWORD PTR _iSoulPackCount$1$[ebp]
  0011e	eb b1		 jmp	 SHORT $LN35@CondorFeat
$LN12@CondorFeat:

; 4383 : 			}
; 4384 : 			else if( lpObj->pChaosBox[n].m_Type == iCreationJewel )

  00120	3b 43 10	 cmp	 eax, DWORD PTR [ebx+16]
  00123	75 05		 jne	 SHORT $LN14@CondorFeat

; 4385 : 			{
; 4386 : 				iCreationCount++;

  00125	ff 45 d0	 inc	 DWORD PTR _iCreationCount$1$[ebp]
  00128	eb a7		 jmp	 SHORT $LN35@CondorFeat
$LN14@CondorFeat:

; 4391 : 			}
; 4392 : 			else

  0012a	8b 55 e0	 mov	 edx, DWORD PTR _iChaosCount$1$[ebp]
  0012d	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  00132	66 3b c8	 cmp	 cx, ax
  00135	8b 4d e4	 mov	 ecx, DWORD PTR _iWingCount$1$[ebp]
  00138	75 0f		 jne	 SHORT $LN16@CondorFeat

; 4387 : 			}
; 4388 : 			else if( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )
; 4389 : 			{
; 4390 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  0013a	f3 0f 2c 47 24	 cvttss2si eax, DWORD PTR [edi+36]
  0013f	8b 7d e8	 mov	 edi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00142	03 f8		 add	 edi, eax
  00144	89 7d e8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], edi

; 4391 : 			}
; 4392 : 			else

  00147	eb 91		 jmp	 SHORT $LN2@CondorFeat
$LN16@CondorFeat:

; 4393 : 			{
; 4394 : 				iOtherItemCount++;

  00149	ff 45 cc	 inc	 DWORD PTR _iOtherItemCount$1$[ebp]
  0014c	eb 89		 jmp	 SHORT $LN37@CondorFeat
$LN18@CondorFeat:

; 4405 : 	}
; 4406 : 
; 4407 : 	if( iWingCount != 1 ||
; 4408 : 		iSetItemCount < 1 ||
; 4409 : 		iChaosCount != 1 ||
; 4410 : 		iSoulPackCount != 1 ||
; 4411 : 		iCreationCount != 1 ||

  0014e	83 f9 01	 cmp	 ecx, 1
  00151	0f 85 c0 01 00
	00		 jne	 $LN20@CondorFeat
  00157	39 4d d8	 cmp	 DWORD PTR _iSetItemCount$1$[ebp], ecx
  0015a	0f 8c b7 01 00
	00		 jl	 $LN20@CondorFeat
  00160	3b d1		 cmp	 edx, ecx
  00162	0f 85 af 01 00
	00		 jne	 $LN20@CondorFeat
  00168	39 4d d4	 cmp	 DWORD PTR _iSoulPackCount$1$[ebp], ecx
  0016b	0f 85 a6 01 00
	00		 jne	 $LN20@CondorFeat
  00171	39 4d d0	 cmp	 DWORD PTR _iCreationCount$1$[ebp], ecx
  00174	0f 85 9d 01 00
	00		 jne	 $LN20@CondorFeat
  0017a	8b 45 cc	 mov	 eax, DWORD PTR _iOtherItemCount$1$[ebp]
  0017d	85 c0		 test	 eax, eax
  0017f	0f 8f 92 01 00
	00		 jg	 $LN20@CondorFeat

; 4416 : 		lpObj->ChaosLock = FALSE;
; 4417 : 		return;
; 4418 : 	}
; 4419 : 
; 4420 : 	LogChaosItem(lpObj, "ThirdWingLevel1_Mix");

  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NEOLPNCO@ThirdWingLevel1_Mix?$AA@
  0018a	56		 push	 esi
  0018b	8b cb		 mov	 ecx, ebx
  0018d	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4421 : 	LogAddTD("[ThirdWing Mix][Level 01] Chaos Mix Start");

  00192	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@EPOMFGLB@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5@
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4422 : 
; 4423 : #if (__CUSTOM__ == 1)
; 4424 : 
; 4425 : 	if( iItemValue > 0 )

  0019d	8b 45 c8	 mov	 eax, DWORD PTR _iItemValue$1$[ebp]
  001a0	83 c4 04	 add	 esp, 4
  001a3	85 c0		 test	 eax, eax
  001a5	7e 0d		 jle	 SHORT $LN21@CondorFeat

; 4426 : 	{
; 4427 : 		lpObj->ChaosSuccessRate = iItemValue / gc_ChaosMixCondor_Div;

  001a7	99		 cdq
  001a8	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gc_ChaosMixCondor_Div@@3HA ; gc_ChaosMixCondor_Div
  001ae	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN21@CondorFeat:

; 4428 : 	}
; 4429 : 
; 4430 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMixCondor_Max )

  001b4	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gc_ChaosMixCondor_Max@@3HA ; gc_ChaosMixCondor_Max
  001c0	3b c1		 cmp	 eax, ecx
  001c2	7e 08		 jle	 SHORT $LN22@CondorFeat

; 4431 : 	{
; 4432 : 		lpObj->ChaosSuccessRate = gc_ChaosMixCondor_Max;

  001c4	89 8e 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], ecx
  001ca	eb 0f		 jmp	 SHORT $LN24@CondorFeat
$LN22@CondorFeat:

; 4433 : 	}
; 4434 : 	else if( lpObj->ChaosSuccessRate < 1 )

  001cc	83 f8 01	 cmp	 eax, 1
  001cf	7d 0a		 jge	 SHORT $LN24@CondorFeat

; 4435 : 	{
; 4436 : 		lpObj->ChaosSuccessRate = 1;

  001d1	c7 86 1c 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4636], 1
$LN24@CondorFeat:

; 4437 : 	}
; 4438 : 
; 4439 : #else
; 4440 : 
; 4441 : 	if( iItemValue > 0 )
; 4442 : 	{
; 4443 : 		lpObj->ChaosSuccessRate = iItemValue / 300000;
; 4444 : 	}
; 4445 : 
; 4446 : 	if( lpObj->ChaosSuccessRate > 60 )
; 4447 : 	{
; 4448 : 		lpObj->ChaosSuccessRate = 60;
; 4449 : 	}
; 4450 : 	else if( lpObj->ChaosSuccessRate < 1 )
; 4451 : 	{
; 4452 : 		lpObj->ChaosSuccessRate = 1;
; 4453 : 	}
; 4454 : 
; 4455 : #endif
; 4456 : 
; 4457 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4458 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  001db	01 be 1c 12 00
	00		 add	 DWORD PTR [esi+4636], edi

; 4459 : 	iNeedChaosMoney = lpObj->ChaosSuccessRate * 200000;
; 4460 : 
; 4461 : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  001e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001e6	ff 36		 push	 DWORD PTR [esi]
  001e8	69 be 1c 12 00
	00 40 0d 03 00	 imul	 edi, DWORD PTR [esi+4636], 200000
  001f2	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001f7	8b c8		 mov	 ecx, eax
  001f9	8b c7		 mov	 eax, edi
  001fb	f7 e9		 imul	 ecx
  001fd	6a 00		 push	 0
  001ff	6a 64		 push	 100			; 00000064H
  00201	52		 push	 edx
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 __alldiv
  00208	8b c8		 mov	 ecx, eax

; 4462 : 
; 4463 : 	if ( iChaosTaxMoney < 0 )

  0020a	33 c0		 xor	 eax, eax
  0020c	85 c9		 test	 ecx, ecx
  0020e	0f 48 c8	 cmovs	 ecx, eax

; 4464 : 	{
; 4465 : 		iChaosTaxMoney = 0;
; 4466 : 	}
; 4467 : 
; 4468 : 	iNeedChaosMoney += iChaosTaxMoney;

  00211	03 f9		 add	 edi, ecx

; 4469 : 
; 4470 : 	if ( iNeedChaosMoney < 0 )

  00213	0f 48 f8	 cmovs	 edi, eax

; 4471 : 	{
; 4472 : 		iNeedChaosMoney = 0;
; 4473 : 	}
; 4474 : 
; 4475 : 	if(lpObj->Money < iNeedChaosMoney )

  00216	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0021c	3b c7		 cmp	 eax, edi
  0021e	7d 09		 jge	 SHORT $LN27@CondorFeat

; 4476 : 	{
; 4477 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00220	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 4478 : 		
; 4479 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 4480 : 		lpObj->ChaosLock = FALSE;
; 4481 : 		return;

  00224	e9 f2 00 00 00	 jmp	 $LN38@CondorFeat
$LN27@CondorFeat:

; 4482 : 	}
; 4483 : 
; 4484 : 	lpObj->Money -= iNeedChaosMoney;

  00229	2b c7		 sub	 eax, edi

; 4485 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0022b	51		 push	 ecx
  0022c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00231	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00237	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4486 : 	GCMoneySend(lpObj->m_Index,lpObj->Money);

  0023c	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00242	ff 36		 push	 DWORD PTR [esi]
  00244	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00249	83 c4 08	 add	 esp, 8

; 4487 : 
; 4488 : 	if( rand() % 100 < lpObj->ChaosSuccessRate )

  0024c	e8 00 00 00 00	 call	 _rand
  00251	99		 cdq
  00252	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00257	f7 f9		 idiv	 ecx
  00259	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0025f	7d 6d		 jge	 SHORT $LN28@CondorFeat

; 4489 : 	{
; 4490 : 		int Item = ITEMGET(13,53);
; 4491 : 		int Dur = 0;
; 4492 : 		int Level = 0;
; 4493 : #if( __4GAMERS__ == 1 )
; 4494 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 4495 : #endif
; 4496 : 		ItemSerialCreateSend(lpObj->m_Index,255,0,0,Item,Level,Dur,0,0,0,-1,0,0);

  00261	6a 00		 push	 0
  00263	6a 00		 push	 0
  00265	6a 00		 push	 0
  00267	6a 00		 push	 0
  00269	6a ff		 push	 -1
  0026b	6a 00		 push	 0
  0026d	6a 00		 push	 0
  0026f	6a 00		 push	 0
  00271	6a 00		 push	 0
  00273	6a 00		 push	 0
  00275	68 35 1a 00 00	 push	 6709			; 00001a35H
  0027a	6a 00		 push	 0
  0027c	6a 00		 push	 0
  0027e	68 ff 00 00 00	 push	 255			; 000000ffH
  00283	ff 36		 push	 DWORD PTR [esi]
  00285	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4497 : 		gObjInventoryCommit(lpObj->m_Index);

  0028a	ff 36		 push	 DWORD PTR [esi]
  0028c	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 4498 : 		LogAddTD("[ThirdWing Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00291	8b 45 e8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00294	83 c4 40	 add	 esp, 64			; 00000040H
  00297	50		 push	 eax
  00298	57		 push	 edi
  00299	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0029f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002a2	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  002a8	50		 push	 eax
  002a9	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002ac	50		 push	 eax
  002ad	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@NNBKAMKF@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  002b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002b8	83 c4 1c	 add	 esp, 28			; 0000001cH
  002bb	5f		 pop	 edi
  002bc	5e		 pop	 esi
  002bd	5b		 pop	 ebx

; 4514 : 	}
; 4515 : }

  002be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c1	33 cd		 xor	 ecx, ebp
  002c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c8	8b e5		 mov	 esp, ebp
  002ca	5d		 pop	 ebp
  002cb	c2 04 00	 ret	 4
$LN28@CondorFeat:

; 4499 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 4500 : 	}
; 4501 : 	else
; 4502 : 	{
; 4503 : #if( __4GAMERS__ == 1 )
; 4504 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 4505 : #endif
; 4506 : 		ChaosBoxWingMixItemDown(lpObj);

  002ce	56		 push	 esi
  002cf	8b cb		 mov	 ecx, ebx
  002d1	e8 00 00 00 00	 call	 ?ChaosBoxWingMixItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxWingMixItemDown

; 4507 : 		GCUserChaosBoxSend(lpObj, 0);

  002d6	6a 00		 push	 0
  002d8	56		 push	 esi
  002d9	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4508 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  002de	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002e2	50		 push	 eax
  002e3	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002e6	50		 push	 eax
  002e7	ff 36		 push	 DWORD PTR [esi]
  002e9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4509 : 
; 4510 : 		LogAddTD("[ThirdWing Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  002ee	8b 45 e8	 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  002f1	50		 push	 eax
  002f2	57		 push	 edi
  002f3	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  002f9	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002fc	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00302	50		 push	 eax
  00303	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00306	50		 push	 eax
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@LDCANMLN@?$FLThirdWing?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CF@
  0030c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00312	83 c4 30	 add	 esp, 48			; 00000030H

; 4511 : 			lpObj->AccountID,lpObj->Name,lpObj->ChaosSuccessRate,lpObj->Money,iNeedChaosMoney,iCharmOfLuckCount);
; 4512 : 
; 4513 : 		lpObj->ChaosLock = FALSE;

  00315	eb 17		 jmp	 SHORT $LN39@CondorFeat
$LN20@CondorFeat:

; 4412 : 		iOtherItemCount > 0 )
; 4413 : 	{
; 4414 : 		pMsg.Result = 7;

  00317	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
$LN38@CondorFeat:

; 4415 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0031b	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0031f	50		 push	 eax
  00320	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00323	50		 push	 eax
  00324	ff 36		 push	 DWORD PTR [esi]
  00326	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@CondorFeat:

; 4514 : 	}
; 4515 : }

  0032e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00331	5f		 pop	 edi
  00332	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0033c	33 cd		 xor	 ecx, ebp
  0033e	5e		 pop	 esi
  0033f	5b		 pop	 ebx
  00340	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c2 04 00	 ret	 4
?CondorFeather_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::CondorFeather_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_iHealthPotionCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv3_Mix, COMDAT
; _this$ = ecx

; 4006 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 4007 : 	int iHealthPotionCount = 0;
; 4008 : 	int iInvalidItemCount = 0;
; 4009 : 	int iChaosMixPrice = 0;
; 4010 : 	int iCharmOfLuckCount = 0;
; 4011 : 
; 4012 : 	PMSG_CHAOSMIXRESULT pMsg;
; 4013 : 
; 4014 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00024	33 db		 xor	 ebx, ebx
  00026	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], 0
  0002d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], 0
  00034	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4015 : 	pMsg.Result = CB_ERROR;

  0003c	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0003f	33 ff		 xor	 edi, edi
$LL4@ShieldPoti:

; 4018 : 	{
; 4019 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00041	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00047	03 cf		 add	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 45		 jne	 SHORT $LN23@ShieldPoti

; 4020 : 		{
; 4021 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,39) )

  00053	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00059	ba 27 1c 00 00	 mov	 edx, 7207		; 00001c27H
  0005e	0f b7 4c 07 06	 movzx	 ecx, WORD PTR [edi+eax+6]
  00063	66 3b ca	 cmp	 cx, dx
  00066	75 10		 jne	 SHORT $LN6@ShieldPoti

; 4022 : 			{
; 4023 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00068	f3 0f 2c 44 07
	24		 cvttss2si eax, DWORD PTR [edi+eax+36]
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00071	03 c8		 add	 ecx, eax
  00073	89 4d e4	 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], ecx
  00076	eb 23		 jmp	 SHORT $LN24@ShieldPoti
$LN6@ShieldPoti:

; 4024 : 			}
; 4025 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00078	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0007d	66 3b ca	 cmp	 cx, dx

; 4028 : 			}
; 4029 : 			else

  00080	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00083	75 0a		 jne	 SHORT $LN8@ShieldPoti

; 4026 : 			{
; 4027 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00085	f3 0f 2c 44 07
	24		 cvttss2si eax, DWORD PTR [edi+eax+36]
  0008b	03 d8		 add	 ebx, eax

; 4028 : 			}
; 4029 : 			else

  0008d	eb 0c		 jmp	 SHORT $LN24@ShieldPoti
$LN8@ShieldPoti:

; 4030 : 			{
; 4031 : 				iInvalidItemCount++;

  0008f	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00092	40		 inc	 eax
  00093	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  00096	eb 06		 jmp	 SHORT $LN2@ShieldPoti
$LN23@ShieldPoti:
  00098	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
$LN24@ShieldPoti:
  0009b	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@ShieldPoti:

; 4016 : 
; 4017 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0009e	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a4	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000aa	7c 95		 jl	 SHORT $LL4@ShieldPoti

; 4032 : 			}
; 4033 : 		}
; 4034 : 	}
; 4035 : 
; 4036 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  000ac	85 c0		 test	 eax, eax
  000ae	7f 0e		 jg	 SHORT $LN11@ShieldPoti
  000b0	83 f9 03	 cmp	 ecx, 3
  000b3	75 09		 jne	 SHORT $LN11@ShieldPoti

; 4039 : 		lpObj->ChaosLock = FALSE;
; 4040 : 
; 4041 : 		return;
; 4042 : 	}
; 4043 : 
; 4044 : 	if ( iCharmOfLuckCount > 10 )

  000b5	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000b8	7e 34		 jle	 SHORT $LN12@ShieldPoti

; 4045 : 	{
; 4046 : 		pMsg.Result = 0xF0;

  000ba	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN11@ShieldPoti:

; 4037 : 	{
; 4038 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000be	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000c2	50		 push	 eax
  000c3	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c6	50		 push	 eax
  000c7	ff 36		 push	 DWORD PTR [esi]
  000c9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@ShieldPoti:

; 4110 : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	5f		 pop	 edi
  000d5	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000df	33 cd		 xor	 ecx, ebp
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
$LN12@ShieldPoti:

; 4047 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 4048 : 		lpObj->ChaosLock = FALSE;
; 4049 : 
; 4050 : 		return;
; 4051 : 	}
; 4052 : 
; 4053 : 	iChaosMixPrice = g_iShieldPotionLv3MixMoney;
; 4054 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000ee	ff 36		 push	 DWORD PTR [esi]
  000f0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv3MixMoney@@3HA ; g_iShieldPotionLv3MixMoney
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000fb	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00100	8b c8		 mov	 ecx, eax
  00102	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00107	0f af cf	 imul	 ecx, edi
  0010a	f7 e9		 imul	 ecx

; 4055 : 
; 4056 : 	if ( iChaosTaxMoney < 0 )

  0010c	b9 00 00 00 00	 mov	 ecx, 0
  00111	c1 fa 05	 sar	 edx, 5
  00114	8b c2		 mov	 eax, edx
  00116	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00119	03 c2		 add	 eax, edx
  0011b	0f 48 c1	 cmovs	 eax, ecx

; 4057 : 	{
; 4058 : 		iChaosTaxMoney = 0;
; 4059 : 	}
; 4060 : 
; 4061 : 	iChaosMixPrice += iChaosTaxMoney;

  0011e	03 f8		 add	 edi, eax

; 4062 : 
; 4063 : 	if ( iChaosMixPrice < 0 )

  00120	0f 48 f9	 cmovs	 edi, ecx

; 4064 : 	{
; 4065 : 		iChaosMixPrice = 0;
; 4066 : 	}
; 4067 : 
; 4068 : 	if ( lpObj->Money < iChaosMixPrice )

  00123	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00129	3b cf		 cmp	 ecx, edi
  0012b	7d 06		 jge	 SHORT $LN15@ShieldPoti

; 4069 : 	{
; 4070 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0012d	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 4071 : 		
; 4072 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 4073 : 		lpObj->ChaosLock = FALSE;
; 4074 : 
; 4075 : 		return;

  00131	eb 8b		 jmp	 SHORT $LN11@ShieldPoti
$LN15@ShieldPoti:

; 4076 : 	}
; 4077 : 
; 4078 : 	lpObj->Money -= iChaosMixPrice;

  00133	2b cf		 sub	 ecx, edi
  00135	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 4079 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0013b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 4080 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00146	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0014c	ff 36		 push	 DWORD PTR [esi]
  0014e	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 4081 : 	
; 4082 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv3 Mix");

  00153	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00156	83 c4 08	 add	 esp, 8
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IMPOJLKH@PotionMix?$FN?$FLShieldPotion?5Lv3?5Mix?$AA@
  0015e	56		 push	 esi
  0015f	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 4083 : 	LogAddTD("[PotionMix][ShieldPotion Lv3 Mix] - Mix Start");

  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PBOACDNC@?$FLPotionMix?$FN?$FLShieldPotion?5Lv3?5Mix@
  00169	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016f	83 c4 04	 add	 esp, 4

; 4084 : 
; 4085 : 	int iRate = rand() % 100;

  00172	e8 00 00 00 00	 call	 _rand
  00177	99		 cdq
  00178	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0017d	f7 f9		 idiv	 ecx

; 4086 : 	iRate -= iCharmOfLuckCount;

  0017f	2b d3		 sub	 edx, ebx

; 4087 : 
; 4088 : 	if ( iRate < g_iShieldPotionLv3MixSuccessRate )

  00181	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv3MixSuccessRate@@3HA ; g_iShieldPotionLv3MixSuccessRate
  00187	7d 56		 jge	 SHORT $LN16@ShieldPoti

; 4089 : 	{
; 4090 : 		int ItemNum = ITEMGET(14,37);
; 4091 : 
; 4092 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00189	8b 06		 mov	 eax, DWORD PTR [esi]
  0018b	6a 00		 push	 0
  0018d	6a 00		 push	 0
  0018f	6a 00		 push	 0
  00191	6a 00		 push	 0
  00193	50		 push	 eax
  00194	6a 00		 push	 0
  00196	6a 00		 push	 0
  00198	6a 00		 push	 0
  0019a	6a 01		 push	 1
  0019c	6a 00		 push	 0
  0019e	68 25 1c 00 00	 push	 7205			; 00001c25H
  001a3	6a 00		 push	 0
  001a5	6a 00		 push	 0
  001a7	68 ff 00 00 00	 push	 255			; 000000ffH
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 4093 : 		::gObjInventoryCommit(lpObj->m_Index);

  001b2	ff 36		 push	 DWORD PTR [esi]
  001b4	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001b9	83 c4 40	 add	 esp, 64			; 00000040H

; 4094 : 
; 4095 : 		LogAddTD("[ChaosMix][Shield Potion] Lv3 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",

  001bc	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001bf	53		 push	 ebx
  001c0	57		 push	 edi
  001c1	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c7	50		 push	 eax
  001c8	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001cb	50		 push	 eax
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@GFFMCKHC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001d7	83 c4 18	 add	 esp, 24			; 00000018H

; 4096 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 4097 : 	}
; 4098 : 	else

  001da	e9 f2 fe ff ff	 jmp	 $LN17@ShieldPoti
$LN16@ShieldPoti:

; 4099 : 	{
; 4100 : 		ChaosBoxInit(lpObj);

  001df	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001e2	56		 push	 esi
  001e3	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 4101 : 		::GCUserChaosBoxSend(lpObj, 0);

  001e8	6a 00		 push	 0
  001ea	56		 push	 esi
  001eb	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 4102 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  001f0	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001f4	50		 push	 eax
  001f5	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001f8	50		 push	 eax
  001f9	ff 36		 push	 DWORD PTR [esi]
  001fb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 4103 : 
; 4104 : 		LogAddTD("[ChaosMix][Shield Potion] Lv3 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00200	53		 push	 ebx
  00201	57		 push	 edi
  00202	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00208	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0020b	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iShieldPotionLv3MixSuccessRate@@3HA ; g_iShieldPotionLv3MixSuccessRate
  00211	50		 push	 eax
  00212	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00215	50		 push	 eax
  00216	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@FNMAJKJN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv3?5Po@
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00221	83 c4 30	 add	 esp, 48			; 00000030H

; 4105 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv3MixSuccessRate,
; 4106 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 4107 : 	}
; 4108 : 
; 4109 : 	lpObj->ChaosLock = FALSE;

  00224	e9 a8 fe ff ff	 jmp	 $LN17@ShieldPoti
?ShieldPotionLv3_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv3_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_iHealthPotionCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv2_Mix, COMDAT
; _this$ = ecx

; 3898 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3899 : 	int iHealthPotionCount = 0;
; 3900 : 	int iInvalidItemCount = 0;
; 3901 : 	int iChaosMixPrice = 0;
; 3902 : 	int iCharmOfLuckCount = 0;
; 3903 : 
; 3904 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3905 : 
; 3906 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00024	33 db		 xor	 ebx, ebx
  00026	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], 0
  0002d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], 0
  00034	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3907 : 	pMsg.Result = CB_ERROR;

  0003c	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0003f	33 ff		 xor	 edi, edi
$LL4@ShieldPoti:

; 3910 : 	{
; 3911 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00041	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00047	03 cf		 add	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 45		 jne	 SHORT $LN23@ShieldPoti

; 3912 : 		{
; 3913 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,38) )

  00053	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00059	ba 26 1c 00 00	 mov	 edx, 7206		; 00001c26H
  0005e	0f b7 4c 07 06	 movzx	 ecx, WORD PTR [edi+eax+6]
  00063	66 3b ca	 cmp	 cx, dx
  00066	75 10		 jne	 SHORT $LN6@ShieldPoti

; 3914 : 			{
; 3915 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00068	f3 0f 2c 44 07
	24		 cvttss2si eax, DWORD PTR [edi+eax+36]
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00071	03 c8		 add	 ecx, eax
  00073	89 4d e4	 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], ecx
  00076	eb 23		 jmp	 SHORT $LN24@ShieldPoti
$LN6@ShieldPoti:

; 3916 : 			}
; 3917 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00078	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0007d	66 3b ca	 cmp	 cx, dx

; 3920 : 			}
; 3921 : 			else

  00080	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00083	75 0a		 jne	 SHORT $LN8@ShieldPoti

; 3918 : 			{
; 3919 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00085	f3 0f 2c 44 07
	24		 cvttss2si eax, DWORD PTR [edi+eax+36]
  0008b	03 d8		 add	 ebx, eax

; 3920 : 			}
; 3921 : 			else

  0008d	eb 0c		 jmp	 SHORT $LN24@ShieldPoti
$LN8@ShieldPoti:

; 3922 : 			{
; 3923 : 				iInvalidItemCount++;

  0008f	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00092	40		 inc	 eax
  00093	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  00096	eb 06		 jmp	 SHORT $LN2@ShieldPoti
$LN23@ShieldPoti:
  00098	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
$LN24@ShieldPoti:
  0009b	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@ShieldPoti:

; 3908 : 
; 3909 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0009e	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a4	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000aa	7c 95		 jl	 SHORT $LL4@ShieldPoti

; 3924 : 			}
; 3925 : 		}
; 3926 : 	}
; 3927 : 
; 3928 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  000ac	85 c0		 test	 eax, eax
  000ae	7f 0e		 jg	 SHORT $LN11@ShieldPoti
  000b0	83 f9 03	 cmp	 ecx, 3
  000b3	75 09		 jne	 SHORT $LN11@ShieldPoti

; 3931 : 		lpObj->ChaosLock = FALSE;
; 3932 : 
; 3933 : 		return;
; 3934 : 	}
; 3935 : 
; 3936 : 	if ( iCharmOfLuckCount > 10 )

  000b5	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000b8	7e 34		 jle	 SHORT $LN12@ShieldPoti

; 3937 : 	{
; 3938 : 		pMsg.Result = 0xF0;

  000ba	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN11@ShieldPoti:

; 3929 : 	{
; 3930 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000be	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000c2	50		 push	 eax
  000c3	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c6	50		 push	 eax
  000c7	ff 36		 push	 DWORD PTR [esi]
  000c9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN17@ShieldPoti:

; 4002 : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	5f		 pop	 edi
  000d5	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000df	33 cd		 xor	 ecx, ebp
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 04 00	 ret	 4
$LN12@ShieldPoti:

; 3939 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3940 : 		lpObj->ChaosLock = FALSE;
; 3941 : 
; 3942 : 		return;
; 3943 : 	}
; 3944 : 
; 3945 : 	iChaosMixPrice = g_iShieldPotionLv2MixMoney;
; 3946 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000ee	ff 36		 push	 DWORD PTR [esi]
  000f0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv2MixMoney@@3HA ; g_iShieldPotionLv2MixMoney
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000fb	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00100	8b c8		 mov	 ecx, eax
  00102	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00107	0f af cf	 imul	 ecx, edi
  0010a	f7 e9		 imul	 ecx

; 3947 : 
; 3948 : 	if ( iChaosTaxMoney < 0 )

  0010c	b9 00 00 00 00	 mov	 ecx, 0
  00111	c1 fa 05	 sar	 edx, 5
  00114	8b c2		 mov	 eax, edx
  00116	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00119	03 c2		 add	 eax, edx
  0011b	0f 48 c1	 cmovs	 eax, ecx

; 3949 : 	{
; 3950 : 		iChaosTaxMoney = 0;
; 3951 : 	}
; 3952 : 
; 3953 : 	iChaosMixPrice += iChaosTaxMoney;

  0011e	03 f8		 add	 edi, eax

; 3954 : 
; 3955 : 	if ( iChaosMixPrice < 0 )

  00120	0f 48 f9	 cmovs	 edi, ecx

; 3956 : 	{
; 3957 : 		iChaosMixPrice = 0;
; 3958 : 	}
; 3959 : 
; 3960 : 	if ( lpObj->Money < iChaosMixPrice )

  00123	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00129	3b cf		 cmp	 ecx, edi
  0012b	7d 06		 jge	 SHORT $LN15@ShieldPoti

; 3961 : 	{
; 3962 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0012d	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3963 : 		
; 3964 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3965 : 		lpObj->ChaosLock = FALSE;
; 3966 : 
; 3967 : 		return;

  00131	eb 8b		 jmp	 SHORT $LN11@ShieldPoti
$LN15@ShieldPoti:

; 3968 : 	}
; 3969 : 
; 3970 : 	lpObj->Money -= iChaosMixPrice;

  00133	2b cf		 sub	 ecx, edi
  00135	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3971 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0013b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3972 : 	
; 3973 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv2 Mix");

  00146	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EHKCEIAC@PotionMix?$FN?$FLShieldPotion?5Lv2?5Mix?$AA@
  0014e	56		 push	 esi
  0014f	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3974 : 	LogAddTD("[PotionMix][ShieldPotion Lv2 Mix] - Mix Start");

  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CGACKDIK@?$FLPotionMix?$FN?$FLShieldPotion?5Lv2?5Mix@
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3975 : 
; 3976 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  0015f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00165	ff 36		 push	 DWORD PTR [esi]
  00167	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3977 : 	int iRate = rand() % 100;

  0016f	e8 00 00 00 00	 call	 _rand
  00174	99		 cdq
  00175	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0017a	f7 f9		 idiv	 ecx

; 3978 : 	iRate -= iCharmOfLuckCount;

  0017c	2b d3		 sub	 edx, ebx

; 3979 : 
; 3980 : 	if ( iRate < g_iShieldPotionLv2MixSuccessRate )

  0017e	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv2MixSuccessRate@@3HA ; g_iShieldPotionLv2MixSuccessRate
  00184	7d 56		 jge	 SHORT $LN16@ShieldPoti

; 3981 : 	{
; 3982 : 		int ItemNum = ITEMGET(14,36);
; 3983 : 
; 3984 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00186	8b 06		 mov	 eax, DWORD PTR [esi]
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 00		 push	 0
  0018e	6a 00		 push	 0
  00190	50		 push	 eax
  00191	6a 00		 push	 0
  00193	6a 00		 push	 0
  00195	6a 00		 push	 0
  00197	6a 01		 push	 1
  00199	6a 00		 push	 0
  0019b	68 24 1c 00 00	 push	 7204			; 00001c24H
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	68 ff 00 00 00	 push	 255			; 000000ffH
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3985 : 		::gObjInventoryCommit(lpObj->m_Index);

  001af	ff 36		 push	 DWORD PTR [esi]
  001b1	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001b6	83 c4 40	 add	 esp, 64			; 00000040H

; 3986 : 
; 3987 : 		LogAddTD("[ChaosMix][Shield Potion] Lv2 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",

  001b9	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001bc	53		 push	 ebx
  001bd	57		 push	 edi
  001be	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c4	50		 push	 eax
  001c5	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001c8	50		 push	 eax
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@KPIPKEPN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001d4	83 c4 18	 add	 esp, 24			; 00000018H

; 3988 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 3989 : 	}
; 3990 : 	else

  001d7	e9 f5 fe ff ff	 jmp	 $LN17@ShieldPoti
$LN16@ShieldPoti:

; 3991 : 	{
; 3992 : 		ChaosBoxInit(lpObj);

  001dc	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001df	56		 push	 esi
  001e0	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3993 : 		::GCUserChaosBoxSend(lpObj, 0);

  001e5	6a 00		 push	 0
  001e7	56		 push	 esi
  001e8	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3994 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  001ed	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001f1	50		 push	 eax
  001f2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001f5	50		 push	 eax
  001f6	ff 36		 push	 DWORD PTR [esi]
  001f8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3995 : 
; 3996 : 		LogAddTD("[ChaosMix][Shield Potion] Lv2 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  001fd	53		 push	 ebx
  001fe	57		 push	 edi
  001ff	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00205	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00208	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iShieldPotionLv2MixSuccessRate@@3HA ; g_iShieldPotionLv2MixSuccessRate
  0020e	50		 push	 eax
  0020f	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00212	50		 push	 eax
  00213	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@BECJDHIC@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv2?5Po@
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0021e	83 c4 30	 add	 esp, 48			; 00000030H

; 3997 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv2MixSuccessRate,
; 3998 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 3999 : 	}
; 4000 : 
; 4001 : 	lpObj->ChaosLock = FALSE;

  00221	e9 ab fe ff ff	 jmp	 $LN17@ShieldPoti
?ShieldPotionLv2_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv2_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_iHealthPotionCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ShieldPotionLv1_Mix, COMDAT
; _this$ = ecx

; 3785 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 3786 : 	int iHealthPotionCount = 0;
; 3787 : 	int iInvalidItemCount = 0;
; 3788 : 	int iChaosMixPrice = 0;
; 3789 : 	int iCharmOfLuckCount = 0;

  00011	33 db		 xor	 ebx, ebx
  00013	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], 0
  00021	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], 0

; 3790 : 
; 3791 : 	if ( g_ShieldSystemOn == FALSE )

  00028	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, ebx ; g_ShieldSystemOn
  0002e	0f 84 b7 00 00
	00		 je	 $LN1@ShieldPoti

; 3792 : 		return;
; 3793 : 
; 3794 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3795 : 
; 3796 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00034	57		 push	 edi
  00035	6a 10		 push	 16			; 00000010H
  00037	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003a	68 86 00 00 00	 push	 134			; 00000086H
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3797 : 	pMsg.Result = CB_ERROR;

  00048	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004b	33 ff		 xor	 edi, edi
  0004d	0f 1f 00	 npad	 3
$LL4@ShieldPoti:

; 3800 : 	{
; 3801 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 45		 jne	 SHORT $LN24@ShieldPoti

; 3802 : 		{
; 3803 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,3) )

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	ba 03 1c 00 00	 mov	 edx, 7171		; 00001c03H
  0006d	0f b7 4c 38 06	 movzx	 ecx, WORD PTR [eax+edi+6]
  00072	66 3b ca	 cmp	 cx, dx
  00075	75 10		 jne	 SHORT $LN7@ShieldPoti

; 3804 : 			{
; 3805 : 				iHealthPotionCount+= (int)lpObj->pChaosBox[n].m_Durability;

  00077	f3 0f 2c 44 38
	24		 cvttss2si eax, DWORD PTR [eax+edi+36]
  0007d	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00080	03 c8		 add	 ecx, eax
  00082	89 4d e4	 mov	 DWORD PTR _iHealthPotionCount$1$[ebp], ecx
  00085	eb 23		 jmp	 SHORT $LN26@ShieldPoti
$LN7@ShieldPoti:

; 3806 : 			}
; 3807 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00087	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0008c	66 3b ca	 cmp	 cx, dx

; 3810 : 			}
; 3811 : 			else

  0008f	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
  00092	75 0a		 jne	 SHORT $LN9@ShieldPoti

; 3808 : 			{
; 3809 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00094	f3 0f 2c 44 38
	24		 cvttss2si eax, DWORD PTR [eax+edi+36]
  0009a	03 d8		 add	 ebx, eax

; 3810 : 			}
; 3811 : 			else

  0009c	eb 0c		 jmp	 SHORT $LN26@ShieldPoti
$LN9@ShieldPoti:

; 3812 : 			{
; 3813 : 				iInvalidItemCount++;

  0009e	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  000a1	40		 inc	 eax
  000a2	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  000a5	eb 06		 jmp	 SHORT $LN2@ShieldPoti
$LN24@ShieldPoti:
  000a7	8b 4d e4	 mov	 ecx, DWORD PTR _iHealthPotionCount$1$[ebp]
$LN26@ShieldPoti:
  000aa	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@ShieldPoti:

; 3798 : 
; 3799 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000ad	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000b3	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000b9	7c 95		 jl	 SHORT $LL4@ShieldPoti

; 3814 : 			}
; 3815 : 		}
; 3816 : 	}
; 3817 : 
; 3818 : 	if ( iInvalidItemCount > 0 || iHealthPotionCount != 3 )

  000bb	85 c0		 test	 eax, eax
  000bd	7f 0e		 jg	 SHORT $LN12@ShieldPoti
  000bf	83 f9 03	 cmp	 ecx, 3
  000c2	75 09		 jne	 SHORT $LN12@ShieldPoti

; 3822 : 
; 3823 : 		return;
; 3824 : 	}
; 3825 : 
; 3826 : 	if ( iCharmOfLuckCount > 10 )

  000c4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000c7	7e 34		 jle	 SHORT $LN13@ShieldPoti

; 3827 : 	{
; 3828 : 		pMsg.Result = 0xF0;

  000c9	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN12@ShieldPoti:

; 3819 : 	{
; 3820 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000cd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000d1	50		 push	 eax
  000d2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d5	50		 push	 eax
  000d6	ff 36		 push	 DWORD PTR [esi]
  000d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN18@ShieldPoti:

; 3821 : 		lpObj->ChaosLock = FALSE;

  000e0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000ea	5f		 pop	 edi
$LN1@ShieldPoti:

; 3892 : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	5e		 pop	 esi
  000ef	33 cd		 xor	 ecx, ebp
  000f1	5b		 pop	 ebx
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
$LN13@ShieldPoti:

; 3829 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3830 : 		lpObj->ChaosLock = FALSE;
; 3831 : 
; 3832 : 		return;
; 3833 : 	}
; 3834 : 
; 3835 : 	iChaosMixPrice = g_iShieldPotionLv1MixMoney;
; 3836 : 	int iChaosTaxMoney = iChaosMixPrice * g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / 100;

  000fd	ff 36		 push	 DWORD PTR [esi]
  000ff	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_iShieldPotionLv1MixMoney@@3HA ; g_iShieldPotionLv1MixMoney
  00105	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0010a	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0010f	8b c8		 mov	 ecx, eax
  00111	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00116	0f af cf	 imul	 ecx, edi
  00119	f7 e9		 imul	 ecx

; 3837 : 
; 3838 : 	if ( iChaosTaxMoney < 0 )

  0011b	b9 00 00 00 00	 mov	 ecx, 0
  00120	c1 fa 05	 sar	 edx, 5
  00123	8b c2		 mov	 eax, edx
  00125	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00128	03 c2		 add	 eax, edx
  0012a	0f 48 c1	 cmovs	 eax, ecx

; 3839 : 	{
; 3840 : 		iChaosTaxMoney = 0;
; 3841 : 	}
; 3842 : 
; 3843 : 	iChaosMixPrice += iChaosTaxMoney;

  0012d	03 f8		 add	 edi, eax

; 3844 : 
; 3845 : 	if ( iChaosMixPrice < 0 )

  0012f	0f 48 f9	 cmovs	 edi, ecx

; 3846 : 	{
; 3847 : 		iChaosMixPrice = 0;
; 3848 : 	}
; 3849 : 
; 3850 : 	if ( lpObj->Money < iChaosMixPrice )

  00132	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  00138	3b cf		 cmp	 ecx, edi
  0013a	7d 06		 jge	 SHORT $LN16@ShieldPoti

; 3851 : 	{
; 3852 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0013c	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3853 : 		
; 3854 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3855 : 		lpObj->ChaosLock = FALSE;
; 3856 : 
; 3857 : 		return;

  00140	eb 8b		 jmp	 SHORT $LN12@ShieldPoti
$LN16@ShieldPoti:

; 3858 : 	}
; 3859 : 
; 3860 : 	lpObj->Money -= iChaosMixPrice;

  00142	2b cf		 sub	 ecx, edi
  00144	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3861 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0014a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3862 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00155	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0015b	ff 36		 push	 DWORD PTR [esi]
  0015d	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 3863 : 
; 3864 : 	LogChaosItem(lpObj, "PotionMix][ShieldPotion Lv1 Mix");

  00162	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00165	83 c4 08	 add	 esp, 8
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MBDGDKKM@PotionMix?$FN?$FLShieldPotion?5Lv1?5Mix?$AA@
  0016d	56		 push	 esi
  0016e	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3865 : 	LogAddTD("[PotionMix][ShieldPotion Lv1 Mix] - Mix Start");

  00173	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IFFECFCD@?$FLPotionMix?$FN?$FLShieldPotion?5Lv1?5Mix@
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0017e	83 c4 04	 add	 esp, 4

; 3866 : 	
; 3867 : 	int iRate = rand() % 100;

  00181	e8 00 00 00 00	 call	 _rand
  00186	99		 cdq
  00187	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0018c	f7 f9		 idiv	 ecx

; 3868 : 	iRate -= iCharmOfLuckCount;

  0018e	2b d3		 sub	 edx, ebx

; 3869 : 
; 3870 : 	if ( iRate < g_iShieldPotionLv1MixSuccessRate )

  00190	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iShieldPotionLv1MixSuccessRate@@3HA ; g_iShieldPotionLv1MixSuccessRate
  00196	7d 56		 jge	 SHORT $LN17@ShieldPoti

; 3871 : 	{
; 3872 : 		int ItemNum = ITEMGET(14,35);
; 3873 : 
; 3874 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, 0, 1, 0, 0, 0, lpObj->m_Index, 0, 0);

  00198	8b 06		 mov	 eax, DWORD PTR [esi]
  0019a	6a 00		 push	 0
  0019c	6a 00		 push	 0
  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	50		 push	 eax
  001a3	6a 00		 push	 0
  001a5	6a 00		 push	 0
  001a7	6a 00		 push	 0
  001a9	6a 01		 push	 1
  001ab	6a 00		 push	 0
  001ad	68 23 1c 00 00	 push	 7203			; 00001c23H
  001b2	6a 00		 push	 0
  001b4	6a 00		 push	 0
  001b6	68 ff 00 00 00	 push	 255			; 000000ffH
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3875 : 		::gObjInventoryCommit(lpObj->m_Index);

  001c1	ff 36		 push	 DWORD PTR [esi]
  001c3	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001c8	83 c4 40	 add	 esp, 64			; 00000040H

; 3876 : 
; 3877 : 		LogAddTD("[ChaosMix][Shield Potion] Lv1 Potion Mix Success [%s][%s], Money(%d-%d), CharmRate : %d",

  001cb	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001ce	53		 push	 ebx
  001cf	57		 push	 edi
  001d0	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001d6	50		 push	 eax
  001d7	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001da	50		 push	 eax
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@CLIKDBCN@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001e6	83 c4 18	 add	 esp, 24			; 00000018H

; 3878 : 			lpObj->AccountID, lpObj->Name, 	lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 3879 : 	}
; 3880 : 	else

  001e9	e9 f2 fe ff ff	 jmp	 $LN18@ShieldPoti
$LN17@ShieldPoti:

; 3881 : 	{
; 3882 : 		ChaosBoxInit(lpObj);

  001ee	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001f1	56		 push	 esi
  001f2	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3883 : 		::GCUserChaosBoxSend(lpObj, 0);

  001f7	6a 00		 push	 0
  001f9	56		 push	 esi
  001fa	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3884 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  001ff	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00203	50		 push	 eax
  00204	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00207	50		 push	 eax
  00208	ff 36		 push	 DWORD PTR [esi]
  0020a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3885 : 
; 3886 : 		LogAddTD("[ChaosMix][Shield Potion] Lv1 Potion Mix [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  0020f	53		 push	 ebx
  00210	57		 push	 edi
  00211	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00217	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0021a	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iShieldPotionLv1MixSuccessRate@@3HA ; g_iShieldPotionLv1MixSuccessRate
  00220	50		 push	 eax
  00221	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00224	50		 push	 eax
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@MOBDMAKD@?$FLChaosMix?$FN?$FLShield?5Potion?$FN?5Lv1?5Po@
  0022a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00230	83 c4 30	 add	 esp, 48			; 00000030H

; 3887 : 			lpObj->AccountID, lpObj->Name, 	g_iShieldPotionLv1MixSuccessRate,
; 3888 : 			lpObj->Money, iChaosMixPrice, iCharmOfLuckCount);
; 3889 : 	}
; 3890 : 
; 3891 : 	lpObj->ChaosLock = FALSE;

  00233	e9 a8 fe ff ff	 jmp	 $LN18@ShieldPoti
?ShieldPotionLv1_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ShieldPotionLv1_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -68						; size = 4
_bFenrirDamageDec$1$ = -64				; size = 4
_bFenrirDamageInc$1$ = -60				; size = 4
_iChaosMoney$2$ = -56					; size = 4
_iDefendStuffPrice$1$ = -52				; size = 4
_iAttackStuffPrice$1$ = -48				; size = 4
_iInvalidItemCount$1$ = -44				; size = 4
_iChaosGemCount$1$ = -40				; size = 4
_iLifeGemCount$1$ = -36					; size = 4
_iStuffCount_01$1$ = -32				; size = 4
_iDefendStuffCount$1$ = -28				; size = 4
_iAttackStuffCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_04Upgrade_Mix, COMDAT
; _this$ = ecx

; 3584 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3585 : 	lpObj->ChaosLock = TRUE;
; 3586 : 	int iStuffCount_01 = 0;
; 3587 : 	int iLifeGemCount = 0;
; 3588 : 	int iChaosGemCount = 0;
; 3589 : 	int iAttackStuffCount = 0;
; 3590 : 	int iDefendStuffCount = 0;
; 3591 : 	int iAttackStuffPrice = 0;

  00015	33 c0		 xor	 eax, eax
  00017	57		 push	 edi

; 3592 : 	int iDefendStuffPrice = 0;
; 3593 : 	int iInvalidItemCount = 0;
; 3594 : 	int iChaosMoney = 0;
; 3595 : 	BOOL bFenrirDamageInc = FALSE;
; 3596 : 	BOOL bFenrirDamageDec = FALSE;
; 3597 : 	int iCharmOfLuckCount = 0;
; 3598 : 
; 3599 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3600 : 
; 3601 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	33 ff		 xor	 edi, edi
  0001c	89 45 d0	 mov	 DWORD PTR _iAttackStuffPrice$1$[ebp], eax
  0001f	89 45 cc	 mov	 DWORD PTR _iDefendStuffPrice$1$[ebp], eax
  00022	33 db		 xor	 ebx, ebx
  00024	89 45 c8	 mov	 DWORD PTR _iChaosMoney$2$[ebp], eax
  00027	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0002a	89 4d bc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002d	33 c9		 xor	 ecx, ecx
  0002f	68 86 00 00 00	 push	 134			; 00000086H
  00034	50		 push	 eax
  00035	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0003f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iStuffCount_01$1$[ebp], 0
  00046	89 7d dc	 mov	 DWORD PTR _iLifeGemCount$1$[ebp], edi
  00049	89 7d d8	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], edi
  0004c	89 7d e8	 mov	 DWORD PTR _iAttackStuffCount$1$[ebp], edi
  0004f	89 7d e4	 mov	 DWORD PTR _iDefendStuffCount$1$[ebp], edi
  00052	89 4d d4	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ecx
  00055	89 4d c4	 mov	 DWORD PTR _bFenrirDamageInc$1$[ebp], ecx
  00058	89 4d c0	 mov	 DWORD PTR _bFenrirDamageDec$1$[ebp], ecx
  0005b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3602 : 	pMsg.Result = CB_ERROR;

  00063	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@Fenrir_04U:

; 3606 : 	{
; 3607 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00070	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00076	03 cf		 add	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0007d	83 f8 01	 cmp	 eax, 1
  00080	75 2b		 jne	 SHORT $LN41@Fenrir_04U

; 3608 : 		{
; 3609 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,37) )

  00082	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00088	ba 25 1a 00 00	 mov	 edx, 6693		; 00001a25H
  0008d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00092	66 3b c2	 cmp	 ax, dx
  00095	75 09		 jne	 SHORT $LN6@Fenrir_04U

; 3610 : 			{
; 3611 : 				iStuffCount_01 ++;

  00097	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
  0009a	41		 inc	 ecx
  0009b	89 4d e0	 mov	 DWORD PTR _iStuffCount_01$1$[ebp], ecx
  0009e	eb 10		 jmp	 SHORT $LN45@Fenrir_04U
$LN6@Fenrir_04U:

; 3612 : 			}
; 3613 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  000a0	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  000a5	66 3b c2	 cmp	 ax, dx
  000a8	75 76		 jne	 SHORT $LN8@Fenrir_04U

; 3614 : 			{
; 3615 : 				iLifeGemCount ++;

  000aa	ff 45 dc	 inc	 DWORD PTR _iLifeGemCount$1$[ebp]
$LN41@Fenrir_04U:
  000ad	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
$LN45@Fenrir_04U:
  000b0	8b 45 e8	 mov	 eax, DWORD PTR _iAttackStuffCount$1$[ebp]
$LN48@Fenrir_04U:
  000b3	8b 55 e4	 mov	 edx, DWORD PTR _iDefendStuffCount$1$[ebp]
$LN2@Fenrir_04U:

; 3603 : 
; 3604 : 
; 3605 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000b6	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000bc	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000c2	7c ac		 jl	 SHORT $LL4@Fenrir_04U

; 3644 : 			}
; 3645 : 		}
; 3646 : 	}
; 3647 : 
; 3648 : 	if ( iStuffCount_01 != 1 || iLifeGemCount != 5 || iChaosGemCount != 1 || ( iAttackStuffCount == 0 && iDefendStuffCount == 0 ) || iInvalidItemCount > 0 )

  000c4	83 f9 01	 cmp	 ecx, 1
  000c7	75 27		 jne	 SHORT $LN19@Fenrir_04U
  000c9	83 7d dc 05	 cmp	 DWORD PTR _iLifeGemCount$1$[ebp], 5
  000cd	75 21		 jne	 SHORT $LN19@Fenrir_04U
  000cf	39 4d d8	 cmp	 DWORD PTR _iChaosGemCount$1$[ebp], ecx
  000d2	75 1c		 jne	 SHORT $LN19@Fenrir_04U
  000d4	85 c0		 test	 eax, eax
  000d6	75 04		 jne	 SHORT $LN20@Fenrir_04U
  000d8	85 d2		 test	 edx, edx
  000da	74 14		 je	 SHORT $LN19@Fenrir_04U
$LN20@Fenrir_04U:
  000dc	8b 4d d4	 mov	 ecx, DWORD PTR _iInvalidItemCount$1$[ebp]
  000df	85 c9		 test	 ecx, ecx
  000e1	7f 0d		 jg	 SHORT $LN19@Fenrir_04U

; 3652 : 
; 3653 : 		return;
; 3654 : 	}
; 3655 : 	
; 3656 : 	if ( iCharmOfLuckCount > 10 )

  000e3	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000e6	0f 8e eb 00 00
	00		 jle	 $LN21@Fenrir_04U

; 3657 : 	{
; 3658 : 		pMsg.Result = 0xF0;

  000ec	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN19@Fenrir_04U:

; 3649 : 	{
; 3650 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000f0	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000f4	50		 push	 eax
  000f5	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000f8	50		 push	 eax
  000f9	ff 36		 push	 DWORD PTR [esi]
  000fb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN49@Fenrir_04U:

; 3651 : 		lpObj->ChaosLock = FALSE;

  00103	5f		 pop	 edi
  00104	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx

; 3778 : 	}
; 3779 : }

  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
$LN8@Fenrir_04U:

; 3616 : 			}
; 3617 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00120	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00125	66 3b c2	 cmp	 ax, dx
  00128	75 08		 jne	 SHORT $LN10@Fenrir_04U

; 3618 : 			{
; 3619 : 				iChaosGemCount++;

  0012a	ff 45 d8	 inc	 DWORD PTR _iChaosGemCount$1$[ebp]

; 3620 : 			}
; 3621 : 			else if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(0,0) &&

  0012d	e9 7b ff ff ff	 jmp	 $LN41@Fenrir_04U
$LN10@Fenrir_04U:

; 3622 : 					  lpObj->pChaosBox[n].m_Type < ITEMGET(6,0) &&
; 3623 : 					  lpObj->pChaosBox[n].m_Level >= 4 &&

  00132	ba 00 0c 00 00	 mov	 edx, 3072		; 00000c00H
  00137	66 85 c0	 test	 ax, ax
  0013a	78 30		 js	 SHORT $LN12@Fenrir_04U
  0013c	66 3b c2	 cmp	 ax, dx
  0013f	7d 30		 jge	 SHORT $LN47@Fenrir_04U
  00141	66 83 7c 39 08
	04		 cmp	 WORD PTR [ecx+edi+8], 4
  00147	7c 23		 jl	 SHORT $LN12@Fenrir_04U
  00149	80 bc 39 92 00
	00 00 01	 cmp	 BYTE PTR [ecx+edi+146], 1
  00151	72 19		 jb	 SHORT $LN12@Fenrir_04U

; 3624 : 					  lpObj->pChaosBox[n].m_Option3 >= 1)
; 3625 : 			{
; 3626 : 				iAttackStuffCount++;

  00153	8b 45 e8	 mov	 eax, DWORD PTR _iAttackStuffCount$1$[ebp]

; 3627 : 				iAttackStuffPrice += lpObj->pChaosBox[n].m_BuyMoney;

  00156	8b 55 d0	 mov	 edx, DWORD PTR _iAttackStuffPrice$1$[ebp]
  00159	40		 inc	 eax
  0015a	03 54 39 78	 add	 edx, DWORD PTR [ecx+edi+120]

; 3628 : 			}
; 3629 : 			else if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(6,0) &&

  0015e	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
  00161	89 45 e8	 mov	 DWORD PTR _iAttackStuffCount$1$[ebp], eax
  00164	89 55 d0	 mov	 DWORD PTR _iAttackStuffPrice$1$[ebp], edx
  00167	e9 47 ff ff ff	 jmp	 $LN48@Fenrir_04U
$LN12@Fenrir_04U:

; 3630 : 					  lpObj->pChaosBox[n].m_Type < ITEMGET(12,0) &&
; 3631 : 					  lpObj->pChaosBox[n].m_Level >= 4 &&

  0016c	66 3b c2	 cmp	 ax, dx
  0016f	7c 38		 jl	 SHORT $LN14@Fenrir_04U
$LN47@Fenrir_04U:
  00171	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  00176	66 3b c2	 cmp	 ax, dx
  00179	7d 2e		 jge	 SHORT $LN14@Fenrir_04U
  0017b	66 83 7c 39 08
	04		 cmp	 WORD PTR [ecx+edi+8], 4
  00181	7c 26		 jl	 SHORT $LN14@Fenrir_04U
  00183	80 bc 39 92 00
	00 00 01	 cmp	 BYTE PTR [ecx+edi+146], 1
  0018b	72 1c		 jb	 SHORT $LN14@Fenrir_04U

; 3632 : 					  lpObj->pChaosBox[n].m_Option3 >= 1)
; 3633 : 			{
; 3634 : 				iDefendStuffCount++;

  0018d	8b 55 e4	 mov	 edx, DWORD PTR _iDefendStuffCount$1$[ebp]

; 3635 : 				iDefendStuffPrice += lpObj->pChaosBox[n].m_BuyMoney;

  00190	8b 45 cc	 mov	 eax, DWORD PTR _iDefendStuffPrice$1$[ebp]
  00193	42		 inc	 edx
  00194	03 44 39 78	 add	 eax, DWORD PTR [ecx+edi+120]
  00198	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
  0019b	89 45 cc	 mov	 DWORD PTR _iDefendStuffPrice$1$[ebp], eax
  0019e	8b 45 e8	 mov	 eax, DWORD PTR _iAttackStuffCount$1$[ebp]
  001a1	89 55 e4	 mov	 DWORD PTR _iDefendStuffCount$1$[ebp], edx
  001a4	e9 0d ff ff ff	 jmp	 $LN2@Fenrir_04U
$LN14@Fenrir_04U:

; 3636 : 			}
; 3637 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  001a9	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  001ae	66 3b c2	 cmp	 ax, dx

; 3638 : 			{
; 3639 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;
; 3640 : 			}
; 3641 : 			else

  001b1	8b 55 e4	 mov	 edx, DWORD PTR _iDefendStuffCount$1$[ebp]
  001b4	75 13		 jne	 SHORT $LN16@Fenrir_04U
  001b6	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  001bc	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
  001bf	03 d8		 add	 ebx, eax
  001c1	8b 45 e8	 mov	 eax, DWORD PTR _iAttackStuffCount$1$[ebp]
  001c4	e9 ed fe ff ff	 jmp	 $LN2@Fenrir_04U
$LN16@Fenrir_04U:

; 3642 : 			{
; 3643 : 				iInvalidItemCount++;

  001c9	ff 45 d4	 inc	 DWORD PTR _iInvalidItemCount$1$[ebp]
  001cc	8b 45 e8	 mov	 eax, DWORD PTR _iAttackStuffCount$1$[ebp]
  001cf	8b 4d e0	 mov	 ecx, DWORD PTR _iStuffCount_01$1$[ebp]
  001d2	e9 df fe ff ff	 jmp	 $LN2@Fenrir_04U
$LN21@Fenrir_04U:

; 3659 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3660 : 		lpObj->ChaosLock = FALSE;
; 3661 : 
; 3662 : 		return;
; 3663 : 	}
; 3664 : 
; 3665 : 	if ( iAttackStuffCount > 0 )

  001d7	85 c0		 test	 eax, eax
  001d9	7e 10		 jle	 SHORT $LN43@Fenrir_04U

; 3666 : 	{
; 3667 : 		bFenrirDamageInc = TRUE;
; 3668 : 		iChaosMoney = iAttackStuffPrice;

  001db	8b 45 d0	 mov	 eax, DWORD PTR _iAttackStuffPrice$1$[ebp]
  001de	bf 01 00 00 00	 mov	 edi, 1
  001e3	89 7d c4	 mov	 DWORD PTR _bFenrirDamageInc$1$[ebp], edi
  001e6	89 45 c8	 mov	 DWORD PTR _iChaosMoney$2$[ebp], eax
  001e9	eb 02		 jmp	 SHORT $LN22@Fenrir_04U
$LN43@Fenrir_04U:
  001eb	33 ff		 xor	 edi, edi
$LN22@Fenrir_04U:

; 3669 : 	}
; 3670 : 
; 3671 : 	if ( iDefendStuffCount > 0 )

  001ed	85 d2		 test	 edx, edx
  001ef	7e 10		 jle	 SHORT $LN42@Fenrir_04U

; 3672 : 	{
; 3673 : 		bFenrirDamageDec = TRUE;
; 3674 : 		iChaosMoney = iDefendStuffPrice;

  001f1	8b 45 cc	 mov	 eax, DWORD PTR _iDefendStuffPrice$1$[ebp]
  001f4	b9 01 00 00 00	 mov	 ecx, 1
  001f9	89 4d c0	 mov	 DWORD PTR _bFenrirDamageDec$1$[ebp], ecx
  001fc	89 45 c8	 mov	 DWORD PTR _iChaosMoney$2$[ebp], eax
  001ff	eb 02		 jmp	 SHORT $LN23@Fenrir_04U
$LN42@Fenrir_04U:
  00201	33 c9		 xor	 ecx, ecx
$LN23@Fenrir_04U:

; 3675 : 	}
; 3676 : 
; 3677 : 	if ( bFenrirDamageInc && bFenrirDamageDec )

  00203	85 ff		 test	 edi, edi
  00205	74 09		 je	 SHORT $LN40@Fenrir_04U
  00207	85 c9		 test	 ecx, ecx
  00209	74 0d		 je	 SHORT $LN25@Fenrir_04U

; 3678 : 	{
; 3679 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3680 : 		lpObj->ChaosLock = FALSE;
; 3681 : 
; 3682 : 		return;

  0020b	e9 e0 fe ff ff	 jmp	 $LN19@Fenrir_04U
$LN40@Fenrir_04U:

; 3683 : 	}
; 3684 : 
; 3685 : 	if ( !bFenrirDamageInc && !bFenrirDamageDec )

  00210	85 c9		 test	 ecx, ecx
  00212	0f 84 d8 fe ff
	ff		 je	 $LN19@Fenrir_04U
$LN25@Fenrir_04U:

; 3686 : 	{
; 3687 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3688 : 		lpObj->ChaosLock = FALSE;
; 3689 : 
; 3690 : 		return;
; 3691 : 	}
; 3692 : 
; 3693 : 	LogChaosItem(lpObj, "Fenrir_04Level_Mix");

  00218	8b 4d bc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CMBAEEFO@Fenrir_04Level_Mix?$AA@
  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3694 : 	LogAddTD("[Fenrir Mix][Level 04] Chaos Mix Start");

  00226	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GFKDABEJ@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5Chaos?5Mix@
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00231	83 c4 04	 add	 esp, 4

; 3695 : 
; 3696 : 	int nChaosNeedMoney = 10000000;
; 3697 : 
; 3698 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00234	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00239	ff 36		 push	 DWORD PTR [esi]
  0023b	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00240	8b c8		 mov	 ecx, eax
  00242	b8 80 96 98 00	 mov	 eax, 10000000		; 00989680H
  00247	f7 e9		 imul	 ecx
  00249	6a 00		 push	 0
  0024b	6a 64		 push	 100			; 00000064H
  0024d	52		 push	 edx
  0024e	50		 push	 eax
  0024f	e8 00 00 00 00	 call	 __alldiv

; 3699 : 
; 3700 : 	if ( iChaosTaxMoney < 0 )

  00254	33 c9		 xor	 ecx, ecx
  00256	85 c0		 test	 eax, eax
  00258	0f 48 c1	 cmovs	 eax, ecx

; 3701 : 	{
; 3702 : 		iChaosTaxMoney = 0;
; 3703 : 	}
; 3704 : 
; 3705 : 	nChaosNeedMoney += iChaosTaxMoney;

  0025b	8d b8 80 96 98
	00		 lea	 edi, DWORD PTR [eax+10000000]

; 3706 : 
; 3707 : 	if ( nChaosNeedMoney < 0 )

  00261	85 ff		 test	 edi, edi
  00263	0f 48 f9	 cmovs	 edi, ecx

; 3708 : 	{
; 3709 : 		nChaosNeedMoney = 0;
; 3710 : 	}
; 3711 : 
; 3712 : 	if ( lpObj->Money < nChaosNeedMoney )

  00266	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0026c	3b cf		 cmp	 ecx, edi
  0026e	7d 09		 jge	 SHORT $LN28@Fenrir_04U

; 3713 : 	{
; 3714 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  00270	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3715 : 		
; 3716 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3717 : 		lpObj->ChaosLock = FALSE;
; 3718 : 
; 3719 : 		return;

  00274	e9 77 fe ff ff	 jmp	 $LN19@Fenrir_04U
$LN28@Fenrir_04U:

; 3720 : 	}
; 3721 : 
; 3722 : 	lpObj->Money -= nChaosNeedMoney;

  00279	2b cf		 sub	 ecx, edi
  0027b	89 8e cc 00 00
	00		 mov	 DWORD PTR [esi+204], ecx

; 3723 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00281	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3724 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  0028c	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00292	ff 36		 push	 DWORD PTR [esi]
  00294	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 3725 : 
; 3726 : 	if ( iChaosMoney > 1000000 )

  00299	8b 45 c8	 mov	 eax, DWORD PTR _iChaosMoney$2$[ebp]
  0029c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  002a1	83 c4 08	 add	 esp, 8
  002a4	3b c1		 cmp	 eax, ecx
  002a6	0f 4f c1	 cmovg	 eax, ecx

; 3727 : 		iChaosMoney = 1000000;
; 3728 : 
; 3729 : 	lpObj->ChaosSuccessRate = iChaosMoney * 100 / 1000000;

  002a9	6b c8 64	 imul	 ecx, eax, 100
  002ac	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  002b1	f7 e9		 imul	 ecx

; 3730 : 
; 3731 : 	if ( lpObj->ChaosSuccessRate > 79 )

  002b3	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  002b8	c1 fa 12	 sar	 edx, 18			; 00000012H
  002bb	8b c2		 mov	 eax, edx
  002bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002c0	03 c2		 add	 eax, edx
  002c2	3b c1		 cmp	 eax, ecx
  002c4	0f 4f c1	 cmovg	 eax, ecx
  002c7	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 3732 : 		lpObj->ChaosSuccessRate = 79;
; 3733 : 
; 3734 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  002cd	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx

; 3735 : 
; 3736 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  002d3	e8 00 00 00 00	 call	 _rand
  002d8	99		 cdq
  002d9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002de	f7 f9		 idiv	 ecx
  002e0	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  002e6	0f 8d 85 00 00
	00		 jge	 $LN31@Fenrir_04U

; 3737 : 	{
; 3738 : 		int type = ITEMGET(13,37);
; 3739 : 		int level = 0;
; 3740 : 		int dur = 255;
; 3741 : 		int op1 = 1;
; 3742 : 		int nop = 0;
; 3743 : 
; 3744 : 		if ( bFenrirDamageInc )

  002ec	8b 4d c4	 mov	 ecx, DWORD PTR _bFenrirDamageInc$1$[ebp]
  002ef	33 c0		 xor	 eax, eax
  002f1	85 c9		 test	 ecx, ecx
  002f3	ba 01 00 00 00	 mov	 edx, 1

; 3745 : 		{
; 3746 : 			nop |= 1;
; 3747 : 		}
; 3748 : 
; 3749 : 		if ( bFenrirDamageDec )

  002f8	8b 4d c0	 mov	 ecx, DWORD PTR _bFenrirDamageDec$1$[ebp]
  002fb	0f 45 c2	 cmovne	 eax, edx
  002fe	85 c9		 test	 ecx, ecx
  00300	74 03		 je	 SHORT $LN34@Fenrir_04U

; 3750 : 		{
; 3751 : 			nop |= 2;

  00302	83 c8 02	 or	 eax, 2
$LN34@Fenrir_04U:

; 3752 : 		}
; 3753 : 
; 3754 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, op1, 0, 0, -1, nop, 0);

  00305	6a 00		 push	 0
  00307	6a 00		 push	 0
  00309	6a 00		 push	 0
  0030b	50		 push	 eax
  0030c	6a ff		 push	 -1
  0030e	6a 00		 push	 0
  00310	6a 00		 push	 0
  00312	6a 01		 push	 1
  00314	68 ff 00 00 00	 push	 255			; 000000ffH
  00319	6a 00		 push	 0
  0031b	68 25 1a 00 00	 push	 6693			; 00001a25H
  00320	6a 00		 push	 0
  00322	6a 00		 push	 0
  00324	68 ff 00 00 00	 push	 255			; 000000ffH
  00329	ff 36		 push	 DWORD PTR [esi]
  0032b	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3755 : 		::gObjInventoryCommit(lpObj->m_Index);

  00330	ff 36		 push	 DWORD PTR [esi]
  00332	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00337	83 c4 40	 add	 esp, 64			; 00000040H

; 3756 : #if( __4GAMERS__ == 1 )
; 3757 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3758 : #endif
; 3759 : 		LogAddTD("[Fenrir Mix][Level 04] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  0033a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0033d	53		 push	 ebx
  0033e	57		 push	 edi
  0033f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00345	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0034b	50		 push	 eax
  0034c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0034f	50		 push	 eax
  00350	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@NJDPFBHB@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3778 : 	}
; 3779 : }

  0035b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00361	33 cd		 xor	 ecx, ebp
  00363	5f		 pop	 edi
  00364	5e		 pop	 esi
  00365	5b		 pop	 ebx
  00366	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036b	8b e5		 mov	 esp, ebp
  0036d	5d		 pop	 ebp
  0036e	c2 04 00	 ret	 4
$LN31@Fenrir_04U:

; 3760 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3761 : 			iCharmOfLuckCount);
; 3762 : 
; 3763 : 	}
; 3764 : 	else
; 3765 : 	{
; 3766 : #if( __4GAMERS__ == 1 )
; 3767 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3768 : #endif
; 3769 : 		ChaosBoxInit(lpObj);

  00371	8b 4d bc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00374	56		 push	 esi
  00375	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3770 : 		::GCUserChaosBoxSend(lpObj, 0);

  0037a	6a 00		 push	 0
  0037c	56		 push	 esi
  0037d	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3771 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00382	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00386	50		 push	 eax
  00387	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0038a	50		 push	 eax
  0038b	ff 36		 push	 DWORD PTR [esi]
  0038d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3772 : 
; 3773 : 		LogAddTD("[Fenrir Mix][Level 04] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00392	53		 push	 ebx
  00393	57		 push	 edi
  00394	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0039a	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0039d	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  003a3	50		 push	 eax
  003a4	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  003a7	50		 push	 eax
  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@GDMLAIBE@?$FLFenrir?5Mix?$FN?$FLLevel?504?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  003ad	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003b3	83 c4 30	 add	 esp, 48			; 00000030H

; 3774 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3775 : 			iCharmOfLuckCount);
; 3776 : 
; 3777 : 		lpObj->ChaosLock = FALSE;

  003b6	e9 48 fd ff ff	 jmp	 $LN49@Fenrir_04U
?Fenrir_04Upgrade_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_04Upgrade_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_iLifeGemCount$1$ = -36					; size = 4
_iStuffCount_01$1$ = -32				; size = 4
_iChaosGemCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_03Level_Mix, COMDAT
; _this$ = ecx

; 3454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3455 : 	lpObj->ChaosLock = TRUE;
; 3456 : 	int iStuffCount_01 = 0;
; 3457 : 	int iLifeGemCount = 0;
; 3458 : 	int iChaosGemCount = 0;
; 3459 : 	int iInvalidItemCount = 0;
; 3460 : 	int iChaosMoney = 0;
; 3461 : 	int iCharmOfLuckCount = 0;
; 3462 : 
; 3463 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3464 : 
; 3465 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	33 d2		 xor	 edx, edx
  0001d	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iStuffCount_01$1$[ebp], 0
  00039	89 55 dc	 mov	 DWORD PTR _iLifeGemCount$1$[ebp], edx
  0003c	89 55 e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], edx
  0003f	89 55 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], edx
  00042	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3466 : 	pMsg.Result = CB_ERROR;

  0004a	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004d	33 ff		 xor	 edi, edi
  0004f	90		 npad	 1
$LL4@Fenrir_03L:

; 3470 : 	{
; 3471 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 2b		 jne	 SHORT $LN27@Fenrir_03L

; 3472 : 		{
; 3473 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,36) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	ba 24 1a 00 00	 mov	 edx, 6692		; 00001a24H
  0006d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 09		 jne	 SHORT $LN6@Fenrir_03L

; 3474 : 			{
; 3475 : 				iStuffCount_01 ++;

  00077	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  0007a	42		 inc	 edx
  0007b	89 55 e0	 mov	 DWORD PTR _iStuffCount_01$1$[ebp], edx
  0007e	eb 10		 jmp	 SHORT $LN28@Fenrir_03L
$LN6@Fenrir_03L:

; 3476 : 			}
; 3477 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  00080	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  00085	66 3b c2	 cmp	 ax, dx
  00088	75 66		 jne	 SHORT $LN8@Fenrir_03L

; 3478 : 			{
; 3479 : 				iLifeGemCount ++;

  0008a	ff 45 dc	 inc	 DWORD PTR _iLifeGemCount$1$[ebp]
$LN27@Fenrir_03L:
  0008d	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
$LN28@Fenrir_03L:
  00090	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
$LN29@Fenrir_03L:
  00093	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@Fenrir_03L:

; 3467 : 
; 3468 : 
; 3469 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00096	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0009c	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000a2	7c ac		 jl	 SHORT $LL4@Fenrir_03L

; 3492 : 			}
; 3493 : 		}
; 3494 : 	}
; 3495 : 
; 3496 : 	if ( iStuffCount_01 != 1 || iLifeGemCount != 3 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  000a4	83 fa 01	 cmp	 edx, 1
  000a7	75 17		 jne	 SHORT $LN15@Fenrir_03L
  000a9	83 7d dc 03	 cmp	 DWORD PTR _iLifeGemCount$1$[ebp], 3
  000ad	75 11		 jne	 SHORT $LN15@Fenrir_03L
  000af	3b ca		 cmp	 ecx, edx
  000b1	75 0d		 jne	 SHORT $LN15@Fenrir_03L
  000b3	85 c0		 test	 eax, eax
  000b5	7f 09		 jg	 SHORT $LN15@Fenrir_03L

; 3500 : 
; 3501 : 		return;
; 3502 : 	}
; 3503 : 	
; 3504 : 	if ( iCharmOfLuckCount > 10 )

  000b7	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000ba	7e 73		 jle	 SHORT $LN16@Fenrir_03L

; 3505 : 	{
; 3506 : 		pMsg.Result = 0xF0;

  000bc	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN15@Fenrir_03L:

; 3497 : 	{
; 3498 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000c0	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000c4	50		 push	 eax
  000c5	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c8	50		 push	 eax
  000c9	ff 36		 push	 DWORD PTR [esi]
  000cb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@Fenrir_03L:

; 3499 : 		lpObj->ChaosLock = FALSE;

  000d3	5f		 pop	 edi
  000d4	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx

; 3579 : 	}
; 3580 : }

  000e0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	33 cd		 xor	 ecx, ebp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 04 00	 ret	 4
$LN8@Fenrir_03L:

; 3480 : 			}
; 3481 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000f0	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000f5	66 3b c2	 cmp	 ax, dx
  000f8	75 0c		 jne	 SHORT $LN10@Fenrir_03L

; 3482 : 			{
; 3483 : 				iChaosGemCount++;

  000fa	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  000fd	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  00100	41		 inc	 ecx
  00101	89 4d e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], ecx
  00104	eb 8d		 jmp	 SHORT $LN29@Fenrir_03L
$LN10@Fenrir_03L:

; 3484 : 			}
; 3485 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00106	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0010b	66 3b c2	 cmp	 ax, dx

; 3488 : 			}
; 3489 : 			else

  0010e	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  00111	75 0d		 jne	 SHORT $LN12@Fenrir_03L

; 3486 : 			{
; 3487 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00113	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00119	03 d8		 add	 ebx, eax

; 3488 : 			}
; 3489 : 			else

  0011b	e9 70 ff ff ff	 jmp	 $LN28@Fenrir_03L
$LN12@Fenrir_03L:

; 3490 : 			{
; 3491 : 				iInvalidItemCount++;

  00120	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00123	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  00126	40		 inc	 eax
  00127	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  0012a	e9 67 ff ff ff	 jmp	 $LN2@Fenrir_03L
$LN16@Fenrir_03L:

; 3507 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3508 : 		lpObj->ChaosLock = FALSE;
; 3509 : 
; 3510 : 		return;
; 3511 : 	}
; 3512 : 
; 3513 : 	LogChaosItem(lpObj, "Fenrir_03Level_Mix");

  0012f	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FCLFBNN@Fenrir_03Level_Mix?$AA@
  00137	56		 push	 esi
  00138	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3514 : 	LogAddTD("[Fenrir Mix][Level 03] Chaos Mix Start");

  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CPJNIKAC@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5Chaos?5Mix@
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3515 : 
; 3516 : 	lpObj->ChaosSuccessRate = g_iFenrir_03Level_MixRate;

  00148	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_03Level_MixRate@@3HA ; g_iFenrir_03Level_MixRate
  0014d	83 c4 04	 add	 esp, 4
  00150	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 3517 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3518 : 	int nChaosNeedMoney = 10000000;
; 3519 : 
; 3520 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0015b	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  00161	ff 36		 push	 DWORD PTR [esi]
  00163	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00168	8b c8		 mov	 ecx, eax
  0016a	b8 80 96 98 00	 mov	 eax, 10000000		; 00989680H
  0016f	f7 e9		 imul	 ecx
  00171	6a 00		 push	 0
  00173	6a 64		 push	 100			; 00000064H
  00175	52		 push	 edx
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 __alldiv
  0017c	8b c8		 mov	 ecx, eax

; 3521 : 
; 3522 : 	if ( iChaosTaxMoney < 0 )

  0017e	33 c0		 xor	 eax, eax
  00180	85 c9		 test	 ecx, ecx
  00182	0f 48 c8	 cmovs	 ecx, eax

; 3523 : 	{
; 3524 : 		iChaosTaxMoney = 0;
; 3525 : 	}
; 3526 : 
; 3527 : 	nChaosNeedMoney += iChaosTaxMoney;

  00185	8d b9 80 96 98
	00		 lea	 edi, DWORD PTR [ecx+10000000]

; 3528 : 
; 3529 : 	if ( nChaosNeedMoney < 0 )

  0018b	85 ff		 test	 edi, edi
  0018d	0f 48 f8	 cmovs	 edi, eax

; 3530 : 	{
; 3531 : 		nChaosNeedMoney = 0;
; 3532 : 	}
; 3533 : 
; 3534 : 	if ( lpObj->Money < nChaosNeedMoney )

  00190	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00196	3b c7		 cmp	 eax, edi
  00198	7d 09		 jge	 SHORT $LN19@Fenrir_03L

; 3535 : 	{
; 3536 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0019a	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3537 : 		
; 3538 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3539 : 		lpObj->ChaosLock = FALSE;
; 3540 : 
; 3541 : 		return;

  0019e	e9 1d ff ff ff	 jmp	 $LN15@Fenrir_03L
$LN19@Fenrir_03L:

; 3542 : 	}
; 3543 : 
; 3544 : 	lpObj->Money -= nChaosNeedMoney;

  001a3	2b c7		 sub	 eax, edi

; 3545 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001a5	51		 push	 ecx
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001ab	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001b1	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3546 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001b6	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001bc	ff 36		 push	 DWORD PTR [esi]
  001be	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001c3	83 c4 08	 add	 esp, 8

; 3547 : 
; 3548 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001c6	e8 00 00 00 00	 call	 _rand
  001cb	99		 cdq
  001cc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001d1	f7 f9		 idiv	 ecx
  001d3	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001d9	7d 6d		 jge	 SHORT $LN20@Fenrir_03L

; 3549 : 	{
; 3550 : 		int type = ITEMGET(13,37);
; 3551 : 		int level = 0;
; 3552 : 		int dur = 255;
; 3553 : 		int op1 = 1;
; 3554 : 
; 3555 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, op1, 0, 0, -1, 0, 0);

  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a 00		 push	 0
  001e1	6a 00		 push	 0
  001e3	6a ff		 push	 -1
  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	6a 01		 push	 1
  001eb	68 ff 00 00 00	 push	 255			; 000000ffH
  001f0	6a 00		 push	 0
  001f2	68 25 1a 00 00	 push	 6693			; 00001a25H
  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	68 ff 00 00 00	 push	 255			; 000000ffH
  00200	ff 36		 push	 DWORD PTR [esi]
  00202	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3556 : 		::gObjInventoryCommit(lpObj->m_Index);

  00207	ff 36		 push	 DWORD PTR [esi]
  00209	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0020e	83 c4 40	 add	 esp, 64			; 00000040H

; 3557 : #if( __4GAMERS__ == 1 )
; 3558 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3559 : #endif
; 3560 : 		LogAddTD("[Fenrir Mix][Level 03] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00211	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00214	53		 push	 ebx
  00215	57		 push	 edi
  00216	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0021c	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00222	50		 push	 eax
  00223	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@BMKKEOOH@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3579 : 	}
; 3580 : }

  00232	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00235	83 c4 1c	 add	 esp, 28			; 0000001cH
  00238	33 cd		 xor	 ecx, ebp
  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx
  0023d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c2 04 00	 ret	 4
$LN20@Fenrir_03L:

; 3561 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3562 : 			iCharmOfLuckCount);
; 3563 : 
; 3564 : 	}
; 3565 : 	else
; 3566 : 	{
; 3567 : #if( __4GAMERS__ == 1 )
; 3568 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3569 : #endif
; 3570 : 		ChaosBoxInit(lpObj);

  00248	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0024b	56		 push	 esi
  0024c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3571 : 		::GCUserChaosBoxSend(lpObj, 0);

  00251	6a 00		 push	 0
  00253	56		 push	 esi
  00254	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3572 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00259	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0025d	50		 push	 eax
  0025e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00261	50		 push	 eax
  00262	ff 36		 push	 DWORD PTR [esi]
  00264	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3573 : 
; 3574 : 		LogAddTD("[Fenrir Mix][Level 03] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00269	53		 push	 ebx
  0026a	57		 push	 edi
  0026b	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00271	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00274	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0027a	50		 push	 eax
  0027b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0027e	50		 push	 eax
  0027f	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@DDCAHDDB@?$FLFenrir?5Mix?$FN?$FLLevel?503?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0028a	83 c4 30	 add	 esp, 48			; 00000030H

; 3575 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3576 : 			iCharmOfLuckCount);
; 3577 : 
; 3578 : 		lpObj->ChaosLock = FALSE;

  0028d	e9 41 fe ff ff	 jmp	 $LN30@Fenrir_03L
?Fenrir_03Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_03Level_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_iStuffCount_01$1$ = -36				; size = 4
_iStuffCount_02$1$ = -32				; size = 4
_iChaosGemCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_02Level_Mix, COMDAT
; _this$ = ecx

; 3323 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3324 : 	lpObj->ChaosLock = TRUE;
; 3325 : 	int iStuffCount_01 = 0;
; 3326 : 	int iStuffCount_02 = 0;
; 3327 : 	int iChaosGemCount = 0;
; 3328 : 	int iInvalidItemCount = 0;
; 3329 : 	int iChaosMoney = 0;
; 3330 : 	int iCharmOfLuckCount = 0;
; 3331 : 
; 3332 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3333 : 
; 3334 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	33 ff		 xor	 edi, edi
  0001d	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	89 7d dc	 mov	 DWORD PTR _iStuffCount_01$1$[ebp], edi
  00035	89 7d e0	 mov	 DWORD PTR _iStuffCount_02$1$[ebp], edi
  00038	89 7d e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], edi
  0003b	89 7d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], edi
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3335 : 	pMsg.Result = CB_ERROR;

  00046	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Fenrir_02L:

; 3339 : 	{
; 3340 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 1e		 jne	 SHORT $LN27@Fenrir_02L

; 3341 : 		{
; 3342 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,34) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	ba 22 1a 00 00	 mov	 edx, 6690		; 00001a22H
  0006d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 71		 jne	 SHORT $LN6@Fenrir_02L

; 3343 : 			{
; 3344 : 				iStuffCount_01 += (int)lpObj->pChaosBox[n].m_Durability;

  00077	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  0007d	01 45 dc	 add	 DWORD PTR _iStuffCount_01$1$[ebp], eax
$LN27@Fenrir_02L:
  00080	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_02$1$[ebp]
$LN28@Fenrir_02L:
  00083	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
$LN29@Fenrir_02L:
  00086	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@Fenrir_02L:

; 3336 : 
; 3337 : 
; 3338 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00089	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0008f	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00095	7c b9		 jl	 SHORT $LL4@Fenrir_02L

; 3361 : 			}
; 3362 : 		}
; 3363 : 	}
; 3364 : 
; 3365 : 	if ( iStuffCount_01 != 10 || iStuffCount_02 != 5 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  00097	83 7d dc 0a	 cmp	 DWORD PTR _iStuffCount_01$1$[ebp], 10 ; 0000000aH
  0009b	75 1b		 jne	 SHORT $LN15@Fenrir_02L
  0009d	83 fa 05	 cmp	 edx, 5
  000a0	75 16		 jne	 SHORT $LN15@Fenrir_02L
  000a2	83 f9 01	 cmp	 ecx, 1
  000a5	75 11		 jne	 SHORT $LN15@Fenrir_02L
  000a7	85 c0		 test	 eax, eax
  000a9	7f 0d		 jg	 SHORT $LN15@Fenrir_02L

; 3369 : 
; 3370 : 		return;
; 3371 : 	}
; 3372 : 	
; 3373 : 	if ( iCharmOfLuckCount > 10 )

  000ab	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000ae	0f 8e 89 00 00
	00		 jle	 $LN16@Fenrir_02L

; 3374 : 	{
; 3375 : 		pMsg.Result = 0xF0;

  000b4	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN15@Fenrir_02L:

; 3366 : 	{
; 3367 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000b8	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000bc	50		 push	 eax
  000bd	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c0	50		 push	 eax
  000c1	ff 36		 push	 DWORD PTR [esi]
  000c3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@Fenrir_02L:

; 3368 : 		lpObj->ChaosLock = FALSE;

  000cb	5f		 pop	 edi
  000cc	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 3447 : 	}
; 3448 : }

  000d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000db	33 cd		 xor	 ecx, ebp
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
$LN6@Fenrir_02L:

; 3345 : 			}
; 3346 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,35) )

  000e8	ba 23 1a 00 00	 mov	 edx, 6691		; 00001a23H
  000ed	66 3b c2	 cmp	 ax, dx
  000f0	75 09		 jne	 SHORT $LN8@Fenrir_02L

; 3347 : 			{
; 3348 : 				iStuffCount_02 ++;

  000f2	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_02$1$[ebp]
  000f5	42		 inc	 edx
  000f6	89 55 e0	 mov	 DWORD PTR _iStuffCount_02$1$[ebp], edx
  000f9	eb 88		 jmp	 SHORT $LN28@Fenrir_02L
$LN8@Fenrir_02L:

; 3349 : 			}
; 3350 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000fb	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00100	66 3b c2	 cmp	 ax, dx
  00103	75 0f		 jne	 SHORT $LN10@Fenrir_02L

; 3351 : 			{
; 3352 : 				iChaosGemCount++;

  00105	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  00108	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_02$1$[ebp]
  0010b	41		 inc	 ecx
  0010c	89 4d e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], ecx
  0010f	e9 72 ff ff ff	 jmp	 $LN29@Fenrir_02L
$LN10@Fenrir_02L:

; 3353 : 			}
; 3354 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00114	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00119	66 3b c2	 cmp	 ax, dx

; 3357 : 			}
; 3358 : 			else

  0011c	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_02$1$[ebp]
  0011f	75 0d		 jne	 SHORT $LN12@Fenrir_02L

; 3355 : 			{
; 3356 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00121	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00127	03 d8		 add	 ebx, eax

; 3357 : 			}
; 3358 : 			else

  00129	e9 55 ff ff ff	 jmp	 $LN28@Fenrir_02L
$LN12@Fenrir_02L:

; 3359 : 			{
; 3360 : 				iInvalidItemCount++;

  0012e	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00131	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  00134	40		 inc	 eax
  00135	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  00138	e9 4c ff ff ff	 jmp	 $LN2@Fenrir_02L
$LN16@Fenrir_02L:

; 3376 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3377 : 		lpObj->ChaosLock = FALSE;
; 3378 : 
; 3379 : 		return;
; 3380 : 	}
; 3381 : 
; 3382 : 	LogChaosItem(lpObj, "Fenrir_02Level_Mix");

  0013d	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MEKFIOBN@Fenrir_02Level_Mix?$AA@
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3383 : 	LogAddTD("[Fenrir Mix][Level 02] Chaos Mix Start");

  0014b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PIHPAKFK@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5Chaos?5Mix@
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3384 : 
; 3385 : 	lpObj->ChaosSuccessRate = g_iFenrir_02Level_MixRate;

  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_02Level_MixRate@@3HA ; g_iFenrir_02Level_MixRate
  0015b	83 c4 04	 add	 esp, 4
  0015e	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 3386 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3387 : 	int nChaosNeedMoney = 0;
; 3388 : 
; 3389 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00169	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  0016f	ff 36		 push	 DWORD PTR [esi]
  00171	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00176	8b c8		 mov	 ecx, eax
  00178	33 c0		 xor	 eax, eax
  0017a	f7 e9		 imul	 ecx
  0017c	6a 00		 push	 0
  0017e	6a 64		 push	 100			; 00000064H
  00180	52		 push	 edx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 __alldiv
  00187	8b c8		 mov	 ecx, eax

; 3390 : 
; 3391 : 	if ( iChaosTaxMoney < 0 )

  00189	33 c0		 xor	 eax, eax
  0018b	85 c9		 test	 ecx, ecx
  0018d	0f 48 c8	 cmovs	 ecx, eax

; 3392 : 	{
; 3393 : 		iChaosTaxMoney = 0;
; 3394 : 	}
; 3395 : 
; 3396 : 	nChaosNeedMoney += iChaosTaxMoney;
; 3397 : 
; 3398 : 	if ( nChaosNeedMoney < 0 )

  00190	85 c9		 test	 ecx, ecx
  00192	8b f9		 mov	 edi, ecx
  00194	0f 48 f8	 cmovs	 edi, eax

; 3399 : 	{
; 3400 : 		nChaosNeedMoney = 0;
; 3401 : 	}
; 3402 : 
; 3403 : 	if ( lpObj->Money < nChaosNeedMoney )

  00197	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0019d	3b c7		 cmp	 eax, edi
  0019f	7d 09		 jge	 SHORT $LN19@Fenrir_02L

; 3404 : 	{
; 3405 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001a1	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3406 : 		
; 3407 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3408 : 		lpObj->ChaosLock = FALSE;
; 3409 : 
; 3410 : 		return;

  001a5	e9 0e ff ff ff	 jmp	 $LN15@Fenrir_02L
$LN19@Fenrir_02L:

; 3411 : 	}
; 3412 : 
; 3413 : 	lpObj->Money -= nChaosNeedMoney;

  001aa	2b c7		 sub	 eax, edi

; 3414 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001ac	51		 push	 ecx
  001ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001b2	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001b8	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3415 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001bd	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c3	ff 36		 push	 DWORD PTR [esi]
  001c5	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001ca	83 c4 08	 add	 esp, 8

; 3416 : 
; 3417 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001cd	e8 00 00 00 00	 call	 _rand
  001d2	99		 cdq
  001d3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001d8	f7 f9		 idiv	 ecx
  001da	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001e0	7d 6a		 jge	 SHORT $LN20@Fenrir_02L

; 3418 : 	{
; 3419 : 		int type = ITEMGET(13,36);
; 3420 : 		int level = 0;
; 3421 : 		int dur = 1;
; 3422 : 
; 3423 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, 0, 0, 0, -1, 0, 0);

  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	6a 00		 push	 0
  001e8	6a 00		 push	 0
  001ea	6a ff		 push	 -1
  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	6a 00		 push	 0
  001f2	6a 01		 push	 1
  001f4	6a 00		 push	 0
  001f6	68 24 1a 00 00	 push	 6692			; 00001a24H
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	68 ff 00 00 00	 push	 255			; 000000ffH
  00204	ff 36		 push	 DWORD PTR [esi]
  00206	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3424 : 		::gObjInventoryCommit(lpObj->m_Index);

  0020b	ff 36		 push	 DWORD PTR [esi]
  0020d	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00212	83 c4 40	 add	 esp, 64			; 00000040H

; 3425 : #if( __4GAMERS__ == 1 )
; 3426 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3427 : #endif
; 3428 : 		LogAddTD("[Fenrir Mix][Level 02] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00215	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00218	53		 push	 ebx
  00219	57		 push	 edi
  0021a	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00220	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00226	50		 push	 eax
  00227	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0022a	50		 push	 eax
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@HFOGELBG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3447 : 	}
; 3448 : }

  00236	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00239	83 c4 1c	 add	 esp, 28			; 0000001cH
  0023c	33 cd		 xor	 ecx, ebp
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c2 04 00	 ret	 4
$LN20@Fenrir_02L:

; 3429 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3430 : 			iCharmOfLuckCount);
; 3431 : 
; 3432 : 	}
; 3433 : 	else
; 3434 : 	{
; 3435 : #if( __4GAMERS__ == 1 )
; 3436 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3437 : #endif
; 3438 : 		ChaosBoxInit(lpObj);

  0024c	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0024f	56		 push	 esi
  00250	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3439 : 		::GCUserChaosBoxSend(lpObj, 0);

  00255	6a 00		 push	 0
  00257	56		 push	 esi
  00258	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3440 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0025d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00261	50		 push	 eax
  00262	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00265	50		 push	 eax
  00266	ff 36		 push	 DWORD PTR [esi]
  00268	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3441 : 
; 3442 : 		LogAddTD("[Fenrir Mix][Level 02] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  0026d	53		 push	 ebx
  0026e	57		 push	 edi
  0026f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00275	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00278	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0027e	50		 push	 eax
  0027f	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00282	50		 push	 eax
  00283	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@COLFGAOG@?$FLFenrir?5Mix?$FN?$FLLevel?502?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00288	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0028e	83 c4 30	 add	 esp, 48			; 00000030H

; 3443 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3444 : 			iCharmOfLuckCount);
; 3445 : 
; 3446 : 		lpObj->ChaosLock = FALSE;

  00291	e9 35 fe ff ff	 jmp	 $LN30@Fenrir_02L
?Fenrir_02Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_02Level_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_iStuffCount_02$1$ = -36				; size = 4
_iStuffCount_01$1$ = -32				; size = 4
_iChaosGemCount$1$ = -28				; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::Fenrir_01Level_Mix, COMDAT
; _this$ = ecx

; 3194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3195 : 	lpObj->ChaosLock = TRUE;
; 3196 : 	int iStuffCount_01 = 0;
; 3197 : 	int iStuffCount_02 = 0;
; 3198 : 	int iChaosGemCount = 0;
; 3199 : 	int iInvalidItemCount = 0;
; 3200 : 	int iChaosMoney = 0;
; 3201 : 	int iCharmOfLuckCount = 0;
; 3202 : 
; 3203 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3204 : 
; 3205 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	33 d2		 xor	 edx, edx
  0001d	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iStuffCount_01$1$[ebp], 0
  00039	89 55 dc	 mov	 DWORD PTR _iStuffCount_02$1$[ebp], edx
  0003c	89 55 e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], edx
  0003f	89 55 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], edx
  00042	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3206 : 	pMsg.Result = CB_ERROR;

  0004a	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004d	33 ff		 xor	 edi, edi
  0004f	90		 npad	 1
$LL4@Fenrir_01L:

; 3210 : 	{
; 3211 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 38		 jne	 SHORT $LN27@Fenrir_01L

; 3212 : 		{
; 3213 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,32) )

  00062	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00068	ba 20 1a 00 00	 mov	 edx, 6688		; 00001a20H
  0006d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00072	66 3b c2	 cmp	 ax, dx
  00075	75 10		 jne	 SHORT $LN6@Fenrir_01L

; 3214 : 			{
; 3215 : 				iStuffCount_01 += (int)lpObj->pChaosBox[n].m_Durability;

  00077	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  0007d	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  00080	03 d0		 add	 edx, eax
  00082	89 55 e0	 mov	 DWORD PTR _iStuffCount_01$1$[ebp], edx
  00085	eb 16		 jmp	 SHORT $LN28@Fenrir_01L
$LN6@Fenrir_01L:

; 3216 : 			}
; 3217 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,33) )

  00087	ba 21 1a 00 00	 mov	 edx, 6689		; 00001a21H
  0008c	66 3b c2	 cmp	 ax, dx
  0008f	75 6c		 jne	 SHORT $LN8@Fenrir_01L

; 3218 : 			{
; 3219 : 				iStuffCount_02 += (int)lpObj->pChaosBox[n].m_Durability;

  00091	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00097	01 45 dc	 add	 DWORD PTR _iStuffCount_02$1$[ebp], eax
$LN27@Fenrir_01L:
  0009a	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
$LN28@Fenrir_01L:
  0009d	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
$LN29@Fenrir_01L:
  000a0	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@Fenrir_01L:

; 3207 : 
; 3208 : 
; 3209 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000a3	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a9	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000af	7c 9f		 jl	 SHORT $LL4@Fenrir_01L

; 3232 : 			}
; 3233 : 		}
; 3234 : 	}
; 3235 : 
; 3236 : 	if ( iStuffCount_01 != 20 || iStuffCount_02 != 20 || iChaosGemCount != 1 || iInvalidItemCount > 0 )

  000b1	83 fa 14	 cmp	 edx, 20			; 00000014H
  000b4	75 17		 jne	 SHORT $LN15@Fenrir_01L
  000b6	39 55 dc	 cmp	 DWORD PTR _iStuffCount_02$1$[ebp], edx
  000b9	75 12		 jne	 SHORT $LN15@Fenrir_01L
  000bb	83 f9 01	 cmp	 ecx, 1
  000be	75 0d		 jne	 SHORT $LN15@Fenrir_01L
  000c0	85 c0		 test	 eax, eax
  000c2	7f 09		 jg	 SHORT $LN15@Fenrir_01L

; 3240 : 
; 3241 : 		return;
; 3242 : 	}
; 3243 : 	
; 3244 : 	if ( iCharmOfLuckCount > 10 )

  000c4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000c7	7e 73		 jle	 SHORT $LN16@Fenrir_01L

; 3245 : 	{
; 3246 : 		pMsg.Result = 0xF0;

  000c9	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN15@Fenrir_01L:

; 3237 : 	{
; 3238 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000cd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000d1	50		 push	 eax
  000d2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d5	50		 push	 eax
  000d6	ff 36		 push	 DWORD PTR [esi]
  000d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@Fenrir_01L:

; 3239 : 		lpObj->ChaosLock = FALSE;

  000e0	5f		 pop	 edi
  000e1	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx

; 3318 : 	}
; 3319 : }

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
$LN8@Fenrir_01L:

; 3220 : 			}
; 3221 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000fd	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00102	66 3b c2	 cmp	 ax, dx
  00105	75 0c		 jne	 SHORT $LN10@Fenrir_01L

; 3222 : 			{
; 3223 : 				iChaosGemCount++;

  00107	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  0010a	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  0010d	41		 inc	 ecx
  0010e	89 4d e4	 mov	 DWORD PTR _iChaosGemCount$1$[ebp], ecx
  00111	eb 8d		 jmp	 SHORT $LN29@Fenrir_01L
$LN10@Fenrir_01L:

; 3224 : 			}
; 3225 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00113	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00118	66 3b c2	 cmp	 ax, dx

; 3228 : 			}
; 3229 : 			else

  0011b	8b 55 e0	 mov	 edx, DWORD PTR _iStuffCount_01$1$[ebp]
  0011e	75 0d		 jne	 SHORT $LN12@Fenrir_01L

; 3226 : 			{
; 3227 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00120	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00126	03 d8		 add	 ebx, eax

; 3228 : 			}
; 3229 : 			else

  00128	e9 70 ff ff ff	 jmp	 $LN28@Fenrir_01L
$LN12@Fenrir_01L:

; 3230 : 			{
; 3231 : 				iInvalidItemCount++;

  0012d	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00130	8b 4d e4	 mov	 ecx, DWORD PTR _iChaosGemCount$1$[ebp]
  00133	40		 inc	 eax
  00134	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  00137	e9 67 ff ff ff	 jmp	 $LN2@Fenrir_01L
$LN16@Fenrir_01L:

; 3247 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 3248 : 		lpObj->ChaosLock = FALSE;
; 3249 : 
; 3250 : 		return;
; 3251 : 	}
; 3252 : 
; 3253 : 	LogChaosItem(lpObj, "Fenrir_01Level_Mix");

  0013c	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@FNEHOIBM@Fenrir_01Level_Mix?$AA@
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3254 : 	LogAddTD("[Fenrir Mix][Level 01] Chaos Mix Start");

  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FLCJIMPD@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5Chaos?5Mix@
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3255 : 
; 3256 : 	lpObj->ChaosSuccessRate = g_iFenrir_01Level_MixRate;

  00155	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iFenrir_01Level_MixRate@@3HA ; g_iFenrir_01Level_MixRate
  0015a	83 c4 04	 add	 esp, 4
  0015d	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 3257 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 3258 : 	int nChaosNeedMoney = 0;
; 3259 : 
; 3260 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00163	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00168	01 9e 1c 12 00
	00		 add	 DWORD PTR [esi+4636], ebx
  0016e	ff 36		 push	 DWORD PTR [esi]
  00170	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00175	8b c8		 mov	 ecx, eax
  00177	33 c0		 xor	 eax, eax
  00179	f7 e9		 imul	 ecx
  0017b	6a 00		 push	 0
  0017d	6a 64		 push	 100			; 00000064H
  0017f	52		 push	 edx
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 __alldiv
  00186	8b c8		 mov	 ecx, eax

; 3261 : 
; 3262 : 	if ( iChaosTaxMoney < 0 )

  00188	33 c0		 xor	 eax, eax
  0018a	85 c9		 test	 ecx, ecx
  0018c	0f 48 c8	 cmovs	 ecx, eax

; 3263 : 	{
; 3264 : 		iChaosTaxMoney = 0;
; 3265 : 	}
; 3266 : 
; 3267 : 	nChaosNeedMoney += iChaosTaxMoney;
; 3268 : 
; 3269 : 	if ( nChaosNeedMoney < 0 )

  0018f	85 c9		 test	 ecx, ecx
  00191	8b f9		 mov	 edi, ecx
  00193	0f 48 f8	 cmovs	 edi, eax

; 3270 : 	{
; 3271 : 		nChaosNeedMoney = 0;
; 3272 : 	}
; 3273 : 
; 3274 : 	if ( lpObj->Money < nChaosNeedMoney )

  00196	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0019c	3b c7		 cmp	 eax, edi
  0019e	7d 09		 jge	 SHORT $LN19@Fenrir_01L

; 3275 : 	{
; 3276 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001a0	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 3277 : 		
; 3278 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3279 : 		lpObj->ChaosLock = FALSE;
; 3280 : 
; 3281 : 		return;

  001a4	e9 24 ff ff ff	 jmp	 $LN15@Fenrir_01L
$LN19@Fenrir_01L:

; 3282 : 	}
; 3283 : 
; 3284 : 	lpObj->Money -= nChaosNeedMoney;

  001a9	2b c7		 sub	 eax, edi

; 3285 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001ab	51		 push	 ecx
  001ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001b1	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001b7	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3286 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001bc	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c2	ff 36		 push	 DWORD PTR [esi]
  001c4	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001c9	83 c4 08	 add	 esp, 8

; 3287 : 
; 3288 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001cc	e8 00 00 00 00	 call	 _rand
  001d1	99		 cdq
  001d2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001d7	f7 f9		 idiv	 ecx
  001d9	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001df	7d 6a		 jge	 SHORT $LN20@Fenrir_01L

; 3289 : 	{
; 3290 : 		int type = ITEMGET(13,35);
; 3291 : 		int level = 0;
; 3292 : 		int dur = 1;
; 3293 : 
; 3294 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, type , level, dur, 0, 0, 0, -1, 0, 0);

  001e1	6a 00		 push	 0
  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	6a ff		 push	 -1
  001eb	6a 00		 push	 0
  001ed	6a 00		 push	 0
  001ef	6a 00		 push	 0
  001f1	6a 01		 push	 1
  001f3	6a 00		 push	 0
  001f5	68 23 1a 00 00	 push	 6691			; 00001a23H
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	68 ff 00 00 00	 push	 255			; 000000ffH
  00203	ff 36		 push	 DWORD PTR [esi]
  00205	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3295 : 		::gObjInventoryCommit(lpObj->m_Index);

  0020a	ff 36		 push	 DWORD PTR [esi]
  0020c	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00211	83 c4 40	 add	 esp, 64			; 00000040H

; 3296 : #if( __4GAMERS__ == 1 )
; 3297 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3298 : #endif
; 3299 : 		LogAddTD("[Fenrir Mix][Level 01] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00214	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00217	53		 push	 ebx
  00218	57		 push	 edi
  00219	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0021f	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00225	50		 push	 eax
  00226	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00229	50		 push	 eax
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MODCEFAF@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  0022f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3318 : 	}
; 3319 : }

  00235	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00238	83 c4 1c	 add	 esp, 28			; 0000001cH
  0023b	33 cd		 xor	 ecx, ebp
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	5b		 pop	 ebx
  00240	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 04 00	 ret	 4
$LN20@Fenrir_01L:

; 3300 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3301 : 			iCharmOfLuckCount);
; 3302 : 
; 3303 : 	}
; 3304 : 	else
; 3305 : 	{
; 3306 : #if( __4GAMERS__ == 1 )
; 3307 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3308 : #endif
; 3309 : 		ChaosBoxInit(lpObj);

  0024b	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0024e	56		 push	 esi
  0024f	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3310 : 		::GCUserChaosBoxSend(lpObj, 0);

  00254	6a 00		 push	 0
  00256	56		 push	 esi
  00257	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3311 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0025c	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00260	50		 push	 eax
  00261	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00264	50		 push	 eax
  00265	ff 36		 push	 DWORD PTR [esi]
  00267	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3312 : 
; 3313 : 		LogAddTD("[Fenrir Mix][Level 01] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  0026c	53		 push	 ebx
  0026d	57		 push	 edi
  0026e	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00274	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00277	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0027d	50		 push	 eax
  0027e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@IAKFEJP@?$FLFenrir?5Mix?$FN?$FLLevel?501?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0028d	83 c4 30	 add	 esp, 48			; 00000030H

; 3314 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney,
; 3315 : 			iCharmOfLuckCount);
; 3316 : 
; 3317 : 		lpObj->ChaosLock = FALSE;

  00290	e9 4b fe ff ff	 jmp	 $LN30@Fenrir_01L
?Fenrir_01Level_Mix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::Fenrir_01Level_Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -36						; size = 4
_iRedCrystal$1$ = -32					; size = 4
_iBlueCrystal$1$ = -28					; size = 4
tv376 = -24						; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::HiddenTreasureBoxItemMix, COMDAT
; _this$ = ecx

; 3047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 3048 : 	lpObj->ChaosLock = TRUE;
; 3049 : 	int iBlueCrystal = 0;
; 3050 : 	int iRedCrystal = 0;
; 3051 : 	int iBlackCrystal = 0;
; 3052 : 	int iInvalidItemCount = 0;
; 3053 : 	int iChaosMoney = 0;
; 3054 : 
; 3055 : 	PMSG_CHAOSMIXRESULT pMsg;
; 3056 : 
; 3057 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	33 db		 xor	 ebx, ebx
  00022	89 4d dc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _iBlueCrystal$1$[ebp], 0
  00037	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iRedCrystal$1$[ebp], 0
  0003e	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00041	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3058 : 	pMsg.Result = CB_ERROR;

  00049	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004c	33 ff		 xor	 edi, edi
  0004e	66 90		 npad	 2
$LL4@HiddenTrea:

; 3062 : 	{
; 3063 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 56		 jne	 SHORT $LN39@HiddenTrea

; 3064 : 		{
; 3065 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,26) )

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	b9 1a 18 00 00	 mov	 ecx, 6170		; 0000181aH
  0006d	66 39 4c 38 06	 cmp	 WORD PTR [eax+edi+6], cx
  00072	75 35		 jne	 SHORT $LN10@HiddenTrea

; 3066 : 			{
; 3067 : 				switch ( lpObj->pChaosBox[n].m_Level )

  00074	0f bf 44 38 08	 movsx	 eax, WORD PTR [eax+edi+8]
  00079	83 e8 01	 sub	 eax, 1
  0007c	74 1f		 je	 SHORT $LN12@HiddenTrea
  0007e	83 e8 01	 sub	 eax, 1
  00081	74 11		 je	 SHORT $LN13@HiddenTrea

; 3075 : 					case 3:
; 3076 : 						iBlackCrystal++;

  00083	8b 4d e0	 mov	 ecx, DWORD PTR _iRedCrystal$1$[ebp]
  00086	83 e8 01	 sub	 eax, 1
  00089	8b 45 e4	 mov	 eax, DWORD PTR _iBlueCrystal$1$[ebp]
  0008c	8b 55 e8	 mov	 edx, DWORD PTR _iInvalidItemCount$1$[ebp]
  0008f	75 30		 jne	 SHORT $LN2@HiddenTrea
  00091	43		 inc	 ebx
  00092	eb 2d		 jmp	 SHORT $LN2@HiddenTrea
$LN13@HiddenTrea:

; 3071 : 						break;
; 3072 : 					case 2:
; 3073 : 						iBlueCrystal++;

  00094	8b 45 e4	 mov	 eax, DWORD PTR _iBlueCrystal$1$[ebp]
  00097	40		 inc	 eax
  00098	89 45 e4	 mov	 DWORD PTR _iBlueCrystal$1$[ebp], eax

; 3074 : 						break;

  0009b	eb 1e		 jmp	 SHORT $LN40@HiddenTrea
$LN12@HiddenTrea:

; 3068 : 				{
; 3069 : 					case 1:
; 3070 : 						iRedCrystal++;

  0009d	8b 4d e0	 mov	 ecx, DWORD PTR _iRedCrystal$1$[ebp]

; 3077 : 						break;
; 3078 : 				}
; 3079 : 			}
; 3080 : 			else

  000a0	8b 45 e4	 mov	 eax, DWORD PTR _iBlueCrystal$1$[ebp]
  000a3	41		 inc	 ecx
  000a4	89 4d e0	 mov	 DWORD PTR _iRedCrystal$1$[ebp], ecx
  000a7	eb 15		 jmp	 SHORT $LN41@HiddenTrea
$LN10@HiddenTrea:

; 3081 : 			{
; 3082 : 				iInvalidItemCount++;

  000a9	8b 55 e8	 mov	 edx, DWORD PTR _iInvalidItemCount$1$[ebp]
  000ac	8b 45 e4	 mov	 eax, DWORD PTR _iBlueCrystal$1$[ebp]
  000af	42		 inc	 edx
  000b0	8b 4d e0	 mov	 ecx, DWORD PTR _iRedCrystal$1$[ebp]
  000b3	89 55 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], edx
  000b6	eb 09		 jmp	 SHORT $LN2@HiddenTrea
$LN39@HiddenTrea:
  000b8	8b 45 e4	 mov	 eax, DWORD PTR _iBlueCrystal$1$[ebp]
$LN40@HiddenTrea:
  000bb	8b 4d e0	 mov	 ecx, DWORD PTR _iRedCrystal$1$[ebp]
$LN41@HiddenTrea:
  000be	8b 55 e8	 mov	 edx, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@HiddenTrea:

; 3059 : 
; 3060 : 
; 3061 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000c1	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000c7	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000cd	7c 81		 jl	 SHORT $LL4@HiddenTrea

; 3083 : 			}
; 3084 : 		}
; 3085 : 	}
; 3086 : 
; 3087 : 	int iCrystalMixType = -1;

  000cf	83 cf ff	 or	 edi, -1

; 3088 : 
; 3089 : 	if ( iInvalidItemCount == 0 )

  000d2	85 d2		 test	 edx, edx
  000d4	0f 85 cc 01 00
	00		 jne	 $LN15@HiddenTrea

; 3090 : 	{
; 3091 : 		if ( iBlueCrystal == 7 )

  000da	83 f8 07	 cmp	 eax, 7
  000dd	75 21		 jne	 SHORT $LN17@HiddenTrea

; 3092 : 		{
; 3093 : 			if ( iRedCrystal == 0 && iBlackCrystal == 0 )

  000df	85 c9		 test	 ecx, ecx
  000e1	0f 85 9d 00 00
	00		 jne	 $LN27@HiddenTrea
  000e7	85 db		 test	 ebx, ebx
  000e9	0f 85 95 00 00
	00		 jne	 $LN27@HiddenTrea

; 3094 : 			{
; 3095 : 				iCrystalMixType = 0;

  000ef	33 ff		 xor	 edi, edi

; 3096 : 				lpObj->ChaosSuccessRate = 100;

  000f1	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3097 : 			}
; 3098 : 		}

  000fb	e9 84 00 00 00	 jmp	 $LN27@HiddenTrea
$LN17@HiddenTrea:

; 3099 : 		else if ( iRedCrystal == 5 )

  00100	83 f9 05	 cmp	 ecx, 5
  00103	75 17		 jne	 SHORT $LN20@HiddenTrea

; 3100 : 		{
; 3101 : 			if ( iBlueCrystal == 0 && iBlackCrystal == 0 )

  00105	85 c0		 test	 eax, eax
  00107	75 7b		 jne	 SHORT $LN27@HiddenTrea
  00109	85 db		 test	 ebx, ebx
  0010b	75 77		 jne	 SHORT $LN27@HiddenTrea

; 3102 : 			{
; 3103 : 				iCrystalMixType = 1;

  0010d	8d 79 fc	 lea	 edi, DWORD PTR [ecx-4]

; 3104 : 				lpObj->ChaosSuccessRate = 100;

  00110	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3105 : 			}
; 3106 : 		}

  0011a	eb 68		 jmp	 SHORT $LN27@HiddenTrea
$LN20@HiddenTrea:

; 3107 : 		else if ( iBlackCrystal == 3 )

  0011c	83 fb 03	 cmp	 ebx, 3
  0011f	75 17		 jne	 SHORT $LN23@HiddenTrea

; 3108 : 		{
; 3109 : 			if ( iRedCrystal == 0 && iBlueCrystal == 0 )

  00121	85 c9		 test	 ecx, ecx
  00123	75 5f		 jne	 SHORT $LN27@HiddenTrea
  00125	85 c0		 test	 eax, eax
  00127	75 5b		 jne	 SHORT $LN27@HiddenTrea

; 3110 : 			{
; 3111 : 				iCrystalMixType = 2;

  00129	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]

; 3112 : 				lpObj->ChaosSuccessRate = 100;

  0012c	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3113 : 			}
; 3114 : 		}

  00136	eb 4c		 jmp	 SHORT $LN27@HiddenTrea
$LN23@HiddenTrea:

; 3115 : 		else if ( iBlueCrystal == 1 && iRedCrystal == 1 && iBlackCrystal == 1 )

  00138	83 f8 01	 cmp	 eax, 1
  0013b	75 17		 jne	 SHORT $LN26@HiddenTrea
  0013d	3b c8		 cmp	 ecx, eax
  0013f	75 13		 jne	 SHORT $LN26@HiddenTrea
  00141	3b d8		 cmp	 ebx, eax
  00143	75 0f		 jne	 SHORT $LN26@HiddenTrea

; 3116 : 		{
; 3117 : 			{
; 3118 : 				iCrystalMixType = 3;

  00145	8d 78 02	 lea	 edi, DWORD PTR [eax+2]

; 3119 : 				lpObj->ChaosSuccessRate = 100;

  00148	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 3120 : 			}
; 3121 : 		}
; 3122 : 		else

  00152	eb 30		 jmp	 SHORT $LN27@HiddenTrea
$LN26@HiddenTrea:

; 3123 : 		{
; 3124 : 			LogAddTD("[Hidden TreasureBox Event] [%s][%s] Item Mix Failed",

  00154	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00157	50		 push	 eax
  00158	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0015b	50		 push	 eax
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3125 : 				lpObj->AccountID, lpObj->Name);
; 3126 : 		
; 3127 : 			DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00167	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0016b	50		 push	 eax
  0016c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016f	50		 push	 eax
  00170	ff 36		 push	 DWORD PTR [esi]
  00172	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00177	83 c4 18	 add	 esp, 24			; 00000018H

; 3128 : 			lpObj->ChaosLock = FALSE;

  0017a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN27@HiddenTrea:

; 3137 : 		lpObj->ChaosLock = FALSE;
; 3138 : 
; 3139 : 		return;
; 3140 : 	}
; 3141 : 
; 3142 : 
; 3143 : 	LogChaosItem(lpObj, "Hidden TreasureBox Mix");

  00184	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FJMEBBCF@Hidden?5TreasureBox?5Mix?$AA@
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 3144 : 	LogAddTD("[Hidden TreasureBox Event] [%s][%s] Chaos Mix Start",

  00192	8d 5e 5d	 lea	 ebx, DWORD PTR [esi+93]
  00195	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00198	53		 push	 ebx
  00199	50		 push	 eax
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@FILNLJPO@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3145 : 		lpObj->AccountID, lpObj->Name);
; 3146 : 
; 3147 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001a5	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ae	89 45 e8	 mov	 DWORD PTR tv376[ebp], eax
  001b1	e8 00 00 00 00	 call	 _rand
  001b6	99		 cdq
  001b7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001bc	f7 f9		 idiv	 ecx
  001be	8b 45 e8	 mov	 eax, DWORD PTR tv376[ebp]
  001c1	3b d0		 cmp	 edx, eax
  001c3	0f 8d 99 00 00
	00		 jge	 $LN28@HiddenTrea

; 3148 : 	{
; 3149 : 		switch ( iCrystalMixType )

  001c9	85 ff		 test	 edi, edi
  001cb	78 6f		 js	 SHORT $LN32@HiddenTrea
  001cd	83 ff 02	 cmp	 edi, 2
  001d0	7e 1b		 jle	 SHORT $LN30@HiddenTrea
  001d2	83 ff 03	 cmp	 edi, 3
  001d5	75 65		 jne	 SHORT $LN32@HiddenTrea

; 3153 : 				break;
; 3154 : 			case 3:
; 3155 : 				ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(12,26) , 5, 1, 0, 0, 0, -1, 0, 0);

  001d7	6a 00		 push	 0
  001d9	6a 00		 push	 0
  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a ff		 push	 -1
  001e1	6a 00		 push	 0
  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	6a 01		 push	 1
  001e9	6a 05		 push	 5

; 3156 : 				break;

  001eb	eb 14		 jmp	 SHORT $LN42@HiddenTrea
$LN30@HiddenTrea:

; 3150 : 		{
; 3151 : 			case 0:	case 1:	case 2:
; 3152 : 				ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(12,26) , 4, 1, 0, 0, 0, -1, 0, 0);

  001ed	6a 00		 push	 0
  001ef	6a 00		 push	 0
  001f1	6a 00		 push	 0
  001f3	6a 00		 push	 0
  001f5	6a ff		 push	 -1
  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 01		 push	 1
  001ff	6a 04		 push	 4
$LN42@HiddenTrea:
  00201	68 1a 18 00 00	 push	 6170			; 0000181aH
  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	68 ff 00 00 00	 push	 255			; 000000ffH
  0020f	ff 36		 push	 DWORD PTR [esi]
  00211	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  00216	83 c4 3c	 add	 esp, 60			; 0000003cH

; 3163 : 		}
; 3164 : #if( __4GAMERS__ == 1 )
; 3165 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3166 : #endif
; 3167 : 		::gObjInventoryCommit(lpObj->m_Index);

  00219	ff 36		 push	 DWORD PTR [esi]
  0021b	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 3168 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Success:%d Type:%d",

  00220	57		 push	 edi
  00221	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00227	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0022a	53		 push	 ebx
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@CFIDABAI@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3169 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, iCrystalMixType);
; 3170 : 	}
; 3171 : 	else

  00237	e9 8d 00 00 00	 jmp	 $LN44@HiddenTrea
$LN32@HiddenTrea:

; 3157 : 			default:
; 3158 : 				LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Failed - iCrystalMixType is wrong : %d",

  0023c	57		 push	 edi
  0023d	53		 push	 ebx
  0023e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00241	50		 push	 eax
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PDPGCOFM@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  00247	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3159 : 					lpObj->AccountID, lpObj->Name, iCrystalMixType);
; 3160 : 				DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0024d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00251	50		 push	 eax
  00252	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00255	50		 push	 eax
  00256	ff 36		 push	 DWORD PTR [esi]
  00258	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0025d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3161 : 				lpObj->ChaosLock = FALSE;
; 3162 : 				return;

  00260	eb 6a		 jmp	 SHORT $LN43@HiddenTrea
$LN28@HiddenTrea:

; 3172 : 	{
; 3173 : #if( __4GAMERS__ == 1 )
; 3174 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3175 : #endif
; 3176 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] CBMix Fail Rate:%d",

  00262	50		 push	 eax
  00263	53		 push	 ebx
  00264	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00267	50		 push	 eax
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@JBMEKCLH@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3177 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate);
; 3178 : 
; 3179 : 		ChaosBoxInit(lpObj);

  00273	8b 4d dc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00276	83 c4 10	 add	 esp, 16			; 00000010H
  00279	56		 push	 esi
  0027a	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3180 : 		::GCUserChaosBoxSend(lpObj, 1);

  0027f	6a 01		 push	 1
  00281	56		 push	 esi
  00282	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3181 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00287	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0028b	50		 push	 eax
  0028c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0028f	50		 push	 eax
  00290	ff 36		 push	 DWORD PTR [esi]
  00292	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00297	83 c4 14	 add	 esp, 20			; 00000014H

; 3182 : 
; 3183 : 		lpObj->ChaosLock = FALSE;

  0029a	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 3184 : 	}
; 3185 : 
; 3186 : 	lpObj->ChaosLock = FALSE;

  002a4	eb 26		 jmp	 SHORT $LN43@HiddenTrea
$LN15@HiddenTrea:

; 3129 : 		}
; 3130 : 	}
; 3131 : 	else
; 3132 : 	{
; 3133 : 		LogAddTD("[Hidden TreasureBox Event] [%s][%s] Item Mix Failed",

  002a6	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002a9	50		 push	 eax
  002aa	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002ad	50		 push	 eax
  002ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@OHGHLCDC@?$FLHidden?5TreasureBox?5Event?$FN?5?$FL?$CFs?$FN?$FL@
  002b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3134 : 			lpObj->AccountID, lpObj->Name);
; 3135 : 	
; 3136 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  002b9	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002bd	50		 push	 eax
  002be	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002c1	50		 push	 eax
  002c2	ff 36		 push	 DWORD PTR [esi]
  002c4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
$LN44@HiddenTrea:
  002c9	83 c4 18	 add	 esp, 24			; 00000018H
$LN43@HiddenTrea:

; 3187 : }

  002cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cf	5f		 pop	 edi
  002d0	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  002da	33 cd		 xor	 ecx, ebp
  002dc	5e		 pop	 esi
  002dd	5b		 pop	 ebx
  002de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c2 04 00	 ret	 4
?HiddenTreasureBoxItemMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::HiddenTreasureBoxItemMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_iBlessGemCount$1$ = -36				; size = 4
_iChoasGemCount$1$ = -32				; size = 4
_iSoulGemCount$1$ = -28					; size = 4
_iProtectionGemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::LifeStoneChaosMix, COMDAT
; _this$ = ecx

; 2929 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 2930 : 	lpObj->ChaosLock = TRUE;
; 2931 : 	int iChoasGemCount = 0;
; 2932 : 	int iBlessGemCount = 0;
; 2933 : 	int iSoulGemCount = 0;
; 2934 : 	int iProtectionGemCount = 0;
; 2935 : 	int iInvalidItemCount = 0;
; 2936 : 	int iChaosMoney = 0;
; 2937 : 
; 2938 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2939 : 
; 2940 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	33 d2		 xor	 edx, edx
  0001d	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00020	68 86 00 00 00	 push	 134			; 00000086H
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	33 db		 xor	 ebx, ebx
  00032	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _iChoasGemCount$1$[ebp], 0
  00039	89 55 dc	 mov	 DWORD PTR _iBlessGemCount$1$[ebp], edx
  0003c	89 55 e4	 mov	 DWORD PTR _iSoulGemCount$1$[ebp], edx
  0003f	89 55 e8	 mov	 DWORD PTR _iProtectionGemCount$1$[ebp], edx
  00042	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2941 : 	pMsg.Result = CB_ERROR;

  0004a	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0004d	33 ff		 xor	 edi, edi
  0004f	90		 npad	 1
$LL4@LifeStoneC:

; 2945 : 	{
; 2946 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 1c		 jne	 SHORT $LN26@LifeStoneC

; 2947 : 		{
; 2948 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00062	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00068	b9 0d 1c 00 00	 mov	 ecx, 7181		; 00001c0dH
  0006d	0f b7 44 38 06	 movzx	 eax, WORD PTR [eax+edi+6]
  00072	66 3b c1	 cmp	 ax, cx
  00075	0f 85 d4 00 00
	00		 jne	 $LN6@LifeStoneC

; 2949 : 			{
; 2950 : 				iBlessGemCount++;

  0007b	ff 45 dc	 inc	 DWORD PTR _iBlessGemCount$1$[ebp]
$LN26@LifeStoneC:
  0007e	8b 4d e4	 mov	 ecx, DWORD PTR _iSoulGemCount$1$[ebp]
$LN27@LifeStoneC:
  00081	8b 45 e8	 mov	 eax, DWORD PTR _iProtectionGemCount$1$[ebp]
$LN28@LifeStoneC:
  00084	8b 55 e0	 mov	 edx, DWORD PTR _iChoasGemCount$1$[ebp]
$LN2@LifeStoneC:

; 2942 : 
; 2943 : 
; 2944 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00087	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0008d	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00093	7c bb		 jl	 SHORT $LL4@LifeStoneC

; 2967 : 			}
; 2968 : 		}
; 2969 : 	}
; 2970 : 
; 2971 : 	if ( iChoasGemCount != 1 || iBlessGemCount != 5 || iSoulGemCount != 5 || iProtectionGemCount != 1 || iInvalidItemCount > 0 )

  00095	83 fa 01	 cmp	 edx, 1
  00098	0f 85 81 00 00
	00		 jne	 $LN15@LifeStoneC
  0009e	83 7d dc 05	 cmp	 DWORD PTR _iBlessGemCount$1$[ebp], 5
  000a2	75 7b		 jne	 SHORT $LN15@LifeStoneC
  000a4	83 f9 05	 cmp	 ecx, 5
  000a7	75 76		 jne	 SHORT $LN15@LifeStoneC
  000a9	3b c2		 cmp	 eax, edx
  000ab	75 72		 jne	 SHORT $LN15@LifeStoneC
  000ad	85 db		 test	 ebx, ebx
  000af	7f 6e		 jg	 SHORT $LN15@LifeStoneC

; 2975 : 
; 2976 : 		return;
; 2977 : 	}
; 2978 : 
; 2979 : 	LogChaosItem(lpObj, "LifeStoneMix");

  000b1	8b 5d d8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000b4	8b cb		 mov	 ecx, ebx
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FJGBJPII@LifeStoneMix?$AA@
  000bb	56		 push	 esi
  000bc	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2980 : 	LogAddTD("[LifeStoneMix] Chaos Mix Start");

  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OKAOMBJE@?$FLLifeStoneMix?$FN?5Chaos?5Mix?5Start?$AA@
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000cc	83 c4 04	 add	 esp, 4

; 2981 : 	lpObj->ChaosSuccessRate = 100;

  000cf	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 2982 : 
; 2983 : 	int nChaosNeedMoney = 5000000;
; 2984 : 
; 2985 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000de	ff 36		 push	 DWORD PTR [esi]
  000e0	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000e5	8b c8		 mov	 ecx, eax
  000e7	b8 40 4b 4c 00	 mov	 eax, 5000000		; 004c4b40H
  000ec	f7 e9		 imul	 ecx
  000ee	6a 00		 push	 0
  000f0	6a 64		 push	 100			; 00000064H
  000f2	52		 push	 edx
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 __alldiv
  000f9	8b c8		 mov	 ecx, eax

; 2986 : 
; 2987 : 	if ( iChaosTaxMoney < 0 )

  000fb	33 c0		 xor	 eax, eax
  000fd	85 c9		 test	 ecx, ecx
  000ff	0f 48 c8	 cmovs	 ecx, eax

; 2988 : 	{
; 2989 : 		iChaosTaxMoney = 0;
; 2990 : 	}
; 2991 : 
; 2992 : 	nChaosNeedMoney += iChaosTaxMoney;

  00102	8d b9 40 4b 4c
	00		 lea	 edi, DWORD PTR [ecx+5000000]

; 2993 : 
; 2994 : 	if ( nChaosNeedMoney < 0 )

  00108	85 ff		 test	 edi, edi
  0010a	0f 48 f8	 cmovs	 edi, eax

; 2995 : 	{
; 2996 : 		nChaosNeedMoney = 0;
; 2997 : 	}
; 2998 : 
; 2999 : 	if ( lpObj->Money < nChaosNeedMoney )

  0010d	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00113	3b c7		 cmp	 eax, edi
  00115	0f 8d 85 00 00
	00		 jge	 $LN18@LifeStoneC

; 3000 : 	{
; 3001 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0011b	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN15@LifeStoneC:

; 2972 : 	{
; 2973 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  0011f	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00123	50		 push	 eax
  00124	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00127	50		 push	 eax
  00128	ff 36		 push	 DWORD PTR [esi]
  0012a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@LifeStoneC:

; 2974 : 		lpObj->ChaosLock = FALSE;

  00132	5f		 pop	 edi
  00133	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx

; 3038 : 	}
; 3039 : }

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00142	33 cd		 xor	 ecx, ebp
  00144	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
$LN6@LifeStoneC:

; 2951 : 			}
; 2952 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  0014f	b9 0e 1c 00 00	 mov	 ecx, 7182		; 00001c0eH
  00154	66 3b c1	 cmp	 ax, cx
  00157	75 0c		 jne	 SHORT $LN8@LifeStoneC

; 2953 : 			{
; 2954 : 				iSoulGemCount++;

  00159	8b 4d e4	 mov	 ecx, DWORD PTR _iSoulGemCount$1$[ebp]
  0015c	41		 inc	 ecx
  0015d	89 4d e4	 mov	 DWORD PTR _iSoulGemCount$1$[ebp], ecx
  00160	e9 1c ff ff ff	 jmp	 $LN27@LifeStoneC
$LN8@LifeStoneC:

; 2955 : 			}
; 2956 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,31) )	// Guardian Jewel

  00165	b9 1f 1c 00 00	 mov	 ecx, 7199		; 00001c1fH
  0016a	66 3b c1	 cmp	 ax, cx
  0016d	75 0f		 jne	 SHORT $LN10@LifeStoneC

; 2957 : 			{
; 2958 : 				iProtectionGemCount++;

  0016f	8b 45 e8	 mov	 eax, DWORD PTR _iProtectionGemCount$1$[ebp]
  00172	8b 4d e4	 mov	 ecx, DWORD PTR _iSoulGemCount$1$[ebp]
  00175	40		 inc	 eax
  00176	89 45 e8	 mov	 DWORD PTR _iProtectionGemCount$1$[ebp], eax
  00179	e9 06 ff ff ff	 jmp	 $LN28@LifeStoneC
$LN10@LifeStoneC:

; 2959 : 			}
; 2960 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// Habla pe super CHOAS
; 2961 : 			{
; 2962 : 				iChoasGemCount++;

  0017e	8b 55 e0	 mov	 edx, DWORD PTR _iChoasGemCount$1$[ebp]
  00181	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  00186	66 3b c1	 cmp	 ax, cx

; 2963 : 			}
; 2964 : 			else 

  00189	8b 45 e8	 mov	 eax, DWORD PTR _iProtectionGemCount$1$[ebp]
  0018c	8b 4d e4	 mov	 ecx, DWORD PTR _iSoulGemCount$1$[ebp]
  0018f	75 09		 jne	 SHORT $LN12@LifeStoneC

; 2959 : 			}
; 2960 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// Habla pe super CHOAS
; 2961 : 			{
; 2962 : 				iChoasGemCount++;

  00191	42		 inc	 edx
  00192	89 55 e0	 mov	 DWORD PTR _iChoasGemCount$1$[ebp], edx

; 2963 : 			}
; 2964 : 			else 

  00195	e9 ed fe ff ff	 jmp	 $LN2@LifeStoneC
$LN12@LifeStoneC:

; 2965 : 			{
; 2966 : 				iInvalidItemCount++;

  0019a	43		 inc	 ebx
  0019b	e9 e7 fe ff ff	 jmp	 $LN2@LifeStoneC
$LN18@LifeStoneC:

; 3002 : 		
; 3003 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 3004 : 		lpObj->ChaosLock = FALSE;
; 3005 : 
; 3006 : 		return;
; 3007 : 	}
; 3008 : 
; 3009 : 	lpObj->Money -= nChaosNeedMoney;

  001a0	2b c7		 sub	 eax, edi

; 3010 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001a2	51		 push	 ecx
  001a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001a8	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  001ae	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 3011 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001b3	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001b9	ff 36		 push	 DWORD PTR [esi]
  001bb	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001c0	83 c4 08	 add	 esp, 8

; 3012 : 
; 3013 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  001c3	e8 00 00 00 00	 call	 _rand
  001c8	99		 cdq
  001c9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ce	f7 f9		 idiv	 ecx
  001d0	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001d6	7d 69		 jge	 SHORT $LN19@LifeStoneC

; 3014 : 	{
; 3015 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ITEMGET(13,11) , 1, 0, 0, 0, 0, -1, 0, 0);

  001d8	6a 00		 push	 0
  001da	6a 00		 push	 0
  001dc	6a 00		 push	 0
  001de	6a 00		 push	 0
  001e0	6a ff		 push	 -1
  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	6a 00		 push	 0
  001e8	6a 00		 push	 0
  001ea	6a 01		 push	 1
  001ec	68 0b 1a 00 00	 push	 6667			; 00001a0bH
  001f1	6a 00		 push	 0
  001f3	6a 00		 push	 0
  001f5	68 ff 00 00 00	 push	 255			; 000000ffH
  001fa	ff 36		 push	 DWORD PTR [esi]
  001fc	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 3016 : 		::gObjInventoryCommit(lpObj->m_Index);

  00201	ff 36		 push	 DWORD PTR [esi]
  00203	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00208	83 c4 40	 add	 esp, 64			; 00000040H

; 3017 : #if( __4GAMERS__ == 1 )
; 3018 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 3019 : #endif
; 3020 : 		LogAddTD("[LifeStoneMix] [%s][%s] CBMix Success %d Money : %d-%d",

  0020b	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0020e	57		 push	 edi
  0020f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00215	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0021b	50		 push	 eax
  0021c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0021f	50		 push	 eax
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GNDOFGHL@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 3038 : 	}
; 3039 : }

  0022b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022e	83 c4 18	 add	 esp, 24			; 00000018H
  00231	33 cd		 xor	 ecx, ebp
  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c2 04 00	 ret	 4
$LN19@LifeStoneC:

; 3021 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 3022 : 			lpObj->Money, nChaosNeedMoney);
; 3023 : 	}
; 3024 : 	else
; 3025 : 	{
; 3026 : #if( __4GAMERS__ == 1 )
; 3027 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 3028 : #endif
; 3029 : 		ChaosBoxInit(lpObj);

  00241	56		 push	 esi
  00242	8b cb		 mov	 ecx, ebx
  00244	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 3030 : 		::GCUserChaosBoxSend(lpObj, 1);

  00249	6a 01		 push	 1
  0024b	56		 push	 esi
  0024c	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 3031 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00251	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00255	50		 push	 eax
  00256	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00259	50		 push	 eax
  0025a	ff 36		 push	 DWORD PTR [esi]
  0025c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 3032 : 
; 3033 : 		LogAddTD("[LifeStoneMix] [%s][%s] CBMix Fail %d Money : %d-%d",

  00261	57		 push	 edi
  00262	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00268	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0026b	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00271	50		 push	 eax
  00272	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00275	50		 push	 eax
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@PMLDDIAP@?$FLLifeStoneMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
  0027b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00281	83 c4 2c	 add	 esp, 44			; 0000002cH

; 3034 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 3035 : 			lpObj->Money, nChaosNeedMoney);
; 3036 : 
; 3037 : 		lpObj->ChaosLock = FALSE;

  00284	e9 a9 fe ff ff	 jmp	 $LN29@LifeStoneC
?LifeStoneChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::LifeStoneChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SoulPotionChaosMix, COMDAT
; _this$ = ecx

; 2817 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 2818 : 	lpObj->ChaosLock = TRUE;
; 2819 : 	int iSoulGemCount = 0;
; 2820 : 	int iChaosMoney = 0;
; 2821 : 	int iInvalidItemCount = 0;
; 2822 : 
; 2823 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2824 : 
; 2825 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	33 db		 xor	 ebx, ebx
  00022	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00033	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2826 : 	pMsg.Result = CB_ERROR;

  0003b	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0003e	33 ff		 xor	 edi, edi
$LL4@SoulPotion:

; 2829 : 	{
; 2830 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 1e		 jne	 SHORT $LN21@SoulPotion

; 2831 : 		{
; 2832 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  00052	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00058	b9 0e 1c 00 00	 mov	 ecx, 7182		; 00001c0eH
  0005d	66 39 4c 38 06	 cmp	 WORD PTR [eax+edi+6], cx

; 2835 : 			}
; 2836 : 			else

  00062	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00065	75 03		 jne	 SHORT $LN6@SoulPotion

; 2833 : 			{
; 2834 : 				iSoulGemCount++;

  00067	43		 inc	 ebx

; 2835 : 			}
; 2836 : 			else

  00068	eb 09		 jmp	 SHORT $LN2@SoulPotion
$LN6@SoulPotion:

; 2837 : 			{
; 2838 : 				iInvalidItemCount++;

  0006a	40		 inc	 eax
  0006b	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  0006e	eb 03		 jmp	 SHORT $LN2@SoulPotion
$LN21@SoulPotion:
  00070	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@SoulPotion:

; 2827 : 
; 2828 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00073	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00079	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0007f	7c bf		 jl	 SHORT $LL4@SoulPotion

; 2839 : 			}
; 2840 : 		}
; 2841 : 	}
; 2842 : 
; 2843 : 	if ( iSoulGemCount == 0 )

  00081	85 db		 test	 ebx, ebx
  00083	0f 84 b6 01 00
	00		 je	 $LN15@SoulPotion

; 2844 : 		return;
; 2845 : 
; 2846 : 	if ( iInvalidItemCount > 0 )

  00089	85 c0		 test	 eax, eax
  0008b	0f 8f ae 01 00
	00		 jg	 $LN15@SoulPotion

; 2847 : 		return;
; 2848 : 
; 2849 : 	if ( iSoulGemCount > 25 )

  00091	83 fb 19	 cmp	 ebx, 25			; 00000019H
  00094	7e 2f		 jle	 SHORT $LN10@SoulPotion

; 2850 : 	{
; 2851 : 		MsgOutput(lpObj->m_Index, lMsg.Get(MSGGET(6,201)));

  00096	68 c9 06 00 00	 push	 1737			; 000006c9H
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a5	50		 push	 eax
  000a6	ff 36		 push	 DWORD PTR [esi]
  000a8	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2852 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000ad	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000b1	50		 push	 eax
  000b2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000b5	50		 push	 eax
  000b6	ff 36		 push	 DWORD PTR [esi]
  000b8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000bd	83 c4 14	 add	 esp, 20			; 00000014H

; 2853 : 		lpObj->ChaosLock = FALSE;
; 2854 : 
; 2855 : 		return;

  000c0	e9 70 01 00 00	 jmp	 $LN22@SoulPotion
$LN10@SoulPotion:

; 2856 : 	}
; 2857 : 
; 2858 : 	LogChaosItem(lpObj, "SoulPotionMix");

  000c5	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KAEODMHN@SoulPotionMix?$AA@
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2859 : 	LogAddTD("[SoulPotionMix] Chaos Mix Start");

  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GHNNBMIL@?$FLSoulPotionMix?$FN?5Chaos?5Mix?5Start?$AA@
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000de	83 c4 04	 add	 esp, 4

; 2860 : 	lpObj->ChaosSuccessRate = 100;

  000e1	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 2861 : 
; 2862 : 	int nChaosNeedMoney = 50000;
; 2863 : 
; 2864 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000f0	ff 36		 push	 DWORD PTR [esi]
  000f2	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000f7	8b c8		 mov	 ecx, eax
  000f9	b8 50 c3 00 00	 mov	 eax, 50000		; 0000c350H
  000fe	f7 e9		 imul	 ecx
  00100	6a 00		 push	 0
  00102	6a 64		 push	 100			; 00000064H
  00104	52		 push	 edx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 __alldiv
  0010b	8b c8		 mov	 ecx, eax

; 2865 : 
; 2866 : 	if ( iChaosTaxMoney < 0 )

  0010d	33 c0		 xor	 eax, eax
  0010f	85 c9		 test	 ecx, ecx
  00111	0f 48 c8	 cmovs	 ecx, eax

; 2867 : 	{
; 2868 : 		iChaosTaxMoney = 0;
; 2869 : 	}
; 2870 : 
; 2871 : 	nChaosNeedMoney += iChaosTaxMoney;

  00114	8d b9 50 c3 00
	00		 lea	 edi, DWORD PTR [ecx+50000]

; 2872 : 
; 2873 : 	if ( nChaosNeedMoney < 0 )

  0011a	85 ff		 test	 edi, edi
  0011c	0f 48 f8	 cmovs	 edi, eax

; 2874 : 	{
; 2875 : 		nChaosNeedMoney = 0;
; 2876 : 	}
; 2877 : 
; 2878 : 	if ( lpObj->Money < nChaosNeedMoney )

  0011f	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00125	3b c7		 cmp	 eax, edi
  00127	7d 1c		 jge	 SHORT $LN13@SoulPotion

; 2879 : 	{
; 2880 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 2881 : 		
; 2882 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00129	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0012d	50		 push	 eax
  0012e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00131	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00135	50		 push	 eax
  00136	ff 36		 push	 DWORD PTR [esi]
  00138	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2883 : 		lpObj->ChaosLock = FALSE;
; 2884 : 
; 2885 : 		return;

  00140	e9 f0 00 00 00	 jmp	 $LN22@SoulPotion
$LN13@SoulPotion:

; 2886 : 	}
; 2887 : 
; 2888 : 	lpObj->Money -= nChaosNeedMoney;

  00145	2b c7		 sub	 eax, edi

; 2889 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00147	51		 push	 ecx
  00148	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0014d	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00153	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2890 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00158	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0015e	ff 36		 push	 DWORD PTR [esi]
  00160	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00165	83 c4 08	 add	 esp, 8

; 2891 : 
; 2892 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00168	e8 00 00 00 00	 call	 _rand
  0016d	99		 cdq
  0016e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00173	f7 f9		 idiv	 ecx
  00175	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0017b	7d 74		 jge	 SHORT $LN14@SoulPotion

; 2893 : 	{
; 2894 : 		int ItemNum = ITEMGET(14,7);
; 2895 : 		int Level = 1;
; 2896 : 		int Dur = iSoulGemCount * 10;
; 2897 : 
; 2898 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, Level, Dur, 0, 0, 0, -1, 0, 0);

  0017d	6a 00		 push	 0
  0017f	6a 00		 push	 0
  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	6a ff		 push	 -1
  00187	6a 00		 push	 0
  00189	6a 00		 push	 0
  0018b	8a c3		 mov	 al, bl
  0018d	c0 e3 02	 shl	 bl, 2
  00190	6a 00		 push	 0
  00192	02 c3		 add	 al, bl
  00194	02 c0		 add	 al, al
  00196	0f b6 c0	 movzx	 eax, al
  00199	50		 push	 eax
  0019a	6a 01		 push	 1
  0019c	68 07 1c 00 00	 push	 7175			; 00001c07H
  001a1	6a 00		 push	 0
  001a3	6a 00		 push	 0
  001a5	68 ff 00 00 00	 push	 255			; 000000ffH
  001aa	ff 36		 push	 DWORD PTR [esi]
  001ac	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2899 : 		::gObjInventoryCommit(lpObj->m_Index);

  001b1	ff 36		 push	 DWORD PTR [esi]
  001b3	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001b8	83 c4 40	 add	 esp, 64			; 00000040H

; 2900 : #if( __4GAMERS__ == 1 )
; 2901 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2902 : #endif
; 2903 : 		LogAddTD("[SoulPotionMix] [%s][%s] CBMix Success %d Money : %d-%d",

  001bb	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001be	57		 push	 edi
  001bf	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c5	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  001cb	83 c6 52	 add	 esi, 82			; 00000052H
  001ce	50		 push	 eax
  001cf	56		 push	 esi
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OKLEBBAL@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001db	83 c4 18	 add	 esp, 24			; 00000018H
  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx

; 2921 : 	}
; 2922 : }

  001e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e4	33 cd		 xor	 ecx, ebp
  001e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 04 00	 ret	 4
$LN14@SoulPotion:

; 2904 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2905 : 			lpObj->Money, nChaosNeedMoney);
; 2906 : 	}
; 2907 : 	else
; 2908 : 	{
; 2909 : #if( __4GAMERS__ == 1 )
; 2910 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2911 : #endif
; 2912 : 		ChaosBoxInit(lpObj);

  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001f4	56		 push	 esi
  001f5	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2913 : 		::GCUserChaosBoxSend(lpObj, 1);

  001fa	6a 01		 push	 1
  001fc	56		 push	 esi
  001fd	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2914 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00202	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00206	50		 push	 eax
  00207	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0020a	50		 push	 eax
  0020b	ff 36		 push	 DWORD PTR [esi]
  0020d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2915 : 
; 2916 : 		LogAddTD("[SoulPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d",

  00212	57		 push	 edi
  00213	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00219	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0021c	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00222	50		 push	 eax
  00223	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MJBBEIMO@?$FLSoulPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00232	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN22@SoulPotion:

; 2917 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2918 : 			lpObj->Money, nChaosNeedMoney);
; 2919 : 
; 2920 : 		lpObj->ChaosLock = FALSE;

  00235	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN15@SoulPotion:

; 2921 : 	}
; 2922 : }

  0023f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	33 cd		 xor	 ecx, ebp
  00246	5b		 pop	 ebx
  00247	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 04 00	 ret	 4
?SoulPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SoulPotionChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::BlessPotionChaosMix, COMDAT
; _this$ = ecx

; 2700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 2701 : 	lpObj->ChaosLock = TRUE;
; 2702 : 	int iBlessGemCount = 0;
; 2703 : 	int iChaosMoney = 0;
; 2704 : 	int iInvalidItemCount = 0;
; 2705 : 
; 2706 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2707 : 
; 2708 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	33 db		 xor	 ebx, ebx
  00022	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx
  00025	50		 push	 eax
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00033	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2709 : 	pMsg.Result = CB_ERROR;

  0003b	88 5d ef	 mov	 BYTE PTR _pMsg$[ebp+3], bl
  0003e	33 ff		 xor	 edi, edi
$LL4@BlessPotio:

; 2712 : 	{
; 2713 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 1e		 jne	 SHORT $LN23@BlessPotio

; 2714 : 		{
; 2715 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00052	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00058	b9 0d 1c 00 00	 mov	 ecx, 7181		; 00001c0dH
  0005d	66 39 4c 38 06	 cmp	 WORD PTR [eax+edi+6], cx

; 2718 : 			}
; 2719 : 			else

  00062	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
  00065	75 03		 jne	 SHORT $LN6@BlessPotio

; 2716 : 			{
; 2717 : 				iBlessGemCount++;

  00067	43		 inc	 ebx

; 2718 : 			}
; 2719 : 			else

  00068	eb 09		 jmp	 SHORT $LN2@BlessPotio
$LN6@BlessPotio:

; 2720 : 			{
; 2721 : 				iInvalidItemCount++;

  0006a	40		 inc	 eax
  0006b	89 45 e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], eax
  0006e	eb 03		 jmp	 SHORT $LN2@BlessPotio
$LN23@BlessPotio:
  00070	8b 45 e8	 mov	 eax, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@BlessPotio:

; 2710 : 
; 2711 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00073	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00079	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0007f	7c bf		 jl	 SHORT $LL4@BlessPotio

; 2722 : 			}
; 2723 : 		}
; 2724 : 	}
; 2725 : 
; 2726 : 	if ( iBlessGemCount == 0 )

  00081	85 db		 test	 ebx, ebx
  00083	0f 84 b6 01 00
	00		 je	 $LN17@BlessPotio

; 2727 : 		return;
; 2728 : 
; 2729 : 	if ( iInvalidItemCount > 0 )

  00089	85 c0		 test	 eax, eax
  0008b	0f 8f ae 01 00
	00		 jg	 $LN17@BlessPotio

; 2730 : 		return;
; 2731 : 
; 2732 : 	if ( iBlessGemCount == 0 || iInvalidItemCount > 0 )
; 2733 : 	{
; 2734 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 2735 : 		lpObj->ChaosLock = FALSE;
; 2736 : 		return;
; 2737 : 	}
; 2738 : 
; 2739 : 	if ( iBlessGemCount > 25 )

  00091	83 fb 19	 cmp	 ebx, 25			; 00000019H
  00094	7e 2f		 jle	 SHORT $LN12@BlessPotio

; 2740 : 	{
; 2741 : 		MsgOutput(lpObj->m_Index, lMsg.Get(MSGGET(6,201)));

  00096	68 c9 06 00 00	 push	 1737			; 000006c9H
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a5	50		 push	 eax
  000a6	ff 36		 push	 DWORD PTR [esi]
  000a8	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2742 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000ad	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000b1	50		 push	 eax
  000b2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000b5	50		 push	 eax
  000b6	ff 36		 push	 DWORD PTR [esi]
  000b8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000bd	83 c4 14	 add	 esp, 20			; 00000014H

; 2743 : 		lpObj->ChaosLock = FALSE;
; 2744 : 
; 2745 : 		return;

  000c0	e9 70 01 00 00	 jmp	 $LN24@BlessPotio
$LN12@BlessPotio:

; 2746 : 	}
; 2747 : 
; 2748 : 	LogChaosItem(lpObj, "BlessPotionMix");

  000c5	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NBHFIPDI@BlessPotionMix?$AA@
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2749 : 	LogAddTD("[BlessPotionMix] Chaos Mix Start");

  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EBJOJCKF@?$FLBlessPotionMix?$FN?5Chaos?5Mix?5Start@
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000de	83 c4 04	 add	 esp, 4

; 2750 : 	lpObj->ChaosSuccessRate = 100;

  000e1	c7 86 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [esi+4636], 100 ; 00000064H

; 2751 : 
; 2752 : 	int nChaosNeedMoney = 100000;
; 2753 : 
; 2754 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000eb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  000f0	ff 36		 push	 DWORD PTR [esi]
  000f2	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000f7	8b c8		 mov	 ecx, eax
  000f9	b8 a0 86 01 00	 mov	 eax, 100000		; 000186a0H
  000fe	f7 e9		 imul	 ecx
  00100	6a 00		 push	 0
  00102	6a 64		 push	 100			; 00000064H
  00104	52		 push	 edx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 __alldiv
  0010b	8b c8		 mov	 ecx, eax

; 2755 : 
; 2756 : 	if ( iChaosTaxMoney < 0 )

  0010d	33 c0		 xor	 eax, eax
  0010f	85 c9		 test	 ecx, ecx
  00111	0f 48 c8	 cmovs	 ecx, eax

; 2757 : 	{
; 2758 : 		iChaosTaxMoney = 0;
; 2759 : 	}
; 2760 : 
; 2761 : 	nChaosNeedMoney += iChaosTaxMoney;

  00114	8d b9 a0 86 01
	00		 lea	 edi, DWORD PTR [ecx+100000]

; 2762 : 
; 2763 : 	if ( nChaosNeedMoney < 0 )

  0011a	85 ff		 test	 edi, edi
  0011c	0f 48 f8	 cmovs	 edi, eax

; 2764 : 	{
; 2765 : 		nChaosNeedMoney = 0;
; 2766 : 	}
; 2767 : 
; 2768 : 	if ( lpObj->Money < nChaosNeedMoney )

  0011f	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  00125	3b c7		 cmp	 eax, edi
  00127	7d 1c		 jge	 SHORT $LN15@BlessPotio

; 2769 : 	{
; 2770 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 2771 : 		
; 2772 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00129	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0012d	50		 push	 eax
  0012e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00131	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00135	50		 push	 eax
  00136	ff 36		 push	 DWORD PTR [esi]
  00138	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0013d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2773 : 		lpObj->ChaosLock = FALSE;
; 2774 : 
; 2775 : 		return;

  00140	e9 f0 00 00 00	 jmp	 $LN24@BlessPotio
$LN15@BlessPotio:

; 2776 : 	}
; 2777 : 
; 2778 : 	lpObj->Money -= nChaosNeedMoney;

  00145	2b c7		 sub	 eax, edi

; 2779 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00147	51		 push	 ecx
  00148	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0014d	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00153	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2780 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00158	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0015e	ff 36		 push	 DWORD PTR [esi]
  00160	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00165	83 c4 08	 add	 esp, 8

; 2781 : 
; 2782 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00168	e8 00 00 00 00	 call	 _rand
  0016d	99		 cdq
  0016e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00173	f7 f9		 idiv	 ecx
  00175	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0017b	7d 74		 jge	 SHORT $LN16@BlessPotio

; 2783 : 	{
; 2784 : 		int ItemNum = ITEMGET(14,7);
; 2785 : 		int Level = 0;
; 2786 : 		int Dur = iBlessGemCount * 10;
; 2787 : 
; 2788 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ItemNum, Level, Dur, 0, 0, 0, -1, 0, 0);

  0017d	6a 00		 push	 0
  0017f	6a 00		 push	 0
  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	6a ff		 push	 -1
  00187	6a 00		 push	 0
  00189	6a 00		 push	 0
  0018b	8a c3		 mov	 al, bl
  0018d	c0 e3 02	 shl	 bl, 2
  00190	6a 00		 push	 0
  00192	02 c3		 add	 al, bl
  00194	02 c0		 add	 al, al
  00196	0f b6 c0	 movzx	 eax, al
  00199	50		 push	 eax
  0019a	6a 00		 push	 0
  0019c	68 07 1c 00 00	 push	 7175			; 00001c07H
  001a1	6a 00		 push	 0
  001a3	6a 00		 push	 0
  001a5	68 ff 00 00 00	 push	 255			; 000000ffH
  001aa	ff 36		 push	 DWORD PTR [esi]
  001ac	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2789 : 		::gObjInventoryCommit(lpObj->m_Index);

  001b1	ff 36		 push	 DWORD PTR [esi]
  001b3	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  001b8	83 c4 40	 add	 esp, 64			; 00000040H

; 2790 : #if( __4GAMERS__ == 1 )
; 2791 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2792 : #endif
; 2793 : 		LogAddTD("[BlessPotionMix] [%s][%s] CBMix Success %d Money : %d-%d",

  001bb	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001be	57		 push	 edi
  001bf	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c5	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  001cb	83 c6 52	 add	 esi, 82			; 00000052H
  001ce	50		 push	 eax
  001cf	56		 push	 esi
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@CHGCMDK@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001db	83 c4 18	 add	 esp, 24			; 00000018H
  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx

; 2811 : 	}
; 2812 : }

  001e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e4	33 cd		 xor	 ecx, ebp
  001e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 04 00	 ret	 4
$LN16@BlessPotio:

; 2794 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2795 : 			lpObj->Money, nChaosNeedMoney);
; 2796 : 	}
; 2797 : 	else
; 2798 : 	{
; 2799 : #if( __4GAMERS__ == 1 )
; 2800 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2801 : #endif
; 2802 : 		ChaosBoxInit(lpObj);

  001f1	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001f4	56		 push	 esi
  001f5	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2803 : 		::GCUserChaosBoxSend(lpObj, 1);

  001fa	6a 01		 push	 1
  001fc	56		 push	 esi
  001fd	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2804 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00202	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00206	50		 push	 eax
  00207	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0020a	50		 push	 eax
  0020b	ff 36		 push	 DWORD PTR [esi]
  0020d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2805 : 
; 2806 : 		LogAddTD("[BlessPotionMix] [%s][%s] CBMix Fail %d Money : %d-%d",

  00212	57		 push	 edi
  00213	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00219	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0021c	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00222	50		 push	 eax
  00223	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@ECHLAENJ@?$FLBlessPotionMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  0022c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00232	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN24@BlessPotio:

; 2807 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, 
; 2808 : 			lpObj->Money, nChaosNeedMoney);
; 2809 : 
; 2810 : 		lpObj->ChaosLock = FALSE;

  00235	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN17@BlessPotio:

; 2811 : 	}
; 2812 : }

  0023f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	33 cd		 xor	 ecx, ebp
  00246	5b		 pop	 ebx
  00247	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 04 00	 ret	 4
?BlessPotionChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::BlessPotionChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_SoulGemCount$1$ = -48					; size = 4
_Option1$2$ = -44					; size = 4
_this$1$ = -44						; size = 4
_Add$2$ = -40						; size = 4
_SoulOfSpirit$1$ = -40					; size = 4
_nChaosNeedMoney$2$ = -36				; size = 4
_CreatureGemCount$1$ = -36				; size = 4
_BlessGemCount$1$ = -32					; size = 4
_ChoasGemCount$1$ = -28					; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_iCharmOfLuckCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DarkSpiritChaosMix, COMDAT
; _this$ = ecx

; 2516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 2517 : 	lpObj->ChaosLock = TRUE;
; 2518 : 	int ChoasGemCount = 0;
; 2519 : 	int BlessGemCount = 0;
; 2520 : 	int SoulGemCount = 0;

  00016	33 c0		 xor	 eax, eax

; 2521 : 	int CreatureGemCount = 0;
; 2522 : 	int SoulOfSpirit = 0;
; 2523 : 	int iChaosMoney = 0;
; 2524 : 
; 2525 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2526 : 
; 2527 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	89 45 d0	 mov	 DWORD PTR _SoulGemCount$1$[ebp], eax
  0001d	89 45 dc	 mov	 DWORD PTR _CreatureGemCount$1$[ebp], eax
  00020	89 45 d8	 mov	 DWORD PTR _SoulOfSpirit$1$[ebp], eax
  00023	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00026	68 86 00 00 00	 push	 134			; 00000086H
  0002b	50		 push	 eax
  0002c	89 4d d4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002f	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  00039	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ChoasGemCount$1$[ebp], 0
  00040	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _BlessGemCount$1$[ebp], 0
  00047	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2528 : 	pMsg.Result = CB_ERROR;
; 2529 : 	int iCharmOfLuckCount = 0;

  0004c	33 db		 xor	 ebx, ebx
  0004e	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2530 : 	int iInvalidItemCount = 0;

  00055	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00058	33 f6		 xor	 esi, esi
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@DarkSpirit:

; 2533 : 	{
; 2534 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00066	03 ce		 add	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 2b		 jne	 SHORT $LN41@DarkSpirit

; 2535 : 		{
; 2536 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00072	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00078	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0007d	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  00082	66 3b c2	 cmp	 ax, dx
  00085	75 09		 jne	 SHORT $LN8@DarkSpirit

; 2537 : 			{
; 2538 : 				BlessGemCount++;

  00087	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  0008a	42		 inc	 edx
  0008b	89 55 e0	 mov	 DWORD PTR _BlessGemCount$1$[ebp], edx
  0008e	eb 10		 jmp	 SHORT $LN42@DarkSpirit
$LN8@DarkSpirit:

; 2539 : 			}
; 2540 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  00090	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00095	66 3b c2	 cmp	 ax, dx
  00098	75 77		 jne	 SHORT $LN10@DarkSpirit

; 2541 : 			{
; 2542 : 				SoulGemCount++;

  0009a	ff 45 d0	 inc	 DWORD PTR _SoulGemCount$1$[ebp]
$LN41@DarkSpirit:
  0009d	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
$LN42@DarkSpirit:
  000a0	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
$LN43@DarkSpirit:
  000a3	8b 4d e8	 mov	 ecx, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@DarkSpirit:

; 2531 : 
; 2532 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000a6	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000ac	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000b2	7c ac		 jl	 SHORT $LL4@DarkSpirit

; 2563 : 			}
; 2564 : 		}
; 2565 : 	}
; 2566 : 
; 2567 : 	if ( ChoasGemCount != 1 || BlessGemCount != 2 || SoulGemCount != 2 || CreatureGemCount != 1 || SoulOfSpirit != 1 || iInvalidItemCount > 0 )

  000b4	89 5d e8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], ebx
  000b7	83 f8 01	 cmp	 eax, 1
  000ba	75 25		 jne	 SHORT $LN21@DarkSpirit
  000bc	83 fa 02	 cmp	 edx, 2
  000bf	75 20		 jne	 SHORT $LN21@DarkSpirit
  000c1	39 55 d0	 cmp	 DWORD PTR _SoulGemCount$1$[ebp], edx
  000c4	75 1b		 jne	 SHORT $LN21@DarkSpirit
  000c6	39 45 dc	 cmp	 DWORD PTR _CreatureGemCount$1$[ebp], eax
  000c9	75 16		 jne	 SHORT $LN21@DarkSpirit
  000cb	39 45 d8	 cmp	 DWORD PTR _SoulOfSpirit$1$[ebp], eax
  000ce	75 11		 jne	 SHORT $LN21@DarkSpirit
  000d0	85 c9		 test	 ecx, ecx
  000d2	7f 0d		 jg	 SHORT $LN21@DarkSpirit

; 2571 : 
; 2572 : 		return;
; 2573 : 	}
; 2574 : 
; 2575 : 	if ( iCharmOfLuckCount > 10 )

  000d4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000d7	0f 8e a2 00 00
	00		 jle	 $LN22@DarkSpirit

; 2576 : 	{
; 2577 : 		pMsg.Result = 0xF0;

  000dd	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN21@DarkSpirit:

; 2568 : 	{
; 2569 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000e1	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e5	50		 push	 eax
  000e6	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e9	50		 push	 eax
  000ea	ff 37		 push	 DWORD PTR [edi]
  000ec	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN44@DarkSpirit:

; 2570 : 		lpObj->ChaosLock = FALSE;

  000f4	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 2690 : 	}
; 2691 : }

  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN10@DarkSpirit:

; 2543 : 			}
; 2544 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Creation

  00111	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00116	66 3b c2	 cmp	 ax, dx
  00119	75 08		 jne	 SHORT $LN12@DarkSpirit

; 2545 : 			{
; 2546 : 				CreatureGemCount++;

  0011b	ff 45 dc	 inc	 DWORD PTR _CreatureGemCount$1$[ebp]
  0011e	e9 7a ff ff ff	 jmp	 $LN41@DarkSpirit
$LN12@DarkSpirit:

; 2547 : 			}
; 2548 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// SUPE CHOAS HAHAHA

  00123	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00128	66 3b c2	 cmp	 ax, dx
  0012b	75 0f		 jne	 SHORT $LN14@DarkSpirit

; 2549 : 			{
; 2550 : 				ChoasGemCount++;

  0012d	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00130	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  00133	40		 inc	 eax
  00134	89 45 e4	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  00137	e9 67 ff ff ff	 jmp	 $LN43@DarkSpirit
$LN14@DarkSpirit:

; 2551 : 			}
; 2552 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,31) && lpObj->pChaosBox[n].m_Level == 1 )	// Spirit

  0013c	ba 1f 1a 00 00	 mov	 edx, 6687		; 00001a1fH
  00141	66 3b c2	 cmp	 ax, dx
  00144	75 10		 jne	 SHORT $LN16@DarkSpirit
  00146	66 83 7c 31 08
	01		 cmp	 WORD PTR [ecx+esi+8], 1
  0014c	75 08		 jne	 SHORT $LN16@DarkSpirit

; 2553 : 			{
; 2554 : 				SoulOfSpirit++;

  0014e	ff 45 d8	 inc	 DWORD PTR _SoulOfSpirit$1$[ebp]
  00151	e9 47 ff ff ff	 jmp	 $LN41@DarkSpirit
$LN16@DarkSpirit:

; 2555 : 			}
; 2556 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00156	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0015b	66 3b c2	 cmp	 ax, dx

; 2559 : 			}
; 2560 : 			else

  0015e	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  00161	75 0d		 jne	 SHORT $LN18@DarkSpirit

; 2557 : 			{
; 2558 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00163	f3 0f 2c 44 31
	24		 cvttss2si eax, DWORD PTR [ecx+esi+36]
  00169	03 d8		 add	 ebx, eax

; 2559 : 			}
; 2560 : 			else

  0016b	e9 30 ff ff ff	 jmp	 $LN42@DarkSpirit
$LN18@DarkSpirit:

; 2561 : 			{
; 2562 : 				iInvalidItemCount++;

  00170	8b 4d e8	 mov	 ecx, DWORD PTR _iInvalidItemCount$1$[ebp]
  00173	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00176	41		 inc	 ecx
  00177	89 4d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ecx
  0017a	e9 27 ff ff ff	 jmp	 $LN2@DarkSpirit
$LN22@DarkSpirit:

; 2578 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 2579 : 		lpObj->ChaosLock = FALSE;
; 2580 : 
; 2581 : 		return ;
; 2582 : 	}
; 2583 : 
; 2584 : 	LogChaosItem(lpObj, "DarkSpiritMix");

  0017f	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OCFEOMDO@DarkSpiritMix?$AA@
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2585 : 	LogAddTD("[DarkSpiritMix] Chaos Mix Start");

  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HOBPNGGO@?$FLDarkSpiritMix?$FN?5Chaos?5Mix?5Start?$AA@
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00198	83 c4 04	 add	 esp, 4

; 2586 : 	lpObj->ChaosSuccessRate = 60;
; 2587 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0019b	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]

; 2588 : 
; 2589 : 	int nChaosNeedMoney = 1000000;
; 2590 : 
; 2591 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0019e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001a3	89 87 1c 12 00
	00		 mov	 DWORD PTR [edi+4636], eax
  001a9	ff 37		 push	 DWORD PTR [edi]
  001ab	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001b0	8b c8		 mov	 ecx, eax
  001b2	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  001b7	f7 e9		 imul	 ecx
  001b9	6a 00		 push	 0
  001bb	6a 64		 push	 100			; 00000064H
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 __alldiv

; 2592 : 
; 2593 : 	if ( iChaosTaxMoney < 0 )

  001c4	33 c9		 xor	 ecx, ecx
  001c6	85 c0		 test	 eax, eax
  001c8	0f 48 c1	 cmovs	 eax, ecx

; 2594 : 	{
; 2595 : 		iChaosTaxMoney = 0;
; 2596 : 	}
; 2597 : 
; 2598 : 	nChaosNeedMoney += iChaosTaxMoney;

  001cb	8d b0 40 42 0f
	00		 lea	 esi, DWORD PTR [eax+1000000]

; 2599 : 
; 2600 : 	if ( nChaosNeedMoney < 0 )

  001d1	85 f6		 test	 esi, esi
  001d3	0f 48 f1	 cmovs	 esi, ecx

; 2601 : 	{
; 2602 : 		nChaosNeedMoney = 0;
; 2603 : 	}
; 2604 : 
; 2605 : 	if ( lpObj->Money < nChaosNeedMoney )

  001d6	8b 8f cc 00 00
	00		 mov	 ecx, DWORD PTR [edi+204]
  001dc	89 75 dc	 mov	 DWORD PTR _nChaosNeedMoney$2$[ebp], esi
  001df	3b ce		 cmp	 ecx, esi
  001e1	7d 09		 jge	 SHORT $LN25@DarkSpirit

; 2606 : 	{
; 2607 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001e3	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 2608 : 		
; 2609 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 2610 : 		lpObj->ChaosLock = FALSE;
; 2611 : 
; 2612 : 		return;

  001e7	e9 f5 fe ff ff	 jmp	 $LN21@DarkSpirit
$LN25@DarkSpirit:

; 2613 : 	}
; 2614 : 
; 2615 : 	lpObj->Money -= nChaosNeedMoney;

  001ec	2b ce		 sub	 ecx, esi
  001ee	89 8f cc 00 00
	00		 mov	 DWORD PTR [edi+204], ecx

; 2616 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2617 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001ff	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  00205	ff 37		 push	 DWORD PTR [edi]
  00207	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0020c	83 c4 08	 add	 esp, 8

; 2618 : 
; 2619 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0020f	e8 00 00 00 00	 call	 _rand
  00214	99		 cdq
  00215	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0021a	f7 f9		 idiv	 ecx
  0021c	3b 97 1c 12 00
	00		 cmp	 edx, DWORD PTR [edi+4636]
  00222	0f 8d fe 00 00
	00		 jge	 $LN26@DarkSpirit

; 2620 : 	{
; 2621 : 		int Level = 0;
; 2622 : 		int ItemType = 13;
; 2623 : 		int ItemSubType = 5;
; 2624 : 		int ItemNum = ITEMGET(ItemType, ItemSubType);
; 2625 : 		int Option1 = 0;
; 2626 : 		int Option2 = 0;
; 2627 : 		int Option3 = 0;
; 2628 : 
; 2629 : 		int Add = 0;
; 2630 : 
; 2631 : 		if ( (rand()%100) < (lpObj->ChaosSuccessRate/5+6) )

  00228	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0022d	33 db		 xor	 ebx, ebx
  0022f	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00235	8b f2		 mov	 esi, edx
  00237	d1 fe		 sar	 esi, 1
  00239	e8 00 00 00 00	 call	 _rand
  0023e	99		 cdq
  0023f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00244	f7 f9		 idiv	 ecx
  00246	8b c6		 mov	 eax, esi
  00248	83 c6 06	 add	 esi, 6
  0024b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024e	03 c6		 add	 eax, esi
  00250	be 01 00 00 00	 mov	 esi, 1
  00255	3b d0		 cmp	 edx, eax
  00257	8b c3		 mov	 eax, ebx
  00259	0f 4c c6	 cmovl	 eax, esi
  0025c	89 45 d8	 mov	 DWORD PTR _Add$2$[ebp], eax

; 2632 : 		{
; 2633 : 			Add = 1;
; 2634 : 		}
; 2635 : 
; 2636 : 		if ( (rand()%5) == 0 )

  0025f	e8 00 00 00 00	 call	 _rand
  00264	99		 cdq
  00265	b9 05 00 00 00	 mov	 ecx, 5
  0026a	f7 f9		 idiv	 ecx
  0026c	8b c3		 mov	 eax, ebx
  0026e	85 d2		 test	 edx, edx
  00270	0f 44 c6	 cmove	 eax, esi
  00273	89 45 d4	 mov	 DWORD PTR _Option1$2$[ebp], eax

; 2637 : 		{
; 2638 : 			Option1 = 1;
; 2639 : 		}
; 2640 : 
; 2641 : 		int lc22 = rand()%100;	

  00276	e8 00 00 00 00	 call	 _rand
  0027b	99		 cdq
  0027c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00281	f7 f9		 idiv	 ecx
  00283	8b f2		 mov	 esi, edx

; 2642 : 		int lc23 = rand()%3;

  00285	e8 00 00 00 00	 call	 _rand
  0028a	99		 cdq
  0028b	b9 03 00 00 00	 mov	 ecx, 3
  00290	f7 f9		 idiv	 ecx

; 2643 : //		int lc24 = lc23;
; 2644 : 
; 2645 : 		switch ( lc23 )

  00292	2b d3		 sub	 edx, ebx
  00294	74 20		 je	 SHORT $LN30@DarkSpirit
  00296	83 ea 01	 sub	 edx, 1
  00299	74 0f		 je	 SHORT $LN32@DarkSpirit
  0029b	83 ea 01	 sub	 edx, 1
  0029e	75 1c		 jne	 SHORT $LN31@DarkSpirit

; 2660 : 
; 2661 : 			case 2:
; 2662 : 				if ( lc22 <  20 )

  002a0	83 fe 14	 cmp	 esi, 20			; 00000014H
  002a3	7d 17		 jge	 SHORT $LN31@DarkSpirit

; 2663 : 				{
; 2664 : 					Option2 = 1;

  002a5	8d 59 fe	 lea	 ebx, DWORD PTR [ecx-2]
  002a8	eb 12		 jmp	 SHORT $LN31@DarkSpirit
$LN32@DarkSpirit:

; 2649 : 				{
; 2650 : 					Option2 = 3;
; 2651 : 				}
; 2652 : 				break;
; 2653 : 
; 2654 : 			case 1:
; 2655 : 				if ( lc22 <  10 )

  002aa	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  002ad	7d 0d		 jge	 SHORT $LN31@DarkSpirit

; 2656 : 				{
; 2657 : 					Option2 = 2;

  002af	bb 02 00 00 00	 mov	 ebx, 2

; 2658 : 				}
; 2659 : 				break;

  002b4	eb 06		 jmp	 SHORT $LN31@DarkSpirit
$LN30@DarkSpirit:

; 2646 : 		{
; 2647 : 			case 0:
; 2648 : 				if ( lc22 <  4 )

  002b6	83 fe 04	 cmp	 esi, 4
  002b9	0f 4c d9	 cmovl	 ebx, ecx
$LN31@DarkSpirit:

; 2665 : 				}
; 2666 : 				break;
; 2667 : 		}
; 2668 : #if( __4GAMERS__ == 1 )
; 2669 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2670 : #endif
; 2671 : 		::PetItemSerialCreateSend(lpObj->m_Index, -2, 0, 0, ItemNum, Level, 0, Add, Option1, Option2, -1, 0, 0); 

  002bc	8b 45 d4	 mov	 eax, DWORD PTR _Option1$2$[ebp]
  002bf	6a 00		 push	 0
  002c1	6a 00		 push	 0
  002c3	6a ff		 push	 -1
  002c5	53		 push	 ebx
  002c6	50		 push	 eax
  002c7	8b 45 d8	 mov	 eax, DWORD PTR _Add$2$[ebp]
  002ca	50		 push	 eax
  002cb	6a 00		 push	 0
  002cd	6a 00		 push	 0
  002cf	68 05 1a 00 00	 push	 6661			; 00001a05H
  002d4	6a 00		 push	 0
  002d6	6a 00		 push	 0
  002d8	68 fe 00 00 00	 push	 254			; 000000feH
  002dd	ff 37		 push	 DWORD PTR [edi]
  002df	e8 00 00 00 00	 call	 ?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; PetItemSerialCreateSend

; 2672 : 		::gObjInventoryCommit(lpObj->m_Index);

  002e4	ff 37		 push	 DWORD PTR [edi]
  002e6	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2673 : 		LogAddTD("[DarkSpiritMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  002eb	ff 75 e8	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  002ee	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  002f1	ff 75 dc	 push	 DWORD PTR _nChaosNeedMoney$2$[ebp]
  002f4	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  002fa	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  00300	50		 push	 eax
  00301	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00304	50		 push	 eax
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@DIJHKIBN@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2690 : 	}
; 2691 : }

  00310	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00313	83 c4 54	 add	 esp, 84			; 00000054H
  00316	33 cd		 xor	 ecx, ebp
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5b		 pop	 ebx
  0031b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00320	8b e5		 mov	 esp, ebp
  00322	5d		 pop	 ebp
  00323	c2 04 00	 ret	 4
$LN26@DarkSpirit:

; 2674 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2675 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2676 : 	}
; 2677 : 	else
; 2678 : 	{
; 2679 : #if( __4GAMERS__ == 1 )
; 2680 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2681 : #endif
; 2682 : 		ChaosBoxInit(lpObj);

  00326	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00329	57		 push	 edi
  0032a	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2683 : 		GCUserChaosBoxSend(lpObj, 1);

  0032f	6a 01		 push	 1
  00331	57		 push	 edi
  00332	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2684 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00337	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0033b	50		 push	 eax
  0033c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0033f	50		 push	 eax
  00340	ff 37		 push	 DWORD PTR [edi]
  00342	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2685 : 
; 2686 : 		LogAddTD("[DarkSpiritMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00347	53		 push	 ebx
  00348	56		 push	 esi
  00349	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  0034f	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00352	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  00358	50		 push	 eax
  00359	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0035c	50		 push	 eax
  0035d	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@ENJLGEHL@?$FLDarkSpiritMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00368	83 c4 30	 add	 esp, 48			; 00000030H

; 2687 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2688 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2689 : 		lpObj->ChaosLock = FALSE;

  0036b	e9 84 fd ff ff	 jmp	 $LN44@DarkSpirit
?DarkSpiritChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DarkSpiritChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_SoulGemCount$1$ = -48					; size = 4
_Option1$2$ = -44					; size = 4
_this$1$ = -44						; size = 4
_Add$2$ = -40						; size = 4
_SoulOfDarkHorse$1$ = -40				; size = 4
_nChaosNeedMoney$2$ = -36				; size = 4
_CreatureGemCount$1$ = -36				; size = 4
_BlessGemCount$1$ = -32					; size = 4
_ChoasGemCount$1$ = -28					; size = 4
_iInvalidItemCount$1$ = -24				; size = 4
_iCharmOfLuckCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DarkHorseChaosMix, COMDAT
; _this$ = ecx

; 2331 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 2332 : 	lpObj->ChaosLock = TRUE;
; 2333 : 	int ChoasGemCount = 0;
; 2334 : 	int BlessGemCount = 0;
; 2335 : 	int SoulGemCount = 0;

  00016	33 c0		 xor	 eax, eax

; 2336 : 	int CreatureGemCount = 0;
; 2337 : 	int SoulOfDarkHorse = 0;
; 2338 : 	int iChaosMoney = 0;
; 2339 : 
; 2340 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2341 : 
; 2342 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00018	6a 10		 push	 16			; 00000010H
  0001a	89 45 d0	 mov	 DWORD PTR _SoulGemCount$1$[ebp], eax
  0001d	89 45 dc	 mov	 DWORD PTR _CreatureGemCount$1$[ebp], eax
  00020	89 45 d8	 mov	 DWORD PTR _SoulOfDarkHorse$1$[ebp], eax
  00023	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00026	68 86 00 00 00	 push	 134			; 00000086H
  0002b	50		 push	 eax
  0002c	89 4d d4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002f	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  00039	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ChoasGemCount$1$[ebp], 0
  00040	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _BlessGemCount$1$[ebp], 0
  00047	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2343 : 	pMsg.Result = CB_ERROR;
; 2344 : 	int iCharmOfLuckCount = 0;

  0004c	33 db		 xor	 ebx, ebx
  0004e	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2345 : 	int iInvalidItemCount = 0;

  00055	89 5d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ebx
  00058	33 f6		 xor	 esi, esi
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@DarkHorseC:

; 2348 : 	{
; 2349 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00060	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00066	03 ce		 add	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0006d	83 f8 01	 cmp	 eax, 1
  00070	75 2b		 jne	 SHORT $LN41@DarkHorseC

; 2350 : 		{
; 2351 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  00072	8b 8f 10 12 00
	00		 mov	 ecx, DWORD PTR [edi+4624]
  00078	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0007d	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  00082	66 3b c2	 cmp	 ax, dx
  00085	75 09		 jne	 SHORT $LN8@DarkHorseC

; 2352 : 			{
; 2353 : 				BlessGemCount++;

  00087	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  0008a	42		 inc	 edx
  0008b	89 55 e0	 mov	 DWORD PTR _BlessGemCount$1$[ebp], edx
  0008e	eb 10		 jmp	 SHORT $LN42@DarkHorseC
$LN8@DarkHorseC:

; 2354 : 			}
; 2355 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  00090	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  00095	66 3b c2	 cmp	 ax, dx
  00098	75 77		 jne	 SHORT $LN10@DarkHorseC

; 2356 : 			{
; 2357 : 				SoulGemCount++;

  0009a	ff 45 d0	 inc	 DWORD PTR _SoulGemCount$1$[ebp]
$LN41@DarkHorseC:
  0009d	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
$LN42@DarkHorseC:
  000a0	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
$LN43@DarkHorseC:
  000a3	8b 4d e8	 mov	 ecx, DWORD PTR _iInvalidItemCount$1$[ebp]
$LN2@DarkHorseC:

; 2346 : 
; 2347 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  000a6	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000ac	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000b2	7c ac		 jl	 SHORT $LL4@DarkHorseC

; 2378 : 			}
; 2379 : 			
; 2380 : 
; 2381 : 		}
; 2382 : 	}
; 2383 : 
; 2384 : 	if ( ChoasGemCount != 1 || BlessGemCount != 5 || SoulGemCount != 5 || CreatureGemCount != 1 || SoulOfDarkHorse != 1 || iInvalidItemCount > 0 )

  000b4	89 5d e8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], ebx
  000b7	83 f8 01	 cmp	 eax, 1
  000ba	75 25		 jne	 SHORT $LN21@DarkHorseC
  000bc	83 fa 05	 cmp	 edx, 5
  000bf	75 20		 jne	 SHORT $LN21@DarkHorseC
  000c1	39 55 d0	 cmp	 DWORD PTR _SoulGemCount$1$[ebp], edx
  000c4	75 1b		 jne	 SHORT $LN21@DarkHorseC
  000c6	39 45 dc	 cmp	 DWORD PTR _CreatureGemCount$1$[ebp], eax
  000c9	75 16		 jne	 SHORT $LN21@DarkHorseC
  000cb	39 45 d8	 cmp	 DWORD PTR _SoulOfDarkHorse$1$[ebp], eax
  000ce	75 11		 jne	 SHORT $LN21@DarkHorseC
  000d0	85 c9		 test	 ecx, ecx
  000d2	7f 0d		 jg	 SHORT $LN21@DarkHorseC

; 2388 : 
; 2389 : 		return;
; 2390 : 	}
; 2391 : 
; 2392 : 	if ( iCharmOfLuckCount > 10 )

  000d4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000d7	0f 8e a2 00 00
	00		 jle	 $LN22@DarkHorseC

; 2393 : 	{
; 2394 : 		pMsg.Result = 0xF0;

  000dd	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN21@DarkHorseC:

; 2385 : 	{
; 2386 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  000e1	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e5	50		 push	 eax
  000e6	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e9	50		 push	 eax
  000ea	ff 37		 push	 DWORD PTR [edi]
  000ec	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN44@DarkHorseC:

; 2387 : 		lpObj->ChaosLock = FALSE;

  000f4	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 2507 : 	}
; 2508 : }

  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN10@DarkHorseC:

; 2358 : 			}
; 2359 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Creation

  00111	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  00116	66 3b c2	 cmp	 ax, dx
  00119	75 08		 jne	 SHORT $LN12@DarkHorseC

; 2360 : 			{
; 2361 : 				CreatureGemCount++;

  0011b	ff 45 dc	 inc	 DWORD PTR _CreatureGemCount$1$[ebp]
  0011e	e9 7a ff ff ff	 jmp	 $LN41@DarkHorseC
$LN12@DarkHorseC:

; 2362 : 			}
; 2363 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// SUPE CHOAS HAHAHA

  00123	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00128	66 3b c2	 cmp	 ax, dx
  0012b	75 0f		 jne	 SHORT $LN14@DarkHorseC

; 2364 : 			{
; 2365 : 				ChoasGemCount++;

  0012d	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00130	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  00133	40		 inc	 eax
  00134	89 45 e4	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  00137	e9 67 ff ff ff	 jmp	 $LN43@DarkHorseC
$LN14@DarkHorseC:

; 2366 : 			}
; 2367 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,31) && lpObj->pChaosBox[n].m_Level == 0 )	// Spirit

  0013c	ba 1f 1a 00 00	 mov	 edx, 6687		; 00001a1fH
  00141	66 3b c2	 cmp	 ax, dx
  00144	75 10		 jne	 SHORT $LN16@DarkHorseC
  00146	66 83 7c 31 08
	00		 cmp	 WORD PTR [ecx+esi+8], 0
  0014c	75 08		 jne	 SHORT $LN16@DarkHorseC

; 2368 : 			{
; 2369 : 				SoulOfDarkHorse++;

  0014e	ff 45 d8	 inc	 DWORD PTR _SoulOfDarkHorse$1$[ebp]
  00151	e9 47 ff ff ff	 jmp	 $LN41@DarkHorseC
$LN16@DarkHorseC:

; 2370 : 			}
; 2371 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00156	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0015b	66 3b c2	 cmp	 ax, dx

; 2374 : 			}
; 2375 : 			else

  0015e	8b 55 e0	 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  00161	75 0d		 jne	 SHORT $LN18@DarkHorseC

; 2372 : 			{
; 2373 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00163	f3 0f 2c 44 31
	24		 cvttss2si eax, DWORD PTR [ecx+esi+36]
  00169	03 d8		 add	 ebx, eax

; 2374 : 			}
; 2375 : 			else

  0016b	e9 30 ff ff ff	 jmp	 $LN42@DarkHorseC
$LN18@DarkHorseC:

; 2376 : 			{
; 2377 : 				iInvalidItemCount++;

  00170	8b 4d e8	 mov	 ecx, DWORD PTR _iInvalidItemCount$1$[ebp]
  00173	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00176	41		 inc	 ecx
  00177	89 4d e8	 mov	 DWORD PTR _iInvalidItemCount$1$[ebp], ecx
  0017a	e9 27 ff ff ff	 jmp	 $LN2@DarkHorseC
$LN22@DarkHorseC:

; 2395 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 2396 : 		lpObj->ChaosLock = FALSE;
; 2397 : 
; 2398 : 		return ;
; 2399 : 	}
; 2400 : 
; 2401 : 	LogChaosItem(lpObj, "DarkHorseMix");

  0017f	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00182	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LDINKAHL@DarkHorseMix?$AA@
  00187	57		 push	 edi
  00188	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2402 : 	LogAddTD("[DarkHorseMix] Chaos Mix Start");

  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IMILBLLO@?$FLDarkHorseMix?$FN?5Chaos?5Mix?5Start?$AA@
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00198	83 c4 04	 add	 esp, 4

; 2403 : 	lpObj->ChaosSuccessRate = 60;
; 2404 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0019b	8d 43 3c	 lea	 eax, DWORD PTR [ebx+60]

; 2405 : 
; 2406 : 	int nChaosNeedMoney = 5000000;
; 2407 : 
; 2408 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0019e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001a3	89 87 1c 12 00
	00		 mov	 DWORD PTR [edi+4636], eax
  001a9	ff 37		 push	 DWORD PTR [edi]
  001ab	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  001b0	8b c8		 mov	 ecx, eax
  001b2	b8 40 4b 4c 00	 mov	 eax, 5000000		; 004c4b40H
  001b7	f7 e9		 imul	 ecx
  001b9	6a 00		 push	 0
  001bb	6a 64		 push	 100			; 00000064H
  001bd	52		 push	 edx
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 __alldiv

; 2409 : 
; 2410 : 	if ( iChaosTaxMoney < 0 )

  001c4	33 c9		 xor	 ecx, ecx
  001c6	85 c0		 test	 eax, eax
  001c8	0f 48 c1	 cmovs	 eax, ecx

; 2411 : 	{
; 2412 : 		iChaosTaxMoney = 0;
; 2413 : 	}
; 2414 : 
; 2415 : 	nChaosNeedMoney += iChaosTaxMoney;

  001cb	8d b0 40 4b 4c
	00		 lea	 esi, DWORD PTR [eax+5000000]

; 2416 : 
; 2417 : 	if ( nChaosNeedMoney < 0 )

  001d1	85 f6		 test	 esi, esi
  001d3	0f 48 f1	 cmovs	 esi, ecx

; 2418 : 	{
; 2419 : 		nChaosNeedMoney = 0;
; 2420 : 	}
; 2421 : 
; 2422 : 	if ( lpObj->Money < nChaosNeedMoney )

  001d6	8b 8f cc 00 00
	00		 mov	 ecx, DWORD PTR [edi+204]
  001dc	89 75 dc	 mov	 DWORD PTR _nChaosNeedMoney$2$[ebp], esi
  001df	3b ce		 cmp	 ecx, esi
  001e1	7d 09		 jge	 SHORT $LN25@DarkHorseC

; 2423 : 	{
; 2424 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  001e3	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 2425 : 		
; 2426 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 2427 : 		lpObj->ChaosLock = FALSE;
; 2428 : 
; 2429 : 		return;

  001e7	e9 f5 fe ff ff	 jmp	 $LN21@DarkHorseC
$LN25@DarkHorseC:

; 2430 : 	}
; 2431 : 
; 2432 : 	lpObj->Money -= nChaosNeedMoney;

  001ec	2b ce		 sub	 ecx, esi
  001ee	89 8f cc 00 00
	00		 mov	 DWORD PTR [edi+204], ecx

; 2433 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 2434 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001ff	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  00205	ff 37		 push	 DWORD PTR [edi]
  00207	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0020c	83 c4 08	 add	 esp, 8

; 2435 : 
; 2436 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  0020f	e8 00 00 00 00	 call	 _rand
  00214	99		 cdq
  00215	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0021a	f7 f9		 idiv	 ecx
  0021c	3b 97 1c 12 00
	00		 cmp	 edx, DWORD PTR [edi+4636]
  00222	0f 8d fe 00 00
	00		 jge	 $LN26@DarkHorseC

; 2437 : 	{
; 2438 : 		int Level = 0;
; 2439 : 		int ItemType = 13;
; 2440 : 		int ItemSubType = 4;
; 2441 : 		int ItemNum = ITEMGET(ItemType, ItemSubType);
; 2442 : 		int Option1 = 0;
; 2443 : 		int Option2 = 0;
; 2444 : 		int Option3 = 0;
; 2445 : 
; 2446 : 		int Add = 0;
; 2447 : 
; 2448 : 		if ( (rand()%100) < (lpObj->ChaosSuccessRate/5+6) )

  00228	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0022d	33 db		 xor	 ebx, ebx
  0022f	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00235	8b f2		 mov	 esi, edx
  00237	d1 fe		 sar	 esi, 1
  00239	e8 00 00 00 00	 call	 _rand
  0023e	99		 cdq
  0023f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00244	f7 f9		 idiv	 ecx
  00246	8b c6		 mov	 eax, esi
  00248	83 c6 06	 add	 esi, 6
  0024b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024e	03 c6		 add	 eax, esi
  00250	be 01 00 00 00	 mov	 esi, 1
  00255	3b d0		 cmp	 edx, eax
  00257	8b c3		 mov	 eax, ebx
  00259	0f 4c c6	 cmovl	 eax, esi
  0025c	89 45 d8	 mov	 DWORD PTR _Add$2$[ebp], eax

; 2449 : 		{
; 2450 : 			Add = 1;
; 2451 : 		}
; 2452 : 
; 2453 : 		if ( (rand()%5) == 0 )

  0025f	e8 00 00 00 00	 call	 _rand
  00264	99		 cdq
  00265	b9 05 00 00 00	 mov	 ecx, 5
  0026a	f7 f9		 idiv	 ecx
  0026c	8b c3		 mov	 eax, ebx
  0026e	85 d2		 test	 edx, edx
  00270	0f 44 c6	 cmove	 eax, esi
  00273	89 45 d4	 mov	 DWORD PTR _Option1$2$[ebp], eax

; 2454 : 		{
; 2455 : 			Option1 = 1;
; 2456 : 		}
; 2457 : 
; 2458 : 		int lc22 = rand()%100;	

  00276	e8 00 00 00 00	 call	 _rand
  0027b	99		 cdq
  0027c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00281	f7 f9		 idiv	 ecx
  00283	8b f2		 mov	 esi, edx

; 2459 : 		int lc23 = rand()%3;

  00285	e8 00 00 00 00	 call	 _rand
  0028a	99		 cdq
  0028b	b9 03 00 00 00	 mov	 ecx, 3
  00290	f7 f9		 idiv	 ecx

; 2460 : 		//int lc24 = lc23;
; 2461 : 
; 2462 : 		switch ( lc23 )

  00292	2b d3		 sub	 edx, ebx
  00294	74 20		 je	 SHORT $LN30@DarkHorseC
  00296	83 ea 01	 sub	 edx, 1
  00299	74 0f		 je	 SHORT $LN32@DarkHorseC
  0029b	83 ea 01	 sub	 edx, 1
  0029e	75 1c		 jne	 SHORT $LN31@DarkHorseC

; 2477 : 
; 2478 : 			case 2:
; 2479 : 				if ( lc22 <  20 )

  002a0	83 fe 14	 cmp	 esi, 20			; 00000014H
  002a3	7d 17		 jge	 SHORT $LN31@DarkHorseC

; 2480 : 				{
; 2481 : 					Option2 = 1;

  002a5	8d 59 fe	 lea	 ebx, DWORD PTR [ecx-2]
  002a8	eb 12		 jmp	 SHORT $LN31@DarkHorseC
$LN32@DarkHorseC:

; 2466 : 				{
; 2467 : 					Option2 = 3;
; 2468 : 				}
; 2469 : 				break;
; 2470 : 
; 2471 : 			case 1:
; 2472 : 				if ( lc22 <  10 )

  002aa	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  002ad	7d 0d		 jge	 SHORT $LN31@DarkHorseC

; 2473 : 				{
; 2474 : 					Option2 = 2;

  002af	bb 02 00 00 00	 mov	 ebx, 2

; 2475 : 				}
; 2476 : 				break;

  002b4	eb 06		 jmp	 SHORT $LN31@DarkHorseC
$LN30@DarkHorseC:

; 2463 : 		{
; 2464 : 			case 0:
; 2465 : 				if ( lc22 <  4 )

  002b6	83 fe 04	 cmp	 esi, 4
  002b9	0f 4c d9	 cmovl	 ebx, ecx
$LN31@DarkHorseC:

; 2482 : 				}
; 2483 : 				break;
; 2484 : 		}
; 2485 : #if( __4GAMERS__ == 1 )
; 2486 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2487 : #endif
; 2488 : 		::PetItemSerialCreateSend(lpObj->m_Index, -2, 0, 0, ItemNum, Level, 0,Add,  Option1, Option2, -1, 0, 0); 

  002bc	8b 45 d4	 mov	 eax, DWORD PTR _Option1$2$[ebp]
  002bf	6a 00		 push	 0
  002c1	6a 00		 push	 0
  002c3	6a ff		 push	 -1
  002c5	53		 push	 ebx
  002c6	50		 push	 eax
  002c7	8b 45 d8	 mov	 eax, DWORD PTR _Add$2$[ebp]
  002ca	50		 push	 eax
  002cb	6a 00		 push	 0
  002cd	6a 00		 push	 0
  002cf	68 04 1a 00 00	 push	 6660			; 00001a04H
  002d4	6a 00		 push	 0
  002d6	6a 00		 push	 0
  002d8	68 fe 00 00 00	 push	 254			; 000000feH
  002dd	ff 37		 push	 DWORD PTR [edi]
  002df	e8 00 00 00 00	 call	 ?PetItemSerialCreateSend@@YAXHEEEHEEEEEHEE@Z ; PetItemSerialCreateSend

; 2489 : 		::gObjInventoryCommit(lpObj->m_Index);

  002e4	ff 37		 push	 DWORD PTR [edi]
  002e6	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 2490 : 		LogAddTD("[DarkHorseMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  002eb	ff 75 e8	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  002ee	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  002f1	ff 75 dc	 push	 DWORD PTR _nChaosNeedMoney$2$[ebp]
  002f4	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  002fa	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  00300	50		 push	 eax
  00301	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00304	50		 push	 eax
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@JGHMMOON@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Su@
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2507 : 	}
; 2508 : }

  00310	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00313	83 c4 54	 add	 esp, 84			; 00000054H
  00316	33 cd		 xor	 ecx, ebp
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	5b		 pop	 ebx
  0031b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00320	8b e5		 mov	 esp, ebp
  00322	5d		 pop	 ebp
  00323	c2 04 00	 ret	 4
$LN26@DarkHorseC:

; 2491 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2492 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2493 : 	}
; 2494 : 	else
; 2495 : 	{
; 2496 : #if( __4GAMERS__ == 1 )
; 2497 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2498 : #endif
; 2499 : 		ChaosBoxInit(lpObj);

  00326	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00329	57		 push	 edi
  0032a	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2500 : 		GCUserChaosBoxSend(lpObj, 1);

  0032f	6a 01		 push	 1
  00331	57		 push	 edi
  00332	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2501 : 		DataSend(lpObj->m_Index, (UCHAR*)&pMsg, pMsg.h.size);

  00337	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0033b	50		 push	 eax
  0033c	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0033f	50		 push	 eax
  00340	ff 37		 push	 DWORD PTR [edi]
  00342	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2502 : 
; 2503 : 		LogAddTD("[DarkHorseMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00347	53		 push	 ebx
  00348	56		 push	 esi
  00349	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  0034f	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00352	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  00358	50		 push	 eax
  00359	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0035c	50		 push	 eax
  0035d	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MAGJAMAN@?$FLDarkHorseMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fa@
  00362	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00368	83 c4 30	 add	 esp, 48			; 00000030H

; 2504 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 2505 : 			lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2506 : 		lpObj->ChaosLock = FALSE;

  0036b	e9 84 fd ff ff	 jmp	 $LN44@DarkHorseC
?DarkHorseChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DarkHorseChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -272						; size = 4
_SoulGemCount$1$ = -268					; size = 4
_BlessGemCount$1$ = -264				; size = 4
_n$1$ = -260						; size = 4
_iMixItemChaosMoney$1$ = -256				; size = 4
_setoption$1$ = -252					; size = 4
_iMetalOfAncientItemLevel$1$ = -252			; size = 4
tv808 = -248						; size = 4
_MixSetItemIndex$1$ = -248				; size = 4
_MetalOfAncientCount$1$ = -244				; size = 4
_ChoasGemCount$1$ = -240				; size = 4
_MixItemCount$1$ = -236					; size = 4
_Item$1 = -232						; size = 212
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::SetItemChaosMix, COMDAT
; _this$ = ecx

; 2134 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 2135 : 	lpObj->ChaosLock = TRUE;
; 2136 : 
; 2137 : 	int ChoasGemCount = 0;
; 2138 : 	int BlessGemCount = 0;

  00017	33 c0		 xor	 eax, eax
  00019	56		 push	 esi
  0001a	57		 push	 edi

; 2139 : 	int SoulGemCount = 0;
; 2140 : 	int MetalOfAncientCount = 0;
; 2141 : 	int MixItemCount = 0;
; 2142 : 	int MixSetItemIndex = 0;
; 2143 : 	int iMixItemChaosMoney = 0;
; 2144 : 	int iChaosMoney = 0;
; 2145 : 	int iMetalOfAncientItemLevel = -1;
; 2146 : 
; 2147 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2148 : 
; 2149 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  0001b	6a 10		 push	 16			; 00000010H
  0001d	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$1$[ebp], eax
  00023	33 ff		 xor	 edi, edi
  00025	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _SoulGemCount$1$[ebp], eax
  0002b	89 85 0c ff ff
	ff		 mov	 DWORD PTR _MetalOfAncientCount$1$[ebp], eax
  00031	89 85 14 ff ff
	ff		 mov	 DWORD PTR _MixItemCount$1$[ebp], eax
  00037	89 85 08 ff ff
	ff		 mov	 DWORD PTR _MixSetItemIndex$1$[ebp], eax
  0003d	89 85 00 ff ff
	ff		 mov	 DWORD PTR _iMixItemChaosMoney$1$[ebp], eax
  00043	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00046	68 86 00 00 00	 push	 134			; 00000086H
  0004b	50		 push	 eax
  0004c	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00052	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  0005c	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], 0
  00066	c7 85 04 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _iMetalOfAncientItemLevel$1$[ebp], -1
  00070	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2150 : 	pMsg.Result = CB_ERROR;

  00078	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 2151 : 
; 2152 : 
; 2153 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0007c	89 bd fc fe ff
	ff		 mov	 DWORD PTR _n$1$[ebp], edi
  00082	33 f6		 xor	 esi, esi
  00084	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@SetItemCha:

; 2154 : 	{
; 2155 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00090	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	0f 85 74 01 00
	00		 jne	 $LN41@SetItemCha

; 2156 : 		{
; 2157 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  000a6	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000ac	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  000b1	03 ce		 add	 ecx, esi
  000b3	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  000b7	66 3b c2	 cmp	 ax, dx
  000ba	75 15		 jne	 SHORT $LN7@SetItemCha

; 2158 : 			{
; 2159 : 				BlessGemCount++;

  000bc	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  000c2	42		 inc	 edx
  000c3	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$1$[ebp], edx

; 2160 : 
; 2161 : 				if ( BlessGemCount > 3 )

  000c9	83 fa 03	 cmp	 edx, 3
  000cc	7e 03		 jle	 SHORT $LN7@SetItemCha

; 2162 : 				{
; 2163 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000ce	03 79 78	 add	 edi, DWORD PTR [ecx+120]
$LN7@SetItemCha:

; 2164 : 				}
; 2165 : 			}
; 2166 : 
; 2167 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  000d1	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  000d6	66 3b c2	 cmp	 ax, dx
  000d9	75 15		 jne	 SHORT $LN9@SetItemCha

; 2168 : 			{
; 2169 : 				SoulGemCount++;

  000db	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _SoulGemCount$1$[ebp]
  000e1	42		 inc	 edx
  000e2	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _SoulGemCount$1$[ebp], edx

; 2170 : 
; 2171 : 				if ( SoulGemCount > 3 )

  000e8	83 fa 03	 cmp	 edx, 3
  000eb	7e 03		 jle	 SHORT $LN9@SetItemCha

; 2172 : 				{
; 2173 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000ed	03 79 78	 add	 edi, DWORD PTR [ecx+120]
$LN9@SetItemCha:

; 2174 : 				}
; 2175 : 			}
; 2176 : 
; 2177 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,16) )

  000f0	ba 10 1c 00 00	 mov	 edx, 7184		; 00001c10H
  000f5	66 3b c2	 cmp	 ax, dx
  000f8	75 08		 jne	 SHORT $LN10@SetItemCha

; 2178 : 			{
; 2179 : 				iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  000fa	03 79 78	 add	 edi, DWORD PTR [ecx+120]
  000fd	e9 18 01 00 00	 jmp	 $LN41@SetItemCha
$LN10@SetItemCha:

; 2180 : 			}
; 2181 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00102	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00107	66 3b c2	 cmp	 ax, dx
  0010a	75 12		 jne	 SHORT $LN12@SetItemCha

; 2182 : 			{
; 2183 : 				ChoasGemCount++;

  0010c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00112	40		 inc	 eax
  00113	89 85 10 ff ff
	ff		 mov	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  00119	e9 02 01 00 00	 jmp	 $LN42@SetItemCha
$LN12@SetItemCha:

; 2184 : 			}
; 2185 : 			else if ( lpObj->pChaosBox[n].m_Level >= 6 && lpObj->pChaosBox[n].IsExtItem() != FALSE)

  0011e	66 83 79 08 06	 cmp	 WORD PTR [ecx+8], 6
  00123	7c 5d		 jl	 SHORT $LN14@SetItemCha
  00125	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  0012a	85 c0		 test	 eax, eax
  0012c	74 54		 je	 SHORT $LN14@SetItemCha

; 2186 : 			{
; 2187 : 				if ( gSetItemOption.IsSetItem(lpObj->pChaosBox[n].m_Type) != FALSE )

  0012e	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00134	0f bf 44 06 06	 movsx	 eax, WORD PTR [esi+eax+6]
$LN47@SetItemCha:
  00139	50		 push	 eax
  0013a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  0013f	e8 00 00 00 00	 call	 ?IsSetItem@CSetItemOption@@QAEHH@Z ; CSetItemOption::IsSetItem

; 2188 : 				{
; 2189 : 					MixItemCount++;

  00144	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _MixItemCount$1$[ebp]
  0014a	85 c0		 test	 eax, eax
  0014c	74 29		 je	 SHORT $LN39@SetItemCha

; 2190 : 					MixSetItemIndex = n;

  0014e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _n$1$[ebp]
  00154	41		 inc	 ecx

; 2191 : 					iMixItemChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  00155	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _iMixItemChaosMoney$1$[ebp]
  0015b	89 85 08 ff ff
	ff		 mov	 DWORD PTR _MixSetItemIndex$1$[ebp], eax
  00161	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00167	89 8d 14 ff ff
	ff		 mov	 DWORD PTR _MixItemCount$1$[ebp], ecx
  0016d	03 54 06 78	 add	 edx, DWORD PTR [esi+eax+120]
  00171	89 95 00 ff ff
	ff		 mov	 DWORD PTR _iMixItemChaosMoney$1$[ebp], edx
$LN39@SetItemCha:

; 2192 : 				}
; 2193 : 			}

  00177	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  0017d	e9 a4 00 00 00	 jmp	 $LN43@SetItemCha
$LN14@SetItemCha:

; 2194 : 			else if ( ((lpObj->pChaosBox[n].m_Type >= ITEMGET(13,8) && lpObj->pChaosBox[n].m_Type < ITEMGET(13,14)) || (lpObj->pChaosBox[n].m_Type >= ITEMGET(13,21) && lpObj->pChaosBox[n].m_Type < ITEMGET(13,28) ) ) && ( lpObj->pChaosBox[n].m_Option3 >= 2  && lpObj->pChaosBox[n].m_Level >= 3 ) )	

  00182	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00188	ba 08 1a 00 00	 mov	 edx, 6664		; 00001a08H
  0018d	0f b7 44 0e 06	 movzx	 eax, WORD PTR [esi+ecx+6]
  00192	66 3b c2	 cmp	 ax, dx
  00195	7c 0a		 jl	 SHORT $LN20@SetItemCha
  00197	ba 0e 1a 00 00	 mov	 edx, 6670		; 00001a0eH
  0019c	66 3b c2	 cmp	 ax, dx
  0019f	7c 14		 jl	 SHORT $LN19@SetItemCha
$LN20@SetItemCha:
  001a1	ba 15 1a 00 00	 mov	 edx, 6677		; 00001a15H
  001a6	66 3b c2	 cmp	 ax, dx
  001a9	7c 22		 jl	 SHORT $LN17@SetItemCha
  001ab	ba 1c 1a 00 00	 mov	 edx, 6684		; 00001a1cH
  001b0	66 3b c2	 cmp	 ax, dx
  001b3	7d 18		 jge	 SHORT $LN17@SetItemCha
$LN19@SetItemCha:
  001b5	80 bc 0e 92 00
	00 00 02	 cmp	 BYTE PTR [esi+ecx+146], 2
  001bd	72 0e		 jb	 SHORT $LN17@SetItemCha
  001bf	66 83 7c 0e 08
	03		 cmp	 WORD PTR [esi+ecx+8], 3
  001c5	7c 06		 jl	 SHORT $LN17@SetItemCha

; 2195 : 			{
; 2196 : 				if ( gSetItemOption.IsSetItem(lpObj->pChaosBox[n].m_Type ) != FALSE )

  001c7	98		 cwde

; 2197 : 				{
; 2198 : 					MixItemCount++;
; 2199 : 					MixSetItemIndex = n;
; 2200 : 					iMixItemChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;
; 2201 : 				}
; 2202 : 			}

  001c8	e9 6c ff ff ff	 jmp	 $LN47@SetItemCha
$LN17@SetItemCha:

; 2203 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,27) ) // Ancien Metal, Apply Deathway Fix here

  001cd	ba 1b 1c 00 00	 mov	 edx, 7195		; 00001c1bH
  001d2	66 3b c2	 cmp	 ax, dx
  001d5	75 26		 jne	 SHORT $LN22@SetItemCha

; 2204 : 			{
; 2205 : 				MetalOfAncientCount++;

  001d7	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _MetalOfAncientCount$1$[ebp]

; 2206 : 				iMetalOfAncientItemLevel = lpObj->pChaosBox[n].m_Level;

  001dd	0f bf 44 0e 08	 movsx	 eax, WORD PTR [esi+ecx+8]
  001e2	42		 inc	 edx

; 2207 : 			}
; 2208 : 			else

  001e3	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _MixItemCount$1$[ebp]
  001e9	89 85 04 ff ff
	ff		 mov	 DWORD PTR _iMetalOfAncientItemLevel$1$[ebp], eax
  001ef	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  001f5	89 95 0c ff ff
	ff		 mov	 DWORD PTR _MetalOfAncientCount$1$[ebp], edx
  001fb	eb 2f		 jmp	 SHORT $LN2@SetItemCha
$LN22@SetItemCha:

; 2209 : 			{
; 2210 : 				DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  001fd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00201	50		 push	 eax
  00202	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00205	50		 push	 eax
  00206	ff 33		 push	 DWORD PTR [ebx]
  00208	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0020d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2211 : 				lpObj->ChaosLock = FALSE;

  00210	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
$LN41@SetItemCha:
  0021a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
$LN42@SetItemCha:
  00220	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _MixItemCount$1$[ebp]
$LN43@SetItemCha:
  00226	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _MetalOfAncientCount$1$[ebp]
$LN2@SetItemCha:

; 2151 : 
; 2152 : 
; 2153 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0022c	ff 85 fc fe ff
	ff		 inc	 DWORD PTR _n$1$[ebp]
  00232	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00238	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  0023e	0f 8c 4c fe ff
	ff		 jl	 $LL4@SetItemCha

; 2212 : 			}
; 2213 : 		}
; 2214 : 	}
; 2215 : 
; 2216 : 
; 2217 : 	if ( ChoasGemCount < 1 || BlessGemCount < 3 || SoulGemCount < 3 || MetalOfAncientCount != 1 || MixItemCount != 1 )

  00244	83 f8 01	 cmp	 eax, 1
  00247	0f 8c b0 00 00
	00		 jl	 $LN25@SetItemCha
  0024d	83 bd f8 fe ff
	ff 03		 cmp	 DWORD PTR _BlessGemCount$1$[ebp], 3
  00254	0f 8c a3 00 00
	00		 jl	 $LN25@SetItemCha
  0025a	83 bd f4 fe ff
	ff 03		 cmp	 DWORD PTR _SoulGemCount$1$[ebp], 3
  00261	0f 8c 96 00 00
	00		 jl	 $LN25@SetItemCha
  00267	83 fa 01	 cmp	 edx, 1
  0026a	0f 85 8d 00 00
	00		 jne	 $LN25@SetItemCha
  00270	3b ca		 cmp	 ecx, edx
  00272	0f 85 85 00 00
	00		 jne	 $LN25@SetItemCha

; 2221 : 		return;
; 2222 : 	}
; 2223 : 
; 2224 : 	LogChaosItem(lpObj, "SetItemMix");

  00278	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DBFFCLIB@SetItemMix?$AA@
  00283	53		 push	 ebx
  00284	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 2225 : 	LogAddTD("[SetItemMix] Chaos Mix Start");

  00289	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JHMGADIL@?$FLSetItemMix?$FN?5Chaos?5Mix?5Start?$AA@
  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2226 : 
; 2227 : 	if ( gSetItemOption.CheckMixContition(lpObj->pChaosBox[MixSetItemIndex].m_Type, iMetalOfAncientItemLevel ) == FALSE )

  00294	69 8d 08 ff ff
	ff d4 00 00 00	 imul	 ecx, DWORD PTR _MixSetItemIndex$1$[ebp], 212
  0029e	83 c4 04	 add	 esp, 4
  002a1	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  002a7	ff b5 04 ff ff
	ff		 push	 DWORD PTR _iMetalOfAncientItemLevel$1$[ebp]
  002ad	89 8d 08 ff ff
	ff		 mov	 DWORD PTR tv808[ebp], ecx
  002b3	0f bf 44 08 06	 movsx	 eax, WORD PTR [eax+ecx+6]
  002b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  002bd	50		 push	 eax
  002be	e8 00 00 00 00	 call	 ?CheckMixContition@CSetItemOption@@QAEHHH@Z ; CSetItemOption::CheckMixContition
  002c3	85 c0		 test	 eax, eax
  002c5	74 36		 je	 SHORT $LN25@SetItemCha

; 2228 : 	{
; 2229 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);
; 2230 : 		lpObj->ChaosLock = FALSE;
; 2231 : 
; 2232 : 		return;
; 2233 : 	}
; 2234 : 
; 2235 : 	lpObj->ChaosSuccessRate = iMixItemChaosMoney / 40000;
; 2236 : 	lpObj->ChaosSuccessRate = iChaosMoney / 400000;

  002c7	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H

; 2237 : 
; 2238 : 	if ( lpObj->ChaosSuccessRate > 80 )

  002cc	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  002d1	f7 ef		 imul	 edi
  002d3	c1 fa 0f	 sar	 edx, 15			; 0000000fH
  002d6	8b c2		 mov	 eax, edx
  002d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002db	03 c2		 add	 eax, edx
  002dd	3b c1		 cmp	 eax, ecx
  002df	0f 4f c1	 cmovg	 eax, ecx
  002e2	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax

; 2239 : 	{
; 2240 : 		lpObj->ChaosSuccessRate = 80;
; 2241 : 	}
; 2242 : 
; 2243 : 	int nChaosNeedMoney = (lpObj->ChaosSuccessRate - 50 ) * 1000000;

  002e8	83 e8 32	 sub	 eax, 50			; 00000032H
  002eb	69 f0 40 42 0f
	00		 imul	 esi, eax, 1000000

; 2244 : 
; 2245 : 	if ( lpObj->Money < nChaosNeedMoney )

  002f1	39 b3 cc 00 00
	00		 cmp	 DWORD PTR [ebx+204], esi
  002f7	7d 34		 jge	 SHORT $LN28@SetItemCha

; 2246 : 	{
; 2247 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  002f9	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN25@SetItemCha:

; 2218 : 	{
; 2219 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);

  002fd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00301	50		 push	 eax
  00302	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00305	50		 push	 eax
  00306	ff 33		 push	 DWORD PTR [ebx]
  00308	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0030d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@SetItemCha:

; 2220 : 		lpObj->ChaosLock = FALSE;

  00310	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0

; 2325 : 	}
; 2326 : }

  0031a	5f		 pop	 edi
  0031b	5e		 pop	 esi
  0031c	5b		 pop	 ebx
  0031d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00320	33 cd		 xor	 ecx, ebp
  00322	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00327	8b e5		 mov	 esp, ebp
  00329	5d		 pop	 ebp
  0032a	c2 04 00	 ret	 4
$LN28@SetItemCha:

; 2248 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);
; 2249 : 		lpObj->ChaosLock = FALSE;
; 2250 : 
; 2251 : 		return;
; 2252 : 	}
; 2253 : 
; 2254 : 	int setoption = gSetItemOption.MakeSetOption(lpObj->pChaosBox[MixSetItemIndex].m_Type, iMetalOfAncientItemLevel);

  0032d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00333	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00338	8b bd 08 ff ff
	ff		 mov	 edi, DWORD PTR tv808[ebp]
  0033e	ff b5 04 ff ff
	ff		 push	 DWORD PTR _iMetalOfAncientItemLevel$1$[ebp]
  00344	0f bf 44 38 06	 movsx	 eax, WORD PTR [eax+edi+6]
  00349	50		 push	 eax
  0034a	e8 00 00 00 00	 call	 ?MakeSetOption@CSetItemOption@@QAEHHH@Z ; CSetItemOption::MakeSetOption
  0034f	89 85 04 ff ff
	ff		 mov	 DWORD PTR _setoption$1$[ebp], eax

; 2255 : 
; 2256 : 	if ( setoption == 0 )

  00355	85 c0		 test	 eax, eax
  00357	75 05		 jne	 SHORT $LN29@SetItemCha

; 2257 : 	{
; 2258 : 		pMsg.Result = CB_ERROR;

  00359	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+3], al

; 2259 : 		DataSend(lpObj->m_Index, (BYTE*)&pMsg, pMsg.h.size);
; 2260 : 		lpObj->ChaosLock = FALSE;
; 2261 : 
; 2262 : 		return;

  0035c	eb 9f		 jmp	 SHORT $LN25@SetItemCha
$LN29@SetItemCha:
  0035e	29 b3 cc 00 00
	00		 sub	 DWORD PTR [ebx+204], esi

; 2263 : 	}
; 2264 : 
; 2265 : 	lpObj->Money -= nChaosNeedMoney;
; 2266 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00364	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  0036a	ff 33		 push	 DWORD PTR [ebx]
  0036c	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00371	83 c4 08	 add	 esp, 8

; 2267 : 
; 2268 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00374	e8 00 00 00 00	 call	 _rand
  00379	99		 cdq
  0037a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037f	f7 f9		 idiv	 ecx
  00381	3b 93 1c 12 00
	00		 cmp	 edx, DWORD PTR [ebx+4636]
  00387	0f 8d f5 01 00
	00		 jge	 $LN30@SetItemCha

; 2269 : 	{
; 2270 : 		lpObj->pChaosBox[MixSetItemIndex].m_SetOption = setoption;

  0038d	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00393	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _setoption$1$[ebp]
  00399	88 8c 38 aa 00
	00 00		 mov	 BYTE PTR [eax+edi+170], cl

; 2271 : 
; 2272 : 		if ( (rand()%100 ) < 80 )

  003a0	e8 00 00 00 00	 call	 _rand
  003a5	99		 cdq
  003a6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003ab	f7 f9		 idiv	 ecx

; 2273 : 		{
; 2274 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption |= 4;

  003ad	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  003b3	83 fa 50	 cmp	 edx, 80			; 00000050H
  003b6	7d 0a		 jge	 SHORT $LN32@SetItemCha
  003b8	80 8c 38 aa 00
	00 00 04	 or	 BYTE PTR [eax+edi+170], 4

; 2275 : 		}
; 2276 : 		else

  003c0	eb 08		 jmp	 SHORT $LN33@SetItemCha
$LN32@SetItemCha:

; 2277 : 		{
; 2278 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption |= 8;

  003c2	80 8c 38 aa 00
	00 00 08	 or	 BYTE PTR [eax+edi+170], 8
$LN33@SetItemCha:

; 2279 : 		}
; 2280 : 
; 2281 : 		pMsg.Result = CB_SUCCESS;
; 2282 : 		CItem Item;

  003ca	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$1[ebp]
  003d0	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  003d4	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 2283 : 
; 2284 : 		float Dur = (float)ItemGetDurability(lpObj->pChaosBox[MixSetItemIndex].m_Type, lpObj->pChaosBox[MixSetItemIndex].m_Level,

  003d9	8b b3 10 12 00
	00		 mov	 esi, DWORD PTR [ebx+4624]
  003df	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  003e2	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  003e7	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  003ed	50		 push	 eax
  003ee	03 cf		 add	 ecx, edi
  003f0	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  003f5	50		 push	 eax
  003f6	0f bf 44 3e 08	 movsx	 eax, WORD PTR [esi+edi+8]
  003fb	50		 push	 eax
  003fc	0f bf 44 3e 06	 movsx	 eax, WORD PTR [esi+edi+6]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability

; 2285 : 			lpObj->pChaosBox[MixSetItemIndex].IsExtItem(), lpObj->pChaosBox[MixSetItemIndex].IsSetItem());
; 2286 : 
; 2287 : 		Item.m_Level = lpObj->pChaosBox[MixSetItemIndex].m_Level;

  00407	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0040d	83 c4 10	 add	 esp, 16			; 00000010H
  00410	66 0f 6e c8	 movd	 xmm1, eax
  00414	66 8b 44 39 08	 mov	 ax, WORD PTR [ecx+edi+8]
  00419	66 89 85 20 ff
	ff ff		 mov	 WORD PTR _Item$1[ebp+8], ax

; 2288 : 		Item.m_Durability = Dur * lpObj->pChaosBox[MixSetItemIndex].m_Durability / lpObj->pChaosBox[MixSetItemIndex].m_BaseDurability;

  00420	f3 0f 10 44 39
	24		 movss	 xmm0, DWORD PTR [ecx+edi+36]
  00426	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 2289 : 		Item.m_JewelOfHarmonyOption = lpObj->pChaosBox[MixSetItemIndex].m_JewelOfHarmonyOption;
; 2290 : 		Item.m_bLOCKED = lpObj->pChaosBox[MixSetItemIndex].m_bLOCKED;
; 2291 : 
; 2292 : 		Item.Convert(lpObj->pChaosBox[MixSetItemIndex].m_Type, lpObj->pChaosBox[MixSetItemIndex].m_Option1, lpObj->pChaosBox[MixSetItemIndex].m_Option2,

  00429	6a 03		 push	 3
  0042b	68 ff 00 00 00	 push	 255			; 000000ffH
  00430	6a 00		 push	 0
  00432	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00436	f3 0f 5e 44 39
	2c		 divss	 xmm0, DWORD PTR [ecx+edi+44]
  0043c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _Item$1[ebp+36], xmm0
  00444	0f b6 84 39 c0
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+192]
  0044c	88 45 d8	 mov	 BYTE PTR _Item$1[ebp+192], al
  0044f	0f b6 84 39 d1
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+209]
  00457	88 45 e9	 mov	 BYTE PTR _Item$1[ebp+209], al
  0045a	0f b6 84 39 c6
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+198]
  00462	50		 push	 eax
  00463	0f b6 84 39 aa
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+170]
  0046b	50		 push	 eax
  0046c	0f b6 84 39 93
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+147]
  00474	50		 push	 eax
  00475	0f b6 84 39 92
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+146]
  0047d	50		 push	 eax
  0047e	0f b6 84 39 91
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+145]
  00486	50		 push	 eax
  00487	0f b6 84 39 90
	00 00 00	 movzx	 eax, BYTE PTR [ecx+edi+144]
  0048f	50		 push	 eax
  00490	0f bf 44 39 06	 movsx	 eax, WORD PTR [ecx+edi+6]
  00495	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$1[ebp]
  0049b	50		 push	 eax
  0049c	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 2293 : 			lpObj->pChaosBox[MixSetItemIndex].m_Option3, lpObj->pChaosBox[MixSetItemIndex].m_NewOption, 
; 2294 : 			lpObj->pChaosBox[MixSetItemIndex].m_SetOption, lpObj->pChaosBox[MixSetItemIndex].m_ItemOptionEx, 0, -1, CURRENT_DB_VERSION);
; 2295 : 
; 2296 : 		Item.m_Number = lpObj->pChaosBox[MixSetItemIndex].m_Number;

  004a1	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]

; 2297 : 
; 2298 : 		ItemByteConvert(pMsg.ItemInfo, Item);

  004a7	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _Item$1[ebp]
  004ad	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  004b3	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  004b8	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  004bb	8b fc		 mov	 edi, esp
  004bd	89 85 18 ff ff
	ff		 mov	 DWORD PTR _Item$1[ebp], eax
  004c3	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  004c6	f3 a5		 rep movsd
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 2299 : 		ChaosBoxInit(lpObj);

  004ce	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  004d4	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  004da	53		 push	 ebx
  004db	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2300 : 		::gObjChaosBoxInsertItemPos(lpObj->m_Index, Item, 0, -1);

  004e0	6a ff		 push	 -1
  004e2	6a 00		 push	 0
  004e4	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  004ea	8d b5 18 ff ff
	ff		 lea	 esi, DWORD PTR _Item$1[ebp]
  004f0	8b fc		 mov	 edi, esp
  004f2	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  004f7	f3 a5		 rep movsd
  004f9	ff 33		 push	 DWORD PTR [ebx]
  004fb	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 2301 : 		gObjChaosItemSet(lpObj->m_Index, 0, 1);

  00500	6a 01		 push	 1
  00502	6a 00		 push	 0
  00504	ff 33		 push	 DWORD PTR [ebx]
  00506	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet

; 2302 : 
; 2303 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  0050b	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0050f	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00515	50		 push	 eax
  00516	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00519	50		 push	 eax
  0051a	ff 33		 push	 DWORD PTR [ebx]
  0051c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2304 : #if( __4GAMERS__ == 1 )
; 2305 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2306 : #endif
; 2307 : 		LogAddTD("[SetItemMix] [%s][%s] CBMix Success %d Money : %d-%d (SetName:%s)", lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,

  00521	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00527	83 c4 0c	 add	 esp, 12			; 0000000cH
  0052a	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv808[ebp]
  00530	ff b5 04 ff ff
	ff		 push	 DWORD PTR _setoption$1$[ebp]
  00536	0f bf 44 08 06	 movsx	 eax, WORD PTR [eax+ecx+6]
  0053b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  00540	50		 push	 eax
  00541	e8 00 00 00 00	 call	 ?GetSetOptionName@CSetItemOption@@QAEPADHH@Z ; CSetItemOption::GetSetOptionName
  00546	50		 push	 eax
  00547	ff b3 18 12 00
	00		 push	 DWORD PTR [ebx+4632]
  0054d	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00550	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  00556	ff b3 1c 12 00
	00		 push	 DWORD PTR [ebx+4636]
  0055c	50		 push	 eax
  0055d	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00560	50		 push	 eax
  00561	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@BFAACIGE@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succ@
  00566	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2325 : 	}
; 2326 : }

  0056c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0056f	83 c4 1c	 add	 esp, 28			; 0000001cH
  00572	33 cd		 xor	 ecx, ebp
  00574	5f		 pop	 edi
  00575	5e		 pop	 esi
  00576	5b		 pop	 ebx
  00577	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0057c	8b e5		 mov	 esp, ebp
  0057e	5d		 pop	 ebp
  0057f	c2 04 00	 ret	 4
$LN30@SetItemCha:

; 2308 : 			lpObj->Money, lpObj->ChaosMoney, gSetItemOption.GetSetOptionName(lpObj->pChaosBox[MixSetItemIndex].m_Type, setoption));
; 2309 : 	}
; 2310 : 	else
; 2311 : 	{
; 2312 : #if( __4GAMERS__ == 1 )
; 2313 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2314 : #endif
; 2315 : 		ChaosBoxInit(lpObj);

  00582	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00588	53		 push	 ebx
  00589	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 2316 : 		GCUserChaosBoxSend(lpObj, 0);

  0058e	6a 00		 push	 0
  00590	53		 push	 ebx
  00591	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2317 : 
; 2318 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00596	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0059a	50		 push	 eax
  0059b	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0059e	50		 push	 eax
  0059f	ff 33		 push	 DWORD PTR [ebx]
  005a1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2319 : 
; 2320 : 		LogAddTD("[SetItemMix] [%s][%s] CBMix Fail %d Money : %d-%d",

  005a6	56		 push	 esi
  005a7	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  005ad	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  005b0	ff b3 1c 12 00
	00		 push	 DWORD PTR [ebx+4636]
  005b6	50		 push	 eax
  005b7	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  005ba	50		 push	 eax
  005bb	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@ILPOEBCF@?$FLSetItemMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail@
  005c0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005c6	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2321 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 2322 : 			nChaosNeedMoney);
; 2323 : 
; 2324 : 		lpObj->ChaosLock = FALSE;

  005c9	e9 42 fd ff ff	 jmp	 $LN45@SetItemCha
?SetItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::SetItemChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::BloodCastleItemChaosMix, COMDAT
; _this$ = ecx

; 2053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 2054 : 	lpObj->ChaosLock = TRUE;
; 2055 : 	
; 2056 : 	PMSG_CHAOSMIXRESULT pMsg;
; 2057 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 2058 : 	pMsg.Result = CB_ERROR;
; 2059 : 
; 2060 : 	int aIndex = lpObj->m_Index;

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2061 : 
; 2062 : 	int iRET_VAL = g_BloodCastle.CheckChoasMixItem(aIndex);

  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0003a	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 ?CheckChoasMixItem@CBloodCastle@@QAEHH@Z ; CBloodCastle::CheckChoasMixItem
  00044	8b d8		 mov	 ebx, eax

; 2063 : 
; 2064 : 	int iMapNumber = g_BloodCastle.GetEventMap(iRET_VAL-1);

  00046	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00049	51		 push	 ecx
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0004f	e8 00 00 00 00	 call	 ?GetEventMap@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetEventMap

; 2065 : 
; 2066 : 	if ( BC_MAP_RANGE(iMapNumber) != FALSE )

  00054	83 f8 34	 cmp	 eax, 52			; 00000034H
  00057	74 50		 je	 SHORT $LN19@BloodCastl
  00059	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0005c	7c 0c		 jl	 SHORT $LN4@BloodCastl
  0005e	33 c9		 xor	 ecx, ecx
  00060	83 f8 11	 cmp	 eax, 17			; 00000011H
  00063	0f 9e c1	 setle	 cl
  00066	85 c9		 test	 ecx, ecx
  00068	75 3f		 jne	 SHORT $LN19@BloodCastl
$LN4@BloodCastl:

; 2071 : 		}
; 2072 : 
; 2073 : 		return;
; 2074 : 	}
; 2075 : 
; 2076 : 	switch ( iRET_VAL )

  0006a	8d 43 f7	 lea	 eax, DWORD PTR [ebx-9]
  0006d	83 f8 06	 cmp	 eax, 6
  00070	77 47		 ja	 SHORT $LN20@BloodCastl
  00072	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@BloodCastl[eax*4]
$LN6@BloodCastl:

; 2077 : 	{
; 2078 : 		case 9:
; 2079 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;

  00079	c6 45 ef 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH
$LN21@BloodCastl:

; 2080 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);

  0007d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00081	50		 push	 eax
  00082	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2081 : 			lpObj->m_Index;
; 2082 : 			lpObj->ChaosLock = FALSE;
; 2083 : 			break;

  0008f	eb 28		 jmp	 SHORT $LN20@BloodCastl
$LN9@BloodCastl:

; 2084 : 
; 2085 : 		case 10:
; 2086 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;
; 2087 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2088 : 			lpObj->m_Index;
; 2089 : 			lpObj->ChaosLock = FALSE;
; 2090 : 			break;
; 2091 : 
; 2092 : 		case 11:
; 2093 : 			pMsg.Result = CB_NO_BC_CORRECT_ITEMS	;
; 2094 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2095 : 			lpObj->m_Index;
; 2096 : 			lpObj->ChaosLock = FALSE;
; 2097 : 			break;
; 2098 : 
; 2099 : 		case 12:
; 2100 : 			pMsg.Result = CB_INVALID_ITEM_LEVEL	;

  00091	c6 45 ef 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8

; 2101 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2102 : 			lpObj->m_Index;
; 2103 : 			lpObj->ChaosLock = FALSE;
; 2104 : 			break;

  00095	eb e6		 jmp	 SHORT $LN21@BloodCastl
$LN10@BloodCastl:

; 2105 : 
; 2106 : 		case 13:
; 2107 : 			pMsg.Result = CB_BC_NOT_ENOUGH_ZEN	;

  00097	c6 45 ef 0b	 mov	 BYTE PTR _pMsg$[ebp+3], 11 ; 0000000bH

; 2108 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2109 : 			lpObj->m_Index;
; 2110 : 			lpObj->ChaosLock = FALSE;
; 2111 : 			break;

  0009b	eb e0		 jmp	 SHORT $LN21@BloodCastl
$LN11@BloodCastl:

; 2112 : 
; 2113 : 		case 14:
; 2114 : 			pMsg.Result = CB_USER_CLASS_LOW_LEVEL	;

  0009d	c6 45 ef 09	 mov	 BYTE PTR _pMsg$[ebp+3], 9

; 2115 : 			DataSend(aIndex, (UCHAR*)&pMsg, pMsg.h.size);
; 2116 : 			lpObj->m_Index;
; 2117 : 			lpObj->ChaosLock = FALSE;
; 2118 : 			break;

  000a1	eb da		 jmp	 SHORT $LN21@BloodCastl
$LN12@BloodCastl:

; 2119 : 		case 15:
; 2120 : 			pMsg.Result = 0xF0;

  000a3	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H

; 2121 : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);
; 2122 : 			lpObj->ChaosLock = FALSE;
; 2123 : 			break;

  000a7	eb d4		 jmp	 SHORT $LN21@BloodCastl
$LN19@BloodCastl:

; 2067 : 	{
; 2068 : 		if ( g_BloodCastle.BloodCastleChaosMix(aIndex, iRET_VAL) == false )

  000a9	53		 push	 ebx
  000aa	57		 push	 edi
  000ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  000b0	e8 00 00 00 00	 call	 ?BloodCastleChaosMix@CBloodCastle@@QAE_NHH@Z ; CBloodCastle::BloodCastleChaosMix
  000b5	84 c0		 test	 al, al
  000b7	75 0a		 jne	 SHORT $LN2@BloodCastl
$LN20@BloodCastl:

; 2069 : 		{
; 2070 : 			lpObj->ChaosLock = FALSE;

  000b9	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN2@BloodCastl:

; 2124 : 		default:
; 2125 : 			lpObj->ChaosLock = FALSE;
; 2126 : 	}
; 2127 : 
; 2128 : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	33 cd		 xor	 ecx, ebp
  000ca	5b		 pop	 ebx
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
  000d6	66 90		 npad	 2
$LN23@BloodCastl:
  000d8	00 00 00 00	 DD	 $LN6@BloodCastl
  000dc	00 00 00 00	 DD	 $LN6@BloodCastl
  000e0	00 00 00 00	 DD	 $LN6@BloodCastl
  000e4	00 00 00 00	 DD	 $LN9@BloodCastl
  000e8	00 00 00 00	 DD	 $LN10@BloodCastl
  000ec	00 00 00 00	 DD	 $LN11@BloodCastl
  000f0	00 00 00 00	 DD	 $LN12@BloodCastl
?BloodCastleItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::BloodCastleItemChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_itemlevel$ = -28					; size = 4
_eventitemcount$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DevilSquareItemChaosMix, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 805  : 	lpObj->ChaosLock = TRUE;
; 806  : 
; 807  : 	PMSG_CHAOSMIXRESULT pMsg;
; 808  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	8b d9		 mov	 ebx, ecx
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 5d e0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 809  : 	pMsg.Result = CB_ERROR;
; 810  : 	int aIndex = lpObj->m_Index;

  00035	8b 3e		 mov	 edi, DWORD PTR [esi]

; 811  : 	int eventitemcount;
; 812  : 	int itemlevel;
; 813  : 	int Ret = CheckDevilSquareItem(lpObj, eventitemcount, itemlevel);

  00037	8d 45 e4	 lea	 eax, DWORD PTR _itemlevel$[ebp]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00041	8b cb		 mov	 ecx, ebx
  00043	50		 push	 eax
  00044	8d 45 e8	 lea	 eax, DWORD PTR _eventitemcount$[ebp]
  00047	50		 push	 eax
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::CheckDevilSquareItem

; 814  : 
; 815  : 	if ( Ret != FALSE )

  0004e	85 c0		 test	 eax, eax
  00050	0f 84 e3 00 00
	00		 je	 $LN2@DevilSquar

; 816  : 	{
; 817  : 		if ( Ret == 3 )

  00056	83 f8 03	 cmp	 eax, 3
  00059	75 29		 jne	 SHORT $LN3@DevilSquar

; 818  : 		{
; 819  : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 820  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  0005b	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0005f	50		 push	 eax
  00060	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00063	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00067	50		 push	 eax
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 821  : 			LogAdd("[DevilSquare] DiffLevel Devil's Key or Eyes [%d]", eventitemcount);

  0006e	ff 75 e8	 push	 DWORD PTR _eventitemcount$[ebp]
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@DMIHKADD@?$FLDevilSquare?$FN?5DiffLevel?5Devil?8s?5@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0007c	83 c4 14	 add	 esp, 20			; 00000014H

; 822  : 			lpObj->ChaosLock = FALSE;
; 823  : 			return;

  0007f	e9 d1 00 00 00	 jmp	 $LN8@DevilSquar
$LN3@DevilSquar:

; 824  : 		}
; 825  : 		
; 826  : 		if ( Ret == 2 )

  00084	83 f8 02	 cmp	 eax, 2
  00087	75 29		 jne	 SHORT $LN4@DevilSquar

; 827  : 		{
; 828  : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 829  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00089	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0008d	50		 push	 eax
  0008e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00091	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  00095	50		 push	 eax
  00096	57		 push	 edi
  00097	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 830  : 			LogAdd("[DevilSquare] Not Found Chaos Gem [%d]", eventitemcount);

  0009c	ff 75 e8	 push	 DWORD PTR _eventitemcount$[ebp]
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NMBMOEEC@?$FLDevilSquare?$FN?5Not?5Found?5Chaos?5Ge@
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000aa	83 c4 14	 add	 esp, 20			; 00000014H

; 831  : 			lpObj->ChaosLock = FALSE;
; 832  : 			
; 833  : 			return;

  000ad	e9 a3 00 00 00	 jmp	 $LN8@DevilSquar
$LN4@DevilSquar:

; 834  : 		}
; 835  : 
; 836  : 		if ( Ret == 4 )

  000b2	83 f8 04	 cmp	 eax, 4
  000b5	75 26		 jne	 SHORT $LN5@DevilSquar

; 837  : 		{
; 838  : 			pMsg.Result = 0xF0;
; 839  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  000b7	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000bb	50		 push	 eax
  000bc	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000bf	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000c3	50		 push	 eax
  000c4	57		 push	 edi
  000c5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 840  : 			LogAdd("[DevilSquare] Charm Of Luck Over 10% [%d]", eventitemcount);

  000ca	ff 75 e8	 push	 DWORD PTR _eventitemcount$[ebp]
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@JNMMBAIA@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Over@
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d8	83 c4 14	 add	 esp, 20			; 00000014H

; 841  : 			lpObj->ChaosLock = FALSE;
; 842  : 			
; 843  : 			return;

  000db	eb 78		 jmp	 SHORT $LN8@DevilSquar
$LN5@DevilSquar:

; 844  : 		}
; 845  : 
; 846  : 			
; 847  : 		if ( eventitemcount > 2 )

  000dd	8b 5d e8	 mov	 ebx, DWORD PTR _eventitemcount$[ebp]
  000e0	83 fb 02	 cmp	 ebx, 2
  000e3	7e 24		 jle	 SHORT $LN6@DevilSquar

; 848  : 		{
; 849  : 			pMsg.Result = CB_TOO_MANY_ITEMS;
; 850  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  000e5	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e9	50		 push	 eax
  000ea	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000ed	c6 45 ef 03	 mov	 BYTE PTR _pMsg$[ebp+3], 3
  000f1	50		 push	 eax
  000f2	57		 push	 edi
  000f3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 851  : 			LogAdd("[DevilSquare] Too many Devil's Key or Eyes [%d]", eventitemcount);

  000f8	53		 push	 ebx
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@FMJGNMLI@?$FLDevilSquare?$FN?5Too?5many?5Devil?8s?5K@
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00104	83 c4 14	 add	 esp, 20			; 00000014H

; 852  : 			lpObj->ChaosLock = FALSE;
; 853  : 			return;

  00107	eb 4c		 jmp	 SHORT $LN8@DevilSquar
$LN6@DevilSquar:

; 854  : 		}
; 855  : 
; 856  : 		if ( lpObj->Level < 10 )

  00109	66 83 be 96 00
	00 00 0a	 cmp	 WORD PTR [esi+150], 10	; 0000000aH
  00111	7d 06		 jge	 SHORT $LN7@DevilSquar

; 857  : 		{
; 858  : 			pMsg.Result = CB_LOW_LEVEL_USER;

  00113	c6 45 ef 04	 mov	 BYTE PTR _pMsg$[ebp+3], 4

; 859  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);
; 860  : 			lpObj->ChaosLock = FALSE;
; 861  : 			return;

  00117	eb 2a		 jmp	 SHORT $LN10@DevilSquar
$LN7@DevilSquar:

; 862  : 		}
; 863  : 
; 864  : 		DevilSquareEventChaosMix(lpObj, Ret, itemlevel);

  00119	ff 75 e4	 push	 DWORD PTR _itemlevel$[ebp]
  0011c	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011f	50		 push	 eax
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CChaosBox::DevilSquareEventChaosMix
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx

; 872  : 		lpObj->ChaosLock = FALSE;
; 873  : 		return;
; 874  : 	}
; 875  : 
; 876  : 	lpObj->ChaosLock = FALSE;
; 877  : }

  00129	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012c	33 cd		 xor	 ecx, ebp
  0012e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 04 00	 ret	 4
$LN2@DevilSquar:

; 865  : 		return;
; 866  : 	}
; 867  : 		
; 868  : 	if ( eventitemcount > 1 )

  00139	83 7d e8 01	 cmp	 DWORD PTR _eventitemcount$[ebp], 1
  0013d	7e 16		 jle	 SHORT $LN8@DevilSquar

; 869  : 	{
; 870  : 		pMsg.Result = CB_LACKING_MIX_ITEMS;

  0013f	c6 45 ef 06	 mov	 BYTE PTR _pMsg$[ebp+3], 6
$LN10@DevilSquar:

; 871  : 		DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00143	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00147	50		 push	 eax
  00148	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0014b	50		 push	 eax
  0014c	57		 push	 edi
  0014d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@DevilSquar:

; 872  : 		lpObj->ChaosLock = FALSE;
; 873  : 		return;
; 874  : 	}
; 875  : 
; 876  : 	lpObj->ChaosLock = FALSE;
; 877  : }

  00155	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00158	5f		 pop	 edi
  00159	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00163	33 cd		 xor	 ecx, ebp
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 04 00	 ret	 4
?DevilSquareItemChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DevilSquareItemChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iChaosTaxMoney$2$ = -56				; size = 4
_Level$1$ = -52						; size = 4
_MixResult2$ = -48					; size = 4
_fail$1$ = -44						; size = 4
_this$1$ = -40						; size = 4
_aIndex$1$ = -36					; size = 4
_Option1$2$ = -32					; size = 4
_Option2$2$ = -28					; size = 4
_MixResult3$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::DefaultChaosMix, COMDAT
; _this$ = ecx

; 337  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 338  : 	PMSG_CHAOSMIXRESULT pMsg;
; 339  : 
; 340  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00016	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00019	6a 10		 push	 16			; 00000010H
  0001b	8b f1		 mov	 esi, ecx
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 75 d8	 mov	 DWORD PTR _this$1$[ebp], esi
  00026	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 341  : 	pMsg.Result = CB_ERROR;
; 342  : 	int aIndex = lpObj->m_Index;

  0002b	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 343  : 	BOOL fail = TRUE;
; 344  : 	int MixResult2;
; 345  : 	lpObj->ChaosLock = TRUE;
; 346  : 	int MixResult3 = -1;
; 347  : 
; 348  : 	if ( ChaosBoxMix(lpObj, MixResult2, MixResult3) == 0 )

  0002d	8d 45 e8	 lea	 eax, DWORD PTR _MixResult3$[ebp]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00037	8b ce		 mov	 ecx, esi
  00039	89 5d dc	 mov	 DWORD PTR _aIndex$1$[ebp], ebx
  0003c	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _fail$1$[ebp], 1
  00043	c7 87 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+4640], 1
  0004d	50		 push	 eax
  0004e	8d 45 d0	 lea	 eax, DWORD PTR _MixResult2$[ebp]
  00051	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _MixResult3$[ebp], -1
  00058	50		 push	 eax
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ; CChaosBox::ChaosBoxMix
  0005f	85 c0		 test	 eax, eax
  00061	75 33		 jne	 SHORT $LN4@DefaultCha

; 349  : 	{
; 350  : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 351  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  00063	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00067	50		 push	 eax
  00068	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0006b	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  0006f	50		 push	 eax
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : 		lpObj->ChaosLock = FALSE;

  00079	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 521  : }

  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN4@DefaultCha:

; 353  : 
; 354  : 		return;
; 355  : 	}
; 356  : 
; 357  : 	int iChaosTaxMoney = (int)((__int64)lpObj->ChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00096	ff 37		 push	 DWORD PTR [edi]
  00098	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0009d	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  000a2	8b c8		 mov	 ecx, eax
  000a4	8b 87 18 12 00
	00		 mov	 eax, DWORD PTR [edi+4632]
  000aa	f7 e9		 imul	 ecx
  000ac	6a 00		 push	 0
  000ae	6a 64		 push	 100			; 00000064H
  000b0	52		 push	 edx
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 __alldiv

; 358  : 
; 359  : 	if ( iChaosTaxMoney < 0 )

  000b7	33 c9		 xor	 ecx, ecx
  000b9	85 c0		 test	 eax, eax
  000bb	0f 48 c1	 cmovs	 eax, ecx

; 360  : 	{
; 361  : 		iChaosTaxMoney = 0;
; 362  : 	}
; 363  : 
; 364  : 	lpObj->ChaosMoney += iChaosTaxMoney;

  000be	01 87 18 12 00
	00		 add	 DWORD PTR [edi+4632], eax
  000c4	89 45 c8	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 365  : 
; 366  : 	if ( lpObj->ChaosMoney < 0 )

  000c7	79 06		 jns	 SHORT $LN6@DefaultCha

; 367  : 	{
; 368  : 		lpObj->ChaosMoney = 0;

  000c9	89 8f 18 12 00
	00		 mov	 DWORD PTR [edi+4632], ecx
$LN6@DefaultCha:

; 369  : 	}
; 370  : 
; 371  : 	if ( lpObj->Money < lpObj->ChaosMoney )

  000cf	8b 87 cc 00 00
	00		 mov	 eax, DWORD PTR [edi+204]
  000d5	3b 87 18 12 00
	00		 cmp	 eax, DWORD PTR [edi+4632]
  000db	7d 25		 jge	 SHORT $LN7@DefaultCha

; 372  : 	{
; 373  : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 374  : 		
; 375  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  000dd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000e1	50		 push	 eax
  000e2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e5	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  000e9	50		 push	 eax
  000ea	53		 push	 ebx
  000eb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 376  : 		lpObj->ChaosLock = FALSE;

  000f3	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0

; 377  : 
; 378  : 
; 379  : 	}
; 380  : 	else 

  000fd	e9 c9 02 00 00	 jmp	 $LN37@DefaultCha
$LN7@DefaultCha:

; 381  : 	{
; 382  : 		if ( lpObj->ChaosSuccessRate > 0 )

  00102	8b 87 1c 12 00
	00		 mov	 eax, DWORD PTR [edi+4636]
  00108	85 c0		 test	 eax, eax
  0010a	0f 8e 17 02 00
	00		 jle	 $LN21@DefaultCha

; 383  : 		{
; 384  : 			if ( lpObj->ChaosSuccessRate >= 100 )

  00110	83 f8 64	 cmp	 eax, 100		; 00000064H
  00113	7c 0a		 jl	 SHORT $LN10@DefaultCha

; 385  : 			{
; 386  : 				lpObj->ChaosSuccessRate = 100;

  00115	c7 87 1c 12 00
	00 64 00 00 00	 mov	 DWORD PTR [edi+4636], 100 ; 00000064H
$LN10@DefaultCha:

; 387  : 			}
; 388  : 
; 389  : 			if ( (rand()%100) <= (lpObj->ChaosSuccessRate-1) ) 

  0011f	e8 00 00 00 00	 call	 _rand
  00124	99		 cdq
  00125	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0012a	f7 f9		 idiv	 ecx
  0012c	8b 87 1c 12 00
	00		 mov	 eax, DWORD PTR [edi+4636]
  00132	48		 dec	 eax
  00133	3b d0		 cmp	 edx, eax
  00135	0f 8f ec 01 00
	00		 jg	 $LN21@DefaultCha

; 390  : 			{
; 391  : 				fail = FALSE;

  0013b	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _fail$1$[ebp], 0

; 392  : 				pMsg.Result = CB_SUCCESS;

  00142	c6 45 ef 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1

; 393  : 
; 394  : 				int Level = rand()%5;

  00146	e8 00 00 00 00	 call	 _rand
  0014b	99		 cdq
  0014c	b9 05 00 00 00	 mov	 ecx, 5
  00151	f7 f9		 idiv	 ecx

; 395  : 				int Option1 = 0;
; 396  : 				int Option2 = 0;
; 397  : 				int Option3 = 0;
; 398  : 
; 399  : 				if ( (rand()%100)< (lpObj->ChaosSuccessRate/5 + 6) )

  00153	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00158	33 db		 xor	 ebx, ebx
  0015a	89 55 cc	 mov	 DWORD PTR _Level$1$[ebp], edx
  0015d	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00163	8b f2		 mov	 esi, edx
  00165	d1 fe		 sar	 esi, 1
  00167	e8 00 00 00 00	 call	 _rand
  0016c	99		 cdq
  0016d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00172	f7 f9		 idiv	 ecx
  00174	8b c6		 mov	 eax, esi
  00176	b9 01 00 00 00	 mov	 ecx, 1
  0017b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0017e	83 c6 06	 add	 esi, 6
  00181	03 c6		 add	 eax, esi
  00183	3b d0		 cmp	 edx, eax
  00185	8b c3		 mov	 eax, ebx
  00187	0f 4c c1	 cmovl	 eax, ecx
  0018a	89 45 e0	 mov	 DWORD PTR _Option1$2$[ebp], eax

; 400  : 				{
; 401  : 					Option1 = 1;
; 402  : 				}
; 403  : 
; 404  : 				if ( (rand()%100)< (lpObj->ChaosSuccessRate/5 + 4) )

  0018d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00192	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00198	8b f2		 mov	 esi, edx
  0019a	d1 fe		 sar	 esi, 1
  0019c	e8 00 00 00 00	 call	 _rand
  001a1	99		 cdq
  001a2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a7	f7 f9		 idiv	 ecx
  001a9	8b c6		 mov	 eax, esi
  001ab	b9 01 00 00 00	 mov	 ecx, 1
  001b0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b3	83 c6 04	 add	 esi, 4
  001b6	03 c6		 add	 eax, esi
  001b8	3b d0		 cmp	 edx, eax
  001ba	8b c3		 mov	 eax, ebx
  001bc	0f 4c c1	 cmovl	 eax, ecx
  001bf	89 45 e4	 mov	 DWORD PTR _Option2$2$[ebp], eax

; 405  : 				{
; 406  : 					Option2 = 1;
; 407  : 				}
; 408  : 
; 409  : 				int OpProb;
; 410  : 				int OpType = rand()%3;

  001c2	e8 00 00 00 00	 call	 _rand
  001c7	99		 cdq
  001c8	b9 03 00 00 00	 mov	 ecx, 3
  001cd	f7 f9		 idiv	 ecx
  001cf	8b f2		 mov	 esi, edx

; 411  : 				OpProb = rand()%100;

  001d1	e8 00 00 00 00	 call	 _rand
  001d6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001db	99		 cdq
  001dc	f7 f9		 idiv	 ecx
  001de	8b ca		 mov	 ecx, edx

; 412  : 
; 413  : 				switch ( OpType )

  001e0	2b f3		 sub	 esi, ebx
  001e2	74 52		 je	 SHORT $LN14@DefaultCha
  001e4	83 ee 01	 sub	 esi, 1
  001e7	74 28		 je	 SHORT $LN16@DefaultCha
  001e9	83 ee 01	 sub	 esi, 1

; 431  : 						{
; 432  : 							Option3 = 1;

  001ec	8d 73 03	 lea	 esi, DWORD PTR [ebx+3]
  001ef	75 66		 jne	 SHORT $LN15@DefaultCha

; 428  : 
; 429  : 					case 2:
; 430  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 12) ) 

  001f1	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001f6	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  001fc	d1 fa		 sar	 edx, 1
  001fe	8b c2		 mov	 eax, edx
  00200	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00203	83 c0 0c	 add	 eax, 12			; 0000000cH
  00206	03 c2		 add	 eax, edx
  00208	3b c8		 cmp	 ecx, eax
  0020a	7d 4b		 jge	 SHORT $LN15@DefaultCha

; 431  : 						{
; 432  : 							Option3 = 1;

  0020c	8d 5e fe	 lea	 ebx, DWORD PTR [esi-2]
  0020f	eb 46		 jmp	 SHORT $LN15@DefaultCha
$LN16@DefaultCha:

; 417  : 						{
; 418  : 							Option3 = 3;
; 419  : 						}
; 420  : 						break;
; 421  : 
; 422  : 					case 1:
; 423  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 8) ) 

  00211	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 426  : 						}
; 427  : 						break;

  00216	be 03 00 00 00	 mov	 esi, 3
  0021b	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00221	d1 fa		 sar	 edx, 1
  00223	8b c2		 mov	 eax, edx
  00225	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00228	83 c0 08	 add	 eax, 8
  0022b	03 c2		 add	 eax, edx
  0022d	3b c8		 cmp	 ecx, eax
  0022f	7d 26		 jge	 SHORT $LN15@DefaultCha

; 424  : 						{
; 425  : 							Option3 = 2;

  00231	8d 5e ff	 lea	 ebx, DWORD PTR [esi-1]

; 426  : 						}
; 427  : 						break;

  00234	eb 21		 jmp	 SHORT $LN15@DefaultCha
$LN14@DefaultCha:

; 414  : 				{
; 415  : 					case 0:
; 416  : 						if ( OpProb < (lpObj->ChaosSuccessRate / 5 + 4) ) 

  00236	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0023b	be 03 00 00 00	 mov	 esi, 3
  00240	f7 af 1c 12 00
	00		 imul	 DWORD PTR [edi+4636]
  00246	d1 fa		 sar	 edx, 1
  00248	8b c2		 mov	 eax, edx
  0024a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024d	83 c0 04	 add	 eax, 4
  00250	03 c2		 add	 eax, edx
  00252	3b c8		 cmp	 ecx, eax
  00254	0f 4c de	 cmovl	 ebx, esi
$LN15@DefaultCha:

; 433  : 						}
; 434  : 						break;
; 435  : 				}
; 436  : 
; 437  : 				if ( MixResult2 == TRUE )
; 438  : 				{
; 439  : 					int WingType = rand()%4;

  00257	e8 00 00 00 00	 call	 _rand
  0025c	83 7d d0 01	 cmp	 DWORD PTR _MixResult2$[ebp], 1
  00260	75 69		 jne	 SHORT $LN20@DefaultCha
  00262	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00267	79 05		 jns	 SHORT $LN42@DefaultCha
  00269	48		 dec	 eax
  0026a	83 c8 fc	 or	 eax, -4			; fffffffcH
  0026d	40		 inc	 eax
$LN42@DefaultCha:

; 440  : 					int WingNum = 0;
; 441  : 
; 442  : 					if ( MixResult3 > -1 )

  0026e	8b 55 e8	 mov	 edx, DWORD PTR _MixResult3$[ebp]
  00271	33 c9		 xor	 ecx, ecx
  00273	83 fa ff	 cmp	 edx, -1
  00276	7e 08		 jle	 SHORT $LN22@DefaultCha

; 443  : 					{
; 444  : 						WingNum = ITEMGET(12,00) + MixResult3;

  00278	8d 8a 00 18 00
	00		 lea	 ecx, DWORD PTR [edx+6144]

; 445  : 					}
; 446  : 					else

  0027e	eb 2e		 jmp	 SHORT $LN30@DefaultCha
$LN22@DefaultCha:

; 447  : 					{
; 448  : 						if ( WingType == 0 )

  00280	85 c0		 test	 eax, eax
  00282	75 07		 jne	 SHORT $LN24@DefaultCha

; 449  : 						{
; 450  : 							WingNum = ITEMGET(12,0);

  00284	b9 00 18 00 00	 mov	 ecx, 6144		; 00001800H
  00289	eb 23		 jmp	 SHORT $LN30@DefaultCha
$LN24@DefaultCha:

; 451  : 						}
; 452  : 						else if ( WingType == 1 )

  0028b	83 f8 01	 cmp	 eax, 1
  0028e	75 07		 jne	 SHORT $LN26@DefaultCha

; 453  : 						{
; 454  : 							WingNum = ITEMGET(12,1);

  00290	b9 01 18 00 00	 mov	 ecx, 6145		; 00001801H
  00295	eb 17		 jmp	 SHORT $LN30@DefaultCha
$LN26@DefaultCha:

; 455  : 						}
; 456  : 						else if ( WingType == 2 )

  00297	83 f8 02	 cmp	 eax, 2
  0029a	75 07		 jne	 SHORT $LN28@DefaultCha

; 457  : 						{
; 458  : 							WingNum = ITEMGET(12,2);

  0029c	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  002a1	eb 0b		 jmp	 SHORT $LN30@DefaultCha
$LN28@DefaultCha:

; 459  : 						}
; 460  : 						else if ( WingType == 3 )

  002a3	83 f8 03	 cmp	 eax, 3
  002a6	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  002ab	0f 44 ca	 cmove	 ecx, edx
$LN30@DefaultCha:

; 461  : 						{
; 462  : 							WingNum = ITEMGET(12,41);
; 463  : 						}
; 464  : 					}
; 465  : 
; 466  : 					::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, WingNum, 0, 255, Option1, Option2, Option3, -1, 0, 0);

  002ae	8b 75 e4	 mov	 esi, DWORD PTR _Option2$2$[ebp]
  002b1	6a 00		 push	 0
  002b3	6a 00		 push	 0
  002b5	6a 00		 push	 0
  002b7	6a 00		 push	 0
  002b9	6a ff		 push	 -1
  002bb	53		 push	 ebx
  002bc	56		 push	 esi
  002bd	8b 75 e0	 mov	 esi, DWORD PTR _Option1$2$[ebp]
  002c0	56		 push	 esi
  002c1	68 ff 00 00 00	 push	 255			; 000000ffH
  002c6	6a 00		 push	 0
  002c8	51		 push	 ecx

; 467  : 				}
; 468  : 				else

  002c9	eb 43		 jmp	 SHORT $LN43@DefaultCha
$LN20@DefaultCha:

; 469  : 				{
; 470  : 					int ChaosItemType = rand()%3;

  002cb	99		 cdq
  002cc	f7 fe		 idiv	 esi

; 471  : 					int ChaosItemNum = 0;

  002ce	33 c0		 xor	 eax, eax

; 472  : 
; 473  : 					if ( ChaosItemType == 0 )	// Chaos Dragon Axe

  002d0	85 d2		 test	 edx, edx
  002d2	75 07		 jne	 SHORT $LN31@DefaultCha

; 474  : 					{
; 475  : 						ChaosItemNum = ITEMGET(2,6);

  002d4	b8 06 04 00 00	 mov	 eax, 1030		; 00000406H
  002d9	eb 17		 jmp	 SHORT $LN35@DefaultCha
$LN31@DefaultCha:

; 476  : 					}
; 477  : 					else if ( ChaosItemType == 1 )	// Chaos Nature Bow

  002db	83 fa 01	 cmp	 edx, 1
  002de	75 07		 jne	 SHORT $LN33@DefaultCha

; 478  : 					{
; 479  : 						ChaosItemNum = ITEMGET(4,6);

  002e0	b8 06 08 00 00	 mov	 eax, 2054		; 00000806H
  002e5	eb 0b		 jmp	 SHORT $LN35@DefaultCha
$LN33@DefaultCha:

; 480  : 					}
; 481  : 					else if ( ChaosItemType == 2 )	// Chaos Lighting Staff

  002e7	83 fa 02	 cmp	 edx, 2
  002ea	b9 07 0a 00 00	 mov	 ecx, 2567		; 00000a07H
  002ef	0f 44 c1	 cmove	 eax, ecx
$LN35@DefaultCha:

; 482  : 					{
; 483  : 						ChaosItemNum = ITEMGET(5,7);
; 484  : 					}
; 485  : 
; 486  : 					::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, ChaosItemNum, Level, 255, Option1, Option2, Option3, -1, 0, 0);

  002f2	8b 75 e4	 mov	 esi, DWORD PTR _Option2$2$[ebp]
  002f5	6a 00		 push	 0
  002f7	6a 00		 push	 0
  002f9	6a 00		 push	 0
  002fb	6a 00		 push	 0
  002fd	6a ff		 push	 -1
  002ff	53		 push	 ebx
  00300	56		 push	 esi
  00301	8b 75 e0	 mov	 esi, DWORD PTR _Option1$2$[ebp]
  00304	56		 push	 esi
  00305	68 ff 00 00 00	 push	 255			; 000000ffH
  0030a	ff 75 cc	 push	 DWORD PTR _Level$1$[ebp]
  0030d	50		 push	 eax
$LN43@DefaultCha:
  0030e	6a 00		 push	 0
  00310	6a 00		 push	 0
  00312	68 ff 00 00 00	 push	 255			; 000000ffH
  00317	ff 37		 push	 DWORD PTR [edi]
  00319	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  0031e	8b 75 d8	 mov	 esi, DWORD PTR _this$1$[ebp]
  00321	83 c4 3c	 add	 esp, 60			; 0000003cH
  00324	8b 5d dc	 mov	 ebx, DWORD PTR _aIndex$1$[ebp]
$LN21@DefaultCha:

; 487  : 				}
; 488  : 			}
; 489  : 		}
; 490  : 
; 491  : 
; 492  : 		lpObj->Money -= lpObj->ChaosMoney;

  00327	8b 87 18 12 00
	00		 mov	 eax, DWORD PTR [edi+4632]

; 493  : 		g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0032d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00332	ff 75 c8	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  00335	29 87 cc 00 00
	00		 sub	 DWORD PTR [edi+204], eax
  0033b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 494  : 		GCMoneySend(lpObj->m_Index, lpObj->Money);

  00340	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  00346	ff 37		 push	 DWORD PTR [edi]
  00348	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  0034d	83 c4 08	 add	 esp, 8

; 495  : 
; 496  : 		if ( fail == TRUE )

  00350	83 7d d4 01	 cmp	 DWORD PTR _fail$1$[ebp], 1
  00354	75 53		 jne	 SHORT $LN36@DefaultCha

; 497  : 		{
; 498  : 			ChaosBoxItemDown(lpObj);

  00356	57		 push	 edi
  00357	8b ce		 mov	 ecx, esi
  00359	e8 00 00 00 00	 call	 ?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxItemDown

; 499  : 			GCUserChaosBoxSend(lpObj, 0);

  0035e	6a 00		 push	 0
  00360	57		 push	 edi
  00361	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 500  : 			DataSend(aIndex, (BYTE*)&pMsg, pMsg.h.size);

  00366	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0036a	50		 push	 eax
  0036b	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0036e	50		 push	 eax
  0036f	53		 push	 ebx
  00370	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 501  : 			LogAddTD("[%s][%s] CBMix Fail %d Money : %d-%d",

  00375	ff b7 18 12 00
	00		 push	 DWORD PTR [edi+4632]
  0037b	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0037e	ff b7 cc 00 00
	00		 push	 DWORD PTR [edi+204]
  00384	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  0038a	50		 push	 eax
  0038b	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0038e	50		 push	 eax
  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NPEOFJKC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5?$CFd?5Money?5?3?5?$CF@
  00394	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0039a	83 c4 2c	 add	 esp, 44			; 0000002cH

; 502  : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 503  : 				lpObj->Money, lpObj->ChaosMoney);
; 504  : 			lpObj->ChaosLock = FALSE;

  0039d	c7 87 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+4640], 0

; 505  : #if( __4GAMERS__ == 1 )
; 506  : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 507  : #endif
; 508  : 		}
; 509  : 		else

  003a7	eb 22		 jmp	 SHORT $LN37@DefaultCha
$LN36@DefaultCha:

; 510  : 		{
; 511  : 			LogAddTD("[%s][%s] CBMix Success Rate:%d Money : %d",

  003a9	ff b7 18 12 00
	00		 push	 DWORD PTR [edi+4632]
  003af	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  003b2	ff b7 1c 12 00
	00		 push	 DWORD PTR [edi+4636]
  003b8	50		 push	 eax
  003b9	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  003bc	50		 push	 eax
  003bd	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IKEPLJDI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Success?5Rate?3?$CFd?5M@
  003c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003c8	83 c4 14	 add	 esp, 20			; 00000014H
$LN37@DefaultCha:

; 512  : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 513  : 				lpObj->ChaosMoney);
; 514  : #if( __4GAMERS__ == 1 )
; 515  : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 516  : #endif
; 517  : 		}
; 518  : 	}
; 519  : 
; 520  : 	::gObjInventoryCommit(lpObj->m_Index);

  003cb	ff 37		 push	 DWORD PTR [edi]
  003cd	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit

; 521  : }

  003d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d5	83 c4 04	 add	 esp, 4
  003d8	33 cd		 xor	 ecx, ebp
  003da	5f		 pop	 edi
  003db	5e		 pop	 esi
  003dc	5b		 pop	 ebx
  003dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e2	8b e5		 mov	 esp, ebp
  003e4	5d		 pop	 ebp
  003e5	c2 04 00	 ret	 4
?DefaultChaosMix@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::DefaultChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iOption1$2$ = -52					; size = 4
_this$1$ = -52						; size = 4
_iWingChaosMoney$1$ = -48				; size = 4
_iWingNum$1$ = -44					; size = 4
_WingIndex2$1$ = -44					; size = 4
_LokesFeathersCount$1$ = -40				; size = 4
_iSleeveOfLord$1$ = -36					; size = 4
_nChaosNeedMoney$2$ = -32				; size = 4
_ChoasGemCount$1$ = -32					; size = 4
_iCharmOfLuckCount$1$ = -28				; size = 4
_iRandomValue$1$ = -24					; size = 4
_iChaosMoney$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::WingChaosMix, COMDAT
; _this$ = ecx

; 1727 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 1728 : 	lpObj->ChaosLock = TRUE;
; 1729 : 
; 1730 : 	int WingCount = 0;
; 1731 : 	int ChoasGemCount = 0;

  00011	33 d2		 xor	 edx, edx
  00013	89 4d cc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1732 : 	int LokesFeathersCount = 0;
; 1733 : 	int WingIndex = -1;
; 1734 : 	int iChaosMoney = 0;
; 1735 : 	int WingIndex2 = -1;
; 1736 : 	int iWingChaosMoney = 0;

  0001a	33 c9		 xor	 ecx, ecx
  0001c	89 55 e0	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], edx
  0001f	33 db		 xor	 ebx, ebx
  00021	89 55 d8	 mov	 DWORD PTR _LokesFeathersCount$1$[ebp], edx
  00024	89 55 e8	 mov	 DWORD PTR _iChaosMoney$1$[ebp], edx
  00027	83 ca ff	 or	 edx, -1
  0002a	57		 push	 edi
  0002b	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00035	33 ff		 xor	 edi, edi
  00037	89 55 d4	 mov	 DWORD PTR _WingIndex2$1$[ebp], edx
  0003a	89 4d d0	 mov	 DWORD PTR _iWingChaosMoney$1$[ebp], ecx

; 1737 : 	int iSleeveOfLord = 0;

  0003d	89 4d dc	 mov	 DWORD PTR _iSleeveOfLord$1$[ebp], ecx

; 1738 : 	int iCharmOfLuckCount = 0;

  00040	89 4d e4	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], ecx
$LL4@WingChaosM:

; 1742 : 	{
; 1743 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00043	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00049	03 cf		 add	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00050	83 f8 01	 cmp	 eax, 1
  00053	0f 85 0b 01 00
	00		 jne	 $LN2@WingChaosM

; 1744 : 		{
; 1745 : 			if ( (lpObj->pChaosBox[n].m_Type >= ITEMGET(12,3) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,6)) || lpObj->pChaosBox[n].m_Type == ITEMGET(12,42) || lpObj->pChaosBox[n].m_Type == ITEMGET(14,30) )	

  00059	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0005f	ba 03 18 00 00	 mov	 edx, 6147		; 00001803H
  00064	03 cf		 add	 ecx, edi
  00066	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  0006a	66 3b c2	 cmp	 ax, dx
  0006d	7c 0e		 jl	 SHORT $LN15@WingChaosM
  0006f	ba 06 18 00 00	 mov	 edx, 6150		; 00001806H
  00074	66 3b c2	 cmp	 ax, dx
  00077	0f 8e 1f 05 00
	00		 jle	 $LN77@WingChaosM
$LN15@WingChaosM:
  0007d	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  00082	66 3b c2	 cmp	 ax, dx
  00085	0f 84 11 05 00
	00		 je	 $LN77@WingChaosM
  0008b	ba 1e 1c 00 00	 mov	 edx, 7198		; 00001c1eH
  00090	66 3b c2	 cmp	 ax, dx
  00093	0f 84 03 05 00
	00		 je	 $LN77@WingChaosM

; 1746 : 			{
; 1747 : 				lpObj->ChaosLock = FALSE;
; 1748 : 
; 1749 : 				return FALSE;
; 1750 : 			}
; 1751 : 			if ( lpObj->pChaosBox[n].m_Type >= ITEMGET(12,0) && lpObj->pChaosBox[n].m_Type <= ITEMGET(12,2) ) 

  00099	ba 00 18 00 00	 mov	 edx, 6144		; 00001800H
  0009e	66 3b c2	 cmp	 ax, dx
  000a1	7c 11		 jl	 SHORT $LN16@WingChaosM
  000a3	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  000a8	66 3b c2	 cmp	 ax, dx
  000ab	7f 07		 jg	 SHORT $LN16@WingChaosM

; 1752 : 			{
; 1753 : 				WingCount++;
; 1754 : 				WingIndex = n;
; 1755 : 				iWingChaosMoney = lpObj->pChaosBox[n].m_BuyMoney;

  000ad	8b 51 78	 mov	 edx, DWORD PTR [ecx+120]
  000b0	43		 inc	 ebx
  000b1	89 55 d0	 mov	 DWORD PTR _iWingChaosMoney$1$[ebp], edx
$LN16@WingChaosM:

; 1756 : 			}
; 1757 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,41) )

  000b4	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  000b9	66 3b c2	 cmp	 ax, dx
  000bc	75 0c		 jne	 SHORT $LN17@WingChaosM

; 1758 : 			{
; 1759 : 				WingCount++;
; 1760 : 				WingIndex = n;
; 1761 : 				iWingChaosMoney = lpObj->pChaosBox[n].m_BuyMoney;

  000be	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  000c1	43		 inc	 ebx
  000c2	89 45 d0	 mov	 DWORD PTR _iWingChaosMoney$1$[ebp], eax
  000c5	e9 9a 00 00 00	 jmp	 $LN2@WingChaosM
$LN17@WingChaosM:

; 1762 : 			}
; 1763 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ) // Chaos

  000ca	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000cf	66 3b c2	 cmp	 ax, dx
  000d2	75 08		 jne	 SHORT $LN19@WingChaosM

; 1764 : 			{
; 1765 : 				ChoasGemCount++;

  000d4	ff 45 e0	 inc	 DWORD PTR _ChoasGemCount$1$[ebp]
  000d7	e9 88 00 00 00	 jmp	 $LN2@WingChaosM
$LN19@WingChaosM:

; 1766 : 			}
; 1767 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,14) ) // Feather

  000dc	ba 0e 1a 00 00	 mov	 edx, 6670		; 00001a0eH
  000e1	66 3b c2	 cmp	 ax, dx
  000e4	75 11		 jne	 SHORT $LN21@WingChaosM

; 1768 : 			{
; 1769 : 				if ( lpObj->pChaosBox[n].m_Level == 0 ) // Feather

  000e6	66 83 79 08 00	 cmp	 WORD PTR [ecx+8], 0
  000eb	75 05		 jne	 SHORT $LN23@WingChaosM

; 1770 : 				{
; 1771 : 					LokesFeathersCount++;

  000ed	ff 45 d8	 inc	 DWORD PTR _LokesFeathersCount$1$[ebp]

; 1772 : 				}
; 1773 : 				else	// Crst of Monarch

  000f0	eb 72		 jmp	 SHORT $LN2@WingChaosM
$LN23@WingChaosM:

; 1774 : 				{
; 1775 : 					iSleeveOfLord ++;

  000f2	ff 45 dc	 inc	 DWORD PTR _iSleeveOfLord$1$[ebp]

; 1776 : 				}

  000f5	eb 6d		 jmp	 SHORT $LN2@WingChaosM
$LN21@WingChaosM:

; 1777 : 			}
; 1778 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000f7	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000fc	66 3b c2	 cmp	 ax, dx
  000ff	75 0a		 jne	 SHORT $LN25@WingChaosM

; 1779 : 			{
; 1780 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00101	f3 0f 2c 41 24	 cvttss2si eax, DWORD PTR [ecx+36]
  00106	01 45 e4	 add	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax

; 1781 : 			}
; 1782 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(13,88) ||

  00109	eb 59		 jmp	 SHORT $LN2@WingChaosM
$LN25@WingChaosM:

; 1783 : 				      lpObj->pChaosBox[n].m_Type == ITEMGET(13,89) ||
; 1784 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,90) ||
; 1785 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,91) ||

  0010b	ba 58 1a 00 00	 mov	 edx, 6744		; 00001a58H
  00110	66 3b c2	 cmp	 ax, dx
  00113	74 4b		 je	 SHORT $LN29@WingChaosM
  00115	ba 59 1a 00 00	 mov	 edx, 6745		; 00001a59H
  0011a	66 3b c2	 cmp	 ax, dx
  0011d	74 41		 je	 SHORT $LN29@WingChaosM
  0011f	ba 5a 1a 00 00	 mov	 edx, 6746		; 00001a5aH
  00124	66 3b c2	 cmp	 ax, dx
  00127	74 37		 je	 SHORT $LN29@WingChaosM
  00129	ba 5b 1a 00 00	 mov	 edx, 6747		; 00001a5bH
  0012e	66 3b c2	 cmp	 ax, dx
  00131	74 2d		 je	 SHORT $LN29@WingChaosM
  00133	ba 5c 1a 00 00	 mov	 edx, 6748		; 00001a5cH
  00138	66 3b c2	 cmp	 ax, dx
  0013b	74 23		 je	 SHORT $LN29@WingChaosM

; 1789 : 			}
; 1790 : 			else if ( lpObj->pChaosBox[n].IsExtItem() != FALSE )

  0013d	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00142	85 c0		 test	 eax, eax
  00144	74 1e		 je	 SHORT $LN2@WingChaosM

; 1791 : 			{
; 1792 : 				if ( lpObj->pChaosBox[n].m_Level >= 4 )

  00146	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0014c	66 83 7c 07 08
	04		 cmp	 WORD PTR [edi+eax+8], 4
  00152	7c 10		 jl	 SHORT $LN2@WingChaosM

; 1793 : 				{
; 1794 : 					iChaosMoney += lpObj->pChaosBox[n].m_BuyMoney;

  00154	8b 4d e8	 mov	 ecx, DWORD PTR _iChaosMoney$1$[ebp]
  00157	03 4c 07 78	 add	 ecx, DWORD PTR [edi+eax+120]
  0015b	89 4d e8	 mov	 DWORD PTR _iChaosMoney$1$[ebp], ecx
  0015e	eb 04		 jmp	 SHORT $LN2@WingChaosM
$LN29@WingChaosM:

; 1786 : 					  lpObj->pChaosBox[n].m_Type == ITEMGET(13,92) )
; 1787 : 			{
; 1788 : 				WingIndex2 = lpObj->pChaosBox[n].m_Type;

  00160	98		 cwde
  00161	89 45 d4	 mov	 DWORD PTR _WingIndex2$1$[ebp], eax
$LN2@WingChaosM:

; 1739 : 
; 1740 : 	int n;
; 1741 : 	for ( n=0;n<CHAOS_BOX_SIZE;n++)

  00164	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0016a	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00170	0f 8c cd fe ff
	ff		 jl	 $LL4@WingChaosM

; 1795 : 				}
; 1796 : 			}
; 1797 : 		}
; 1798 : 	}
; 1799 : 
; 1800 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1801 : 
; 1802 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00176	6a 10		 push	 16			; 00000010H
  00178	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0017b	68 86 00 00 00	 push	 134			; 00000086H
  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1803 : 	pMsg.Result = CB_ERROR;
; 1804 : 
; 1805 : 	
; 1806 : 
; 1807 : 	if ( iSleeveOfLord == 1 )

  00186	8b 45 dc	 mov	 eax, DWORD PTR _iSleeveOfLord$1$[ebp]
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018c	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00190	83 f8 01	 cmp	 eax, 1
  00193	75 46		 jne	 SHORT $LN32@WingChaosM

; 1808 : 	{
; 1809 : 		if ( WingCount != 1 || ChoasGemCount != 1 || LokesFeathersCount != 0 )

  00195	3b d8		 cmp	 ebx, eax
  00197	75 0c		 jne	 SHORT $LN36@WingChaosM
  00199	39 45 e0	 cmp	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  0019c	75 07		 jne	 SHORT $LN36@WingChaosM
  0019e	8b 55 d8	 mov	 edx, DWORD PTR _LokesFeathersCount$1$[ebp]
  001a1	85 d2		 test	 edx, edx
  001a3	74 56		 je	 SHORT $LN38@WingChaosM
$LN36@WingChaosM:

; 1820 : 		{
; 1821 : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1822 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1823 : 			lpObj->ChaosLock = FALSE;
; 1824 : 
; 1825 : 			return FALSE;
; 1826 : 		}
; 1827 : 	}
; 1828 : 	else
; 1829 : 	{
; 1830 : 		lpObj->ChaosLock = FALSE;
; 1831 : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1832 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  001a5	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001a9	50		 push	 eax
  001aa	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001ad	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  001b7	50		 push	 eax
  001b8	ff 36		 push	 DWORD PTR [esi]
  001ba	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  001be	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
$LN89@WingChaosM:
  001c3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN88@WingChaosM:
  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi

; 1833 : 
; 1834 : 		return FALSE;

  001c8	33 c0		 xor	 eax, eax
  001ca	5b		 pop	 ebx

; 2049 : 	}
; 2050 : }

  001cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ce	33 cd		 xor	 ecx, ebp
  001d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 04 00	 ret	 4
$LN32@WingChaosM:

; 1810 : 		{
; 1811 : 			lpObj->ChaosLock = FALSE;
; 1812 : 			pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1813 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1814 : 			return FALSE;
; 1815 : 		}
; 1816 : 	}
; 1817 : 	else if ( LokesFeathersCount == 1 )

  001db	83 7d d8 01	 cmp	 DWORD PTR _LokesFeathersCount$1$[ebp], 1
  001df	75 c4		 jne	 SHORT $LN36@WingChaosM

; 1818 : 	{
; 1819 : 		if ( WingCount != 1 || ChoasGemCount != 1 || iSleeveOfLord != 0 )

  001e1	83 fb 01	 cmp	 ebx, 1
  001e4	0f 85 e3 00 00
	00		 jne	 $LN39@WingChaosM
  001ea	39 5d e0	 cmp	 DWORD PTR _ChoasGemCount$1$[ebp], ebx
  001ed	0f 85 da 00 00
	00		 jne	 $LN39@WingChaosM
  001f3	85 c0		 test	 eax, eax
  001f5	0f 85 d2 00 00
	00		 jne	 $LN39@WingChaosM
$LN38@WingChaosM:

; 1835 : 	}
; 1836 : 
; 1837 : 	if ( iCharmOfLuckCount > 10 )

  001fb	83 7d e4 0a	 cmp	 DWORD PTR _iCharmOfLuckCount$1$[ebp], 10 ; 0000000aH
  001ff	7e 21		 jle	 SHORT $LN40@WingChaosM

; 1838 : 	{
; 1839 : 		lpObj->ChaosLock = FALSE;
; 1840 : 		pMsg.Result = 0xF0;
; 1841 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00201	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00205	50		 push	 eax
  00206	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00209	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00213	50		 push	 eax
  00214	ff 36		 push	 DWORD PTR [esi]
  00216	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0021a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0021f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN40@WingChaosM:

; 1842 : 	}
; 1843 : 
; 1844 : 	int nChaosNeedMoney = 5000000;
; 1845 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00222	ff 36		 push	 DWORD PTR [esi]
  00224	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00229	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0022e	8b c8		 mov	 ecx, eax
  00230	b8 40 4b 4c 00	 mov	 eax, 5000000		; 004c4b40H
  00235	f7 e9		 imul	 ecx
  00237	6a 00		 push	 0
  00239	6a 64		 push	 100			; 00000064H
  0023b	52		 push	 edx
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 __alldiv
  00242	8b f8		 mov	 edi, eax

; 1846 : 
; 1847 : 	if ( iChaosTaxMoney < 0 )

  00244	33 c0		 xor	 eax, eax
  00246	85 ff		 test	 edi, edi
  00248	0f 48 f8	 cmovs	 edi, eax

; 1848 : 	{
; 1849 : 		iChaosTaxMoney = 0;
; 1850 : 	}
; 1851 : 
; 1852 : 	nChaosNeedMoney += iChaosTaxMoney;

  0024b	8d 9f 40 4b 4c
	00		 lea	 ebx, DWORD PTR [edi+5000000]

; 1853 : 
; 1854 : 	if ( nChaosNeedMoney < 0 )

  00251	85 db		 test	 ebx, ebx
  00253	0f 48 d8	 cmovs	 ebx, eax
  00256	89 5d e0	 mov	 DWORD PTR _nChaosNeedMoney$2$[ebp], ebx

; 1855 : 	{
; 1856 : 		nChaosNeedMoney = 0;
; 1857 : 	}
; 1858 : 
; 1859 : 	if ( lpObj->Money < nChaosNeedMoney )

  00259	39 9e cc 00 00
	00		 cmp	 DWORD PTR [esi+204], ebx
  0025f	7d 39		 jge	 SHORT $LN43@WingChaosM

; 1860 : 	{
; 1861 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1862 : 		
; 1863 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00261	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00265	50		 push	 eax
  00266	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00269	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  0026d	50		 push	 eax
  0026e	ff 36		 push	 DWORD PTR [esi]
  00270	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00275	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1864 : 		lpObj->ChaosLock = FALSE;

  00278	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 1865 : 
; 1866 : 		return TRUE;

  00282	b8 01 00 00 00	 mov	 eax, 1
  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	5b		 pop	 ebx

; 2049 : 	}
; 2050 : }

  0028a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028d	33 cd		 xor	 ecx, ebp
  0028f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 04 00	 ret	 4
$LN43@WingChaosM:

; 1867 : 	}
; 1868 : 
; 1869 : 	CItem * pWing = &lpObj->pChaosBox[WingIndex];
; 1870 : 	lpObj->ChaosSuccessRate = (DWORD)((DWORD)iWingChaosMoney / (DWORD)4000000);

  0029a	b8 83 de 1b 43	 mov	 eax, 1125899907		; 431bde83H
  0029f	f7 65 d0	 mul	 DWORD PTR _iWingChaosMoney$1$[ebp]

; 1871 : 	lpObj->ChaosSuccessRate += iChaosMoney / 40000;

  002a2	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  002a7	8b ca		 mov	 ecx, edx
  002a9	f7 6d e8	 imul	 DWORD PTR _iChaosMoney$1$[ebp]
  002ac	c1 e9 14	 shr	 ecx, 20			; 00000014H
  002af	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  002b2	8b c2		 mov	 eax, edx
  002b4	03 ca		 add	 ecx, edx
  002b6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002b9	03 c1		 add	 eax, ecx

; 1872 : 
; 1873 : 	if ( lpObj->ChaosSuccessRate < 0 )

  002bb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002c0	0f 48 c1	 cmovs	 eax, ecx
  002c3	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 1874 : 	{
; 1875 : 		lpObj->ChaosSuccessRate = 100;
; 1876 : 	}
; 1877 : 
; 1878 : 	if ( lpObj->ChaosSuccessRate == 0 )

  002c9	85 c0		 test	 eax, eax
  002cb	75 23		 jne	 SHORT $LN45@WingChaosM
$LN39@WingChaosM:

; 1879 : 	{
; 1880 : 		pMsg.Result = CB_INCORRECT_MIX_ITEMS;
; 1881 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002cd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002d1	50		 push	 eax
  002d2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d5	c6 45 ef 07	 mov	 BYTE PTR _pMsg$[ebp+3], 7
  002d9	50		 push	 eax
  002da	ff 36		 push	 DWORD PTR [esi]
  002dc	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1882 : 		lpObj->ChaosLock = FALSE;

  002e1	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 1883 : 
; 1884 : 		return FALSE;

  002eb	e9 d3 fe ff ff	 jmp	 $LN89@WingChaosM
$LN45@WingChaosM:

; 1885 : 	}
; 1886 : 
; 1887 : 	LogChaosItem(lpObj, "WingMix,2");

  002f0	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_09GJEFJCKN@WingMix?02?$AA@
  002f8	56		 push	 esi
  002f9	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1888 : 	LogAddTD("[WingMix,2] Chaos Mix Start");

  002fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JPABEGNL@?$FLWingMix?02?$FN?5Chaos?5Mix?5Start?$AA@
  00303	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00309	83 c4 04	 add	 esp, 4

; 1889 : 
; 1890 : 	if ( lpObj->ChaosSuccessRate > 90 )

  0030c	83 be 1c 12 00
	00 5a		 cmp	 DWORD PTR [esi+4636], 90 ; 0000005aH
  00313	7e 0a		 jle	 SHORT $LN46@WingChaosM

; 1891 : 	{
; 1892 : 		lpObj->ChaosSuccessRate = 90;

  00315	c7 86 1c 12 00
	00 5a 00 00 00	 mov	 DWORD PTR [esi+4636], 90 ; 0000005aH
$LN46@WingChaosM:

; 1893 : 	}
; 1894 : 
; 1895 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0031f	8b 45 e4	 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]

; 1896 : 	lpObj->Money  -= nChaosNeedMoney;
; 1897 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  00322	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00327	01 86 1c 12 00
	00		 add	 DWORD PTR [esi+4636], eax
  0032d	29 9e cc 00 00
	00		 sub	 DWORD PTR [esi+204], ebx
  00333	57		 push	 edi
  00334	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1898 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00339	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0033f	ff 36		 push	 DWORD PTR [esi]
  00341	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00346	83 c4 08	 add	 esp, 8

; 1899 : 
; 1900 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00349	e8 00 00 00 00	 call	 _rand
  0034e	99		 cdq
  0034f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00354	f7 f9		 idiv	 ecx
  00356	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0035c	0f 8d df 01 00
	00		 jge	 $LN47@WingChaosM

; 1901 : 	{
; 1902 : 		int iWingLevel = 0;
; 1903 : 		int iItemType;
; 1904 : 		int iItemSubType;
; 1905 : 
; 1906 : 		if ( iSleeveOfLord != 0 )

  00362	83 7d dc 00	 cmp	 DWORD PTR _iSleeveOfLord$1$[ebp], 0
  00366	8d 79 a1	 lea	 edi, DWORD PTR [ecx-95]
  00369	74 28		 je	 SHORT $LN49@WingChaosM

; 1907 : 		{
; 1908 : 			if( rand()%2 == TRUE )

  0036b	e8 00 00 00 00	 call	 _rand
  00370	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00375	79 05		 jns	 SHORT $LN85@WingChaosM
  00377	48		 dec	 eax
  00378	83 c8 fe	 or	 eax, -2			; fffffffeH
  0037b	40		 inc	 eax
$LN85@WingChaosM:
  0037c	83 f8 01	 cmp	 eax, 1
  0037f	75 08		 jne	 SHORT $LN51@WingChaosM

; 1909 : 			{
; 1910 : 				iItemType = 12;

  00381	8d 58 0b	 lea	 ebx, DWORD PTR [eax+11]

; 1911 : 				iItemSubType = 49;

  00384	8d 78 30	 lea	 edi, DWORD PTR [eax+48]

; 1912 : 			}
; 1913 : 			else

  00387	eb 22		 jmp	 SHORT $LN54@WingChaosM
$LN51@WingChaosM:

; 1914 : 			{
; 1915 : 				iItemType = 13;

  00389	bb 0d 00 00 00	 mov	 ebx, 13			; 0000000dH

; 1916 : 				iItemSubType = 30;

  0038e	8d 7b 11	 lea	 edi, DWORD PTR [ebx+17]

; 1917 : 			}
; 1918 : 		}
; 1919 : 		else

  00391	eb 18		 jmp	 SHORT $LN54@WingChaosM
$LN49@WingChaosM:

; 1920 : 		{
; 1921 : 			iItemType = 12;

  00393	bb 0c 00 00 00	 mov	 ebx, 12			; 0000000cH

; 1922 : 			int iRand = rand()%5;

  00398	e8 00 00 00 00	 call	 _rand
  0039d	99		 cdq
  0039e	f7 ff		 idiv	 edi

; 1923 : 
; 1924 : 			if( iRand == 4 )
; 1925 : 			{
; 1926 : 				iItemSubType = 42;

  003a0	8d 7b 1e	 lea	 edi, DWORD PTR [ebx+30]
  003a3	83 fa 04	 cmp	 edx, 4
  003a6	74 03		 je	 SHORT $LN54@WingChaosM

; 1927 : 			}
; 1928 : 			else
; 1929 : 			{
; 1930 : 				iItemSubType = iRand + 3;

  003a8	8d 7a 03	 lea	 edi, DWORD PTR [edx+3]
$LN54@WingChaosM:

; 1931 : 			}
; 1932 : 		}
; 1933 : 
; 1934 : 		if( WingIndex2 > -1 )

  003ab	8b 55 d4	 mov	 edx, DWORD PTR _WingIndex2$1$[ebp]
  003ae	83 fa ff	 cmp	 edx, -1
  003b1	7e 49		 jle	 SHORT $LN5@WingChaosM

; 1935 : 		{
; 1936 : 			int WingCharm = WingIndex2^ITEMGET(13,0);

  003b3	8b c2		 mov	 eax, edx
  003b5	35 00 1a 00 00	 xor	 eax, 6656		; 00001a00H

; 1937 : 
; 1938 : 			switch( WingCharm )

  003ba	8d 48 a8	 lea	 ecx, DWORD PTR [eax-88]
  003bd	83 f9 04	 cmp	 ecx, 4
  003c0	77 2a		 ja	 SHORT $LN61@WingChaosM
  003c2	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN91@WingChaosM[ecx*4]
$LN56@WingChaosM:

; 1939 : 			{
; 1940 : 			case 88:
; 1941 : 				iItemSubType = 5;

  003c9	bf 05 00 00 00	 mov	 edi, 5

; 1942 : 				break;

  003ce	eb 2c		 jmp	 SHORT $LN5@WingChaosM
$LN57@WingChaosM:

; 1943 : 			case 89:
; 1944 : 				iItemSubType = 4;

  003d0	bf 04 00 00 00	 mov	 edi, 4

; 1945 : 				break;

  003d5	eb 25		 jmp	 SHORT $LN5@WingChaosM
$LN58@WingChaosM:

; 1946 : 			case 90:
; 1947 : 				iItemSubType = 3;

  003d7	bf 03 00 00 00	 mov	 edi, 3

; 1948 : 				break;

  003dc	eb 1e		 jmp	 SHORT $LN5@WingChaosM
$LN59@WingChaosM:

; 1949 : 			case 91:
; 1950 : 				iItemSubType = 42;

  003de	bf 2a 00 00 00	 mov	 edi, 42			; 0000002aH

; 1951 : 				break;

  003e3	eb 17		 jmp	 SHORT $LN5@WingChaosM
$LN60@WingChaosM:

; 1952 : 			case 92:
; 1953 : 				iItemSubType = 6;

  003e5	bf 06 00 00 00	 mov	 edi, 6

; 1954 : 				break;

  003ea	eb 10		 jmp	 SHORT $LN5@WingChaosM
$LN61@WingChaosM:

; 1955 : 			default:
; 1956 : 				LogAddTD("[MixSystem][WingChaosMix] WingCharmItemNum => %d , WingCharmIndex => %d",

  003ec	50		 push	 eax
  003ed	52		 push	 edx
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LFGBMPMJ@?$FLMixSystem?$FN?$FLWingChaosMix?$FN?5WingCh@
  003f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003f9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@WingChaosM:

; 1957 : 					WingIndex2,WingCharm);
; 1958 : 				break;
; 1959 : 			}
; 1960 : 		}
; 1961 : 
; 1962 : 		int iWingNum = ITEMGET(iItemType, iItemSubType);

  003fc	c1 e3 09	 shl	 ebx, 9
  003ff	03 df		 add	 ebx, edi

; 1963 : 		int iOption1 = 0;
; 1964 : 		int iOption2 = 0;
; 1965 : 		int iOption3 = 0;

  00401	33 ff		 xor	 edi, edi
  00403	89 5d d4	 mov	 DWORD PTR _iWingNum$1$[ebp], ebx
  00406	33 db		 xor	 ebx, ebx

; 1966 : 
; 1967 : 		if ( (rand()%5) == 0 )

  00408	e8 00 00 00 00	 call	 _rand
  0040d	99		 cdq
  0040e	b9 05 00 00 00	 mov	 ecx, 5
  00413	f7 f9		 idiv	 ecx
  00415	b9 01 00 00 00	 mov	 ecx, 1
  0041a	8b c3		 mov	 eax, ebx
  0041c	85 d2		 test	 edx, edx
  0041e	0f 44 c1	 cmove	 eax, ecx
  00421	89 45 cc	 mov	 DWORD PTR _iOption1$2$[ebp], eax

; 1968 : 		{
; 1969 : 			iOption1 = 1;
; 1970 : 		}
; 1971 : 
; 1972 : 		int iRandomValue = rand() % 100;

  00424	e8 00 00 00 00	 call	 _rand
  00429	99		 cdq
  0042a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0042f	f7 f9		 idiv	 ecx
  00431	89 55 e8	 mov	 DWORD PTR _iRandomValue$1$[ebp], edx

; 1973 : 		int iRandomValue2 = rand() % 3;

  00434	e8 00 00 00 00	 call	 _rand
  00439	99		 cdq
  0043a	b9 03 00 00 00	 mov	 ecx, 3
  0043f	f7 f9		 idiv	 ecx

; 1974 : 
; 1975 : 		switch ( iRandomValue2 )

  00441	2b d3		 sub	 edx, ebx
  00443	74 22		 je	 SHORT $LN63@WingChaosM
  00445	83 ea 01	 sub	 edx, 1
  00448	74 10		 je	 SHORT $LN65@WingChaosM
  0044a	83 ea 01	 sub	 edx, 1
  0044d	75 1f		 jne	 SHORT $LN64@WingChaosM

; 1990 : 
; 1991 : 			case 2:
; 1992 : 				if ( iRandomValue < 20 )

  0044f	83 7d e8 14	 cmp	 DWORD PTR _iRandomValue$1$[ebp], 20 ; 00000014H
  00453	7d 19		 jge	 SHORT $LN64@WingChaosM

; 1993 : 				{
; 1994 : 					iOption2 = 1;	// +4;

  00455	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  00458	eb 14		 jmp	 SHORT $LN64@WingChaosM
$LN65@WingChaosM:

; 1979 : 				{
; 1980 : 					iOption2 = 3;	// +12
; 1981 : 				}
; 1982 : 				break;
; 1983 : 
; 1984 : 			case 1:
; 1985 : 				if ( iRandomValue < 10 )

  0045a	83 7d e8 0a	 cmp	 DWORD PTR _iRandomValue$1$[ebp], 10 ; 0000000aH
  0045e	7d 0e		 jge	 SHORT $LN64@WingChaosM

; 1986 : 				{
; 1987 : 					iOption2 = 2;	// +8

  00460	bb 02 00 00 00	 mov	 ebx, 2

; 1988 : 				}
; 1989 : 				break;

  00465	eb 07		 jmp	 SHORT $LN64@WingChaosM
$LN63@WingChaosM:

; 1976 : 		{
; 1977 : 			case 0:
; 1978 : 				if ( iRandomValue < 4 )

  00467	83 7d e8 04	 cmp	 DWORD PTR _iRandomValue$1$[ebp], 4
  0046b	0f 4c d9	 cmovl	 ebx, ecx
$LN64@WingChaosM:

; 1995 : 				}
; 1996 : 		}
; 1997 : 
; 1998 : 		//int ExOption;
; 1999 : 
; 2000 : 		if ( iSleeveOfLord != FALSE )
; 2001 : 		{
; 2002 : 			if ( (rand()%5) == 0 )

  0046e	e8 00 00 00 00	 call	 _rand
  00473	99		 cdq
  00474	b9 05 00 00 00	 mov	 ecx, 5
  00479	f7 f9		 idiv	 ecx
  0047b	39 7d dc	 cmp	 DWORD PTR _iSleeveOfLord$1$[ebp], edi
  0047e	74 20		 je	 SHORT $LN69@WingChaosM
  00480	85 d2		 test	 edx, edx
  00482	75 49		 jne	 SHORT $LN71@WingChaosM

; 2003 : 			{
; 2004 : 				iOption3 = 1 << (rand()%4);

  00484	e8 00 00 00 00	 call	 _rand
  00489	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0048e	79 05		 jns	 SHORT $LN86@WingChaosM
  00490	48		 dec	 eax
  00491	83 c8 fc	 or	 eax, -4			; fffffffcH
  00494	40		 inc	 eax
$LN86@WingChaosM:
  00495	bf 01 00 00 00	 mov	 edi, 1
  0049a	8b c8		 mov	 ecx, eax
  0049c	d3 e7		 shl	 edi, cl

; 2005 : 			}
; 2006 : 			
; 2007 : 			iOption3 |= 0x20;
; 2008 : 		}
; 2009 : 		else

  0049e	eb 2d		 jmp	 SHORT $LN71@WingChaosM
$LN69@WingChaosM:

; 2010 : 		{
; 2011 : 			if ( (rand()%5) == 0 )

  004a0	85 d2		 test	 edx, edx
  004a2	75 16		 jne	 SHORT $LN72@WingChaosM

; 2012 : 			{
; 2013 : 				iOption3 = 1 << (rand()%3);

  004a4	e8 00 00 00 00	 call	 _rand
  004a9	b9 03 00 00 00	 mov	 ecx, 3
  004ae	99		 cdq
  004af	f7 f9		 idiv	 ecx
  004b1	bf 01 00 00 00	 mov	 edi, 1
  004b6	8b ca		 mov	 ecx, edx
  004b8	d3 e7		 shl	 edi, cl
$LN72@WingChaosM:

; 2014 : 			}
; 2015 : 
; 2016 : 			if ( (rand()%2) != 0 )

  004ba	e8 00 00 00 00	 call	 _rand
  004bf	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  004c4	79 05		 jns	 SHORT $LN87@WingChaosM
  004c6	48		 dec	 eax
  004c7	83 c8 fe	 or	 eax, -2			; fffffffeH
  004ca	40		 inc	 eax
$LN87@WingChaosM:
  004cb	74 03		 je	 SHORT $LN73@WingChaosM
$LN71@WingChaosM:

; 2017 : 			{
; 2018 : 				iOption3 |= 0x20;

  004cd	83 cf 20	 or	 edi, 32			; 00000020H
$LN73@WingChaosM:

; 2019 : 			}
; 2020 : 		}
; 2021 : 
; 2022 : 		::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, iWingNum, iWingLevel, 0, 0, iOption1, iOption2, -1, iOption3, 0);

  004d0	8b 45 cc	 mov	 eax, DWORD PTR _iOption1$2$[ebp]
  004d3	6a 00		 push	 0
  004d5	6a 00		 push	 0
  004d7	6a 00		 push	 0
  004d9	57		 push	 edi
  004da	6a ff		 push	 -1
  004dc	53		 push	 ebx
  004dd	50		 push	 eax
  004de	6a 00		 push	 0
  004e0	6a 00		 push	 0
  004e2	6a 00		 push	 0
  004e4	ff 75 d4	 push	 DWORD PTR _iWingNum$1$[ebp]
  004e7	6a 00		 push	 0
  004e9	6a 00		 push	 0
  004eb	68 ff 00 00 00	 push	 255			; 000000ffH
  004f0	ff 36		 push	 DWORD PTR [esi]
  004f2	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 2023 : 		::gObjInventoryCommit(lpObj->m_Index);

  004f7	ff 36		 push	 DWORD PTR [esi]
  004f9	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  004fe	83 c4 40	 add	 esp, 64			; 00000040H

; 2024 : 		::LogAddTD("[WingMix,2] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  00501	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  00504	ff 75 e4	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00507	ff 75 e0	 push	 DWORD PTR _nChaosNeedMoney$2$[ebp]
  0050a	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00510	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00516	51		 push	 ecx
  00517	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  0051a	51		 push	 ecx
  0051b	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@BHIPJGFK@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
  00520	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2049 : 	}
; 2050 : }

  00526	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00529	83 c4 1c	 add	 esp, 28			; 0000001cH
  0052c	33 cd		 xor	 ecx, ebp
  0052e	b8 01 00 00 00	 mov	 eax, 1
  00533	5f		 pop	 edi
  00534	5e		 pop	 esi
  00535	5b		 pop	 ebx
  00536	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0053b	8b e5		 mov	 esp, ebp
  0053d	5d		 pop	 ebp
  0053e	c2 04 00	 ret	 4
$LN47@WingChaosM:

; 2025 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2026 : #if( __4GAMERS__ == 1 )
; 2027 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 2028 : #endif
; 2029 : 		return TRUE;
; 2030 : 	}
; 2031 : 	else
; 2032 : 	{
; 2033 : #if( __4GAMERS__ == 1 )
; 2034 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 2035 : #endif
; 2036 : 		for ( n=0;n<CHAOS_BOX_SIZE;n++)

  00541	33 ff		 xor	 edi, edi
$LL11@WingChaosM:

; 2037 : 		{
; 2038 : 			lpObj->pChaosBox[n].Clear();

  00543	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00549	03 cf		 add	 ecx, edi
  0054b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  00550	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00556	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0055c	7c e5		 jl	 SHORT $LL11@WingChaosM

; 2039 : 		}
; 2040 : 
; 2041 : 		GCUserChaosBoxSend(lpObj, 0);

  0055e	6a 00		 push	 0
  00560	56		 push	 esi
  00561	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 2042 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00566	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0056a	50		 push	 eax
  0056b	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0056e	50		 push	 eax
  0056f	ff 36		 push	 DWORD PTR [esi]
  00571	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2043 : 		::LogAddTD("[WingMix,2] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  00576	ff 75 e4	 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00579	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0057c	53		 push	 ebx
  0057d	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00583	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00589	50		 push	 eax
  0058a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0058d	50		 push	 eax
  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@GCGNBAFG@?$FLWingMix?02?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
  00593	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00599	83 c4 30	 add	 esp, 48			; 00000030H
$LN77@WingChaosM:

; 2044 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 2045 : 		
; 2046 : 		lpObj->ChaosLock = FALSE;

  0059c	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 2047 : 
; 2048 : 		return FALSE;

  005a6	e9 1b fc ff ff	 jmp	 $LN88@WingChaosM
  005ab	90		 npad	 1
$LN91@WingChaosM:

; 2049 : 	}
; 2050 : }

  005ac	00 00 00 00	 DD	 $LN56@WingChaosM
  005b0	00 00 00 00	 DD	 $LN57@WingChaosM
  005b4	00 00 00 00	 DD	 $LN58@WingChaosM
  005b8	00 00 00 00	 DD	 $LN59@WingChaosM
  005bc	00 00 00 00	 DD	 $LN60@WingChaosM
?WingChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::WingChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_ChoasGemCount$1$ = -28					; size = 4
_iChaosTaxMoney$2$ = -24				; size = 4
_CreatureGemCount$1$ = -24				; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::CircleChaosMix, COMDAT
; _this$ = ecx

; 1580 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1581 : 	lpObj->ChaosLock = TRUE;
; 1582 : 
; 1583 : 	int CreatureGemCount = 0;
; 1584 : 	int ChoasGemCount = 0;
; 1585 : 	int iCharmOfLuckCount = 0;

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001b	33 ff		 xor	 edi, edi
  0001d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _CreatureGemCount$1$[ebp], 0
  00024	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ChoasGemCount$1$[ebp], 0
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@CircleChao:

; 1588 : 	{
; 1589 : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 46		 jne	 SHORT $LN34@CircleChao

; 1590 : 		{
; 1591 : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,22) )	// Jewel of Creation

  00052	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00058	ba 16 1c 00 00	 mov	 edx, 7190		; 00001c16H
  0005d	0f b7 44 39 06	 movzx	 eax, WORD PTR [ecx+edi+6]
  00062	66 3b c2	 cmp	 ax, dx
  00065	75 09		 jne	 SHORT $LN6@CircleChao

; 1592 : 			{
; 1593 : 				CreatureGemCount++;

  00067	8b 4d e8	 mov	 ecx, DWORD PTR _CreatureGemCount$1$[ebp]
  0006a	41		 inc	 ecx
  0006b	89 4d e8	 mov	 DWORD PTR _CreatureGemCount$1$[ebp], ecx
  0006e	eb 2b		 jmp	 SHORT $LN35@CircleChao
$LN6@CircleChao:

; 1594 : 			}
; 1595 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ) // Chaos Gem

  00070	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  00075	66 3b c2	 cmp	 ax, dx
  00078	75 0c		 jne	 SHORT $LN8@CircleChao

; 1596 : 			{
; 1597 : 				ChoasGemCount++;

  0007a	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  0007d	8b 4d e8	 mov	 ecx, DWORD PTR _CreatureGemCount$1$[ebp]
  00080	40		 inc	 eax
  00081	89 45 e4	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  00084	eb 18		 jmp	 SHORT $LN2@CircleChao
$LN8@CircleChao:

; 1598 : 			}
; 1599 : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00086	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0008b	66 3b c2	 cmp	 ax, dx
  0008e	75 08		 jne	 SHORT $LN34@CircleChao

; 1600 : 			{
; 1601 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00090	f3 0f 2c 44 39
	24		 cvttss2si eax, DWORD PTR [ecx+edi+36]
  00096	03 d8		 add	 ebx, eax
$LN34@CircleChao:
  00098	8b 4d e8	 mov	 ecx, DWORD PTR _CreatureGemCount$1$[ebp]
$LN35@CircleChao:
  0009b	8b 45 e4	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
$LN2@CircleChao:

; 1586 : 
; 1587 : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0009e	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000a4	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000aa	7c 94		 jl	 SHORT $LL4@CircleChao

; 1602 : 			}
; 1603 : 		}
; 1604 : 	}
; 1605 : 
; 1606 : 	if ( CreatureGemCount != 1 || ChoasGemCount != 1 )

  000ac	83 f9 01	 cmp	 ecx, 1
  000af	0f 85 32 02 00
	00		 jne	 $LN12@CircleChao
  000b5	3b c1		 cmp	 eax, ecx
  000b7	0f 85 2a 02 00
	00		 jne	 $LN12@CircleChao

; 1607 : 	{
; 1608 : 		return FALSE;
; 1609 : 	}
; 1610 : 
; 1611 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1612 : 
; 1613 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  000bd	6a 10		 push	 16			; 00000010H
  000bf	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000c2	68 86 00 00 00	 push	 134			; 00000086H
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1614 : 	pMsg.Result = CB_ERROR;

  000d0	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 1615 : 
; 1616 : 	if ( iCharmOfLuckCount > 10 )

  000d4	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000d7	7e 39		 jle	 SHORT $LN13@CircleChao

; 1617 : 	{
; 1618 : 		lpObj->ChaosLock = FALSE;
; 1619 : 		pMsg.Result = 0xF0;
; 1620 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000d9	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000dd	50		 push	 eax
  000de	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000e1	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000eb	50		 push	 eax
  000ec	ff 36		 push	 DWORD PTR [esi]
  000ee	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  000f2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1621 : 
; 1622 : 		return 1;

  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
$LN13@CircleChao:

; 1623 : 	}
; 1624 : 
; 1625 : 	if ( lpObj->Level < 10 )

  00112	66 83 be 96 00
	00 00 0a	 cmp	 WORD PTR [esi+150], 10	; 0000000aH
  0011a	7d 39		 jge	 SHORT $LN14@CircleChao

; 1626 : 	{
; 1627 : 		pMsg.Result = CB_LOW_LEVEL_USER;

  0011c	c6 45 ef 04	 mov	 BYTE PTR _pMsg$[ebp+3], 4
$LN36@CircleChao:

; 1628 : 
; 1629 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00120	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00124	50		 push	 eax
  00125	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00128	50		 push	 eax
  00129	ff 36		 push	 DWORD PTR [esi]
  0012b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00130	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1630 : 		lpObj->ChaosLock = FALSE;

  00133	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN37@CircleChao:

; 1631 : 
; 1632 : 		return TRUE;

  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	5b		 pop	 ebx

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  00145	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00148	33 cd		 xor	 ecx, ebp
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 04 00	 ret	 4
$LN14@CircleChao:

; 1633 : 	}
; 1634 : 
; 1635 : 	int nChaosNeedMoney = 3000000;
; 1636 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  00155	ff 36		 push	 DWORD PTR [esi]
  00157	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  0015c	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00161	8b c8		 mov	 ecx, eax
  00163	b8 c0 c6 2d 00	 mov	 eax, 3000000		; 002dc6c0H
  00168	f7 e9		 imul	 ecx
  0016a	6a 00		 push	 0
  0016c	6a 64		 push	 100			; 00000064H
  0016e	52		 push	 edx
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 __alldiv

; 1637 : 
; 1638 : 	if ( iChaosTaxMoney < 0 )

  00175	33 c9		 xor	 ecx, ecx
  00177	85 c0		 test	 eax, eax
  00179	0f 48 c1	 cmovs	 eax, ecx
  0017c	89 45 e8	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 1639 : 	{
; 1640 : 		iChaosTaxMoney = 0;
; 1641 : 	}
; 1642 : 
; 1643 : 	nChaosNeedMoney += iChaosTaxMoney;

  0017f	8d b8 c0 c6 2d
	00		 lea	 edi, DWORD PTR [eax+3000000]

; 1644 : 
; 1645 : 	if ( nChaosNeedMoney < 0 )

  00185	33 c0		 xor	 eax, eax
  00187	85 ff		 test	 edi, edi
  00189	0f 48 f8	 cmovs	 edi, eax

; 1646 : 	{
; 1647 : 		nChaosNeedMoney = 0;
; 1648 : 	}
; 1649 : 
; 1650 : 	if ( lpObj->Money < nChaosNeedMoney )

  0018c	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  00192	7d 0c		 jge	 SHORT $LN17@CircleChao

; 1651 : 	{
; 1652 : 		lpObj->ChaosLock = FALSE;

  00194	89 86 20 12 00
	00		 mov	 DWORD PTR [esi+4640], eax

; 1653 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;

  0019a	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2

; 1654 : 		
; 1655 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1656 : 		lpObj->ChaosLock = FALSE;
; 1657 : 
; 1658 : 		return TRUE;

  0019e	eb 80		 jmp	 SHORT $LN36@CircleChao
$LN17@CircleChao:

; 1659 : 	}
; 1660 : 
; 1661 : 	LogChaosItem(lpObj, "CircleMix");

  001a0	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_09CKGJGION@CircleMix?$AA@
  001a8	56		 push	 esi
  001a9	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1662 : 	LogAddTD("[CircleMix] Chaos Mix Start");

  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EFIHICLO@?$FLCircleMix?$FN?5Chaos?5Mix?5Start?$AA@
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1663 : 	lpObj->ChaosSuccessRate = 90;	// Succes Rate for Fruit
; 1664 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 1665 : 	lpObj->Money -= nChaosNeedMoney;

  001b9	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001bf	8d 43 5a	 lea	 eax, DWORD PTR [ebx+90]
  001c2	83 c4 04	 add	 esp, 4
  001c5	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 1666 : 
; 1667 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001d0	ff 75 e8	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  001d3	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1668 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001d8	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001de	ff 36		 push	 DWORD PTR [esi]
  001e0	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001e5	83 c4 08	 add	 esp, 8

; 1669 : 
; 1670 : 	if ( (rand()%100 ) < lpObj->ChaosSuccessRate )

  001e8	e8 00 00 00 00	 call	 _rand
  001ed	99		 cdq
  001ee	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001f3	f7 f9		 idiv	 ecx
  001f5	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001fb	0f 8d 97 00 00
	00		 jge	 $LN18@CircleChao

; 1671 : 	{
; 1672 : 		int Fruit = ITEMGET(13,15);	// Fruit
; 1673 : 		int FruitType;
; 1674 : 		int RandonValue = rand() % 100;

  00201	e8 00 00 00 00	 call	 _rand
  00206	99		 cdq
  00207	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0020c	f7 f9		 idiv	 ecx

; 1675 : 
; 1676 : 		if ( RandonValue < 30 )

  0020e	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00211	7d 04		 jge	 SHORT $LN20@CircleChao

; 1677 : 		{
; 1678 : 			FruitType = 0;

  00213	33 c0		 xor	 eax, eax
  00215	eb 23		 jmp	 SHORT $LN26@CircleChao
$LN20@CircleChao:

; 1679 : 		}
; 1680 : 		else if ( RandonValue < 55 )

  00217	83 fa 37	 cmp	 edx, 55			; 00000037H
  0021a	7d 07		 jge	 SHORT $LN22@CircleChao

; 1681 : 		{
; 1682 : 			FruitType = 1;

  0021c	b8 01 00 00 00	 mov	 eax, 1
  00221	eb 17		 jmp	 SHORT $LN26@CircleChao
$LN22@CircleChao:

; 1683 : 		}
; 1684 : 		else if ( RandonValue < 75 )

  00223	83 fa 4b	 cmp	 edx, 75			; 0000004bH
  00226	7d 07		 jge	 SHORT $LN24@CircleChao

; 1685 : 		{
; 1686 : 			FruitType = 2;

  00228	b8 02 00 00 00	 mov	 eax, 2
  0022d	eb 0b		 jmp	 SHORT $LN26@CircleChao
$LN24@CircleChao:

; 1687 : 		}
; 1688 : 		else if ( RandonValue < 95 )

  0022f	33 c0		 xor	 eax, eax
  00231	83 fa 5f	 cmp	 edx, 95			; 0000005fH
  00234	0f 9d c0	 setge	 al
  00237	83 c0 03	 add	 eax, 3
$LN26@CircleChao:

; 1689 : 		{
; 1690 : 			FruitType = 3;
; 1691 : 		}
; 1692 : 		else
; 1693 : 		{
; 1694 : 			FruitType = 4;
; 1695 : 		}
; 1696 : 
; 1697 : 		::ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, Fruit, FruitType, 255, 1, 0, 0, -1, 0, 0);

  0023a	6a 00		 push	 0
  0023c	6a 00		 push	 0
  0023e	6a 00		 push	 0
  00240	6a 00		 push	 0
  00242	6a ff		 push	 -1
  00244	6a 00		 push	 0
  00246	6a 00		 push	 0
  00248	6a 01		 push	 1
  0024a	68 ff 00 00 00	 push	 255			; 000000ffH
  0024f	50		 push	 eax
  00250	68 0f 1a 00 00	 push	 6671			; 00001a0fH
  00255	6a 00		 push	 0
  00257	6a 00		 push	 0
  00259	68 ff 00 00 00	 push	 255			; 000000ffH
  0025e	ff 36		 push	 DWORD PTR [esi]
  00260	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1698 : 		::gObjInventoryCommit(lpObj->m_Index);

  00265	ff 36		 push	 DWORD PTR [esi]
  00267	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0026c	83 c4 40	 add	 esp, 64			; 00000040H

; 1699 : 
; 1700 : 		LogAddTD("[CircleMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  0026f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00272	53		 push	 ebx
  00273	57		 push	 edi
  00274	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0027a	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00280	50		 push	 eax
  00281	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00284	50		 push	 eax
  00285	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@PAFLGDEL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Succe@
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00290	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1701 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1702 : #if( __4GAMERS__ == 1 )
; 1703 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 1704 : #endif
; 1705 : 		return TRUE;

  00293	e9 a5 fe ff ff	 jmp	 $LN37@CircleChao
$LN18@CircleChao:

; 1706 : 	}
; 1707 : 	else
; 1708 : 	{
; 1709 : #if( __4GAMERS__ == 1 )
; 1710 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 1711 : #endif
; 1712 : 		ChaosBoxInit(lpObj);

  00298	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0029b	56		 push	 esi
  0029c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1713 : 		GCUserChaosBoxSend(lpObj, 0);

  002a1	6a 00		 push	 0
  002a3	56		 push	 esi
  002a4	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1714 : 
; 1715 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002a9	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002ad	50		 push	 eax
  002ae	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002b1	50		 push	 eax
  002b2	ff 36		 push	 DWORD PTR [esi]
  002b4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1716 : 		LogAddTD("[CircleMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  002b9	53		 push	 ebx
  002ba	57		 push	 edi
  002bb	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  002c1	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002c4	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  002ca	50		 push	 eax
  002cb	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002ce	50		 push	 eax
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FKBAIBLL@?$FLCircleMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fail?5@
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002da	83 c4 30	 add	 esp, 48			; 00000030H

; 1717 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1718 : 		lpObj->ChaosLock = FALSE;

  002dd	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN12@CircleChao:

; 1719 : 
; 1720 : 		return FALSE;
; 1721 : 	}
; 1722 : }

  002e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ea	33 c0		 xor	 eax, eax
  002ec	5f		 pop	 edi
  002ed	5e		 pop	 esi
  002ee	33 cd		 xor	 ecx, ebp
  002f0	5b		 pop	 ebx
  002f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f6	8b e5		 mov	 esp, ebp
  002f8	5d		 pop	 ebp
  002f9	c2 04 00	 ret	 4
?CircleChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::CircleChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_iChaosTaxMoney$2$ = -28				; size = 4
_UniriaCount$1$ = -28					; size = 4
_nChaosNeedMoney$2$ = -24				; size = 4
_ChoasGemCount$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::PegasiaChaosMix, COMDAT
; _this$ = ecx

; 1450 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1451 : 	lpObj->ChaosLock = TRUE;
; 1452 : 	int UniriaCount = 0;
; 1453 : 	int ChoasGemCount = 0;
; 1454 : 	int iCharmOfLuckCount = 0;

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001b	33 ff		 xor	 edi, edi
  0001d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _UniriaCount$1$[ebp], 0
  00024	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0002e	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _ChoasGemCount$1$[ebp], 0
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@PegasiaCha:

; 1457 : 	{
; 1458 : 		if (lpObj->pChaosBox[n].IsItem() == TRUE)

  00040	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 5e		 jne	 SHORT $LN26@PegasiaCha

; 1459 : 		{
; 1460 : 			if (lpObj->pChaosBox[n].m_Type == ITEMGET(13, 2) && lpObj->pChaosBox[n].m_Durability == 255.0f)	// Uniria

  00052	8b 96 10 12 00
	00		 mov	 edx, DWORD PTR [esi+4624]
  00058	b8 02 1a 00 00	 mov	 eax, 6658		; 00001a02H
  0005d	0f b7 4c 3a 06	 movzx	 ecx, WORD PTR [edx+edi+6]
  00062	66 3b c8	 cmp	 cx, ax
  00065	75 1c		 jne	 SHORT $LN6@PegasiaCha
  00067	f3 0f 10 44 3a
	24		 movss	 xmm0, DWORD PTR [edx+edi+36]
  0006d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@437f0000
  00074	9f		 lahf
  00075	f6 c4 44	 test	 ah, 68			; 00000044H
  00078	7a 09		 jp	 SHORT $LN6@PegasiaCha

; 1461 : 			{
; 1462 : 				UniriaCount++;

  0007a	8b 4d e4	 mov	 ecx, DWORD PTR _UniriaCount$1$[ebp]
  0007d	41		 inc	 ecx
  0007e	89 4d e4	 mov	 DWORD PTR _UniriaCount$1$[ebp], ecx
  00081	eb 30		 jmp	 SHORT $LN28@PegasiaCha
$LN6@PegasiaCha:

; 1463 : 			}
; 1464 : 			else if (lpObj->pChaosBox[n].m_Type == ITEMGET(12, 15)) // Chaos Gem

  00083	b8 0f 18 00 00	 mov	 eax, 6159		; 0000180fH
  00088	66 3b c8	 cmp	 cx, ax
  0008b	75 0c		 jne	 SHORT $LN8@PegasiaCha

; 1465 : 			{
; 1466 : 				ChoasGemCount++;

  0008d	8b 45 e8	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
  00090	8b 4d e4	 mov	 ecx, DWORD PTR _UniriaCount$1$[ebp]
  00093	40		 inc	 eax
  00094	89 45 e8	 mov	 DWORD PTR _ChoasGemCount$1$[ebp], eax
  00097	eb 1d		 jmp	 SHORT $LN2@PegasiaCha
$LN8@PegasiaCha:

; 1467 : 			}
; 1468 : 			else if (lpObj->pChaosBox[n].m_Type == ITEMGET(14, 53))	// Charm Of Luck

  00099	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  0009e	66 3b c8	 cmp	 cx, ax
  000a1	8b 4d e4	 mov	 ecx, DWORD PTR _UniriaCount$1$[ebp]
  000a4	75 0d		 jne	 SHORT $LN28@PegasiaCha

; 1469 : 			{
; 1470 : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  000a6	f3 0f 2c 44 3a
	24		 cvttss2si eax, DWORD PTR [edx+edi+36]
  000ac	03 d8		 add	 ebx, eax
  000ae	eb 03		 jmp	 SHORT $LN28@PegasiaCha
$LN26@PegasiaCha:
  000b0	8b 4d e4	 mov	 ecx, DWORD PTR _UniriaCount$1$[ebp]
$LN28@PegasiaCha:
  000b3	8b 45 e8	 mov	 eax, DWORD PTR _ChoasGemCount$1$[ebp]
$LN2@PegasiaCha:

; 1455 : 
; 1456 : 	for (int n = 0; n < CHAOS_BOX_SIZE; n++)

  000b6	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000bc	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  000c2	0f 8c 78 ff ff
	ff		 jl	 $LL4@PegasiaCha

; 1471 : 			}
; 1472 : 		}
; 1473 : 	}
; 1474 : 
; 1475 : 	if (UniriaCount != 10 || ChoasGemCount != 1)

  000c8	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000cb	0f 85 30 02 00
	00		 jne	 $LN12@PegasiaCha
  000d1	83 f8 01	 cmp	 eax, 1
  000d4	0f 85 27 02 00
	00		 jne	 $LN12@PegasiaCha

; 1478 : 		return FALSE;
; 1479 : 	}
; 1480 : 
; 1481 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1482 : 
; 1483 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  000da	6a 10		 push	 16			; 00000010H
  000dc	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000df	68 86 00 00 00	 push	 134			; 00000086H
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  000ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1484 : 	pMsg.Result = CB_ERROR;

  000ed	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 1485 : 
; 1486 : 	if ( iCharmOfLuckCount > 10 )

  000f1	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  000f4	7e 26		 jle	 SHORT $LN13@PegasiaCha

; 1487 : 	{
; 1488 : 		lpObj->ChaosLock = FALSE;
; 1489 : 		pMsg.Result = 0xF0;
; 1490 : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000f6	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000fa	50		 push	 eax
  000fb	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000fe	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00108	50		 push	 eax
  00109	ff 36		 push	 DWORD PTR [esi]
  0010b	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0010f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00114	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1491 : 
; 1492 : 		return 0;

  00117	e9 ef 01 00 00	 jmp	 $LN29@PegasiaCha
$LN13@PegasiaCha:

; 1493 : 	}
; 1494 : 
; 1495 : 	int nChaosNeedMoney = 500000;
; 1496 : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  0011c	ff 36		 push	 DWORD PTR [esi]
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00123	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00128	8b c8		 mov	 ecx, eax
  0012a	b8 20 a1 07 00	 mov	 eax, 500000		; 0007a120H
  0012f	f7 e9		 imul	 ecx
  00131	6a 00		 push	 0
  00133	6a 64		 push	 100			; 00000064H
  00135	52		 push	 edx
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 __alldiv

; 1497 : 
; 1498 : 	if ( iChaosTaxMoney < 0 )

  0013c	33 c9		 xor	 ecx, ecx
  0013e	85 c0		 test	 eax, eax
  00140	0f 48 c1	 cmovs	 eax, ecx
  00143	89 45 e4	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 1499 : 	{
; 1500 : 		iChaosTaxMoney = 0;
; 1501 : 	}
; 1502 : 
; 1503 : 	nChaosNeedMoney += iChaosTaxMoney;

  00146	8d b8 20 a1 07
	00		 lea	 edi, DWORD PTR [eax+500000]

; 1504 : 
; 1505 : 	if ( nChaosNeedMoney < 0 )

  0014c	33 c0		 xor	 eax, eax
  0014e	85 ff		 test	 edi, edi
  00150	0f 48 f8	 cmovs	 edi, eax
  00153	89 7d e8	 mov	 DWORD PTR _nChaosNeedMoney$2$[ebp], edi

; 1506 : 	{
; 1507 : 		nChaosNeedMoney = 0;
; 1508 : 	}
; 1509 : 
; 1510 : 	if ( lpObj->Money < nChaosNeedMoney )

  00156	39 be cc 00 00
	00		 cmp	 DWORD PTR [esi+204], edi
  0015c	7d 3f		 jge	 SHORT $LN16@PegasiaCha

; 1511 : 	{
; 1512 : 		lpObj->ChaosLock = FALSE;

  0015e	89 86 20 12 00
	00		 mov	 DWORD PTR [esi+4640], eax

; 1513 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1514 : 		
; 1515 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00164	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00168	50		 push	 eax
  00169	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016c	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00170	50		 push	 eax
  00171	ff 36		 push	 DWORD PTR [esi]
  00173	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00178	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1516 : 		lpObj->ChaosLock = FALSE;

  0017b	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 1517 : 
; 1518 : 		return TRUE;

  00185	b8 01 00 00 00	 mov	 eax, 1
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx

; 1567 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
$LN16@PegasiaCha:

; 1519 : 	}
; 1520 : 
; 1521 : 	LogChaosItem(lpObj, "DinorantMix");

  0019d	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OEKEBNDM@DinorantMix?$AA@
  001a5	56		 push	 esi
  001a6	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 1522 : 	LogAddTD("[DinorantMix] Chaos Mix Start");

  001ab	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BKFHPCAO@?$FLDinorantMix?$FN?5Chaos?5Mix?5Start?$AA@
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1523 : 	lpObj->ChaosSuccessRate = 70;	// Succes Rate for Dinorant
; 1524 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 1525 : 	lpObj->Money -= nChaosNeedMoney;

  001b6	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001bc	8d 43 46	 lea	 eax, DWORD PTR [ebx+70]
  001bf	83 c4 04	 add	 esp, 4
  001c2	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 1526 : 
; 1527 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001cd	ff 75 e4	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  001d0	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1528 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001d5	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001db	ff 36		 push	 DWORD PTR [esi]
  001dd	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001e2	83 c4 08	 add	 esp, 8

; 1529 : 
; 1530 : 	if ( (rand()%100 ) < lpObj->ChaosSuccessRate )

  001e5	e8 00 00 00 00	 call	 _rand
  001ea	99		 cdq
  001eb	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001f0	f7 f9		 idiv	 ecx
  001f2	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001f8	0f 8d be 00 00
	00		 jge	 $LN17@PegasiaCha

; 1531 : 	{
; 1532 : 		int Dinorant = ITEMGET(13,3);
; 1533 : 		int Option3 = 0;

  001fe	33 ff		 xor	 edi, edi

; 1534 : 
; 1535 : 		if ( (rand()% 100) < 30 )

  00200	e8 00 00 00 00	 call	 _rand
  00205	99		 cdq
  00206	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0020b	f7 f9		 idiv	 ecx
  0020d	83 fa 1e	 cmp	 edx, 30			; 0000001eH
  00210	7d 37		 jge	 SHORT $LN20@PegasiaCha

; 1536 : 		{
; 1537 : 			Option3 = 1 <<  ((rand()%3)) ;

  00212	e8 00 00 00 00	 call	 _rand
  00217	99		 cdq
  00218	b9 03 00 00 00	 mov	 ecx, 3
  0021d	f7 f9		 idiv	 ecx
  0021f	bf 01 00 00 00	 mov	 edi, 1
  00224	8b ca		 mov	 ecx, edx
  00226	d3 e7		 shl	 edi, cl

; 1538 : 
; 1539 : 			if ( (rand()%5) == 0 )

  00228	e8 00 00 00 00	 call	 _rand
  0022d	99		 cdq
  0022e	b9 05 00 00 00	 mov	 ecx, 5
  00233	f7 f9		 idiv	 ecx
  00235	85 d2		 test	 edx, edx
  00237	75 10		 jne	 SHORT $LN20@PegasiaCha

; 1540 : 			{
; 1541 : 				Option3 |= 1 << (rand()%3);

  00239	e8 00 00 00 00	 call	 _rand
  0023e	99		 cdq
  0023f	b9 03 00 00 00	 mov	 ecx, 3
  00244	f7 f9		 idiv	 ecx
  00246	0f ab d7	 bts	 edi, edx
$LN20@PegasiaCha:

; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 		ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, Dinorant, 0, 255, 1, 0, Option3, -1, 0, 0);

  00249	6a 00		 push	 0
  0024b	6a 00		 push	 0
  0024d	6a 00		 push	 0
  0024f	6a 00		 push	 0
  00251	6a ff		 push	 -1
  00253	57		 push	 edi
  00254	6a 00		 push	 0
  00256	6a 01		 push	 1
  00258	68 ff 00 00 00	 push	 255			; 000000ffH
  0025d	6a 00		 push	 0
  0025f	68 03 1a 00 00	 push	 6659			; 00001a03H
  00264	6a 00		 push	 0
  00266	6a 00		 push	 0
  00268	68 ff 00 00 00	 push	 255			; 000000ffH
  0026d	ff 36		 push	 DWORD PTR [esi]
  0026f	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1546 : 		gObjInventoryCommit(lpObj->m_Index);

  00274	ff 36		 push	 DWORD PTR [esi]
  00276	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0027b	83 c4 40	 add	 esp, 64			; 00000040H

; 1547 : 
; 1548 : 		LogAddTD("[DinorantMix] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  0027e	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  00281	53		 push	 ebx
  00282	ff 75 e8	 push	 DWORD PTR _nChaosNeedMoney$2$[ebp]
  00285	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0028b	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00291	51		 push	 ecx
  00292	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  00295	51		 push	 ecx
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@BMPMHKIC@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Suc@
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002a1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1549 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1550 : 
; 1551 : #if( __4GAMERS__ == 1 )
; 1552 : 			g_Achievements.GD_UpdateMixData(lpObj, true);
; 1553 : #endif
; 1554 : 
; 1555 : 		return TRUE;

  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	5b		 pop	 ebx

; 1567 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  002ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002af	33 cd		 xor	 ecx, ebp
  002b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b6	8b e5		 mov	 esp, ebp
  002b8	5d		 pop	 ebp
  002b9	c2 04 00	 ret	 4
$LN17@PegasiaCha:

; 1556 : 	}
; 1557 : 	else
; 1558 : 	{
; 1559 : #if( __4GAMERS__ == 1 )
; 1560 : 			g_Achievements.GD_UpdateMixData(lpObj, false);
; 1561 : #endif
; 1562 : 		ChaosBoxInit(lpObj);	// Errase Chaos Box

  002bc	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002bf	56		 push	 esi
  002c0	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1563 : 		GCUserChaosBoxSend(lpObj, 0);

  002c5	6a 00		 push	 0
  002c7	56		 push	 esi
  002c8	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1564 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  002cd	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002d1	50		 push	 eax
  002d2	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d5	50		 push	 eax
  002d6	ff 36		 push	 DWORD PTR [esi]
  002d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1565 : 
; 1566 : 		LogAddTD("[DinorantMix] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  002dd	53		 push	 ebx
  002de	57		 push	 edi
  002df	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  002e5	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002e8	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  002ee	50		 push	 eax
  002ef	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002f2	50		 push	 eax
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@JKKAJEKA@?$FLDinorantMix?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Fai@
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002fe	83 c4 30	 add	 esp, 48			; 00000030H
$LN12@PegasiaCha:

; 1476 : 	{
; 1477 : 		lpObj->ChaosLock = FALSE;

  00301	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN29@PegasiaCha:

; 1567 : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money, nChaosNeedMoney, iCharmOfLuckCount);
; 1568 : 
; 1569 : 		lpObj->ChaosLock = FALSE;
; 1570 : 		return FALSE;
; 1571 : 	}
; 1572 : }

  0030b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030e	33 c0		 xor	 eax, eax
  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	33 cd		 xor	 ecx, ebp
  00314	5b		 pop	 ebx
  00315	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0031a	8b e5		 mov	 esp, ebp
  0031c	5d		 pop	 ebp
  0031d	c2 04 00	 ret	 4
?PegasiaChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::PegasiaChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -312						; size = 4
_OtherItemFound$1$ = -308				; size = 4
_SocketBonus$1 = -308					; size = 1
_iCharmOfLuckCount$1$ = -304				; size = 4
_SoulGemCount$1$ = -300					; size = 4
_PlusItemPos$1$ = -296					; size = 4
_Plus13ItemCount$1$ = -292				; size = 4
_Plus12ItemCount$1$ = -288				; size = 4
_Plus11ItemCount$1$ = -284				; size = 4
_Plus10ItemCount$1$ = -280				; size = 4
_Plus9ItemCount$1$ = -276				; size = 4
_btRateType$1$ = -269					; size = 1
_BlessGemCount$1$ = -268				; size = 4
_ChaosGemCount$1$ = -264				; size = 4
_Plus14ItemCount$1$ = -260				; size = 4
_Item$2 = -256						; size = 212
_pResult$3 = -44					; size = 16
_pResult$4 = -44					; size = 16
_pMsg$ = -28						; size = 16
_iChristmasItem$1$ = -12				; size = 4
_SocketOptions$5 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_mixType$ = 12						; size = 4
?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CChaosBox::PlusItemLevelChaosMix, COMDAT
; _this$ = ecx

; 948  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 949  : 	int ChaosGemCount = 0;
; 950  : 	int BlessGemCount = 0;
; 951  : 	int SoulGemCount = 0;
; 952  : 	int Plus9ItemCount = 0;
; 953  : 	int Plus10ItemCount = 0;
; 954  : 	int PlusItemPos = -1;

  00017	83 c8 ff	 or	 eax, -1
  0001a	56		 push	 esi

; 955  : 	int OtherItemFound = 0;

  0001b	33 f6		 xor	 esi, esi
  0001d	89 8d c8 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00023	57		 push	 edi
  00024	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ChaosGemCount$1$[ebp], 0
  0002e	33 ff		 xor	 edi, edi
  00030	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _BlessGemCount$1$[ebp], 0
  0003a	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _SoulGemCount$1$[ebp], 0
  00044	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Plus9ItemCount$1$[ebp], 0
  0004e	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Plus10ItemCount$1$[ebp], 0
  00058	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$1$[ebp], eax
  0005e	89 b5 cc fe ff
	ff		 mov	 DWORD PTR _OtherItemFound$1$[ebp], esi

; 956  : 	int Plus11ItemCount = 0;

  00064	89 b5 e4 fe ff
	ff		 mov	 DWORD PTR _Plus11ItemCount$1$[ebp], esi

; 957  : 	int Plus12ItemCount = 0;

  0006a	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _Plus12ItemCount$1$[ebp], esi

; 958  : 	int Plus13ItemCount = 0;

  00070	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _Plus13ItemCount$1$[ebp], esi

; 959  : 	int Plus14ItemCount = 0;

  00076	89 b5 fc fe ff
	ff		 mov	 DWORD PTR _Plus14ItemCount$1$[ebp], esi

; 960  : 	int ExtraBlessGemCount = 0;
; 961  : 	int ExtraSoulGemCount = 0;
; 962  : 	int iChristmasItem = 0;

  0007c	89 75 f4	 mov	 DWORD PTR _iChristmasItem$1$[ebp], esi

; 963  : 	int iCharmOfLuckCount = 0;

  0007f	89 b5 d0 fe ff
	ff		 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], esi
  00085	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@PlusItemLe:

; 967  : 	{
; 968  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00090	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00096	03 cf		 add	 ecx, edi
  00098	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	0f 85 97 00 00
	00		 jne	 $LN112@PlusItemLe

; 969  : 		{
; 970  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  000a6	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000ac	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  000b1	0f b7 44 0f 06	 movzx	 eax, WORD PTR [edi+ecx+6]
  000b6	66 3b c2	 cmp	 ax, dx
  000b9	75 0f		 jne	 SHORT $LN9@PlusItemLe

; 971  : 			{
; 972  : 				ChaosGemCount++;

  000bb	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _ChaosGemCount$1$[ebp]
  000c1	41		 inc	 ecx
  000c2	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _ChaosGemCount$1$[ebp], ecx
  000c8	eb 79		 jmp	 SHORT $LN116@PlusItemLe
$LN9@PlusItemLe:

; 973  : 			}
; 974  : 			else if (  lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) )

  000ca	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  000cf	66 3b c2	 cmp	 ax, dx
  000d2	75 15		 jne	 SHORT $LN11@PlusItemLe

; 975  : 			{
; 976  : 				BlessGemCount++;

  000d4	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  000da	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _ChaosGemCount$1$[ebp]
  000e0	42		 inc	 edx
  000e1	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _BlessGemCount$1$[ebp], edx
  000e7	eb 60		 jmp	 SHORT $LN117@PlusItemLe
$LN11@PlusItemLe:

; 977  : 			}
; 978  : 			else if (  lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )

  000e9	ba 0e 1c 00 00	 mov	 edx, 7182		; 00001c0eH
  000ee	66 3b c2	 cmp	 ax, dx
  000f1	75 08		 jne	 SHORT $LN13@PlusItemLe

; 979  : 			{
; 980  : 				SoulGemCount++;

  000f3	ff 85 d4 fe ff
	ff		 inc	 DWORD PTR _SoulGemCount$1$[ebp]
  000f9	eb 42		 jmp	 SHORT $LN112@PlusItemLe
$LN13@PlusItemLe:

; 981  : 			}
; 982  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  000fb	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  00100	66 3b c2	 cmp	 ax, dx
  00103	75 0e		 jne	 SHORT $LN15@PlusItemLe

; 983  : 			{
; 984  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00105	f3 0f 2c 44 0f
	24		 cvttss2si eax, DWORD PTR [edi+ecx+36]
  0010b	01 85 d0 fe ff
	ff		 add	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00111	eb 2a		 jmp	 SHORT $LN112@PlusItemLe
$LN15@PlusItemLe:

; 985  : 			}
; 986  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,96) )

  00113	ba 60 1c 00 00	 mov	 edx, 7264		; 00001c60H
  00118	66 3b c2	 cmp	 ax, dx
  0011b	75 05		 jne	 SHORT $LN17@PlusItemLe

; 987  : 			{
; 988  : 				iChristmasItem += 1;

  0011d	ff 45 f4	 inc	 DWORD PTR _iChristmasItem$1$[ebp]
  00120	eb 1b		 jmp	 SHORT $LN112@PlusItemLe
$LN17@PlusItemLe:

; 989  : 			}
; 990  : 			else if ( lpObj->pChaosBox[n].m_Level == 9 )

  00122	0f b7 44 0f 08	 movzx	 eax, WORD PTR [edi+ecx+8]
  00127	66 83 f8 09	 cmp	 ax, 9
  0012b	0f 85 9a 00 00
	00		 jne	 $LN19@PlusItemLe

; 991  : 			{
; 992  : 				Plus9ItemCount++;

  00131	ff 85 ec fe ff
	ff		 inc	 DWORD PTR _Plus9ItemCount$1$[ebp]
$LN118@PlusItemLe:

; 998  : 				PlusItemPos = n;

  00137	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$1$[ebp], esi
$LN112@PlusItemLe:
  0013d	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _ChaosGemCount$1$[ebp]
$LN116@PlusItemLe:
  00143	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
$LN117@PlusItemLe:
  00149	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _Plus14ItemCount$1$[ebp]
$LN2@PlusItemLe:

; 964  : 	BYTE btItemLuckValue = 0;
; 965  : 	
; 966  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0014f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00155	46		 inc	 esi
  00156	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0015c	0f 8c 2e ff ff
	ff		 jl	 $LL4@PlusItemLe

; 1023 : 			}
; 1024 : 		}
; 1025 : 	}
; 1026 : 
; 1027 : 	if ( iCharmOfLuckCount > 10 )

  00162	8b b5 d0 fe ff
	ff		 mov	 esi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00168	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  0016b	0f 8e d3 00 00
	00		 jle	 $LN31@PlusItemLe

; 1028 : 	{
; 1029 : 		PMSG_CHAOSMIXRESULT pResult;
; 1030 : 
; 1031 : 		PHeadSetB((LPBYTE)&pResult, 0x86, sizeof(pResult));

  00171	6a 10		 push	 16			; 00000010H
  00173	8d 45 d4	 lea	 eax, DWORD PTR _pResult$4[ebp]
  00176	68 86 00 00 00	 push	 134			; 00000086H
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1032 : 
; 1033 : 		LogAddTD("[PlusItemLevel] [%s][%s] CBMix Charm of luck over 10% (%d)",

  00181	56		 push	 esi
  00182	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00185	50		 push	 eax
  00186	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00189	50		 push	 eax
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KGOODEAG@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5C@
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1034 : 			lpObj->AccountID, lpObj->Name, iCharmOfLuckCount);
; 1035 : 
; 1036 : 		pResult.Result = 0xF0;
; 1037 : 
; 1038 : 		DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);

  00195	0f b6 45 d5	 movzx	 eax, BYTE PTR _pResult$4[ebp+1]
  00199	50		 push	 eax
  0019a	8d 45 d4	 lea	 eax, DWORD PTR _pResult$4[ebp]
  0019d	c6 45 d7 f0	 mov	 BYTE PTR _pResult$4[ebp+3], 240 ; 000000f0H
  001a1	50		 push	 eax
  001a2	ff 33		 push	 DWORD PTR [ebx]
  001a4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001a9	83 c4 28	 add	 esp, 40			; 00000028H
$LN121@PlusItemLe:

; 1058 : 		lpObj->ChaosLock = FALSE;

  001ac	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
$LN111@PlusItemLe:

; 1114 : 	{
; 1115 : 		return FALSE;

  001b6	33 c0		 xor	 eax, eax

; 1411 : }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001be	33 cd		 xor	 ecx, ebp
  001c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 08 00	 ret	 8
$LN19@PlusItemLe:

; 993  : 				PlusItemPos = n;
; 994  : 			}
; 995  : 			else if ( lpObj->pChaosBox[n].m_Level == 10 )

  001cb	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  001cf	75 0b		 jne	 SHORT $LN21@PlusItemLe

; 996  : 			{
; 997  : 				Plus10ItemCount++;

  001d1	ff 85 e8 fe ff
	ff		 inc	 DWORD PTR _Plus10ItemCount$1$[ebp]

; 998  : 				PlusItemPos = n;

  001d7	e9 5b ff ff ff	 jmp	 $LN118@PlusItemLe
$LN21@PlusItemLe:

; 999  : 			}
; 1000 : 			else if ( lpObj->pChaosBox[n].m_Level == 11 )

  001dc	66 83 f8 0b	 cmp	 ax, 11			; 0000000bH
  001e0	75 0b		 jne	 SHORT $LN23@PlusItemLe

; 1001 : 			{
; 1002 : 				Plus11ItemCount++;

  001e2	ff 85 e4 fe ff
	ff		 inc	 DWORD PTR _Plus11ItemCount$1$[ebp]

; 1003 : 				PlusItemPos = n;

  001e8	e9 4a ff ff ff	 jmp	 $LN118@PlusItemLe
$LN23@PlusItemLe:

; 1004 : 			}
; 1005 : 			else if ( lpObj->pChaosBox[n].m_Level == 12 )

  001ed	66 83 f8 0c	 cmp	 ax, 12			; 0000000cH
  001f1	75 0b		 jne	 SHORT $LN25@PlusItemLe

; 1006 : 			{
; 1007 : 				Plus12ItemCount++;

  001f3	ff 85 e0 fe ff
	ff		 inc	 DWORD PTR _Plus12ItemCount$1$[ebp]

; 1008 : 				PlusItemPos = n;

  001f9	e9 39 ff ff ff	 jmp	 $LN118@PlusItemLe
$LN25@PlusItemLe:

; 1009 : 			}
; 1010 : 			else if ( lpObj->pChaosBox[n].m_Level == 13 )

  001fe	66 83 f8 0d	 cmp	 ax, 13			; 0000000dH
  00202	75 0b		 jne	 SHORT $LN27@PlusItemLe

; 1011 : 			{
; 1012 : 				Plus13ItemCount++;

  00204	ff 85 dc fe ff
	ff		 inc	 DWORD PTR _Plus13ItemCount$1$[ebp]

; 1013 : 				PlusItemPos = n;

  0020a	e9 28 ff ff ff	 jmp	 $LN118@PlusItemLe
$LN27@PlusItemLe:

; 1019 : 			}
; 1020 : 			else

  0020f	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _ChaosGemCount$1$[ebp]
  00215	66 83 f8 0e	 cmp	 ax, 14			; 0000000eH
  00219	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _BlessGemCount$1$[ebp]
  0021f	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _Plus14ItemCount$1$[ebp]
  00225	75 12		 jne	 SHORT $LN29@PlusItemLe

; 1014 : 			}
; 1015 : 			else if ( lpObj->pChaosBox[n].m_Level == 14 )
; 1016 : 			{
; 1017 : 				Plus14ItemCount++;
; 1018 : 				PlusItemPos = n;

  00227	40		 inc	 eax
  00228	89 b5 d8 fe ff
	ff		 mov	 DWORD PTR _PlusItemPos$1$[ebp], esi
  0022e	89 85 fc fe ff
	ff		 mov	 DWORD PTR _Plus14ItemCount$1$[ebp], eax

; 1019 : 			}
; 1020 : 			else

  00234	e9 16 ff ff ff	 jmp	 $LN2@PlusItemLe
$LN29@PlusItemLe:

; 1021 : 			{
; 1022 : 				OtherItemFound ++;

  00239	ff 85 cc fe ff
	ff		 inc	 DWORD PTR _OtherItemFound$1$[ebp]
  0023f	e9 0b ff ff ff	 jmp	 $LN2@PlusItemLe
$LN31@PlusItemLe:

; 1039 : 
; 1040 : 		lpObj->ChaosLock = FALSE;
; 1041 : 
; 1042 : 		return 0;
; 1043 : 	}
; 1044 : 
; 1045 : 	if ( OtherItemFound != FALSE )

  00244	8b b5 cc fe ff
	ff		 mov	 esi, DWORD PTR _OtherItemFound$1$[ebp]
  0024a	85 f6		 test	 esi, esi
  0024c	0f 85 64 ff ff
	ff		 jne	 $LN111@PlusItemLe

; 1046 : 	{
; 1047 : 		return FALSE;
; 1048 : 	}
; 1049 : 
; 1050 : 	if ( iChristmasItem > 1 )

  00252	83 7d f4 01	 cmp	 DWORD PTR _iChristmasItem$1$[ebp], 1
  00256	7e 2c		 jle	 SHORT $LN33@PlusItemLe

; 1051 : 	{
; 1052 : 		PMSG_CHAOSMIXRESULT pResult;
; 1053 : 		PHeadSetB((LPBYTE)&pResult, 0x86, sizeof(pResult));

  00258	6a 10		 push	 16			; 00000010H
  0025a	8d 45 d4	 lea	 eax, DWORD PTR _pResult$3[ebp]
  0025d	68 86 00 00 00	 push	 134			; 00000086H
  00262	50		 push	 eax
  00263	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1054 : 
; 1055 : 		pResult.Result = 7;
; 1056 : 
; 1057 : 		DataSend(lpObj->m_Index, (LPBYTE)&pResult, pResult.h.size);

  00268	0f b6 45 d5	 movzx	 eax, BYTE PTR _pResult$3[ebp+1]
  0026c	50		 push	 eax
  0026d	8d 45 d4	 lea	 eax, DWORD PTR _pResult$3[ebp]
  00270	c6 45 d7 07	 mov	 BYTE PTR _pResult$3[ebp+3], 7
  00274	50		 push	 eax
  00275	ff 33		 push	 DWORD PTR [ebx]
  00277	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0027c	83 c4 18	 add	 esp, 24			; 00000018H

; 1059 : 		return 0;

  0027f	e9 28 ff ff ff	 jmp	 $LN121@PlusItemLe
$LN33@PlusItemLe:

; 1060 : 	}
; 1061 : 
; 1062 : 	lpObj->ChaosMoney = 0;
; 1063 : 	int MixType = 0;
; 1064 : 
; 1065 : 	if ( Plus9ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 1 && SoulGemCount == 1 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  00284	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR _SoulGemCount$1$[ebp]
  0028a	33 f6		 xor	 esi, esi
  0028c	83 bd ec fe ff
	ff 01		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], 1
  00293	c7 83 18 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4632], 0
  0029d	75 53		 jne	 SHORT $LN34@PlusItemLe
  0029f	83 f9 01	 cmp	 ecx, 1
  002a2	75 4e		 jne	 SHORT $LN34@PlusItemLe
  002a4	3b d1		 cmp	 edx, ecx
  002a6	75 4a		 jne	 SHORT $LN34@PlusItemLe
  002a8	3b f9		 cmp	 edi, ecx
  002aa	75 46		 jne	 SHORT $LN34@PlusItemLe
  002ac	39 b5 e8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], esi
  002b2	75 3e		 jne	 SHORT $LN34@PlusItemLe
  002b4	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], esi
  002ba	0f 85 87 00 00
	00		 jne	 $LN36@PlusItemLe
  002c0	39 b5 e0 fe ff
	ff		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], esi
  002c6	0f 85 cc 00 00
	00		 jne	 $LN38@PlusItemLe
  002cc	39 b5 dc fe ff
	ff		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], esi
  002d2	0f 85 0d 01 00
	00		 jne	 $LN40@PlusItemLe
  002d8	85 c0		 test	 eax, eax
  002da	0f 85 4f 01 00
	00		 jne	 $LN42@PlusItemLe

; 1066 : 	{
; 1067 : 		MixType = CHAOS_TYPE_UPGRADE_10;

  002e0	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]

; 1068 : 		lpObj->ChaosMoney = 2000000;

  002e3	c7 83 18 12 00
	00 80 84 1e 00	 mov	 DWORD PTR [ebx+4632], 2000000 ; 001e8480H

; 1069 : 		ExtraBlessGemCount = BlessGemCount - 1;
; 1070 : 		ExtraSoulGemCount = SoulGemCount - 1;

  002ed	e9 86 01 00 00	 jmp	 $LN44@PlusItemLe
$LN34@PlusItemLe:

; 1071 : 	}
; 1072 : 	else if ( Plus10ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 2 && SoulGemCount == 2 && Plus9ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  002f2	83 bd e8 fe ff
	ff 01		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], 1
  002f9	75 4c		 jne	 SHORT $LN36@PlusItemLe
  002fb	83 f9 01	 cmp	 ecx, 1
  002fe	75 47		 jne	 SHORT $LN36@PlusItemLe
  00300	83 fa 02	 cmp	 edx, 2
  00303	75 42		 jne	 SHORT $LN36@PlusItemLe
  00305	3b fa		 cmp	 edi, edx
  00307	75 3e		 jne	 SHORT $LN36@PlusItemLe
  00309	39 b5 ec fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], esi
  0030f	75 36		 jne	 SHORT $LN36@PlusItemLe
  00311	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], esi
  00317	75 2e		 jne	 SHORT $LN36@PlusItemLe
  00319	39 b5 e0 fe ff
	ff		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], esi
  0031f	75 77		 jne	 SHORT $LN38@PlusItemLe
  00321	39 b5 dc fe ff
	ff		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], esi
  00327	0f 85 b8 00 00
	00		 jne	 $LN40@PlusItemLe
  0032d	85 c0		 test	 eax, eax
  0032f	0f 85 fa 00 00
	00		 jne	 $LN42@PlusItemLe

; 1073 : 	{
; 1074 : 		MixType = CHAOS_TYPE_UPGRADE_11;

  00335	8d 71 03	 lea	 esi, DWORD PTR [ecx+3]

; 1075 : 		lpObj->ChaosMoney = 4000000;

  00338	c7 83 18 12 00
	00 00 09 3d 00	 mov	 DWORD PTR [ebx+4632], 4000000 ; 003d0900H

; 1076 : 		ExtraBlessGemCount = BlessGemCount - 2;
; 1077 : 		ExtraSoulGemCount = SoulGemCount - 2;

  00342	e9 31 01 00 00	 jmp	 $LN44@PlusItemLe
$LN36@PlusItemLe:

; 1078 : 	}
; 1079 : 	else if ( Plus11ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 3 && SoulGemCount == 3 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  00347	83 bd e4 fe ff
	ff 01		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], 1
  0034e	75 48		 jne	 SHORT $LN38@PlusItemLe
  00350	83 f9 01	 cmp	 ecx, 1
  00353	75 43		 jne	 SHORT $LN38@PlusItemLe
  00355	83 fa 03	 cmp	 edx, 3
  00358	75 3e		 jne	 SHORT $LN38@PlusItemLe
  0035a	3b fa		 cmp	 edi, edx
  0035c	75 3a		 jne	 SHORT $LN38@PlusItemLe
  0035e	39 b5 ec fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], esi
  00364	75 32		 jne	 SHORT $LN38@PlusItemLe
  00366	39 b5 e8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], esi
  0036c	75 2a		 jne	 SHORT $LN38@PlusItemLe
  0036e	39 b5 e0 fe ff
	ff		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], esi
  00374	75 22		 jne	 SHORT $LN38@PlusItemLe
  00376	39 b5 dc fe ff
	ff		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], esi
  0037c	75 67		 jne	 SHORT $LN40@PlusItemLe
  0037e	85 c0		 test	 eax, eax
  00380	0f 85 a9 00 00
	00		 jne	 $LN42@PlusItemLe

; 1080 : 	{
; 1081 : 		MixType = CHAOS_TYPE_UPGRADE_12;

  00386	8d 71 15	 lea	 esi, DWORD PTR [ecx+21]

; 1082 : 		lpObj->ChaosMoney = 6000000;

  00389	c7 83 18 12 00
	00 80 8d 5b 00	 mov	 DWORD PTR [ebx+4632], 6000000 ; 005b8d80H

; 1083 : 		ExtraBlessGemCount = BlessGemCount - 3;
; 1084 : 		ExtraSoulGemCount = SoulGemCount - 3;

  00393	e9 e0 00 00 00	 jmp	 $LN44@PlusItemLe
$LN38@PlusItemLe:

; 1085 : 	}
; 1086 : 	else if ( Plus12ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 4 && SoulGemCount == 4 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus13ItemCount == 0 && Plus14ItemCount == 0 )

  00398	83 bd e0 fe ff
	ff 01		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], 1
  0039f	75 44		 jne	 SHORT $LN40@PlusItemLe
  003a1	83 f9 01	 cmp	 ecx, 1
  003a4	75 3f		 jne	 SHORT $LN40@PlusItemLe
  003a6	83 fa 04	 cmp	 edx, 4
  003a9	75 3a		 jne	 SHORT $LN40@PlusItemLe
  003ab	3b fa		 cmp	 edi, edx
  003ad	75 36		 jne	 SHORT $LN40@PlusItemLe
  003af	39 b5 ec fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], esi
  003b5	75 2e		 jne	 SHORT $LN40@PlusItemLe
  003b7	39 b5 e8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], esi
  003bd	75 26		 jne	 SHORT $LN40@PlusItemLe
  003bf	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], esi
  003c5	75 1e		 jne	 SHORT $LN40@PlusItemLe
  003c7	39 b5 dc fe ff
	ff		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], esi
  003cd	75 16		 jne	 SHORT $LN40@PlusItemLe
  003cf	85 c0		 test	 eax, eax
  003d1	75 5c		 jne	 SHORT $LN42@PlusItemLe

; 1087 : 	{
; 1088 : 		MixType = CHAOS_TYPE_UPGRADE_13;

  003d3	8d 71 16	 lea	 esi, DWORD PTR [ecx+22]

; 1089 : 		lpObj->ChaosMoney = 8000000;

  003d6	c7 83 18 12 00
	00 00 12 7a 00	 mov	 DWORD PTR [ebx+4632], 8000000 ; 007a1200H

; 1090 : 		ExtraBlessGemCount = BlessGemCount - 4;
; 1091 : 		ExtraSoulGemCount = SoulGemCount - 4;

  003e0	e9 93 00 00 00	 jmp	 $LN44@PlusItemLe
$LN40@PlusItemLe:

; 1092 : 	}
; 1093 : 	else if ( Plus13ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 5 && SoulGemCount == 5 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus14ItemCount == 0)

  003e5	83 bd dc fe ff
	ff 01		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], 1
  003ec	75 41		 jne	 SHORT $LN42@PlusItemLe
  003ee	83 f9 01	 cmp	 ecx, 1
  003f1	75 3c		 jne	 SHORT $LN42@PlusItemLe
  003f3	83 fa 05	 cmp	 edx, 5
  003f6	75 37		 jne	 SHORT $LN42@PlusItemLe
  003f8	3b fa		 cmp	 edi, edx
  003fa	75 33		 jne	 SHORT $LN42@PlusItemLe
  003fc	39 b5 ec fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], esi
  00402	75 2b		 jne	 SHORT $LN42@PlusItemLe
  00404	39 b5 e8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], esi
  0040a	75 23		 jne	 SHORT $LN42@PlusItemLe
  0040c	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], esi
  00412	75 1b		 jne	 SHORT $LN42@PlusItemLe
  00414	39 b5 e0 fe ff
	ff		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], esi
  0041a	75 13		 jne	 SHORT $LN42@PlusItemLe
  0041c	85 c0		 test	 eax, eax
  0041e	75 0f		 jne	 SHORT $LN42@PlusItemLe

; 1094 : 	{
; 1095 : 		MixType = CHAOS_TYPE_UPGRADE_14;

  00420	8d 71 30	 lea	 esi, DWORD PTR [ecx+48]

; 1096 : 		lpObj->ChaosMoney = 10000000;

  00423	c7 83 18 12 00
	00 80 96 98 00	 mov	 DWORD PTR [ebx+4632], 10000000 ; 00989680H

; 1097 : 		ExtraBlessGemCount = BlessGemCount - 5;
; 1098 : 		ExtraSoulGemCount = SoulGemCount - 5;

  0042d	eb 49		 jmp	 SHORT $LN44@PlusItemLe
$LN42@PlusItemLe:

; 1099 : 	}
; 1100 : 	else if ( Plus14ItemCount == 1 && ChaosGemCount == 1 && BlessGemCount == 6 && SoulGemCount == 6 && Plus9ItemCount == 0 && Plus10ItemCount == 0 && Plus11ItemCount == 0 && Plus12ItemCount == 0 && Plus13ItemCount == 0)

  0042f	83 f8 01	 cmp	 eax, 1
  00432	75 44		 jne	 SHORT $LN44@PlusItemLe
  00434	3b c8		 cmp	 ecx, eax
  00436	75 40		 jne	 SHORT $LN44@PlusItemLe
  00438	83 fa 06	 cmp	 edx, 6
  0043b	75 3b		 jne	 SHORT $LN44@PlusItemLe
  0043d	3b fa		 cmp	 edi, edx
  0043f	75 37		 jne	 SHORT $LN44@PlusItemLe
  00441	39 b5 ec fe ff
	ff		 cmp	 DWORD PTR _Plus9ItemCount$1$[ebp], esi
  00447	75 2f		 jne	 SHORT $LN44@PlusItemLe
  00449	39 b5 e8 fe ff
	ff		 cmp	 DWORD PTR _Plus10ItemCount$1$[ebp], esi
  0044f	75 27		 jne	 SHORT $LN44@PlusItemLe
  00451	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _Plus11ItemCount$1$[ebp], esi
  00457	75 1f		 jne	 SHORT $LN44@PlusItemLe
  00459	39 b5 e0 fe ff
	ff		 cmp	 DWORD PTR _Plus12ItemCount$1$[ebp], esi
  0045f	75 17		 jne	 SHORT $LN44@PlusItemLe
  00461	39 b5 dc fe ff
	ff		 cmp	 DWORD PTR _Plus13ItemCount$1$[ebp], esi
  00467	75 0f		 jne	 SHORT $LN44@PlusItemLe

; 1101 : 	{
; 1102 : 		MixType = CHAOS_TYPE_UPGRADE_15;

  00469	be 32 00 00 00	 mov	 esi, 50			; 00000032H

; 1103 : 		lpObj->ChaosMoney = 12000000;

  0046e	c7 83 18 12 00
	00 00 1b b7 00	 mov	 DWORD PTR [ebx+4632], 12000000 ; 00b71b00H
$LN44@PlusItemLe:

; 1104 : 		ExtraBlessGemCount = BlessGemCount - 6;
; 1105 : 		ExtraSoulGemCount = SoulGemCount - 6;
; 1106 : 	}
; 1107 : 
; 1108 : 	if ( MixType != mixType )

  00478	3b 75 0c	 cmp	 esi, DWORD PTR _mixType$[ebp]
  0047b	0f 85 35 fd ff
	ff		 jne	 $LN111@PlusItemLe

; 1109 : 	{
; 1110 : 		MixType = 0;
; 1111 : 	}
; 1112 : 
; 1113 : 	if ( MixType == 0 )

  00481	85 f6		 test	 esi, esi
  00483	0f 84 2d fd ff
	ff		 je	 $LN111@PlusItemLe

; 1116 : 	}
; 1117 : 
; 1118 : 	PMSG_CHAOSMIXRESULT pMsg;
; 1119 : 
; 1120 : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00489	6a 10		 push	 16			; 00000010H
  0048b	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0048e	68 86 00 00 00	 push	 134			; 00000086H
  00493	50		 push	 eax
  00494	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1121 : 	pMsg.Result = CB_ERROR;
; 1122 : 	lpObj->ChaosLock = TRUE;
; 1123 : 	LogPlusItemLevelChaosItem(lpObj, MixType);

  00499	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0049f	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a2	c6 45 e7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  004a6	c7 83 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+4640], 1
  004b0	56		 push	 esi
  004b1	53		 push	 ebx
  004b2	e8 00 00 00 00	 call	 ?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ; CChaosBox::LogPlusItemLevelChaosItem

; 1124 : 	LogAddTD("[PlusItemLevel] Chaos Mix Start");

  004b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BGIGBHFB@?$FLPlusItemLevel?$FN?5Chaos?5Mix?5Start?$AA@
  004bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1125 : 
; 1126 : 	int iChaosTaxMoney = (int)((__int64)lpObj->ChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  004c2	8b b3 18 12 00
	00		 mov	 esi, DWORD PTR [ebx+4632]
  004c8	83 c4 04	 add	 esp, 4
  004cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  004d0	ff 33		 push	 DWORD PTR [ebx]
  004d2	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  004d7	8b c8		 mov	 ecx, eax
  004d9	8b c6		 mov	 eax, esi
  004db	f7 e9		 imul	 ecx
  004dd	6a 00		 push	 0
  004df	6a 64		 push	 100			; 00000064H
  004e1	52		 push	 edx
  004e2	50		 push	 eax
  004e3	e8 00 00 00 00	 call	 __alldiv
  004e8	8b d0		 mov	 edx, eax

; 1127 : 
; 1128 : 	if ( iChaosTaxMoney < 0 )

  004ea	33 c0		 xor	 eax, eax
  004ec	85 d2		 test	 edx, edx
  004ee	0f 48 d0	 cmovs	 edx, eax
  004f1	01 93 18 12 00
	00		 add	 DWORD PTR [ebx+4632], edx

; 1129 : 	{
; 1130 : 		iChaosTaxMoney = 0;
; 1131 : 	}
; 1132 : 
; 1133 : 	lpObj->ChaosMoney += iChaosTaxMoney;
; 1134 : 
; 1135 : 	if ( lpObj->ChaosMoney < 0 )

  004f7	79 06		 jns	 SHORT $LN48@PlusItemLe

; 1136 : 	{
; 1137 : 		lpObj->ChaosMoney = 0;

  004f9	89 83 18 12 00
	00		 mov	 DWORD PTR [ebx+4632], eax
$LN48@PlusItemLe:

; 1138 : 	}
; 1139 : 
; 1140 : 	if ( lpObj->Money < lpObj->ChaosMoney )

  004ff	8b 8b 18 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4632]
  00505	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  0050b	3b c1		 cmp	 eax, ecx
  0050d	7d 4e		 jge	 SHORT $LN49@PlusItemLe

; 1141 : 	{
; 1142 : 		LogAddTD("[PlusItemLevel] [%s][%s] CBMix Not Enough Money [%d] need zen [%d]",

  0050f	51		 push	 ecx
  00510	50		 push	 eax
  00511	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00514	50		 push	 eax
  00515	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00518	50		 push	 eax
  00519	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@HJNGDDFB@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5N@
  0051e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1143 : 			lpObj->AccountID, lpObj->Name, lpObj->Money, lpObj->ChaosMoney);
; 1144 : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 1145 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00524	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00528	50		 push	 eax
  00529	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0052c	c6 45 e7 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00530	50		 push	 eax
  00531	ff 33		 push	 DWORD PTR [ebx]
  00533	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
$LN122@PlusItemLe:
  00538	83 c4 20	 add	 esp, 32			; 00000020H
$LN96@PlusItemLe:

; 1411 : }

  0053b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0053e	b8 01 00 00 00	 mov	 eax, 1
  00543	5f		 pop	 edi
  00544	5e		 pop	 esi
  00545	c7 83 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4640], 0
  0054f	33 cd		 xor	 ecx, ebp
  00551	5b		 pop	 ebx
  00552	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00557	8b e5		 mov	 esp, ebp
  00559	5d		 pop	 ebp
  0055a	c2 08 00	 ret	 8
$LN49@PlusItemLe:

; 1146 : 		lpObj->ChaosLock = FALSE;
; 1147 : 		
; 1148 : 		return TRUE;
; 1149 : 	}
; 1150 : 
; 1151 : 	lpObj->Money -= lpObj->ChaosMoney;

  0055d	2b c1		 sub	 eax, ecx

; 1152 : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  0055f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00564	52		 push	 edx
  00565	89 83 cc 00 00
	00		 mov	 DWORD PTR [ebx+204], eax
  0056b	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 1153 : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  00570	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  00576	ff 33		 push	 DWORD PTR [ebx]
  00578	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 1154 : 
; 1155 : 	BYTE btRateType = 0;
; 1156 : 
; 1157 : 	if( lpObj->pChaosBox[PlusItemPos].IsExtItem() == TRUE ||
; 1158 : 		lpObj->pChaosBox[PlusItemPos].IsSetItem() == TRUE ||

  0057d	69 bd d8 fe ff
	ff d4 00 00 00	 imul	 edi, DWORD PTR _PlusItemPos$1$[ebp], 212
  00587	83 c4 08	 add	 esp, 8
  0058a	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00590	03 cf		 add	 ecx, edi
  00592	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00597	83 f8 01	 cmp	 eax, 1
  0059a	74 31		 je	 SHORT $LN52@PlusItemLe
  0059c	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  005a2	03 cf		 add	 ecx, edi
  005a4	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  005a9	83 f8 01	 cmp	 eax, 1
  005ac	74 1f		 je	 SHORT $LN52@PlusItemLe
  005ae	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  005b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kItemSystemFor380@@3VCItemSystemFor380@@A ; g_kItemSystemFor380
  005b9	03 c7		 add	 eax, edi
  005bb	50		 push	 eax
  005bc	e8 00 00 00 00	 call	 ?Is380Item@CItemSystemFor380@@QAEHPBVCItem@@@Z ; CItemSystemFor380::Is380Item

; 1162 : 	}
; 1163 : 	else
; 1164 : 	{
; 1165 : 		btRateType = 1;

  005c1	c6 85 f3 fe ff
	ff 01		 mov	 BYTE PTR _btRateType$1$[ebp], 1
  005c8	83 f8 01	 cmp	 eax, 1
  005cb	75 07		 jne	 SHORT $LN51@PlusItemLe
$LN52@PlusItemLe:

; 1159 : 		g_kItemSystemFor380.Is380Item(&lpObj->pChaosBox[PlusItemPos]) == TRUE )
; 1160 : 	{
; 1161 : 		btRateType = 2;

  005cd	c6 85 f3 fe ff
	ff 02		 mov	 BYTE PTR _btRateType$1$[ebp], 2
$LN51@PlusItemLe:

; 1166 : 	}
; 1167 : 
; 1168 : 	if( g_SocketItem.CheckSocketOption(&lpObj->pChaosBox[PlusItemPos]) == TRUE )

  005d4	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  005da	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  005df	03 c7		 add	 eax, edi
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 ?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::CheckSocketOption
  005e7	0f b6 8d f3 fe
	ff ff		 movzx	 ecx, BYTE PTR _btRateType$1$[ebp]
  005ee	3c 01		 cmp	 al, 1
  005f0	ba 03 00 00 00	 mov	 edx, 3

; 1169 : 	{
; 1170 : 		btRateType = 3;
; 1171 : 	}
; 1172 : 
; 1173 : 	if( ( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,0) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,6) ) ||
; 1174 : 		( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,36) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,43) ) ||
; 1175 : 		( lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,262) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,267) ) || 

  005f5	be 00 18 00 00	 mov	 esi, 6144		; 00001800H
  005fa	0f 44 ca	 cmove	 ecx, edx
  005fd	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  00603	0f b7 44 17 06	 movzx	 eax, WORD PTR [edi+edx+6]
  00608	66 3b c6	 cmp	 ax, si
  0060b	7c 0a		 jl	 SHORT $LN56@PlusItemLe
  0060d	be 06 18 00 00	 mov	 esi, 6150		; 00001806H
  00612	66 3b c6	 cmp	 ax, si
  00615	7e 46		 jle	 SHORT $LN59@PlusItemLe
$LN56@PlusItemLe:
  00617	be 24 18 00 00	 mov	 esi, 6180		; 00001824H
  0061c	66 3b c6	 cmp	 ax, si
  0061f	7c 0a		 jl	 SHORT $LN57@PlusItemLe
  00621	be 2b 18 00 00	 mov	 esi, 6187		; 0000182bH
  00626	66 3b c6	 cmp	 ax, si
  00629	7e 32		 jle	 SHORT $LN59@PlusItemLe
$LN57@PlusItemLe:
  0062b	be 06 19 00 00	 mov	 esi, 6406		; 00001906H
  00630	66 3b c6	 cmp	 ax, si
  00633	7c 0a		 jl	 SHORT $LN58@PlusItemLe
  00635	be 0b 19 00 00	 mov	 esi, 6411		; 0000190bH
  0063a	66 3b c6	 cmp	 ax, si
  0063d	7e 1e		 jle	 SHORT $LN59@PlusItemLe
$LN58@PlusItemLe:
  0063f	be 1e 1a 00 00	 mov	 esi, 6686		; 00001a1eH
  00644	66 3b c6	 cmp	 ax, si
  00647	74 14		 je	 SHORT $LN59@PlusItemLe
  00649	be 31 18 00 00	 mov	 esi, 6193		; 00001831H
  0064e	66 3b c6	 cmp	 ax, si
  00651	74 0a		 je	 SHORT $LN59@PlusItemLe
  00653	be 32 18 00 00	 mov	 esi, 6194		; 00001832H
  00658	66 3b c6	 cmp	 ax, si
  0065b	75 02		 jne	 SHORT $LN54@PlusItemLe
$LN59@PlusItemLe:

; 1176 : 		( lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(13,30) || 
; 1177 : 		  lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(12,49) ||
; 1178 : 		  lpObj->pChaosBox[PlusItemPos].m_Type == ITEMGET(12,50) )
; 1179 : #if (CUSTOM_WINGS == 1)
; 1180 : 		|| lpObj->pChaosBox[PlusItemPos].m_Type >= ITEMGET(12,440) && lpObj->pChaosBox[PlusItemPos].m_Type <= ITEMGET(12,445) 
; 1181 : #endif
; 1182 : 		)
; 1183 : 	{
; 1184 : 		btRateType = 1;

  0065d	b1 01		 mov	 cl, 1
$LN54@PlusItemLe:

; 1185 : 	}
; 1186 : 
; 1187 : #if (__CUSTOM__ == 1)
; 1188 : 	
; 1189 : 	if( lpObj->pChaosBox[PlusItemPos].m_Level == 9 || lpObj->pChaosBox[PlusItemPos].m_Level == 10 )

  0065f	0f b7 44 17 08	 movzx	 eax, WORD PTR [edi+edx+8]
  00664	66 83 f8 09	 cmp	 ax, 9
  00668	74 72		 je	 SHORT $LN62@PlusItemLe
  0066a	66 83 f8 0a	 cmp	 ax, 10			; 0000000aH
  0066e	74 6c		 je	 SHORT $LN62@PlusItemLe

; 1202 : 		}
; 1203 : 	}
; 1204 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 11 || lpObj->pChaosBox[PlusItemPos].m_Level == 12 )

  00670	66 83 f8 0b	 cmp	 ax, 11			; 0000000bH
  00674	74 42		 je	 SHORT $LN70@PlusItemLe
  00676	66 83 f8 0c	 cmp	 ax, 12			; 0000000cH
  0067a	74 3c		 je	 SHORT $LN70@PlusItemLe

; 1219 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 13 || lpObj->pChaosBox[PlusItemPos].m_Level == 14 )

  0067c	66 83 f8 0d	 cmp	 ax, 13			; 0000000dH
  00680	74 12		 je	 SHORT $LN78@PlusItemLe
  00682	66 83 f8 0e	 cmp	 ax, 14			; 0000000eH
  00686	74 0c		 je	 SHORT $LN78@PlusItemLe

; 1235 : 	{
; 1236 : 		lpObj->ChaosSuccessRate = 45;

  00688	c7 83 1c 12 00
	00 2d 00 00 00	 mov	 DWORD PTR [ebx+4636], 45 ; 0000002dH
  00692	eb 70		 jmp	 SHORT $LN67@PlusItemLe
$LN78@PlusItemLe:

; 1220 : 	{
; 1221 : 		if( btRateType == 1 )

  00694	80 f9 01	 cmp	 cl, 1
  00697	75 07		 jne	 SHORT $LN79@PlusItemLe

; 1222 : 		{
; 1223 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_3;

  00699	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_3@@3HA ; gc_ChaosMixPlusItemLevel_1_3
  0069e	eb 5e		 jmp	 SHORT $LN119@PlusItemLe
$LN79@PlusItemLe:

; 1224 : 		}
; 1225 : 		else if( btRateType == 2 )

  006a0	80 f9 02	 cmp	 cl, 2
  006a3	75 07		 jne	 SHORT $LN81@PlusItemLe

; 1226 : 		{
; 1227 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_3;

  006a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_3@@3HA ; gc_ChaosMixPlusItemLevel_2_3
  006aa	eb 52		 jmp	 SHORT $LN119@PlusItemLe
$LN81@PlusItemLe:

; 1228 : 		}
; 1229 : 		else if( btRateType == 3 )

  006ac	80 f9 03	 cmp	 cl, 3
  006af	75 53		 jne	 SHORT $LN67@PlusItemLe

; 1230 : 		{
; 1231 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_3;

  006b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_3@@3HA ; gc_ChaosMixPlusItemLevel_3_3

; 1232 : 		}
; 1233 : 	}
; 1234 : 	else

  006b6	eb 46		 jmp	 SHORT $LN119@PlusItemLe
$LN70@PlusItemLe:

; 1205 : 	{
; 1206 : 		if( btRateType == 1 )

  006b8	80 f9 01	 cmp	 cl, 1
  006bb	75 07		 jne	 SHORT $LN71@PlusItemLe

; 1207 : 		{
; 1208 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_2;

  006bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_2@@3HA ; gc_ChaosMixPlusItemLevel_1_2
  006c2	eb 3a		 jmp	 SHORT $LN119@PlusItemLe
$LN71@PlusItemLe:

; 1209 : 		}
; 1210 : 		else if( btRateType == 2 )

  006c4	80 f9 02	 cmp	 cl, 2
  006c7	75 07		 jne	 SHORT $LN73@PlusItemLe

; 1211 : 		{
; 1212 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_2;

  006c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_2@@3HA ; gc_ChaosMixPlusItemLevel_2_2
  006ce	eb 2e		 jmp	 SHORT $LN119@PlusItemLe
$LN73@PlusItemLe:

; 1213 : 		}
; 1214 : 		else if( btRateType == 3 )

  006d0	80 f9 03	 cmp	 cl, 3
  006d3	75 2f		 jne	 SHORT $LN67@PlusItemLe

; 1215 : 		{
; 1216 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_2;

  006d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_2@@3HA ; gc_ChaosMixPlusItemLevel_3_2

; 1217 : 		}
; 1218 : 	}

  006da	eb 22		 jmp	 SHORT $LN119@PlusItemLe
$LN62@PlusItemLe:

; 1190 : 	{
; 1191 : 		if( btRateType == 1 )

  006dc	80 f9 01	 cmp	 cl, 1
  006df	75 07		 jne	 SHORT $LN63@PlusItemLe

; 1192 : 		{
; 1193 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_1_1;

  006e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_1_1@@3HA ; gc_ChaosMixPlusItemLevel_1_1
  006e6	eb 16		 jmp	 SHORT $LN119@PlusItemLe
$LN63@PlusItemLe:

; 1194 : 		}
; 1195 : 		else if( btRateType == 2 )

  006e8	80 f9 02	 cmp	 cl, 2
  006eb	75 07		 jne	 SHORT $LN65@PlusItemLe

; 1196 : 		{
; 1197 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_2_1;

  006ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_2_1@@3HA ; gc_ChaosMixPlusItemLevel_2_1
  006f2	eb 0a		 jmp	 SHORT $LN119@PlusItemLe
$LN65@PlusItemLe:

; 1198 : 		}
; 1199 : 		else if( btRateType == 3 )

  006f4	80 f9 03	 cmp	 cl, 3
  006f7	75 0b		 jne	 SHORT $LN67@PlusItemLe

; 1200 : 		{
; 1201 : 			lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_3_1;

  006f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_3_1@@3HA ; gc_ChaosMixPlusItemLevel_3_1
$LN119@PlusItemLe:
  006fe	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
$LN67@PlusItemLe:

; 1237 : 	}
; 1238 : 
; 1239 : 	if( lpObj->pChaosBox[PlusItemPos].m_Option2 )

  00704	80 bc 17 91 00
	00 00 00	 cmp	 BYTE PTR [edi+edx+145], 0
  0070c	74 0b		 je	 SHORT $LN84@PlusItemLe

; 1240 : 	{
; 1241 : 		lpObj->ChaosSuccessRate += gc_ChaosMixPlusItemLevel_Luck;

  0070e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_Luck@@3HA ; gc_ChaosMixPlusItemLevel_Luck
  00713	01 83 1c 12 00
	00		 add	 DWORD PTR [ebx+4636], eax
$LN84@PlusItemLe:

; 1242 : 	}
; 1243 : 
; 1244 : 	if( lpObj->ChaosSuccessRate > gc_ChaosMixPlusItemLevel_Max )

  00719	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gc_ChaosMixPlusItemLevel_Max@@3HA ; gc_ChaosMixPlusItemLevel_Max
  0071e	39 83 1c 12 00
	00		 cmp	 DWORD PTR [ebx+4636], eax
  00724	7e 06		 jle	 SHORT $LN85@PlusItemLe

; 1245 : 	{
; 1246 : 		lpObj->ChaosSuccessRate = gc_ChaosMixPlusItemLevel_Max;

  00726	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
$LN85@PlusItemLe:

; 1247 : 	}
; 1248 : 
; 1249 : #else
; 1250 : 	
; 1251 : 	if( lpObj->pChaosBox[PlusItemPos].m_Level == 9 || lpObj->pChaosBox[PlusItemPos].m_Level == 10 )
; 1252 : 	{
; 1253 : 		if( btRateType == 1 )
; 1254 : 		{
; 1255 : 			lpObj->ChaosSuccessRate = 60;
; 1256 : 		}
; 1257 : 		else if( btRateType == 2 )
; 1258 : 		{
; 1259 : 			lpObj->ChaosSuccessRate = 50;
; 1260 : 		}
; 1261 : 		else if( btRateType == 3 )
; 1262 : 		{
; 1263 : 			lpObj->ChaosSuccessRate = 40;
; 1264 : 		}
; 1265 : 	}
; 1266 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 11 || lpObj->pChaosBox[PlusItemPos].m_Level == 12 )
; 1267 : 	{
; 1268 : 		if( btRateType == 1 )
; 1269 : 		{
; 1270 : 			lpObj->ChaosSuccessRate = 55;
; 1271 : 		}
; 1272 : 		else if( btRateType == 2 )
; 1273 : 		{
; 1274 : 			lpObj->ChaosSuccessRate = 45;
; 1275 : 		}
; 1276 : 		else if( btRateType == 3 )
; 1277 : 		{
; 1278 : 			lpObj->ChaosSuccessRate = 35;
; 1279 : 		}
; 1280 : 	}
; 1281 : 	else if( lpObj->pChaosBox[PlusItemPos].m_Level == 13 || lpObj->pChaosBox[PlusItemPos].m_Level == 14 )
; 1282 : 	{
; 1283 : 		if( btRateType == 1 )
; 1284 : 		{
; 1285 : 			lpObj->ChaosSuccessRate = 20;
; 1286 : 		}
; 1287 : 		else if( btRateType == 2 )
; 1288 : 		{
; 1289 : 			lpObj->ChaosSuccessRate = 10;
; 1290 : 		}
; 1291 : 		else if( btRateType == 3 )
; 1292 : 		{
; 1293 : 			lpObj->ChaosSuccessRate = 5;
; 1294 : 		}
; 1295 : 	}
; 1296 : 	else
; 1297 : 	{
; 1298 : 		lpObj->ChaosSuccessRate = 45;
; 1299 : 	}
; 1300 : 
; 1301 : 	if( lpObj->pChaosBox[PlusItemPos].m_Option2 )
; 1302 : 	{
; 1303 : 		lpObj->ChaosSuccessRate += 20;
; 1304 : 	}
; 1305 : 
; 1306 : 	if( lpObj->ChaosSuccessRate > 75 )
; 1307 : 	{
; 1308 : 		lpObj->ChaosSuccessRate = 75;
; 1309 : 	}
; 1310 : 
; 1311 : #endif
; 1312 : 
; 1313 : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0072c	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00732	01 83 1c 12 00
	00		 add	 DWORD PTR [ebx+4636], eax

; 1314 : 
; 1315 : 	if ( (rand()%100) < lpObj->ChaosSuccessRate )

  00738	e8 00 00 00 00	 call	 _rand
  0073d	99		 cdq
  0073e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00743	f7 f9		 idiv	 ecx

; 1316 : 	{
; 1317 : 		lpObj->pChaosBox[PlusItemPos].m_Level++;

  00745	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0074b	3b 93 1c 12 00
	00		 cmp	 edx, DWORD PTR [ebx+4636]
  00751	0f 8d 32 02 00
	00		 jge	 $LN86@PlusItemLe
  00757	66 ff 44 07 08	 inc	 WORD PTR [edi+eax+8]

; 1318 : 		pMsg.Result = CB_SUCCESS;
; 1319 : 
; 1320 : 		CItem Item;

  0075c	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$2[ebp]
  00762	c6 45 e7 01	 mov	 BYTE PTR _pMsg$[ebp+3], 1
  00766	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 1321 : 
; 1322 : 		float Dur = (float)ItemGetDurability(lpObj->pChaosBox[PlusItemPos].m_Type, lpObj->pChaosBox[PlusItemPos].m_Level,

  0076b	8b b3 10 12 00
	00		 mov	 esi, DWORD PTR [ebx+4624]
  00771	8b ce		 mov	 ecx, esi
  00773	03 cf		 add	 ecx, edi
  00775	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  0077a	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00780	50		 push	 eax
  00781	03 cf		 add	 ecx, edi
  00783	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  00788	50		 push	 eax
  00789	0f bf 44 37 08	 movsx	 eax, WORD PTR [edi+esi+8]
  0078e	50		 push	 eax
  0078f	0f bf 44 37 06	 movsx	 eax, WORD PTR [edi+esi+6]
  00794	50		 push	 eax
  00795	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability

; 1323 : 			lpObj->pChaosBox[PlusItemPos].IsExtItem(), lpObj->pChaosBox[PlusItemPos].IsSetItem());
; 1324 : 
; 1325 : 		Item.m_Level = lpObj->pChaosBox[PlusItemPos].m_Level;

  0079a	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  007a0	83 c4 10	 add	 esp, 16			; 00000010H
  007a3	66 0f 6e c8	 movd	 xmm1, eax
  007a7	66 8b 44 0f 08	 mov	 ax, WORD PTR [edi+ecx+8]
  007ac	0f 5b c9	 cvtdq2ps xmm1, xmm1
  007af	66 89 85 08 ff
	ff ff		 mov	 WORD PTR _Item$2[ebp+8], ax

; 1326 : 		Item.m_Durability = Dur * lpObj->pChaosBox[PlusItemPos].m_Durability / lpObj->pChaosBox[PlusItemPos].m_BaseDurability;

  007b6	f3 0f 10 44 0f
	24		 movss	 xmm0, DWORD PTR [edi+ecx+36]
  007bc	f3 0f 59 c1	 mulss	 xmm0, xmm1
  007c0	f3 0f 5e 44 0f
	2c		 divss	 xmm0, DWORD PTR [edi+ecx+44]
  007c6	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _Item$2[ebp+36], xmm0

; 1327 : 		Item.m_JewelOfHarmonyOption = lpObj->pChaosBox[PlusItemPos].m_JewelOfHarmonyOption;

  007ce	8a 84 0f c0 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+192]
  007d5	88 45 c0	 mov	 BYTE PTR _Item$2[ebp+192], al

; 1328 : 		Item.m_bLOCKED = lpObj->pChaosBox[PlusItemPos].m_bLOCKED;

  007d8	8a 84 0f d1 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+209]
  007df	88 45 d1	 mov	 BYTE PTR _Item$2[ebp+209], al

; 1329 : 
; 1330 : 		BYTE SocketOptions[MAX_SOCKET_COUNT];
; 1331 : 		BYTE SocketBonus;
; 1332 : 
; 1333 : 		if( g_SocketItem.IsSocketItem(lpObj->pChaosBox[PlusItemPos].m_Type) )

  007e2	0f bf 44 0f 06	 movsx	 eax, WORD PTR [edi+ecx+6]
  007e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  007ec	50		 push	 eax
  007ed	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  007f2	84 c0		 test	 al, al
  007f4	74 20		 je	 SHORT $LN88@PlusItemLe

; 1334 : 		{
; 1335 : 			g_SocketItem.GetItemOptions(&lpObj->pChaosBox[PlusItemPos],&SocketOptions[0],&SocketBonus);

  007f6	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _SocketBonus$1[ebp]
  007fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00801	50		 push	 eax
  00802	8d 45 f4	 lea	 eax, DWORD PTR _SocketOptions$5[ebp]
  00805	50		 push	 eax
  00806	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0080c	03 c7		 add	 eax, edi
  0080e	50		 push	 eax
  0080f	e8 00 00 00 00	 call	 ?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z ; CSocketItems::GetItemOptions
  00814	eb 5f		 jmp	 SHORT $LN104@PlusItemLe
$LN88@PlusItemLe:

; 1336 : 		}
; 1337 : 		else if( g_ElementalSystem.IsPentagram(lpObj->pChaosBox[PlusItemPos].m_Type) )

  00816	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0081c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  00821	0f bf 44 07 06	 movsx	 eax, WORD PTR [edi+eax+6]
  00826	50		 push	 eax
  00827	e8 00 00 00 00	 call	 ?IsPentagram@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsPentagram
  0082c	85 c0		 test	 eax, eax
  0082e	74 45		 je	 SHORT $LN104@PlusItemLe

; 1338 : 		{
; 1339 : 			SocketBonus = lpObj->pChaosBox[PlusItemPos].m_SocketBonus;

  00830	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00836	8a 84 0f c7 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+199]
  0083d	88 85 cc fe ff
	ff		 mov	 BYTE PTR _SocketBonus$1[ebp], al

; 1340 : 			for(int i = 0; i < 5; i++)	{
; 1341 : 				SocketOptions[i] = lpObj->pChaosBox[PlusItemPos].m_SocketOption[i];

  00843	8a 84 0f c8 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+200]
  0084a	88 45 f4	 mov	 BYTE PTR _SocketOptions$5[ebp], al
  0084d	8a 84 0f c9 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+201]
  00854	88 45 f5	 mov	 BYTE PTR _SocketOptions$5[ebp+1], al
  00857	8a 84 0f ca 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+202]
  0085e	88 45 f6	 mov	 BYTE PTR _SocketOptions$5[ebp+2], al
  00861	8a 84 0f cb 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+203]
  00868	88 45 f7	 mov	 BYTE PTR _SocketOptions$5[ebp+3], al
  0086b	8a 84 0f cc 00
	00 00		 mov	 al, BYTE PTR [edi+ecx+204]
  00872	88 45 f8	 mov	 BYTE PTR _SocketOptions$5[ebp+4], al
$LN104@PlusItemLe:

; 1342 : 			}
; 1343 : 		}
; 1344 : 
; 1345 : 		Item.Convert(lpObj->pChaosBox[PlusItemPos].m_Type, lpObj->pChaosBox[PlusItemPos].m_Option1, lpObj->pChaosBox[PlusItemPos].m_Option2,

  00875	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0087b	8d 45 f4	 lea	 eax, DWORD PTR _SocketOptions$5[ebp]
  0087e	6a 03		 push	 3
  00880	ff b5 cc fe ff
	ff		 push	 DWORD PTR _SocketBonus$1[ebp]
  00886	50		 push	 eax
  00887	0f b6 84 0f c6
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+198]
  0088f	50		 push	 eax
  00890	0f b6 84 0f aa
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+170]
  00898	50		 push	 eax
  00899	0f b6 84 0f 93
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+147]
  008a1	50		 push	 eax
  008a2	0f b6 84 0f 92
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+146]
  008aa	50		 push	 eax
  008ab	0f b6 84 0f 91
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+145]
  008b3	50		 push	 eax
  008b4	0f b6 84 0f 90
	00 00 00	 movzx	 eax, BYTE PTR [edi+ecx+144]
  008bc	50		 push	 eax
  008bd	0f bf 44 0f 06	 movsx	 eax, WORD PTR [edi+ecx+6]
  008c2	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _Item$2[ebp]
  008c8	50		 push	 eax
  008c9	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 1346 : 			lpObj->pChaosBox[PlusItemPos].m_Option3, lpObj->pChaosBox[PlusItemPos].m_NewOption, 
; 1347 : 			lpObj->pChaosBox[PlusItemPos].m_SetOption, lpObj->pChaosBox[PlusItemPos].m_ItemOptionEx, SocketOptions, SocketBonus, CURRENT_DB_VERSION);
; 1348 : 
; 1349 : 		Item.m_Number = lpObj->pChaosBox[PlusItemPos].m_Number;

  008ce	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]

; 1350 : 
; 1351 : 		ItemByteConvert(pMsg.ItemInfo, Item);

  008d4	8d b5 00 ff ff
	ff		 lea	 esi, DWORD PTR _Item$2[ebp]
  008da	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  008e0	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  008e5	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  008e8	8b fc		 mov	 edi, esp
  008ea	89 85 00 ff ff
	ff		 mov	 DWORD PTR _Item$2[ebp], eax
  008f0	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp+4]
  008f3	f3 a5		 rep movsd
  008f5	50		 push	 eax
  008f6	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 1352 : 		ChaosBoxInit(lpObj);

  008fb	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00901	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00907	53		 push	 ebx
  00908	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 1353 : 		::gObjChaosBoxInsertItemPos(lpObj->m_Index, Item, 0, -1);

  0090d	6a ff		 push	 -1
  0090f	6a 00		 push	 0
  00911	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00917	8d b5 00 ff ff
	ff		 lea	 esi, DWORD PTR _Item$2[ebp]
  0091d	8b fc		 mov	 edi, esp
  0091f	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00924	f3 a5		 rep movsd
  00926	ff 33		 push	 DWORD PTR [ebx]
  00928	e8 00 00 00 00	 call	 ?gObjChaosBoxInsertItemPos@@YAEHVCItem@@HH@Z ; gObjChaosBoxInsertItemPos

; 1354 : 		gObjChaosItemSet(lpObj->m_Index, 0, 1);

  0092d	6a 01		 push	 1
  0092f	6a 00		 push	 0
  00931	ff 33		 push	 DWORD PTR [ebx]
  00933	e8 00 00 00 00	 call	 ?gObjChaosItemSet@@YAXHHE@Z ; gObjChaosItemSet

; 1355 : 
; 1356 : 		DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  00938	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0093c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00942	50		 push	 eax
  00943	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00946	50		 push	 eax
  00947	ff 33		 push	 DWORD PTR [ebx]
  00949	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1357 : 
; 1358 : 		if ( btItemLuckValue )
; 1359 : 		{
; 1360 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], CharmRate : %d",
; 1361 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate+5, lpObj->Money,
; 1362 : 				lpObj->ChaosMoney, Item.m_Level, iCharmOfLuckCount);
; 1363 : 		}
; 1364 : 		else
; 1365 : 		{
; 1366 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Success %d Money : %d-%d [%d], CharmRate : %d",

  0094e	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00954	0f bf 85 08 ff
	ff ff		 movsx	 eax, WORD PTR _Item$2[ebp+8]
  0095b	50		 push	 eax
  0095c	ff b3 18 12 00
	00		 push	 DWORD PTR [ebx+4632]
  00962	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00965	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  0096b	ff b3 1c 12 00
	00		 push	 DWORD PTR [ebx+4636]
  00971	50		 push	 eax
  00972	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00975	50		 push	 eax
  00976	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@NDGFLPHI@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5S@
  0097b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00981	83 c4 2c	 add	 esp, 44			; 0000002cH

; 1367 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 1368 : 				lpObj->ChaosMoney, Item.m_Level, iCharmOfLuckCount);
; 1369 : 		}
; 1370 : 
; 1371 : #if( __4GAMERS__ == 1 )
; 1372 : 		g_Achievements.GD_UpdateMixData(lpObj, true);
; 1373 : #endif
; 1374 : 	}
; 1375 : 	else

  00984	e9 b2 fb ff ff	 jmp	 $LN96@PlusItemLe
$LN86@PlusItemLe:

; 1376 : 	{
; 1377 : #if( __4GAMERS__ == 1 )
; 1378 : 		g_Achievements.GD_UpdateMixData(lpObj, false);
; 1379 : #endif
; 1380 : 		int FailLevel = lpObj->pChaosBox[PlusItemPos].m_Level+1;

  00989	0f bf 74 07 08	 movsx	 esi, WORD PTR [edi+eax+8]

; 1381 : 
; 1382 : 		if( iChristmasItem != 0 )
; 1383 : 		{
; 1384 : 			ChaosBoxSpecialItemDown(lpObj);

  0098e	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00994	46		 inc	 esi
  00995	83 7d f4 00	 cmp	 DWORD PTR _iChristmasItem$1$[ebp], 0
  00999	53		 push	 ebx
  0099a	74 07		 je	 SHORT $LN93@PlusItemLe
  0099c	e8 00 00 00 00	 call	 ?ChaosBoxSpecialItemDown@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxSpecialItemDown

; 1385 : 			GCUserChaosBoxSend(lpObj, 0);
; 1386 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);
; 1387 : 		}
; 1388 : 		else

  009a1	eb 05		 jmp	 SHORT $LN120@PlusItemLe
$LN93@PlusItemLe:

; 1389 : 		{
; 1390 : 			ChaosBoxInit(lpObj);

  009a3	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit
$LN120@PlusItemLe:

; 1391 : 			GCUserChaosBoxSend(lpObj, 0);

  009a8	6a 00		 push	 0
  009aa	53		 push	 ebx
  009ab	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 1392 : 			DataSend(lpObj->m_Index, (BYTE *)&pMsg, pMsg.h.size);

  009b0	0f b6 45 e5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  009b4	50		 push	 eax
  009b5	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  009b8	50		 push	 eax
  009b9	ff 33		 push	 DWORD PTR [ebx]
  009bb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  009c0	83 c4 14	 add	 esp, 20			; 00000014H

; 1393 : 		}
; 1394 : 
; 1395 : 		if ( btItemLuckValue )
; 1396 : 		{
; 1397 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], CharmRate : %d",
; 1398 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate+5, lpObj->Money,
; 1399 : 				lpObj->ChaosMoney, FailLevel, iCharmOfLuckCount);
; 1400 : 		}
; 1401 : 		else
; 1402 : 		{
; 1403 : 			LogAddTD("[PlusItemLevel] [%s][%s] CBMix Fail %d Money : %d-%d [%d], CharmRate : %d",

  009c3	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  009c6	ff b5 d0 fe ff
	ff		 push	 DWORD PTR _iCharmOfLuckCount$1$[ebp]
  009cc	56		 push	 esi
  009cd	ff b3 18 12 00
	00		 push	 DWORD PTR [ebx+4632]
  009d3	ff b3 cc 00 00
	00		 push	 DWORD PTR [ebx+204]
  009d9	ff b3 1c 12 00
	00		 push	 DWORD PTR [ebx+4636]
  009df	50		 push	 eax
  009e0	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  009e3	50		 push	 eax
  009e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@JJBHLEGP@?$FLPlusItemLevel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5F@
  009e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1404 : 				lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate, lpObj->Money,
; 1405 : 				lpObj->ChaosMoney, FailLevel, iCharmOfLuckCount);
; 1406 : 		}
; 1407 : 	}
; 1408 : 
; 1409 : 	lpObj->ChaosLock = FALSE;
; 1410 : return true;

  009ef	e9 44 fb ff ff	 jmp	 $LN122@PlusItemLe
?PlusItemLevelChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CChaosBox::PlusItemLevelChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_sLogType$GSCopy$1$ = -20				; size = 4
_lpObj$GSCopy$1$ = -16					; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_sLogType$ = 12						; size = 4
?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC ; CChaosBox::LogChaosItem, COMDAT
; _this$ = ecx

; 920  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _sLogType$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 921  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 922  : 
; 923  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00018	33 db		 xor	 ebx, ebx
  0001a	57		 push	 edi
  0001b	89 75 f0	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], esi
  0001e	33 ff		 xor	 edi, edi
  00020	89 45 ec	 mov	 DWORD PTR _sLogType$GSCopy$1$[ebp], eax
$LL4@LogChaosIt:

; 924  : 	{
; 925  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00023	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00029	03 cf		 add	 ecx, edi
  0002b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00030	83 f8 01	 cmp	 eax, 1
  00033	0f 85 f6 00 00
	00		 jne	 $LN2@LogChaosIt

; 926  : 		{
; 927  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  00039	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0003f	03 c7		 add	 eax, edi
  00041	50		 push	 eax
  00042	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 928  : 
; 929  : 			LogAddTD("[%s] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380:[%d] HO:[%d,%d] Socket[%d,%d,%d,%d,%d]",

  0004b	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00051	83 c4 08	 add	 esp, 8
  00054	8b b6 10 12 00
	00		 mov	 esi, DWORD PTR [esi+4624]
  0005a	03 cf		 add	 ecx, edi
  0005c	03 f7		 add	 esi, edi
  0005e	0f b6 81 cc 00
	00 00		 movzx	 eax, BYTE PTR [ecx+204]
  00065	50		 push	 eax
  00066	0f b6 81 cb 00
	00 00		 movzx	 eax, BYTE PTR [ecx+203]
  0006d	50		 push	 eax
  0006e	0f b6 81 ca 00
	00 00		 movzx	 eax, BYTE PTR [ecx+202]
  00075	50		 push	 eax
  00076	0f b6 81 c9 00
	00 00		 movzx	 eax, BYTE PTR [ecx+201]
  0007d	50		 push	 eax
  0007e	0f b6 81 c8 00
	00 00		 movzx	 eax, BYTE PTR [ecx+200]
  00085	50		 push	 eax
  00086	51		 push	 ecx
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  0008c	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  00091	0f b6 c0	 movzx	 eax, al
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  00099	50		 push	 eax
  0009a	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  0009d	8b 80 10 12 00
	00		 mov	 eax, DWORD PTR [eax+4624]
  000a3	03 c7		 add	 eax, edi
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	8b ce		 mov	 ecx, esi
  000b0	50		 push	 eax
  000b1	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  000b8	c1 e8 07	 shr	 eax, 7
  000bb	50		 push	 eax
  000bc	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  000c3	50		 push	 eax
  000c4	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  000c8	50		 push	 eax
  000c9	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  000cd	50		 push	 eax
  000ce	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  000d2	50		 push	 eax
  000d3	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  000d7	50		 push	 eax
  000d8	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  000dc	50		 push	 eax
  000dd	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  000e1	50		 push	 eax
  000e2	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  000e6	50		 push	 eax
  000e7	f3 0f 2c 46 24	 cvttss2si eax, DWORD PTR [esi+36]
  000ec	50		 push	 eax
  000ed	ff 36		 push	 DWORD PTR [esi]
  000ef	0f b6 86 92 00
	00 00		 movzx	 eax, BYTE PTR [esi+146]
  000f6	50		 push	 eax
  000f7	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  000fe	50		 push	 eax
  000ff	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  00106	50		 push	 eax
  00107	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00111	8b 75 f0	 mov	 esi, DWORD PTR _lpObj$GSCopy$1$[ebp]
  00114	50		 push	 eax
  00115	53		 push	 ebx
  00116	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00119	50		 push	 eax
  0011a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0011d	50		 push	 eax
  0011e	ff 75 ec	 push	 DWORD PTR _sLogType$GSCopy$1$[ebp]
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0IF@FONACAKJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd@
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0012c	83 c4 70	 add	 esp, 112		; 00000070H
$LN2@LogChaosIt:

; 921  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 922  : 
; 923  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0012f	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00135	43		 inc	 ebx
  00136	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0013c	0f 8c e1 fe ff
	ff		 jl	 $LL4@LogChaosIt

; 930  : 				sLogType, lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 931  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 932  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 933  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6], lpObj->pChaosBox[n].m_SetOption,
; 934  : 				lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 935  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]),
; 936  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]),
; 937  : 				lpObj->pChaosBox[n].m_SocketOption[0],lpObj->pChaosBox[n].m_SocketOption[1],lpObj->pChaosBox[n].m_SocketOption[2],lpObj->pChaosBox[n].m_SocketOption[3],lpObj->pChaosBox[n].m_SocketOption[4]);
; 938  : 		}
; 939  : 	}
; 940  : }

  00142	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	33 cd		 xor	 ecx, ebp
  00149	5b		 pop	 ebx
  0014a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 08 00	 ret	 8
?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP ; CChaosBox::LogChaosItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$GSCopy$1$ = -20					; size = 4
_iMixLevel$2$ = -16					; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iPlusMixLevel$ = 12					; size = 4
?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CChaosBox::LogPlusItemLevelChaosItem, COMDAT
; _this$ = ecx

; 880  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 881  : 	int iMixLevel = 0;
; 882  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 883  : 
; 884  : 	if ( iPlusMixLevel == 3 )

  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _iPlusMixLevel$[ebp]
  00013	33 c0		 xor	 eax, eax
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	89 75 ec	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], esi
  0001d	57		 push	 edi
  0001e	83 f9 03	 cmp	 ecx, 3
  00021	75 09		 jne	 SHORT $LN5@LogPlusIte

; 885  : 		iMixLevel = 1;

  00023	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _iMixLevel$2$[ebp], 1
  0002a	eb 46		 jmp	 SHORT $LN15@LogPlusIte
$LN5@LogPlusIte:

; 886  : 	else if ( iPlusMixLevel == 4 )

  0002c	83 f9 04	 cmp	 ecx, 4
  0002f	75 09		 jne	 SHORT $LN7@LogPlusIte

; 887  : 		iMixLevel = 2;

  00031	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _iMixLevel$2$[ebp], 2
  00038	eb 38		 jmp	 SHORT $LN15@LogPlusIte
$LN7@LogPlusIte:

; 888  : 	else if ( iPlusMixLevel == 22 )

  0003a	83 f9 16	 cmp	 ecx, 22			; 00000016H
  0003d	75 09		 jne	 SHORT $LN9@LogPlusIte

; 889  : 		iMixLevel = 3;

  0003f	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _iMixLevel$2$[ebp], 3
  00046	eb 2a		 jmp	 SHORT $LN15@LogPlusIte
$LN9@LogPlusIte:

; 890  : 	else if ( iPlusMixLevel == 23 )

  00048	83 f9 17	 cmp	 ecx, 23			; 00000017H
  0004b	75 09		 jne	 SHORT $LN11@LogPlusIte

; 891  : 		iMixLevel = 4;

  0004d	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _iMixLevel$2$[ebp], 4
  00054	eb 1c		 jmp	 SHORT $LN15@LogPlusIte
$LN11@LogPlusIte:

; 892  : 	else if ( iPlusMixLevel == 49 )

  00056	83 f9 31	 cmp	 ecx, 49			; 00000031H
  00059	75 09		 jne	 SHORT $LN13@LogPlusIte

; 893  : 		iMixLevel = 5;

  0005b	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _iMixLevel$2$[ebp], 5
  00062	eb 0e		 jmp	 SHORT $LN15@LogPlusIte
$LN13@LogPlusIte:

; 894  : 	else if ( iPlusMixLevel == 50 )

  00064	83 f9 32	 cmp	 ecx, 50			; 00000032H
  00067	ba 06 00 00 00	 mov	 edx, 6
  0006c	0f 44 c2	 cmove	 eax, edx
  0006f	89 45 f0	 mov	 DWORD PTR _iMixLevel$2$[ebp], eax
$LN15@LogPlusIte:

; 895  : 		iMixLevel = 6;
; 896  : 
; 897  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00072	33 db		 xor	 ebx, ebx
  00074	33 ff		 xor	 edi, edi
  00076	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@LogPlusIte:

; 898  : 	{
; 899  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00080	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00086	03 cf		 add	 ecx, edi
  00088	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0008d	83 f8 01	 cmp	 eax, 1
  00090	0f 85 d1 00 00
	00		 jne	 $LN2@LogPlusIte

; 900  : 		{
; 901  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  00096	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0009c	03 c7		 add	 eax, edi
  0009e	50		 push	 eax
  0009f	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 902  : 
; 903  : 			LogAddTD("[PlusItemLevel,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex:[%d] HO:[%d,%d]", iMixLevel,

  000a8	8b 45 ec	 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  000ab	83 c4 08	 add	 esp, 8
  000ae	8b b6 10 12 00
	00		 mov	 esi, DWORD PTR [esi+4624]
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  000b9	03 f7		 add	 esi, edi
  000bb	8b 80 10 12 00
	00		 mov	 eax, DWORD PTR [eax+4624]
  000c1	03 c7		 add	 eax, edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  000c9	0f b6 c0	 movzx	 eax, al
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  000d1	50		 push	 eax
  000d2	8b 45 ec	 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  000d5	8b 80 10 12 00
	00		 mov	 eax, DWORD PTR [eax+4624]
  000db	03 c7		 add	 eax, edi
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  000e3	0f b6 c0	 movzx	 eax, al
  000e6	8b ce		 mov	 ecx, esi
  000e8	50		 push	 eax
  000e9	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  000f0	c1 e8 07	 shr	 eax, 7
  000f3	50		 push	 eax
  000f4	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  000fb	50		 push	 eax
  000fc	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  00100	50		 push	 eax
  00101	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  00105	50		 push	 eax
  00106	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  0010a	50		 push	 eax
  0010b	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  0010f	50		 push	 eax
  00110	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  00114	50		 push	 eax
  00115	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  00119	50		 push	 eax
  0011a	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  0011e	50		 push	 eax
  0011f	f3 0f 2c 46 24	 cvttss2si eax, DWORD PTR [esi+36]
  00124	50		 push	 eax
  00125	ff 36		 push	 DWORD PTR [esi]
  00127	0f b6 86 92 00
	00 00		 movzx	 eax, BYTE PTR [esi+146]
  0012e	50		 push	 eax
  0012f	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  00136	50		 push	 eax
  00137	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  0013e	50		 push	 eax
  0013f	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00143	50		 push	 eax
  00144	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  00149	8b 75 ec	 mov	 esi, DWORD PTR _lpObj$GSCopy$1$[ebp]
  0014c	50		 push	 eax
  0014d	53		 push	 ebx
  0014e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00151	50		 push	 eax
  00152	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00155	50		 push	 eax
  00156	ff 75 f0	 push	 DWORD PTR _iMixLevel$2$[ebp]
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@DGIBLBAF@?$FLPlusItemLevel?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMi@
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00164	83 c4 5c	 add	 esp, 92			; 0000005cH
$LN2@LogPlusIte:

; 895  : 		iMixLevel = 6;
; 896  : 
; 897  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00167	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0016d	43		 inc	 ebx
  0016e	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00174	0f 8c 06 ff ff
	ff		 jl	 $LL4@LogPlusIte

; 904  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 905  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 906  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 907  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6], lpObj->pChaosBox[n].m_SetOption,
; 908  : 				lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 909  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]),
; 910  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]));
; 911  : 		}
; 912  : 	}
; 913  : }

  0017a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017d	5f		 pop	 edi
  0017e	5e		 pop	 esi
  0017f	33 cd		 xor	 ecx, ebp
  00181	5b		 pop	 ebx
  00182	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 08 00	 ret	 8
?LogPlusItemLevelChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CChaosBox::LogPlusItemLevelChaosItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_this$1$ = -40						; size = 4
_iChaosTaxMoney$2$ = -36				; size = 4
_iCharmOfLuckCount$1$ = -32				; size = 4
_aIndex$1$ = -28					; size = 4
_fail$1$ = -24						; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_bCheckType$ = 12					; size = 4
_iItemLevel$ = 16					; size = 4
?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CChaosBox::DevilSquareEventChaosMix, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 658  : 	BOOL fail = TRUE;
; 659  : 	int aIndex = lpObj->m_Index;
; 660  : 	PMSG_CHAOSMIXRESULT pMsg;
; 661  : 
; 662  : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	8b 3e		 mov	 edi, DWORD PTR [esi]
  00022	50		 push	 eax
  00023	89 4d d8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00026	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _fail$1$[ebp], 1
  0002d	89 7d e4	 mov	 DWORD PTR _aIndex$1$[ebp], edi
  00030	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 663  : 	pMsg.Result = CB_ERROR;
; 664  : 	lpObj->ChaosLock = TRUE;
; 665  : 
; 666  : 	LogAddTD("[DevilSquare] Chaos Mix Start");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MDACFBLC@?$FLDevilSquare?$FN?5Chaos?5Mix?5Start?$AA@
  0003a	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0003e	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 667  : 	INT nChaosNeedMoney = 0;
; 668  : 	int iCharmOfLuckCount = 0;
; 669  : 	iCharmOfLuckCount = lpObj->ChaosSuccessRate;

  0004e	8b 86 1c 12 00
	00		 mov	 eax, DWORD PTR [esi+4636]
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	89 45 e0	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax

; 670  : 
; 671  : 	if ( iCharmOfLuckCount > 10 )

  0005a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005d	7e 20		 jle	 SHORT $LN4@DevilSquar

; 672  : 	{
; 673  : 		pMsg.Result = 0xF0;
; 674  : 		lpObj->ChaosLock = FALSE;
; 675  : 		DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0005f	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00063	50		 push	 eax
  00064	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00067	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
  0006b	50		 push	 eax
  0006c	57		 push	 edi
  0006d	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  00077	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@DevilSquar:

; 676  : 	}
; 677  : 
; 678  : 	switch ( iItemLevel )

  0007f	8b 5d 10	 mov	 ebx, DWORD PTR _iItemLevel$[ebp]
  00082	83 fb 07	 cmp	 ebx, 7
  00085	0f 87 07 02 00
	00		 ja	 $LN13@DevilSquar
  0008b	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN27@DevilSquar[ebx*4]
$LN5@DevilSquar:

; 679  : 	{
; 680  : 		case 0:
; 681  : 			lpObj->ChaosSuccessRate = 60;

  00092	c7 86 1c 12 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+4636], 60 ; 0000003cH

; 682  : 			nChaosNeedMoney = 100000;

  0009c	bf a0 86 01 00	 mov	 edi, 100000		; 000186a0H

; 683  : 			break;

  000a1	eb 58		 jmp	 SHORT $LN2@DevilSquar
$LN6@DevilSquar:

; 684  : 		case 1:
; 685  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel1;

  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel1@@3HA ; gDQChaosSuccessRateLevel1

; 686  : 			nChaosNeedMoney = 100000;

  000a8	bf a0 86 01 00	 mov	 edi, 100000		; 000186a0H

; 687  : 			break;

  000ad	eb 46		 jmp	 SHORT $LN23@DevilSquar
$LN7@DevilSquar:

; 688  : 
; 689  : 		case 2:
; 690  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel2;

  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel2@@3HA ; gDQChaosSuccessRateLevel2

; 691  : 			nChaosNeedMoney = 200000;

  000b4	bf 40 0d 03 00	 mov	 edi, 200000		; 00030d40H

; 692  : 			break;

  000b9	eb 3a		 jmp	 SHORT $LN23@DevilSquar
$LN8@DevilSquar:

; 693  : 
; 694  : 		case 3:
; 695  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel3;

  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel3@@3HA ; gDQChaosSuccessRateLevel3

; 696  : 			nChaosNeedMoney = 400000;

  000c0	bf 80 1a 06 00	 mov	 edi, 400000		; 00061a80H

; 697  : 			break;

  000c5	eb 2e		 jmp	 SHORT $LN23@DevilSquar
$LN9@DevilSquar:

; 698  : 
; 699  : 		case 4:
; 700  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel4;

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel4@@3HA ; gDQChaosSuccessRateLevel4

; 701  : 			nChaosNeedMoney = 700000;

  000cc	bf 60 ae 0a 00	 mov	 edi, 700000		; 000aae60H

; 702  : 			break;

  000d1	eb 22		 jmp	 SHORT $LN23@DevilSquar
$LN10@DevilSquar:

; 703  : 
; 704  : 		case 5:
; 705  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel5;

  000d3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel5@@3HA ; gDQChaosSuccessRateLevel5

; 706  : 			nChaosNeedMoney = 1100000;

  000d8	bf e0 c8 10 00	 mov	 edi, 1100000		; 0010c8e0H

; 707  : 			break;

  000dd	eb 16		 jmp	 SHORT $LN23@DevilSquar
$LN11@DevilSquar:

; 708  : 
; 709  : 		case 6:
; 710  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel6;

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel6@@3HA ; gDQChaosSuccessRateLevel6

; 711  : 			nChaosNeedMoney = 1600000;

  000e4	bf 00 6a 18 00	 mov	 edi, 1600000		; 00186a00H

; 712  : 			break;

  000e9	eb 0a		 jmp	 SHORT $LN23@DevilSquar
$LN12@DevilSquar:

; 713  : 		case 7:
; 714  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel7;

  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gDQChaosSuccessRateLevel7@@3HA ; gDQChaosSuccessRateLevel7

; 715  : 			nChaosNeedMoney = 2000000;

  000f0	bf 80 84 1e 00	 mov	 edi, 2000000		; 001e8480H
$LN23@DevilSquar:

; 713  : 		case 7:
; 714  : 			lpObj->ChaosSuccessRate = gDQChaosSuccessRateLevel7;

  000f5	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax
$LN2@DevilSquar:

; 725  : 			return 1;
; 726  : 			break;
; 727  : 	}
; 728  : 
; 729  : 	int iChaosTaxMoney = (int)((__int64)nChaosNeedMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(lpObj->m_Index) / (__int64)100);

  000fb	ff 36		 push	 DWORD PTR [esi]
  000fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00102	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  00107	8b c8		 mov	 ecx, eax
  00109	8b c7		 mov	 eax, edi
  0010b	f7 e9		 imul	 ecx
  0010d	6a 00		 push	 0
  0010f	6a 64		 push	 100			; 00000064H
  00111	52		 push	 edx
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 __alldiv

; 730  : 
; 731  : 	if ( iChaosTaxMoney < 0 )

  00118	33 c9		 xor	 ecx, ecx
  0011a	85 c0		 test	 eax, eax
  0011c	0f 48 c1	 cmovs	 eax, ecx

; 732  : 	{
; 733  : 		iChaosTaxMoney = 0;
; 734  : 	}
; 735  : 
; 736  : 	nChaosNeedMoney += iChaosTaxMoney;

  0011f	03 f8		 add	 edi, eax
  00121	89 45 dc	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax

; 737  : 
; 738  : 	if ( nChaosNeedMoney < 0 )

  00124	8b c1		 mov	 eax, ecx

; 739  : 	{
; 740  : 		nChaosNeedMoney = 0;
; 741  : 	}
; 742  : 
; 743  : 	if ( (lpObj->Money - nChaosNeedMoney) < 0 )

  00126	8b 8e cc 00 00
	00		 mov	 ecx, DWORD PTR [esi+204]
  0012c	0f 48 f8	 cmovs	 edi, eax
  0012f	8b c1		 mov	 eax, ecx
  00131	2b c7		 sub	 eax, edi
  00133	79 32		 jns	 SHORT $LN16@DevilSquar

; 744  : 	{
; 745  : 		LogAddTD("[DevilSquare] [%s][%s] CBMix Not Enough Money [%d] need zen [%d]",

  00135	57		 push	 edi
  00136	51		 push	 ecx
  00137	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0013a	50		 push	 eax
  0013b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0013e	50		 push	 eax
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@HHHNMGIM@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5Not@
  00144	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 746  : 			lpObj->AccountID, lpObj->Name, lpObj->Money, nChaosNeedMoney);
; 747  : 		pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 748  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  0014a	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0014e	50		 push	 eax
  0014f	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00152	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
  00156	50		 push	 eax
  00157	ff 75 e4	 push	 DWORD PTR _aIndex$1$[ebp]
  0015a	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0015f	83 c4 20	 add	 esp, 32			; 00000020H

; 749  : 		lpObj->ChaosLock = FALSE;
; 750  : 		return 1;

  00162	e9 55 01 00 00	 jmp	 $LN24@DevilSquar
$LN16@DevilSquar:

; 751  : 
; 752  : 	}
; 753  : 
; 754  : 	if ( g_CrywolfSync.GetOccupationState() == 0 && g_iCrywolfApplyMvpBenefit )

  00167	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0016c	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  00171	85 c0		 test	 eax, eax
  00173	75 18		 jne	 SHORT $LN17@DevilSquar
  00175	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpBenefit@@3HA, eax ; g_iCrywolfApplyMvpBenefit
  0017b	74 10		 je	 SHORT $LN17@DevilSquar

; 755  : 	{	
; 756  : 		lpObj->ChaosSuccessRate += g_CrywolfSync.GetPlusChaosRate();

  0017d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00182	e8 00 00 00 00	 call	 ?GetPlusChaosRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetPlusChaosRate
  00187	01 86 1c 12 00
	00		 add	 DWORD PTR [esi+4636], eax
$LN17@DevilSquar:

; 757  : 	}
; 758  : 
; 759  : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;

  0018d	8b 45 e0	 mov	 eax, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00190	01 86 1c 12 00
	00		 add	 DWORD PTR [esi+4636], eax

; 760  : 
; 761  : 	int iRate = rand() % 100;

  00196	e8 00 00 00 00	 call	 _rand
  0019b	99		 cdq
  0019c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a1	f7 f9		 idiv	 ecx

; 762  : 
; 763  : 	if ( bCheckType == TRUE )

  001a3	83 7d 0c 01	 cmp	 DWORD PTR _bCheckType$[ebp], 1
  001a7	75 3a		 jne	 SHORT $LN19@DevilSquar

; 764  : 	{
; 765  : 		if ( iRate < lpObj->ChaosSuccessRate )

  001a9	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  001af	7d 32		 jge	 SHORT $LN19@DevilSquar

; 766  : 		{
; 767  : 			int DevilInv = ITEMGET(14,19);	// Devil Ticket
; 768  : 			ItemSerialCreateSend(lpObj->m_Index, -1, 0, 0, DevilInv, iItemLevel, 0, 0, 0, 0, -1, 0, 0);

  001b1	6a 00		 push	 0
  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	6a ff		 push	 -1
  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	6a 00		 push	 0
  001c1	6a 00		 push	 0
  001c3	53		 push	 ebx
  001c4	68 13 1c 00 00	 push	 7187			; 00001c13H
  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	68 ff 00 00 00	 push	 255			; 000000ffH
  001d2	ff 36		 push	 DWORD PTR [esi]
  001d4	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  001d9	83 c4 3c	 add	 esp, 60			; 0000003cH

; 769  : 			fail = FALSE;

  001dc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _fail$1$[ebp], 0
$LN19@DevilSquar:

; 770  : 		}
; 771  : 	}
; 772  : 
; 773  : 	lpObj->Money -= nChaosNeedMoney;
; 774  : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001e3	ff 75 dc	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  001e6	29 be cc 00 00
	00		 sub	 DWORD PTR [esi+204], edi
  001ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001f1	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 775  : 	GCMoneySend(lpObj->m_Index, lpObj->Money);

  001f6	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001fc	ff 36		 push	 DWORD PTR [esi]
  001fe	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00203	83 c4 08	 add	 esp, 8

; 776  : 
; 777  : 	if ( fail == TRUE )

  00206	83 7d e8 01	 cmp	 DWORD PTR _fail$1$[ebp], 1
  0020a	75 5c		 jne	 SHORT $LN20@DevilSquar

; 778  : 	{
; 779  : 		ChaosBoxInit(lpObj);

  0020c	8b 4d d8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0020f	56		 push	 esi
  00210	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 780  : 		GCUserChaosBoxSend(lpObj, 0);

  00215	6a 00		 push	 0
  00217	56		 push	 esi
  00218	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 781  : 		DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  0021d	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00221	50		 push	 eax
  00222	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00225	50		 push	 eax
  00226	ff 75 e4	 push	 DWORD PTR _aIndex$1$[ebp]
  00229	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 782  : 
; 783  : 		LogAddTD("[DevilSquare,%d] [%s][%s] CBMix Fail %d Money : %d-%d", iItemLevel,

  0022e	57		 push	 edi
  0022f	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00235	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00238	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0023e	50		 push	 eax
  0023f	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00242	50		 push	 eax
  00243	53		 push	 ebx
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KKBIIBFP@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  00249	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0024f	83 c4 30	 add	 esp, 48			; 00000030H

; 784  : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 785  : 			lpObj->Money, nChaosNeedMoney);
; 786  : 		lpObj->ChaosLock = FALSE;

  00252	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0

; 791  : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 792  : 			nChaosNeedMoney);
; 793  : #if( __4GAMERS__ == 1 )
; 794  : 		g_Achievements.GD_UpdateMixData(lpObj, true);
; 795  : #endif
; 796  : 	}
; 797  : 
; 798  : 	::gObjInventoryCommit(lpObj->m_Index);

  0025c	ff 36		 push	 DWORD PTR [esi]
  0025e	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00263	83 c4 04	 add	 esp, 4

; 799  : 
; 800  : 	return TRUE;

  00266	eb 5e		 jmp	 SHORT $LN25@DevilSquar
$LN20@DevilSquar:

; 787  : 	}
; 788  : 	else
; 789  : 	{
; 790  : 		LogAddTD("[DevilSquare,%d] [%s][%s] CBMix Success Rate:%d Money : %d", iItemLevel,

  00268	57		 push	 edi
  00269	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0026f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00272	50		 push	 eax
  00273	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00276	50		 push	 eax
  00277	53		 push	 ebx
  00278	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@ODHCGDBD@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00283	83 c4 18	 add	 esp, 24			; 00000018H

; 791  : 			lpObj->AccountID, lpObj->Name, lpObj->ChaosSuccessRate,
; 792  : 			nChaosNeedMoney);
; 793  : #if( __4GAMERS__ == 1 )
; 794  : 		g_Achievements.GD_UpdateMixData(lpObj, true);
; 795  : #endif
; 796  : 	}
; 797  : 
; 798  : 	::gObjInventoryCommit(lpObj->m_Index);

  00286	ff 36		 push	 DWORD PTR [esi]
  00288	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0028d	83 c4 04	 add	 esp, 4

; 799  : 
; 800  : 	return TRUE;

  00290	eb 34		 jmp	 SHORT $LN25@DevilSquar
$LN13@DevilSquar:

; 716  : 			break;
; 717  : 
; 718  : 		default:
; 719  : 			LogAdd("[DevilSquare] [%s][%s] Invalid DQItem Level [%d]",

  00292	53		 push	 ebx
  00293	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00296	50		 push	 eax
  00297	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0029a	50		 push	 eax
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@BMAIOAHL@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Invalid?5D@
  002a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 720  : 				lpObj->AccountID, lpObj->Name, iItemLevel);
; 721  : 
; 722  : 			pMsg.Result = CB_INVALID_ITEM_LEVEL;
; 723  : 			DataSend(aIndex, (BYTE *)&pMsg, pMsg.h.size);

  002a6	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002aa	50		 push	 eax
  002ab	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002ae	c6 45 ef 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8
  002b2	50		 push	 eax
  002b3	57		 push	 edi
  002b4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002b9	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN24@DevilSquar:

; 724  : 			lpObj->ChaosLock = FALSE;

  002bc	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
$LN25@DevilSquar:

; 801  : }

  002c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c9	b8 01 00 00 00	 mov	 eax, 1
  002ce	5f		 pop	 edi
  002cf	5e		 pop	 esi
  002d0	33 cd		 xor	 ecx, ebp
  002d2	5b		 pop	 ebx
  002d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d8	8b e5		 mov	 esp, ebp
  002da	5d		 pop	 ebp
  002db	c2 0c 00	 ret	 12			; 0000000cH
  002de	66 90		 npad	 2
$LN27@DevilSquar:
  002e0	00 00 00 00	 DD	 $LN5@DevilSquar
  002e4	00 00 00 00	 DD	 $LN6@DevilSquar
  002e8	00 00 00 00	 DD	 $LN7@DevilSquar
  002ec	00 00 00 00	 DD	 $LN8@DevilSquar
  002f0	00 00 00 00	 DD	 $LN9@DevilSquar
  002f4	00 00 00 00	 DD	 $LN10@DevilSquar
  002f8	00 00 00 00	 DD	 $LN11@DevilSquar
  002fc	00 00 00 00	 DD	 $LN12@DevilSquar
?DevilSquareEventChaosMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CChaosBox::DevilSquareEventChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$GSCopy$1$ = -16					; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::LogDQChaosItem, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 525  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 526  : 
; 527  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	89 75 f0	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], esi
  0001b	33 ff		 xor	 edi, edi
  0001d	0f 1f 00	 npad	 3
$LL4@LogDQChaos:

; 528  : 	{
; 529  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00020	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00026	03 cf		 add	 ecx, edi
  00028	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0002d	83 f8 01	 cmp	 eax, 1
  00030	0f 85 da 00 00
	00		 jne	 $LN2@LogDQChaos

; 530  : 		{
; 531  : 			::ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n] );

  00036	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  0003c	03 c7		 add	 eax, edi
  0003e	50		 push	 eax
  0003f	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 532  : 
; 533  : 			LogAddTD("[DevilSquare,%d] [%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d] Set:[%d] 380Ex[%d] HO:[%d,%d]",

  00048	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b b6 10 12 00
	00		 mov	 esi, DWORD PTR [esi+4624]
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  00059	03 f7		 add	 esi, edi
  0005b	8b 80 10 12 00
	00		 mov	 eax, DWORD PTR [eax+4624]
  00061	03 c7		 add	 eax, edi
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel
  00069	0f b6 c0	 movzx	 eax, al
  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  00071	50		 push	 eax
  00072	8b 45 f0	 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  00075	8b 80 10 12 00
	00		 mov	 eax, DWORD PTR [eax+4624]
  0007b	03 c7		 add	 eax, edi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption
  00083	0f b6 c0	 movzx	 eax, al
  00086	8b ce		 mov	 ecx, esi
  00088	50		 push	 eax
  00089	0f b6 86 c6 00
	00 00		 movzx	 eax, BYTE PTR [esi+198]
  00090	c1 e8 07	 shr	 eax, 7
  00093	50		 push	 eax
  00094	0f b6 86 aa 00
	00 00		 movzx	 eax, BYTE PTR [esi+170]
  0009b	50		 push	 eax
  0009c	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  000a0	50		 push	 eax
  000a1	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  000a5	50		 push	 eax
  000a6	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  000aa	50		 push	 eax
  000ab	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  000af	50		 push	 eax
  000b0	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  000b4	50		 push	 eax
  000b5	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  000b9	50		 push	 eax
  000ba	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  000be	50		 push	 eax
  000bf	f3 0f 2c 46 24	 cvttss2si eax, DWORD PTR [esi+36]
  000c4	50		 push	 eax
  000c5	ff 36		 push	 DWORD PTR [esi]
  000c7	0f b6 86 92 00
	00 00		 movzx	 eax, BYTE PTR [esi+146]
  000ce	50		 push	 eax
  000cf	0f b6 86 91 00
	00 00		 movzx	 eax, BYTE PTR [esi+145]
  000d6	50		 push	 eax
  000d7	0f b6 86 90 00
	00 00		 movzx	 eax, BYTE PTR [esi+144]
  000de	50		 push	 eax
  000df	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  000e9	8b 75 f0	 mov	 esi, DWORD PTR _lpObj$GSCopy$1$[ebp]
  000ec	50		 push	 eax
  000ed	53		 push	 ebx
  000ee	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000f1	50		 push	 eax
  000f2	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000f5	50		 push	 eax
  000f6	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  000fc	0f bf 44 07 08	 movsx	 eax, WORD PTR [edi+eax+8]
  00101	50		 push	 eax
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0HL@GCCPEJBG@?$FLDevilSquare?0?$CFd?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5@
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010d	83 c4 5c	 add	 esp, 92			; 0000005cH
$LN2@LogDQChaos:

; 525  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 526  : 
; 527  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00110	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00116	43		 inc	 ebx
  00117	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0011d	0f 8c fd fe ff
	ff		 jl	 $LL4@LogDQChaos

; 534  : 				lpObj->pChaosBox[n].m_Level,
; 535  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(), lpObj->pChaosBox[n].m_Level,
; 536  : 				lpObj->pChaosBox[n].m_Option1, lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, 
; 537  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability, 
; 538  : 				ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5], ExOption[6],
; 539  : 				lpObj->pChaosBox[n].m_SetOption, lpObj->pChaosBox[n].m_ItemOptionEx >> 7,
; 540  : 				g_kJewelOfHarmonySystem.GetItemStrengthenOption(&lpObj->pChaosBox[n]),
; 541  : 				g_kJewelOfHarmonySystem.GetItemOptionLevel(&lpObj->pChaosBox[n]));
; 542  : 		}
; 543  : 	}
; 544  : }

  00123	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	33 cd		 xor	 ecx, ebp
  0012a	5b		 pop	 ebx
  0012b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 04 00	 ret	 4
?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::LogDQChaosItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z
_TEXT	SEGMENT
_this$1$ = -32						; size = 4
_bChaoseGem$1$ = -28					; size = 4
_bCharmOfLuckOver$1$ = -24				; size = 4
_FoundOtherItem$1$ = -20				; size = 4
_bEyeOfDevil$1$ = -16					; size = 4
_bKeyOfDevil$1$ = -12					; size = 4
_iCharmOfLuckCount$1$ = -8				; size = 4
_bLevelCheck$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_eventitemcount$ = 12					; size = 4
_itemlevel$ = 16					; size = 4
?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z PROC ; CChaosBox::CheckDevilSquareItem, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 548  : 	BOOL bChaoseGem = FALSE;

  00006	33 c0		 xor	 eax, eax
  00008	89 4d e0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	89 45 e4	 mov	 DWORD PTR _bChaoseGem$1$[ebp], eax

; 549  : 	BOOL bEyeOfDevil = FALSE;

  0000e	33 d2		 xor	 edx, edx

; 550  : 	BOOL bKeyOfDevil = FALSE;

  00010	89 45 f4	 mov	 DWORD PTR _bKeyOfDevil$1$[ebp], eax

; 551  : 	eventitemcount = 0;

  00013	8b 45 0c	 mov	 eax, DWORD PTR _eventitemcount$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	89 10		 mov	 DWORD PTR [eax], edx

; 552  : 	BOOL FoundOtherItem = FALSE;
; 553  : 	int level = -1;

  0001b	83 cf ff	 or	 edi, -1
  0001e	33 c0		 xor	 eax, eax
  00020	89 55 f0	 mov	 DWORD PTR _bEyeOfDevil$1$[ebp], edx

; 554  : 	BOOL bLevelCheck = FALSE;
; 555  : 	int iCharmOfLuckCount = 0;
; 556  : 	BOOL bCharmOfLuckOver = FALSE;
; 557  : 
; 558  : 	LogAdd("[DevilSquare] Search DevilSquareItem");

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MGDMILOL@?$FLDevilSquare?$FN?5Search?5DevilSquare@
  00028	89 45 ec	 mov	 DWORD PTR _FoundOtherItem$1$[ebp], eax
  0002b	89 45 fc	 mov	 DWORD PTR _bLevelCheck$1$[ebp], eax
  0002e	89 45 f8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
  00031	89 45 e8	 mov	 DWORD PTR _bCharmOfLuckOver$1$[ebp], eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003a	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0003d	83 c4 04	 add	 esp, 4
  00040	33 f6		 xor	 esi, esi
$LL4@CheckDevil:

; 561  : 	{
; 562  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  00042	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00048	03 ce		 add	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0004f	83 f8 01	 cmp	 eax, 1
  00052	75 1c		 jne	 SHORT $LN34@CheckDevil

; 563  : 		{
; 564  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )	// Chaos

  00054	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0005a	ba 0f 18 00 00	 mov	 edx, 6159		; 0000180fH
  0005f	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  00064	66 3b c2	 cmp	 ax, dx
  00067	75 4a		 jne	 SHORT $LN6@CheckDevil

; 565  : 			{
; 566  : 				bChaoseGem = TRUE;

  00069	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _bChaoseGem$1$[ebp], 1
$LN34@CheckDevil:
  00070	8b 55 f8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$1$[ebp]
$LN36@CheckDevil:
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _bLevelCheck$1$[ebp]
$LN2@CheckDevil:

; 559  : 
; 560  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00076	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0007c	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00082	7c be		 jl	 SHORT $LL4@CheckDevil

; 614  : 			}
; 615  : 		}
; 616  : 	}
; 617  : 
; 618  : 	itemlevel = level;

  00084	8b 45 10	 mov	 eax, DWORD PTR _itemlevel$[ebp]
  00087	89 38		 mov	 DWORD PTR [eax], edi

; 619  : 	lpObj->ChaosSuccessRate = iCharmOfLuckCount;
; 620  : 
; 621  : 	if ( FoundOtherItem != FALSE )

  00089	8b 45 ec	 mov	 eax, DWORD PTR _FoundOtherItem$1$[ebp]
  0008c	89 93 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], edx
  00092	85 c0		 test	 eax, eax
  00094	0f 84 ab 00 00
	00		 je	 $LN21@CheckDevil

; 622  : 	{
; 623  : 		LogAdd("[DevilSquare] Other DQItems Found");

  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LINAPAPC@?$FLDevilSquare?$FN?5Other?5DQItems?5Foun@

; 649  : 	}
; 650  : 
; 651  : 	LogAdd("[DevilSquare] DQItems Not Found");

  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a5	83 c4 04	 add	 esp, 4

; 652  : 
; 653  : 	return 0;

  000a8	33 c0		 xor	 eax, eax
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx

; 654  : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 0c 00	 ret	 12			; 0000000cH
$LN6@CheckDevil:

; 567  : 			}
; 568  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,17) )	// Eye

  000b3	ba 11 1c 00 00	 mov	 edx, 7185		; 00001c11H
  000b8	66 3b c2	 cmp	 ax, dx
  000bb	75 27		 jne	 SHORT $LN8@CheckDevil

; 569  : 			{
; 570  : 				eventitemcount +=1;

  000bd	8b 4d 0c	 mov	 ecx, DWORD PTR _eventitemcount$[ebp]

; 571  : 				bEyeOfDevil = TRUE;

  000c0	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bEyeOfDevil$1$[ebp], 1
  000c7	ff 01		 inc	 DWORD PTR [ecx]
$LN37@CheckDevil:

; 572  : 
; 573  : 				if ( level != lpObj->pChaosBox[n].m_Level )

  000c9	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  000cf	0f bf 44 30 08	 movsx	 eax, WORD PTR [eax+esi+8]
  000d4	3b f8		 cmp	 edi, eax
  000d6	74 98		 je	 SHORT $LN34@CheckDevil

; 578  : 					}
; 579  : 					else

  000d8	8b 55 f8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  000db	83 ff ff	 cmp	 edi, -1
  000de	75 1c		 jne	 SHORT $LN16@CheckDevil

; 574  : 				{
; 575  : 					if ( level == -1 )
; 576  : 					{
; 577  : 						level = lpObj->pChaosBox[n].m_Level;

  000e0	8b f8		 mov	 edi, eax

; 578  : 					}
; 579  : 					else

  000e2	eb 8f		 jmp	 SHORT $LN36@CheckDevil
$LN8@CheckDevil:

; 580  : 					{
; 581  : 						bLevelCheck = TRUE;
; 582  : 					}
; 583  : 				}
; 584  : 			}
; 585  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,18) )	// Key

  000e4	ba 12 1c 00 00	 mov	 edx, 7186		; 00001c12H
  000e9	66 3b c2	 cmp	 ax, dx
  000ec	75 1b		 jne	 SHORT $LN13@CheckDevil

; 586  : 			{
; 587  : 				eventitemcount +=1;

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _eventitemcount$[ebp]

; 588  : 				bKeyOfDevil = TRUE;

  000f1	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bKeyOfDevil$1$[ebp], 1
  000f8	ff 00		 inc	 DWORD PTR [eax]

; 589  : 
; 590  : 				if ( level != lpObj->pChaosBox[n].m_Level )
; 591  : 				{
; 592  : 					if ( level == -1 )
; 593  : 					{
; 594  : 						level = lpObj->pChaosBox[n].m_Level;
; 595  : 					}
; 596  : 					else

  000fa	eb cd		 jmp	 SHORT $LN37@CheckDevil
$LN16@CheckDevil:

; 597  : 					{
; 598  : 						bLevelCheck = TRUE;

  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	89 4d fc	 mov	 DWORD PTR _bLevelCheck$1$[ebp], ecx

; 599  : 					}
; 600  : 				}
; 601  : 			}

  00104	e9 6d ff ff ff	 jmp	 $LN2@CheckDevil
$LN13@CheckDevil:

; 602  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  00109	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  0010e	66 3b c2	 cmp	 ax, dx

; 603  : 			{
; 604  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  00111	8b 55 f8	 mov	 edx, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00114	75 23		 jne	 SHORT $LN18@CheckDevil
  00116	f3 0f 2c 44 31
	24		 cvttss2si eax, DWORD PTR [ecx+esi+36]

; 609  : 				}
; 610  : 			}
; 611  : 			else

  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _bLevelCheck$1$[ebp]
  0011f	03 d0		 add	 edx, eax
  00121	89 55 f8	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], edx
  00124	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00127	0f 8e 49 ff ff
	ff		 jle	 $LN2@CheckDevil

; 605  : 
; 606  : 				if ( iCharmOfLuckCount > 10 )
; 607  : 				{
; 608  : 					bCharmOfLuckOver = TRUE;

  0012d	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bCharmOfLuckOver$1$[ebp], 1

; 609  : 				}
; 610  : 			}
; 611  : 			else

  00134	e9 3d ff ff ff	 jmp	 $LN2@CheckDevil
$LN18@CheckDevil:

; 612  : 			{
; 613  : 				FoundOtherItem = TRUE;

  00139	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _FoundOtherItem$1$[ebp], 1
  00140	e9 2e ff ff ff	 jmp	 $LN36@CheckDevil
$LN21@CheckDevil:

; 624  : 		return 0;
; 625  : 	}
; 626  : 
; 627  : 	if ( bLevelCheck != FALSE )

  00145	85 c9		 test	 ecx, ecx
  00147	74 1c		 je	 SHORT $LN22@CheckDevil

; 628  : 	{
; 629  : 		LogAdd("[DevilSquare] DiffLevel DQItems Found");

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FFFDDFEO@?$FLDevilSquare?$FN?5DiffLevel?5DQItems?5@
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00154	83 c4 04	 add	 esp, 4

; 630  : 		return 3;

  00157	b8 03 00 00 00	 mov	 eax, 3
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx

; 654  : }

  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 0c 00	 ret	 12			; 0000000cH
$LN22@CheckDevil:

; 631  : 	}
; 632  : 
; 633  : 	if ( bCharmOfLuckOver == TRUE )

  00165	83 7d e8 01	 cmp	 DWORD PTR _bCharmOfLuckOver$1$[ebp], 1
  00169	75 1c		 jne	 SHORT $LN23@CheckDevil

; 634  : 	{
; 635  : 		LogAdd("[DevilSquare] Charm Of Luck Count Over");

  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EJJKJEAB@?$FLDevilSquare?$FN?5Charm?5Of?5Luck?5Coun@
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00176	83 c4 04	 add	 esp, 4

; 636  : 		return 4;

  00179	b8 04 00 00 00	 mov	 eax, 4
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx

; 654  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 0c 00	 ret	 12			; 0000000cH
$LN23@CheckDevil:

; 637  : 	}
; 638  : 
; 639  : 	if ( bChaoseGem != FALSE && bEyeOfDevil != FALSE && bKeyOfDevil != FALSE )

  00187	8b 45 e4	 mov	 eax, DWORD PTR _bChaoseGem$1$[ebp]
  0018a	8b 55 f0	 mov	 edx, DWORD PTR _bEyeOfDevil$1$[ebp]
  0018d	85 c0		 test	 eax, eax
  0018f	74 22		 je	 SHORT $LN35@CheckDevil
  00191	85 d2		 test	 edx, edx
  00193	74 40		 je	 SHORT $LN25@CheckDevil
  00195	8b 45 f4	 mov	 eax, DWORD PTR _bKeyOfDevil$1$[ebp]
  00198	85 c0		 test	 eax, eax
  0019a	74 1a		 je	 SHORT $LN24@CheckDevil

; 640  : 	{
; 641  : 		LogDQChaosItem(lpObj);

  0019c	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019f	53		 push	 ebx
  001a0	e8 00 00 00 00	 call	 ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi

; 642  : 		return 1;

  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	5b		 pop	 ebx

; 654  : }

  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c2 0c 00	 ret	 12			; 0000000cH
$LN35@CheckDevil:
  001b3	8b 45 f4	 mov	 eax, DWORD PTR _bKeyOfDevil$1$[ebp]
$LN24@CheckDevil:

; 643  : 	}
; 644  : 
; 645  : 	if ( bEyeOfDevil != FALSE && bKeyOfDevil != FALSE )

  001b6	85 d2		 test	 edx, edx
  001b8	74 1b		 je	 SHORT $LN25@CheckDevil
  001ba	85 c0		 test	 eax, eax
  001bc	74 17		 je	 SHORT $LN25@CheckDevil

; 646  : 	{
; 647  : 		LogDQChaosItem(lpObj);

  001be	8b 4d e0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001c1	53		 push	 ebx
  001c2	e8 00 00 00 00	 call	 ?LogDQChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@@Z ; CChaosBox::LogDQChaosItem
  001c7	5f		 pop	 edi
  001c8	5e		 pop	 esi

; 648  : 		return 2;

  001c9	b8 02 00 00 00	 mov	 eax, 2
  001ce	5b		 pop	 ebx

; 654  : }

  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c2 0c 00	 ret	 12			; 0000000cH
$LN25@CheckDevil:

; 649  : 	}
; 650  : 
; 651  : 	LogAdd("[DevilSquare] DQItems Not Found");

  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IANBADIL@?$FLDevilSquare?$FN?5DQItems?5Not?5Found?$AA@
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001e0	83 c4 04	 add	 esp, 4

; 652  : 
; 653  : 	return 0;

  001e3	33 c0		 xor	 eax, eax
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx

; 654  : }

  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?CheckDevilSquareItem@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ENDP ; CChaosBox::CheckDevilSquareItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z
_TEXT	SEGMENT
tv644 = -80						; size = 4
tv642 = -76						; size = 4
_lpObj$GSCopy$1$ = -72					; size = 4
tv639 = -68						; size = 4
tv637 = -64						; size = 4
tv635 = -60						; size = 4
tv633 = -56						; size = 4
tv631 = -52						; size = 4
_Result2$GSCopy$1$ = -48				; size = 4
_tmpItem$1$ = -44					; size = 4
_add$1$ = -40						; size = 4
_iCharmOfLuckCount$1$ = -36				; size = 4
_ChaosItems$1$ = -32					; size = 4
_ChaosDiamond$1$ = -28					; size = 4
_n$1$ = -24						; size = 4
_nv$1$ = -20						; size = 4
_Result3$GSCopy$1$ = -16				; size = 4
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_Result2$ = 12						; size = 4
_Result3$ = 16						; size = 4
?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z PROC ; CChaosBox::ChaosBoxMix, COMDAT
; _this$ = ecx

; 183  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 0c	 mov	 edx, DWORD PTR _Result2$[ebp]

; 184  : 	BYTE ExOption[8];
; 185  : 	int ChaosDiamond = 0;

  00013	33 c9		 xor	 ecx, ecx
  00015	8b 45 10	 mov	 eax, DWORD PTR _Result3$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0001c	89 5d b8	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], ebx
  0001f	89 55 d0	 mov	 DWORD PTR _Result2$GSCopy$1$[ebp], edx
  00022	89 45 f0	 mov	 DWORD PTR _Result3$GSCopy$1$[ebp], eax
  00025	89 4d e4	 mov	 DWORD PTR _ChaosDiamond$1$[ebp], ecx

; 186  : 	int ChaosItems = 0;

  00028	89 4d e0	 mov	 DWORD PTR _ChaosItems$1$[ebp], ecx

; 187  : 
; 188  : 	if ( lpObj->pChaosBox == NULL )

  0002b	39 8b 10 12 00
	00		 cmp	 DWORD PTR [ebx+4624], ecx
  00031	75 13		 jne	 SHORT $LN7@ChaosBoxMi

; 189  : 	{
; 190  : 		return 0;

  00033	33 c0		 xor	 eax, eax
  00035	5b		 pop	 ebx

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
$LN7@ChaosBoxMi:
  00046	56		 push	 esi

; 191  : 	}
; 192  : 
; 193  : 	int value = 0;
; 194  : 	int add = 0;
; 195  : 	int nv = 0;	// NEW VALUE
; 196  : 	Result2 = 0;

  00047	89 0a		 mov	 DWORD PTR [edx], ecx
  00049	57		 push	 edi

; 197  : 	Result3 = -1;

  0004a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00050	33 ff		 xor	 edi, edi

; 198  : 	int tmpItem = -1;

  00052	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR _tmpItem$1$[ebp], -1
  00059	33 f6		 xor	 esi, esi

; 199  : 	lpObj->ChaosSuccessRate = 0;

  0005b	89 8b 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], ecx

; 200  : 	lpObj->ChaosMoney = 0;

  00061	89 8b 18 12 00
	00		 mov	 DWORD PTR [ebx+4632], ecx

; 201  : 	int iCharmOfLuckCount = 0;

  00067	89 4d dc	 mov	 DWORD PTR _iCharmOfLuckCount$1$[ebp], ecx

; 202  : 
; 203  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  0006a	89 4d e8	 mov	 DWORD PTR _n$1$[ebp], ecx
  0006d	c7 45 cc 53 1a
	00 00		 mov	 DWORD PTR tv631[ebp], 6739 ; 00001a53H
  00074	c7 45 c8 54 1a
	00 00		 mov	 DWORD PTR tv633[ebp], 6740 ; 00001a54H
  0007b	c7 45 c4 55 1a
	00 00		 mov	 DWORD PTR tv635[ebp], 6741 ; 00001a55H
  00082	c7 45 c0 56 1a
	00 00		 mov	 DWORD PTR tv637[ebp], 6742 ; 00001a56H
  00089	c7 45 bc 57 1a
	00 00		 mov	 DWORD PTR tv639[ebp], 6743 ; 00001a57H
  00090	c7 45 b4 0e 1a
	00 00		 mov	 DWORD PTR tv642[ebp], 6670 ; 00001a0eH
  00097	c7 45 b0 35 1c
	00 00		 mov	 DWORD PTR tv644[ebp], 7221 ; 00001c35H
  0009e	66 90		 npad	 2
$LL4@ChaosBoxMi:

; 204  : 	{
; 205  : 		if ( lpObj->pChaosBox[n].IsItem() == TRUE )

  000a0	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000a6	03 ce		 add	 ecx, esi
  000a8	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 85 93 01 00
	00		 jne	 $LN2@ChaosBoxMi

; 206  : 		{
; 207  : 			lpObj->pChaosBox[n].OldValue();

  000b6	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000bc	03 ce		 add	 ecx, esi
  000be	e8 00 00 00 00	 call	 ?OldValue@CItem@@QAEXXZ	; CItem::OldValue

; 208  : 			add = 0;
; 209  : 			nv = 0;
; 210  : 
; 211  : 			if ( lpObj->pChaosBox[n].m_Level >= MIN_CHAOS_ITEM_LEVEL && (lpObj->pChaosBox[n].m_Option3 *4) >= MIN_CHAOS_ITEM_LEVEL )

  000c3	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  000c9	33 c0		 xor	 eax, eax
  000cb	89 45 d8	 mov	 DWORD PTR _add$1$[ebp], eax
  000ce	89 45 ec	 mov	 DWORD PTR _nv$1$[ebp], eax
  000d1	66 83 7c 0e 08
	04		 cmp	 WORD PTR [esi+ecx+8], 4
  000d7	7c 4f		 jl	 SHORT $LN10@ChaosBoxMi
  000d9	0f b6 84 0e 92
	00 00 00	 movzx	 eax, BYTE PTR [esi+ecx+146]
  000e1	c1 e0 02	 shl	 eax, 2
  000e4	83 f8 04	 cmp	 eax, 4
  000e7	7c 3f		 jl	 SHORT $LN10@ChaosBoxMi

; 212  : 			{
; 213  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;

  000e9	8b 94 0e 8c 00
	00 00		 mov	 edx, DWORD PTR [esi+ecx+140]

; 214  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;

  000f0	03 fa		 add	 edi, edx

; 215  : 				add = 1;
; 216  : 
; 217  : 				if ( lpObj->pChaosBox[n].m_Type == ITEMGET(2,6) || lpObj->pChaosBox[n].m_Type == ITEMGET(4,6) || lpObj->pChaosBox[n].m_Type == ITEMGET(5,7) )	// Chaos Items

  000f2	0f b7 44 0e 06	 movzx	 eax, WORD PTR [esi+ecx+6]
  000f7	b9 06 04 00 00	 mov	 ecx, 1030		; 00000406H
  000fc	89 55 ec	 mov	 DWORD PTR _nv$1$[ebp], edx
  000ff	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _add$1$[ebp], 1
  00106	66 3b c1	 cmp	 ax, cx
  00109	74 14		 je	 SHORT $LN11@ChaosBoxMi
  0010b	b9 06 08 00 00	 mov	 ecx, 2054		; 00000806H
  00110	66 3b c1	 cmp	 ax, cx
  00113	74 0a		 je	 SHORT $LN11@ChaosBoxMi
  00115	b9 07 0a 00 00	 mov	 ecx, 2567		; 00000a07H
  0011a	66 3b c1	 cmp	 ax, cx
  0011d	75 09		 jne	 SHORT $LN10@ChaosBoxMi
$LN11@ChaosBoxMi:

; 218  : 				{
; 219  : 					Result2 = 1;

  0011f	8b 45 d0	 mov	 eax, DWORD PTR _Result2$GSCopy$1$[ebp]
  00122	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN10@ChaosBoxMi:

; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) )

  00128	8b 93 10 12 00
	00		 mov	 edx, DWORD PTR [ebx+4624]
  0012e	b9 0f 18 00 00	 mov	 ecx, 6159		; 0000180fH
  00133	03 d6		 add	 edx, esi
  00135	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  00139	66 3b c1	 cmp	 ax, cx
  0013c	75 15		 jne	 SHORT $LN12@ChaosBoxMi

; 224  : 			{
; 225  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;

  0013e	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  00144	03 f9		 add	 edi, ecx

; 226  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;
; 227  : 				ChaosDiamond++;

  00146	ff 45 e4	 inc	 DWORD PTR _ChaosDiamond$1$[ebp]
  00149	89 4d ec	 mov	 DWORD PTR _nv$1$[ebp], ecx

; 228  : 				add = 1;

  0014c	b9 01 00 00 00	 mov	 ecx, 1
  00151	eb 29		 jmp	 SHORT $LN14@ChaosBoxMi
$LN12@ChaosBoxMi:

; 229  : 			}
; 230  : 			else if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) || lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) )	// Jewel of Bless, Jewel of Soul

  00153	b9 0d 1c 00 00	 mov	 ecx, 7181		; 00001c0dH
  00158	66 3b c1	 cmp	 ax, cx
  0015b	74 0a		 je	 SHORT $LN15@ChaosBoxMi
  0015d	b9 0e 1c 00 00	 mov	 ecx, 7182		; 00001c0eH
  00162	66 3b c1	 cmp	 ax, cx
  00165	75 12		 jne	 SHORT $LN39@ChaosBoxMi
$LN15@ChaosBoxMi:

; 231  : 			{
; 232  : 				value += lpObj->pChaosBox[n].m_OldBuyMoney;

  00167	8b 8a 8c 00 00
	00		 mov	 ecx, DWORD PTR [edx+140]
  0016d	03 f9		 add	 edi, ecx
  0016f	89 4d ec	 mov	 DWORD PTR _nv$1$[ebp], ecx

; 233  : 				nv = lpObj->pChaosBox[n].m_OldBuyMoney;
; 234  : 				add = 1;

  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	eb 03		 jmp	 SHORT $LN14@ChaosBoxMi
$LN39@ChaosBoxMi:
  00179	8b 4d d8	 mov	 ecx, DWORD PTR _add$1$[ebp]
$LN14@ChaosBoxMi:

; 235  : 			}
; 236  : 
; 237  : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(13,83) ||
; 238  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,84) ||
; 239  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,85) ||
; 240  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,86) ||

  0017c	66 3b 45 cc	 cmp	 ax, WORD PTR tv631[ebp]
  00180	74 18		 je	 SHORT $LN17@ChaosBoxMi
  00182	66 3b 45 c8	 cmp	 ax, WORD PTR tv633[ebp]
  00186	74 12		 je	 SHORT $LN17@ChaosBoxMi
  00188	66 3b 45 c4	 cmp	 ax, WORD PTR tv635[ebp]
  0018c	74 0c		 je	 SHORT $LN17@ChaosBoxMi
  0018e	66 3b 45 c0	 cmp	 ax, WORD PTR tv637[ebp]
  00192	74 06		 je	 SHORT $LN17@ChaosBoxMi
  00194	66 3b 45 bc	 cmp	 ax, WORD PTR tv639[ebp]
  00198	75 09		 jne	 SHORT $LN16@ChaosBoxMi
$LN17@ChaosBoxMi:

; 241  : 				lpObj->pChaosBox[n].m_Type == ITEMGET(13,87) )
; 242  : 			{
; 243  : 				tmpItem = lpObj->pChaosBox[n].m_Type;

  0019a	0f bf d8	 movsx	 ebx, ax
  0019d	89 5d d4	 mov	 DWORD PTR _tmpItem$1$[ebp], ebx
  001a0	8b 5d b8	 mov	 ebx, DWORD PTR _lpObj$GSCopy$1$[ebp]
$LN16@ChaosBoxMi:

; 244  : 			}
; 245  : 
; 246  : 			if( lpObj->pChaosBox[n].m_Type == ITEMGET(13,14) )

  001a3	66 3b 45 b4	 cmp	 ax, WORD PTR tv642[ebp]
  001a7	0f 84 ca 00 00
	00		 je	 $LN34@ChaosBoxMi

; 247  : 			{
; 248  : 				return false;
; 249  : 			}
; 250  : 
; 251  : 			if ( lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )	// Charm Of Luck

  001ad	66 3b 45 b0	 cmp	 ax, WORD PTR tv644[ebp]
  001b1	75 08		 jne	 SHORT $LN19@ChaosBoxMi

; 252  : 			{
; 253  : 				iCharmOfLuckCount += (int)lpObj->pChaosBox[n].m_Durability;

  001b3	f3 0f 2c 42 24	 cvttss2si eax, DWORD PTR [edx+36]
  001b8	01 45 dc	 add	 DWORD PTR _iCharmOfLuckCount$1$[ebp], eax
$LN19@ChaosBoxMi:

; 254  : 			}
; 255  : 
; 256  : 			if ( add != 0  )

  001bb	85 c9		 test	 ecx, ecx
  001bd	74 03		 je	 SHORT $LN20@ChaosBoxMi

; 257  : 			{
; 258  : 				ChaosItems++;

  001bf	ff 45 e0	 inc	 DWORD PTR _ChaosItems$1$[ebp]
$LN20@ChaosBoxMi:

; 259  : 			}
; 260  : 
; 261  : 			ItemIsBufExOption(ExOption, &lpObj->pChaosBox[n]);

  001c2	52		 push	 edx
  001c3	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 262  : 			LogAdd("[%s][%s] CBMix [%d,%s,%d,%d,%d,%d]serial:[%u][%d][%d] Ex:[%d,%d,%d,%d,%d,%d,%d]",

  001cc	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  001d2	83 c4 08	 add	 esp, 8
  001d5	03 ce		 add	 ecx, esi
  001d7	0f b6 81 aa 00
	00 00		 movzx	 eax, BYTE PTR [ecx+170]
  001de	50		 push	 eax
  001df	0f b6 45 fa	 movzx	 eax, BYTE PTR _ExOption$[ebp+6]
  001e3	50		 push	 eax
  001e4	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  001e8	50		 push	 eax
  001e9	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  001ed	50		 push	 eax
  001ee	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  001f2	50		 push	 eax
  001f3	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  001f7	50		 push	 eax
  001f8	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  001fc	50		 push	 eax
  001fd	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  00201	50		 push	 eax
  00202	f3 0f 2c 41 24	 cvttss2si eax, DWORD PTR [ecx+36]
  00207	ff 75 ec	 push	 DWORD PTR _nv$1$[ebp]
  0020a	50		 push	 eax
  0020b	ff 31		 push	 DWORD PTR [ecx]
  0020d	0f b6 81 92 00
	00 00		 movzx	 eax, BYTE PTR [ecx+146]
  00214	50		 push	 eax
  00215	0f b6 81 91 00
	00 00		 movzx	 eax, BYTE PTR [ecx+145]
  0021c	50		 push	 eax
  0021d	0f b6 81 90 00
	00 00		 movzx	 eax, BYTE PTR [ecx+144]
  00224	50		 push	 eax
  00225	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?GetName@CItem@@QAEPADXZ ; CItem::GetName
  0022f	50		 push	 eax
  00230	ff 75 e8	 push	 DWORD PTR _n$1$[ebp]
  00233	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00236	50		 push	 eax
  00237	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0023a	50		 push	 eax
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@FKHLLHEC@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5?$FL?$CFd?0?$CFs?0?$CFd?0?$CFd?0?$CFd?0?$CF@
  00240	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00246	83 c4 50	 add	 esp, 80			; 00000050H
$LN2@ChaosBoxMi:

; 202  : 
; 203  : 	for ( int n=0;n<CHAOS_BOX_SIZE;n++)

  00249	ff 45 e8	 inc	 DWORD PTR _n$1$[ebp]
  0024c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00252	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00258	0f 8c 42 fe ff
	ff		 jl	 $LL4@ChaosBoxMi

; 263  : 				lpObj->AccountID, lpObj->Name, n, lpObj->pChaosBox[n].GetName(),
; 264  : 				lpObj->pChaosBox[n].m_Level, lpObj->pChaosBox[n].m_Option1,
; 265  : 				lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3,
; 266  : 				lpObj->pChaosBox[n].m_Number, (int)lpObj->pChaosBox[n].m_Durability,
; 267  : 				nv, ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5],
; 268  : 				ExOption[6], lpObj->pChaosBox[n].m_SetOption);
; 269  : 		
; 270  : 
; 271  : 
; 272  : 
; 273  : 		}
; 274  : 	}
; 275  : 
; 276  : 	if ( ChaosDiamond == 0 )

  0025e	8b 4d e4	 mov	 ecx, DWORD PTR _ChaosDiamond$1$[ebp]
  00261	33 c0		 xor	 eax, eax

; 277  : 	{
; 278  : 		value = 0;	// 0% of success
; 279  : 	}
; 280  : 
; 281  : 	if ( ChaosItems < 2 )
; 282  : 	{
; 283  : 		value = 0;// 0% of success
; 284  : 	}
; 285  : 
; 286  : 	if ( iCharmOfLuckCount > 10 )

  00263	8b 75 dc	 mov	 esi, DWORD PTR _iCharmOfLuckCount$1$[ebp]
  00266	85 c9		 test	 ecx, ecx
  00268	0f 44 f8	 cmove	 edi, eax
  0026b	83 7d e0 02	 cmp	 DWORD PTR _ChaosItems$1$[ebp], 2
  0026f	0f 4c f8	 cmovl	 edi, eax
  00272	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00275	7e 15		 jle	 SHORT $LN23@ChaosBoxMi
$LN34@ChaosBoxMi:
  00277	5f		 pop	 edi
  00278	5e		 pop	 esi

; 287  : 		return FALSE;

  00279	33 c0		 xor	 eax, eax
  0027b	5b		 pop	 ebx

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  0027c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0027f	33 cd		 xor	 ecx, ebp
  00281	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00286	8b e5		 mov	 esp, ebp
  00288	5d		 pop	 ebp
  00289	c2 0c 00	 ret	 12			; 0000000cH
$LN23@ChaosBoxMi:

; 288  : 
; 289  : 
; 290  : 	
; 291  : 	lpObj->ChaosSuccessRate = value / 10000;

  0028c	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH

; 292  : 	lpObj->ChaosSuccessRate += iCharmOfLuckCount;
; 293  : 
; 294  : 	if ( lpObj->ChaosSuccessRate  > 100 )

  00291	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00296	f7 ef		 imul	 edi

; 295  : 	{
; 296  : 		lpObj->ChaosSuccessRate = 100;
; 297  : 	}
; 298  : 
; 299  : 	lpObj->ChaosMoney = lpObj->ChaosSuccessRate * 10000;	// Required Money to MIX anc createe a Chaos Item
; 300  : 
; 301  : 	LogAddTD("[%s][%s] CBMix need Zen : %d SuccessRate : %d, CharmRate : %d",

  00298	56		 push	 esi
  00299	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0029c	8b c2		 mov	 eax, edx
  0029e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002a1	03 c2		 add	 eax, edx
  002a3	03 c6		 add	 eax, esi
  002a5	3b c1		 cmp	 eax, ecx
  002a7	0f 4f c1	 cmovg	 eax, ecx
  002aa	69 c8 10 27 00
	00		 imul	 ecx, eax, 10000
  002b0	50		 push	 eax
  002b1	89 83 1c 12 00
	00		 mov	 DWORD PTR [ebx+4636], eax
  002b7	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  002ba	51		 push	 ecx
  002bb	50		 push	 eax
  002bc	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  002bf	89 8b 18 12 00
	00		 mov	 DWORD PTR [ebx+4632], ecx
  002c5	50		 push	 eax
  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@PLIHJFD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix?5need?5Zen?5?3?5?$CFd?5Suc@
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 302  : 		lpObj->AccountID, lpObj->Name, lpObj->ChaosMoney, 
; 303  : 		lpObj->ChaosSuccessRate, iCharmOfLuckCount);
; 304  : 
; 305  : 
; 306  : 	if( tmpItem > -1 )

  002d1	8b 55 d4	 mov	 edx, DWORD PTR _tmpItem$1$[ebp]
  002d4	83 c4 18	 add	 esp, 24			; 00000018H
  002d7	83 fa ff	 cmp	 edx, -1
  002da	7e 5d		 jle	 SHORT $LN5@ChaosBoxMi

; 307  : 	{
; 308  : 		int Number = tmpItem^ITEMGET(13,00);

  002dc	8b c2		 mov	 eax, edx
  002de	35 00 1a 00 00	 xor	 eax, 6656		; 00001a00H

; 309  : 
; 310  : 		switch( Number )

  002e3	8d 48 ad	 lea	 ecx, DWORD PTR [eax-83]
  002e6	83 f9 04	 cmp	 ecx, 4
  002e9	77 3e		 ja	 SHORT $LN31@ChaosBoxMi
  002eb	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN43@ChaosBoxMi[ecx*4]
$LN26@ChaosBoxMi:

; 311  : 		{
; 312  : 		case 83:
; 313  : 			Result3 = 2;

  002f2	8b 45 f0	 mov	 eax, DWORD PTR _Result3$GSCopy$1$[ebp]
  002f5	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 314  : 			break;

  002fb	eb 3c		 jmp	 SHORT $LN5@ChaosBoxMi
$LN27@ChaosBoxMi:

; 315  : 		case 84:
; 316  : 			Result3 = 1;

  002fd	8b 45 f0	 mov	 eax, DWORD PTR _Result3$GSCopy$1$[ebp]
  00300	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 317  : 			break;

  00306	eb 31		 jmp	 SHORT $LN5@ChaosBoxMi
$LN28@ChaosBoxMi:

; 318  : 		case 85:
; 319  : 			Result3 = 0;

  00308	8b 45 f0	 mov	 eax, DWORD PTR _Result3$GSCopy$1$[ebp]
  0030b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 320  : 			break;

  00311	eb 26		 jmp	 SHORT $LN5@ChaosBoxMi
$LN29@ChaosBoxMi:

; 321  : 		case 86:
; 322  : 			Result3 = 41;

  00313	8b 45 f0	 mov	 eax, DWORD PTR _Result3$GSCopy$1$[ebp]
  00316	c7 00 29 00 00
	00		 mov	 DWORD PTR [eax], 41	; 00000029H

; 323  : 			break;

  0031c	eb 1b		 jmp	 SHORT $LN5@ChaosBoxMi
$LN30@ChaosBoxMi:

; 324  : 		case 87:
; 325  : 			Result3 = 40;

  0031e	8b 45 f0	 mov	 eax, DWORD PTR _Result3$GSCopy$1$[ebp]
  00321	c7 00 28 00 00
	00		 mov	 DWORD PTR [eax], 40	; 00000028H

; 326  : 			break;

  00327	eb 10		 jmp	 SHORT $LN5@ChaosBoxMi
$LN31@ChaosBoxMi:

; 327  : 		default:
; 328  : 			LogAddTD("[MixSystem] WingCharmItemNum => %d , WingCharmIndex => %d",tmpItem,Number);

  00329	50		 push	 eax
  0032a	52		 push	 edx
  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EKDAKNF@?$FLMixSystem?$FN?5WingCharmItemNum?5?$DN?$DO?5@
  00330	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00336	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ChaosBoxMi:

; 329  : 			break;
; 330  : 		}
; 331  : 	}
; 332  : 
; 333  : 	return value;
; 334  : }

  00339	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033c	8b c7		 mov	 eax, edi
  0033e	5f		 pop	 edi
  0033f	5e		 pop	 esi
  00340	33 cd		 xor	 ecx, ebp
  00342	5b		 pop	 ebx
  00343	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00348	8b e5		 mov	 esp, ebp
  0034a	5d		 pop	 ebp
  0034b	c2 0c 00	 ret	 12			; 0000000cH
  0034e	66 90		 npad	 2
$LN43@ChaosBoxMi:
  00350	00 00 00 00	 DD	 $LN26@ChaosBoxMi
  00354	00 00 00 00	 DD	 $LN27@ChaosBoxMi
  00358	00 00 00 00	 DD	 $LN28@ChaosBoxMi
  0035c	00 00 00 00	 DD	 $LN29@ChaosBoxMi
  00360	00 00 00 00	 DD	 $LN30@ChaosBoxMi
?ChaosBoxMix@CChaosBox@@QAEHPAUOBJECTSTRUCT@@AAH1@Z ENDP ; CChaosBox::ChaosBoxMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv552 = -4						; size = 4
_op$2$ = 8						; size = 4
_op$1$ = 8						; size = 4
_lpObj$ = 8						; size = 4
?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CChaosBox::ChaosBoxItemDown, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 114  : 	if ( lpObj->pChaosBox == NULL )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	83 bb 10 12 00
	00 00		 cmp	 DWORD PTR [ebx+4624], 0
  0000f	75 09		 jne	 SHORT $LN5@ChaosBoxIt

; 115  : 	{
; 116  : 		return FALSE;

  00011	33 c0		 xor	 eax, eax
  00013	5b		 pop	 ebx

; 178  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@ChaosBoxIt:

; 117  : 	}
; 118  : 
; 119  : 	for (int n=0;n<CHAOS_BOX_SIZE;n++)

  0001a	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0001f	c7 45 fc 0f 18
	00 00		 mov	 DWORD PTR tv552[ebp], 6159 ; 0000180fH
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	33 ff		 xor	 edi, edi
  0002a	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0002d	0f 1f 00	 npad	 3
$LL4@ChaosBoxIt:

; 120  : 	{
; 121  : 		if ( lpObj->pChaosBox[n].m_Type == ITEMGET(12,15) ||
; 122  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,13) ||
; 123  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,14) ||
; 124  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,83) ||
; 125  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,84) ||
; 126  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,85) ||
; 127  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,86) ||
; 128  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,87) ||
; 129  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,88) ||
; 130  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,89) ||
; 131  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,90) ||
; 132  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,91) ||
; 133  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(13,92) ||

  00030	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00036	03 cf		 add	 ecx, edi
  00038	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  0003c	66 3b 45 fc	 cmp	 ax, WORD PTR tv552[ebp]
  00040	0f 84 e5 01 00
	00		 je	 $LN8@ChaosBoxIt
  00046	66 3b c2	 cmp	 ax, dx
  00049	0f 84 dc 01 00
	00		 je	 $LN8@ChaosBoxIt
  0004f	66 3b c6	 cmp	 ax, si
  00052	0f 84 d3 01 00
	00		 je	 $LN8@ChaosBoxIt
  00058	ba 53 1a 00 00	 mov	 edx, 6739		; 00001a53H
  0005d	66 3b c2	 cmp	 ax, dx
  00060	0f 84 c5 01 00
	00		 je	 $LN8@ChaosBoxIt
  00066	ba 54 1a 00 00	 mov	 edx, 6740		; 00001a54H
  0006b	66 3b c2	 cmp	 ax, dx
  0006e	0f 84 b7 01 00
	00		 je	 $LN8@ChaosBoxIt
  00074	ba 55 1a 00 00	 mov	 edx, 6741		; 00001a55H
  00079	66 3b c2	 cmp	 ax, dx
  0007c	0f 84 a9 01 00
	00		 je	 $LN8@ChaosBoxIt
  00082	ba 56 1a 00 00	 mov	 edx, 6742		; 00001a56H
  00087	66 3b c2	 cmp	 ax, dx
  0008a	0f 84 9b 01 00
	00		 je	 $LN8@ChaosBoxIt
  00090	ba 57 1a 00 00	 mov	 edx, 6743		; 00001a57H
  00095	66 3b c2	 cmp	 ax, dx
  00098	0f 84 8d 01 00
	00		 je	 $LN8@ChaosBoxIt
  0009e	ba 58 1a 00 00	 mov	 edx, 6744		; 00001a58H
  000a3	66 3b c2	 cmp	 ax, dx
  000a6	0f 84 7f 01 00
	00		 je	 $LN8@ChaosBoxIt
  000ac	ba 59 1a 00 00	 mov	 edx, 6745		; 00001a59H
  000b1	66 3b c2	 cmp	 ax, dx
  000b4	0f 84 71 01 00
	00		 je	 $LN8@ChaosBoxIt
  000ba	ba 5a 1a 00 00	 mov	 edx, 6746		; 00001a5aH
  000bf	66 3b c2	 cmp	 ax, dx
  000c2	0f 84 63 01 00
	00		 je	 $LN8@ChaosBoxIt
  000c8	ba 5b 1a 00 00	 mov	 edx, 6747		; 00001a5bH
  000cd	66 3b c2	 cmp	 ax, dx
  000d0	0f 84 55 01 00
	00		 je	 $LN8@ChaosBoxIt
  000d6	ba 5c 1a 00 00	 mov	 edx, 6748		; 00001a5cH
  000db	66 3b c2	 cmp	 ax, dx
  000de	0f 84 47 01 00
	00		 je	 $LN8@ChaosBoxIt
  000e4	ba 35 1c 00 00	 mov	 edx, 7221		; 00001c35H
  000e9	66 3b c2	 cmp	 ax, dx
  000ec	0f 84 39 01 00
	00		 je	 $LN8@ChaosBoxIt

; 137  : 		}
; 138  : 		else
; 139  : 		{
; 140  : 			int op = lpObj->pChaosBox[n].m_Option1;

  000f2	0f b6 81 90 00
	00 00		 movzx	 eax, BYTE PTR [ecx+144]
  000f9	89 45 08	 mov	 DWORD PTR _op$1$[ebp], eax

; 141  : 
; 142  : 			if ( op > 0 )

  000fc	85 c0		 test	 eax, eax
  000fe	7e 19		 jle	 SHORT $LN19@ChaosBoxIt

; 143  : 			{
; 144  : 				if ( (rand() % 2) == 0 )

  00100	e8 00 00 00 00	 call	 _rand
  00105	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0010a	79 05		 jns	 SHORT $LN23@ChaosBoxIt
  0010c	48		 dec	 eax
  0010d	83 c8 fe	 or	 eax, -2			; fffffffeH
  00110	40		 inc	 eax
$LN23@ChaosBoxIt:

; 145  : 				{
; 146  : 					op--;

  00111	8b 4d 08	 mov	 ecx, DWORD PTR _op$1$[ebp]

; 143  : 			{
; 144  : 				if ( (rand() % 2) == 0 )

  00114	75 06		 jne	 SHORT $LN10@ChaosBoxIt

; 145  : 				{
; 146  : 					op--;

  00116	49		 dec	 ecx
  00117	eb 03		 jmp	 SHORT $LN10@ChaosBoxIt
$LN19@ChaosBoxIt:
  00119	8b 4d 08	 mov	 ecx, DWORD PTR _op$1$[ebp]
$LN10@ChaosBoxIt:

; 147  : 				}
; 148  : 			}
; 149  : 
; 150  : 			lpObj->pChaosBox[n].m_Option1 = op;

  0011c	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00122	88 8c 07 90 00
	00 00		 mov	 BYTE PTR [edi+eax+144], cl

; 151  : 			op = lpObj->pChaosBox[n].m_Option3;

  00129	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0012f	0f b6 84 07 92
	00 00 00	 movzx	 eax, BYTE PTR [edi+eax+146]
  00137	89 45 08	 mov	 DWORD PTR _op$2$[ebp], eax

; 152  : 
; 153  : 			if ( op > 0 )

  0013a	85 c0		 test	 eax, eax
  0013c	7e 19		 jle	 SHORT $LN21@ChaosBoxIt

; 154  : 			{
; 155  : 				if ( (rand() % 2) == 0 )

  0013e	e8 00 00 00 00	 call	 _rand
  00143	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00148	79 05		 jns	 SHORT $LN24@ChaosBoxIt
  0014a	48		 dec	 eax
  0014b	83 c8 fe	 or	 eax, -2			; fffffffeH
  0014e	40		 inc	 eax
$LN24@ChaosBoxIt:

; 156  : 				{
; 157  : 					op--;

  0014f	8b 4d 08	 mov	 ecx, DWORD PTR _op$2$[ebp]

; 154  : 			{
; 155  : 				if ( (rand() % 2) == 0 )

  00152	75 06		 jne	 SHORT $LN12@ChaosBoxIt

; 156  : 				{
; 157  : 					op--;

  00154	49		 dec	 ecx
  00155	eb 03		 jmp	 SHORT $LN12@ChaosBoxIt
$LN21@ChaosBoxIt:
  00157	8b 4d 08	 mov	 ecx, DWORD PTR _op$2$[ebp]
$LN12@ChaosBoxIt:

; 158  : 				}
; 159  : 			}
; 160  : 
; 161  : 			lpObj->pChaosBox[n].m_Option3 = op;

  0015a	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  00160	88 8c 07 92 00
	00 00		 mov	 BYTE PTR [edi+eax+146], cl

; 162  : 
; 163  : 			if ( lpObj->pChaosBox[n].m_Level > 0 )

  00167	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  0016d	66 83 7c 07 08
	00		 cmp	 WORD PTR [edi+eax+8], 0
  00173	7e 14		 jle	 SHORT $LN13@ChaosBoxIt

; 164  : 			{
; 165  : 				lpObj->pChaosBox[n].m_Level = rand() % lpObj->pChaosBox[n].m_Level;

  00175	8b f0		 mov	 esi, eax
  00177	e8 00 00 00 00	 call	 _rand
  0017c	0f bf 4c 37 08	 movsx	 ecx, WORD PTR [edi+esi+8]
  00181	99		 cdq
  00182	f7 f9		 idiv	 ecx
  00184	66 89 54 37 08	 mov	 WORD PTR [edi+esi+8], dx
$LN13@ChaosBoxIt:

; 166  : 			}
; 167  : 
; 168  : 			float dur = (float)ItemGetDurability(lpObj->pChaosBox[n].m_Type, lpObj->pChaosBox[n].m_Level, lpObj->pChaosBox[n].IsExtItem(), lpObj->pChaosBox[n].IsSetItem() );

  00189	8b b3 10 12 00
	00		 mov	 esi, DWORD PTR [ebx+4624]
  0018f	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
  00192	e8 00 00 00 00	 call	 ?IsSetItem@CItem@@QAEHXZ ; CItem::IsSetItem
  00197	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  0019d	50		 push	 eax
  0019e	03 cf		 add	 ecx, edi
  001a0	e8 00 00 00 00	 call	 ?IsExtItem@CItem@@QAEHXZ ; CItem::IsExtItem
  001a5	50		 push	 eax
  001a6	0f bf 44 37 08	 movsx	 eax, WORD PTR [edi+esi+8]
  001ab	50		 push	 eax
  001ac	0f bf 44 37 06	 movsx	 eax, WORD PTR [edi+esi+6]
  001b1	50		 push	 eax
  001b2	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  001b7	83 c4 10	 add	 esp, 16			; 00000010H
  001ba	66 0f 6e c0	 movd	 xmm0, eax

; 169  : 			
; 170  : 			lpObj->pChaosBox[n].m_Durability =  dur * lpObj->pChaosBox[n].m_Durability / lpObj->pChaosBox[n].m_BaseDurability;

  001be	8b 83 10 12 00
	00		 mov	 eax, DWORD PTR [ebx+4624]
  001c4	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 171  : 			lpObj->pChaosBox[n].Convert(lpObj->pChaosBox[n].m_Type, lpObj->pChaosBox[n].m_Option1,

  001c7	6a 03		 push	 3
  001c9	68 ff 00 00 00	 push	 255			; 000000ffH
  001ce	6a 00		 push	 0
  001d0	f3 0f 59 44 07
	24		 mulss	 xmm0, DWORD PTR [edi+eax+36]
  001d6	f3 0f 5e 44 07
	2c		 divss	 xmm0, DWORD PTR [edi+eax+44]
  001dc	f3 0f 11 44 07
	24		 movss	 DWORD PTR [edi+eax+36], xmm0
  001e2	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  001e8	03 cf		 add	 ecx, edi
  001ea	0f b6 81 c6 00
	00 00		 movzx	 eax, BYTE PTR [ecx+198]
  001f1	50		 push	 eax
  001f2	0f b6 81 aa 00
	00 00		 movzx	 eax, BYTE PTR [ecx+170]
  001f9	50		 push	 eax
  001fa	0f b6 81 93 00
	00 00		 movzx	 eax, BYTE PTR [ecx+147]
  00201	50		 push	 eax
  00202	0f b6 81 92 00
	00 00		 movzx	 eax, BYTE PTR [ecx+146]
  00209	50		 push	 eax
  0020a	0f b6 81 91 00
	00 00		 movzx	 eax, BYTE PTR [ecx+145]
  00211	50		 push	 eax
  00212	0f b6 81 90 00
	00 00		 movzx	 eax, BYTE PTR [ecx+144]
  00219	50		 push	 eax
  0021a	0f bf 41 06	 movsx	 eax, WORD PTR [ecx+6]
  0021e	50		 push	 eax
  0021f	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert
  00224	be 0e 1c 00 00	 mov	 esi, 7182		; 00001c0eH
  00229	eb 05		 jmp	 SHORT $LN2@ChaosBoxIt
$LN8@ChaosBoxIt:

; 134  : 			 lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )
; 135  : 		{
; 136  : 			lpObj->pChaosBox[n].Clear();

  0022b	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
$LN2@ChaosBoxIt:

; 117  : 	}
; 118  : 
; 119  : 	for (int n=0;n<CHAOS_BOX_SIZE;n++)

  00230	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00236	ba 0d 1c 00 00	 mov	 edx, 7181		; 00001c0dH
  0023b	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00241	0f 8c e9 fd ff
	ff		 jl	 $LL4@ChaosBoxIt

; 172  : 				lpObj->pChaosBox[n].m_Option2, lpObj->pChaosBox[n].m_Option3, lpObj->pChaosBox[n].m_NewOption,
; 173  : 				lpObj->pChaosBox[n].m_SetOption, lpObj->pChaosBox[n].m_ItemOptionEx, 0, -1, CURRENT_DB_VERSION);
; 174  : 		}
; 175  : 	}
; 176  : 
; 177  : 	return TRUE;

  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	b8 01 00 00 00	 mov	 eax, 1
  0024e	5b		 pop	 ebx

; 178  : }

  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c2 04 00	 ret	 4
?ChaosBoxItemDown@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CChaosBox::ChaosBoxItemDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpObj$ = 8						; size = 4
?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::ChaosBoxInit, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 70   : 	int n;
; 71   : 
; 72   : 	if ( lpObj->pChaosBox != NULL )

  00025	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00028	83 be 10 12 00
	00 00		 cmp	 DWORD PTR [esi+4624], 0
  0002f	74 63		 je	 SHORT $LN11@ChaosBoxIn

; 73   : 	{
; 74   : 		for (n=0;n<CHAOS_BOX_SIZE;n++)

  00031	33 ff		 xor	 edi, edi
$LL4@ChaosBoxIn:

; 75   : 		{
; 76   : 			g_ElementalSystem.ClearErtel(lpObj,&lpObj->pChaosBox[n]);

  00033	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  0003e	03 c7		 add	 eax, edi
  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ?ClearErtel@CElementalSystem@@QAEXPAUOBJECTSTRUCT@@PAVCItem@@@Z ; CElementalSystem::ClearErtel

; 77   : 			lpObj->pChaosBox[n].Clear();

  00047	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  0004d	03 cf		 add	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear
  00054	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  0005a	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  00060	7c d1		 jl	 SHORT $LL4@ChaosBoxIn

; 81   : 		{
; 82   : 			lpObj->pChaosBoxMap[n] = -1;

  00062	8b 86 14 12 00
	00		 mov	 eax, DWORD PTR [esi+4628]
  00068	81 c6 14 12 00
	00		 add	 esi, 4628		; 00001214H
  0006e	33 c9		 xor	 ecx, ecx
  00070	8d 50 1f	 lea	 edx, DWORD PTR [eax+31]
  00073	3b c6		 cmp	 eax, esi
  00075	0f 87 c5 00 00
	00		 ja	 $LN36@ChaosBoxIn
  0007b	3b d6		 cmp	 edx, esi
  0007d	0f 82 bd 00 00
	00		 jb	 $LN36@ChaosBoxIn
$LL53@ChaosBoxIn:
  00083	8b 06		 mov	 eax, DWORD PTR [esi]
  00085	c6 04 01 ff	 mov	 BYTE PTR [ecx+eax], 255	; 000000ffH
  00089	41		 inc	 ecx
  0008a	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0008d	7c f4		 jl	 SHORT $LL53@ChaosBoxIn

; 78   : 		}
; 79   : 
; 80   : 		for (n=0;n<CHAOS_BOX_SIZE;n++)

  0008f	e9 ba 00 00 00	 jmp	 $LN9@ChaosBoxIn
$LN11@ChaosBoxIn:

; 83   : 		}
; 84   : 		return true;
; 85   : 	}
; 86   : 
; 87   : 	lpObj->pChaosBox = new CItem[CHAOS_BOX_SIZE];

  00094	68 80 1a 00 00	 push	 6784			; 00001a80H
  00099	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009e	83 c4 04	 add	 esp, 4
  000a1	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  000a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ab	85 c0		 test	 eax, eax
  000ad	74 21		 je	 SHORT $LN15@ChaosBoxIn
  000af	8b f8		 mov	 edi, eax
  000b1	be 20 00 00 00	 mov	 esi, 32			; 00000020H
$LL19@ChaosBoxIn:
  000b6	8b cf		 mov	 ecx, edi
  000b8	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  000bd	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  000c3	83 ee 01	 sub	 esi, 1
  000c6	75 ee		 jne	 SHORT $LL19@ChaosBoxIn
  000c8	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  000cb	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  000ce	eb 02		 jmp	 SHORT $LN16@ChaosBoxIn
$LN15@ChaosBoxIn:
  000d0	33 c0		 xor	 eax, eax
$LN16@ChaosBoxIn:
  000d2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d9	89 86 10 12 00
	00		 mov	 DWORD PTR [esi+4624], eax

; 88   : 
; 89   : 	if ( lpObj->pChaosBox == NULL )

  000df	85 c0		 test	 eax, eax
  000e1	74 2d		 je	 SHORT $LN61@ChaosBoxIn

; 90   : 	{
; 91   : 		return false;
; 92   : 	}
; 93   : 
; 94   : 	lpObj->pChaosBoxMap = new unsigned char[CHAOS_BOX_SIZE];

  000e3	6a 20		 push	 32			; 00000020H
  000e5	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000ea	83 c4 04	 add	 esp, 4
  000ed	89 86 14 12 00
	00		 mov	 DWORD PTR [esi+4628], eax
  000f3	8d 96 14 12 00
	00		 lea	 edx, DWORD PTR [esi+4628]

; 95   : 
; 96   : 	if ( lpObj->pChaosBoxMap == NULL )

  000f9	85 c0		 test	 eax, eax
  000fb	75 28		 jne	 SHORT $LN13@ChaosBoxIn

; 97   : 	{
; 98   : 		delete lpObj->pChaosBox;

  000fd	68 d4 00 00 00	 push	 212			; 000000d4H
  00102	ff b6 10 12 00
	00		 push	 DWORD PTR [esi+4624]
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
$LN61@ChaosBoxIn:

; 99   : 		return false;

  00110	33 c0		 xor	 eax, eax

; 108  : }

  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
$LN13@ChaosBoxIn:

; 100  : 	}
; 101  : 
; 102  : 	for (n=0;n<CHAOS_BOX_SIZE;n++)

  00125	33 c9		 xor	 ecx, ecx
  00127	8d 70 1f	 lea	 esi, DWORD PTR [eax+31]
  0012a	3b c2		 cmp	 eax, edx
  0012c	77 12		 ja	 SHORT $LN36@ChaosBoxIn
  0012e	3b f2		 cmp	 esi, edx
  00130	72 0e		 jb	 SHORT $LN36@ChaosBoxIn
$LL56@ChaosBoxIn:

; 103  : 	{
; 104  : 		lpObj->pChaosBoxMap[n] = -1;

  00132	8b 02		 mov	 eax, DWORD PTR [edx]
  00134	c6 04 01 ff	 mov	 BYTE PTR [ecx+eax], 255	; 000000ffH
  00138	41		 inc	 ecx
  00139	83 f9 20	 cmp	 ecx, 32			; 00000020H
  0013c	7c f4		 jl	 SHORT $LL56@ChaosBoxIn

; 100  : 	}
; 101  : 
; 102  : 	for (n=0;n<CHAOS_BOX_SIZE;n++)

  0013e	eb 0e		 jmp	 SHORT $LN9@ChaosBoxIn
$LN36@ChaosBoxIn:

; 103  : 	{
; 104  : 		lpObj->pChaosBoxMap[n] = -1;

  00140	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00147	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0014a	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
$LN9@ChaosBoxIn:

; 105  : 	}
; 106  : 
; 107  : 	return true;

  0014e	b8 01 00 00 00	 mov	 eax, 1

; 108  : }

  00153	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00156	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015d	59		 pop	 ecx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z$0:
  00000	68 80 1a 00 00	 push	 6784			; 00001a80H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::ChaosBoxInit
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CChaosBox::ChaosBoxCheck, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 56   : 	if ( lpObj->pChaosBox == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	39 81 10 12 00
	00		 cmp	 DWORD PTR [ecx+4624], eax
  0000e	0f 95 c0	 setne	 al

; 57   : 	{
; 58   : 		return false;
; 59   : 	}
; 60   : 
; 61   : 	return true;
; 62   : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?ChaosBoxCheck@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CChaosBox::ChaosBoxCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ??1CChaosBox@@UAE@XZ
_TEXT	SEGMENT
??1CChaosBox@@UAE@XZ PROC				; CChaosBox::~CChaosBox, COMDAT
; _this$ = ecx

; 50   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CChaosBox@@6B@

; 51   : 
; 52   : }

  00006	c3		 ret	 0
??1CChaosBox@@UAE@XZ ENDP				; CChaosBox::~CChaosBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ??0CChaosBox@@QAE@XZ
_TEXT	SEGMENT
??0CChaosBox@@QAE@XZ PROC				; CChaosBox::CChaosBox, COMDAT
; _this$ = ecx

; 29   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CChaosBox@@6B@

; 30   : 	iChaosJewel = ITEMGET(12,15);
; 31   : 	iBlessJewel = ITEMGET(14,13);
; 32   : 	iSoulJewel = ITEMGET(14,14);
; 33   : 	iCreationJewel = ITEMGET(14,22);
; 34   : 	iBlessPack = ITEMGET(12,30);
; 35   : 	iSoulPack = ITEMGET(12,31);
; 36   : 	iCondorFeather = ITEMGET(13,53);
; 37   : 	iCondorStone = ITEMGET(13,52);
; 38   : 	iStormWings = ITEMGET(12,36);
; 39   : 	iRedemptionWings = ITEMGET(12,37);
; 40   : 	iFortitudeWings = ITEMGET(12,38);
; 41   : 	iHurricaneWings = ITEMGET(12,39);
; 42   : 	iMonarchMantle = ITEMGET(12,40);
; 43   : 	iDimensionWings = ITEMGET(12,43);
; 44   : 	iRFCape2 = ITEMGET(12,50);
; 45   : 	iOptionRate = 50;
; 46   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 0f 18
	00 00		 mov	 DWORD PTR [ecx+4], 6159	; 0000180fH
  0000f	c7 41 08 0d 1c
	00 00		 mov	 DWORD PTR [ecx+8], 7181	; 00001c0dH
  00016	c7 41 0c 0e 1c
	00 00		 mov	 DWORD PTR [ecx+12], 7182 ; 00001c0eH
  0001d	c7 41 10 16 1c
	00 00		 mov	 DWORD PTR [ecx+16], 7190 ; 00001c16H
  00024	c7 41 14 1e 18
	00 00		 mov	 DWORD PTR [ecx+20], 6174 ; 0000181eH
  0002b	c7 41 18 1f 18
	00 00		 mov	 DWORD PTR [ecx+24], 6175 ; 0000181fH
  00032	c7 41 1c 35 1a
	00 00		 mov	 DWORD PTR [ecx+28], 6709 ; 00001a35H
  00039	c7 41 20 34 1a
	00 00		 mov	 DWORD PTR [ecx+32], 6708 ; 00001a34H
  00040	c7 41 24 24 18
	00 00		 mov	 DWORD PTR [ecx+36], 6180 ; 00001824H
  00047	c7 41 28 25 18
	00 00		 mov	 DWORD PTR [ecx+40], 6181 ; 00001825H
  0004e	c7 41 2c 26 18
	00 00		 mov	 DWORD PTR [ecx+44], 6182 ; 00001826H
  00055	c7 41 30 27 18
	00 00		 mov	 DWORD PTR [ecx+48], 6183 ; 00001827H
  0005c	c7 41 34 28 18
	00 00		 mov	 DWORD PTR [ecx+52], 6184 ; 00001828H
  00063	c7 41 38 2b 18
	00 00		 mov	 DWORD PTR [ecx+56], 6187 ; 0000182bH
  0006a	c7 41 3c 32 18
	00 00		 mov	 DWORD PTR [ecx+60], 6194 ; 00001832H
  00071	c7 41 40 32 00
	00 00		 mov	 DWORD PTR [ecx+64], 50	; 00000032H
  00078	c3		 ret	 0
??0CChaosBox@@QAE@XZ ENDP				; CChaosBox::CChaosBox
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\chaosbox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 6961 : #endif

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
