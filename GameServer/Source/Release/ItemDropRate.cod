; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ItemDropRate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0ItemDropRate@@QAE@XZ				; ItemDropRate::ItemDropRate
PUBLIC	??1ItemDropRate@@UAE@XZ				; ItemDropRate::~ItemDropRate
PUBLIC	?Init@ItemDropRate@@QAEXXZ			; ItemDropRate::Init
PUBLIC	?Load@ItemDropRate@@QAEXXZ			; ItemDropRate::Load
PUBLIC	?Read@ItemDropRate@@QAEXPAD@Z			; ItemDropRate::Read
PUBLIC	?Drop@ItemDropRate@@QAE_NPAUOBJECTSTRUCT@@@Z	; ItemDropRate::Drop
PUBLIC	?GetRanExc@ItemDropRate@@QAEEH@Z		; ItemDropRate::GetRanExc
PUBLIC	?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
PUBLIC	?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::allocate
PUBLIC	?push_back@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXABUItemDropRateInfo@@@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reserve
PUBLIC	??_GItemDropRate@@UAEPAXI@Z			; ItemDropRate::`scalar deleting destructor'
PUBLIC	?MonsterItemDrop@@YAXPAUOBJECTSTRUCT@@@Z	; MonsterItemDrop
PUBLIC	??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
PUBLIC	??_7ItemDropRate@@6B@				; ItemDropRate::`vftable'
PUBLIC	?g_ItemDropRate@@3VItemDropRate@@A		; g_ItemDropRate
PUBLIC	??_C@_0BI@HENAJGIA@Custom?2ItemDropRate?4xml?$AA@ ; `string'
PUBLIC	??_C@_0CC@FJBMIJAK@?$FLItemDropRate?$FN?5File?5?$CFs?5not?5found@ ; `string'
PUBLIC	??_C@_0N@IJOHGNNF@itemdroprate?$AA@		; `string'
PUBLIC	??_C@_04NHONDGDE@item?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_06GJMPOCOI@minlvl?$AA@			; `string'
PUBLIC	??_C@_06GKDMACKH@maxlvl?$AA@			; `string'
PUBLIC	??_C@_05ODMCMJAJ@skill?$AA@			; `string'
PUBLIC	??_C@_04PFGGAFBF@luck?$AA@			; `string'
PUBLIC	??_C@_03KCFMBDBE@opt?$AA@			; `string'
PUBLIC	??_C@_03MGHBCGFO@exc?$AA@			; `string'
PUBLIC	??_C@_03FBLIGOML@anc?$AA@			; `string'
PUBLIC	??_C@_09HFILCGNM@monminlvl?$AA@			; `string'
PUBLIC	??_C@_09HGHIMGJD@monmaxlvl?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_04HCCHHEEF@rate?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4ItemDropRate@@6B@				; ItemDropRate::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVItemDropRate@@@8			; ItemDropRate `RTTI Type Descriptor'
PUBLIC	??_R3ItemDropRate@@8				; ItemDropRate::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ItemDropRate@@8				; ItemDropRate::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ItemDropRate@@8			; ItemDropRate::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	__time64:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
EXTRN	??_EItemDropRate@@UAEPAXI@Z:PROC		; ItemDropRate::`vector deleting destructor'
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	?NewOptionRand@@YAEH@Z:PROC			; NewOptionRand
EXTRN	?GenSetOption@CSetItemOption@@QAEHH@Z:PROC	; CSetItemOption::GenSetOption
EXTRN	?IsElementalItem@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsElementalItem
EXTRN	?IsPentagram@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsPentagram
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gSetItemOption@@3VCSetItemOption@@A:BYTE	; gSetItemOption
EXTRN	?g_ElementalSystem@@3VCElementalSystem@@A:BYTE	; g_ElementalSystem
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_ItemDropRate@@3VItemDropRate@@A DB 010H DUP (?)	; g_ItemDropRate
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ItemDropRate$initializer$@@3P6AXXZA DD FLAT:??__Eg_ItemDropRate@@YAXXZ ; g_ItemDropRate$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@ItemDropRate@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ItemDropRate@@8 DD FLAT:??_R0?AVItemDropRate@@@8 ; ItemDropRate::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ItemDropRate@@8
rdata$r	ENDS
;	COMDAT ??_R2ItemDropRate@@8
rdata$r	SEGMENT
??_R2ItemDropRate@@8 DD FLAT:??_R1A@?0A@EA@ItemDropRate@@8 ; ItemDropRate::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ItemDropRate@@8
rdata$r	SEGMENT
??_R3ItemDropRate@@8 DD 00H				; ItemDropRate::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ItemDropRate@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVItemDropRate@@@8
data$r	SEGMENT
??_R0?AVItemDropRate@@@8 DD FLAT:??_7type_info@@6B@	; ItemDropRate `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVItemDropRate@@', 00H
data$r	ENDS
;	COMDAT ??_R4ItemDropRate@@6B@
rdata$r	SEGMENT
??_R4ItemDropRate@@6B@ DD 00H				; ItemDropRate::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVItemDropRate@@@8
	DD	FLAT:??_R3ItemDropRate@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCCHHEEF@rate?$AA@
CONST	SEGMENT
??_C@_04HCCHHEEF@rate?$AA@ DB 'rate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGHIMGJD@monmaxlvl?$AA@
CONST	SEGMENT
??_C@_09HGHIMGJD@monmaxlvl?$AA@ DB 'monmaxlvl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HFILCGNM@monminlvl?$AA@
CONST	SEGMENT
??_C@_09HFILCGNM@monminlvl?$AA@ DB 'monminlvl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FBLIGOML@anc?$AA@
CONST	SEGMENT
??_C@_03FBLIGOML@anc?$AA@ DB 'anc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHBCGFO@exc?$AA@
CONST	SEGMENT
??_C@_03MGHBCGFO@exc?$AA@ DB 'exc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCFMBDBE@opt?$AA@
CONST	SEGMENT
??_C@_03KCFMBDBE@opt?$AA@ DB 'opt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFGGAFBF@luck?$AA@
CONST	SEGMENT
??_C@_04PFGGAFBF@luck?$AA@ DB 'luck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODMCMJAJ@skill?$AA@
CONST	SEGMENT
??_C@_05ODMCMJAJ@skill?$AA@ DB 'skill', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GKDMACKH@maxlvl?$AA@
CONST	SEGMENT
??_C@_06GKDMACKH@maxlvl?$AA@ DB 'maxlvl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJMPOCOI@minlvl?$AA@
CONST	SEGMENT
??_C@_06GJMPOCOI@minlvl?$AA@ DB 'minlvl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHONDGDE@item?$AA@
CONST	SEGMENT
??_C@_04NHONDGDE@item?$AA@ DB 'item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IJOHGNNF@itemdroprate?$AA@
CONST	SEGMENT
??_C@_0N@IJOHGNNF@itemdroprate?$AA@ DB 'itemdroprate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FJBMIJAK@?$FLItemDropRate?$FN?5File?5?$CFs?5not?5found@
CONST	SEGMENT
??_C@_0CC@FJBMIJAK@?$FLItemDropRate?$FN?5File?5?$CFs?5not?5found@ DB '[It'
	DB	'emDropRate] File %s not found!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HENAJGIA@Custom?2ItemDropRate?4xml?$AA@
CONST	SEGMENT
??_C@_0BI@HENAJGIA@Custom?2ItemDropRate?4xml?$AA@ DB 'Custom\ItemDropRate'
	DB	'.xml', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7ItemDropRate@@6B@
CONST	SEGMENT
??_7ItemDropRate@@6B@ DD FLAT:??_R4ItemDropRate@@6B@	; ItemDropRate::`vftable'
	DD	FLAT:??_EItemDropRate@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@ItemDropRate@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@ItemDropRate@@QAEXPAD@Z$0
__ehfuncinfo$?Read@ItemDropRate@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@ItemDropRate@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@U1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@U1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z PROC ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@U1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z ENDP ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@U1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UItemDropRateInfo@@U1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UItemDropRateInfo@@U1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UItemDropRateInfo@@@std@@YA$$QAUItemDropRateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UItemDropRateInfo@@@std@@YA$$QAUItemDropRateInfo@@AAU1@@Z PROC ; std::forward<ItemDropRateInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UItemDropRateInfo@@@std@@YA$$QAUItemDropRateInfo@@AAU1@@Z ENDP ; std::forward<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@U1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@U1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@U1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UItemDropRateInfo@@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UItemDropRateInfo@@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@@Z PROC ; std::allocator<ItemDropRateInfo>::destroy<ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UItemDropRateInfo@@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@@Z ENDP ; std::allocator<ItemDropRateInfo>::destroy<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 1e		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00010	85 c0		 test	 eax, eax
  00012	74 10		 je	 SHORT $LN2@Uninit_mov
  00014	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00017	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001a	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  0001f	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00024	83 c1 18	 add	 ecx, 24			; 00000018H
  00027	83 c0 18	 add	 eax, 24			; 00000018H
  0002a	3b ca		 cmp	 ecx, edx
  0002c	75 e2		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z PROC ; std::_Val_type<ItemDropRateInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z ENDP ; std::_Val_type<ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UItemDropRateInfo@@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UItemDropRateInfo@@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@@Z PROC ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::destroy<ItemDropRateInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UItemDropRateInfo@@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@@Z ENDP ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::destroy<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<ItemDropRateInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUItemDropRateInfo@@PAU1@@std@@YAAAPAUItemDropRateInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUItemDropRateInfo@@PAU1@@std@@YAAAPAUItemDropRateInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<ItemDropRateInfo *,ItemDropRateInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUItemDropRateInfo@@PAU1@@std@@YAAAPAUItemDropRateInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<ItemDropRateInfo *,ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z PROC ; std::_Unchecked<ItemDropRateInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@PAU1@@Z ENDP ; std::_Unchecked<ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UItemDropRateInfo@@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UItemDropRateInfo@@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::destroy<ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UItemDropRateInfo@@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::destroy<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@@Z PROC ; std::addressof<ItemDropRateInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UItemDropRateInfo@@@std@@YAPAUItemDropRateInfo@@AAU1@@Z ENDP ; std::addressof<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@ABU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@ABU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z PROC ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@ABU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z ENDP ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@AAU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@AAU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z PROC ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@AAU1@@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z ENDP ; std::allocator<ItemDropRateInfo>::construct<ItemDropRateInfo,ItemDropRateInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAUItemDropRateInfo@@@std@@YA$$QAPAUItemDropRateInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUItemDropRateInfo@@@std@@YA$$QAPAUItemDropRateInfo@@AAPAU1@@Z PROC ; std::_Move<ItemDropRateInfo * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUItemDropRateInfo@@@std@@YA$$QAPAUItemDropRateInfo@@AAPAU1@@Z ENDP ; std::_Move<ItemDropRateInfo * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<ItemDropRateInfo *,ItemDropRateInfo *,std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUItemDropRateInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<ItemDropRateInfo *,ItemDropRateInfo *,std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UItemDropRateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUItemDropRateInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UItemDropRateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUItemDropRateInfo@@0@Z PROC ; std::_Ptr_cat<ItemDropRateInfo,ItemDropRateInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UItemDropRateInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUItemDropRateInfo@@0@Z ENDP ; std::_Ptr_cat<ItemDropRateInfo,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UItemDropRateInfo@@@std@@@std@@YAABV?$allocator@UItemDropRateInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UItemDropRateInfo@@@std@@@std@@YAABV?$allocator@UItemDropRateInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<ItemDropRateInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UItemDropRateInfo@@@std@@@std@@YAABV?$allocator@UItemDropRateInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<ItemDropRateInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@ABU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UItemDropRateInfo@@ABU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UItemDropRateInfo@@ABU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUItemDropRateInfo@@@std@@YAABUItemDropRateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUItemDropRateInfo@@@std@@YAABUItemDropRateInfo@@ABU1@@Z PROC ; std::forward<ItemDropRateInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUItemDropRateInfo@@@std@@YAABUItemDropRateInfo@@ABU1@@Z ENDP ; std::forward<ItemDropRateInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@AAU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UItemDropRateInfo@@AAU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UItemDropRateInfo@@AAU1@@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAXAAV?$allocator@UItemDropRateInfo@@@1@PAUItemDropRateInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUItemDropRateInfo@@@std@@YAAAUItemDropRateInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUItemDropRateInfo@@@std@@YAAAUItemDropRateInfo@@AAU1@@Z PROC ; std::forward<ItemDropRateInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUItemDropRateInfo@@@std@@YAAAUItemDropRateInfo@@AAU1@@Z ENDP ; std::forward<ItemDropRateInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<ItemDropRateInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<ItemDropRateInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUItemDropRateInfo@@@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEPAUItemDropRateInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUItemDropRateInfo@@@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEPAUItemDropRateInfo@@PAU2@00@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Umove<ItemDropRateInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUItemDropRateInfo@@@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEPAUItemDropRateInfo@@PAU2@00@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Umove<ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXPAUItemDropRateInfo@@0AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UItemDropRateInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UItemDropRateInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UItemDropRateInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UItemDropRateInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1><std::allocator<ItemDropRateInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UItemDropRateInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UItemDropRateInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1><std::allocator<ItemDropRateInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UItemDropRateInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UItemDropRateInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UItemDropRateInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::construct<ItemDropRateInfo,ItemDropRateInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@@Z PROC ; std::addressof<ItemDropRateInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUItemDropRateInfo@@@std@@YAPBUItemDropRateInfo@@ABU1@@Z ENDP ; std::addressof<ItemDropRateInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z PROC ; std::swap<ItemDropRateInfo *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z ENDP ; std::swap<ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z PROC ; std::_Swap_adl<ItemDropRateInfo *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAUItemDropRateInfo@@@std@@YAXAAPAUItemDropRateInfo@@0@Z ENDP ; std::_Swap_adl<ItemDropRateInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8UItemDropRateInfo@@U0@@std@@YA_NABV?$allocator@UItemDropRateInfo@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UItemDropRateInfo@@U0@@std@@YA_NABV?$allocator@UItemDropRateInfo@@@0@0@Z PROC ; std::operator==<ItemDropRateInfo,ItemDropRateInfo>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8UItemDropRateInfo@@U0@@std@@YA_NABV?$allocator@UItemDropRateInfo@@@0@0@Z ENDP ; std::operator==<ItemDropRateInfo,ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@UItemDropRateInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@UItemDropRateInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<ItemDropRateInfo>,std::allocator<ItemDropRateInfo> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@UItemDropRateInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<ItemDropRateInfo>,std::allocator<ItemDropRateInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ItemDropRate@@YAXXZ
text$yd	SEGMENT
??__Fg_ItemDropRate@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ItemDropRate'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemDropRate@@3VItemDropRate@@A ; g_ItemDropRate
  00005	e9 00 00 00 00	 jmp	 ??1ItemDropRate@@UAE@XZ	; ItemDropRate::~ItemDropRate
??__Fg_ItemDropRate@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ItemDropRate''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ??__Eg_ItemDropRate@@YAXXZ
text$di	SEGMENT
??__Eg_ItemDropRate@@YAXXZ PROC				; `dynamic initializer for 'g_ItemDropRate'', COMDAT

; 13   : ItemDropRate g_ItemDropRate;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemDropRate@@3VItemDropRate@@A ; g_ItemDropRate
  00005	e8 00 00 00 00	 call	 ??0ItemDropRate@@QAE@XZ	; ItemDropRate::ItemDropRate
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ItemDropRate@@YAXXZ ; `dynamic atexit destructor for 'g_ItemDropRate''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ItemDropRate@@YAXXZ ENDP				; `dynamic initializer for 'g_ItemDropRate''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?MonsterItemDrop@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpMonster$ = 8						; size = 4
?MonsterItemDrop@@YAXPAUOBJECTSTRUCT@@@Z PROC		; MonsterItemDrop, COMDAT

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 	if (g_ItemDropRate.Drop(lpMonster))

  00003	ff 75 08	 push	 DWORD PTR _lpMonster$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemDropRate@@3VItemDropRate@@A ; g_ItemDropRate
  0000b	e8 00 00 00 00	 call	 ?Drop@ItemDropRate@@QAE_NPAUOBJECTSTRUCT@@@Z ; ItemDropRate::Drop

; 227  : 		return;
; 228  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?MonsterItemDrop@@YAXPAUOBJECTSTRUCT@@@Z ENDP		; MonsterItemDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GItemDropRate@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GItemDropRate@@UAEPAXI@Z PROC			; ItemDropRate::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ItemDropRate@@UAE@XZ	; ItemDropRate::~ItemDropRate
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GItemDropRate@@UAEPAXI@Z ENDP			; ItemDropRate::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXPAUItemDropRateInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXPAUItemDropRateInfo@@0@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXPAUItemDropRateInfo@@0@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 02	 sar	 edx, 2
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 02	 sar	 edx, 2
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 02	 sar	 edx, 2
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUItemDropRateInfo@@PAU1@V?$allocator@UItemDropRateInfo@@@std@@U1@@std@@YAPAUItemDropRateInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ItemDropRateInfo *,ItemDropRateInfo *,std::allocator<ItemDropRateInfo>,ItemDropRateInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 02	 sar	 edx, 2
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00080	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00082	c1 fa 02	 sar	 edx, 2
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0009a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000a0	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000a3	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBE_NPBUItemDropRateInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBE_NPBUItemDropRateInfo@@@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBE_NPBUItemDropRateInfo@@@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 aa aa aa 0a	 mov	 ecx, 178956970		; 0aaaaaaaH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXPAUItemDropRateInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXPAUItemDropRateInfo@@0@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXPAUItemDropRateInfo@@0@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXABUItemDropRateInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXABUItemDropRateInfo@@@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4f		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 49		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003b	85 d2		 test	 edx, edx
  0003d	74 46		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00044	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 04 c8	 movups	 xmm0, XMMWORD PTR [eax+ecx*8]
  00049	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0004c	f3 0f 7e 44 c8
	10		 movq	 xmm0, QWORD PTR [eax+ecx*8+16]
  00052	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00057	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0005b	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00060	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00063	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00065	6a 01		 push	 1
  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@IAEXI@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00071	85 c0		 test	 eax, eax
  00073	74 10		 je	 SHORT $LN205@push_back
  00075	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00078	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0007b	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00080	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00085	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?push_back@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXABUItemDropRateInfo@@@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEAAUItemDropRateInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEAAUItemDropRateInfo@@I@Z PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1241 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEAAUItemDropRateInfo@@I@Z ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 02	 sar	 edx, 2
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::~vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::~vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >,std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >::_Vector_val<std::_Simple_types<ItemDropRateInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<ItemDropRateInfo> >::_Vector_val<std::_Simple_types<ItemDropRateInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABQAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAPAUItemDropRateInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >::_Vector_alloc<std::_Vec_base_types<ItemDropRateInfo,std::allocator<ItemDropRateInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXPAUItemDropRateInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEPAUItemDropRateInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEPAUItemDropRateInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEPAUItemDropRateInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::_Wrap_alloc<std::allocator<ItemDropRateInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAE@ABV?$allocator@UItemDropRateInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<ItemDropRateInfo> >::_Wrap_alloc<std::allocator<ItemDropRateInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAIABV?$allocator@UItemDropRateInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAIABV?$allocator@UItemDropRateInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UItemDropRateInfo@@@std@@@std@@SAIABV?$allocator@UItemDropRateInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<ItemDropRateInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UItemDropRateInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UItemDropRateInfo@@@std@@QBEIXZ PROC ; std::allocator<ItemDropRateInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UItemDropRateInfo@@@std@@QBEIXZ ENDP ; std::allocator<ItemDropRateInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z PROC ; std::allocator<ItemDropRateInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@UItemDropRateInfo@@@std@@QAEPAUItemDropRateInfo@@I@Z ENDP ; std::allocator<ItemDropRateInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z PROC ; std::allocator<ItemDropRateInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ENDP ; std::allocator<ItemDropRateInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UItemDropRateInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UItemDropRateInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<ItemDropRateInfo>::allocator<ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UItemDropRateInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<ItemDropRateInfo>::allocator<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UItemDropRateInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UItemDropRateInfo@@@std@@QAE@XZ PROC	; std::allocator<ItemDropRateInfo>::allocator<ItemDropRateInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UItemDropRateInfo@@@std@@QAE@XZ ENDP	; std::allocator<ItemDropRateInfo>::allocator<ItemDropRateInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?GetRanExc@ItemDropRate@@QAEEH@Z
_TEXT	SEGMENT
tv415 = -16						; size = 4
_ExtCode$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_ExcNumber$ = 8						; size = 4
?GetRanExc@ItemDropRate@@QAEEH@Z PROC			; ItemDropRate::GetRanExc, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00012	6a 00		 push	 0
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 192  : 	BYTE ExtCode[6] = {0x08, 0x01, 0x20, 0x02, 0x10, 0x04};

  00014	c7 45 f4 08 01
	20 02		 mov	 DWORD PTR _ExtCode$[ebp], 35651848 ; 02200108H
  0001b	66 c7 45 f8 10
	04		 mov	 WORD PTR _ExtCode$[ebp+4], 1040 ; 00000410H
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00021	e8 00 00 00 00	 call	 __time64
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 195  : 	srand((unsigned)time(NULL));

  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _srand
  0002c	83 c4 08	 add	 esp, 8

; 196  : 	// ----
; 197  : 	for (int i = 0; i < 6; i++)

  0002f	33 f6		 xor	 esi, esi
  00031	8d 7e 06	 lea	 edi, DWORD PTR [esi+6]
$LL4@GetRanExc:

; 198  : 	{
; 199  : 		// ----
; 200  : 		SerialNumber = rand() % 6;

  00034	e8 00 00 00 00	 call	 _rand
  00039	99		 cdq

; 201  : 		// ----
; 202  : 		BYTE bTemp	= ExtCode[SerialNumber];

  0003a	8d 4d f4	 lea	 ecx, DWORD PTR _ExtCode$[ebp]
  0003d	f7 ff		 idiv	 edi
  0003f	0f b6 c2	 movzx	 eax, dl
  00042	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00045	03 c8		 add	 ecx, eax

; 203  : 		// ----
; 204  : 		ExtCode[SerialNumber] = ExtCode[i];

  00047	8a 44 35 f4	 mov	 al, BYTE PTR _ExtCode$[ebp+esi]
  0004b	88 01		 mov	 BYTE PTR [ecx], al

; 205  : 		// ----
; 206  : 		ExtCode[i]	= bTemp;

  0004d	88 54 35 f4	 mov	 BYTE PTR _ExtCode$[ebp+esi], dl
  00051	46		 inc	 esi
  00052	3b f7		 cmp	 esi, edi
  00054	7c de		 jl	 SHORT $LL4@GetRanExc

; 207  : 	}
; 208  : 	
; 209  : 	BYTE Exc = 0;
; 210  : 	// ----
; 211  : 	if (ExcNumber == 0)

  00056	8b 75 08	 mov	 esi, DWORD PTR _ExcNumber$[ebp]
  00059	32 c9		 xor	 cl, cl
  0005b	89 4d f0	 mov	 DWORD PTR tv415[ebp], ecx
  0005e	85 f6		 test	 esi, esi
  00060	75 14		 jne	 SHORT $LN8@GetRanExc

; 212  : 	{
; 213  : 		return Exc;

  00062	5f		 pop	 edi
  00063	32 c0		 xor	 al, al
  00065	5e		 pop	 esi

; 222  : }

  00066	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN8@GetRanExc:

; 214  : 	}
; 215  : 	// ----
; 216  : 	for (int n = 0; n < ExcNumber; n++)

  00076	33 c0		 xor	 eax, eax
  00078	85 f6		 test	 esi, esi
  0007a	7e 79		 jle	 SHORT $LN17@GetRanExc
  0007c	83 fe 20	 cmp	 esi, 32			; 00000020H
  0007f	72 74		 jb	 SHORT $LN17@GetRanExc
  00081	8b ce		 mov	 ecx, esi
  00083	81 e1 1f 00 00
	80		 and	 ecx, -2147483617	; 8000001fH
  00089	79 05		 jns	 SHORT $LN30@GetRanExc
  0008b	49		 dec	 ecx
  0008c	83 c9 e0	 or	 ecx, -32		; ffffffe0H
  0008f	41		 inc	 ecx
$LN30@GetRanExc:
  00090	8b d6		 mov	 edx, esi
  00092	0f 57 d2	 xorps	 xmm2, xmm2
  00095	2b d1		 sub	 edx, ecx
  00097	0f 28 ca	 movaps	 xmm1, xmm2
  0009a	8d 4d 04	 lea	 ecx, DWORD PTR _ExtCode$[ebp+16]
  0009d	0f 1f 00	 npad	 3
$LL7@GetRanExc:

; 217  : 	{
; 218  : 		Exc += ExtCode[n];

  000a0	0f 10 41 f0	 movups	 xmm0, XMMWORD PTR [ecx-16]
  000a4	83 c0 20	 add	 eax, 32			; 00000020H
  000a7	8d 49 20	 lea	 ecx, DWORD PTR [ecx+32]
  000aa	66 0f fc d0	 paddb	 xmm2, xmm0
  000ae	0f 10 41 e0	 movups	 xmm0, XMMWORD PTR [ecx-32]
  000b2	66 0f fc c8	 paddb	 xmm1, xmm0
  000b6	3b c2		 cmp	 eax, edx
  000b8	7c e6		 jl	 SHORT $LL7@GetRanExc
  000ba	66 0f fc ca	 paddb	 xmm1, xmm2
  000be	0f 28 c1	 movaps	 xmm0, xmm1
  000c1	66 0f 73 d8 08	 psrldq	 xmm0, 8
  000c6	66 0f fc c8	 paddb	 xmm1, xmm0
  000ca	0f 28 c1	 movaps	 xmm0, xmm1
  000cd	66 0f 73 d8 04	 psrldq	 xmm0, 4
  000d2	66 0f fc c8	 paddb	 xmm1, xmm0
  000d6	0f 28 c1	 movaps	 xmm0, xmm1
  000d9	66 0f 73 d8 02	 psrldq	 xmm0, 2
  000de	66 0f fc c8	 paddb	 xmm1, xmm0
  000e2	0f 28 c1	 movaps	 xmm0, xmm1
  000e5	66 0f 73 d8 01	 psrldq	 xmm0, 1
  000ea	66 0f fc c8	 paddb	 xmm1, xmm0
  000ee	66 0f 7e c9	 movd	 ecx, xmm1
  000f2	89 4d f0	 mov	 DWORD PTR tv415[ebp], ecx
$LN17@GetRanExc:
  000f5	53		 push	 ebx
  000f6	32 db		 xor	 bl, bl
  000f8	32 d2		 xor	 dl, dl
  000fa	3b c6		 cmp	 eax, esi
  000fc	7d 30		 jge	 SHORT $LN22@GetRanExc
  000fe	8b ce		 mov	 ecx, esi
  00100	2b c8		 sub	 ecx, eax

; 214  : 	}
; 215  : 	// ----
; 216  : 	for (int n = 0; n < ExcNumber; n++)

  00102	83 f9 02	 cmp	 ecx, 2
  00105	7c 18		 jl	 SHORT $LC23@GetRanExc
  00107	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL25@GetRanExc:

; 217  : 	{
; 218  : 		Exc += ExtCode[n];

  00110	02 5c 05 f4	 add	 bl, BYTE PTR _ExtCode$[ebp+eax]
  00114	02 54 05 f5	 add	 dl, BYTE PTR _ExtCode$[ebp+eax+1]
  00118	83 c0 02	 add	 eax, 2
  0011b	3b c1		 cmp	 eax, ecx
  0011d	7c f1		 jl	 SHORT $LL25@GetRanExc
$LC23@GetRanExc:
  0011f	8b 4d f0	 mov	 ecx, DWORD PTR tv415[ebp]
  00122	3b c6		 cmp	 eax, esi
  00124	7d 04		 jge	 SHORT $LN24@GetRanExc
  00126	02 4c 05 f4	 add	 cl, BYTE PTR _ExtCode$[ebp+eax]
$LN24@GetRanExc:
  0012a	02 d3		 add	 dl, bl
  0012c	02 ca		 add	 cl, dl
$LN22@GetRanExc:

; 219  : 	}
; 220  : 	// ----
; 221  : 	return Exc;

  0012e	8a c1		 mov	 al, cl

; 222  : }

  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	5b		 pop	 ebx
  00134	5f		 pop	 edi
  00135	33 cd		 xor	 ecx, ebp
  00137	5e		 pop	 esi
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 04 00	 ret	 4
?GetRanExc@ItemDropRate@@QAEEH@Z ENDP			; ItemDropRate::GetRanExc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?Drop@ItemDropRate@@QAE_NPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Level$1$ = -52						; size = 4
_MaxHitUser$1$ = -48					; size = 4
_Option1$1$ = -44					; size = 4
_Option2$1$ = -40					; size = 4
_ExcOption$1 = -36					; size = 1
_SetOption$2 = -32					; size = 1
_ItemNumber$1$ = -28					; size = 4
_lpMonster$GSCopy$1$ = -24				; size = 4
tv698 = -20						; size = 4
_Option3$1$ = -20					; size = 4
tv703 = -16						; size = 4
_i$1$ = -16						; size = 4
_SocketBonus$3 = -16					; size = 1
_SocketOption$4 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpMonster$ = 8						; size = 4
?Drop@ItemDropRate@@QAE_NPAUOBJECTSTRUCT@@@Z PROC	; ItemDropRate::Drop, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpMonster$[ebp]
  00017	89 7d e8	 mov	 DWORD PTR _lpMonster$GSCopy$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0001a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001d	3b 43 08	 cmp	 eax, DWORD PTR [ebx+8]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 81   : 	if( this->m_DropList.empty() )

  00020	75 14		 jne	 SHORT $LN7@Drop

; 82   : 	{
; 83   : 		return false;

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al
  00025	5b		 pop	 ebx

; 181  : 					
; 182  : 				}
; 183  : 			}
; 184  : 		}
; 185  : 	}
; 186  : 	// ----
; 187  : 	return false;
; 188  : }

  00026	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00029	33 cd		 xor	 ecx, ebp
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN7@Drop:
  00036	56		 push	 esi

; 86   : 	int MaxHitUser = gObjMonsterTopHitDamageUser(lpMonster);

  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  0003d	33 c9		 xor	 ecx, ecx
  0003f	89 45 d0	 mov	 DWORD PTR _MaxHitUser$1$[ebp], eax
  00042	89 4d f0	 mov	 DWORD PTR _i$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00045	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 86   : 	int MaxHitUser = gObjMonsterTopHitDamageUser(lpMonster);

  0004d	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00050	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
  00053	f7 e9		 imul	 ecx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  0005f	0f 84 6f 02 00
	00		 je	 $LN242@Drop

; 86   : 	int MaxHitUser = gObjMonsterTopHitDamageUser(lpMonster);

  00065	33 d2		 xor	 edx, edx
  00067	89 55 ec	 mov	 DWORD PTR tv698[ebp], edx
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Drop:

; 89   : 	{
; 90   : 		if (lpMonster->Level >= this->m_DropList[i].m_MonsterMinLevel && lpMonster->Level <= this->m_DropList[i].m_MonsterMaxLevel)

  00070	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00073	0f b7 87 96 00
	00 00		 movzx	 eax, WORD PTR [edi+150]
  0007a	03 f2		 add	 esi, edx
  0007c	66 3b 46 0c	 cmp	 ax, WORD PTR [esi+12]
  00080	7c 31		 jl	 SHORT $LN2@Drop
  00082	66 3b 46 0e	 cmp	 ax, WORD PTR [esi+14]
  00086	7f 2b		 jg	 SHORT $LN2@Drop

; 91   : 		{
; 92   : 			if (lpMonster->MapNumber == this->m_DropList[i].m_MapNumber || this->m_DropList[i].m_MapNumber == -1)

  00088	0f b7 4e 10	 movzx	 ecx, WORD PTR [esi+16]
  0008c	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  00093	66 3b c1	 cmp	 ax, cx
  00096	74 06		 je	 SHORT $LN10@Drop
  00098	66 83 f9 ff	 cmp	 cx, -1
  0009c	75 15		 jne	 SHORT $LN2@Drop
$LN10@Drop:

; 93   : 			{
; 94   : 				if ((rand () % ITEMDROPRATE_MAX_RATE) < this->m_DropList[i].m_Rate)

  0009e	e8 00 00 00 00	 call	 _rand
  000a3	99		 cdq
  000a4	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000a9	f7 f9		 idiv	 ecx
  000ab	3b 56 14	 cmp	 edx, DWORD PTR [esi+20]
  000ae	7c 34		 jl	 SHORT $LN236@Drop
  000b0	8b 55 ec	 mov	 edx, DWORD PTR tv698[ebp]
$LN2@Drop:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000b3	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  000b6	83 c2 18	 add	 edx, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000b9	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
  000bc	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  000c1	8b 75 f0	 mov	 esi, DWORD PTR _i$1$[ebp]
  000c4	89 55 ec	 mov	 DWORD PTR tv698[ebp], edx
  000c7	46		 inc	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000c8	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  000ca	89 75 f0	 mov	 DWORD PTR _i$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000cd	c1 fa 02	 sar	 edx, 2
  000d0	8b c2		 mov	 eax, edx
  000d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d5	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 88   : 	for( int i = 0; i < this->m_DropList.size(); i++ )

  000d7	3b f0		 cmp	 esi, eax
  000d9	0f 83 f5 01 00
	00		 jae	 $LN242@Drop
  000df	8b 55 ec	 mov	 edx, DWORD PTR tv698[ebp]
  000e2	eb 8c		 jmp	 SHORT $LL4@Drop
$LN236@Drop:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000e4	8b 4d f0	 mov	 ecx, DWORD PTR _i$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 96   : 					int ItemNumber	= ITEMGET(this->m_DropList[i].m_ItemType, this->m_DropList[i].m_ItemIndex);

  000e7	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 97   : 					int Option1		= 0;

  000ea	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _Option1$1$[ebp], 0

; 98   : 					int Option2		= 0;

  000f1	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _Option2$1$[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000f8	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 99   : 					int Option3		= 0;

  000fb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Option3$1$[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00102	c1 e1 03	 shl	 ecx, 3
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 96   : 					int ItemNumber	= ITEMGET(this->m_DropList[i].m_ItemType, this->m_DropList[i].m_ItemIndex);

  00105	03 f9		 add	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00107	89 4d f0	 mov	 DWORD PTR tv703[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 100  : 					BYTE ExcOption	= 0;

  0010a	c6 45 dc 00	 mov	 BYTE PTR _ExcOption$1[ebp], 0

; 101  : 					BYTE SetOption	= 0;

  0010e	c6 45 e0 00	 mov	 BYTE PTR _SetOption$2[ebp], 0
  00112	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00115	0f b7 4f 02	 movzx	 ecx, WORD PTR [edi+2]

; 102  : 					int Durability	= 0;
; 103  : 					int Level		= 0;
; 104  : 
; 105  : 					int Sub = (this->m_DropList[i].m_ItemMaxLevel - this->m_DropList[i].m_ItemMinLevel) + 1;

  00119	0f b6 77 05	 movzx	 esi, BYTE PTR [edi+5]
  0011d	c1 e0 09	 shl	 eax, 9
  00120	03 c8		 add	 ecx, eax
  00122	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00126	2b f0		 sub	 esi, eax
  00128	89 4d e4	 mov	 DWORD PTR _ItemNumber$1$[ebp], ecx
  0012b	46		 inc	 esi

; 106  : 					Level = this->m_DropList[i].m_ItemMinLevel + (rand() % Sub);

  0012c	e8 00 00 00 00	 call	 _rand
  00131	99		 cdq
  00132	f7 fe		 idiv	 esi

; 107  : 
; 108  : 					// ----
; 109  : 					if( this->m_DropList[i].m_Skill != 0 )

  00134	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00137	8b 75 f0	 mov	 esi, DWORD PTR tv703[ebp]
  0013a	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0013e	bf 01 00 00 00	 mov	 edi, 1
  00143	03 ca		 add	 ecx, edx
  00145	89 4d cc	 mov	 DWORD PTR _Level$1$[ebp], ecx
  00148	80 7c 06 06 00	 cmp	 BYTE PTR [esi+eax+6], 0
  0014d	74 1c		 je	 SHORT $LN13@Drop

; 110  : 					{
; 111  : 						if( rand() % 2 )

  0014f	e8 00 00 00 00	 call	 _rand
  00154	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00159	79 05		 jns	 SHORT $LN246@Drop
  0015b	48		 dec	 eax
  0015c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0015f	40		 inc	 eax
$LN246@Drop:
  00160	b8 00 00 00 00	 mov	 eax, 0
  00165	0f 45 c7	 cmovne	 eax, edi
  00168	89 45 d4	 mov	 DWORD PTR _Option1$1$[ebp], eax
$LN13@Drop:

; 112  : 						{
; 113  : 							Option1 = 1;
; 114  : 						}
; 115  : 					}
; 116  : 					// ----
; 117  : 					if( this->m_DropList[i].m_Luck != 0 )

  0016b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0016e	80 7c 06 07 00	 cmp	 BYTE PTR [esi+eax+7], 0
  00173	74 1c		 je	 SHORT $LN15@Drop

; 118  : 					{
; 119  : 						if( rand() % 2 )

  00175	e8 00 00 00 00	 call	 _rand
  0017a	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0017f	79 05		 jns	 SHORT $LN247@Drop
  00181	48		 dec	 eax
  00182	83 c8 fe	 or	 eax, -2			; fffffffeH
  00185	40		 inc	 eax
$LN247@Drop:
  00186	b8 00 00 00 00	 mov	 eax, 0
  0018b	0f 45 c7	 cmovne	 eax, edi
  0018e	89 45 d8	 mov	 DWORD PTR _Option2$1$[ebp], eax
$LN15@Drop:

; 120  : 						{
; 121  : 							Option2 = 1;
; 122  : 						}
; 123  : 					}
; 124  : 					// ----
; 125  : 					if( this->m_DropList[i].m_Option != 0 )

  00191	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00194	bf 05 00 00 00	 mov	 edi, 5
  00199	80 7c 06 08 00	 cmp	 BYTE PTR [esi+eax+8], 0
  0019e	74 25		 je	 SHORT $LN18@Drop

; 126  : 					{
; 127  : 						if( rand() % 5 == 0 )

  001a0	e8 00 00 00 00	 call	 _rand
  001a5	99		 cdq
  001a6	f7 ff		 idiv	 edi
  001a8	85 d2		 test	 edx, edx
  001aa	75 09		 jne	 SHORT $LN17@Drop

; 128  : 						{
; 129  : 							Option3 = 3;

  001ac	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _Option3$1$[ebp], 3

; 130  : 						}
; 131  : 						else

  001b3	eb 10		 jmp	 SHORT $LN18@Drop
$LN17@Drop:

; 132  : 						{
; 133  : 							Option3 = rand() % 3;

  001b5	e8 00 00 00 00	 call	 _rand
  001ba	99		 cdq
  001bb	b9 03 00 00 00	 mov	 ecx, 3
  001c0	f7 f9		 idiv	 ecx
  001c2	89 55 ec	 mov	 DWORD PTR _Option3$1$[ebp], edx
$LN18@Drop:

; 134  : 						}
; 135  : 					}
; 136  : 					// ----
; 137  : 					if( this->m_DropList[i].m_Excellent != 0 )

  001c5	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001c8	80 7c 06 09 00	 cmp	 BYTE PTR [esi+eax+9], 0
  001cd	74 0d		 je	 SHORT $LN19@Drop

; 138  : 					{
; 139  : 						ExcOption = NewOptionRand(0);

  001cf	6a 00		 push	 0
  001d1	e8 00 00 00 00	 call	 ?NewOptionRand@@YAEH@Z	; NewOptionRand
  001d6	83 c4 04	 add	 esp, 4
  001d9	88 45 dc	 mov	 BYTE PTR _ExcOption$1[ebp], al
$LN19@Drop:

; 140  : 					}
; 141  : 					// ----
; 142  : 					if( this->m_DropList[i].m_Ancient != 0 )

  001dc	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  001df	80 7c 06 0a 00	 cmp	 BYTE PTR [esi+eax+10], 0

; 143  : 					{
; 144  : 						SetOption = gSetItemOption.GenSetOption(ItemNumber);

  001e4	8b 75 e4	 mov	 esi, DWORD PTR _ItemNumber$1$[ebp]
  001e7	74 0e		 je	 SHORT $LN20@Drop
  001e9	56		 push	 esi
  001ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?gSetItemOption@@3VCSetItemOption@@A ; gSetItemOption
  001ef	e8 00 00 00 00	 call	 ?GenSetOption@CSetItemOption@@QAEHH@Z ; CSetItemOption::GenSetOption
  001f4	88 45 e0	 mov	 BYTE PTR _SetOption$2[ebp], al
$LN20@Drop:

; 145  : 					}
; 146  : 					// ----
; 147  : 					BYTE SocketBonus = (BYTE)-1;
; 148  : 					BYTE SocketOption[5];
; 149  : 					SocketOption[0] = (BYTE)-1;
; 150  : 					SocketOption[1] = (BYTE)-1;
; 151  : 					SocketOption[2] = (BYTE)-1;
; 152  : 					SocketOption[3] = (BYTE)-1;
; 153  : 					SocketOption[4] = (BYTE)-1;
; 154  : 					// ----
; 155  : 					if( g_ElementalSystem.IsElementalItem(ItemNumber) )

  001f7	56		 push	 esi
  001f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  001fd	c6 45 f0 ff	 mov	 BYTE PTR _SocketBonus$3[ebp], 255 ; 000000ffH
  00201	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _SocketOption$4[ebp], -1
  00208	c6 45 f8 ff	 mov	 BYTE PTR _SocketOption$4[ebp+4], 255 ; 000000ffH
  0020c	e8 00 00 00 00	 call	 ?IsElementalItem@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsElementalItem

; 156  : 					{
; 157  : 						SocketBonus = (lpMonster->m_btAttribute == ELEMENT_NONE) ? (1 + rand() % 5) : lpMonster->m_btAttribute;

  00211	8b 7d e8	 mov	 edi, DWORD PTR _lpMonster$GSCopy$1$[ebp]
  00214	85 c0		 test	 eax, eax
  00216	74 64		 je	 SHORT $LN6@Drop
  00218	8a 87 e4 26 00
	00		 mov	 al, BYTE PTR [edi+9956]
  0021e	84 c0		 test	 al, al
  00220	75 14		 jne	 SHORT $LN25@Drop
  00222	e8 00 00 00 00	 call	 _rand
  00227	99		 cdq
  00228	b9 05 00 00 00	 mov	 ecx, 5
  0022d	f7 f9		 idiv	 ecx
  0022f	fe c2		 inc	 dl
  00231	88 55 f0	 mov	 BYTE PTR _SocketBonus$3[ebp], dl
  00234	eb 03		 jmp	 SHORT $LN26@Drop
$LN25@Drop:
  00236	88 45 f0	 mov	 BYTE PTR _SocketBonus$3[ebp], al
$LN26@Drop:

; 158  : 						// ----
; 159  : 						if( g_ElementalSystem.IsPentagram(ItemNumber) )

  00239	56		 push	 esi
  0023a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  0023f	e8 00 00 00 00	 call	 ?IsPentagram@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsPentagram
  00244	85 c0		 test	 eax, eax
  00246	74 34		 je	 SHORT $LN6@Drop

; 160  : 						{
; 161  : 							int SlotCount = g_ElementalSystem.m_SlotCountRate.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00248	6a 01		 push	 1
  0024a	b9 50 1a 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A+6736
  0024f	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  00254	8b d8		 mov	 ebx, eax

; 162  : 							int Count = 0;

  00256	33 f6		 xor	 esi, esi

; 163  : 							// ----
; 164  : 							while(SlotCount != Count)

  00258	85 db		 test	 ebx, ebx
  0025a	74 20		 je	 SHORT $LN6@Drop
  0025c	8d 7e 05	 lea	 edi, DWORD PTR [esi+5]
  0025f	90		 npad	 1
$LL5@Drop:

; 165  : 							{
; 166  : 								int Slot = rand() % 5;

  00260	e8 00 00 00 00	 call	 _rand
  00265	99		 cdq
  00266	f7 ff		 idiv	 edi

; 167  : 								// ----
; 168  : 								if( SocketOption[Slot] == (BYTE)-1)

  00268	80 7c 15 f4 ff	 cmp	 BYTE PTR _SocketOption$4[ebp+edx], 255 ; 000000ffH
  0026d	75 06		 jne	 SHORT $LN23@Drop

; 169  : 								{
; 170  : 									SocketOption[Slot] = 0xFE;

  0026f	c6 44 15 f4 fe	 mov	 BYTE PTR _SocketOption$4[ebp+edx], 254 ; 000000feH

; 171  : 									Count++;

  00274	46		 inc	 esi
$LN23@Drop:

; 163  : 							// ----
; 164  : 							while(SlotCount != Count)

  00275	3b f3		 cmp	 esi, ebx
  00277	75 e7		 jne	 SHORT $LL5@Drop
  00279	8b 7d e8	 mov	 edi, DWORD PTR _lpMonster$GSCopy$1$[ebp]
$LN6@Drop:

; 172  : 								}
; 173  : 							}
; 174  : 						}
; 175  : 					}
; 176  : 					// ----
; 177  : 					ItemSerialCreateSend(lpMonster->m_Index, lpMonster->MapNumber, lpMonster->X, lpMonster->Y,

  0027c	8d 45 f4	 lea	 eax, DWORD PTR _SocketOption$4[ebp]
  0027f	50		 push	 eax
  00280	ff 75 f0	 push	 DWORD PTR _SocketBonus$3[ebp]
  00283	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0028a	ff 75 e0	 push	 DWORD PTR _SetOption$2[ebp]
  0028d	ff 75 dc	 push	 DWORD PTR _ExcOption$1[ebp]
  00290	ff 75 d0	 push	 DWORD PTR _MaxHitUser$1$[ebp]
  00293	ff 75 ec	 push	 DWORD PTR _Option3$1$[ebp]
  00296	ff 75 d8	 push	 DWORD PTR _Option2$1$[ebp]
  00299	ff 75 d4	 push	 DWORD PTR _Option1$1$[ebp]
  0029c	6a 00		 push	 0
  0029e	ff 75 cc	 push	 DWORD PTR _Level$1$[ebp]
  002a1	ff 75 e4	 push	 DWORD PTR _ItemNumber$1$[ebp]
  002a4	50		 push	 eax
  002a5	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  002ac	50		 push	 eax
  002ad	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  002b4	50		 push	 eax
  002b5	ff 37		 push	 DWORD PTR [edi]
  002b7	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  002bc	83 c4 3c	 add	 esp, 60			; 0000003cH

; 178  : 						ItemNumber, Level, Durability, Option1, Option2, Option3, MaxHitUser, ExcOption, SetOption,
; 179  : 						SocketBonus, SocketOption);
; 180  : 					return true;

  002bf	b0 01		 mov	 al, 1
  002c1	5e		 pop	 esi
  002c2	5f		 pop	 edi
  002c3	5b		 pop	 ebx

; 181  : 					
; 182  : 				}
; 183  : 			}
; 184  : 		}
; 185  : 	}
; 186  : 	// ----
; 187  : 	return false;
; 188  : }

  002c4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c7	33 cd		 xor	 ecx, ebp
  002c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ce	8b e5		 mov	 esp, ebp
  002d0	5d		 pop	 ebp
  002d1	c2 04 00	 ret	 4
$LN242@Drop:
  002d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d7	32 c0		 xor	 al, al
  002d9	5e		 pop	 esi
  002da	5f		 pop	 edi
  002db	33 cd		 xor	 ecx, ebp
  002dd	5b		 pop	 ebx
  002de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c2 04 00	 ret	 4
?Drop@ItemDropRate@@QAE_NPAUOBJECTSTRUCT@@@Z ENDP	; ItemDropRate::Drop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?Read@ItemDropRate@@QAEXPAD@Z
_TEXT	SEGMENT
_Result$ = -316						; size = 12
$T2 = -304						; size = 4
$T3 = -300						; size = 4
$T4 = -296						; size = 4
$T5 = -292						; size = 4
$T6 = -288						; size = 4
$T7 = -284						; size = 4
$T8 = -280						; size = 4
$T9 = -276						; size = 4
$T10 = -272						; size = 4
$T11 = -268						; size = 4
$T12 = -264						; size = 4
$T13 = -260						; size = 4
$T14 = -256						; size = 4
$T15 = -252						; size = 4
_ItemDropRate$ = -248					; size = 4
_Item$16 = -244						; size = 4
_Document$ = -240					; size = 200
_lpItem$17 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@ItemDropRate@@QAEXPAD@Z PROC			; ItemDropRate::Read, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@ItemDropRate@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 47   : 	xml_document Document;

  00032	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 48   : 	xml_parse_result Result = Document.load_file(File);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 49   : 	// ----
; 50   : 	if( Result.status != status_ok )

  0005b	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  00062	74 13		 je	 SHORT $LN5@Read

; 51   : 	{
; 52   : 		MsgBox("[ItemDropRate] File %s not found!", File);

  00064	56		 push	 esi
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FJBMIJAK@?$FLItemDropRate?$FN?5File?5?$CFs?5not?5found@
  0006a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006f	83 c4 08	 add	 esp, 8
  00072	e9 4e 02 00 00	 jmp	 $LN3@Read
$LN5@Read:

; 53   : 		return;
; 54   : 	}
; 55   : 	// ----
; 56   : 	xml_node ItemDropRate = Document.child("itemdroprate");

  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IJOHGNNF@itemdroprate?$AA@
  0007c	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _ItemDropRate$[ebp]
  00082	50		 push	 eax
  00083	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00089	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 57   : 	// ----
; 58   : 	for( xml_node Item = ItemDropRate.child("item"); Item; Item = Item.next_sibling() )

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_04NHONDGDE@item?$AA@
  00093	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _Item$16[ebp]
  00099	50		 push	 eax
  0009a	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _ItemDropRate$[ebp]
  000a0	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000a5	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  000ab	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000b0	85 c0		 test	 eax, eax
  000b2	0f 84 0d 02 00
	00		 je	 $LN3@Read
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@Read:

; 59   : 	{
; 60   : 		ItemDropRateInfo lpItem;
; 61   : 		lpItem.m_ItemType = Item.attribute("type").as_int();

  000c0	6a 00		 push	 0
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_04GPMDFGEJ@type?$AA@
  000c7	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  000cd	50		 push	 eax
  000ce	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  000d4	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000d9	8b c8		 mov	 ecx, eax
  000db	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 62   : 		lpItem.m_ItemIndex = Item.attribute("index").as_int();

  000e0	6a 00		 push	 0
  000e2	66 89 45 d8	 mov	 WORD PTR _lpItem$17[ebp], ax
  000e6	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_05FKHKFDID@index?$AA@
  000f1	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000fd	8b c8		 mov	 ecx, eax
  000ff	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 63   : 		lpItem.m_ItemMinLevel = Item.attribute("minlvl").as_int();

  00104	6a 00		 push	 0
  00106	66 89 45 da	 mov	 WORD PTR _lpItem$17[ebp+2], ax
  0010a	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_06GJMPOCOI@minlvl?$AA@
  00115	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00121	8b c8		 mov	 ecx, eax
  00123	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 64   : 		lpItem.m_ItemMaxLevel = Item.attribute("maxlvl").as_int();

  00128	6a 00		 push	 0
  0012a	88 45 dc	 mov	 BYTE PTR _lpItem$17[ebp+4], al
  0012d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_06GKDMACKH@maxlvl?$AA@
  00138	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00144	8b c8		 mov	 ecx, eax
  00146	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 65   : 		lpItem.m_Skill = Item.attribute("skill").as_int();

  0014b	6a 00		 push	 0
  0014d	88 45 dd	 mov	 BYTE PTR _lpItem$17[ebp+5], al
  00150	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_05ODMCMJAJ@skill?$AA@
  0015b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00167	8b c8		 mov	 ecx, eax
  00169	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 66   : 		lpItem.m_Luck = Item.attribute("luck").as_int();

  0016e	6a 00		 push	 0
  00170	88 45 de	 mov	 BYTE PTR _lpItem$17[ebp+6], al
  00173	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_04PFGGAFBF@luck?$AA@
  0017e	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0018a	8b c8		 mov	 ecx, eax
  0018c	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 67   : 		lpItem.m_Option = Item.attribute("opt").as_int();

  00191	6a 00		 push	 0
  00193	88 45 df	 mov	 BYTE PTR _lpItem$17[ebp+7], al
  00196	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_03KCFMBDBE@opt?$AA@
  001a1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ad	8b c8		 mov	 ecx, eax
  001af	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 68   : 		lpItem.m_Excellent = Item.attribute("exc").as_int();

  001b4	6a 00		 push	 0
  001b6	88 45 e0	 mov	 BYTE PTR _lpItem$17[ebp+8], al
  001b9	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_03MGHBCGFO@exc?$AA@
  001c4	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001d0	8b c8		 mov	 ecx, eax
  001d2	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 69   : 		lpItem.m_Ancient = Item.attribute("anc").as_int();

  001d7	6a 00		 push	 0
  001d9	88 45 e1	 mov	 BYTE PTR _lpItem$17[ebp+9], al
  001dc	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_03FBLIGOML@anc?$AA@
  001e7	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001f3	8b c8		 mov	 ecx, eax
  001f5	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  001fa	88 45 e2	 mov	 BYTE PTR _lpItem$17[ebp+10], al

; 70   : 		lpItem.m_MonsterMinLevel = Item.attribute("monminlvl").as_int();

  001fd	6a 00		 push	 0
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_09HFILCGNM@monminlvl?$AA@
  00204	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0020a	50		 push	 eax
  0020b	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00211	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00216	8b c8		 mov	 ecx, eax
  00218	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 71   : 		lpItem.m_MonsterMaxLevel = Item.attribute("monmaxlvl").as_int();

  0021d	6a 00		 push	 0
  0021f	66 89 45 e4	 mov	 WORD PTR _lpItem$17[ebp+12], ax
  00223	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_09HGHIMGJD@monmaxlvl?$AA@
  0022e	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0023a	8b c8		 mov	 ecx, eax
  0023c	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 72   : 		lpItem.m_MapNumber = Item.attribute("map").as_int();

  00241	6a 00		 push	 0
  00243	66 89 45 e6	 mov	 WORD PTR _lpItem$17[ebp+14], ax
  00247	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map?$AA@
  00252	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0025e	8b c8		 mov	 ecx, eax
  00260	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 73   : 		lpItem.m_Rate = Item.attribute("rate").as_int();

  00265	6a 00		 push	 0
  00267	66 89 45 e8	 mov	 WORD PTR _lpItem$17[ebp+16], ax
  0026b	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  00271	68 00 00 00 00	 push	 OFFSET ??_C@_04HCCHHEEF@rate?$AA@
  00276	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00282	8b c8		 mov	 ecx, eax
  00284	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  00289	89 45 ec	 mov	 DWORD PTR _lpItem$17[ebp+20], eax

; 74   : 		this->m_DropList.push_back(lpItem);

  0028c	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0028f	8d 45 d8	 lea	 eax, DWORD PTR _lpItem$17[ebp]
  00292	50		 push	 eax
  00293	e8 00 00 00 00	 call	 ?push_back@?$vector@UItemDropRateInfo@@V?$allocator@UItemDropRateInfo@@@std@@@std@@QAEXABUItemDropRateInfo@@@Z ; std::vector<ItemDropRateInfo,std::allocator<ItemDropRateInfo> >::push_back
  00298	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0029e	50		 push	 eax
  0029f	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  002a5	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  002aa	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Item$16[ebp]
  002b0	8b 00		 mov	 eax, DWORD PTR [eax]
  002b2	89 85 0c ff ff
	ff		 mov	 DWORD PTR _Item$16[ebp], eax
  002b8	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  002bd	85 c0		 test	 eax, eax
  002bf	0f 85 fb fd ff
	ff		 jne	 $LL4@Read
$LN3@Read:

; 75   : 	}
; 76   : }

  002c5	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  002cb	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  002d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002da	59		 pop	 ecx
  002db	5f		 pop	 edi
  002dc	5e		 pop	 esi
  002dd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e0	33 cd		 xor	 ecx, ebp
  002e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e7	8b e5		 mov	 esp, ebp
  002e9	5d		 pop	 ebp
  002ea	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@ItemDropRate@@QAEXPAD@Z$0:
  00000	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@ItemDropRate@@QAEXPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-316]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@ItemDropRate@@QAEXPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@ItemDropRate@@QAEXPAD@Z ENDP			; ItemDropRate::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?Load@ItemDropRate@@QAEXXZ
_TEXT	SEGMENT
?Load@ItemDropRate@@QAEXXZ PROC				; ItemDropRate::Load, COMDAT
; _this$ = ecx

; 39   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 40   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ItemDropRate@@QAEXXZ ; ItemDropRate::Init

; 41   : 	this->Read(gDirPath.GetNewPath(FILE_CUSTOM_ITEMDROPRATE));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@HENAJGIA@Custom?2ItemDropRate?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@ItemDropRate@@QAEXPAD@Z ; ItemDropRate::Read
  0001f	5e		 pop	 esi

; 42   : }

  00020	c3		 ret	 0
?Load@ItemDropRate@@QAEXXZ ENDP				; ItemDropRate::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?Init@ItemDropRate@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?Init@ItemDropRate@@QAEXXZ PROC				; ItemDropRate::Init, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 29   : {

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00009	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 30   : 	this->m_DropList.clear();

  00012	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00015	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00018	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0001a	f7 e9		 imul	 ecx
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 31   : 	if( this->m_DropList.capacity() > 0 )

  00026	74 41		 je	 SHORT $LN310@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  00028	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002b	3b c6		 cmp	 eax, esi
  0002d	74 3a		 je	 SHORT $LN310@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  0003e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00048	85 c9		 test	 ecx, ecx
  0004a	74 1d		 je	 SHORT $LN310@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004c	2b d1		 sub	 edx, ecx
  0004e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00053	f7 ea		 imul	 edx
  00055	c1 fa 02	 sar	 edx, 2
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0005f	50		 push	 eax
  00060	51		 push	 ecx
  00061	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00064	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
$LN310@Init:
  00069	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 35   : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?Init@ItemDropRate@@QAEXXZ ENDP				; ItemDropRate::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ??1ItemDropRate@@UAE@XZ
_TEXT	SEGMENT
??1ItemDropRate@@UAE@XZ PROC				; ItemDropRate::~ItemDropRate, COMDAT
; _this$ = ecx

; 23   : {

  00000	56		 push	 esi

; 25   : }

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ItemDropRate@@6B@
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	85 ff		 test	 edi, edi
  0000f	74 33		 je	 SHORT $LN7@ItemDropRa

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00011	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00014	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00019	2b cf		 sub	 ecx, edi
  0001b	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001d	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0001f	c1 fa 02	 sar	 edx, 2
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UItemDropRateInfo@@@std@@QAEXPAUItemDropRateInfo@@I@Z ; std::allocator<ItemDropRateInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@ItemDropRa:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 25   : }

  00046	c3		 ret	 0
??1ItemDropRate@@UAE@XZ ENDP				; ItemDropRate::~ItemDropRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ??0ItemDropRate@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ItemDropRate@@QAE@XZ PROC				; ItemDropRate::ItemDropRate, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ItemDropRate@@6B@

; 19   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp

; 19   : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0ItemDropRate@@QAE@XZ ENDP				; ItemDropRate::ItemDropRate
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 229  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemdroprate.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 229  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
