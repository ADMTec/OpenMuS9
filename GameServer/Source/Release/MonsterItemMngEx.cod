; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MonsterItemMngEx.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0__tagMONSTER_ITEM_DROP_PRATE_@@QAE@XZ	; __tagMONSTER_ITEM_DROP_PRATE_::__tagMONSTER_ITEM_DROP_PRATE_
PUBLIC	??0CMonsterItemMngEx@@QAE@XZ			; CMonsterItemMngEx::CMonsterItemMngEx
PUBLIC	??1CMonsterItemMngEx@@UAE@XZ			; CMonsterItemMngEx::~CMonsterItemMngEx
PUBLIC	?Init@CMonsterItemMngEx@@QAEXXZ			; CMonsterItemMngEx::Init
PUBLIC	?Clear@CMonsterItemMngEx@@QAEXXZ		; CMonsterItemMngEx::Clear
PUBLIC	?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z	; CMonsterItemMngEx::InsertItem
PUBLIC	?GetItem@CMonsterItemMngEx@@QAEPAVCItem@@H@Z	; CMonsterItemMngEx::GetItem
PUBLIC	?gObjGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z	; CMonsterItemMngEx::gObjGiveItemSearch
PUBLIC	?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ ; CMonsterItemMngEx::LoadMonsterItemDropRate
PUBLIC	?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ	; CMonsterItemMngEx::MakeJewelItem
PUBLIC	?gObjGiveItemSearchEx@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::gObjGiveItemSearchEx
PUBLIC	?MagicBookGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::MagicBookGiveItemSearch
PUBLIC	?NormalGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::NormalGiveItemSearch
PUBLIC	?CheckMonsterDropItem@CMonsterItemMngEx@@QAEHHH@Z ; CMonsterItemMngEx::CheckMonsterDropItem
PUBLIC	?GetItemEx@CMonsterItemMngEx@@QAEPAVCItem@@H@Z	; CMonsterItemMngEx::GetItemEx
PUBLIC	??_GCMonsterItemMngEx@@UAEPAXI@Z		; CMonsterItemMngEx::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CMonsterItemMngEx@@6B@			; CMonsterItemMngEx::`vftable'
PUBLIC	?g_MonsterItemMngEx@@3VCMonsterItemMngEx@@A	; g_MonsterItemMngEx
PUBLIC	??_C@_0CA@PAAHHDJM@Monster?2MonsterItemDropRate?4xml?$AA@ ; `string'
PUBLIC	??_C@_0CE@IPKEBOGN@?$FLMonsterItemMng?$FN?5File?5?$CFs?5not?5fou@ ; `string'
PUBLIC	??_C@_0BE@IACHHGKI@monsteritemdroprate?$AA@	; `string'
PUBLIC	??_C@_07JHAJHILB@monster?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_0DE@NJCAHJCB@?$FLMonsterItemMng?$FN?5Monster?5level?5?$DO@ ; `string'
PUBLIC	??_C@_0O@KEOMEMNP@magicbookrate?$AA@		; `string'
PUBLIC	??_C@_09PAPHFGNF@blessrate?$AA@			; `string'
PUBLIC	??_C@_08FDIPOKFM@soulrate?$AA@			; `string'
PUBLIC	??_C@_08JHKALJOA@liferate?$AA@			; `string'
PUBLIC	??_C@_0N@PCHEECHK@creationrate?$AA@		; `string'
PUBLIC	??_C@_09GGONJEKH@chaosrate?$AA@			; `string'
PUBLIC	??_C@_0L@DKIAAGDO@normalrate?$AA@		; `string'
PUBLIC	??_R4CMonsterItemMngEx@@6B@			; CMonsterItemMngEx::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMonsterItemMngEx@@@8			; CMonsterItemMngEx `RTTI Type Descriptor'
PUBLIC	??_R3CMonsterItemMngEx@@8			; CMonsterItemMngEx::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMonsterItemMngEx@@8			; CMonsterItemMngEx::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMonsterItemMngEx@@8		; CMonsterItemMngEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@42c80000
PUBLIC	__real@4b189680
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@00000004000000040000000400000004
PUBLIC	__xmm@00000007000000070000000700000007
PUBLIC	__xmm@00000010000000100000001000000010
PUBLIC	__xmm@00000015000000150000001500000015
PUBLIC	__xmm@0000002e0000002d0000002c00000023
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?zzzItemLevel@@YAHHHH@Z:PROC			; zzzItemLevel
EXTRN	?GetLevelItem@@YAHHHH@Z:PROC			; GetLevelItem
EXTRN	??_ECMonsterItemMngEx@@UAEPAXI@Z:PROC		; CMonsterItemMngEx::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?IsCashItem@@YAHH@Z:PROC			; IsCashItem
EXTRN	?IsCashSpecialItem@@YAHH@Z:PROC			; IsCashSpecialItem
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	?as_float@xml_attribute@pugi@@QBEMM@Z:PROC	; pugi::xml_attribute::as_float
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?g_MaxItemIndexOfEachItemType@@3PAHA:BYTE	; g_MaxItemIndexOfEachItemType
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?gEyesOfDevilSquareDropRate@@3HA:DWORD		; gEyesOfDevilSquareDropRate
EXTRN	?gKeyOfDevilSquareDropRate@@3HA:DWORD		; gKeyOfDevilSquareDropRate
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_MonsterItemMngEx@@3VCMonsterItemMngEx@@A DB 01f94H DUP (?) ; g_MonsterItemMngEx
_BSS	ENDS
CRT$XCU	SEGMENT
?g_MonsterItemMngEx$initializer$@@3P6AXXZA DD FLAT:??__Eg_MonsterItemMngEx@@YAXXZ ; g_MonsterItemMngEx$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@0000002e0000002d0000002c00000023
CONST	SEGMENT
__xmm@0000002e0000002d0000002c00000023 DB '#', 00H, 00H, 00H, ',', 00H, 00H
	DB	00H, '-', 00H, 00H, 00H, '.', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000015000000150000001500000015
CONST	SEGMENT
__xmm@00000015000000150000001500000015 DB 015H, 00H, 00H, 00H, 015H, 00H, 00H
	DB	00H, 015H, 00H, 00H, 00H, 015H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000010000000100000001000000010
CONST	SEGMENT
__xmm@00000010000000100000001000000010 DB 010H, 00H, 00H, 00H, 010H, 00H, 00H
	DB	00H, 010H, 00H, 00H, 00H, 010H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000007000000070000000700000007
CONST	SEGMENT
__xmm@00000007000000070000000700000007 DB 07H, 00H, 00H, 00H, 07H, 00H, 00H
	DB	00H, 07H, 00H, 00H, 00H, 07H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000004000000040000000400000004
CONST	SEGMENT
__xmm@00000004000000040000000400000004 DB 04H, 00H, 00H, 00H, 04H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 04H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@4b189680
CONST	SEGMENT
__real@4b189680 DD 04b189680r			; 1e+07
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CMonsterItemMngEx@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMonsterItemMngEx@@8 DD FLAT:??_R0?AVCMonsterItemMngEx@@@8 ; CMonsterItemMngEx::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMonsterItemMngEx@@8
rdata$r	ENDS
;	COMDAT ??_R2CMonsterItemMngEx@@8
rdata$r	SEGMENT
??_R2CMonsterItemMngEx@@8 DD FLAT:??_R1A@?0A@EA@CMonsterItemMngEx@@8 ; CMonsterItemMngEx::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMonsterItemMngEx@@8
rdata$r	SEGMENT
??_R3CMonsterItemMngEx@@8 DD 00H			; CMonsterItemMngEx::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMonsterItemMngEx@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMonsterItemMngEx@@@8
data$r	SEGMENT
??_R0?AVCMonsterItemMngEx@@@8 DD FLAT:??_7type_info@@6B@ ; CMonsterItemMngEx `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMonsterItemMngEx@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMonsterItemMngEx@@6B@
rdata$r	SEGMENT
??_R4CMonsterItemMngEx@@6B@ DD 00H			; CMonsterItemMngEx::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMonsterItemMngEx@@@8
	DD	FLAT:??_R3CMonsterItemMngEx@@8
rdata$r	ENDS
;	COMDAT ??_C@_0L@DKIAAGDO@normalrate?$AA@
CONST	SEGMENT
??_C@_0L@DKIAAGDO@normalrate?$AA@ DB 'normalrate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGONJEKH@chaosrate?$AA@
CONST	SEGMENT
??_C@_09GGONJEKH@chaosrate?$AA@ DB 'chaosrate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PCHEECHK@creationrate?$AA@
CONST	SEGMENT
??_C@_0N@PCHEECHK@creationrate?$AA@ DB 'creationrate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHKALJOA@liferate?$AA@
CONST	SEGMENT
??_C@_08JHKALJOA@liferate?$AA@ DB 'liferate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDIPOKFM@soulrate?$AA@
CONST	SEGMENT
??_C@_08FDIPOKFM@soulrate?$AA@ DB 'soulrate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PAPHFGNF@blessrate?$AA@
CONST	SEGMENT
??_C@_09PAPHFGNF@blessrate?$AA@ DB 'blessrate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEOMEMNP@magicbookrate?$AA@
CONST	SEGMENT
??_C@_0O@KEOMEMNP@magicbookrate?$AA@ DB 'magicbookrate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NJCAHJCB@?$FLMonsterItemMng?$FN?5Monster?5level?5?$DO@
CONST	SEGMENT
??_C@_0DE@NJCAHJCB@?$FLMonsterItemMng?$FN?5Monster?5level?5?$DO@ DB '[Mon'
	DB	'sterItemMng] Monster level >= MAX_MONSTER_LEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHAJHILB@monster?$AA@
CONST	SEGMENT
??_C@_07JHAJHILB@monster?$AA@ DB 'monster', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IACHHGKI@monsteritemdroprate?$AA@
CONST	SEGMENT
??_C@_0BE@IACHHGKI@monsteritemdroprate?$AA@ DB 'monsteritemdroprate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IPKEBOGN@?$FLMonsterItemMng?$FN?5File?5?$CFs?5not?5fou@
CONST	SEGMENT
??_C@_0CE@IPKEBOGN@?$FLMonsterItemMng?$FN?5File?5?$CFs?5not?5fou@ DB '[Mo'
	DB	'nsterItemMng] File %s not found!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PAAHHDJM@Monster?2MonsterItemDropRate?4xml?$AA@
CONST	SEGMENT
??_C@_0CA@PAAHHDJM@Monster?2MonsterItemDropRate?4xml?$AA@ DB 'Monster\Mon'
	DB	'sterItemDropRate.xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CMonsterItemMngEx@@6B@
CONST	SEGMENT
??_7CMonsterItemMngEx@@6B@ DD FLAT:??_R4CMonsterItemMngEx@@6B@ ; CMonsterItemMngEx::`vftable'
	DD	FLAT:??_ECMonsterItemMngEx@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ$0
__ehfuncinfo$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CMonsterItemMngEx@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMngEx@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMonsterItemMngEx@@QAEXXZ$1
__ehfuncinfo$?Init@CMonsterItemMngEx@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Init@CMonsterItemMngEx@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_MonsterItemMngEx@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterItemMngEx@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterItemMngEx'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMngEx@@3VCMonsterItemMngEx@@A ; g_MonsterItemMngEx
  00005	e9 00 00 00 00	 jmp	 ??1CMonsterItemMngEx@@UAE@XZ ; CMonsterItemMngEx::~CMonsterItemMngEx
??__Fg_MonsterItemMngEx@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterItemMngEx''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ??__Eg_MonsterItemMngEx@@YAXXZ
text$di	SEGMENT
??__Eg_MonsterItemMngEx@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterItemMngEx'', COMDAT

; 17   : CMonsterItemMngEx g_MonsterItemMngEx;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterItemMngEx@@3VCMonsterItemMngEx@@A ; g_MonsterItemMngEx
  00005	e8 00 00 00 00	 call	 ??0CMonsterItemMngEx@@QAE@XZ ; CMonsterItemMngEx::CMonsterItemMngEx
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterItemMngEx@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterItemMngEx''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterItemMngEx@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterItemMngEx''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMonsterItemMngEx@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMonsterItemMngEx@@UAEPAXI@Z PROC			; CMonsterItemMngEx::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMonsterItemMngEx@@UAE@XZ ; CMonsterItemMngEx::~CMonsterItemMngEx
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 94 1f 00 00	 push	 8084			; 00001f94H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMonsterItemMngEx@@UAEPAXI@Z ENDP			; CMonsterItemMngEx::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?GetItemEx@CMonsterItemMngEx@@QAEPAVCItem@@H@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
?GetItemEx@CMonsterItemMngEx@@QAEPAVCItem@@H@Z PROC	; CMonsterItemMngEx::GetItemEx, COMDAT
; _this$ = ecx

; 1077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1078 : 	if( m_bScriptLoaded == false )

  00006	83 be b4 05 00
	00 00		 cmp	 DWORD PTR [esi+1460], 0
  0000d	75 07		 jne	 SHORT $LN2@GetItemEx

; 1079 : 	{
; 1080 : 		return 0;

  0000f	33 c0		 xor	 eax, eax
  00011	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@GetItemEx:
  00016	57		 push	 edi

; 1081 : 	}
; 1082 : 	// ----
; 1083 : 	if( monsterlevel > MAX_MONSTER_LEVEL-1 ) //fix

  00017	8b 7d 08	 mov	 edi, DWORD PTR _monsterlevel$[ebp]
  0001a	81 ff 95 00 00
	00		 cmp	 edi, 149		; 00000095H
  00020	7e 07		 jle	 SHORT $LN3@GetItemEx

; 1084 : 	{
; 1085 : 		monsterlevel = MAX_MONSTER_LEVEL-1;

  00022	bf 95 00 00 00	 mov	 edi, 149		; 00000095H

; 1086 : 	}
; 1087 : 	// ----
; 1088 : 	if( monsterlevel > MAX_MONSTER_LEVEL || monsterlevel < 0 )

  00027	eb 14		 jmp	 SHORT $LN18@GetItemEx
$LN3@GetItemEx:
  00029	81 ff 96 00 00
	00		 cmp	 edi, 150		; 00000096H
  0002f	0f 8f fb 00 00
	00		 jg	 $LN5@GetItemEx
  00035	85 ff		 test	 edi, edi
  00037	0f 88 f3 00 00
	00		 js	 $LN5@GetItemEx
$LN18@GetItemEx:
  0003d	53		 push	 ebx

; 1091 : 	}
; 1092 : 	// ----
; 1093 : 	int sum			= 0;
; 1094 : 	int nRandValue	= GetLargeRand() % 10000000;

  0003e	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00043	33 d2		 xor	 edx, edx
  00045	b9 80 96 98 00	 mov	 ecx, 10000000		; 00989680H
  0004a	f7 f1		 div	 ecx

; 1095 : 	sum				+= this->RateData[monsterlevel].m_MagicBookRate;

  0004c	8d 04 ff	 lea	 eax, DWORD PTR [edi+edi*8]
  0004f	8b 8c 86 bc 05
	00 00		 mov	 ecx, DWORD PTR [esi+eax*4+1468]
  00056	8d 1c 86	 lea	 ebx, DWORD PTR [esi+eax*4]

; 1096 : 	// ----
; 1097 : 	if( nRandValue < sum )

  00059	3b d1		 cmp	 edx, ecx
  0005b	7d 2c		 jge	 SHORT $LN8@GetItemEx

; 1098 : 	{
; 1099 : 		int itemcount = this->m_iMonsterInvenExItemCount[monsterlevel];

  0005d	8b 9c be d0 1a
	00 00		 mov	 ebx, DWORD PTR [esi+edi*4+6864]

; 1100 : 		// ----
; 1101 : 		if( itemcount <= 0 )

  00064	85 db		 test	 ebx, ebx
  00066	0f 8e a1 00 00
	00		 jle	 $LN21@GetItemEx

; 1102 : 		{
; 1103 : 			return 0;
; 1104 : 		}
; 1105 : 		else
; 1106 : 		{
; 1107 : 			int itemindex = GetLargeRand() % itemcount;

  0006c	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00071	33 d2		 xor	 edx, edx
  00073	f7 f3		 div	 ebx
  00075	5b		 pop	 ebx

; 1108 : 			return &this->m_MonsterInvenExItems[monsterlevel][itemindex];

  00076	69 c2 d4 00 00
	00		 imul	 eax, edx, 212
  0007c	03 84 be 28 1d
	00 00		 add	 eax, DWORD PTR [esi+edi*4+7464]
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
$LN8@GetItemEx:

; 1109 : 		}
; 1110 : 	}
; 1111 : 	// ----
; 1112 : 	sum	+= this->RateData[monsterlevel].m_JewelOfBlessRate;

  00089	03 8b c0 05 00
	00		 add	 ecx, DWORD PTR [ebx+1472]

; 1113 : 	// ----
; 1114 : 	if( nRandValue < sum )

  0008f	3b d1		 cmp	 edx, ecx
  00091	7d 0d		 jge	 SHORT $LN9@GetItemEx

; 1115 : 	{
; 1116 : 		return this->m_MonsterJewelItem1;

  00093	8b 86 80 1f 00
	00		 mov	 eax, DWORD PTR [esi+8064]
  00099	5b		 pop	 ebx
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
$LN9@GetItemEx:

; 1117 : 	}
; 1118 : 	// ----
; 1119 : 	sum	+= this->RateData[monsterlevel].m_JewelOfSoulRate;

  000a0	8d 04 ff	 lea	 eax, DWORD PTR [edi+edi*8]
  000a3	03 8c 86 c4 05
	00 00		 add	 ecx, DWORD PTR [esi+eax*4+1476]

; 1120 : 	// ----
; 1121 : 	if( nRandValue < sum )

  000aa	3b d1		 cmp	 edx, ecx
  000ac	7d 0d		 jge	 SHORT $LN10@GetItemEx

; 1122 : 	{
; 1123 : 		return this->m_MonsterJewelItem2;

  000ae	8b 86 84 1f 00
	00		 mov	 eax, DWORD PTR [esi+8068]
  000b4	5b		 pop	 ebx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
$LN10@GetItemEx:

; 1124 : 	}
; 1125 : 	// ----
; 1126 : 	sum	+= this->RateData[monsterlevel].m_JewelOfLifeRate;

  000bb	03 8b c8 05 00
	00		 add	 ecx, DWORD PTR [ebx+1480]

; 1127 : 	// ----
; 1128 : 	if( nRandValue < sum )

  000c1	3b d1		 cmp	 edx, ecx
  000c3	7d 0d		 jge	 SHORT $LN11@GetItemEx

; 1129 : 	{
; 1130 : 		return this->m_MonsterJewelItem3;

  000c5	8b 86 88 1f 00
	00		 mov	 eax, DWORD PTR [esi+8072]
  000cb	5b		 pop	 ebx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
$LN11@GetItemEx:

; 1131 : 	}
; 1132 : 	// ----
; 1133 : 	sum	+= this->RateData[monsterlevel].m_JewelOfCreationRate;

  000d2	03 8b cc 05 00
	00		 add	 ecx, DWORD PTR [ebx+1484]

; 1134 : 	// ----
; 1135 : 	if( nRandValue < sum )

  000d8	3b d1		 cmp	 edx, ecx
  000da	7d 0d		 jge	 SHORT $LN12@GetItemEx

; 1136 : 	{
; 1137 : 		return this->m_MonsterJewelItem4;

  000dc	8b 86 8c 1f 00
	00		 mov	 eax, DWORD PTR [esi+8076]
  000e2	5b		 pop	 ebx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
$LN12@GetItemEx:

; 1138 : 	}
; 1139 : 	// ----
; 1140 : 	sum	+= this->RateData[monsterlevel].m_JewelOfChaosRate;

  000e9	8b 83 d0 05 00
	00		 mov	 eax, DWORD PTR [ebx+1488]
  000ef	03 c1		 add	 eax, ecx

; 1141 : 	// ----
; 1142 : 	if( nRandValue < sum )

  000f1	3b d0		 cmp	 edx, eax
  000f3	7d 0d		 jge	 SHORT $LN13@GetItemEx

; 1143 : 	{
; 1144 : 		return this->m_MonsterJewelItem5;

  000f5	8b 86 90 1f 00
	00		 mov	 eax, DWORD PTR [esi+8080]
  000fb	5b		 pop	 ebx
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  000fe	5d		 pop	 ebp
  000ff	c2 04 00	 ret	 4
$LN13@GetItemEx:

; 1145 : 	}
; 1146 : 	// ----
; 1147 : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00102	8b 9c be 5c 02
	00 00		 mov	 ebx, DWORD PTR [esi+edi*4+604]

; 1148 : 	// ----
; 1149 : 	if( itemcount <= 0 )

  00109	85 db		 test	 ebx, ebx
  0010b	7f 09		 jg	 SHORT $LN14@GetItemEx
$LN21@GetItemEx:
  0010d	5b		 pop	 ebx
  0010e	5f		 pop	 edi

; 1150 : 	{
; 1151 : 		return 0;

  0010f	33 c0		 xor	 eax, eax
  00111	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  00112	5d		 pop	 ebp
  00113	c2 04 00	 ret	 4
$LN14@GetItemEx:

; 1152 : 	}
; 1153 : 	else
; 1154 : 	{
; 1155 : 		int itemindex = GetLargeRand() % itemcount;

  00116	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0011b	33 d2		 xor	 edx, edx
  0011d	f7 f3		 div	 ebx
  0011f	5b		 pop	 ebx

; 1156 : 		return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00120	69 c2 d4 00 00
	00		 imul	 eax, edx, 212
  00126	03 44 be 04	 add	 eax, DWORD PTR [esi+edi*4+4]
  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  0012c	5d		 pop	 ebp
  0012d	c2 04 00	 ret	 4
$LN5@GetItemEx:
  00130	5f		 pop	 edi

; 1089 : 	{
; 1090 : 		return 0;

  00131	33 c0		 xor	 eax, eax
  00133	5e		 pop	 esi

; 1157 : 	}
; 1158 : 	// ----
; 1159 : 	return 0;
; 1160 : }

  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
?GetItemEx@CMonsterItemMngEx@@QAEPAVCItem@@H@Z ENDP	; CMonsterItemMngEx::GetItemEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?CheckMonsterDropItem@CMonsterItemMngEx@@QAEHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_index$ = 12						; size = 4
?CheckMonsterDropItem@CMonsterItemMngEx@@QAEHHH@Z PROC	; CMonsterItemMngEx::CheckMonsterDropItem, COMDAT
; _this$ = ecx

; 992  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 993  : 	if(		(type == 14 && index == 13)
; 994  : 		||	(type == 14 && index == 14)
; 995  : 		||	(type == 14 && index == 16)
; 996  : 		||	(type == 14 && index == 22)
; 997  : 		||	(type == 12 && index == 15) )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _index$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _type$[ebp]
  0000b	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  0000e	75 3a		 jne	 SHORT $LN7@CheckMonst
  00010	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  00013	74 3f		 je	 SHORT $LN3@CheckMonst
  00015	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00018	74 3a		 je	 SHORT $LN3@CheckMonst
  0001a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001d	74 35		 je	 SHORT $LN3@CheckMonst
  0001f	83 fe 16	 cmp	 esi, 22			; 00000016H
  00022	74 30		 je	 SHORT $LN3@CheckMonst

; 1015 : 	}
; 1016 : 	// ----
; 1017 : 	if(		(type == 14 && index == 35)
; 1018 : 		||	(type == 14 && index == 36)
; 1019 : 		||	(type == 14 && index == 37)
; 1020 : 		||	(type == 14 && index == 38)
; 1021 : 		||	(type == 14 && index == 39) 
; 1022 : 		||	(type == 14 && index == 40) )

  00024	83 fe 23	 cmp	 esi, 35			; 00000023H
  00027	74 2b		 je	 SHORT $LN3@CheckMonst
  00029	83 fe 24	 cmp	 esi, 36			; 00000024H
  0002c	74 26		 je	 SHORT $LN3@CheckMonst
  0002e	83 fe 25	 cmp	 esi, 37			; 00000025H
  00031	74 21		 je	 SHORT $LN3@CheckMonst
  00033	83 fe 26	 cmp	 esi, 38			; 00000026H
  00036	74 1c		 je	 SHORT $LN3@CheckMonst
  00038	83 fe 27	 cmp	 esi, 39			; 00000027H
  0003b	74 17		 je	 SHORT $LN3@CheckMonst
  0003d	83 fe 28	 cmp	 esi, 40			; 00000028H
  00040	75 4a		 jne	 SHORT $LN16@CheckMonst

; 1023 : 	{
; 1024 : 		return false;

  00042	5f		 pop	 edi
  00043	33 c0		 xor	 eax, eax
  00045	5e		 pop	 esi

; 1072 : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN7@CheckMonst:

; 993  : 	if(		(type == 14 && index == 13)
; 994  : 		||	(type == 14 && index == 14)
; 995  : 		||	(type == 14 && index == 16)
; 996  : 		||	(type == 14 && index == 22)
; 997  : 		||	(type == 12 && index == 15) )

  0004a	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0004d	75 0d		 jne	 SHORT $LN2@CheckMonst
  0004f	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00052	75 38		 jne	 SHORT $LN16@CheckMonst
$LN3@CheckMonst:
  00054	5f		 pop	 edi

; 998  : 	{
; 999  : 		return false;

  00055	33 c0		 xor	 eax, eax
  00057	5e		 pop	 esi

; 1072 : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
$LN2@CheckMonst:

; 1000 : 	}
; 1001 : 	// ----
; 1002 : 	if( type == 13 && index == 3 )

  0005c	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  0005f	75 2b		 jne	 SHORT $LN16@CheckMonst
  00061	83 fe 03	 cmp	 esi, 3
  00064	74 ee		 je	 SHORT $LN3@CheckMonst

; 1003 : 	{
; 1004 : 		return false;
; 1005 : 	}
; 1006 : 	// ----
; 1007 : 	if(		(type == 13 && index == 32)
; 1008 : 		||	(type == 13 && index == 33)
; 1009 : 		||	(type == 13 && index == 34)
; 1010 : 		||	(type == 13 && index == 35)
; 1011 : 		||	(type == 13 && index == 36) 
; 1012 : 		||	(type == 13 && index == 37) )

  00066	83 fe 20	 cmp	 esi, 32			; 00000020H
  00069	74 e9		 je	 SHORT $LN3@CheckMonst
  0006b	83 fe 21	 cmp	 esi, 33			; 00000021H
  0006e	74 e4		 je	 SHORT $LN3@CheckMonst
  00070	83 fe 22	 cmp	 esi, 34			; 00000022H
  00073	74 df		 je	 SHORT $LN3@CheckMonst
  00075	83 fe 23	 cmp	 esi, 35			; 00000023H
  00078	74 da		 je	 SHORT $LN3@CheckMonst
  0007a	83 fe 24	 cmp	 esi, 36			; 00000024H
  0007d	74 d5		 je	 SHORT $LN3@CheckMonst
  0007f	83 fe 25	 cmp	 esi, 37			; 00000025H
  00082	75 08		 jne	 SHORT $LN16@CheckMonst

; 1013 : 	{
; 1014 : 		return false;

  00084	5f		 pop	 edi
  00085	33 c0		 xor	 eax, eax
  00087	5e		 pop	 esi

; 1072 : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
$LN16@CheckMonst:
  0008c	53		 push	 ebx

; 1025 : 	}
; 1026 : 	// ----
; 1027 : 	if( IsCashItem(ITEMGET(type, index)) == true )

  0008d	8b df		 mov	 ebx, edi
  0008f	c1 e3 09	 shl	 ebx, 9
  00092	03 de		 add	 ebx, esi
  00094	53		 push	 ebx
  00095	e8 00 00 00 00	 call	 ?IsCashItem@@YAHH@Z	; IsCashItem
  0009a	83 c4 04	 add	 esp, 4
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	74 6c		 je	 SHORT $LN26@CheckMonst

; 1028 : 	{
; 1029 : 		return false;
; 1030 : 	}
; 1031 : 	// ----
; 1032 : 	if( /*IsPremiumItem*/IsCashSpecialItem(ITEMGET(type, index)) == true )

  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 ?IsCashSpecialItem@@YAHH@Z ; IsCashSpecialItem
  000a8	83 c4 04	 add	 esp, 4
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	74 5e		 je	 SHORT $LN26@CheckMonst

; 1033 : 	{
; 1034 : 		return false;
; 1035 : 	}
; 1036 : 	// ----
; 1037 : 	/*if( g_LuckyItemManager.IsLuckyItemTicket(ITEMGET(type, index)) == true )
; 1038 : 	{
; 1039 : 		return false;
; 1040 : 	}
; 1041 : 	// ----
; 1042 : 	if( g_LuckyItemManager.IsLuckyItemEquipment(ITEMGET(type, index)) == true )
; 1043 : 	{
; 1044 : 		return false;
; 1045 : 	}*/
; 1046 : 	// ----
; 1047 : 	if(		(type == 14 && index == 45)
; 1048 : 		||	(type == 14 && index == 46)
; 1049 : 		||	(type == 14 && index == 47)
; 1050 : 		||	(type == 14 && index == 48)
; 1051 : 		||	(type == 14 && index == 49) 
; 1052 : 		||	(type == 14 && index == 50) )

  000b0	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  000b3	75 4f		 jne	 SHORT $LN25@CheckMonst
  000b5	83 fe 2d	 cmp	 esi, 45			; 0000002dH
  000b8	74 54		 je	 SHORT $LN26@CheckMonst
  000ba	83 fe 2e	 cmp	 esi, 46			; 0000002eH
  000bd	74 4f		 je	 SHORT $LN26@CheckMonst
  000bf	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  000c2	74 4a		 je	 SHORT $LN26@CheckMonst
  000c4	83 fe 30	 cmp	 esi, 48			; 00000030H
  000c7	74 45		 je	 SHORT $LN26@CheckMonst
  000c9	83 fe 31	 cmp	 esi, 49			; 00000031H
  000cc	74 40		 je	 SHORT $LN26@CheckMonst
  000ce	83 fe 32	 cmp	 esi, 50			; 00000032H
  000d1	74 3b		 je	 SHORT $LN26@CheckMonst

; 1060 : 	}
; 1061 : 	// ----
; 1062 : 	if(		(type == 14 && index == 162)
; 1063 : 		||	(type == 14 && index == 163)
; 1064 : 		||	(type == 14 && index == 164)
; 1065 : 		||	(type == 14 && index == 165)
; 1066 : 		||	(type == 14 && index == 166) )

  000d3	81 fe a2 00 00
	00		 cmp	 esi, 162		; 000000a2H
  000d9	74 33		 je	 SHORT $LN26@CheckMonst
  000db	81 fe a3 00 00
	00		 cmp	 esi, 163		; 000000a3H
  000e1	74 2b		 je	 SHORT $LN26@CheckMonst
  000e3	81 fe a4 00 00
	00		 cmp	 esi, 164		; 000000a4H
  000e9	74 23		 je	 SHORT $LN26@CheckMonst
  000eb	81 fe a5 00 00
	00		 cmp	 esi, 165		; 000000a5H
  000f1	74 1b		 je	 SHORT $LN26@CheckMonst
  000f3	81 fe a6 00 00
	00		 cmp	 esi, 166		; 000000a6H
  000f9	75 1c		 jne	 SHORT $LN33@CheckMonst

; 1067 : 	{
; 1068 : 		return false;

  000fb	5b		 pop	 ebx
  000fc	5f		 pop	 edi
  000fd	33 c0		 xor	 eax, eax
  000ff	5e		 pop	 esi

; 1072 : }

  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
$LN25@CheckMonst:

; 1053 : 	{
; 1054 : 		return false;
; 1055 : 	}
; 1056 : 	// ----
; 1057 : 	if( type == 13 && index == 41 )

  00104	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00107	75 0e		 jne	 SHORT $LN33@CheckMonst
  00109	83 fe 29	 cmp	 esi, 41			; 00000029H
  0010c	75 09		 jne	 SHORT $LN33@CheckMonst
$LN26@CheckMonst:
  0010e	5b		 pop	 ebx
  0010f	5f		 pop	 edi

; 1058 : 	{
; 1059 : 		return false;

  00110	33 c0		 xor	 eax, eax
  00112	5e		 pop	 esi

; 1072 : }

  00113	5d		 pop	 ebp
  00114	c2 08 00	 ret	 8
$LN33@CheckMonst:
  00117	5b		 pop	 ebx
  00118	5f		 pop	 edi

; 1069 : 	}
; 1070 : 	// ----
; 1071 : 	return true;

  00119	b8 01 00 00 00	 mov	 eax, 1
  0011e	5e		 pop	 esi

; 1072 : }

  0011f	5d		 pop	 ebp
  00120	c2 08 00	 ret	 8
?CheckMonsterDropItem@CMonsterItemMngEx@@QAEHHH@Z ENDP	; CMonsterItemMngEx::CheckMonsterDropItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?NormalGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_incount$1$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?NormalGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z PROC	; CMonsterItemMngEx::NormalGiveItemSearch, COMDAT
; _this$ = ecx

; 781  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi

; 782  : 	int result;
; 783  : 	int incount = 0;
; 784  : 	int type, index;
; 785  : 	// ----
; 786  : 	if( monsterlevel > MAX_MONSTER_LEVEL - 1 )

  00007	8b 7d 08	 mov	 edi, DWORD PTR _monsterlevel$[ebp]
  0000a	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _incount$1$[ebp], 0
  00014	81 ff 95 00 00
	00		 cmp	 edi, 149		; 00000095H
  0001a	0f 8f b6 00 00
	00		 jg	 $LN77@NormalGive
  00020	53		 push	 ebx
  00021	56		 push	 esi
$LL2@NormalGive:

; 787  : 	{
; 788  : //		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__);	//Line: 8
; 789  : 		return;
; 790  : 	}
; 791  : 	// ----
; 792  : 	while(true)
; 793  : 	{
; 794  : 		type				= rand() % MAX_TYPE_ITEMS;

  00022	e8 00 00 00 00	 call	 _rand
  00027	8b d8		 mov	 ebx, eax
  00029	81 e3 0f 00 00
	80		 and	 ebx, -2147483633	; 8000000fH
  0002f	79 05		 jns	 SHORT $LN80@NormalGive
  00031	4b		 dec	 ebx
  00032	83 cb f0	 or	 ebx, -16		; fffffff0H
  00035	43		 inc	 ebx
$LN80@NormalGive:

; 795  : 		int iMaxItemIndex	= g_MaxItemIndexOfEachItemType[type] + 1;

  00036	8b 34 9d 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[ebx*4]
  0003d	46		 inc	 esi

; 796  : 		index				= rand() % iMaxItemIndex;

  0003e	e8 00 00 00 00	 call	 _rand
  00043	99		 cdq
  00044	f7 fe		 idiv	 esi
  00046	8b f2		 mov	 esi, edx

; 797  : 		// ----
; 798  : 		if( type == 15 || type == 12 )

  00048	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0004b	74 d5		 je	 SHORT $LL2@NormalGive
  0004d	83 fb 0c	 cmp	 ebx, 12			; 0000000cH
  00050	74 d0		 je	 SHORT $LL2@NormalGive

; 799  : 		{
; 800  : 			continue;
; 801  : 		}
; 802  : 		// ----
; 803  : 		if( !this->CheckMonsterDropItem(type, index) )

  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00055	56		 push	 esi
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ?CheckMonsterDropItem@CMonsterItemMngEx@@QAEHHH@Z ; CMonsterItemMngEx::CheckMonsterDropItem
  0005c	85 c0		 test	 eax, eax
  0005e	74 c2		 je	 SHORT $LL2@NormalGive

; 804  : 		{
; 805  : 			continue;
; 806  : 		}
; 807  : 		// ----
; 808  : 		if(		(type == 13 && index < 8) 
; 809  : 			||	(type == 14 && (index == 9 || index == 10 || index == 17 || index == 18)) 
; 810  : 			||	(type == 13 && index == 14) 
; 811  : 			||	(type == 14 && index == 31) )

  00060	83 fb 0d	 cmp	 ebx, 13			; 0000000dH
  00063	75 78		 jne	 SHORT $LN11@NormalGive
  00065	83 fe 08	 cmp	 esi, 8
  00068	0f 8c 91 00 00
	00		 jl	 $LN10@NormalGive
  0006e	83 fe 0e	 cmp	 esi, 14			; 0000000eH
  00071	0f 84 88 00 00
	00		 je	 $LN10@NormalGive
$LN8@NormalGive:

; 937  : 		{
; 938  : 			result = GetLevelItem(type, index, monsterlevel);

  00077	57		 push	 edi
  00078	56		 push	 esi
  00079	53		 push	 ebx
  0007a	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 939  : 			// ----
; 940  : 			if( result >= 0 )

  00082	85 c0		 test	 eax, eax
  00084	78 3a		 js	 SHORT $LN59@NormalGive

; 941  : 			{
; 942  : 				if( result <= maxlevel )

  00086	3b 45 0c	 cmp	 eax, DWORD PTR _maxlevel$[ebp]
  00089	7f 35		 jg	 SHORT $LN59@NormalGive

; 943  : 				{
; 944  : 					if( type == 12 )
; 945  : 					{
; 946  : 						if( index != 11 )
; 947  : 						{
; 948  : 							result = 0;
; 949  : 						}
; 950  : 					}
; 951  : 					// ----
; 952  : 					if( type == 12 && index == 11 )
; 953  : 					{
; 954  : 						// --
; 955  : 					}
; 956  : 					else
; 957  : 					{
; 958  : 						if( result > maxlevel )
; 959  : 						{
; 960  : 							result = maxlevel;
; 961  : 						}
; 962  : 					}
; 963  : 					// ----
; 964  : 					if( (type == 4 && index == 7) || (type == 4 && index == 15) )

  0008b	83 fb 04	 cmp	 ebx, 4
  0008e	75 0c		 jne	 SHORT $LN55@NormalGive
  00090	83 fe 07	 cmp	 esi, 7
  00093	74 05		 je	 SHORT $LN56@NormalGive
  00095	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00098	75 02		 jne	 SHORT $LN55@NormalGive
$LN56@NormalGive:

; 965  : 					{
; 966  : 						result = 0;

  0009a	33 c0		 xor	 eax, eax
$LN55@NormalGive:

; 967  : 					}
; 968  : 					// ----
; 969  : 					if( this->InsertItem(monsterlevel, type, index,result, 0, 0, 0) != (BYTE)-1 )

  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	6a 00		 push	 0
  000a2	50		 push	 eax
$LN84@NormalGive:
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a6	56		 push	 esi
  000a7	53		 push	 ebx
  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z ; CMonsterItemMngEx::InsertItem
  000ae	3c ff		 cmp	 al, 255			; 000000ffH
  000b0	74 0e		 je	 SHORT $LN59@NormalGive

; 970  : 					{
; 971  : 						incount++;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _incount$1$[ebp]
  000b5	40		 inc	 eax
  000b6	89 45 fc	 mov	 DWORD PTR _incount$1$[ebp], eax

; 972  : 						// ----
; 973  : 						if( incount > MAX_MONSTER_ITEM - 1 )

  000b9	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  000be	7f 14		 jg	 SHORT $LN78@NormalGive
$LN59@NormalGive:

; 974  : 						{
; 975  : 							return;
; 976  : 						}
; 977  : 					}
; 978  : 				}
; 979  : 			}
; 980  : 		}
; 981  : 		// ----
; 982  : 		if( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_MONSTER_ITEM )

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  000c3	81 bc b8 5c 02
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [eax+edi*4+604], 1000 ; 000003e8H
  000ce	0f 8c 4e ff ff
	ff		 jl	 $LL2@NormalGive
$LN78@NormalGive:
  000d4	5e		 pop	 esi
  000d5	5b		 pop	 ebx
$LN77@NormalGive:
  000d6	5f		 pop	 edi

; 983  : 		{
; 984  : 			break;
; 985  : 		}
; 986  : 	}
; 987  : }

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN11@NormalGive:

; 804  : 		{
; 805  : 			continue;
; 806  : 		}
; 807  : 		// ----
; 808  : 		if(		(type == 13 && index < 8) 
; 809  : 			||	(type == 14 && (index == 9 || index == 10 || index == 17 || index == 18)) 
; 810  : 			||	(type == 13 && index == 14) 
; 811  : 			||	(type == 14 && index == 31) )

  000dd	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  000e0	75 95		 jne	 SHORT $LN8@NormalGive
  000e2	83 fe 09	 cmp	 esi, 9
  000e5	74 18		 je	 SHORT $LN10@NormalGive
  000e7	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  000ea	74 13		 je	 SHORT $LN10@NormalGive
  000ec	83 fe 11	 cmp	 esi, 17			; 00000011H
  000ef	74 0e		 je	 SHORT $LN10@NormalGive
  000f1	83 fe 12	 cmp	 esi, 18			; 00000012H
  000f4	74 09		 je	 SHORT $LN10@NormalGive
  000f6	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  000f9	0f 85 78 ff ff
	ff		 jne	 $LN8@NormalGive
$LN10@NormalGive:

; 812  : 		{
; 813  : 			int perc			= rand() % 8;

  000ff	e8 00 00 00 00	 call	 _rand
  00104	8b d0		 mov	 edx, eax
  00106	81 e2 07 00 00
	80		 and	 edx, -2147483641	; 80000007H
  0010c	79 05		 jns	 SHORT $LN81@NormalGive
  0010e	4a		 dec	 edx
  0010f	83 ca f8	 or	 edx, -8			; fffffff8H
  00112	42		 inc	 edx
$LN81@NormalGive:

; 814  : 			BOOL bCheckDevil	= false;

  00113	33 c0		 xor	 eax, eax

; 815  : 			// ----
; 816  : 			if( type == 12 && index == 15 )
; 817  : 			{
; 818  : 				if( monsterlevel >= 13 && monsterlevel <= 66 )
; 819  : 				{
; 820  : 					perc = rand() % 7 ;
; 821  : 					// ----
; 822  : 					if( perc < 3 )
; 823  : 					{
; 824  : 						perc = 0;
; 825  : 					}
; 826  : 				}
; 827  : 				else
; 828  : 				{
; 829  : 					perc = 1;
; 830  : 				}
; 831  : 			}
; 832  : 			// ----
; 833  : 			if( type == 14 && index == 17 )

  00115	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  00118	75 63		 jne	 SHORT $LN25@NormalGive
  0011a	83 fe 11	 cmp	 esi, 17			; 00000011H
  0011d	75 2c		 jne	 SHORT $LN74@NormalGive

; 834  : 			{
; 835  : 				if( gEyesOfDevilSquareDropRate <= 0 )

  0011f	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, eax ; gEyesOfDevilSquareDropRate
  00125	7f 05		 jg	 SHORT $LN19@NormalGive

; 836  : 				{
; 837  : 					perc		= 1;

  00127	8d 50 01	 lea	 edx, DWORD PTR [eax+1]

; 838  : 					bCheckDevil = false;
; 839  : 				}
; 840  : 				else

  0012a	eb 11		 jmp	 SHORT $LN20@NormalGive
$LN19@NormalGive:

; 841  : 				{
; 842  : 					perc		= rand() % gEyesOfDevilSquareDropRate;

  0012c	e8 00 00 00 00	 call	 _rand
  00131	99		 cdq
  00132	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate

; 843  : 					bCheckDevil = true;

  00138	b8 01 00 00 00	 mov	 eax, 1
$LN20@NormalGive:

; 844  : 				}
; 845  : 				// ----
; 846  : 				if( gDevilSquareEvent == 0 )

  0013d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00144	75 37		 jne	 SHORT $LN25@NormalGive

; 847  : 				{
; 848  : 					perc = 1;
; 849  : 				}
; 850  : 			}
; 851  : 			// ----
; 852  : 			if( type == 14 && index == 18 )

  00146	e9 75 ff ff ff	 jmp	 $LN59@NormalGive
$LN74@NormalGive:
  0014b	83 fe 12	 cmp	 esi, 18			; 00000012H
  0014e	75 2d		 jne	 SHORT $LN25@NormalGive

; 853  : 			{
; 854  : 				if( gKeyOfDevilSquareDropRate <= 0 )

  00150	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA, eax ; gKeyOfDevilSquareDropRate
  00156	7f 07		 jg	 SHORT $LN23@NormalGive

; 855  : 				{
; 856  : 					perc		= 1;

  00158	8d 56 ef	 lea	 edx, DWORD PTR [esi-17]

; 857  : 					bCheckDevil = false;

  0015b	33 c0		 xor	 eax, eax

; 858  : 				}
; 859  : 				else

  0015d	eb 11		 jmp	 SHORT $LN24@NormalGive
$LN23@NormalGive:

; 860  : 				{
; 861  : 					perc		= rand() % gKeyOfDevilSquareDropRate;

  0015f	e8 00 00 00 00	 call	 _rand
  00164	99		 cdq
  00165	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate

; 862  : 					bCheckDevil = true;

  0016b	b8 01 00 00 00	 mov	 eax, 1
$LN24@NormalGive:

; 863  : 				}
; 864  : 				// ----
; 865  : 				if( gDevilSquareEvent == 0 )

  00170	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00177	0f 84 43 ff ff
	ff		 je	 $LN59@NormalGive
$LN25@NormalGive:

; 866  : 				{
; 867  : 					perc = 1;
; 868  : 				}
; 869  : 			}
; 870  : 			// ----
; 871  : 			if( perc == 0 )

  0017d	85 d2		 test	 edx, edx
  0017f	0f 85 3b ff ff
	ff		 jne	 $LN59@NormalGive

; 872  : 			{
; 873  : 				if( bCheckDevil == true )

  00185	83 f8 01	 cmp	 eax, 1
  00188	75 68		 jne	 SHORT $LN27@NormalGive

; 874  : 				{
; 875  : 					int devilitemlevel = 0;
; 876  : 					// ----
; 877  : 					if( (rand() % 5) != 0 )

  0018a	e8 00 00 00 00	 call	 _rand
  0018f	99		 cdq
  00190	b9 05 00 00 00	 mov	 ecx, 5
  00195	f7 f9		 idiv	 ecx
  00197	85 d2		 test	 edx, edx
  00199	0f 84 21 ff ff
	ff		 je	 $LN59@NormalGive

; 878  : 					{
; 879  : 						if( monsterlevel < 3 )

  0019f	83 ff 03	 cmp	 edi, 3
  001a2	0f 8c 18 ff ff
	ff		 jl	 $LN59@NormalGive

; 880  : 						{
; 881  : 							devilitemlevel = 0;
; 882  : 						}
; 883  : 						else if( monsterlevel < 36 ) 

  001a8	83 ff 24	 cmp	 edi, 36			; 00000024H
  001ab	7d 08		 jge	 SHORT $LN32@NormalGive

; 884  : 						{
; 885  : 							devilitemlevel = 1;

  001ad	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  001b0	e9 e7 fe ff ff	 jmp	 $LN55@NormalGive
$LN32@NormalGive:

; 886  : 						}
; 887  : 						else if( monsterlevel < 47 )

  001b5	83 ff 2f	 cmp	 edi, 47			; 0000002fH
  001b8	7d 0a		 jge	 SHORT $LN34@NormalGive

; 888  : 						{
; 889  : 							devilitemlevel = 2;

  001ba	b8 02 00 00 00	 mov	 eax, 2
  001bf	e9 d8 fe ff ff	 jmp	 $LN55@NormalGive
$LN34@NormalGive:

; 890  : 						}
; 891  : 						else if( monsterlevel < 60 )

  001c4	83 ff 3c	 cmp	 edi, 60			; 0000003cH
  001c7	7d 0a		 jge	 SHORT $LN36@NormalGive

; 892  : 						{
; 893  : 							devilitemlevel = 3;

  001c9	b8 03 00 00 00	 mov	 eax, 3
  001ce	e9 c9 fe ff ff	 jmp	 $LN55@NormalGive
$LN36@NormalGive:

; 894  : 						}
; 895  : 						else if( monsterlevel < 70 )

  001d3	83 ff 46	 cmp	 edi, 70			; 00000046H
  001d6	7d 0a		 jge	 SHORT $LN38@NormalGive

; 896  : 						{
; 897  : 							devilitemlevel = 4;

  001d8	b8 04 00 00 00	 mov	 eax, 4
  001dd	e9 ba fe ff ff	 jmp	 $LN55@NormalGive
$LN38@NormalGive:

; 898  : 						}
; 899  : 						else if( monsterlevel < 80 )

  001e2	33 c0		 xor	 eax, eax
  001e4	83 ff 50	 cmp	 edi, 80			; 00000050H
  001e7	0f 9d c0	 setge	 al
  001ea	83 c0 05	 add	 eax, 5

; 900  : 						{
; 901  : 							devilitemlevel = 5;
; 902  : 						}
; 903  : 						else 
; 904  : 						{
; 905  : 							devilitemlevel = 6;
; 906  : 						}
; 907  : 						// ----
; 908  : 						if( devilitemlevel != 0 )
; 909  : 						{
; 910  : 							if( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )
; 911  : 							{
; 912  : 								incount++;
; 913  : 								// ----
; 914  : 								if( incount > MAX_MONSTER_ITEM - 1 )
; 915  : 								{
; 916  : 									return;
; 917  : 								}
; 918  : 							}
; 919  : 						}
; 920  : 					}
; 921  : 				}

  001ed	e9 aa fe ff ff	 jmp	 $LN55@NormalGive
$LN27@NormalGive:

; 922  : 				else if( zzzItemLevel(type, index, monsterlevel) == true )

  001f2	57		 push	 edi
  001f3	56		 push	 esi
  001f4	53		 push	 ebx
  001f5	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  001fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fd	83 f8 01	 cmp	 eax, 1
  00200	0f 85 ba fe ff
	ff		 jne	 $LN59@NormalGive

; 923  : 				{
; 924  : 					if( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  00206	6a 00		 push	 0
  00208	6a 00		 push	 0
  0020a	6a 00		 push	 0
  0020c	6a 00		 push	 0

; 925  : 					{
; 926  : 						incount++;
; 927  : 						// ----
; 928  : 						if( incount > MAX_MONSTER_ITEM - 1 )
; 929  : 						{
; 930  : 							return;
; 931  : 						}
; 932  : 					}
; 933  : 				}
; 934  : 			}
; 935  : 		}
; 936  : 		else

  0020e	e9 90 fe ff ff	 jmp	 $LN84@NormalGive
?NormalGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ENDP	; CMonsterItemMngEx::NormalGiveItemSearch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?MagicBookGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -108					; size = 4
_index$1$ = -104					; size = 4
_result$1$ = -104					; size = 4
_incount$1$ = -100					; size = 4
_monsterlevel$GSCopy$1$ = -96				; size = 4
_BallTable$ = -92					; size = 88
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?MagicBookGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z PROC ; CMonsterItemMngEx::MagicBookGiveItemSearch, COMDAT
; _this$ = ecx

; 681  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _monsterlevel$[ebp]
  00014	89 4d 94	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00017	89 75 a0	 mov	 DWORD PTR _monsterlevel$GSCopy$1$[ebp], esi

; 682  : 	int result	= 0;
; 683  : 	int incount = 0;

  0001a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _incount$1$[ebp], 0

; 684  : 	int type, index;
; 685  : 	int BallTable[22];
; 686  : 	// ----
; 687  : 	if( monsterlevel > MAX_MONSTER_LEVEL - 1 )

  00021	81 fe 95 00 00
	00		 cmp	 esi, 149		; 00000095H
  00027	0f 8f 1a 01 00
	00		 jg	 $LN1@MagicBookG

; 688  : 	{
; 689  : //		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__);	//Line: 8
; 690  : 		return;
; 691  : 	}
; 692  : 	// ----
; 693  : 	BallTable[0]	= 7;
; 694  : 	BallTable[1]	= 8;
; 695  : 	BallTable[2]	= 9;
; 696  : 	BallTable[3]	= 10;
; 697  : 	BallTable[4]	= 11;
; 698  : 	BallTable[5]	= 12;
; 699  : 	BallTable[6]	= 13;
; 700  : 	BallTable[7]	= 14;
; 701  : 	BallTable[8]	= 16;
; 702  : 	BallTable[9]	= 17;
; 703  : 	BallTable[10]	= 18;
; 704  : 	BallTable[11]	= 19;
; 705  : 	BallTable[12]	= 21;
; 706  : 	BallTable[13]	= 22;
; 707  : 	BallTable[14]	= 23;
; 708  : 	BallTable[15]	= 24;
; 709  : 	BallTable[16]	= 35;
; 710  : 	BallTable[17]	= 44;
; 711  : 	BallTable[18]	= 45;
; 712  : 	BallTable[19]	= 46;
; 713  : 	BallTable[20]	= 47;

  0002d	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00034	0f 28 c2	 movaps	 xmm0, xmm2
  00037	c7 45 f4 2f 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+80], 47 ; 0000002fH
  0003e	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  00046	0f 28 da	 movaps	 xmm3, xmm2
  00049	0f 11 45 a4	 movups	 XMMWORD PTR _BallTable$[ebp], xmm0
  0004d	53		 push	 ebx
  0004e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000004000000040000000400000004
  00055	66 0f fe c2	 paddd	 xmm0, xmm2

; 714  : 	BallTable[21]	= 48;

  00059	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+84], 48 ; 00000030H
  00060	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  00068	0f 11 45 b4	 movups	 XMMWORD PTR _BallTable$[ebp+16], xmm0
  0006c	57		 push	 edi
  0006d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000010000000100000001000000010
  00074	33 ff		 xor	 edi, edi
  00076	66 0f fe c3	 paddd	 xmm0, xmm3
  0007a	0f 11 45 c4	 movups	 XMMWORD PTR _BallTable$[ebp+32], xmm0
  0007e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000015000000150000001500000015
  00085	66 0f fe c3	 paddd	 xmm0, xmm3
  00089	0f 11 45 d4	 movups	 XMMWORD PTR _BallTable$[ebp+48], xmm0
  0008d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000002e0000002d0000002c00000023
  00094	0f 11 45 e4	 movups	 XMMWORD PTR _BallTable$[ebp+64], xmm0
  00098	eb 08		 jmp	 SHORT $LL2@MagicBookG
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL55@MagicBookG:
  000a0	8b f3		 mov	 esi, ebx
$LL2@MagicBookG:

; 715  : 	// ----
; 716  : 	while(true)
; 717  : 	{
; 718  : 		if( rand() % 2 )

  000a2	e8 00 00 00 00	 call	 _rand
  000a7	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000ac	79 05		 jns	 SHORT $LN57@MagicBookG
  000ae	48		 dec	 eax
  000af	83 c8 fe	 or	 eax, -2			; fffffffeH
  000b2	40		 inc	 eax
$LN57@MagicBookG:
  000b3	0f 84 9f 00 00
	00		 je	 $LN5@MagicBookG

; 719  : 		{
; 720  : 			type	= MAX_TYPE_ITEMS - 1;

  000b9	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 721  : 			index	= GetLargeRand() % (g_MaxItemIndexOfEachItemType[type] + 1);

  000be	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  000c3	8b 0d 3c 00 00
	00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA+60
  000c9	33 d2		 xor	 edx, edx
  000cb	41		 inc	 ecx
  000cc	f7 f1		 div	 ecx
  000ce	8b c2		 mov	 eax, edx
  000d0	89 45 98	 mov	 DWORD PTR _index$1$[ebp], eax
$LN7@MagicBookG:

; 749  : 		}
; 750  : 		else
; 751  : 		{
; 752  : 			result = GetLevelItem(type, index, monsterlevel);

  000d3	56		 push	 esi
  000d4	50		 push	 eax
  000d5	53		 push	 ebx
  000d6	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 753  : 			// ----
; 754  : 			if( result != 0 )

  000de	85 c0		 test	 eax, eax
  000e0	75 c0		 jne	 SHORT $LL2@MagicBookG

; 755  : 			{
; 756  : 				continue;
; 757  : 			}
; 758  : 			// ----
; 759  : 			CItem * item	= &this->m_MonsterInvenExItems[monsterlevel][incount];

  000e2	8b 45 94	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 760  : 			int item_type	= ITEMGET(type, index);
; 761  : 			// ----
; 762  : 			item->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  000e5	6a 03		 push	 3
  000e7	68 ff 00 00 00	 push	 255			; 000000ffH
  000ec	6a 00		 push	 0
  000ee	8b b4 b0 28 1d
	00 00		 mov	 esi, DWORD PTR [eax+esi*4+7464]
  000f5	6a 00		 push	 0
  000f7	6a 00		 push	 0
  000f9	6a 00		 push	 0
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	c1 e3 09	 shl	 ebx, 9
  00102	03 f7		 add	 esi, edi
  00104	03 5d 98	 add	 ebx, DWORD PTR _index$1$[ebp]
  00107	8b ce		 mov	 ecx, esi
  00109	6a 00		 push	 0
  0010b	53		 push	 ebx
  0010c	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 763  : 			item->m_Level		= 0;

  00111	33 c0		 xor	 eax, eax

; 764  : 			item->m_Durability	= item->m_BaseDurability;
; 765  : 			// ----
; 766  : 			incount++;

  00113	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00119	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  0011d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00120	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00123	8b 45 9c	 mov	 eax, DWORD PTR _incount$1$[ebp]

; 767  : 			// ----
; 768  : 			if( incount > MAX_MONSTER_EXITEM - 1 )

  00126	8b 75 a0	 mov	 esi, DWORD PTR _monsterlevel$GSCopy$1$[ebp]
  00129	40		 inc	 eax
  0012a	89 45 9c	 mov	 DWORD PTR _incount$1$[ebp], eax
  0012d	81 ff fc 51 00
	00		 cmp	 edi, 20988		; 000051fcH
  00133	0f 8e 69 ff ff
	ff		 jle	 $LL2@MagicBookG
  00139	8b de		 mov	 ebx, esi
$LN18@MagicBookG:

; 769  : 			{
; 770  : 				break;
; 771  : 			}
; 772  : 		}
; 773  : 	}
; 774  : 	// ----
; 775  : 	this->m_iMonsterInvenExItemCount[monsterlevel] = incount;

  0013b	8b 4d 94	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0013e	5f		 pop	 edi
  0013f	89 84 99 d0 1a
	00 00		 mov	 DWORD PTR [ecx+ebx*4+6864], eax
  00146	5b		 pop	 ebx
$LN1@MagicBookG:

; 776  : }

  00147	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014a	33 cd		 xor	 ecx, ebp
  0014c	5e		 pop	 esi
  0014d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
$LN5@MagicBookG:

; 722  : 		}
; 723  : 		else
; 724  : 		{
; 725  : 			type	= 12;

  00158	bb 0c 00 00 00	 mov	 ebx, 12			; 0000000cH

; 726  : 			index	= BallTable[GetLargeRand() % 22];

  0015d	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00162	33 d2		 xor	 edx, edx
  00164	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00169	f7 f1		 div	 ecx
  0016b	8b 44 95 a4	 mov	 eax, DWORD PTR _BallTable$[ebp+edx*4]
  0016f	89 45 98	 mov	 DWORD PTR _index$1$[ebp], eax

; 727  : 		}
; 728  : 		// ----
; 729  : 		if( type == 12 && index == 11 )

  00172	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00175	0f 85 58 ff ff
	ff		 jne	 $LN7@MagicBookG

; 730  : 		{
; 731  : 			CItem * item		= &this->m_MonsterInvenExItems[monsterlevel][incount];

  0017b	8b 45 94	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 732  : 			result				= GetLevelItem(type, index, monsterlevel);

  0017e	8b 5d a0	 mov	 ebx, DWORD PTR _monsterlevel$GSCopy$1$[ebp]
  00181	53		 push	 ebx
  00182	6a 0b		 push	 11			; 0000000bH
  00184	8b b4 b0 28 1d
	00 00		 mov	 esi, DWORD PTR [eax+esi*4+7464]
  0018b	6a 0c		 push	 12			; 0000000cH
  0018d	03 f7		 add	 esi, edi
  0018f	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  00194	83 c4 0c	 add	 esp, 12			; 0000000cH
  00197	89 45 98	 mov	 DWORD PTR _result$1$[ebp], eax

; 733  : 			// ----
; 734  : 			if( result >= 0 )

  0019a	85 c0		 test	 eax, eax
  0019c	0f 88 fe fe ff
	ff		 js	 $LL55@MagicBookG

; 735  : 			{
; 736  : 				int item_type		= ITEMGET(type, index);
; 737  : 				item->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  001a2	6a 03		 push	 3
  001a4	68 ff 00 00 00	 push	 255			; 000000ffH
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	6a 00		 push	 0
  001af	6a 00		 push	 0
  001b1	6a 00		 push	 0
  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	68 0b 18 00 00	 push	 6155			; 0000180bH
  001bc	8b ce		 mov	 ecx, esi
  001be	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 738  : 				item->m_Level		= result;

  001c3	8b 45 98	 mov	 eax, DWORD PTR _result$1$[ebp]

; 739  : 				item->m_Durability	= item->m_BaseDurability;
; 740  : 				// ----
; 741  : 				incount++;

  001c6	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  001cc	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  001d0	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001d3	89 46 24	 mov	 DWORD PTR [esi+36], eax
  001d6	8b 45 9c	 mov	 eax, DWORD PTR _incount$1$[ebp]
  001d9	40		 inc	 eax
  001da	89 45 9c	 mov	 DWORD PTR _incount$1$[ebp], eax

; 742  : 				// ----
; 743  : 				if( incount > MAX_MONSTER_EXITEM - 1 )

  001dd	81 ff fc 51 00
	00		 cmp	 edi, 20988		; 000051fcH
  001e3	0f 8f 52 ff ff
	ff		 jg	 $LN18@MagicBookG

; 744  : 				{
; 745  : 					break;
; 746  : 				}
; 747  : 			}
; 748  : 			continue;

  001e9	e9 b2 fe ff ff	 jmp	 $LL55@MagicBookG
?MagicBookGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ENDP ; CMonsterItemMngEx::MagicBookGiveItemSearch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?gObjGiveItemSearchEx@CMonsterItemMngEx@@QAEXHH@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearchEx@CMonsterItemMngEx@@QAEXHH@Z PROC	; CMonsterItemMngEx::gObjGiveItemSearchEx, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 674  : 	this->NormalGiveItemSearch(monsterlevel, maxlevel);

  00004	ff 75 0c	 push	 DWORD PTR _maxlevel$[ebp]
  00007	8b d9		 mov	 ebx, ecx
  00009	ff 75 08	 push	 DWORD PTR _monsterlevel$[ebp]
  0000c	e8 00 00 00 00	 call	 ?NormalGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::NormalGiveItemSearch

; 675  : 	this->CMonsterItemMngEx::MagicBookGiveItemSearch(monsterlevel, maxlevel);

  00011	ff 75 0c	 push	 DWORD PTR _maxlevel$[ebp]
  00014	8b cb		 mov	 ecx, ebx
  00016	ff 75 08	 push	 DWORD PTR _monsterlevel$[ebp]
  00019	e8 00 00 00 00	 call	 ?MagicBookGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::MagicBookGiveItemSearch
  0001e	5b		 pop	 ebx

; 676  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?gObjGiveItemSearchEx@CMonsterItemMngEx@@QAEXHH@Z ENDP	; CMonsterItemMngEx::gObjGiveItemSearchEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
$T3 = -16						; size = 4
$T4 = -16						; size = 4
$T5 = -16						; size = 4
$T6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ PROC		; CMonsterItemMngEx::MakeJewelItem, COMDAT
; _this$ = ecx

; 635  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 636  : 	int item_type;
; 637  : 	// ----
; 638  : 	this->m_MonsterJewelItem1 = new CItem;

  00026	68 d4 00 00 00	 push	 212			; 000000d4H
  0002b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00030	83 c4 04	 add	 esp, 4
  00033	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN3@MakeJewelI
  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00048	eb 02		 jmp	 SHORT $LN4@MakeJewelI
$LN3@MakeJewelI:
  0004a	33 c0		 xor	 eax, eax
$LN4@MakeJewelI:

; 639  : 	this->m_MonsterJewelItem2 = new CItem;

  0004c	68 d4 00 00 00	 push	 212			; 000000d4H
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	89 86 80 1f 00
	00		 mov	 DWORD PTR [esi+8064], eax
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00063	83 c4 04	 add	 esp, 4
  00066	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
  00069	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00070	85 c0		 test	 eax, eax
  00072	74 09		 je	 SHORT $LN5@MakeJewelI
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  0007b	eb 02		 jmp	 SHORT $LN6@MakeJewelI
$LN5@MakeJewelI:
  0007d	33 c0		 xor	 eax, eax
$LN6@MakeJewelI:

; 640  : 	this->m_MonsterJewelItem3 = new CItem;

  0007f	68 d4 00 00 00	 push	 212			; 000000d4H
  00084	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008b	89 86 84 1f 00
	00		 mov	 DWORD PTR [esi+8068], eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00096	83 c4 04	 add	 esp, 4
  00099	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0009c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000a3	85 c0		 test	 eax, eax
  000a5	74 09		 je	 SHORT $LN7@MakeJewelI
  000a7	8b c8		 mov	 ecx, eax
  000a9	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  000ae	eb 02		 jmp	 SHORT $LN8@MakeJewelI
$LN7@MakeJewelI:
  000b0	33 c0		 xor	 eax, eax
$LN8@MakeJewelI:

; 641  : 	this->m_MonsterJewelItem4 = new CItem;

  000b2	68 d4 00 00 00	 push	 212			; 000000d4H
  000b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000be	89 86 88 1f 00
	00		 mov	 DWORD PTR [esi+8072], eax
  000c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c9	83 c4 04	 add	 esp, 4
  000cc	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  000cf	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000d6	85 c0		 test	 eax, eax
  000d8	74 09		 je	 SHORT $LN9@MakeJewelI
  000da	8b c8		 mov	 ecx, eax
  000dc	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  000e1	eb 02		 jmp	 SHORT $LN10@MakeJewelI
$LN9@MakeJewelI:
  000e3	33 c0		 xor	 eax, eax
$LN10@MakeJewelI:

; 642  : 	this->m_MonsterJewelItem5 = new CItem;

  000e5	68 d4 00 00 00	 push	 212			; 000000d4H
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	89 86 8c 1f 00
	00		 mov	 DWORD PTR [esi+8076], eax
  000f7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000fc	83 c4 04	 add	 esp, 4
  000ff	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00102	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00109	85 c0		 test	 eax, eax
  0010b	74 09		 je	 SHORT $LN11@MakeJewelI
  0010d	8b c8		 mov	 ecx, eax
  0010f	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00114	eb 02		 jmp	 SHORT $LN12@MakeJewelI
$LN11@MakeJewelI:
  00116	33 c0		 xor	 eax, eax
$LN12@MakeJewelI:

; 643  : 	// ----
; 644  : 	item_type = ITEMGET(14, 13);
; 645  : 	this->m_MonsterJewelItem1->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  00118	8b 8e 80 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8064]
  0011e	6a 03		 push	 3
  00120	68 ff 00 00 00	 push	 255			; 000000ffH
  00125	6a 00		 push	 0
  00127	6a 00		 push	 0
  00129	6a 00		 push	 0
  0012b	6a 00		 push	 0
  0012d	6a 00		 push	 0
  0012f	6a 00		 push	 0
  00131	6a 00		 push	 0
  00133	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  00138	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013f	89 86 90 1f 00
	00		 mov	 DWORD PTR [esi+8080], eax
  00145	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 646  : 	this->m_MonsterJewelItem1->m_Level = 0;

  0014a	8b 86 80 1f 00
	00		 mov	 eax, DWORD PTR [esi+8064]
  00150	33 c9		 xor	 ecx, ecx

; 647  : 	this->m_MonsterJewelItem1->m_Durability = this->m_MonsterJewelItem1->m_BaseDurability;
; 648  : 	// ----
; 649  : 	item_type = ITEMGET(14, 14);
; 650  : 	this->m_MonsterJewelItem2->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  00152	6a 03		 push	 3
  00154	68 ff 00 00 00	 push	 255			; 000000ffH
  00159	6a 00		 push	 0
  0015b	6a 00		 push	 0
  0015d	6a 00		 push	 0
  0015f	66 89 48 08	 mov	 WORD PTR [eax+8], cx
  00163	8b 8e 80 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8064]
  00169	6a 00		 push	 0
  0016b	6a 00		 push	 0
  0016d	6a 00		 push	 0
  0016f	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00172	6a 00		 push	 0
  00174	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00177	8b 8e 84 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8068]
  0017d	68 0e 1c 00 00	 push	 7182			; 00001c0eH
  00182	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 651  : 	this->m_MonsterJewelItem2->m_Level = 0;

  00187	8b 86 84 1f 00
	00		 mov	 eax, DWORD PTR [esi+8068]
  0018d	33 c9		 xor	 ecx, ecx

; 652  : 	this->m_MonsterJewelItem2->m_Durability = this->m_MonsterJewelItem2->m_BaseDurability;
; 653  : 	// ----
; 654  : 	item_type = ITEMGET(12, 15);
; 655  : 	this->m_MonsterJewelItem3->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  0018f	6a 03		 push	 3
  00191	68 ff 00 00 00	 push	 255			; 000000ffH
  00196	6a 00		 push	 0
  00198	6a 00		 push	 0
  0019a	6a 00		 push	 0
  0019c	66 89 48 08	 mov	 WORD PTR [eax+8], cx
  001a0	8b 8e 84 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8068]
  001a6	6a 00		 push	 0
  001a8	6a 00		 push	 0
  001aa	6a 00		 push	 0
  001ac	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  001af	6a 00		 push	 0
  001b1	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  001b4	8b 8e 88 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8072]
  001ba	68 0f 18 00 00	 push	 6159			; 0000180fH
  001bf	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 656  : 	this->m_MonsterJewelItem3->m_Level = 0;

  001c4	8b 86 88 1f 00
	00		 mov	 eax, DWORD PTR [esi+8072]
  001ca	33 c9		 xor	 ecx, ecx

; 657  : 	this->m_MonsterJewelItem3->m_Durability = this->m_MonsterJewelItem3->m_BaseDurability;
; 658  : 	// ----
; 659  : 	item_type = ITEMGET(14, 16);
; 660  : 	this->m_MonsterJewelItem4->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  001cc	6a 03		 push	 3
  001ce	68 ff 00 00 00	 push	 255			; 000000ffH
  001d3	6a 00		 push	 0
  001d5	6a 00		 push	 0
  001d7	6a 00		 push	 0
  001d9	66 89 48 08	 mov	 WORD PTR [eax+8], cx
  001dd	8b 8e 88 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8072]
  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	6a 00		 push	 0
  001e9	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  001ec	6a 00		 push	 0
  001ee	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  001f1	8b 8e 8c 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8076]
  001f7	68 10 1c 00 00	 push	 7184			; 00001c10H
  001fc	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 661  : 	this->m_MonsterJewelItem4->m_Level = 0;

  00201	8b 86 8c 1f 00
	00		 mov	 eax, DWORD PTR [esi+8076]
  00207	33 c9		 xor	 ecx, ecx

; 662  : 	this->m_MonsterJewelItem4->m_Durability = this->m_MonsterJewelItem4->m_BaseDurability;
; 663  : 	// ----
; 664  : 	item_type = ITEMGET(14, 22);
; 665  : 	this->m_MonsterJewelItem5->Convert(item_type, 0, 0, 0, 0, 0, 0, 0, -1, 3);

  00209	6a 03		 push	 3
  0020b	68 ff 00 00 00	 push	 255			; 000000ffH
  00210	6a 00		 push	 0
  00212	66 89 48 08	 mov	 WORD PTR [eax+8], cx
  00216	8b 8e 8c 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8076]
  0021c	6a 00		 push	 0
  0021e	6a 00		 push	 0
  00220	6a 00		 push	 0
  00222	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00225	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00228	6a 00		 push	 0
  0022a	8b 8e 90 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8080]
  00230	6a 00		 push	 0
  00232	6a 00		 push	 0
  00234	68 16 1c 00 00	 push	 7190			; 00001c16H
  00239	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 666  : 	this->m_MonsterJewelItem5->m_Level = 0;

  0023e	8b 86 90 1f 00
	00		 mov	 eax, DWORD PTR [esi+8080]
  00244	33 c9		 xor	 ecx, ecx
  00246	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 667  : 	this->m_MonsterJewelItem5->m_Durability = this->m_MonsterJewelItem5->m_BaseDurability;

  0024a	8b 8e 90 1f 00
	00		 mov	 ecx, DWORD PTR [esi+8080]
  00250	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00253	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 668  : }

  00256	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00259	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00260	59		 pop	 ecx
  00261	5e		 pop	 esi
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$0:
  00000	68 d4 00 00 00	 push	 212			; 000000d4H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$1:
  00012	68 d4 00 00 00	 push	 212			; 000000d4H
  00017	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$2:
  00024	68 d4 00 00 00	 push	 212			; 000000d4H
  00029	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	c3		 ret	 0
__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$3:
  00036	68 d4 00 00 00	 push	 212			; 000000d4H
  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	83 c4 08	 add	 esp, 8
  00047	c3		 ret	 0
__unwindfunclet$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ$4:
  00048	68 d4 00 00 00	 push	 212			; 000000d4H
  0004d	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
  00059	c3		 ret	 0
__ehhandler$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ:
  0005a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00061	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00064	33 c8		 xor	 ecx, eax
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ
  00070	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ ENDP		; CMonsterItemMngEx::MakeJewelItem
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ
_TEXT	SEGMENT
_Result$ = -276						; size = 12
$T2 = -264						; size = 4
$T3 = -260						; size = 4
$T4 = -256						; size = 4
$T5 = -252						; size = 4
$T6 = -248						; size = 4
$T7 = -244						; size = 4
$T8 = -240						; size = 4
$T9 = -236						; size = 4
$T10 = -232						; size = 4
_MonsterItemDropRate$ = -228				; size = 4
_Node$11 = -224						; size = 4
tv358 = -220						; size = 4
tv347 = -220						; size = 4
tv337 = -220						; size = 4
tv327 = -220						; size = 4
tv290 = -220						; size = 4
tv272 = -220						; size = 4
tv255 = -220						; size = 4
_Document$ = -216					; size = 200
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ PROC	; CMonsterItemMngEx::LoadMonsterItemDropRate, COMDAT
; _this$ = ecx

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx

; 516  : 	/*LPSTR script_file		= gDirPath.GetNewPath(FILE_MONSTER_ITEMDROPRATE);
; 517  : 	this->m_bScriptLoaded	= false;
; 518  : 	SMDFile					= fopen(script_file, "r");
; 519  : 	// ----
; 520  : 	if( !SMDFile )
; 521  : 	{
; 522  : 		MsgBox("File Open Error : MonsterItemDropRate.dat");
; 523  : 		LogAdd(lMsg.Get(453), script_file);
; 524  : 		return;
; 525  : 	}
; 526  : 	// ----
; 527  : 	SMDToken Token;
; 528  : 	int nDropRatePerItemCnt = 0;
; 529  : 	int nRateCnt			= 0;
; 530  : 	int nLevel				= 0;
; 531  : 	// ----
; 532  : 	while(true)
; 533  : 	{
; 534  : 		Token = GetToken();
; 535  : 		// ----
; 536  : 		if( Token == NAME && !strcmp("end", &TokenString[0]) )
; 537  : 		{
; 538  : 			break;
; 539  : 		}
; 540  : 		// ----
; 541  : 		int MonsterLevel									= TokenNumber;
; 542  : 		this->RateData[MonsterLevel].m_MonsterLevel			= MonsterLevel;
; 543  : 		// ----
; 544  : 		Token = GetToken();
; 545  : 		this->RateData[MonsterLevel].m_MagicBookRate		= TokenNumber * 10000000.0f;
; 546  : 		// ----
; 547  : 		Token = GetToken();
; 548  : 		this->RateData[MonsterLevel].m_JewelOfBlessRate		= TokenNumber * 10000000.0f;
; 549  : 		// ----
; 550  : 		Token = GetToken();
; 551  : 		this->RateData[MonsterLevel].m_JewelOfSoulRate		= TokenNumber * 10000000.0f;
; 552  : 		// ----
; 553  : 		Token = GetToken();
; 554  : 		this->RateData[MonsterLevel].m_JewelOfLifeRate		= TokenNumber * 10000000.0f;
; 555  : 		// ----
; 556  : 		Token = GetToken();
; 557  : 		this->RateData[MonsterLevel].m_JewelOfCreationRate	= TokenNumber * 10000000.0f;
; 558  : 		// ----
; 559  : 		Token = GetToken();
; 560  : 		this->RateData[MonsterLevel].m_JewelOfChaosRate		= TokenNumber * 10000000.0f;
; 561  : 		// ----
; 562  : 		Token = GetToken();
; 563  : 		this->RateData[MonsterLevel].m_NormalItemRate		= TokenNumber * 10000000.0f;
; 564  : 		// ----
; 565  : 		int nSum = this->RateData[MonsterLevel].m_MagicBookRate
; 566  : 			+ this->RateData[MonsterLevel].m_JewelOfBlessRate
; 567  : 			+ this->RateData[MonsterLevel].m_JewelOfSoulRate
; 568  : 			+ this->RateData[MonsterLevel].m_JewelOfLifeRate
; 569  : 			+ this->RateData[MonsterLevel].m_JewelOfChaosRate
; 570  : 			+ this->RateData[MonsterLevel].m_JewelOfCreationRate
; 571  : 			+ this->RateData[MonsterLevel].m_NormalItemRate;
; 572  : 		// ----
; 573  : 		this->RateData[MonsterLevel].m_TotalDropRate = nSum;
; 574  : 		// ----
; 575  : 		nLevel++;
; 576  : 		// ----
; 577  : 		if( nLevel >= MAX_MONSTER_LEVEL )
; 578  : 		{
; 579  : 			break;
; 580  : 		}
; 581  : 	}
; 582  : 	// ----
; 583  : 	fclose(SMDFile);
; 584  : 	LogAdd(lMsg.Get(454), script_file);
; 585  : 	this->m_bScriptLoaded = true;*/
; 586  : 
; 587  : 	this->m_bScriptLoaded = false;
; 588  : 	LPSTR File = gDirPath.GetNewPath(FILE_MONSTER_ITEMDROPRATE);

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PAAHHDJM@Monster?2MonsterItemDropRate?4xml?$AA@
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0003a	c7 83 b4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+1460], 0
  00044	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath

; 589  : 	xml_document Document;

  00049	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0004f	8b f0		 mov	 esi, eax
  00051	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 590  : 	xml_parse_result Result = Document.load_file(File);

  00056	6a 00		 push	 0
  00058	6a 74		 push	 116			; 00000074H
  0005a	56		 push	 esi
  0005b	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00061	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	50		 push	 eax
  00069	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0006f	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 591  : 	// ----
; 592  : 	if( Result.status != status_ok )

  00074	83 bd ec fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  0007b	74 13		 je	 SHORT $LN5@LoadMonste

; 593  : 	{
; 594  : 		MsgBox("[MonsterItemMng] File %s not found!", File);

  0007d	56		 push	 esi
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IPKEBOGN@?$FLMonsterItemMng?$FN?5File?5?$CFs?5not?5fou@
  00083	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00088	83 c4 08	 add	 esp, 8
  0008b	e9 ad 02 00 00	 jmp	 $LN10@LoadMonste
$LN5@LoadMonste:

; 595  : 		return;
; 596  : 	}
; 597  : 	// ----
; 598  : 	xml_node MonsterItemDropRate = Document.child("monsteritemdroprate");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IACHHGKI@monsteritemdroprate?$AA@
  00095	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _MonsterItemDropRate$[ebp]
  0009b	50		 push	 eax
  0009c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  000a2	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 599  : 	// ----
; 600  : 	for( xml_node Node = MonsterItemDropRate.child("monster"); Node; Node = Node.next_sibling() )

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_07JHAJHILB@monster?$AA@
  000ac	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _Node$11[ebp]
  000b2	50		 push	 eax
  000b3	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _MonsterItemDropRate$[ebp]
  000b9	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000be	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  000c4	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000c9	85 c0		 test	 eax, eax
  000cb	0f 84 62 02 00
	00		 je	 $LN3@LoadMonste
$LL4@LoadMonste:

; 601  : 	{
; 602  : 		int MonsterLevel = Node.attribute("level").as_int();

  000d1	6a 00		 push	 0
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_05KJNJLLGA@level?$AA@
  000d8	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  000de	50		 push	 eax
  000df	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  000e5	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000ea	8b c8		 mov	 ecx, eax
  000ec	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  000f1	8b f0		 mov	 esi, eax

; 603  : 		// ----
; 604  : 		if( MonsterLevel >= MAX_MONSTER_LEVEL )

  000f3	81 fe 96 00 00
	00		 cmp	 esi, 150		; 00000096H
  000f9	0f 8d 65 02 00
	00		 jge	 $LN12@LoadMonste

; 607  : 			return;
; 608  : 		}
; 609  : 		// ----
; 610  : 		this->RateData[MonsterLevel].m_MonsterLevel = MonsterLevel;
; 611  : 		this->RateData[MonsterLevel].m_MagicBookRate = Node.attribute("magicbookrate").as_float() * 10000000.0f;

  000ff	51		 push	 ecx
  00100	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00107	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KEOMEMNP@magicbookrate?$AA@
  00112	8d 3c f6	 lea	 edi, DWORD PTR [esi+esi*8]
  00115	50		 push	 eax
  00116	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  0011c	89 b4 bb b8 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1464], esi
  00123	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00128	8b c8		 mov	 ecx, eax
  0012a	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  0012f	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 612  : 		this->RateData[MonsterLevel].m_JewelOfBlessRate = Node.attribute("blessrate").as_float() * 10000000.0f;

  00135	51		 push	 ecx
  00136	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0013d	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_09PAPHFGNF@blessrate?$AA@
  00148	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv358[ebp]
  0014e	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv358[ebp]
  00156	89 84 bb bc 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1468], eax
  0015d	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00169	8b c8		 mov	 ecx, eax
  0016b	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  00170	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 613  : 		this->RateData[MonsterLevel].m_JewelOfSoulRate = Node.attribute("soulrate").as_float() * 10000000.0f;

  00176	8d 34 f6	 lea	 esi, DWORD PTR [esi+esi*8]
  00179	51		 push	 ecx
  0017a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00181	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00187	68 00 00 00 00	 push	 OFFSET ??_C@_08FDIPOKFM@soulrate?$AA@
  0018c	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv347[ebp]
  00192	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv347[ebp]
  0019a	89 84 bb c0 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1472], eax
  001a1	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ad	8b c8		 mov	 ecx, eax
  001af	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  001b4	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 614  : 		this->RateData[MonsterLevel].m_JewelOfLifeRate = Node.attribute("liferate").as_float() * 10000000.0f;

  001ba	51		 push	 ecx
  001bb	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  001c2	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_08JHKALJOA@liferate?$AA@
  001cd	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv337[ebp]
  001d3	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv337[ebp]
  001db	89 84 b3 c4 05
	00 00		 mov	 DWORD PTR [ebx+esi*4+1476], eax
  001e2	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  001e8	50		 push	 eax
  001e9	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ee	8b c8		 mov	 ecx, eax
  001f0	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  001f5	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 615  : 		this->RateData[MonsterLevel].m_JewelOfCreationRate = Node.attribute("creationrate").as_float() * 10000000.0f;

  001fb	51		 push	 ecx
  001fc	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00203	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00209	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PCHEECHK@creationrate?$AA@
  0020e	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv327[ebp]
  00214	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv327[ebp]
  0021c	89 84 bb c8 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1480], eax
  00223	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0022f	8b c8		 mov	 ecx, eax
  00231	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  00236	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 616  : 		this->RateData[MonsterLevel].m_JewelOfChaosRate = Node.attribute("chaosrate").as_float() * 10000000.0f;

  0023c	51		 push	 ecx
  0023d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00244	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_09GGONJEKH@chaosrate?$AA@
  0024f	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv290[ebp]
  00255	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv290[ebp]
  0025d	89 84 bb cc 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1484], eax
  00264	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00270	8b c8		 mov	 ecx, eax
  00272	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  00277	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680
  0027d	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv272[ebp]
  00283	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv272[ebp]
  0028b	89 84 bb d0 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1488], eax

; 617  : 		this->RateData[MonsterLevel].m_NormalItemRate = Node.attribute("normalrate").as_float() * 10000000.0f;

  00292	51		 push	 ecx
  00293	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0029a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DKIAAGDO@normalrate?$AA@
  002a5	50		 push	 eax
  002a6	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  002ac	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  002b1	8b c8		 mov	 ecx, eax
  002b3	e8 00 00 00 00	 call	 ?as_float@xml_attribute@pugi@@QBEMM@Z ; pugi::xml_attribute::as_float
  002b8	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@4b189680

; 618  : 		// ----
; 619  : 		int nSum = this->RateData[MonsterLevel].m_MagicBookRate
; 620  : 			+ this->RateData[MonsterLevel].m_JewelOfBlessRate
; 621  : 			+ this->RateData[MonsterLevel].m_JewelOfSoulRate
; 622  : 			+ this->RateData[MonsterLevel].m_JewelOfLifeRate
; 623  : 			+ this->RateData[MonsterLevel].m_JewelOfChaosRate
; 624  : 			+ this->RateData[MonsterLevel].m_JewelOfCreationRate
; 625  : 			+ this->RateData[MonsterLevel].m_NormalItemRate;

  002be	8b 8c bb c0 05
	00 00		 mov	 ecx, DWORD PTR [ebx+edi*4+1472]
  002c5	03 8c bb bc 05
	00 00		 add	 ecx, DWORD PTR [ebx+edi*4+1468]
  002cc	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv255[ebp]
  002d2	f3 0f 2c 85 24
	ff ff ff	 cvttss2si eax, DWORD PTR tv255[ebp]
  002da	03 c8		 add	 ecx, eax
  002dc	89 84 bb d4 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1492], eax
  002e3	03 8c b3 c4 05
	00 00		 add	 ecx, DWORD PTR [ebx+esi*4+1476]
  002ea	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  002f0	03 8c bb d0 05
	00 00		 add	 ecx, DWORD PTR [ebx+edi*4+1488]
  002f7	03 8c bb cc 05
	00 00		 add	 ecx, DWORD PTR [ebx+edi*4+1484]
  002fe	03 8c bb c8 05
	00 00		 add	 ecx, DWORD PTR [ebx+edi*4+1480]

; 626  : 		// ----
; 627  : 		this->RateData[MonsterLevel].m_TotalDropRate = nSum;

  00305	89 8c bb d8 05
	00 00		 mov	 DWORD PTR [ebx+edi*4+1496], ecx
  0030c	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  00312	50		 push	 eax
  00313	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00318	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$11[ebp]
  0031e	8b 00		 mov	 eax, DWORD PTR [eax]
  00320	89 85 20 ff ff
	ff		 mov	 DWORD PTR _Node$11[ebp], eax
  00326	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  0032b	85 c0		 test	 eax, eax
  0032d	0f 85 9e fd ff
	ff		 jne	 $LL4@LoadMonste
$LN3@LoadMonste:

; 628  : 	}
; 629  : 	this->m_bScriptLoaded = true;

  00333	c7 83 b4 05 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+1460], 1
$LN10@LoadMonste:

; 630  : }

  0033d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00343	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00348	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0034b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00352	59		 pop	 ecx
  00353	5f		 pop	 edi
  00354	5e		 pop	 esi
  00355	5b		 pop	 ebx
  00356	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00359	33 cd		 xor	 ecx, ebp
  0035b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00360	8b e5		 mov	 esp, ebp
  00362	5d		 pop	 ebp
  00363	c3		 ret	 0
$LN12@LoadMonste:

; 605  : 		{
; 606  : 			MsgBox("[MonsterItemMng] Monster level >= MAX_MONSTER_LEVEL");

  00364	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@NJCAHJCB@?$FLMonsterItemMng?$FN?5Monster?5level?5?$DO@
  00369	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0036e	83 c4 04	 add	 esp, 4
  00371	eb ca		 jmp	 SHORT $LN10@LoadMonste
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-280]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ ENDP	; CMonsterItemMngEx::LoadMonsterItemDropRate
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?gObjGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z
_TEXT	SEGMENT
_bCheckDevil$1$ = -104					; size = 4
tv1166 = -104						; size = 4
_this$GSCopy$1$ = -100					; size = 4
_incount$1$ = -96					; size = 4
_BallTable$ = -92					; size = 88
__$ArrayPad$ = -4					; size = 4
_monsterlevel$ = 8					; size = 4
_maxlevel$ = 12						; size = 4
?gObjGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z PROC	; CMonsterItemMngEx::gObjGiveItemSearch, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _monsterlevel$[ebp]
  00014	89 4d 9c	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 189  : 	int result;
; 190  : 	int incount = 0;

  00017	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _incount$1$[ebp], 0

; 191  : 	int type, index;
; 192  : 	int BallTable[22];
; 193  : 	// ----
; 194  : 	if( monsterlevel > MAX_MONSTER_LEVEL-1 )

  0001e	81 fb 95 00 00
	00		 cmp	 ebx, 149		; 00000095H
  00024	0f 8f 31 04 00
	00		 jg	 $LN182@gObjGiveIt

; 195  : 	{
; 196  : //		LogAdd("error-L3 : Monster Level Overflow~ %s %d", __FILE__, __LINE__ );	//Line: 8
; 197  : 		return;
; 198  : 	}
; 199  : 	// ----
; 200  : 	BallTable[0]	= 7;
; 201  : 	BallTable[1]	= 8;
; 202  : 	BallTable[2]	= 9;
; 203  : 	BallTable[3]	= 10;
; 204  : 	BallTable[4]	= 11;
; 205  : 	BallTable[5]	= 12;
; 206  : 	BallTable[6]	= 13;
; 207  : 	BallTable[7]	= 14;
; 208  : 	BallTable[8]	= 16;
; 209  : 	BallTable[9]	= 17;
; 210  : 	BallTable[10]	= 18;
; 211  : 	BallTable[11]	= 19;
; 212  : 	BallTable[12]	= 21;
; 213  : 	BallTable[13]	= 22;
; 214  : 	BallTable[14]	= 23;
; 215  : 	BallTable[15]	= 24;
; 216  : 	BallTable[16]	= 35;
; 217  : 	BallTable[17]	= 44;
; 218  :     BallTable[18]	= 45;
; 219  :     BallTable[19]	= 46;
; 220  :     BallTable[20]	= 47;

  0002a	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR __xmm@00000003000000020000000100000000
  00031	0f 28 c2	 movaps	 xmm0, xmm2
  00034	c7 45 f4 2f 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+80], 47 ; 0000002fH
  0003b	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  00043	0f 28 da	 movaps	 xmm3, xmm2
  00046	0f 11 45 a4	 movups	 XMMWORD PTR _BallTable$[ebp], xmm0
  0004a	56		 push	 esi
  0004b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000004000000040000000400000004
  00052	66 0f fe c2	 paddd	 xmm0, xmm2

; 221  :     BallTable[21]	= 48;

  00056	c7 45 f8 30 00
	00 00		 mov	 DWORD PTR _BallTable$[ebp+84], 48 ; 00000030H
  0005d	66 0f fe 05 00
	00 00 00	 paddd	 xmm0, XMMWORD PTR __xmm@00000007000000070000000700000007
  00065	0f 11 45 b4	 movups	 XMMWORD PTR _BallTable$[ebp+16], xmm0
  00069	57		 push	 edi
  0006a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000010000000100000001000000010
  00071	66 0f fe c3	 paddd	 xmm0, xmm3
  00075	0f 11 45 c4	 movups	 XMMWORD PTR _BallTable$[ebp+32], xmm0
  00079	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000015000000150000001500000015
  00080	66 0f fe c3	 paddd	 xmm0, xmm3
  00084	0f 11 45 d4	 movups	 XMMWORD PTR _BallTable$[ebp+48], xmm0
  00088	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000002e0000002d0000002c00000023
  0008f	0f 11 45 e4	 movups	 XMMWORD PTR _BallTable$[ebp+64], xmm0
$LN211@gObjGiveIt:
  00093	be 16 00 00 00	 mov	 esi, 22			; 00000016H
$LL2@gObjGiveIt:

; 222  : 	// ----
; 223  : 	while(true)
; 224  : 	{
; 225  : 		if( (rand() % 20) ==  0 )

  00098	e8 00 00 00 00	 call	 _rand
  0009d	99		 cdq
  0009e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  000a3	f7 f9		 idiv	 ecx
  000a5	85 d2		 test	 edx, edx
  000a7	75 44		 jne	 SHORT $LN5@gObjGiveIt

; 226  : 		{
; 227  : 			if( (rand() % 2) != 0 )

  000a9	e8 00 00 00 00	 call	 _rand
  000ae	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000b3	79 05		 jns	 SHORT $LN215@gObjGiveIt
  000b5	48		 dec	 eax
  000b6	83 c8 fe	 or	 eax, -2			; fffffffeH
  000b9	40		 inc	 eax
$LN215@gObjGiveIt:
  000ba	74 1b		 je	 SHORT $LN7@gObjGiveIt

; 228  : 			{
; 229  : 				type	= MAX_TYPE_ITEMS-1;

  000bc	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 230  : 				index	= rand() % (g_MaxItemIndexOfEachItemType[type] + 1);

  000c1	e8 00 00 00 00	 call	 _rand
  000c6	8b 0d 3c 00 00
	00		 mov	 ecx, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA+60
  000cc	41		 inc	 ecx
  000cd	99		 cdq
  000ce	f7 f9		 idiv	 ecx
  000d0	8b f2		 mov	 esi, edx

; 231  : 			}
; 232  : 			else

  000d2	e9 d8 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN7@gObjGiveIt:

; 233  : 			{
; 234  : 				type	= 12;

  000d7	bf 0c 00 00 00	 mov	 edi, 12			; 0000000cH

; 235  : 				index	= BallTable[rand() % 22];

  000dc	e8 00 00 00 00	 call	 _rand
  000e1	99		 cdq
  000e2	f7 fe		 idiv	 esi
  000e4	8b 74 95 a4	 mov	 esi, DWORD PTR _BallTable$[ebp+edx*4]

; 236  : 			}
; 237  : 		}
; 238  : 		else

  000e8	e9 c2 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN5@gObjGiveIt:

; 239  : 		{
; 240  : 			type				= rand() % MAX_TYPE_ITEMS;

  000ed	e8 00 00 00 00	 call	 _rand
  000f2	8b f8		 mov	 edi, eax
  000f4	81 e7 0f 00 00
	80		 and	 edi, -2147483633	; 8000000fH
  000fa	79 05		 jns	 SHORT $LN216@gObjGiveIt
  000fc	4f		 dec	 edi
  000fd	83 cf f0	 or	 edi, -16		; fffffff0H
  00100	47		 inc	 edi
$LN216@gObjGiveIt:

; 241  : 			int iMaxItemIndex	= g_MaxItemIndexOfEachItemType[type]+1;

  00101	8b 34 bd 00 00
	00 00		 mov	 esi, DWORD PTR ?g_MaxItemIndexOfEachItemType@@3PAHA[edi*4]
  00108	46		 inc	 esi

; 242  : 			index				= rand() % iMaxItemIndex;

  00109	e8 00 00 00 00	 call	 _rand
  0010e	99		 cdq
  0010f	f7 fe		 idiv	 esi
  00111	8b f2		 mov	 esi, edx

; 243  : 			// ----
; 244  : 			if( type == 15 || (type == 12 && index != 15 ) )

  00113	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00116	0f 84 77 ff ff
	ff		 je	 $LN211@gObjGiveIt
  0011c	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  0011f	75 0e		 jne	 SHORT $LN9@gObjGiveIt
  00121	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00124	0f 85 69 ff ff
	ff		 jne	 $LN211@gObjGiveIt

; 245  : 			{
; 246  : 				continue;
; 247  : 			}
; 248  : 		}
; 249  : 		// ----
; 250  : 		if( type == 13 && index == 3 )

  0012a	e9 80 00 00 00	 jmp	 $LN19@gObjGiveIt
$LN9@gObjGiveIt:
  0012f	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00132	75 40		 jne	 SHORT $LN12@gObjGiveIt
  00134	83 fe 03	 cmp	 esi, 3
  00137	0f 84 56 ff ff
	ff		 je	 $LN211@gObjGiveIt

; 251  : 		{
; 252  : 			continue;
; 253  : 		}
; 254  : 		// ----
; 255  : 		if(		(type == 13 && index == 32)
; 256  : 			||	(type == 13 && index == 33)
; 257  : 			||	(type == 13 && index == 34)
; 258  : 			||	(type == 13 && index == 35)
; 259  : 			||	(type == 13 && index == 36)
; 260  : 			||	(type == 13 && index == 37) )

  0013d	83 fe 20	 cmp	 esi, 32			; 00000020H
  00140	0f 84 4d ff ff
	ff		 je	 $LN211@gObjGiveIt
  00146	83 fe 21	 cmp	 esi, 33			; 00000021H
  00149	0f 84 44 ff ff
	ff		 je	 $LN211@gObjGiveIt
  0014f	83 fe 22	 cmp	 esi, 34			; 00000022H
  00152	0f 84 3b ff ff
	ff		 je	 $LN211@gObjGiveIt
  00158	83 fe 23	 cmp	 esi, 35			; 00000023H
  0015b	0f 84 32 ff ff
	ff		 je	 $LN211@gObjGiveIt
  00161	83 fe 24	 cmp	 esi, 36			; 00000024H
  00164	0f 84 29 ff ff
	ff		 je	 $LN211@gObjGiveIt
  0016a	83 fe 25	 cmp	 esi, 37			; 00000025H
  0016d	75 40		 jne	 SHORT $LN19@gObjGiveIt

; 261  : 		{
; 262  : 			continue;

  0016f	e9 1f ff ff ff	 jmp	 $LN211@gObjGiveIt
$LN12@gObjGiveIt:

; 263  : 		}
; 264  : 		// ----
; 265  : 		if(		(type == 14 && index == 35)
; 266  : 			||	(type == 14 && index == 36)
; 267  : 			||	(type == 14 && index == 37)
; 268  : 			||	(type == 14 && index == 38)
; 269  : 			||	(type == 14 && index == 39)
; 270  : 			||	(type == 14 && index == 40) )

  00174	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00177	75 36		 jne	 SHORT $LN19@gObjGiveIt
  00179	83 fe 23	 cmp	 esi, 35			; 00000023H
  0017c	0f 84 11 ff ff
	ff		 je	 $LN211@gObjGiveIt
  00182	83 fe 24	 cmp	 esi, 36			; 00000024H
  00185	0f 84 08 ff ff
	ff		 je	 $LN211@gObjGiveIt
  0018b	83 fe 25	 cmp	 esi, 37			; 00000025H
  0018e	0f 84 ff fe ff
	ff		 je	 $LN211@gObjGiveIt
  00194	83 fe 26	 cmp	 esi, 38			; 00000026H
  00197	0f 84 f6 fe ff
	ff		 je	 $LN211@gObjGiveIt
  0019d	83 fe 27	 cmp	 esi, 39			; 00000027H
  001a0	0f 84 ed fe ff
	ff		 je	 $LN211@gObjGiveIt
  001a6	83 fe 28	 cmp	 esi, 40			; 00000028H
  001a9	0f 84 e4 fe ff
	ff		 je	 $LN211@gObjGiveIt
$LN19@gObjGiveIt:

; 271  : 		{
; 272  : 			continue;
; 273  : 		}
; 274  : 		// ----
; 275  :         if( IsCashItem(ITEMGET(type, index)) == true )

  001af	8b c7		 mov	 eax, edi
  001b1	c1 e0 09	 shl	 eax, 9
  001b4	03 c6		 add	 eax, esi
  001b6	50		 push	 eax
  001b7	89 45 98	 mov	 DWORD PTR tv1166[ebp], eax
  001ba	e8 00 00 00 00	 call	 ?IsCashItem@@YAHH@Z	; IsCashItem
  001bf	83 c4 04	 add	 esp, 4
  001c2	83 f8 01	 cmp	 eax, 1
  001c5	0f 84 c8 fe ff
	ff		 je	 $LN211@gObjGiveIt

; 276  : 		{
; 277  : 			continue;
; 278  : 		}
; 279  :         // ----
; 280  : 		if( /*IsPremiumItem*/IsCashSpecialItem(ITEMGET(type, index)) == true )

  001cb	ff 75 98	 push	 DWORD PTR tv1166[ebp]
  001ce	e8 00 00 00 00	 call	 ?IsCashSpecialItem@@YAHH@Z ; IsCashSpecialItem
  001d3	83 c4 04	 add	 esp, 4
  001d6	83 f8 01	 cmp	 eax, 1
  001d9	0f 84 b4 fe ff
	ff		 je	 $LN211@gObjGiveIt

; 281  : 		{
; 282  : 			continue;
; 283  : 		}
; 284  : 		// ----
; 285  : 		/*if( g_LuckyItemManager.IsLuckyItemTicket(ITEMGET(type, index)) == true )
; 286  : 		{
; 287  : 			continue;
; 288  : 		}
; 289  : 		// ----
; 290  : 		if( g_LuckyItemManager.IsLuckyItemEquipment(ITEMGET(type, index)) == true )
; 291  : 		{
; 292  : 			continue;
; 293  : 		}*/
; 294  : 		// ----
; 295  : 		if(		(type == 14 && index == 162)
; 296  : 			||	(type == 14 && index == 163)
; 297  : 			||	(type == 14 && index == 164)
; 298  : 			||	(type == 14 && index == 165)
; 299  : 			||	(type == 14 && index == 166) )

  001df	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  001e2	0f 85 8b 00 00
	00		 jne	 $LN34@gObjGiveIt
  001e8	81 fe a2 00 00
	00		 cmp	 esi, 162		; 000000a2H
  001ee	0f 84 9f fe ff
	ff		 je	 $LN211@gObjGiveIt
  001f4	81 fe a3 00 00
	00		 cmp	 esi, 163		; 000000a3H
  001fa	0f 84 93 fe ff
	ff		 je	 $LN211@gObjGiveIt
  00200	81 fe a4 00 00
	00		 cmp	 esi, 164		; 000000a4H
  00206	0f 84 87 fe ff
	ff		 je	 $LN211@gObjGiveIt
  0020c	81 fe a5 00 00
	00		 cmp	 esi, 165		; 000000a5H
  00212	0f 84 7b fe ff
	ff		 je	 $LN211@gObjGiveIt
  00218	81 fe a6 00 00
	00		 cmp	 esi, 166		; 000000a6H
  0021e	0f 84 6f fe ff
	ff		 je	 $LN211@gObjGiveIt

; 300  : 		{
; 301  : 			continue;
; 302  : 		}
; 303  : 		// ----
; 304  : 		if(		(type == 14 && index == 45)
; 305  : 			||	(type == 14 && index == 46)
; 306  : 			||	(type == 14 && index == 47)
; 307  : 			||	(type == 14 && index == 48)
; 308  : 			||	(type == 14 && index == 49)
; 309  : 			||	(type == 14 && index == 50) )

  00224	83 fe 2d	 cmp	 esi, 45			; 0000002dH
  00227	0f 84 66 fe ff
	ff		 je	 $LN211@gObjGiveIt
  0022d	83 fe 2e	 cmp	 esi, 46			; 0000002eH
  00230	0f 84 5d fe ff
	ff		 je	 $LN211@gObjGiveIt
  00236	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  00239	0f 84 54 fe ff
	ff		 je	 $LN211@gObjGiveIt
  0023f	83 fe 30	 cmp	 esi, 48			; 00000030H
  00242	0f 84 4b fe ff
	ff		 je	 $LN211@gObjGiveIt
  00248	83 fe 31	 cmp	 esi, 49			; 00000031H
  0024b	0f 84 42 fe ff
	ff		 je	 $LN211@gObjGiveIt
  00251	83 fe 32	 cmp	 esi, 50			; 00000032H
  00254	0f 84 39 fe ff
	ff		 je	 $LN211@gObjGiveIt

; 315  : 		{
; 316  : 			continue;
; 317  : 		}
; 318  : 		// ----
; 319  : 		if(		(type == 13 && index < 8) 
; 320  : 			||	(type == 14 && (index == 9 || index == 10 || index == 17 || index == 18)) 
; 321  : 			||	(type == 13 && index == 14) 
; 322  : 			||	(type == 14 && index == 31) )

  0025a	83 fe 09	 cmp	 esi, 9
  0025d	74 34		 je	 SHORT $LN44@gObjGiveIt
  0025f	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00262	74 2f		 je	 SHORT $LN44@gObjGiveIt
  00264	83 fe 11	 cmp	 esi, 17			; 00000011H
  00267	74 2a		 je	 SHORT $LN44@gObjGiveIt
  00269	83 fe 12	 cmp	 esi, 18			; 00000012H
  0026c	74 25		 je	 SHORT $LN44@gObjGiveIt
  0026e	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00271	eb 1a		 jmp	 SHORT $LN217@gObjGiveIt
$LN34@gObjGiveIt:

; 310  : 		{
; 311  : 			continue;
; 312  : 		}
; 313  : 		// ----
; 314  : 		if( type == 13 && index == 41 )

  00273	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  00276	0f 85 53 01 00
	00		 jne	 $LN42@gObjGiveIt
  0027c	83 fe 29	 cmp	 esi, 41			; 00000029H
  0027f	0f 84 0e fe ff
	ff		 je	 $LN211@gObjGiveIt

; 315  : 		{
; 316  : 			continue;
; 317  : 		}
; 318  : 		// ----
; 319  : 		if(		(type == 13 && index < 8) 
; 320  : 			||	(type == 14 && (index == 9 || index == 10 || index == 17 || index == 18)) 
; 321  : 			||	(type == 13 && index == 14) 
; 322  : 			||	(type == 14 && index == 31) )

  00285	83 fe 08	 cmp	 esi, 8
  00288	7c 09		 jl	 SHORT $LN44@gObjGiveIt
  0028a	83 fe 0e	 cmp	 esi, 14			; 0000000eH
$LN217@gObjGiveIt:
  0028d	0f 85 3c 01 00
	00		 jne	 $LN42@gObjGiveIt
$LN44@gObjGiveIt:

; 323  : 		{
; 324  : 			int perc			= rand() % 11;

  00293	e8 00 00 00 00	 call	 _rand
  00298	99		 cdq
  00299	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0029e	f7 f9		 idiv	 ecx

; 325  : 			BOOL bCheckDevil	= false;

  002a0	33 c0		 xor	 eax, eax
  002a2	89 45 98	 mov	 DWORD PTR _bCheckDevil$1$[ebp], eax

; 326  : 			// ----
; 327  : 			if( type == 12 && index == 15 )

  002a5	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002a8	75 4c		 jne	 SHORT $LN50@gObjGiveIt
  002aa	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  002ad	0f 85 b2 00 00
	00		 jne	 $LN59@gObjGiveIt

; 328  : 			{
; 329  : 				if( monsterlevel >= 13 && monsterlevel <= 66 )

  002b3	8d 43 f3	 lea	 eax, DWORD PTR [ebx-13]
  002b6	83 f8 35	 cmp	 eax, 53			; 00000035H
  002b9	0f 87 81 01 00
	00		 ja	 $LN99@gObjGiveIt

; 330  : 				{
; 331  : 					perc = rand() % 7 ;

  002bf	e8 00 00 00 00	 call	 _rand
  002c4	99		 cdq
  002c5	b9 07 00 00 00	 mov	 ecx, 7
  002ca	f7 f9		 idiv	 ecx

; 332  : 					// ----
; 333  : 					if( perc < 3 )

  002cc	83 fa 03	 cmp	 edx, 3
  002cf	0f 8d 8d 00 00
	00		 jge	 $LN183@gObjGiveIt
$LN61@gObjGiveIt:

; 433  : 				else if( zzzItemLevel(type, index, monsterlevel) == true )

  002d5	53		 push	 ebx
  002d6	56		 push	 esi
  002d7	57		 push	 edi
  002d8	e8 00 00 00 00	 call	 ?zzzItemLevel@@YAHHHH@Z	; zzzItemLevel
  002dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e0	83 f8 01	 cmp	 eax, 1
  002e3	0f 85 57 01 00
	00		 jne	 $LN99@gObjGiveIt

; 434  : 				{
; 435  : 					if( this->InsertItem(monsterlevel, type, index, 0, 0, 0, 0) != (BYTE)-1 )

  002e9	6a 00		 push	 0
  002eb	6a 00		 push	 0
  002ed	6a 00		 push	 0
  002ef	6a 00		 push	 0

; 436  : 					{
; 437  : 						incount++;
; 438  : 						// ----
; 439  : 						if( incount > MAX_MONSTER_ITEM - 1 )
; 440  : 						{
; 441  : 							return;
; 442  : 						}
; 443  : 					}
; 444  : 				}
; 445  : 			}
; 446  : 		}
; 447  : 		else

  002f1	e9 2c 01 00 00	 jmp	 $LN220@gObjGiveIt
$LN50@gObjGiveIt:

; 334  : 					{
; 335  : 						perc = 0;
; 336  : 					}
; 337  : 				}
; 338  : 				else
; 339  : 				{
; 340  : 					perc = 1;
; 341  : 				}
; 342  : 			}
; 343  : 			// ----
; 344  : 			if( type == 14 && index == 17 )

  002f6	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  002f9	75 6a		 jne	 SHORT $LN59@gObjGiveIt
  002fb	83 fe 11	 cmp	 esi, 17			; 00000011H
  002fe	75 2e		 jne	 SHORT $LN178@gObjGiveIt

; 345  : 			{
; 346  : 				if( gEyesOfDevilSquareDropRate <= 0 )

  00300	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA, eax ; gEyesOfDevilSquareDropRate
  00306	7f 07		 jg	 SHORT $LN53@gObjGiveIt

; 347  : 				{
; 348  : 					perc		= 1;

  00308	8d 57 f3	 lea	 edx, DWORD PTR [edi-13]

; 349  : 					bCheckDevil = false;

  0030b	33 c0		 xor	 eax, eax

; 350  : 				}
; 351  : 				else

  0030d	eb 11		 jmp	 SHORT $LN54@gObjGiveIt
$LN53@gObjGiveIt:

; 352  : 				{
; 353  : 					perc		= rand() % gEyesOfDevilSquareDropRate;

  0030f	e8 00 00 00 00	 call	 _rand
  00314	99		 cdq
  00315	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gEyesOfDevilSquareDropRate@@3HA ; gEyesOfDevilSquareDropRate

; 354  : 					bCheckDevil = true;

  0031b	b8 01 00 00 00	 mov	 eax, 1
$LN54@gObjGiveIt:

; 355  : 				}
; 356  : 				// ----
; 357  : 				if( gDevilSquareEvent == 0 )

  00320	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00327	75 3c		 jne	 SHORT $LN59@gObjGiveIt

; 358  : 				{
; 359  : 					perc = 1;
; 360  : 				}
; 361  : 			}
; 362  : 			// ----
; 363  : 			if( type == 14 && index == 18 )

  00329	e9 12 01 00 00	 jmp	 $LN99@gObjGiveIt
$LN178@gObjGiveIt:
  0032e	83 fe 12	 cmp	 esi, 18			; 00000012H
  00331	75 32		 jne	 SHORT $LN59@gObjGiveIt

; 364  : 			{
; 365  : 				if( gKeyOfDevilSquareDropRate <= 0 )

  00333	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA, eax ; gKeyOfDevilSquareDropRate
  00339	7f 07		 jg	 SHORT $LN57@gObjGiveIt

; 366  : 				{
; 367  : 					perc		= 1;

  0033b	8d 56 ef	 lea	 edx, DWORD PTR [esi-17]

; 368  : 					bCheckDevil = false;

  0033e	33 c0		 xor	 eax, eax

; 369  : 				}
; 370  : 				else

  00340	eb 11		 jmp	 SHORT $LN58@gObjGiveIt
$LN57@gObjGiveIt:

; 371  : 				{
; 372  : 					perc		= rand() % gKeyOfDevilSquareDropRate;

  00342	e8 00 00 00 00	 call	 _rand
  00347	99		 cdq
  00348	f7 3d 00 00 00
	00		 idiv	 DWORD PTR ?gKeyOfDevilSquareDropRate@@3HA ; gKeyOfDevilSquareDropRate

; 373  : 					bCheckDevil = true;

  0034e	b8 01 00 00 00	 mov	 eax, 1
$LN58@gObjGiveIt:

; 374  : 				}
; 375  : 				// ----
; 376  : 				if( gDevilSquareEvent == 0 )

  00353	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  0035a	0f 84 e0 00 00
	00		 je	 $LN99@gObjGiveIt
  00360	eb 03		 jmp	 SHORT $LN59@gObjGiveIt
$LN183@gObjGiveIt:
  00362	8b 45 98	 mov	 eax, DWORD PTR _bCheckDevil$1$[ebp]
$LN59@gObjGiveIt:

; 377  : 				{
; 378  : 					perc = 1;
; 379  : 				}
; 380  : 			}
; 381  : 			// ----
; 382  : 			if( perc == 0 )

  00365	85 d2		 test	 edx, edx
  00367	0f 85 d3 00 00
	00		 jne	 $LN99@gObjGiveIt

; 383  : 			{
; 384  : 				if( bCheckDevil == true )

  0036d	83 f8 01	 cmp	 eax, 1
  00370	0f 85 5f ff ff
	ff		 jne	 $LN61@gObjGiveIt

; 385  : 				{
; 386  : 					int devilitemlevel = 0;
; 387  : 					// ----
; 388  : 					if( (rand() % 5) != 0 )

  00376	e8 00 00 00 00	 call	 _rand
  0037b	99		 cdq
  0037c	b9 05 00 00 00	 mov	 ecx, 5
  00381	f7 f9		 idiv	 ecx
  00383	85 d2		 test	 edx, edx
  00385	0f 84 b5 00 00
	00		 je	 $LN99@gObjGiveIt

; 389  : 					{
; 390  : 						if( monsterlevel < 3 )

  0038b	83 fb 03	 cmp	 ebx, 3
  0038e	0f 8c ac 00 00
	00		 jl	 $LN99@gObjGiveIt

; 391  : 						{
; 392  : 							devilitemlevel = 0;
; 393  : 						}
; 394  : 						else if( monsterlevel < 36 ) 

  00394	83 fb 24	 cmp	 ebx, 36			; 00000024H
  00397	7d 05		 jge	 SHORT $LN66@gObjGiveIt

; 395  : 						{
; 396  : 							devilitemlevel = 1;

  00399	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0039c	eb 7d		 jmp	 SHORT $LN95@gObjGiveIt
$LN66@gObjGiveIt:

; 397  : 						}
; 398  : 						else if( monsterlevel < 47 )

  0039e	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  003a1	7d 07		 jge	 SHORT $LN68@gObjGiveIt

; 399  : 						{
; 400  : 							devilitemlevel = 2;

  003a3	b8 02 00 00 00	 mov	 eax, 2
  003a8	eb 71		 jmp	 SHORT $LN95@gObjGiveIt
$LN68@gObjGiveIt:

; 401  : 						}
; 402  : 						else if( monsterlevel < 60 )

  003aa	83 fb 3c	 cmp	 ebx, 60			; 0000003cH
  003ad	7d 07		 jge	 SHORT $LN70@gObjGiveIt

; 403  : 						{
; 404  : 							devilitemlevel = 3;

  003af	b8 03 00 00 00	 mov	 eax, 3
  003b4	eb 65		 jmp	 SHORT $LN95@gObjGiveIt
$LN70@gObjGiveIt:

; 405  : 						}
; 406  : 						else if( monsterlevel < 70 )

  003b6	83 fb 46	 cmp	 ebx, 70			; 00000046H
  003b9	7d 07		 jge	 SHORT $LN72@gObjGiveIt

; 407  : 						{
; 408  : 							devilitemlevel = 4;

  003bb	b8 04 00 00 00	 mov	 eax, 4
  003c0	eb 59		 jmp	 SHORT $LN95@gObjGiveIt
$LN72@gObjGiveIt:

; 409  : 						}
; 410  : 						else if( monsterlevel < 80 )

  003c2	33 c0		 xor	 eax, eax
  003c4	83 fb 50	 cmp	 ebx, 80			; 00000050H
  003c7	0f 9d c0	 setge	 al
  003ca	83 c0 05	 add	 eax, 5

; 411  : 						{
; 412  : 							devilitemlevel = 5;
; 413  : 						}
; 414  : 						else 
; 415  : 						{
; 416  : 							devilitemlevel = 6;
; 417  : 						}
; 418  : 						// ----
; 419  : 						if( devilitemlevel != 0 )
; 420  : 						{
; 421  : 							if( this->InsertItem(monsterlevel, type, index, devilitemlevel, 0, 0, 0) != 0xFF )
; 422  : 							{
; 423  : 								incount++;
; 424  : 								// ----
; 425  : 								if( incount > MAX_MONSTER_ITEM - 1 )
; 426  : 								{
; 427  : 									return;
; 428  : 								}
; 429  : 							}
; 430  : 						}
; 431  : 					}
; 432  : 				}

  003cd	eb 4c		 jmp	 SHORT $LN95@gObjGiveIt
$LN42@gObjGiveIt:

; 448  : 		{
; 449  : 			result = GetLevelItem(type, index, monsterlevel);

  003cf	53		 push	 ebx
  003d0	56		 push	 esi
  003d1	57		 push	 edi
  003d2	e8 00 00 00 00	 call	 ?GetLevelItem@@YAHHHH@Z	; GetLevelItem
  003d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 450  : 			// ----
; 451  : 			if( result >= 0 )

  003da	85 c0		 test	 eax, eax
  003dc	78 62		 js	 SHORT $LN99@gObjGiveIt

; 452  : 			{
; 453  : 				if( (type == 13 && index == 10) || (type == 12 && index == 11 ) )

  003de	83 ff 0d	 cmp	 edi, 13			; 0000000dH
  003e1	75 05		 jne	 SHORT $LN86@gObjGiveIt
  003e3	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  003e6	eb 08		 jmp	 SHORT $LN221@gObjGiveIt
$LN86@gObjGiveIt:
  003e8	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  003eb	75 05		 jne	 SHORT $LN83@gObjGiveIt
  003ed	83 fe 0b	 cmp	 esi, 11			; 0000000bH
$LN221@gObjGiveIt:
  003f0	74 29		 je	 SHORT $LN95@gObjGiveIt
$LN83@gObjGiveIt:

; 454  : 				{
; 455  : 					if( this->InsertItem(monsterlevel, type, index, result, 0, 0, 0) != 0xFF )
; 456  : 					{
; 457  : 						incount++;
; 458  : 						// ----
; 459  : 						if( incount > MAX_MONSTER_ITEM - 1 )
; 460  : 						{
; 461  : 							return;
; 462  : 						}
; 463  : 					}
; 464  : 				}
; 465  : 				else if( result <= maxlevel )

  003f2	8b 4d 0c	 mov	 ecx, DWORD PTR _maxlevel$[ebp]
  003f5	3b c1		 cmp	 eax, ecx
  003f7	7f 47		 jg	 SHORT $LN99@gObjGiveIt

; 466  : 				{
; 467  : 					if( type == 12 )

  003f9	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  003fc	75 07		 jne	 SHORT $LN180@gObjGiveIt

; 468  : 					{
; 469  : 						if( index != 11 )

  003fe	83 fe 0b	 cmp	 esi, 11			; 0000000bH
  00401	74 18		 je	 SHORT $LN95@gObjGiveIt

; 470  : 						{
; 471  : 							result = 0;

  00403	33 c0		 xor	 eax, eax
$LN180@gObjGiveIt:

; 472  : 						}
; 473  : 					}
; 474  : 					// ----
; 475  : 					if( type == 12 && index == 11 )
; 476  : 					{
; 477  : 						// --
; 478  : 					}
; 479  : 					else
; 480  : 					{
; 481  : 						if( result > maxlevel )

  00405	3b c1		 cmp	 eax, ecx
  00407	0f 4f c1	 cmovg	 eax, ecx

; 482  : 						{
; 483  : 							result = maxlevel;
; 484  : 						}
; 485  : 					}
; 486  : 					// ----
; 487  : 					if( (type == 4 && index == 7) || (type == 4 && index == 15) )

  0040a	83 ff 04	 cmp	 edi, 4
  0040d	75 0c		 jne	 SHORT $LN95@gObjGiveIt
  0040f	83 fe 07	 cmp	 esi, 7
  00412	74 05		 je	 SHORT $LN96@gObjGiveIt
  00414	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00417	75 02		 jne	 SHORT $LN95@gObjGiveIt
$LN96@gObjGiveIt:

; 488  : 					{
; 489  : 						result = 0;

  00419	33 c0		 xor	 eax, eax
$LN95@gObjGiveIt:

; 490  : 					}
; 491  : 					// ----
; 492  : 					if( this->InsertItem(monsterlevel, type, index,result, 0, 0, 0) != (BYTE)-1 )

  0041b	6a 00		 push	 0
  0041d	6a 00		 push	 0
  0041f	6a 00		 push	 0
  00421	50		 push	 eax
$LN220@gObjGiveIt:
  00422	8b 4d 9c	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00425	56		 push	 esi
  00426	57		 push	 edi
  00427	53		 push	 ebx
  00428	e8 00 00 00 00	 call	 ?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z ; CMonsterItemMngEx::InsertItem
  0042d	3c ff		 cmp	 al, 255			; 000000ffH
  0042f	74 0f		 je	 SHORT $LN99@gObjGiveIt

; 493  : 					{
; 494  : 						incount++;

  00431	8b 75 a0	 mov	 esi, DWORD PTR _incount$1$[ebp]
  00434	46		 inc	 esi
  00435	89 75 a0	 mov	 DWORD PTR _incount$1$[ebp], esi

; 495  : 						// ----
; 496  : 						if( incount > MAX_MONSTER_ITEM - 1 )

  00438	81 fe e7 03 00
	00		 cmp	 esi, 999		; 000003e7H
  0043e	7f 19		 jg	 SHORT $LN213@gObjGiveIt
$LN99@gObjGiveIt:

; 497  : 						{
; 498  : 							return;
; 499  : 						}
; 500  : 					}
; 501  : 				}
; 502  : 			}
; 503  : 		}
; 504  : 		// ----
; 505  : 		if( this->m_iMonsterInvenItemCount[monsterlevel] >= MAX_MONSTER_ITEM )

  00440	8b 45 9c	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00443	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  00448	81 bc 98 5c 02
	00 00 e8 03 00
	00		 cmp	 DWORD PTR [eax+ebx*4+604], 1000 ; 000003e8H
  00453	0f 8c 3f fc ff
	ff		 jl	 $LL2@gObjGiveIt
$LN213@gObjGiveIt:
  00459	5f		 pop	 edi
  0045a	5e		 pop	 esi
$LN182@gObjGiveIt:

; 506  : 		{
; 507  : 			return;
; 508  : 		}
; 509  : 	}
; 510  : }

  0045b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0045e	33 cd		 xor	 ecx, ebp
  00460	5b		 pop	 ebx
  00461	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00466	8b e5		 mov	 esp, ebp
  00468	5d		 pop	 ebp
  00469	c2 08 00	 ret	 8
?gObjGiveItemSearch@CMonsterItemMngEx@@QAEXHH@Z ENDP	; CMonsterItemMngEx::gObjGiveItemSearch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?GetItem@CMonsterItemMngEx@@QAEPAVCItem@@H@Z
_TEXT	SEGMENT
_monsterlevel$ = 8					; size = 4
?GetItem@CMonsterItemMngEx@@QAEPAVCItem@@H@Z PROC	; CMonsterItemMngEx::GetItem, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 168  : 	if( monsterlevel > MAX_MONSTER_LEVEL || monsterlevel < 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _monsterlevel$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe 96 00 00
	00		 cmp	 esi, 150		; 00000096H
  00010	77 2e		 ja	 SHORT $LN3@GetItem

; 171  : 	}
; 172  : 	// ----
; 173  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00012	53		 push	 ebx
  00013	8b 9c b7 5c 02
	00 00		 mov	 ebx, DWORD PTR [edi+esi*4+604]

; 174  : 	// ----
; 175  : 	if( itemcount <= 0 )

  0001a	85 db		 test	 ebx, ebx
  0001c	7f 09		 jg	 SHORT $LN4@GetItem

; 176  : 	{
; 177  : 		return 0;

  0001e	5b		 pop	 ebx
  0001f	5f		 pop	 edi
  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 183  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN4@GetItem:

; 178  : 	}
; 179  : 	// ----
; 180  : 	int itemindex = rand() % itemcount;

  00027	e8 00 00 00 00	 call	 _rand
  0002c	99		 cdq
  0002d	f7 fb		 idiv	 ebx
  0002f	5b		 pop	 ebx

; 181  : 	// ----
; 182  : 	return &this->m_MonsterInvenItems[monsterlevel][itemindex];

  00030	69 c2 d4 00 00
	00		 imul	 eax, edx, 212
  00036	03 44 b7 04	 add	 eax, DWORD PTR [edi+esi*4+4]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 183  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN3@GetItem:
  00040	5f		 pop	 edi

; 169  : 	{
; 170  : 		return 0;

  00041	33 c0		 xor	 eax, eax
  00043	5e		 pop	 esi

; 183  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?GetItem@CMonsterItemMngEx@@QAEPAVCItem@@H@Z ENDP	; CMonsterItemMngEx::GetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_itemcount$1$ = 8					; size = 4
_monsterlevel$ = 8					; size = 4
_type$ = 12						; size = 4
_index$ = 16						; size = 4
_itemlevel$ = 20					; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z PROC	; CMonsterItemMngEx::InsertItem, COMDAT
; _this$ = ecx

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 131  : 	if( monsterlevel > MAX_MONSTER_LEVEL || monsterlevel < 0 )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _monsterlevel$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	81 ff 96 00 00
	00		 cmp	 edi, 150		; 00000096H
  00013	0f 87 9f 00 00
	00		 ja	 $LN3@InsertItem

; 134  : 	}
; 135  : 	// ----
; 136  : 	int itemcount = this->m_iMonsterInvenItemCount[monsterlevel];

  00019	8b 8c b8 5c 02
	00 00		 mov	 ecx, DWORD PTR [eax+edi*4+604]
  00020	89 4d 08	 mov	 DWORD PTR _itemcount$1$[ebp], ecx

; 137  : 	// ----
; 138  : 	if( itemcount >= MAX_MONSTER_ITEM )

  00023	81 f9 e8 03 00
	00		 cmp	 ecx, 1000		; 000003e8H
  00029	0f 8d 89 00 00
	00		 jge	 $LN3@InsertItem

; 139  : 	{
; 140  : 		return -1;
; 141  : 	}
; 142  : 	// ----
; 143  : 	CItem * item	= &this->m_MonsterInvenItems[monsterlevel][itemcount];
; 144  : 	int item_type	= (type * MAX_SUBTYPE_ITEMS) + index;
; 145  : 	item->m_Level	= itemlevel;
; 146  : 	// ----
; 147  : 	item->Convert(item_type, op1, op2, op3, 0, 0, 0, 0, 0xFF, CURRENT_DB_VERSION);

  0002f	53		 push	 ebx
  00030	6a 03		 push	 3
  00032	68 ff 00 00 00	 push	 255			; 000000ffH
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	69 d9 d4 00 00
	00		 imul	 ebx, ecx, 212
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 20	 push	 DWORD PTR _op3$[ebp]
  00048	03 5c b8 04	 add	 ebx, DWORD PTR [eax+edi*4+4]
  0004c	66 8b 45 14	 mov	 ax, WORD PTR _itemlevel$[ebp]
  00050	8b cb		 mov	 ecx, ebx
  00052	ff 75 1c	 push	 DWORD PTR _op2$[ebp]
  00055	ff 75 18	 push	 DWORD PTR _op1$[ebp]
  00058	66 89 43 08	 mov	 WORD PTR [ebx+8], ax
  0005c	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0005f	c1 e0 09	 shl	 eax, 9
  00062	03 45 10	 add	 eax, DWORD PTR _index$[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 148  : 	// ----
; 149  : 	if( type == 13 && index == 10 )

  0006b	83 7d 0c 0d	 cmp	 DWORD PTR _type$[ebp], 13 ; 0000000dH
  0006f	75 29		 jne	 SHORT $LN5@InsertItem
  00071	83 7d 10 0a	 cmp	 DWORD PTR _index$[ebp], 10 ; 0000000aH
  00075	75 23		 jne	 SHORT $LN5@InsertItem

; 150  : 	{
; 151  : 		item->m_Durability = rand() % 100 + 100.0f;

  00077	e8 00 00 00 00	 call	 _rand
  0007c	99		 cdq
  0007d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00082	f7 f9		 idiv	 ecx
  00084	66 0f 6e c2	 movd	 xmm0, edx
  00088	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42c80000
  00093	f3 0f 11 43 24	 movss	 DWORD PTR [ebx+36], xmm0

; 152  : 	}
; 153  : 	else

  00098	eb 06		 jmp	 SHORT $LN6@InsertItem
$LN5@InsertItem:

; 154  : 	{
; 155  : 		item->m_Durability = item->m_BaseDurability;

  0009a	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0009d	89 43 24	 mov	 DWORD PTR [ebx+36], eax
$LN6@InsertItem:

; 156  : 	}
; 157  : 	// ----
; 158  : 	itemcount++;
; 159  : 	this->m_iMonsterInvenItemCount[monsterlevel] = itemcount;

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a3	8b 45 08	 mov	 eax, DWORD PTR _itemcount$1$[ebp]
  000a6	40		 inc	 eax
  000a7	5b		 pop	 ebx
  000a8	89 84 b9 5c 02
	00 00		 mov	 DWORD PTR [ecx+edi*4+604], eax

; 160  : 	// ----
; 161  : 	return 0;

  000af	32 c0		 xor	 al, al
  000b1	5f		 pop	 edi

; 162  : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 1c 00	 ret	 28			; 0000001cH
$LN3@InsertItem:

; 132  : 	{
; 133  : 		return -1;

  000b8	0c ff		 or	 al, 255			; 000000ffH
  000ba	5f		 pop	 edi

; 162  : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 1c 00	 ret	 28			; 0000001cH
?InsertItem@CMonsterItemMngEx@@QAEEHHHHHHH@Z ENDP	; CMonsterItemMngEx::InsertItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?Clear@CMonsterItemMngEx@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMonsterItemMngEx@@QAEXXZ PROC			; CMonsterItemMngEx::Clear, COMDAT
; _this$ = ecx

; 81   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 82   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  00005	68 58 02 00 00	 push	 600			; 00000258H
  0000a	6a 00		 push	 0
  0000c	8d 86 5c 02 00
	00		 lea	 eax, DWORD PTR [esi+604]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0001e	bb 96 00 00 00	 mov	 ebx, 150		; 00000096H
$LL4@Clear:

; 83   : 	// ---
; 84   : 	for( int i = 0; i < MAX_MONSTER_LEVEL; i++ )
; 85   : 	{
; 86   : 		delete this->m_MonsterInvenItems[i];

  00023	68 d4 00 00 00	 push	 212			; 000000d4H
  00028	ff 37		 push	 DWORD PTR [edi]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
  00032	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00035	83 eb 01	 sub	 ebx, 1
  00038	75 e9		 jne	 SHORT $LL4@Clear

; 87   : 	}
; 88   : 	// ----
; 89   : 	memset(this->m_iMonsterInvenExItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0003a	68 58 02 00 00	 push	 600			; 00000258H
  0003f	8d 86 d0 1a 00
	00		 lea	 eax, DWORD PTR [esi+6864]
  00045	53		 push	 ebx
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _memset
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	8d be 28 1d 00
	00		 lea	 edi, DWORD PTR [esi+7464]
  00055	bb 96 00 00 00	 mov	 ebx, 150		; 00000096H
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL7@Clear:

; 90   : 	// ----
; 91   : 	for( int cnt = 0; cnt < MAX_MONSTER_LEVEL; cnt++ )
; 92   : 	{
; 93   : 		delete this->m_MonsterInvenExItems[cnt];

  00060	68 d4 00 00 00	 push	 212			; 000000d4H
  00065	ff 37		 push	 DWORD PTR [edi]
  00067	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006c	83 c4 08	 add	 esp, 8
  0006f	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00072	83 eb 01	 sub	 ebx, 1
  00075	75 e9		 jne	 SHORT $LL7@Clear

; 94   : 	}
; 95   : 	// ----
; 96   : 	if( this->m_MonsterJewelItem1 != NULL )

  00077	8b 86 80 1f 00
	00		 mov	 eax, DWORD PTR [esi+8064]
  0007d	85 c0		 test	 eax, eax
  0007f	74 14		 je	 SHORT $LN8@Clear

; 97   : 	{
; 98   : 		delete this->m_MonsterJewelItem1;

  00081	68 d4 00 00 00	 push	 212			; 000000d4H
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008c	83 c4 08	 add	 esp, 8

; 99   : 		this->m_MonsterJewelItem1 = NULL;

  0008f	89 9e 80 1f 00
	00		 mov	 DWORD PTR [esi+8064], ebx
$LN8@Clear:

; 100  : 	}
; 101  : 	// ----
; 102  : 	if( this->m_MonsterJewelItem2 != NULL )

  00095	8b 86 84 1f 00
	00		 mov	 eax, DWORD PTR [esi+8068]
  0009b	85 c0		 test	 eax, eax
  0009d	74 18		 je	 SHORT $LN9@Clear

; 103  : 	{
; 104  : 		delete this->m_MonsterJewelItem2;

  0009f	68 d4 00 00 00	 push	 212			; 000000d4H
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000aa	83 c4 08	 add	 esp, 8

; 105  : 		this->m_MonsterJewelItem2 = NULL;

  000ad	c7 86 84 1f 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+8068], 0
$LN9@Clear:

; 106  : 	}
; 107  : 	// ----
; 108  : 	if( this->m_MonsterJewelItem3 != NULL )

  000b7	8b 86 88 1f 00
	00		 mov	 eax, DWORD PTR [esi+8072]
  000bd	85 c0		 test	 eax, eax
  000bf	74 18		 je	 SHORT $LN10@Clear

; 109  : 	{
; 110  : 		delete this->m_MonsterJewelItem3;

  000c1	68 d4 00 00 00	 push	 212			; 000000d4H
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cc	83 c4 08	 add	 esp, 8

; 111  : 		this->m_MonsterJewelItem3 = NULL;

  000cf	c7 86 88 1f 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+8072], 0
$LN10@Clear:

; 112  : 	}
; 113  : 	// ----
; 114  : 	if( this->m_MonsterJewelItem4 != NULL )

  000d9	8b 86 8c 1f 00
	00		 mov	 eax, DWORD PTR [esi+8076]
  000df	85 c0		 test	 eax, eax
  000e1	74 18		 je	 SHORT $LN11@Clear

; 115  : 	{
; 116  : 		delete this->m_MonsterJewelItem4;

  000e3	68 d4 00 00 00	 push	 212			; 000000d4H
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ee	83 c4 08	 add	 esp, 8

; 117  : 		this->m_MonsterJewelItem4 = NULL;

  000f1	c7 86 8c 1f 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+8076], 0
$LN11@Clear:

; 118  : 	}
; 119  : 	// ----
; 120  : 	if( this->m_MonsterJewelItem5 != NULL )

  000fb	8b 86 90 1f 00
	00		 mov	 eax, DWORD PTR [esi+8080]
  00101	85 c0		 test	 eax, eax
  00103	74 18		 je	 SHORT $LN12@Clear

; 121  : 	{
; 122  : 		delete this->m_MonsterJewelItem5;

  00105	68 d4 00 00 00	 push	 212			; 000000d4H
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00110	83 c4 08	 add	 esp, 8

; 123  : 		this->m_MonsterJewelItem5 = NULL;

  00113	c7 86 90 1f 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+8080], 0
$LN12@Clear:

; 124  : 	}
; 125  : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	c3		 ret	 0
?Clear@CMonsterItemMngEx@@QAEXXZ ENDP			; CMonsterItemMngEx::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?Init@CMonsterItemMngEx@@QAEXXZ
_TEXT	SEGMENT
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_this$1$ = -24						; size = 4
tv479 = -20						; size = 4
tv475 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMonsterItemMngEx@@QAEXXZ PROC			; CMonsterItemMngEx::Init, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CMonsterItemMngEx@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 e8	 mov	 DWORD PTR _this$1$[ebp], esi

; 37   : 	memset(this->m_iMonsterInvenItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  0002d	68 58 02 00 00	 push	 600			; 00000258H
  00032	8d 86 5c 02 00
	00		 lea	 eax, DWORD PTR [esi+604]
  00038	6a 00		 push	 0
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset

; 38   : 	memset(this->m_iMonsterInvenExItemCount, 0, sizeof(this->m_iMonsterInvenItemCount));

  00040	68 58 02 00 00	 push	 600			; 00000258H
  00045	8d 86 d0 1a 00
	00		 lea	 eax, DWORD PTR [esi+6864]
  0004b	6a 00		 push	 0
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memset
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	c7 45 ec 96 00
	00 00		 mov	 DWORD PTR tv479[ebp], 150 ; 00000096H
  0005d	81 c6 28 1d 00
	00		 add	 esi, 7464		; 00001d28H
  00063	89 75 f0	 mov	 DWORD PTR tv475[ebp], esi
$LL4@Init:

; 39   : 	// ----
; 40   : 	for( int i = 0; i < MAX_MONSTER_LEVEL; i++ )
; 41   : 	{
; 42   : 		if( this->m_MonsterInvenItems[i] != NULL )	//wz mistake, fixed

  00066	8b 86 dc e2 ff
	ff		 mov	 eax, DWORD PTR [esi-7460]
  0006c	85 c0		 test	 eax, eax
  0006e	74 09		 je	 SHORT $LN8@Init

; 43   : 		{
; 44   : 			delete[] this->m_MonsterInvenItems[i];

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00076	83 c4 04	 add	 esp, 4
$LN8@Init:

; 45   : 		}
; 46   : 		// ----
; 47   : 		this->m_MonsterInvenItems[i] = new CItem[MAX_MONSTER_ITEM];

  00079	68 20 3c 03 00	 push	 212000			; 00033c20H
  0007e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00083	8b d8		 mov	 ebx, eax
  00085	83 c4 04	 add	 esp, 4
  00088	89 5d e4	 mov	 DWORD PTR $T3[ebp], ebx
  0008b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00092	85 db		 test	 ebx, ebx
  00094	74 21		 je	 SHORT $LN13@Init
  00096	8b f3		 mov	 esi, ebx
  00098	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
  0009d	0f 1f 00	 npad	 3
$LL21@Init:
  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  000a7	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000ad	83 ef 01	 sub	 edi, 1
  000b0	75 ee		 jne	 SHORT $LL21@Init
  000b2	8b 75 f0	 mov	 esi, DWORD PTR tv475[ebp]
  000b5	eb 02		 jmp	 SHORT $LN14@Init
$LN13@Init:
  000b7	33 db		 xor	 ebx, ebx
$LN14@Init:

; 48   : 		// ----
; 49   : 		if( this->m_MonsterInvenExItems[i] != NULL )	//wz mistake, fixed

  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
  000bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c2	89 9e dc e2 ff
	ff		 mov	 DWORD PTR [esi-7460], ebx
  000c8	85 c0		 test	 eax, eax
  000ca	74 09		 je	 SHORT $LN9@Init

; 50   : 		{
; 51   : 			delete[] this->m_MonsterInvenExItems[i];

  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000d2	83 c4 04	 add	 esp, 4
$LN9@Init:

; 52   : 		}
; 53   : 		// ----
; 54   : 		this->m_MonsterInvenExItems[i] = new CItem[MAX_MONSTER_EXITEM];	

  000d5	68 d0 52 00 00	 push	 21200			; 000052d0H
  000da	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000df	8b d8		 mov	 ebx, eax
  000e1	83 c4 04	 add	 esp, 4
  000e4	89 5d e0	 mov	 DWORD PTR $T2[ebp], ebx
  000e7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000ee	85 db		 test	 ebx, ebx
  000f0	74 25		 je	 SHORT $LN15@Init
  000f2	8b f3		 mov	 esi, ebx
  000f4	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL25@Init:
  00100	8b ce		 mov	 ecx, esi
  00102	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  00107	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0010d	83 ef 01	 sub	 edi, 1
  00110	75 ee		 jne	 SHORT $LL25@Init
  00112	8b 75 f0	 mov	 esi, DWORD PTR tv475[ebp]
  00115	eb 02		 jmp	 SHORT $LN16@Init
$LN15@Init:
  00117	33 db		 xor	 ebx, ebx
$LN16@Init:
  00119	89 1e		 mov	 DWORD PTR [esi], ebx
  0011b	83 c6 04	 add	 esi, 4
  0011e	83 6d ec 01	 sub	 DWORD PTR tv479[ebp], 1
  00122	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00129	89 75 f0	 mov	 DWORD PTR tv475[ebp], esi
  0012c	0f 85 34 ff ff
	ff		 jne	 $LL4@Init

; 55   : 	}
; 56   : 	// ----
; 57   : 	LPMONSTER_ATTRIBUTE lpm;
; 58   : 	// ----
; 59   : 	for (int i = 0; i < MAX_MONSTER_TYPE; i++)

  00132	33 f6		 xor	 esi, esi
$LL7@Init:

; 60   : 	{
; 61   : 		lpm = gMAttr.GetAttr(i);

  00134	56		 push	 esi
  00135	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  0013a	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 62   : 		// ----
; 63   : 		if( lpm != NULL )
; 64   : 		{
; 65   : 			strcpy( this->MonsterName, lpm->m_Name);

  0013f	8b 5d e8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00142	8b f8		 mov	 edi, eax
  00144	85 ff		 test	 edi, edi
  00146	74 2d		 je	 SHORT $LN5@Init
  00148	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0014b	8b d3		 mov	 edx, ebx
  0014d	2b d1		 sub	 edx, ecx
  0014f	90		 npad	 1
$LL17@Init:
  00150	8a 01		 mov	 al, BYTE PTR [ecx]
  00152	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00155	88 84 0a b3 04
	00 00		 mov	 BYTE PTR [edx+ecx+1203], al
  0015c	84 c0		 test	 al, al
  0015e	75 f0		 jne	 SHORT $LL17@Init

; 66   : 			// ----
; 67   : 			if( lpm->m_Level != 0 )

  00160	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00163	85 c0		 test	 eax, eax
  00165	74 0e		 je	 SHORT $LN5@Init

; 68   : 			{
; 69   : 				this->gObjGiveItemSearchEx(lpm->m_Level, lpm->m_MaxItemLevel);

  00167	ff b7 ac 00 00
	00		 push	 DWORD PTR [edi+172]
  0016d	8b cb		 mov	 ecx, ebx
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 ?gObjGiveItemSearchEx@CMonsterItemMngEx@@QAEXHH@Z ; CMonsterItemMngEx::gObjGiveItemSearchEx
$LN5@Init:

; 55   : 	}
; 56   : 	// ----
; 57   : 	LPMONSTER_ATTRIBUTE lpm;
; 58   : 	// ----
; 59   : 	for (int i = 0; i < MAX_MONSTER_TYPE; i++)

  00175	46		 inc	 esi
  00176	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  0017c	7c b6		 jl	 SHORT $LL7@Init

; 70   : 			}
; 71   : 		}
; 72   : 	}
; 73   : 	// ----
; 74   : 	this->LoadMonsterItemDropRate();

  0017e	8b cb		 mov	 ecx, ebx
  00180	e8 00 00 00 00	 call	 ?LoadMonsterItemDropRate@CMonsterItemMngEx@@QAEXXZ ; CMonsterItemMngEx::LoadMonsterItemDropRate

; 75   : 	this->MakeJewelItem();

  00185	8b cb		 mov	 ecx, ebx
  00187	e8 00 00 00 00	 call	 ?MakeJewelItem@CMonsterItemMngEx@@QAEXXZ ; CMonsterItemMngEx::MakeJewelItem

; 76   : }

  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00196	59		 pop	 ecx
  00197	5f		 pop	 edi
  00198	5e		 pop	 esi
  00199	5b		 pop	 ebx
  0019a	8b e5		 mov	 esp, ebp
  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CMonsterItemMngEx@@QAEXXZ$0:
  00000	68 20 3c 03 00	 push	 212000			; 00033c20H
  00005	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?Init@CMonsterItemMngEx@@QAEXXZ$1:
  00012	68 d0 52 00 00	 push	 21200			; 000052d0H
  00017	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__ehhandler$?Init@CMonsterItemMngEx@@QAEXXZ:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMonsterItemMngEx@@QAEXXZ
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMonsterItemMngEx@@QAEXXZ ENDP			; CMonsterItemMngEx::Init
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ??1CMonsterItemMngEx@@UAE@XZ
_TEXT	SEGMENT
??1CMonsterItemMngEx@@UAE@XZ PROC			; CMonsterItemMngEx::~CMonsterItemMngEx, COMDAT
; _this$ = ecx

; 29   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMngEx@@6B@

; 30   : 	this->Clear();

  00006	e9 00 00 00 00	 jmp	 ?Clear@CMonsterItemMngEx@@QAEXXZ ; CMonsterItemMngEx::Clear
??1CMonsterItemMngEx@@UAE@XZ ENDP			; CMonsterItemMngEx::~CMonsterItemMngEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.h
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ??0CMonsterItemMngEx@@QAE@XZ
_TEXT	SEGMENT
??0CMonsterItemMngEx@@QAE@XZ PROC			; CMonsterItemMngEx::CMonsterItemMngEx, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMonsterItemMngEx@@6B@
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.h

; 65   : 	int		m_bScriptLoaded;									//+5B4	(1460)

  00006	8d 81 b8 05 00
	00		 lea	 eax, DWORD PTR [ecx+1464]
  0000c	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00011	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL4@CMonsterIt:

; 29   : 		this->m_MonsterLevel		= 0;

  00020	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00026	8d 40 24	 lea	 eax, DWORD PTR [eax+36]

; 30   : 		this->m_MagicBookRate		= 0;

  00029	c7 40 e0 00 00
	00 00		 mov	 DWORD PTR [eax-32], 0

; 31   : 		this->m_JewelOfBlessRate	= 0;

  00030	c7 40 e4 00 00
	00 00		 mov	 DWORD PTR [eax-28], 0

; 32   : 		this->m_JewelOfSoulRate		= 0;

  00037	c7 40 e8 00 00
	00 00		 mov	 DWORD PTR [eax-24], 0

; 33   : 		this->m_JewelOfLifeRate		= 0;

  0003e	c7 40 ec 00 00
	00 00		 mov	 DWORD PTR [eax-20], 0

; 34   : 		this->m_JewelOfCreationRate	= 0;

  00045	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 35   : 		this->m_JewelOfChaosRate	= 0;

  0004c	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 36   : 		this->m_NormalItemRate		= 0;

  00053	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0

; 37   : 		this->m_TotalDropRate		= 0;

  0005a	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00061	83 ea 01	 sub	 edx, 1
  00064	75 ba		 jne	 SHORT $LL4@CMonsterIt
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp

; 24   : }

  00066	8b c1		 mov	 eax, ecx
  00068	c3		 ret	 0
??0CMonsterItemMngEx@@QAE@XZ ENDP			; CMonsterItemMngEx::CMonsterItemMngEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.h
;	COMDAT ??0__tagMONSTER_ITEM_DROP_PRATE_@@QAE@XZ
_TEXT	SEGMENT
??0__tagMONSTER_ITEM_DROP_PRATE_@@QAE@XZ PROC		; __tagMONSTER_ITEM_DROP_PRATE_::__tagMONSTER_ITEM_DROP_PRATE_, COMDAT
; _this$ = ecx

; 29   : 		this->m_MonsterLevel		= 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 30   : 		this->m_MagicBookRate		= 0;
; 31   : 		this->m_JewelOfBlessRate	= 0;
; 32   : 		this->m_JewelOfSoulRate		= 0;
; 33   : 		this->m_JewelOfLifeRate		= 0;
; 34   : 		this->m_JewelOfCreationRate	= 0;
; 35   : 		this->m_JewelOfChaosRate	= 0;
; 36   : 		this->m_NormalItemRate		= 0;
; 37   : 		this->m_TotalDropRate		= 0;
; 38   : 	}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00040	c3		 ret	 0
??0__tagMONSTER_ITEM_DROP_PRATE_@@QAE@XZ ENDP		; __tagMONSTER_ITEM_DROP_PRATE_::__tagMONSTER_ITEM_DROP_PRATE_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monsteritemmngex.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1162 : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
