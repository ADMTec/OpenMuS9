; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CrywolfAltar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CCrywolfAltarInfo@@QAE@XZ			; CCrywolfAltarInfo::CCrywolfAltarInfo
PUBLIC	??0CCrywolfAltar@@QAE@XZ			; CCrywolfAltar::CCrywolfAltar
PUBLIC	??1CCrywolfAltar@@UAE@XZ			; CCrywolfAltar::~CCrywolfAltar
PUBLIC	?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z		; CCrywolfAltar::CrywolfAltarAct
PUBLIC	?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarObjIndex
PUBLIC	?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ	; CCrywolfAltar::SetAllAltarObjectIndex
PUBLIC	?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z		; CCrywolfAltar::GetAlatarNumber
PUBLIC	?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarValidContract
PUBLIC	?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z	; CCrywolfAltar::CheckAltarValidContract
PUBLIC	?GetAltarState@CCrywolfAltar@@QAEHH@Z		; CCrywolfAltar::GetAltarState
PUBLIC	?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount
PUBLIC	?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z	; CCrywolfAltar::SetAltarUserIndex
PUBLIC	?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::ResetAltarUserIndex
PUBLIC	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z	; CCrywolfAltar::GetAltarUserIndex
PUBLIC	?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ	; CCrywolfAltar::GetContractedAltarCount
PUBLIC	?GetPriestHPSum@CCrywolfAltar@@QAEHXZ		; CCrywolfAltar::GetPriestHPSum
PUBLIC	?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ	; CCrywolfAltar::GetPriestMaxHPSum
PUBLIC	?ResetAllAltar@CCrywolfAltar@@QAEXXZ		; CCrywolfAltar::ResetAllAltar
PUBLIC	?ResetAltar@CCrywolfAltar@@QAEXH@Z		; CCrywolfAltar::ResetAltar
PUBLIC	?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z	; CCrywolfAltar::SetAllAltarViewState
PUBLIC	?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z	; CCrywolfAltar::SetAltarViewState
PUBLIC	??_GCCrywolfAltar@@UAEPAXI@Z			; CCrywolfAltar::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CCrywolfAltar@@6B@				; CCrywolfAltar::`vftable'
PUBLIC	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A		; g_CrywolfNPC_Altar
PUBLIC	??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_R4CCrywolfAltar@@6B@				; CCrywolfAltar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolfAltar@@@8			; CCrywolfAltar `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolfAltar@@8				; CCrywolfAltar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolfAltar@@8				; CCrywolfAltar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolfAltar@@8			; CCrywolfAltar::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??_ECCrywolfAltar@@UAEPAXI@Z:PROC		; CCrywolfAltar::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	??0CCrywolfUtil@@QAE@XZ:PROC			; CCrywolfUtil::CCrywolfUtil
EXTRN	??1CCrywolfUtil@@UAE@XZ:PROC			; CCrywolfUtil::~CCrywolfUtil
EXTRN	?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ:PROC ; CCrywolfUtil::SendCrywolfUserAnyMsg
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z:PROC ; gObjClearBuffEffect
EXTRN	?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjGetValueOfBuffIndex
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A DB 090H DUP (?)	; g_CrywolfNPC_Altar
?UTIL@@3VCCrywolfUtil@@A DD 01H DUP (?)			; UTIL
_BSS	ENDS
CRT$XCU	SEGMENT
?UTIL$initializer$@@3P6AXXZA DD FLAT:??__EUTIL@@YAXXZ	; UTIL$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CCrywolfAltar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolfAltar@@8 DD FLAT:??_R0?AVCCrywolfAltar@@@8 ; CCrywolfAltar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolfAltar@@8
rdata$r	SEGMENT
??_R2CCrywolfAltar@@8 DD FLAT:??_R1A@?0A@EA@CCrywolfAltar@@8 ; CCrywolfAltar::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolfAltar@@8
rdata$r	SEGMENT
??_R3CCrywolfAltar@@8 DD 00H				; CCrywolfAltar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolfAltar@@@8
data$r	SEGMENT
??_R0?AVCCrywolfAltar@@@8 DD FLAT:??_7type_info@@6B@	; CCrywolfAltar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolfAltar@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCrywolfAltar@@6B@
rdata$r	SEGMENT
??_R4CCrywolfAltar@@6B@ DD 00H				; CCrywolfAltar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolfAltar@@@8
	DD	FLAT:??_R3CCrywolfAltar@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Altar Op.] [%s][%s] Remove contract Altar[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Altar Op.] [%s][%s] Attempt to contract Altar[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@ DB '['
	DB	' Crywolf ][Altar Op.]  [%s][%s] Set Valid Contract Altar[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CCrywolfAltar@@6B@
CONST	SEGMENT
??_7CCrywolfAltar@@6B@ DD FLAT:??_R4CCrywolfAltar@@6B@	; CCrywolfAltar::`vftable'
	DD	FLAT:??_ECCrywolfAltar@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?g_CrywolfNPC_Altar$initializer$@@3P6AXXZA DD FLAT:??__Eg_CrywolfNPC_Altar@@YAXXZ ; g_CrywolfNPC_Altar$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CrywolfNPC_Altar@@YAXXZ
text$yd	SEGMENT
??__Fg_CrywolfNPC_Altar@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CrywolfNPC_Altar'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfAltar@@UAE@XZ ; CCrywolfAltar::~CCrywolfAltar
??__Fg_CrywolfNPC_Altar@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CrywolfNPC_Altar''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ??__Eg_CrywolfNPC_Altar@@YAXXZ
text$di	SEGMENT
??__Eg_CrywolfNPC_Altar@@YAXXZ PROC			; `dynamic initializer for 'g_CrywolfNPC_Altar'', COMDAT

; 13   : CCrywolfAltar g_CrywolfNPC_Altar;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00005	e8 00 00 00 00	 call	 ??0CCrywolfAltar@@QAE@XZ ; CCrywolfAltar::CCrywolfAltar
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CrywolfNPC_Altar@@YAXXZ ; `dynamic atexit destructor for 'g_CrywolfNPC_Altar''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CrywolfNPC_Altar@@YAXXZ ENDP			; `dynamic initializer for 'g_CrywolfNPC_Altar''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FUTIL@@YAXXZ
text$yd	SEGMENT
??__FUTIL@@YAXXZ PROC					; `dynamic atexit destructor for 'UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfUtil@@UAE@XZ	; CCrywolfUtil::~CCrywolfUtil
??__FUTIL@@YAXXZ ENDP					; `dynamic atexit destructor for 'UTIL''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ??__EUTIL@@YAXXZ
text$di	SEGMENT
??__EUTIL@@YAXXZ PROC					; `dynamic initializer for 'UTIL'', COMDAT

; 12   : static CCrywolfUtil UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00005	e8 00 00 00 00	 call	 ??0CCrywolfUtil@@QAE@XZ	; CCrywolfUtil::CCrywolfUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FUTIL@@YAXXZ	; `dynamic atexit destructor for 'UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EUTIL@@YAXXZ ENDP					; `dynamic initializer for 'UTIL''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCrywolfAltar@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCrywolfAltar@@UAEPAXI@Z PROC			; CCrywolfAltar::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCrywolfAltar@@UAE@XZ ; CCrywolfAltar::~CCrywolfAltar
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 00 00 00	 push	 144			; 00000090H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCrywolfAltar@@UAEPAXI@Z ENDP			; CCrywolfAltar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
_iAltarState$ = 12					; size = 4
?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z PROC		; CCrywolfAltar::SetAltarViewState, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 330  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00004	ff 75 08	 push	 DWORD PTR _iClass$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 331  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000e	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00015	2b d0		 sub	 edx, eax

; 332  : 
; 333  : 	if ( AltarInfo->m_iAltarIndex == -1 )

  00017	8b 44 96 08	 mov	 eax, DWORD PTR [esi+edx*4+8]
  0001b	5e		 pop	 esi
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	74 21		 je	 SHORT $LN1@SetAltarVi

; 334  : 		return;
; 335  : 
; 336  : 	gObjAddBuffEffect(&gObj[AltarInfo->m_iAltarIndex],BUFF_ALTAR_STATUS1,0,0,0,0,-10);

  00021	6a f6		 push	 -10			; fffffff6H
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	6a 15		 push	 21			; 00000015H
  00033	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0003f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@SetAltarVi:

; 337  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ENDP		; CCrywolfAltar::SetAltarViewState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
_iAltarState$ = 8					; size = 4
?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z PROC	; CCrywolfAltar::SetAllAltarViewState, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 319  : 	this->SetAltarViewState(205, iAltarState);

  00004	8b 75 08	 mov	 esi, DWORD PTR _iAltarState$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	68 cd 00 00 00	 push	 205			; 000000cdH
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 320  : 	this->SetAltarViewState(206, iAltarState);

  00015	56		 push	 esi
  00016	68 ce 00 00 00	 push	 206			; 000000ceH
  0001b	8b cf		 mov	 ecx, edi
  0001d	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 321  : 	this->SetAltarViewState(207, iAltarState);

  00022	56		 push	 esi
  00023	68 cf 00 00 00	 push	 207			; 000000cfH
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 322  : 	this->SetAltarViewState(208, iAltarState);

  0002f	56		 push	 esi
  00030	68 d0 00 00 00	 push	 208			; 000000d0H
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState

; 323  : 	this->SetAltarViewState(209, iAltarState);

  0003c	56		 push	 esi
  0003d	68 d1 00 00 00	 push	 209			; 000000d1H
  00042	8b cf		 mov	 ecx, edi
  00044	e8 00 00 00 00	 call	 ?SetAltarViewState@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarViewState
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 324  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z ENDP	; CCrywolfAltar::SetAllAltarViewState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?ResetAltar@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?ResetAltar@CCrywolfAltar@@QAEXH@Z PROC			; CCrywolfAltar::ResetAltar, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 305  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00004	ff 75 08	 push	 DWORD PTR _iClass$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 306  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000e	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00015	2b d0		 sub	 edx, eax

; 307  : 
; 308  : 	if ( AltarInfo->m_iAltarIndex == -1 )

  00017	8b 44 96 08	 mov	 eax, DWORD PTR [esi+edx*4+8]
  0001b	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	74 48		 je	 SHORT $LN1@ResetAltar

; 309  : 		return;
; 310  : 
; 311  : 	gObjClearBuffEffect(&gObj[AltarInfo->m_iAltarIndex],CLEAR_TYPE_LOGOUT);

  00023	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00029	6a 02		 push	 2
  0002b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect
  00037	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 32   : 		this->m_iAltarState = 0;

  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 33   : 		this->m_iUserIndex = -1;

  00041	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1

; 34   : 		this->m_iAltarIndex = -1;

  00048	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1

; 35   : 		this->m_iContractCount = 0;

  0004f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 36   : 		this->m_dwAppliedContractTime =0 ;

  00056	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 37   : 		this->m_dwValidContractTime =0 ;

  0005d	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 38   : 		this->m_dwLastValidContractTime =0 ;

  00064	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN1@ResetAltar:
  0006b	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 313  : }

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?ResetAltar@CCrywolfAltar@@QAEXH@Z ENDP			; CCrywolfAltar::ResetAltar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?ResetAllAltar@CCrywolfAltar@@QAEXXZ
_TEXT	SEGMENT
?ResetAllAltar@CCrywolfAltar@@QAEXXZ PROC		; CCrywolfAltar::ResetAllAltar, COMDAT
; _this$ = ecx

; 293  : {

  00000	56		 push	 esi

; 294  : 	this->ResetAltar(205);

  00001	68 cd 00 00 00	 push	 205			; 000000cdH
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 295  : 	this->ResetAltar(206);

  0000d	68 ce 00 00 00	 push	 206			; 000000ceH
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 296  : 	this->ResetAltar(207);

  00019	68 cf 00 00 00	 push	 207			; 000000cfH
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 297  : 	this->ResetAltar(208);

  00025	68 d0 00 00 00	 push	 208			; 000000d0H
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar

; 298  : 	this->ResetAltar(209);

  00031	68 d1 00 00 00	 push	 209			; 000000d1H
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar
  0003d	5e		 pop	 esi

; 299  : }

  0003e	c3		 ret	 0
?ResetAllAltar@CCrywolfAltar@@QAEXXZ ENDP		; CCrywolfAltar::ResetAllAltar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
_iAddLife$1 = -8					; size = 4
_iPriestHPSum$1$ = -4					; size = 4
?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ PROC		; CCrywolfAltar::GetPriestMaxHPSum, COMDAT
; _this$ = ecx

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 383  : 	int iPriestHPSum = 0;

  00007	33 c0		 xor	 eax, eax
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 45 fc	 mov	 DWORD PTR _iPriestHPSum$1$[ebp], eax
  0000e	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00011	8d 58 05	 lea	 ebx, DWORD PTR [eax+5]
$LL4@GetPriestM:

; 386  : 	{
; 387  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 388  : 
; 389  : 		if ( AltarInfo->GetAltarState() != 1 )

  00014	83 7f f8 01	 cmp	 DWORD PTR [edi-8], 1
  00018	75 62		 jne	 SHORT $LN2@GetPriestM

; 390  : 			continue;
; 391  : 
; 392  : 		if ( !gObjIsConnected(AltarInfo->m_iUserIndex))

  0001a	ff 37		 push	 DWORD PTR [edi]
  0001c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00021	83 c4 04	 add	 esp, 4
  00024	85 c0		 test	 eax, eax
  00026	74 51		 je	 SHORT $LN14@GetPriestM

; 393  : 			continue;
; 394  : 
; 395  : 		LPOBJ lpUserObj = &gObj[AltarInfo->m_iUserIndex];

  00028	69 37 40 27 00
	00		 imul	 esi, DWORD PTR [edi], 10048

; 396  : 		int iAddLife = 0;
; 397  : 		gObjGetValueOfBuffIndex(lpUserObj,8,&iAddLife,0);

  0002e	8d 45 f8	 lea	 eax, DWORD PTR _iAddLife$1[ebp]
  00031	6a 00		 push	 0
  00033	50		 push	 eax
  00034	6a 08		 push	 8
  00036	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iAddLife$1[ebp], 0
  0003d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  00049	66 0f 6e 8e 24
	01 00 00	 movd	 xmm1, DWORD PTR [esi+292]
  00051	83 c4 10	 add	 esp, 16			; 00000010H
  00054	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _iAddLife$1[ebp]

; 398  : 
; 399  : 		iPriestHPSum += (int)(lpUserObj->AddLife + lpUserObj->MaxLife + iAddLife);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _iPriestHPSum$1$[ebp]
  0005c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0005f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00062	f3 0f 58 8e dc
	00 00 00	 addss	 xmm1, DWORD PTR [esi+220]
  0006a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006e	f3 0f 2c c9	 cvttss2si ecx, xmm1
  00072	03 c1		 add	 eax, ecx
  00074	89 45 fc	 mov	 DWORD PTR _iPriestHPSum$1$[ebp], eax
  00077	eb 03		 jmp	 SHORT $LN2@GetPriestM
$LN14@GetPriestM:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _iPriestHPSum$1$[ebp]
$LN2@GetPriestM:

; 384  : 
; 385  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)

  0007c	83 c7 1c	 add	 edi, 28			; 0000001cH
  0007f	83 eb 01	 sub	 ebx, 1
  00082	75 90		 jne	 SHORT $LL4@GetPriestM
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 400  : 	}
; 401  : 
; 402  : 	return iPriestHPSum;
; 403  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?GetPriestMaxHPSum@CCrywolfAltar@@QAEHXZ ENDP		; CCrywolfAltar::GetPriestMaxHPSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetPriestHPSum@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
?GetPriestHPSum@CCrywolfAltar@@QAEHXZ PROC		; CCrywolfAltar::GetPriestHPSum, COMDAT
; _this$ = ecx

; 360  : {

  00000	53		 push	 ebx

; 361  : 	int iPriestHPSum = 0;

  00001	33 db		 xor	 ebx, ebx
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
  00008	8d 7b 05	 lea	 edi, DWORD PTR [ebx+5]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@GetPriestH:

; 364  : 	{
; 365  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 366  : 
; 367  : 		if ( AltarInfo->GetAltarState() != 1 )

  00010	83 7e f8 01	 cmp	 DWORD PTR [esi-8], 1
  00014	75 25		 jne	 SHORT $LN2@GetPriestH

; 368  : 			continue;
; 369  : 
; 370  : 		if ( !gObjIsConnected(AltarInfo->m_iUserIndex))

  00016	ff 36		 push	 DWORD PTR [esi]
  00018	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001d	83 c4 04	 add	 esp, 4
  00020	85 c0		 test	 eax, eax
  00022	74 17		 je	 SHORT $LN2@GetPriestH

; 371  : 			continue;
; 372  : 
; 373  : 		LPOBJ lpUserObj = &gObj[AltarInfo->m_iUserIndex];

  00024	69 16 40 27 00
	00		 imul	 edx, DWORD PTR [esi], 10048

; 374  : 		iPriestHPSum += (int)lpUserObj->Life;

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00030	f3 0f 2c 8c 0a
	d8 00 00 00	 cvttss2si ecx, DWORD PTR [edx+ecx+216]
  00039	03 d9		 add	 ebx, ecx
$LN2@GetPriestH:

; 362  : 
; 363  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)

  0003b	83 c6 1c	 add	 esi, 28			; 0000001cH
  0003e	83 ef 01	 sub	 edi, 1
  00041	75 cd		 jne	 SHORT $LL4@GetPriestH

; 375  : 	}
; 376  : 
; 377  : 	return iPriestHPSum;

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	8b c3		 mov	 eax, ebx
  00047	5b		 pop	 ebx

; 378  : }

  00048	c3		 ret	 0
?GetPriestHPSum@CCrywolfAltar@@QAEHXZ ENDP		; CCrywolfAltar::GetPriestHPSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ
_TEXT	SEGMENT
?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ PROC	; CCrywolfAltar::GetContractedAltarCount, COMDAT
; _this$ = ecx

; 342  : 	int iContractedAltarCount = 0;
; 343  : 
; 344  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 345  : 	{
; 346  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 347  : 
; 348  : 		if ( AltarInfo->GetAltarState() != 1 )

  00000	ba 01 00 00 00	 mov	 edx, 1
  00005	33 c0		 xor	 eax, eax
  00007	39 51 04	 cmp	 DWORD PTR [ecx+4], edx
  0000a	0f 44 c2	 cmove	 eax, edx
  0000d	39 51 20	 cmp	 DWORD PTR [ecx+32], edx
  00010	75 01		 jne	 SHORT $LN16@GetContrac

; 349  : 			continue;
; 350  : 
; 351  : 		iContractedAltarCount++;

  00012	40		 inc	 eax
$LN16@GetContrac:

; 342  : 	int iContractedAltarCount = 0;
; 343  : 
; 344  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 345  : 	{
; 346  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 347  : 
; 348  : 		if ( AltarInfo->GetAltarState() != 1 )

  00013	39 51 3c	 cmp	 DWORD PTR [ecx+60], edx
  00016	75 01		 jne	 SHORT $LN18@GetContrac

; 349  : 			continue;
; 350  : 
; 351  : 		iContractedAltarCount++;

  00018	40		 inc	 eax
$LN18@GetContrac:

; 342  : 	int iContractedAltarCount = 0;
; 343  : 
; 344  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 345  : 	{
; 346  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 347  : 
; 348  : 		if ( AltarInfo->GetAltarState() != 1 )

  00019	39 51 58	 cmp	 DWORD PTR [ecx+88], edx
  0001c	75 01		 jne	 SHORT $LN20@GetContrac

; 349  : 			continue;
; 350  : 
; 351  : 		iContractedAltarCount++;

  0001e	40		 inc	 eax
$LN20@GetContrac:

; 342  : 	int iContractedAltarCount = 0;
; 343  : 
; 344  : 	for ( int i=0;i<MAX_CRYWOLF_ALTAR;i++)
; 345  : 	{
; 346  : 		CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[i];
; 347  : 
; 348  : 		if ( AltarInfo->GetAltarState() != 1 )

  0001f	39 51 74	 cmp	 DWORD PTR [ecx+116], edx
  00022	75 01		 jne	 SHORT $LN22@GetContrac

; 349  : 			continue;
; 350  : 
; 351  : 		iContractedAltarCount++;

  00024	40		 inc	 eax
$LN22@GetContrac:

; 352  : 	}
; 353  : 
; 354  : 	return iContractedAltarCount;
; 355  : }

  00025	c3		 ret	 0
?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ENDP	; CCrywolfAltar::GetContractedAltarCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAltarUserIndex, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	int iUserIndex = -1;
; 120  : 
; 121  : 	switch ( iClass )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	83 ca ff	 or	 edx, -1
  00009	05 33 ff ff ff	 add	 eax, -205		; ffffff33H
  0000e	83 f8 04	 cmp	 eax, 4
  00011	77 2e		 ja	 SHORT $LN2@GetAltarUs
  00013	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@GetAltarUs[eax*4]
$LN4@GetAltarUs:

; 122  : 	{
; 123  : 		case 205:
; 124  : 			iUserIndex = this->m_AltarInfo[0].m_iUserIndex;

  0001a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 	return iUserIndex;

  0001d	8b c2		 mov	 eax, edx

; 141  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN5@GetAltarUs:

; 125  : 			break;
; 126  : 		case 206:
; 127  : 			iUserIndex = this->m_AltarInfo[1].m_iUserIndex;

  00023	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 	return iUserIndex;

  00026	8b c2		 mov	 eax, edx

; 141  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN6@GetAltarUs:

; 128  : 			break;
; 129  : 		case 207:
; 130  : 			iUserIndex = this->m_AltarInfo[2].m_iUserIndex;

  0002c	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 	return iUserIndex;

  0002f	8b c2		 mov	 eax, edx

; 141  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN7@GetAltarUs:

; 131  : 			break;
; 132  : 		case 208:
; 133  : 			iUserIndex = this->m_AltarInfo[3].m_iUserIndex;

  00035	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 	return iUserIndex;

  00038	8b c2		 mov	 eax, edx

; 141  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN8@GetAltarUs:

; 134  : 			break;
; 135  : 		case 209:
; 136  : 			iUserIndex = this->m_AltarInfo[4].m_iUserIndex;

  0003e	8b 51 7c	 mov	 edx, DWORD PTR [ecx+124]
$LN2@GetAltarUs:

; 137  : 			break;
; 138  : 	}
; 139  : 
; 140  : 	return iUserIndex;

  00041	8b c2		 mov	 eax, edx

; 141  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
  00047	90		 npad	 1
$LN11@GetAltarUs:
  00048	00 00 00 00	 DD	 $LN4@GetAltarUs
  0004c	00 00 00 00	 DD	 $LN5@GetAltarUs
  00050	00 00 00 00	 DD	 $LN6@GetAltarUs
  00054	00 00 00 00	 DD	 $LN7@GetAltarUs
  00058	00 00 00 00	 DD	 $LN8@GetAltarUs
?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAltarUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iAltarObjIndex$ = 8					; size = 4
_iClass$ = 12						; size = 4
?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z PROC	; CCrywolfAltar::ResetAltarUserIndex, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 236  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00005	ff 75 0c	 push	 DWORD PTR _iClass$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  0000f	8b f8		 mov	 edi, eax

; 237  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00011	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  00018	2b d7		 sub	 edx, edi

; 238  : 
; 239  : 	if ( gObjIsConnected(AltarInfo->m_iUserIndex) != FALSE )

  0001a	ff 74 96 0c	 push	 DWORD PTR [esi+edx*4+12]
  0001e	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  00021	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00026	83 c4 04	 add	 esp, 4
  00029	85 c0		 test	 eax, eax
  0002b	74 3d		 je	 SHORT $LN2@ResetAltar

; 240  : 	{
; 241  : 		MsgOutput(AltarInfo->m_iUserIndex, lMsg.Get(MSGGET(13, 4)), iAltarNumber);

  0002d	57		 push	 edi
  0002e	68 04 0d 00 00	 push	 3332			; 00000d04H
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00038	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003d	50		 push	 eax
  0003e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00041	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 242  : 		LogAddTD("[ Crywolf ][Altar Op.] [%s][%s] Remove contract Altar[%d]",

  00046	69 4e 0c 40 27
	00 00		 imul	 ecx, DWORD PTR [esi+12], 10048
  0004d	57		 push	 edi
  0004e	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00054	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00057	50		 push	 eax
  00058	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@INEKOOFN@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00067	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@ResetAltar:

; 250  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS2,0,0,0,0,-10);

  0006a	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _iAltarObjIndex$[ebp], 10048
  00071	83 7e 10 02	 cmp	 DWORD PTR [esi+16], 2
  00075	6a f6		 push	 -10			; fffffff6H
  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	7c 17		 jl	 SHORT $LN3@ResetAltar
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 49   : 		this->m_iAltarState = iState;

  00081	c7 46 04 03 00
	00 00		 mov	 DWORD PTR [esi+4], 3
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 250  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS2,0,0,0,0,-10);

  00088	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008e	6a 16		 push	 22			; 00000016H
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 251  : 	}
; 252  : 	else

  00096	eb 15		 jmp	 SHORT $LN10@ResetAltar
$LN3@ResetAltar:

; 254  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS1,0,0,0,0,-10);

  00098	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009e	6a 15		 push	 21			; 00000015H
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 49   : 		this->m_iAltarState = iState;

  000a6	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN10@ResetAltar:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 254  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS1,0,0,0,0,-10);

  000ad	83 c4 1c	 add	 esp, 28			; 0000001cH

; 255  : 		AltarInfo->SetAltarState(0);
; 256  : 	}
; 257  : 
; 258  : 	AltarInfo->m_iUserIndex = -1;

  000b0	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1

; 259  : 	AltarInfo->m_dwAppliedContractTime = 0;

  000b7	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 260  : 	AltarInfo->m_dwValidContractTime = 0;

  000be	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 261  : 	AltarInfo->m_dwLastValidContractTime = GetTickCount();

  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000cb	5f		 pop	 edi
  000cc	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000cf	5e		 pop	 esi

; 262  : }

  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ENDP	; CCrywolfAltar::ResetAltarUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z
_TEXT	SEGMENT
_dwCurrentTime$1$ = -4					; size = 4
tv259 = 8						; size = 4
_iAltarObjIndex$ = 8					; size = 4
tv258 = 12						; size = 4
_iClass$ = 12						; size = 4
tv257 = 16						; size = 4
_iUserIndex$ = 16					; size = 4
?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z PROC	; CCrywolfAltar::SetAltarUserIndex, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 183  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00007	ff 75 0c	 push	 DWORD PTR _iClass$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  00011	8b f8		 mov	 edi, eax

; 184  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00013	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  0001a	2b d7		 sub	 edx, edi
  0001c	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]

; 185  : 	DWORD dwCurrentTime = GetTickCount();

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 186  : 
; 187  : 	if ( gObjIsConnected(AltarInfo->m_iUserIndex) != FALSE )

  00025	ff 76 0c	 push	 DWORD PTR [esi+12]
  00028	8b d8		 mov	 ebx, eax
  0002a	89 5d fc	 mov	 DWORD PTR _dwCurrentTime$1$[ebp], ebx
  0002d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	74 27		 je	 SHORT $LN2@SetAltarUs

; 188  : 	{
; 189  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 253)), iAltarNumber);

  00039	57		 push	 edi
  0003a	68 fd 0c 00 00	 push	 3325			; 00000cfdH
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00044	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00049	50		 push	 eax
  0004a	ff 75 10	 push	 DWORD PTR _iUserIndex$[ebp]

; 206  : 	{
; 207  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  0004d	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		return FALSE;

  00055	33 c0		 xor	 eax, eax
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 230  : }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@SetAltarUs:

; 190  : 		return FALSE;
; 191  : 	}
; 192  : 
; 193  : 	if ( (dwCurrentTime-AltarInfo->m_dwLastValidContractTime) < 10000 )

  00060	8b c3		 mov	 eax, ebx
  00062	2b 46 1c	 sub	 eax, DWORD PTR [esi+28]
  00065	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0006a	73 27		 jae	 SHORT $LN3@SetAltarUs

; 194  : 	{
; 195  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 254)), iAltarNumber);

  0006c	57		 push	 edi
  0006d	68 fe 0c 00 00	 push	 3326			; 00000cfeH
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00077	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0007c	50		 push	 eax
  0007d	ff 75 10	 push	 DWORD PTR _iUserIndex$[ebp]

; 206  : 	{
; 207  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  00080	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		return FALSE;

  00088	33 c0		 xor	 eax, eax
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 230  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 0c 00	 ret	 12			; 0000000cH
$LN3@SetAltarUs:

; 196  : 		return FALSE;
; 197  : 	}
; 198  : 
; 199  : 	if ( AltarInfo->m_iContractCount > MAX_ALTAR_CONTRACTS ) 

  00093	83 7e 10 02	 cmp	 DWORD PTR [esi+16], 2
  00097	7e 27		 jle	 SHORT $LN4@SetAltarUs

; 200  : 	{
; 201  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 255)), iAltarNumber);

  00099	57		 push	 edi
  0009a	68 ff 0c 00 00	 push	 3327			; 00000cffH
  0009f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a9	50		 push	 eax
  000aa	ff 75 10	 push	 DWORD PTR _iUserIndex$[ebp]

; 206  : 	{
; 207  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  000ad	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		return FALSE;

  000b5	33 c0		 xor	 eax, eax
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx

; 230  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetAltarUs:

; 202  : 		return FALSE;
; 203  : 	}
; 204  : 
; 205  : 	if ( abs(gObj[iAltarObjIndex].Y - gObj[iUserIndex].Y) > 0 || abs(gObj[iAltarObjIndex].X - gObj[iUserIndex].X) > 0 )

  000c0	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _iAltarObjIndex$[ebp], 10048
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cd	8b 5d 10	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  000d0	89 45 08	 mov	 DWORD PTR tv259[ebp], eax
  000d3	8d 14 08	 lea	 edx, DWORD PTR [eax+ecx]
  000d6	69 c3 40 27 00
	00		 imul	 eax, ebx, 10048
  000dc	89 55 0c	 mov	 DWORD PTR tv258[ebp], edx
  000df	03 c1		 add	 eax, ecx
  000e1	89 45 10	 mov	 DWORD PTR tv257[ebp], eax
  000e4	0f b6 88 21 01
	00 00		 movzx	 ecx, BYTE PTR [eax+289]
  000eb	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  000f2	2b c1		 sub	 eax, ecx
  000f4	99		 cdq
  000f5	33 c2		 xor	 eax, edx
  000f7	2b c2		 sub	 eax, edx
  000f9	85 c0		 test	 eax, eax
  000fb	0f 8f f2 00 00
	00		 jg	 $LN6@SetAltarUs
  00101	8b 45 10	 mov	 eax, DWORD PTR tv257[ebp]
  00104	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  0010b	8b 45 0c	 mov	 eax, DWORD PTR tv258[ebp]
  0010e	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00115	2b c1		 sub	 eax, ecx
  00117	99		 cdq
  00118	33 c2		 xor	 eax, edx
  0011a	2b c2		 sub	 eax, edx
  0011c	85 c0		 test	 eax, eax
  0011e	0f 8f cf 00 00
	00		 jg	 $LN6@SetAltarUs

; 209  : 	}
; 210  : 
; 211  : 	AltarInfo->SetAltarState(2);
; 212  : 	AltarInfo->m_iUserIndex = iUserIndex;
; 213  : 	AltarInfo->m_dwAppliedContractTime = dwCurrentTime;

  00124	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurrentTime$1$[ebp]

; 214  : 	AltarInfo->m_dwValidContractTime = dwCurrentTime + 5000;	// It Get Active after 5 Seconds
; 215  : 	AltarInfo->m_dwLastValidContractTime = dwCurrentTime;
; 216  : 	AltarInfo->m_iContractCount++;

  00127	ff 46 10	 inc	 DWORD PTR [esi+16]

; 218  : 	gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS4,0,0,0,0,-10);

  0012a	6a f6		 push	 -10			; fffffff6H
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	8d 81 88 13 00
	00		 lea	 eax, DWORD PTR [ecx+5000]
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 49   : 		this->m_iAltarState = iState;

  00136	c7 46 04 02 00
	00 00		 mov	 DWORD PTR [esi+4], 2
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 218  : 	gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS4,0,0,0,0,-10);

  0013d	6a 00		 push	 0
  0013f	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00142	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00145	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00148	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx
  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00150	03 45 08	 add	 eax, DWORD PTR tv259[ebp]
  00153	6a 00		 push	 0
  00155	6a 18		 push	 24			; 00000018H
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 219  : 
; 220  : 	UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(13, 1)), gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  0015d	69 4e 0c 40 27
	00 00		 imul	 ecx, DWORD PTR [esi+12], 10048
  00164	83 c4 1c	 add	 esp, 28			; 0000001cH
  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016c	83 c0 5d	 add	 eax, 93			; 0000005dH
  0016f	57		 push	 edi
  00170	03 c1		 add	 eax, ecx
  00172	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00177	50		 push	 eax
  00178	68 01 0d 00 00	 push	 3329			; 00000d01H
  0017d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00182	50		 push	 eax
  00183	6a 02		 push	 2
  00185	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0018a	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 221  : 
; 222  : 	LogAddTD("[ Crywolf ][Altar Op.] [%s][%s] Attempt to contract Altar[%d]",

  0018f	69 4e 0c 40 27
	00 00		 imul	 ecx, DWORD PTR [esi+12], 10048
  00196	57		 push	 edi
  00197	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019d	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001a0	50		 push	 eax
  001a1	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001a4	50		 push	 eax
  001a5	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@MHEPMOPO@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  001aa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b0	83 c4 24	 add	 esp, 36			; 00000024H

; 223  : 		gObj[AltarInfo->m_iUserIndex].AccountID, gObj[AltarInfo->m_iUserIndex].Name,
; 224  : 		iAltarNumber);
; 225  : 
; 226  : 	MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 2)));

  001b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001b8	68 02 0d 00 00	 push	 3330			; 00000d02H
  001bd	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001c2	50		 push	 eax
  001c3	53		 push	 ebx
  001c4	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001c9	83 c4 08	 add	 esp, 8

; 227  : 	MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 3)));

  001cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001d1	68 03 0d 00 00	 push	 3331			; 00000d03H
  001d6	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001db	50		 push	 eax
  001dc	53		 push	 ebx
  001dd	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  001e2	83 c4 08	 add	 esp, 8

; 228  : 
; 229  : 	return TRUE;

  001e5	b8 01 00 00 00	 mov	 eax, 1
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx

; 230  : }

  001ed	8b e5		 mov	 esp, ebp
  001ef	5d		 pop	 ebp
  001f0	c2 0c 00	 ret	 12			; 0000000cH
$LN6@SetAltarUs:

; 206  : 	{
; 207  : 		MsgOutput(iUserIndex, lMsg.Get(MSGGET(13, 0)), iAltarNumber);

  001f3	57		 push	 edi
  001f4	68 00 0d 00 00	 push	 3328			; 00000d00H
  001f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001fe	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00203	50		 push	 eax
  00204	53		 push	 ebx
  00205	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0020a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 208  : 		return FALSE;

  0020d	33 c0		 xor	 eax, eax
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	5b		 pop	 ebx

; 230  : }

  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c2 0c 00	 ret	 12			; 0000000cH
?SetAltarUserIndex@CCrywolfAltar@@QAEHHHH@Z ENDP	; CCrywolfAltar::SetAltarUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z PROC ; CCrywolfAltar::GetAltarRemainContractCount, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   : 	int iAltarRemainContractCount = 0;
; 62   : 
; 63   : 	switch ( iClass )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	05 33 ff ff ff	 add	 eax, -205		; ffffff33H
  0000d	83 f8 04	 cmp	 eax, 4
  00010	77 72		 ja	 SHORT $LN2@GetAltarRe
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@GetAltarRe[eax*4]
$LN4@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00019	ba 02 00 00 00	 mov	 edx, 2

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  0001e	b8 00 00 00 00	 mov	 eax, 0

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00023	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00026	0f 48 d0	 cmovs	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 82   : 	return iAltarRemainContractCount;

  00029	8b c2		 mov	 eax, edx

; 83   : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN5@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  0002f	ba 02 00 00 00	 mov	 edx, 2

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00034	b8 00 00 00 00	 mov	 eax, 0

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00039	2b 51 2c	 sub	 edx, DWORD PTR [ecx+44]

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  0003c	0f 48 d0	 cmovs	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 82   : 	return iAltarRemainContractCount;

  0003f	8b c2		 mov	 eax, edx

; 83   : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00045	ba 02 00 00 00	 mov	 edx, 2

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  0004a	b8 00 00 00 00	 mov	 eax, 0

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  0004f	2b 51 48	 sub	 edx, DWORD PTR [ecx+72]

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00052	0f 48 d0	 cmovs	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 82   : 	return iAltarRemainContractCount;

  00055	8b c2		 mov	 eax, edx

; 83   : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN7@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  0005b	ba 02 00 00 00	 mov	 edx, 2

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00060	b8 00 00 00 00	 mov	 eax, 0

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00065	2b 51 64	 sub	 edx, DWORD PTR [ecx+100]

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00068	0f 48 d0	 cmovs	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 82   : 	return iAltarRemainContractCount;

  0006b	8b c2		 mov	 eax, edx

; 83   : }

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
$LN8@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00071	ba 02 00 00 00	 mov	 edx, 2

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00076	b8 00 00 00 00	 mov	 eax, 0
  0007b	2b 91 80 00 00
	00		 sub	 edx, DWORD PTR [ecx+128]
  00081	0f 48 d0	 cmovs	 edx, eax
$LN2@GetAltarRe:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 82   : 	return iAltarRemainContractCount;

  00084	8b c2		 mov	 eax, edx

; 83   : }

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
  0008a	66 90		 npad	 2
$LN22@GetAltarRe:
  0008c	00 00 00 00	 DD	 $LN4@GetAltarRe
  00090	00 00 00 00	 DD	 $LN5@GetAltarRe
  00094	00 00 00 00	 DD	 $LN6@GetAltarRe
  00098	00 00 00 00	 DD	 $LN7@GetAltarRe
  0009c	00 00 00 00	 DD	 $LN8@GetAltarRe
?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ENDP ; CCrywolfAltar::GetAltarRemainContractCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetAltarState@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAltarState@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAltarState, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	int iAltarState = 0;
; 33   : 
; 34   : 	switch ( iClass )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	05 33 ff ff ff	 add	 eax, -205		; ffffff33H
  0000d	83 f8 04	 cmp	 eax, 4
  00010	77 2e		 ja	 SHORT $LN2@GetAltarSt
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@GetAltarSt[eax*4]
$LN4@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 54   : 		return this->m_iAltarState;

  00019	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 53   : 	return iAltarState;

  0001c	8b c2		 mov	 eax, edx

; 54   : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN5@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 54   : 		return this->m_iAltarState;

  00022	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 53   : 	return iAltarState;

  00025	8b c2		 mov	 eax, edx

; 54   : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN6@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 54   : 		return this->m_iAltarState;

  0002b	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 53   : 	return iAltarState;

  0002e	8b c2		 mov	 eax, edx

; 54   : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN7@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 54   : 		return this->m_iAltarState;

  00034	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 53   : 	return iAltarState;

  00037	8b c2		 mov	 eax, edx

; 54   : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN8@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 54   : 		return this->m_iAltarState;

  0003d	8b 51 74	 mov	 edx, DWORD PTR [ecx+116]
$LN2@GetAltarSt:
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 53   : 	return iAltarState;

  00040	8b c2		 mov	 eax, edx

; 54   : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
  00046	66 90		 npad	 2
$LN21@GetAltarSt:
  00048	00 00 00 00	 DD	 $LN4@GetAltarSt
  0004c	00 00 00 00	 DD	 $LN5@GetAltarSt
  00050	00 00 00 00	 DD	 $LN6@GetAltarSt
  00054	00 00 00 00	 DD	 $LN7@GetAltarSt
  00058	00 00 00 00	 DD	 $LN8@GetAltarSt
?GetAltarState@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAltarState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z PROC	; CCrywolfAltar::CheckAltarValidContract, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 170  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00004	ff 75 08	 push	 DWORD PTR _iClass$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 171  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  0000e	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  00015	2b d0		 sub	 edx, eax

; 172  : 
; 173  : 	if ( AltarInfo->GetAltarState() == 1 )

  00017	33 c0		 xor	 eax, eax
  00019	83 7c 96 04 01	 cmp	 DWORD PTR [esi+edx*4+4], 1
  0001e	5e		 pop	 esi
  0001f	0f 94 c0	 sete	 al

; 174  : 		return TRUE;
; 175  : 
; 176  : 	return FALSE;
; 177  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z ENDP	; CCrywolfAltar::CheckAltarValidContract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iAltarObjIndex$ = 8					; size = 4
_iClass$ = 12						; size = 4
?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z PROC	; CCrywolfAltar::SetAltarValidContract, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 147  : 	int iAltarNumber = this->GetAlatarNumber(iClass);

  00005	ff 75 0c	 push	 DWORD PTR _iClass$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber
  0000f	8b f8		 mov	 edi, eax

; 148  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00011	8d 14 fd 00 00
	00 00		 lea	 edx, DWORD PTR [edi*8]
  00018	2b d7		 sub	 edx, edi

; 149  : 
; 150  : 	if ( AltarInfo->GetAltarState() != 2 )

  0001a	83 7c 96 04 02	 cmp	 DWORD PTR [esi+edx*4+4], 2
  0001f	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  00022	0f 85 a4 00 00
	00		 jne	 $LN3@SetAltarVa

; 151  : 		return;
; 152  : 
; 153  : 	if ( AltarInfo->m_dwValidContractTime < GetTickCount() )

  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002e	39 46 18	 cmp	 DWORD PTR [esi+24], eax
  00031	0f 83 95 00 00
	00		 jae	 $LN3@SetAltarVa

; 154  : 	{
; 155  : 		MsgOutput(AltarInfo->m_iUserIndex, lMsg.Get(MSGGET(12, 251)), iAltarNumber);

  00037	57		 push	 edi
  00038	68 fb 0c 00 00	 push	 3323			; 00000cfbH
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00042	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00047	50		 push	 eax
  00048	ff 76 0c	 push	 DWORD PTR [esi+12]
  0004b	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 156  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 252)), gObj[AltarInfo->m_iUserIndex].Name, iAltarNumber);

  00050	69 56 0c 40 27
	00 00		 imul	 edx, DWORD PTR [esi+12], 10048
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00064	83 c0 5d	 add	 eax, 93			; 0000005dH
  00067	57		 push	 edi
  00068	03 c2		 add	 eax, edx
  0006a	50		 push	 eax
  0006b	68 fc 0c 00 00	 push	 3324			; 00000cfcH
  00070	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00075	50		 push	 eax
  00076	6a 02		 push	 2
  00078	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0007d	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 157  : 
; 158  : 		LogAddTD("[ Crywolf ][Altar Op.]  [%s][%s] Set Valid Contract Altar[%d]",

  00082	69 4e 0c 40 27
	00 00		 imul	 ecx, DWORD PTR [esi+12], 10048
  00089	57		 push	 edi
  0008a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00093	50		 push	 eax
  00094	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00097	50		 push	 eax
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@EHCJPHEK@?$FL?5Crywolf?5?$FN?$FLAltar?5Op?4?$FN?5?5?$FL?$CFs?$FN?$FL?$CFs?$FN@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 162  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS3,0,0,0,0,-10);

  000a3	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _iAltarObjIndex$[ebp], 10048
  000aa	6a f6		 push	 -10			; fffffff6H
  000ac	6a 00		 push	 0
  000ae	6a 00		 push	 0
  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 49   : 		this->m_iAltarState = iState;

  000b4	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 162  : 		gObjAddBuffEffect(&gObj[iAltarObjIndex],BUFF_ALTAR_STATUS3,0,0,0,0,-10);

  000bb	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c1	6a 17		 push	 23			; 00000017H
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  000c9	83 c4 40	 add	 esp, 64			; 00000040H
$LN3@SetAltarVa:
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi

; 163  : 	}
; 164  : }

  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z ENDP	; CCrywolfAltar::SetAltarValidContract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z PROC		; CCrywolfAltar::GetAlatarNumber, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   : 	int iAltarNumber = 0;
; 91   : 
; 92   : 	switch ( iClass )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	05 33 ff ff ff	 add	 eax, -205		; ffffff33H
  0000d	83 f8 04	 cmp	 eax, 4
  00010	77 35		 ja	 SHORT $LN2@GetAlatarN
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@GetAlatarN[eax*4]
$LN4@GetAlatarN:

; 93   : 	{
; 94   : 		case 205:
; 95   : 			iAltarNumber = 0;

  00019	33 c9		 xor	 ecx, ecx

; 108  : 			break;
; 109  : 	}
; 110  : 
; 111  : 	return iAltarNumber;

  0001b	8b c1		 mov	 eax, ecx

; 112  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN5@GetAlatarN:

; 96   : 			break;
; 97   : 		case 206:
; 98   : 			iAltarNumber = 1;

  00021	b9 01 00 00 00	 mov	 ecx, 1

; 108  : 			break;
; 109  : 	}
; 110  : 
; 111  : 	return iAltarNumber;

  00026	8b c1		 mov	 eax, ecx

; 112  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN6@GetAlatarN:

; 99   : 			break;
; 100  : 		case 207:
; 101  : 			iAltarNumber = 2;

  0002c	b9 02 00 00 00	 mov	 ecx, 2

; 108  : 			break;
; 109  : 	}
; 110  : 
; 111  : 	return iAltarNumber;

  00031	8b c1		 mov	 eax, ecx

; 112  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN7@GetAlatarN:

; 102  : 			break;
; 103  : 		case 208:
; 104  : 			iAltarNumber = 3;

  00037	b9 03 00 00 00	 mov	 ecx, 3

; 108  : 			break;
; 109  : 	}
; 110  : 
; 111  : 	return iAltarNumber;

  0003c	8b c1		 mov	 eax, ecx

; 112  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN8@GetAlatarN:

; 105  : 			break;
; 106  : 		case 209:
; 107  : 			iAltarNumber = 4;

  00042	b9 04 00 00 00	 mov	 ecx, 4
$LN2@GetAlatarN:

; 108  : 			break;
; 109  : 	}
; 110  : 
; 111  : 	return iAltarNumber;

  00047	8b c1		 mov	 eax, ecx

; 112  : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
  0004d	0f 1f 00	 npad	 3
$LN11@GetAlatarN:
  00050	00 00 00 00	 DD	 $LN4@GetAlatarN
  00054	00 00 00 00	 DD	 $LN5@GetAlatarN
  00058	00 00 00 00	 DD	 $LN6@GetAlatarN
  0005c	00 00 00 00	 DD	 $LN7@GetAlatarN
  00060	00 00 00 00	 DD	 $LN8@GetAlatarN
?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ENDP		; CCrywolfAltar::GetAlatarNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ
_TEXT	SEGMENT
?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ PROC	; CCrywolfAltar::SetAllAltarObjectIndex, COMDAT
; _this$ = ecx

; 277  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 278  : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  00003	33 ff		 xor	 edi, edi
  00005	bb cd 00 00 00	 mov	 ebx, 205		; 000000cdH
  0000a	33 f6		 xor	 esi, esi
  0000c	0f 1f 40 00	 npad	 4
$LL4@SetAllAlta:

; 279  : 	{
; 280  : 		if ( !gObjIsConnected(i) )

  00010	57		 push	 edi
  00011	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00016	83 c4 04	 add	 esp, 4
  00019	85 c0		 test	 eax, eax
  0001b	74 37		 je	 SHORT $LN2@SetAllAlta

; 281  : 			continue;
; 282  : 
; 283  : 		if ( gObj[i].MapNumber != MAP_INDEX_CRYWOLF_FIRSTZONE )

  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00022	80 bc 06 23 01
	00 00 22	 cmp	 BYTE PTR [esi+eax+291], 34 ; 00000022H
  0002a	75 28		 jne	 SHORT $LN2@SetAllAlta

; 284  : 			continue;
; 285  : 
; 286  : 		if ( CRYWOLF_ALTAR_CLASS_RANGE(gObj[i].Class ) != FALSE )

  0002c	0f b7 8c 06 90
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+144]
  00034	66 3b cb	 cmp	 cx, bx
  00037	72 1b		 jb	 SHORT $LN2@SetAllAlta
  00039	b8 d1 00 00 00	 mov	 eax, 209		; 000000d1H
  0003e	66 3b c1	 cmp	 ax, cx
  00041	1b c0		 sbb	 eax, eax
  00043	83 c0 01	 add	 eax, 1
  00046	74 0c		 je	 SHORT $LN2@SetAllAlta

; 287  : 			g_CrywolfNPC_Altar.SetAltarObjIndex(gObj[i].Class, i);

  00048	57		 push	 edi
  00049	51		 push	 ecx
  0004a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0004f	e8 00 00 00 00	 call	 ?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarObjIndex
$LN2@SetAllAlta:

; 278  : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  00054	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0005a	47		 inc	 edi
  0005b	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  00061	7c ad		 jl	 SHORT $LL4@SetAllAlta

; 288  : 	}
; 289  : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ ENDP	; CCrywolfAltar::SetAllAltarObjectIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
_iObjIndex$ = 12					; size = 4
?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z PROC		; CCrywolfAltar::SetAltarObjIndex, COMDAT
; _this$ = ecx

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 268  : 	int iAltarNumber = this->GetAlatarNumber(iClass);
; 269  : 	this->ResetAltar(iClass);

  00004	ff 75 08	 push	 DWORD PTR _iClass$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ?ResetAltar@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::ResetAltar
  0000e	ff 75 08	 push	 DWORD PTR _iClass$[ebp]
  00011	8b cf		 mov	 ecx, edi
  00013	e8 00 00 00 00	 call	 ?GetAlatarNumber@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAlatarNumber

; 270  : 	CCrywolfAltarInfo * AltarInfo = &this->m_AltarInfo[iAltarNumber];

  00018	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0001f	2b c8		 sub	 ecx, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 59   : 		this->m_iAltarIndex = iAltarIndex;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _iObjIndex$[ebp]
  00024	89 44 8f 08	 mov	 DWORD PTR [edi+ecx*4+8], eax
  00028	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 272  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?SetAltarObjIndex@CCrywolfAltar@@QAEXHH@Z ENDP		; CCrywolfAltar::SetAltarObjIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z
_TEXT	SEGMENT
tv277 = 8						; size = 4
_lpUserObj$1$ = 8					; size = 4
_iUserIndex$1$ = 8					; size = 4
_iIndex$ = 8						; size = 4
?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z PROC		; CCrywolfAltar::CrywolfAltarAct, COMDAT
; _this$ = ecx

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 409  : 	if ( !gObjIsConnected(iIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	0f 84 22 01 00
	00		 je	 $LN4@CrywolfAlt

; 410  : 		return;
; 411  : 
; 412  : 	if ( gObj[iIndex].Type != OBJ_NPC || CRYWOLF_ALTAR_CLASS_RANGE(gObj[iIndex].Class) == FALSE )

  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	53		 push	 ebx
  00021	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  00027	80 7c 03 50 03	 cmp	 BYTE PTR [ebx+eax+80], 3
  0002c	0f 85 0a 01 00
	00		 jne	 $LN17@CrywolfAlt
  00032	0f b7 8c 03 90
	00 00 00	 movzx	 ecx, WORD PTR [ebx+eax+144]
  0003a	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0003f	66 3b c8	 cmp	 cx, ax
  00042	0f 82 f4 00 00
	00		 jb	 $LN17@CrywolfAlt
  00048	b8 d1 00 00 00	 mov	 eax, 209		; 000000d1H
  0004d	66 3b c1	 cmp	 ax, cx
  00050	1b c0		 sbb	 eax, eax
  00052	83 c0 01	 add	 eax, 1
  00055	0f 84 e1 00 00
	00		 je	 $LN17@CrywolfAlt

; 413  : 		return;
; 414  : 
; 415  : 	int iUserIndex = this->GetAltarUserIndex(gObj[iIndex].Class);

  0005b	51		 push	 ecx
  0005c	8b cf		 mov	 ecx, edi
  0005e	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex

; 416  : 
; 417  : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  00063	50		 push	 eax
  00064	89 45 08	 mov	 DWORD PTR _iUserIndex$1$[ebp], eax
  00067	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0006c	83 c4 04	 add	 esp, 4
  0006f	85 c0		 test	 eax, eax
  00071	75 27		 jne	 SHORT $LN5@CrywolfAlt

; 418  : 	{
; 419  : 		if ( iUserIndex != -1 )

  00073	83 7d 08 ff	 cmp	 DWORD PTR _iUserIndex$1$[ebp], -1
  00077	0f 84 bf 00 00
	00		 je	 $LN17@CrywolfAlt

; 420  : 		{
; 421  : 			this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN19@CrywolfAlt:
  00082	0f b7 84 03 90
	00 00 00	 movzx	 eax, WORD PTR [ebx+eax+144]

; 447  : 			}
; 448  : 		}
; 449  : 		else
; 450  : 		{
; 451  : 			this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);
; 452  : 		}
; 453  : 	}
; 454  : 	else
; 455  : 	{
; 456  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0008a	8b cf		 mov	 ecx, edi
  0008c	50		 push	 eax
  0008d	56		 push	 esi
  0008e	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
  00093	5b		 pop	 ebx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 457  : 	}
; 458  : }

  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
$LN5@CrywolfAlt:

; 422  : 		}
; 423  : 
; 424  : 		return;
; 425  : 	}
; 426  : 
; 427  : 	if ( gObjIsConnected(&gObj[iUserIndex]) == FALSE )

  0009a	69 4d 08 40 27
	00 00		 imul	 ecx, DWORD PTR _iUserIndex$1$[ebp], 10048
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a6	03 c1		 add	 eax, ecx
  000a8	89 4d 08	 mov	 DWORD PTR tv277[ebp], ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000b1	83 c4 04	 add	 esp, 4
  000b4	85 c0		 test	 eax, eax

; 428  : 	{
; 429  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bb	74 c5		 je	 SHORT $LN19@CrywolfAlt

; 430  : 		return;
; 431  : 	}
; 432  : 
; 433  : 	LPOBJ lpObj = &gObj[iIndex];

  000bd	03 d8		 add	 ebx, eax

; 434  : 	LPOBJ lpUserObj = &gObj[iUserIndex];

  000bf	03 45 08	 add	 eax, DWORD PTR tv277[ebp]
  000c2	89 45 08	 mov	 DWORD PTR _lpUserObj$1$[ebp], eax

; 435  : 
; 436  : 	if ( lpUserObj->Live != FALSE && lpUserObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE )

  000c5	80 78 51 00	 cmp	 BYTE PTR [eax+81], 0
  000c9	74 61		 je	 SHORT $LN8@CrywolfAlt
  000cb	80 b8 23 01 00
	00 22		 cmp	 BYTE PTR [eax+291], 34	; 00000022H
  000d2	75 58		 jne	 SHORT $LN8@CrywolfAlt

; 437  : 	{
; 438  : 		if ( abs(lpObj->Y-lpUserObj->Y) <= 0 && abs(lpObj->X - lpUserObj->X) <= 0 )

  000d4	0f b6 88 21 01
	00 00		 movzx	 ecx, BYTE PTR [eax+289]
  000db	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  000e2	2b c1		 sub	 eax, ecx
  000e4	99		 cdq
  000e5	33 c2		 xor	 eax, edx
  000e7	2b c2		 sub	 eax, edx
  000e9	85 c0		 test	 eax, eax
  000eb	7f 3f		 jg	 SHORT $LN8@CrywolfAlt
  000ed	8b 45 08	 mov	 eax, DWORD PTR _lpUserObj$1$[ebp]
  000f0	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  000f7	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  000fe	2b c1		 sub	 eax, ecx
  00100	99		 cdq
  00101	33 c2		 xor	 eax, edx
  00103	2b c2		 sub	 eax, edx
  00105	85 c0		 test	 eax, eax
  00107	7f 23		 jg	 SHORT $LN8@CrywolfAlt

; 439  : 		{
; 440  : 			if ( this->CheckAltarValidContract(gObj[iIndex].Class) != FALSE )

  00109	0f b7 9b 90 00
	00 00		 movzx	 ebx, WORD PTR [ebx+144]
  00110	8b cf		 mov	 ecx, edi
  00112	53		 push	 ebx
  00113	e8 00 00 00 00	 call	 ?CheckAltarValidContract@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::CheckAltarValidContract
  00118	85 c0		 test	 eax, eax
  0011a	75 20		 jne	 SHORT $LN17@CrywolfAlt

; 441  : 			{
; 442  : 
; 443  : 			}
; 444  : 			else
; 445  : 			{
; 446  : 				this->SetAltarValidContract(iIndex, gObj[iIndex].Class);

  0011c	53		 push	 ebx
  0011d	56		 push	 esi
  0011e	8b cf		 mov	 ecx, edi
  00120	e8 00 00 00 00	 call	 ?SetAltarValidContract@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::SetAltarValidContract
  00125	5b		 pop	 ebx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi

; 457  : 	}
; 458  : }

  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN8@CrywolfAlt:

; 447  : 			}
; 448  : 		}
; 449  : 		else
; 450  : 		{
; 451  : 			this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);
; 452  : 		}
; 453  : 	}
; 454  : 	else
; 455  : 	{
; 456  : 		this->ResetAltarUserIndex(iIndex, gObj[iIndex].Class);

  0012c	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00133	8b cf		 mov	 ecx, edi
  00135	50		 push	 eax
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 ?ResetAltarUserIndex@CCrywolfAltar@@QAEXHH@Z ; CCrywolfAltar::ResetAltarUserIndex
$LN17@CrywolfAlt:
  0013c	5b		 pop	 ebx
$LN4@CrywolfAlt:
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi

; 457  : 	}
; 458  : }

  0013f	5d		 pop	 ebp
  00140	c2 04 00	 ret	 4
?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z ENDP		; CCrywolfAltar::CrywolfAltarAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ??1CCrywolfAltar@@UAE@XZ
_TEXT	SEGMENT
??1CCrywolfAltar@@UAE@XZ PROC				; CCrywolfAltar::~CCrywolfAltar, COMDAT
; _this$ = ecx

; 24   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrywolfAltar@@6B@

; 25   : 	return;
; 26   : }

  00006	c3		 ret	 0
??1CCrywolfAltar@@UAE@XZ ENDP				; CCrywolfAltar::~CCrywolfAltar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ??0CCrywolfAltar@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfAltar@@QAE@XZ PROC				; CCrywolfAltar::CCrywolfAltar, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrywolfAltar@@6B@

; 21   : }

  00006	8b c1		 mov	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h

; 32   : 		this->m_iAltarState = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 33   : 		this->m_iUserIndex = -1;

  0000f	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 34   : 		this->m_iAltarIndex = -1;

  00016	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 35   : 		this->m_iContractCount = 0;

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 36   : 		this->m_dwAppliedContractTime =0 ;

  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 37   : 		this->m_dwValidContractTime =0 ;

  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 38   : 		this->m_dwLastValidContractTime =0 ;

  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00040	c7 41 28 ff ff
	ff ff		 mov	 DWORD PTR [ecx+40], -1
  00047	c7 41 24 ff ff
	ff ff		 mov	 DWORD PTR [ecx+36], -1
  0004e	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00055	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  0005c	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00063	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0006a	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00071	c7 41 44 ff ff
	ff ff		 mov	 DWORD PTR [ecx+68], -1
  00078	c7 41 40 ff ff
	ff ff		 mov	 DWORD PTR [ecx+64], -1
  0007f	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  00086	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  0008d	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00094	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  0009b	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
  000a2	c7 41 60 ff ff
	ff ff		 mov	 DWORD PTR [ecx+96], -1
  000a9	c7 41 5c ff ff
	ff ff		 mov	 DWORD PTR [ecx+92], -1
  000b0	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0
  000b7	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0
  000be	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
  000c5	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  000cc	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
  000d3	c7 41 7c ff ff
	ff ff		 mov	 DWORD PTR [ecx+124], -1
  000da	c7 41 78 ff ff
	ff ff		 mov	 DWORD PTR [ecx+120], -1
  000e1	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0
  000eb	c7 81 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+132], 0
  000f5	c7 81 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+136], 0
  000ff	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp

; 21   : }

  00109	c3		 ret	 0
??0CCrywolfAltar@@QAE@XZ ENDP				; CCrywolfAltar::CCrywolfAltar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z
_TEXT	SEGMENT
_iAltarIndex$ = 8					; size = 4
?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z PROC		; CCrywolfAltarInfo::SetAltarIndex, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 		this->m_iAltarIndex = iAltarIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iAltarIndex$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 60   : 	}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAltarIndex@CCrywolfAltarInfo@@QAEXH@Z ENDP		; CCrywolfAltarInfo::SetAltarIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ?GetAltarState@CCrywolfAltarInfo@@QAEHXZ
_TEXT	SEGMENT
?GetAltarState@CCrywolfAltarInfo@@QAEHXZ PROC		; CCrywolfAltarInfo::GetAltarState, COMDAT
; _this$ = ecx

; 54   : 		return this->m_iAltarState;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 55   : 	}

  00002	c3		 ret	 0
?GetAltarState@CCrywolfAltarInfo@@QAEHXZ ENDP		; CCrywolfAltarInfo::GetAltarState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z PROC		; CCrywolfAltarInfo::SetAltarState, COMDAT
; _this$ = ecx

; 48   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 		this->m_iAltarState = iState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 50   : 	}

  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetAltarState@CCrywolfAltarInfo@@QAEXH@Z ENDP		; CCrywolfAltarInfo::SetAltarState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ
_TEXT	SEGMENT
?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ PROC	; CCrywolfAltarInfo::GetRemainContractCount, COMDAT
; _this$ = ecx

; 43   : 		int iRemainCount = MAX_ALTAR_CONTRACTS - this->m_iContractCount;

  00000	b8 02 00 00 00	 mov	 eax, 2
  00005	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]

; 44   : 		return (iRemainCount<0)?0:iRemainCount;

  00008	b9 00 00 00 00	 mov	 ecx, 0
  0000d	0f 48 c1	 cmovs	 eax, ecx

; 45   : 	}

  00010	c3		 ret	 0
?GetRemainContractCount@CCrywolfAltarInfo@@QAEHXZ ENDP	; CCrywolfAltarInfo::GetRemainContractCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ?Reset@CCrywolfAltarInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfAltarInfo@@QAEXXZ PROC			; CCrywolfAltarInfo::Reset, COMDAT
; _this$ = ecx

; 32   : 		this->m_iAltarState = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 33   : 		this->m_iUserIndex = -1;

  00006	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 34   : 		this->m_iAltarIndex = -1;

  0000d	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 35   : 		this->m_iContractCount = 0;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 36   : 		this->m_dwAppliedContractTime =0 ;

  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 37   : 		this->m_dwValidContractTime =0 ;

  00022	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 38   : 		this->m_dwLastValidContractTime =0 ;

  00029	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 39   : 	}

  00030	c3		 ret	 0
?Reset@CCrywolfAltarInfo@@QAEXXZ ENDP			; CCrywolfAltarInfo::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.h
;	COMDAT ??0CCrywolfAltarInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfAltarInfo@@QAE@XZ PROC			; CCrywolfAltarInfo::CCrywolfAltarInfo, COMDAT
; _this$ = ecx

; 28   : 
; 29   : 
; 30   : 	void Reset()
; 31   : 	{
; 32   : 		this->m_iAltarState = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 25   : 	{
; 26   : 		this->Reset();
; 27   : 	}

  00006	8b c1		 mov	 eax, ecx

; 33   : 		this->m_iUserIndex = -1;

  00008	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 34   : 		this->m_iAltarIndex = -1;

  0000f	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 35   : 		this->m_iContractCount = 0;

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 36   : 		this->m_dwAppliedContractTime =0 ;

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 37   : 		this->m_dwValidContractTime =0 ;

  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 38   : 		this->m_dwLastValidContractTime =0 ;

  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 25   : 	{
; 26   : 		this->Reset();
; 27   : 	}

  00032	c3		 ret	 0
??0CCrywolfAltarInfo@@QAE@XZ ENDP			; CCrywolfAltarInfo::CCrywolfAltarInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfaltar.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
