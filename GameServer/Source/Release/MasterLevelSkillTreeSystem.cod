; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MasterLevelSkillTreeSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CHARACTER_TABLE@@3PAU_stCharacterTable@@A	; CHARACTER_TABLE
_DATA	SEGMENT
?CHARACTER_TABLE@@3PAU_stCharacterTable@@A DD 02H	; CHARACTER_TABLE
	DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	02H
	DD	010H
	DD	03H
	DD	020H
	DD	04H
	DD	08H
	DD	05H
	DD	040H
	DD	06H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CMasterLevelSkillTreeSystem@@QAE@XZ		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
PUBLIC	??1CMasterLevelSkillTreeSystem@@UAE@XZ		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
PUBLIC	?Init@CMasterLevelSkillTreeSystem@@QAEXXZ	; CMasterLevelSkillTreeSystem::Init
PUBLIC	?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z	; CMasterLevelSkillTreeSystem::Load
PUBLIC	?InitPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CMasterLevelSkillTreeSystem::InitPassiveSkillData
PUBLIC	?CalcPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CalcPassiveSkillData
PUBLIC	?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition
PUBLIC	?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
PUBLIC	?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
PUBLIC	?IsExistMLSBasedSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::IsExistMLSBasedSkill
PUBLIC	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
PUBLIC	?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
PUBLIC	?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
PUBLIC	?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
PUBLIC	?RunningSkill_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ; CMasterLevelSkillTreeSystem::RunningSkill_MLS
PUBLIC	?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
PUBLIC	?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing
PUBLIC	?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel
PUBLIC	?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
PUBLIC	?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
PUBLIC	?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
PUBLIC	?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
PUBLIC	?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
PUBLIC	?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
PUBLIC	?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
PUBLIC	?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
PUBLIC	?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
PUBLIC	?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
PUBLIC	?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
PUBLIC	?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
PUBLIC	?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
PUBLIC	?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
PUBLIC	?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
PUBLIC	?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
PUBLIC	?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
PUBLIC	?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
PUBLIC	?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
PUBLIC	?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
PUBLIC	?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
PUBLIC	?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
PUBLIC	?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
PUBLIC	?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
PUBLIC	?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
PUBLIC	?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
PUBLIC	?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
PUBLIC	?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst
PUBLIC	?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
PUBLIC	?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
PUBLIC	?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
PUBLIC	?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
PUBLIC	?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
PUBLIC	?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
PUBLIC	?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
PUBLIC	?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
PUBLIC	?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
PUBLIC	?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
PUBLIC	?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
PUBLIC	?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
PUBLIC	?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
PUBLIC	?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
PUBLIC	?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireScream
PUBLIC	?MLS_WeaponSkillDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillDel
PUBLIC	?MLS_WeaponSkillAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillAdd
PUBLIC	?CheckUsableWeaponSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckUsableWeaponSkill
PUBLIC	?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
PUBLIC	?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
PUBLIC	?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
PUBLIC	?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
PUBLIC	?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
PUBLIC	?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
PUBLIC	?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
PUBLIC	?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure
PUBLIC	?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
PUBLIC	?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless
PUBLIC	?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
PUBLIC	?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
PUBLIC	?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
PUBLIC	?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
PUBLIC	?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
PUBLIC	?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
PUBLIC	?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
PUBLIC	?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
PUBLIC	?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
PUBLIC	?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
PUBLIC	?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
PUBLIC	?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
PUBLIC	?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
PUBLIC	?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
PUBLIC	?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
PUBLIC	?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetRequireMLPoint
PUBLIC	?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
PUBLIC	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
PUBLIC	?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
PUBLIC	?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
PUBLIC	?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel
PUBLIC	?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
PUBLIC	?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
PUBLIC	?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
PUBLIC	?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2
PUBLIC	?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
PUBLIC	?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
PUBLIC	?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
PUBLIC	?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
PUBLIC	?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
PUBLIC	?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
PUBLIC	?CheckMasterSkillPoint@CMasterLevelSkillTreeSystem@@QAEDHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterSkillPoint
PUBLIC	?ResetMasterSkill@CMasterLevelSkillTreeSystem@@QAEDHH@Z ; CMasterLevelSkillTreeSystem::ResetMasterSkill
PUBLIC	?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z ; CMasterLevelSkillTreeSystem::CheckSkillInTree
PUBLIC	??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z	; CMasterLevelSkillTreeSystem::`scalar deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`vftable'
PUBLIC	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
PUBLIC	??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@ ; `string'
PUBLIC	??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ ; `string'
PUBLIC	??_C@_0BM@IBJJMKHM@Skill?2MasterSkillEffect?4lua?$AA@ ; `string'
PUBLIC	??_C@_03LHPBPOFD@i?$DOd?$AA@			; `string'
PUBLIC	??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@	; `string'
PUBLIC	??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@	; `string'
PUBLIC	??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@	; `string'
PUBLIC	??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ ; `string'
PUBLIC	??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@	; `string'
PUBLIC	??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@	; `string'
PUBLIC	??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@		; `string'
PUBLIC	??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@	; `string'
PUBLIC	??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@		; `string'
PUBLIC	??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@	; `string'
PUBLIC	??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@	; `string'
PUBLIC	??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ ; `string'
PUBLIC	??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@	; `string'
PUBLIC	??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@	; `string'
PUBLIC	??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ ; `string'
PUBLIC	??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@	; `string'
PUBLIC	??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@	; `string'
PUBLIC	??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@	; `string'
PUBLIC	??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@	; `string'
PUBLIC	??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@	; `string'
PUBLIC	??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ ; `string'
PUBLIC	??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@	; `string'
PUBLIC	??_C@_0BB@LFNDNAPP@FN_LuaBloodStorm?$AA@	; `string'
PUBLIC	??_C@_0BC@BBGGKCGM@FN_LuaEarthPrison?$AA@	; `string'
PUBLIC	??_C@_0BC@CIHPMOKL@FN_LuaPoisonArrow?$AA@	; `string'
PUBLIC	??_C@_0BC@JFEINDGN@FN_LuaIronDefense?$AA@	; `string'
PUBLIC	??_C@_0BN@EBCBIPEA@FN_LuaGetBlockingRateFighter?$AA@ ; `string'
PUBLIC	??_C@_0CC@GIMADFJA@FN_LuaGetAttackSuccessRateFighte@ ; `string'
PUBLIC	??_C@_0BO@PHDDECBO@FN_LuaGetManAttackRateFighter?$AA@ ; `string'
PUBLIC	??_C@_0BG@GCMGLIBN@FN_LuaGetMaxSDFighter?$AA@	; `string'
PUBLIC	??_C@_0BM@DMCLBHIL@FN_LuaGetMaxLifeManaFighter?$AA@ ; `string'
PUBLIC	??_C@_0CB@MICAEJNJ@FN_LuaGetIncreaseBlockingFighter@ ; `string'
PUBLIC	??_C@_0BN@OLMOMCNF@FN_LuaGetIncreaseStatFighter?$AA@ ; `string'
PUBLIC	??_C@_0BG@HIBANFAN@FN_LuaGetMaxAGFighter?$AA@	; `string'
PUBLIC	??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@	; `string'
PUBLIC	??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ ; `string'
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ ; `string'
PUBLIC	??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ ; `string'
PUBLIC	??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ ; `string'
PUBLIC	??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ ; `string'
PUBLIC	??_C@_0HK@DAPGGDKB@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ ; `string'
PUBLIC	??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ ; `string'
PUBLIC	??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ ; `string'
PUBLIC	??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@		; `string'
PUBLIC	??_C@_01INIBCBCB@f?$AA@				; `string'
PUBLIC	??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ ; `string'
PUBLIC	??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ ; `string'
PUBLIC	??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ ; `string'
PUBLIC	??_R4CMasterLevelSkillTreeSystem@@6B@		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMasterLevelSkillTreeSystem@@@8		; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
PUBLIC	??_R3CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMasterLevelSkillTreeSystem@@8		; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8	; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4056800000000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
PUBLIC	__real@bf800000
PUBLIC	__real@c0a00000
PUBLIC	__xmm@00000000000000003f80000000000000
PUBLIC	__xmm@000000000000000041a0000000000000
PUBLIC	__xmm@00000000422000000000000000000000
PUBLIC	__xmm@43a00000000000000000000043aa0000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??0MULua@@QAE@XZ:PROC				; MULua::MULua
EXTRN	??1MULua@@QAE@XZ:PROC				; MULua::~MULua
EXTRN	?Release@MULua@@QAEXXZ:PROC			; MULua::Release
EXTRN	?DoFile@MULua@@QAE_NPBD@Z:PROC			; MULua::DoFile
EXTRN	?GetLua@MULua@@QAEPAUlua_State@@XZ:PROC		; MULua::GetLua
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z:PROC ; CMagicDamage::SkillGetRequireEnergy
EXTRN	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z:PROC ; CMagicDamage::SkillGetRequireClass
EXTRN	?GetSkillType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillType
EXTRN	?GetSkillDistance@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillDistance
EXTRN	?GetBrandOfSkill@CMagicDamage@@QAEGH@Z:PROC	; CMagicDamage::GetBrandOfSkill
EXTRN	?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z:PROC ; CMagicDamage::GetNormalBrandOfSkill
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
EXTRN	?GetRequireStrength@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetRequireStrength
EXTRN	?GetRequireDexterity@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetRequireDexterity
EXTRN	?GetSkillRank@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillRank
EXTRN	?GetSkillGroup@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillGroup
EXTRN	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z:PROC	; CMagicDamage::IsItemAttachedSkill
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?CloseClient@@YAXH@Z:PROC			; CloseClient
EXTRN	?IsMagic@CMagicInf@@QAEHXZ:PROC			; CMagicInf::IsMagic
EXTRN	?Clear@CMagicInf@@QAEXXZ:PROC			; CMagicInf::Clear
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	?UpdateMasterSkill@CMagicInf@@QAEHHE@Z:PROC	; CMagicInf::UpdateMasterSkill
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?IncAgro@TMonsterAIAgro@@QAEHHH@Z:PROC		; TMonsterAIAgro::IncAgro
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?GCResultSend@@YAXHEE@Z:PROC			; GCResultSend
EXTRN	?GCMagicListOneSend@@YAXHDGEEE@Z:PROC		; GCMagicListOneSend
EXTRN	?GCMagicListOneDelSend@@YAXHDGEEE@Z:PROC	; GCMagicListOneDelSend
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCMonkDarkSideTargetSelect@@YAXPAUPMSG_MONK_DARKSIDE_RECV@@H@Z:PROC ; GCMonkDarkSideTargetSelect
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z:PROC ; gObjAddAttackProcMsgSendDelay
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; retCalcSkillResistance
EXTRN	?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z:PROC ; gObjAttack
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?SkillTestFrustrum@@YAHHHH@Z:PROC		; SkillTestFrustrum
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?gCheckSkillDistance@@YAHHHH@Z:PROC		; gCheckSkillDistance
EXTRN	??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z:PROC	; CMasterLevelSkillTreeSystem::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ:PROC	; g_Generic_Call
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z:PROC ; gObjClearBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjCheckPowerfulEffect
EXTRN	?GetCastleState@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCastleState
EXTRN	?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z:PROC	; CObjUseSkill::SkillMonsterCall
EXTRN	?SkillBloodStorm@CObjUseSkill@@QAEXHHPAVCMagicInf@@H@Z:PROC ; CObjUseSkill::SkillBloodStorm
EXTRN	?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; DecPartyMemberHPandMP
EXTRN	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z:PROC	; CSkillHitBox::HitCheck
EXTRN	?VectorRotate@@YAXQBM0QAM@Z:PROC		; VectorRotate
EXTRN	?AngleMatrix@@YAXPBMPAY03M@Z:PROC		; AngleMatrix
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?PHeadSubSetW@@YAXPAEEEH@Z:PROC			; PHeadSubSetW
EXTRN	?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z:PROC ; BuffSkillEffect::GetEffect
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIatan2:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?g_EnergyCheckOff@@3HA:DWORD			; g_EnergyCheckOff
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A:BYTE ; g_SkillAdditionInfo
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?SkillSpearHitBox@@3VCSkillHitBox@@A:BYTE	; SkillSpearHitBox
EXTRN	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A:BYTE ; SkillElectricSparkHitBox
EXTRN	?g_BuffSkillEffect@@3VBuffSkillEffect@@A:BYTE	; g_BuffSkillEffect
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A DB 055ccH DUP (?) ; g_MasterSkillSystem
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_MasterSkillSystem$initializer$@@3P6AXXZA DD FLAT:??__Eg_MasterSkillSystem@@YAXXZ ; g_MasterSkillSystem$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@43a00000000000000000000043aa0000
CONST	SEGMENT
__xmm@43a00000000000000000000043aa0000 DB 00H, 00H, 0aaH, 'C', 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0a0H, 'C'
CONST	ENDS
;	COMDAT __xmm@00000000422000000000000000000000
CONST	SEGMENT
__xmm@00000000422000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, ' B', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000000000000000041a0000000000000
CONST	SEGMENT
__xmm@000000000000000041a0000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 0a0H
	DB	'A', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000003f80000000000000
CONST	SEGMENT
__xmm@00000000000000003f80000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R2CMasterLevelSkillTreeSystem@@8 DD FLAT:??_R1A@?0A@EA@CMasterLevelSkillTreeSystem@@8 ; CMasterLevelSkillTreeSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	SEGMENT
??_R3CMasterLevelSkillTreeSystem@@8 DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMasterLevelSkillTreeSystem@@@8
data$r	SEGMENT
??_R0?AVCMasterLevelSkillTreeSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CMasterLevelSkillTreeSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMasterLevelSkillTreeSystem@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMasterLevelSkillTreeSystem@@6B@
rdata$r	SEGMENT
??_R4CMasterLevelSkillTreeSystem@@6B@ DD 00H		; CMasterLevelSkillTreeSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMasterLevelSkillTreeSystem@@@8
	DD	FLAT:??_R3CMasterLevelSkillTreeSystem@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
CONST	SEGMENT
??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@ DB '['
	DB	'%s][%s] SkillHellFire2 error on start', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
CONST	SEGMENT
??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@ DB '[Invali'
	DB	'dTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , '
	DB	'AccountID : %s ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
CONST	SEGMENT
??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@ DB '['
	DB	'GetSkillAttackDamage] fail!!! - %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01INIBCBCB@f?$AA@
CONST	SEGMENT
??_C@_01INIBCBCB@f?$AA@ DB 'f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
CONST	SEGMENT
??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@ DB '%%.%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point'
	DB	' : %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetRequireMLPoint - Invalid Skill Code : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
CONST	SEGMENT
??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@ DB '[MasterLe'
	DB	'velSkillTreeSystem] GetRequireMLPoint - Invalid Class Code  :'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
CONST	SEGMENT
??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@ DB '['
	DB	'%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : '
	DB	'%d)(ChangeUp: %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@DAPGGDKB@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
CONST	SEGMENT
??_C@_0HK@DAPGGDKB@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@ DB '[Invali'
	DB	'dTargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS]['
	DB	'AT_MSKILL_RF_DRAGONRORE1] Index :%d , AccountID : %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
CONST	SEGMENT
??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@ DB '['
	DB	'MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Leve'
	DB	'l:%d MLPoint:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
CONST	SEGMENT
??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@ DB '['
	DB	'MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
CONST	SEGMENT
??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@ DB '['
	DB	'MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic L'
	DB	'ist', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
CONST	SEGMENT
??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
CONST	SEGMENT
??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@ DB '[Mas'
	DB	'terLevelSkillTreeSystem] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
CONST	SEGMENT
??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Can''t Open %s ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
CONST	SEGMENT
??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@ DB '[Master'
	DB	'LevelSkillTreeSystem] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
CONST	SEGMENT
??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@ DB 'FN_LuaGetPercent5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HIBANFAN@FN_LuaGetMaxAGFighter?$AA@
CONST	SEGMENT
??_C@_0BG@HIBANFAN@FN_LuaGetMaxAGFighter?$AA@ DB 'FN_LuaGetMaxAGFighter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OLMOMCNF@FN_LuaGetIncreaseStatFighter?$AA@
CONST	SEGMENT
??_C@_0BN@OLMOMCNF@FN_LuaGetIncreaseStatFighter?$AA@ DB 'FN_LuaGetIncreas'
	DB	'eStatFighter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MICAEJNJ@FN_LuaGetIncreaseBlockingFighter@
CONST	SEGMENT
??_C@_0CB@MICAEJNJ@FN_LuaGetIncreaseBlockingFighter@ DB 'FN_LuaGetIncreas'
	DB	'eBlockingFighter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DMCLBHIL@FN_LuaGetMaxLifeManaFighter?$AA@
CONST	SEGMENT
??_C@_0BM@DMCLBHIL@FN_LuaGetMaxLifeManaFighter?$AA@ DB 'FN_LuaGetMaxLifeM'
	DB	'anaFighter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GCMGLIBN@FN_LuaGetMaxSDFighter?$AA@
CONST	SEGMENT
??_C@_0BG@GCMGLIBN@FN_LuaGetMaxSDFighter?$AA@ DB 'FN_LuaGetMaxSDFighter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PHDDECBO@FN_LuaGetManAttackRateFighter?$AA@
CONST	SEGMENT
??_C@_0BO@PHDDECBO@FN_LuaGetManAttackRateFighter?$AA@ DB 'FN_LuaGetManAtt'
	DB	'ackRateFighter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GIMADFJA@FN_LuaGetAttackSuccessRateFighte@
CONST	SEGMENT
??_C@_0CC@GIMADFJA@FN_LuaGetAttackSuccessRateFighte@ DB 'FN_LuaGetAttackS'
	DB	'uccessRateFighter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EBCBIPEA@FN_LuaGetBlockingRateFighter?$AA@
CONST	SEGMENT
??_C@_0BN@EBCBIPEA@FN_LuaGetBlockingRateFighter?$AA@ DB 'FN_LuaGetBlockin'
	DB	'gRateFighter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JFEINDGN@FN_LuaIronDefense?$AA@
CONST	SEGMENT
??_C@_0BC@JFEINDGN@FN_LuaIronDefense?$AA@ DB 'FN_LuaIronDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CIHPMOKL@FN_LuaPoisonArrow?$AA@
CONST	SEGMENT
??_C@_0BC@CIHPMOKL@FN_LuaPoisonArrow?$AA@ DB 'FN_LuaPoisonArrow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BBGGKCGM@FN_LuaEarthPrison?$AA@
CONST	SEGMENT
??_C@_0BC@BBGGKCGM@FN_LuaEarthPrison?$AA@ DB 'FN_LuaEarthPrison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LFNDNAPP@FN_LuaBloodStorm?$AA@
CONST	SEGMENT
??_C@_0BB@LFNDNAPP@FN_LuaBloodStorm?$AA@ DB 'FN_LuaBloodStorm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
CONST	SEGMENT
??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@ DB 'FN_LuaGetAttackSpeed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
CONST	SEGMENT
??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@ DB 'FN_LuaGetSkillDamage'
	DB	'Min2', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
CONST	SEGMENT
??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@ DB 'FN_LuaGetManaIncRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
CONST	SEGMENT
??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@ DB 'FN_LuaGetControlAttack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
CONST	SEGMENT
??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@ DB 'FN_LuaGetChangeBlocki'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
CONST	SEGMENT
??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@ DB 'FN_LuaGetDecreaseMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
CONST	SEGMENT
??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@ DB 'FN_LuaGetIncreaseStat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
CONST	SEGMENT
??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@ DB 'FN_LuaGetIncreaseBl'
	DB	'ocking', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
CONST	SEGMENT
??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@ DB 'FN_LuaGetPercent4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
CONST	SEGMENT
??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@ DB 'FN_LuaGetManAttackRate'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
CONST	SEGMENT
??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@ DB 'FN_LuaGetAttackSuc'
	DB	'cessRate', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
CONST	SEGMENT
??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@ DB 'FN_LuaGetBlockingRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@ DB 'FN_LuaGetSDMonsterKill'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
CONST	SEGMENT
??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@ DB 'FN_LuaGetAttack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
CONST	SEGMENT
??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@ DB 'FN_LuaGetMaxLifeMana', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
CONST	SEGMENT
??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@ DB 'FN_LuaGetMaxAG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
CONST	SEGMENT
??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@ DB 'FN_LuaGetPercent3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
CONST	SEGMENT
??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@ DB 'FN_LuaGetMonsterKill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
CONST	SEGMENT
??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'ax', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
CONST	SEGMENT
??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@ DB 'FN_LuaGetSkillDama'
	DB	'geMiddle', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
CONST	SEGMENT
??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@ DB 'FN_LuaGetSkillDamageM'
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
CONST	SEGMENT
??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@ DB 'FN_LuaGetPercent2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
CONST	SEGMENT
??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@ DB 'FN_LuaGetPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHPBPOFD@i?$DOd?$AA@
CONST	SEGMENT
??_C@_03LHPBPOFD@i?$DOd?$AA@ DB 'i>d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IBJJMKHM@Skill?2MasterSkillEffect?4lua?$AA@
CONST	SEGMENT
??_C@_0BM@IBJJMKHM@Skill?2MasterSkillEffect?4lua?$AA@ DB 'Skill\MasterSki'
	DB	'llEffect.lua', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
CONST	SEGMENT
??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@ DB '[Master'
	DB	'LevelSkillTreeSystem] - Error - [%s] [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@
CONST	SEGMENT
??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@ DB 'MasterLevelSk'
	DB	'illTreeSystem.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CMasterLevelSkillTreeSystem@@6B@
CONST	SEGMENT
??_7CMasterLevelSkillTreeSystem@@6B@ DD FLAT:??_R4CMasterLevelSkillTreeSystem@@6B@ ; CMasterLevelSkillTreeSystem::`vftable'
	DD	FLAT:??_ECMasterLevelSkillTreeSystem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2 DD 00H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	FLAT:__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0
__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$2
__ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_MasterSkillSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_MasterSkillSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MasterSkillSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00005	e9 00 00 00 00	 jmp	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
??__Fg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MasterSkillSystem''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ??__Eg_MasterSkillSystem@@YAXXZ
text$di	SEGMENT
??__Eg_MasterSkillSystem@@YAXXZ PROC			; `dynamic initializer for 'g_MasterSkillSystem'', COMDAT

; 36   : CMasterLevelSkillTreeSystem g_MasterSkillSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00005	e8 00 00 00 00	 call	 ??0CMasterLevelSkillTreeSystem@@QAE@XZ ; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MasterSkillSystem@@YAXXZ ; `dynamic atexit destructor for 'g_MasterSkillSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MasterSkillSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_MasterSkillSystem''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetManaShieldRate@CSkillAdditionInfo@@QAEFH@Z
_TEXT	SEGMENT
_level$ = 8						; size = 4
?GetManaShieldRate@CSkillAdditionInfo@@QAEFH@Z PROC	; CSkillAdditionInfo::GetManaShieldRate, COMDAT
; _this$ = ecx

; 47   : 	short GetManaShieldRate(int level) { if( level < 0 || level > 20 ) return 20; return m_SB_ManaRate[level]; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _level$[ebp]
  00006	83 f8 14	 cmp	 eax, 20			; 00000014H
  00009	77 09		 ja	 SHORT $LN3@GetManaShi
  0000b	66 8b 44 41 40	 mov	 ax, WORD PTR [ecx+eax*2+64]
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN3@GetManaShi:
  00014	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?GetManaShieldRate@CSkillAdditionInfo@@QAEFH@Z ENDP	; CSkillAdditionInfo::GetManaShieldRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ PROC	; CSkillAdditionInfo::GetFireScreamSkill, COMDAT
; _this$ = ecx

; 35   : 	BOOL GetFireScreamSkill(){return this->m_bFireScreamSkill;}

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetFireScreamSkill@CSkillAdditionInfo@@QAEHXZ ENDP	; CSkillAdditionInfo::GetFireScreamSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
;	COMDAT ?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ
_TEXT	SEGMENT
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ PROC ; CSkillAdditionInfo::GetInfinityArrowSkillTime, COMDAT
; _this$ = ecx

; 23   : 	int GetInfinityArrowSkillTime(){return this->m_iInfinityArrowSkillTime;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetInfinityArrowSkillTime@CSkillAdditionInfo@@QAEHXZ ENDP ; CSkillAdditionInfo::GetInfinityArrowSkillTime
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z PROC		; CMasterLevelSkillTreeSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMasterLevelSkillTreeSystem@@UAE@XZ ; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 cc 55 00 00	 push	 21964			; 000055ccH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMasterLevelSkillTreeSystem@@UAEPAXI@Z ENDP		; CMasterLevelSkillTreeSystem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z
_TEXT	SEGMENT
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
_iTreeKind$ = 16					; size = 4
?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillInTree, COMDAT
; _this$ = ecx

; 7420 : bool CMasterLevelSkillTreeSystem::CheckSkillInTree(int iClass, int iSkill, int iTreeKind) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7421 : 	int iPos;
; 7422 : 	int iRank;
; 7423 : 
; 7424 : 	for (int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++) {

  00003	69 45 10 d0 02
	00 00		 imul	 eax, DWORD PTR _iTreeKind$[ebp], 720
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	69 7d 08 74 08
	00 00		 imul	 edi, DWORD PTR _iClass$[ebp], 2164
  00016	33 f6		 xor	 esi, esi
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	03 f9		 add	 edi, ecx
  0001d	03 f8		 add	 edi, eax
  0001f	90		 npad	 1
$LL4@CheckSkill:

; 7425 : 		for (int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++) {

  00020	33 c9		 xor	 ecx, ecx
  00022	8b c7		 mov	 eax, edi
$LL7@CheckSkill:

; 7426 : 			if (this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill) {

  00024	39 10		 cmp	 DWORD PTR [eax], edx
  00026	74 1a		 je	 SHORT $LN12@CheckSkill

; 7425 : 		for (int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++) {

  00028	41		 inc	 ecx
  00029	83 c0 14	 add	 eax, 20			; 00000014H
  0002c	83 f9 04	 cmp	 ecx, 4
  0002f	7c f3		 jl	 SHORT $LL7@CheckSkill

; 7421 : 	int iPos;
; 7422 : 	int iRank;
; 7423 : 
; 7424 : 	for (int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++) {

  00031	46		 inc	 esi
  00032	83 c7 50	 add	 edi, 80			; 00000050H
  00035	83 fe 09	 cmp	 esi, 9
  00038	7c e6		 jl	 SHORT $LL4@CheckSkill

; 7428 : 			}
; 7429 : 		}
; 7430 : 	}
; 7431 : 	return false;

  0003a	5f		 pop	 edi
  0003b	32 c0		 xor	 al, al
  0003d	5e		 pop	 esi

; 7432 : }

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
$LN12@CheckSkill:
  00042	5f		 pop	 edi

; 7427 : 				return true;

  00043	b0 01		 mov	 al, 1
  00045	5e		 pop	 esi

; 7432 : }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillInTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?ResetMasterSkill@CMasterLevelSkillTreeSystem@@QAEDHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iClass$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_nTreeType$ = 12					; size = 4
?ResetMasterSkill@CMasterLevelSkillTreeSystem@@QAEDHH@Z PROC ; CMasterLevelSkillTreeSystem::ResetMasterSkill, COMDAT
; _this$ = ecx

; 7363 : char CMasterLevelSkillTreeSystem::ResetMasterSkill(int aIndex, int nTreeType) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 7364 : 	LPOBJ lpUser = &gObj[aIndex];

  00005	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 7365 : 	int iClass = 0;
; 7366 : 
; 7367 : 	if (lpUser == NULL) {

  00015	75 09		 jne	 SHORT $LN5@ResetMaste

; 7368 : 		return -1;

  00017	0c ff		 or	 al, -1
  00019	5e		 pop	 esi

; 7418 : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN5@ResetMaste:
  00020	53		 push	 ebx

; 7369 : 	}
; 7370 : 
; 7371 : 	if (nTreeType < 0 || nTreeType > MAX_SKILLTREE_TYPE) {

  00021	8b 5d 0c	 mov	 ebx, DWORD PTR _nTreeType$[ebp]
  00024	83 fb 03	 cmp	 ebx, 3
  00027	0f 87 52 01 00
	00		 ja	 $LN7@ResetMaste

; 7373 : 	}
; 7374 : 
; 7375 : 	iClass = lpUser->Class;

  0002d	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00034	57		 push	 edi
  00035	89 45 08	 mov	 DWORD PTR _iClass$1$[ebp], eax
  00038	33 ff		 xor	 edi, edi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ResetMaste:

; 7378 : 		if (lpUser->Magic[n].IsMagic()
; 7379 : 			&& g_MasterSkillSystem.CheckMasterLevelSkill(lpUser->Magic[n].m_Skill)
; 7380 : 			&& (nTreeType == 0 || this->CheckSkillInTree(iClass, lpUser->Magic[n].m_Skill, nTreeType - 1))) {

  00040	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00046	03 cf		 add	 ecx, edi
  00048	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 10 01 00
	00		 je	 $LN2@ResetMaste
  00055	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00060	ff 74 38 08	 push	 DWORD PTR [eax+edi+8]
  00064	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00069	85 c0		 test	 eax, eax
  0006b	0f 84 f4 00 00
	00		 je	 $LN2@ResetMaste
  00071	85 db		 test	 ebx, ebx
  00073	74 21		 je	 SHORT $LN9@ResetMaste
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00078	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0007b	50		 push	 eax
  0007c	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00082	ff 74 38 08	 push	 DWORD PTR [eax+edi+8]
  00086	ff 75 08	 push	 DWORD PTR _iClass$1$[ebp]
  00089	e8 00 00 00 00	 call	 ?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z ; CMasterLevelSkillTreeSystem::CheckSkillInTree
  0008e	84 c0		 test	 al, al
  00090	0f 84 cf 00 00
	00		 je	 $LN2@ResetMaste
$LN9@ResetMaste:

; 7381 : 				if (MagicDamageC.GetSkillUseType(lpUser->Magic[n].m_Skill) == 3) {

  00096	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000a1	ff 74 38 08	 push	 DWORD PTR [eax+edi+8]
  000a5	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  000aa	83 f8 03	 cmp	 eax, 3
  000ad	75 1c		 jne	 SHORT $LN10@ResetMaste

; 7382 : 					lpUser->MasterPoint += lpUser->Magic[n].m_Level;

  000af	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  000b5	03 cf		 add	 ecx, edi
  000b7	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000bb	01 86 c0 00 00
	00		 add	 DWORD PTR [esi+192], eax

; 7383 : 					lpUser->Magic[n].Clear();

  000c1	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 7384 : 				}
; 7385 : 				else {

  000c6	e9 9a 00 00 00	 jmp	 $LN2@ResetMaste
$LN10@ResetMaste:

; 7386 : 					int iBrandOfSkill = MagicDamageC.GetBrandOfSkill(lpUser->Magic[n].m_Skill);

  000cb	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000d6	ff 74 38 08	 push	 DWORD PTR [eax+edi+8]
  000da	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  000df	0f b7 d8	 movzx	 ebx, ax

; 7387 : 
; 7388 : 					if (iBrandOfSkill == 0) {

  000e2	85 db		 test	 ebx, ebx
  000e4	75 19		 jne	 SHORT $LN12@ResetMaste
$LN28@ResetMaste:

; 7389 : 						lpUser->MasterPoint += lpUser->Magic[n].m_Level;

  000e6	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  000ec	03 cf		 add	 ecx, edi
  000ee	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000f2	01 86 c0 00 00
	00		 add	 DWORD PTR [esi+192], eax

; 7390 : 						lpUser->Magic[n].Clear();

  000f8	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear
  000fd	eb 63		 jmp	 SHORT $LN26@ResetMaste
$LN12@ResetMaste:

; 7391 : 					}
; 7392 : 					else if (g_MasterSkillSystem.CheckMasterLevelSkill(iBrandOfSkill)) {

  000ff	53		 push	 ebx
  00100	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00105	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0010a	85 c0		 test	 eax, eax
  0010c	75 d8		 jne	 SHORT $LN28@ResetMaste

; 7393 : 						lpUser->MasterPoint += lpUser->Magic[n].m_Level;
; 7394 : 						lpUser->Magic[n].Clear();
; 7395 : 					}
; 7396 : 					else {
; 7397 : 						CItem *lpLeftItem = &lpUser->pInventory[1];

  0010e	8b 96 c0 11 00
	00		 mov	 edx, DWORD PTR [esi+4544]

; 7398 : 						CItem *lpRightItem = &lpUser->pInventory[0];
; 7399 : 
; 7400 : 						if (lpLeftItem->m_Special[0] == iBrandOfSkill) {
; 7401 : 							lpUser->MasterPoint += lpUser->Magic[n].m_Level;

  00114	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  0011a	03 cf		 add	 ecx, edi
  0011c	0f b7 82 06 01
	00 00		 movzx	 eax, WORD PTR [edx+262]
  00123	3b c3		 cmp	 eax, ebx
  00125	75 14		 jne	 SHORT $LN16@ResetMaste
  00127	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0012b	01 86 c0 00 00
	00		 add	 DWORD PTR [esi+192], eax

; 7402 : 							lpUser->Magic[n].UpdateMasterSkill(iBrandOfSkill, (BYTE)lpLeftItem->m_Level);

  00131	0f b6 82 dc 00
	00 00		 movzx	 eax, BYTE PTR [edx+220]
  00138	50		 push	 eax
  00139	eb 21		 jmp	 SHORT $LN27@ResetMaste
$LN16@ResetMaste:

; 7403 : 						}
; 7404 : 						else if (lpRightItem->m_Special[0] == iBrandOfSkill) {

  0013b	0f b7 42 32	 movzx	 eax, WORD PTR [edx+50]
  0013f	3b c3		 cmp	 eax, ebx

; 7405 : 							lpUser->MasterPoint += lpUser->Magic[n].m_Level;

  00141	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00145	75 0d		 jne	 SHORT $LN18@ResetMaste
  00147	01 86 c0 00 00
	00		 add	 DWORD PTR [esi+192], eax

; 7406 : 							lpUser->Magic[n].UpdateMasterSkill(iBrandOfSkill, (BYTE)lpRightItem->m_Level);

  0014d	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00151	50		 push	 eax

; 7407 : 						}
; 7408 : 						else {

  00152	eb 08		 jmp	 SHORT $LN27@ResetMaste
$LN18@ResetMaste:

; 7409 : 							lpUser->MasterPoint += lpUser->Magic[n].m_Level;

  00154	01 86 c0 00 00
	00		 add	 DWORD PTR [esi+192], eax

; 7410 : 							lpUser->Magic[n].UpdateMasterSkill(iBrandOfSkill, 0);

  0015a	6a 00		 push	 0
$LN27@ResetMaste:
  0015c	53		 push	 ebx
  0015d	e8 00 00 00 00	 call	 ?UpdateMasterSkill@CMagicInf@@QAEHHE@Z ; CMagicInf::UpdateMasterSkill
$LN26@ResetMaste:
  00162	8b 5d 0c	 mov	 ebx, DWORD PTR _nTreeType$[ebp]
$LN2@ResetMaste:

; 7376 : 
; 7377 : 	for (int n = 0; n < MAGIC_SIZE; n++) {

  00165	83 c7 18	 add	 edi, 24			; 00000018H
  00168	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  0016e	0f 8c cc fe ff
	ff		 jl	 $LL4@ResetMaste

; 7411 : 						}
; 7412 : 					}
; 7413 : 				}
; 7414 : 		}
; 7415 : 	}
; 7416 : 	
; 7417 : 	return false;

  00174	5f		 pop	 edi
  00175	5b		 pop	 ebx
  00176	32 c0		 xor	 al, al
  00178	5e		 pop	 esi

; 7418 : }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN7@ResetMaste:
  0017f	5b		 pop	 ebx

; 7372 : 		return -1;

  00180	0c ff		 or	 al, -1
  00182	5e		 pop	 esi

; 7418 : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 08 00	 ret	 8
?ResetMasterSkill@CMasterLevelSkillTreeSystem@@QAEDHH@Z ENDP ; CMasterLevelSkillTreeSystem::ResetMasterSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckMasterSkillPoint@CMasterLevelSkillTreeSystem@@QAEDHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iClass$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_nTreeType$ = 12					; size = 4
?CheckMasterSkillPoint@CMasterLevelSkillTreeSystem@@QAEDHH@Z PROC ; CMasterLevelSkillTreeSystem::CheckMasterSkillPoint, COMDAT
; _this$ = ecx

; 7330 : char CMasterLevelSkillTreeSystem::CheckMasterSkillPoint(int aIndex, int nTreeType) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 7331 : 	LPOBJ lpUser = &gObj[aIndex];

  00006	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048

; 7332 : 	int nSkillCnt = 0;

  0000d	bb 00 00 00 00	 mov	 ebx, 0
  00012	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00015	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 7333 : 	int iClass = -1;
; 7334 : 
; 7335 : 	if (lpUser == NULL) {

  0001b	0f 84 8b 00 00
	00		 je	 $LN7@CheckMaste

; 7336 : 		return -1;
; 7337 : 	}
; 7338 : 
; 7339 : 	if (nTreeType < 0 || nTreeType > MAX_SKILLTREE_TYPE) {

  00021	8b 45 0c	 mov	 eax, DWORD PTR _nTreeType$[ebp]
  00024	83 f8 03	 cmp	 eax, 3
  00027	0f 87 7f 00 00
	00		 ja	 $LN7@CheckMaste

; 7341 : 	}
; 7342 : 
; 7343 : 	iClass = lpUser->Class;

  0002d	0f b7 8f 90 00
	00 00		 movzx	 ecx, WORD PTR [edi+144]
  00034	89 4d 08	 mov	 DWORD PTR _iClass$1$[ebp], ecx

; 7344 : 
; 7345 : 	if (nTreeType > 0) {

  00037	85 c0		 test	 eax, eax
  00039	7e 67		 jle	 SHORT $LN11@CheckMaste

; 7346 : 		for (int n = 0; n < MAGIC_SIZE; n++) {

  0003b	56		 push	 esi
  0003c	33 f6		 xor	 esi, esi
  0003e	66 90		 npad	 2
$LL4@CheckMaste:

; 7347 : 			if (lpUser->Magic[n].IsMagic()
; 7348 : 				&& g_MasterSkillSystem.CheckMasterLevelSkill(lpUser->Magic[n].m_Skill)) {

  00040	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00046	03 ce		 add	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0004d	85 c0		 test	 eax, eax
  0004f	74 37		 je	 SHORT $LN2@CheckMaste
  00051	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0005c	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  00060	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00065	85 c0		 test	 eax, eax
  00067	74 1f		 je	 SHORT $LN2@CheckMaste

; 7349 : 				if (this->CheckSkillInTree(iClass, lpUser->Magic[n].m_Skill, nTreeType - 1)) {

  00069	8b 45 0c	 mov	 eax, DWORD PTR _nTreeType$[ebp]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006f	48		 dec	 eax
  00070	50		 push	 eax
  00071	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00077	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  0007b	ff 75 08	 push	 DWORD PTR _iClass$1$[ebp]
  0007e	e8 00 00 00 00	 call	 ?CheckSkillInTree@CMasterLevelSkillTreeSystem@@QAE_NHHH@Z ; CMasterLevelSkillTreeSystem::CheckSkillInTree
  00083	84 c0		 test	 al, al
  00085	74 01		 je	 SHORT $LN2@CheckMaste

; 7350 : 					nSkillCnt++;

  00087	43		 inc	 ebx
$LN2@CheckMaste:

; 7346 : 		for (int n = 0; n < MAGIC_SIZE; n++) {

  00088	83 c6 18	 add	 esi, 24			; 00000018H
  0008b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00091	7c ad		 jl	 SHORT $LL4@CheckMaste

; 7351 : 				}
; 7352 : 			}
; 7353 : 		}
; 7354 : 
; 7355 : 		if (nSkillCnt == 0) {

  00093	5e		 pop	 esi
  00094	85 db		 test	 ebx, ebx
  00096	75 0a		 jne	 SHORT $LN11@CheckMaste

; 7356 : 			return 0;

  00098	5f		 pop	 edi
  00099	32 c0		 xor	 al, al
  0009b	5b		 pop	 ebx

; 7361 : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN11@CheckMaste:
  000a2	5f		 pop	 edi

; 7357 : 		}
; 7358 : 	}
; 7359 : 
; 7360 : 	return 1;

  000a3	b0 01		 mov	 al, 1
  000a5	5b		 pop	 ebx

; 7361 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
$LN7@CheckMaste:
  000ac	5f		 pop	 edi

; 7340 : 		return -1;

  000ad	0c ff		 or	 al, -1
  000af	5b		 pop	 ebx

; 7361 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?CheckMasterSkillPoint@CMasterLevelSkillTreeSystem@@QAEDHH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckMasterSkillPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z
_TEXT	SEGMENT
tv392 = -168						; size = 4
_lpObj$1$ = -164					; size = 4
_vFrustrum$ = -160					; size = 48
_Matrix$ = -112						; size = 48
_p$ = -64						; size = 48
_Angle$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetPos$ = 12					; size = 1
_f1$ = 16						; size = 4
_f2$ = 20						; size = 4
_f3$ = 24						; size = 4
_f4$ = 28						; size = 4
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3, COMDAT
; _this$ = ecx

; 6514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]

; 6515 : 	LPOBJ lpObj = &gObj[aIndex];
; 6516 : 
; 6517 : 	float p[MAX_ARRAY_FRUSTRUM][3];
; 6518 : 
; 6519 : 	p[0][0] = -f1;

  00016	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _f1$[ebp]
  0001b	56		 push	 esi
  0001c	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00022	0f 28 c2	 movaps	 xmm0, xmm2

; 6520 : 	p[0][1] = f2;
; 6521 : 	p[0][2] = 0;
; 6522 : 	p[1][0] = f1;
; 6523 : 	p[1][1] = f2;
; 6524 : 	p[1][2] = 0;
; 6525 : 	p[2][0] = f3;
; 6526 : 	p[2][1] = f4;
; 6527 : 	p[2][2] = 0;
; 6528 : 	p[3][0] = -f3;
; 6529 : 	p[3][1] = f4;
; 6530 : 	p[3][2] = 0;
; 6531 : 
; 6532 : 	float Angle[3];
; 6533 : 
; 6534 : 	Angle[0] = 0;
; 6535 : 	Angle[1] = 0;
; 6536 : 	Angle[2] = (float)(aTargetPos * 360 / 255);

  00025	0f b6 45 0c	 movzx	 eax, BYTE PTR _aTargetPos$[ebp]
  00029	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00030	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _f2$[ebp]
  00035	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0003b	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00040	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	f3 0f 11 45 c0	 movss	 DWORD PTR _p$[ebp], xmm0
  0004b	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _f4$[ebp]
  00050	f3 0f 11 45 dc	 movss	 DWORD PTR _p$[ebp+28], xmm0
  00055	f7 e9		 imul	 ecx
  00057	f3 0f 11 45 e8	 movss	 DWORD PTR _p$[ebp+40], xmm0
  0005c	f3 0f 11 4d c4	 movss	 DWORD PTR _p$[ebp+4], xmm1
  00061	f3 0f 11 4d d0	 movss	 DWORD PTR _p$[ebp+16], xmm1
  00066	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _f3$[ebp]
  0006b	57		 push	 edi
  0006c	03 d1		 add	 edx, ecx
  0006e	f3 0f 11 4d d8	 movss	 DWORD PTR _p$[ebp+24], xmm1
  00073	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0007a	c1 fa 07	 sar	 edx, 7
  0007d	8b c2		 mov	 eax, edx
  0007f	89 b5 5c ff ff
	ff		 mov	 DWORD PTR _lpObj$1$[ebp], esi
  00085	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00088	03 c2		 add	 eax, edx
  0008a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+8], 0
  00091	f3 0f 11 55 cc	 movss	 DWORD PTR _p$[ebp+12], xmm2
  00096	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+20], 0
  0009d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+32], 0
  000a4	66 0f 6e c0	 movd	 xmm0, eax

; 6537 : 
; 6538 : 	float Matrix[3][MAX_ARRAY_FRUSTRUM];
; 6539 : 	float vFrustrum[MAX_ARRAY_FRUSTRUM][3];
; 6540 : 
; 6541 : 	AngleMatrix(Angle,Matrix);

  000a8	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000ab	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ae	50		 push	 eax
  000af	8d 45 f0	 lea	 eax, DWORD PTR _Angle$[ebp]
  000b2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+44], 0
  000b9	50		 push	 eax
  000ba	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Angle$[ebp], 0
  000c1	f3 0f 11 4d e4	 movss	 DWORD PTR _p$[ebp+36], xmm1
  000c6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Angle$[ebp+4], 0
  000cd	f3 0f 11 45 f8	 movss	 DWORD PTR _Angle$[ebp+8], xmm0
  000d2	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix
  000d7	8d 86 98 14 00
	00		 lea	 eax, DWORD PTR [esi+5272]
  000dd	83 c4 08	 add	 esp, 8
  000e0	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv392[ebp], eax

; 6542 : 
; 6543 : 	for(int i = 0; i < MAX_ARRAY_FRUSTRUM; i++)

  000e6	33 ff		 xor	 edi, edi
  000e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@MLS_SkillF:

; 6544 : 	{
; 6545 : 		VectorRotate((const float *)&p[i],(const float *)&Matrix[0],(float *)&vFrustrum[i]);

  000f0	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _vFrustrum$[ebp]
  000f6	03 f7		 add	 esi, edi
  000f8	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000fb	56		 push	 esi
  000fc	50		 push	 eax
  000fd	8d 45 c0	 lea	 eax, DWORD PTR _p$[ebp]
  00100	03 c7		 add	 eax, edi
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6546 : 
; 6547 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  00108	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00111	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv392[ebp]
  00117	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  0011e	f3 0f 2c 06	 cvttss2si eax, DWORD PTR [esi]
  00122	03 c8		 add	 ecx, eax

; 6548 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  00124	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0012a	89 4a f0	 mov	 DWORD PTR [edx-16], ecx
  0012d	f3 0f 2c 8c 3d
	64 ff ff ff	 cvttss2si ecx, DWORD PTR _vFrustrum$[ebp+edi+4]
  00136	83 c7 0c	 add	 edi, 12			; 0000000cH
  00139	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00140	03 c8		 add	 ecx, eax
  00142	89 0a		 mov	 DWORD PTR [edx], ecx
  00144	83 c2 04	 add	 edx, 4
  00147	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv392[ebp], edx
  0014d	83 ff 30	 cmp	 edi, 48			; 00000030H
  00150	7c 9e		 jl	 SHORT $LL4@MLS_SkillF

; 6549 : 	}
; 6550 : }

  00152	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00155	5f		 pop	 edi
  00156	33 cd		 xor	 ecx, ebp
  00158	5e		 pop	 esi
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
_nSkillGroup$1$ = -12					; size = 4
_nCnt$1$ = -8						; size = 4
_iBrandOfSkill$1$ = -4					; size = 4
_iBrandOfSkill$ = 8					; size = 2
_iValuType$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage, COMDAT
; _this$ = ecx

; 5624 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5625 : 	if( lpObj == NULL )

  00006	83 7d 08 00	 cmp	 DWORD PTR _lpObj$[ebp], 0
  0000a	8b c1		 mov	 eax, ecx
  0000c	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	75 08		 jne	 SHORT $LN7@GetSkillAt

; 5626 : 		return 0.0f;

  00011	d9 ee		 fldz

; 5680 : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN7@GetSkillAt:
  00019	56		 push	 esi

; 5627 : 
; 5628 : 	if( !this->CheckMasterLevelSkill(iSkill) )

  0001a	8b 75 0c	 mov	 esi, DWORD PTR _iSkill$[ebp]
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00023	85 c0		 test	 eax, eax
  00025	75 09		 jne	 SHORT $LN8@GetSkillAt

; 5629 : 		return 0.0f;

  00027	d9 ee		 fldz
  00029	5e		 pop	 esi

; 5680 : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN8@GetSkillAt:
  00030	53		 push	 ebx
  00031	57		 push	 edi

; 5630 : 
; 5631 : 	int nSkillGroup = MagicDamageC.GetSkillGroup(iSkill);

  00032	56		 push	 esi
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00038	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup

; 5632 : 	WORD nBrandOfSkill = iSkill;

  0003d	0f b7 de	 movzx	 ebx, si

; 5633 : 	WORD iBrandOfSkill;
; 5634 : 	int iValuType;
; 5635 : 	int nCnt = 0;
; 5636 : 
; 5637 : 	while( g_MasterSkillSystem.CheckMasterLevelSkill(nBrandOfSkill) )

  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00045	0f b7 f6	 movzx	 esi, si
  00048	56		 push	 esi
  00049	89 45 f4	 mov	 DWORD PTR _nSkillGroup$1$[ebp], eax
  0004c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nCnt$1$[ebp], 0
  00053	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 da 00 00
	00		 je	 $LN28@GetSkillAt
$LL2@GetSkillAt:

; 5638 : 	{
; 5639 : 		iBrandOfSkill = nBrandOfSkill;

  00060	0f b7 c3	 movzx	 eax, bx

; 5640 : 
; 5641 : 		if( MagicDamageC.GetSkillGroup(iBrandOfSkill) != nSkillGroup )

  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00068	56		 push	 esi
  00069	89 45 fc	 mov	 DWORD PTR _iBrandOfSkill$1$[ebp], eax
  0006c	e8 00 00 00 00	 call	 ?GetSkillGroup@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillGroup
  00071	3b 45 f4	 cmp	 eax, DWORD PTR _nSkillGroup$1$[ebp]
  00074	0f 85 99 00 00
	00		 jne	 $LN27@GetSkillAt

; 5642 : 		{
; 5643 : 			iBrandOfSkill = 0;
; 5644 : 			break;
; 5645 : 		}
; 5646 : 
; 5647 : 		iValuType = MagicDamageC.SkillGet(iBrandOfSkill);

  0007a	56		 push	 esi
  0007b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00080	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00085	8b f8		 mov	 edi, eax

; 5648 : 
; 5649 : 		if( iValuType == 3 ||
; 5650 : 			iValuType == 4 ||
; 5651 : 			iValuType == 5 ||

  00087	83 ff 03	 cmp	 edi, 3
  0008a	74 3a		 je	 SHORT $LN33@GetSkillAt
  0008c	83 ff 04	 cmp	 edi, 4
  0008f	74 35		 je	 SHORT $LN33@GetSkillAt
  00091	83 ff 05	 cmp	 edi, 5
  00094	74 30		 je	 SHORT $LN33@GetSkillAt
  00096	83 ff 16	 cmp	 edi, 22			; 00000016H
  00099	74 2b		 je	 SHORT $LN33@GetSkillAt

; 5652 : 			iValuType == 22 )
; 5653 : 		{
; 5654 : 			break;
; 5655 : 		}
; 5656 : 		
; 5657 : 		nBrandOfSkill = MagicDamageC.GetBrandOfSkill(iBrandOfSkill);

  0009b	56		 push	 esi
  0009c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000a1	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  000a6	0f b7 d8	 movzx	 ebx, ax

; 5658 : 		nCnt++;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _nCnt$1$[ebp]
  000ac	40		 inc	 eax
  000ad	89 45 f8	 mov	 DWORD PTR _nCnt$1$[ebp], eax

; 5659 : 
; 5660 : 		if( nCnt > 2 )

  000b0	83 f8 02	 cmp	 eax, 2
  000b3	7f 69		 jg	 SHORT $LN20@GetSkillAt

; 5633 : 	WORD iBrandOfSkill;
; 5634 : 	int iValuType;
; 5635 : 	int nCnt = 0;
; 5636 : 
; 5637 : 	while( g_MasterSkillSystem.CheckMasterLevelSkill(nBrandOfSkill) )

  000b5	8b f3		 mov	 esi, ebx
  000b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  000c2	85 c0		 test	 eax, eax
  000c4	75 9a		 jne	 SHORT $LL2@GetSkillAt
$LN33@GetSkillAt:
  000c6	8b 45 fc	 mov	 eax, DWORD PTR _iBrandOfSkill$1$[ebp]
$LN11@GetSkillAt:

; 5663 : 			iBrandOfSkill = 0;
; 5664 : 			break;
; 5665 : 		}
; 5666 : 	}
; 5667 : 
; 5668 : 	if( iBrandOfSkill > 0 )

  000c9	66 85 c0	 test	 ax, ax
  000cc	74 45		 je	 SHORT $LN27@GetSkillAt

; 5669 : 	{
; 5670 : 		for(int n = 0; n < MAX_MAGIC; n++)

  000ce	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000d1	33 db		 xor	 ebx, ebx
  000d3	33 f6		 xor	 esi, esi
  000d5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL6@GetSkillAt:

; 5671 : 		{
; 5672 : 			if( lpObj->Magic[n].IsMagic() == TRUE &&

  000e0	8b 8a a8 06 00
	00		 mov	 ecx, DWORD PTR [edx+1704]
  000e6	03 ce		 add	 ecx, esi
  000e8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000ed	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  000f0	83 f8 01	 cmp	 eax, 1
  000f3	75 12		 jne	 SHORT $LN4@GetSkillAt
  000f5	8b 8a a8 06 00
	00		 mov	 ecx, DWORD PTR [edx+1704]
  000fb	8b 45 fc	 mov	 eax, DWORD PTR _iBrandOfSkill$1$[ebp]
  000fe	0f b7 c0	 movzx	 eax, ax
  00101	39 44 31 08	 cmp	 DWORD PTR [ecx+esi+8], eax
  00105	74 3e		 je	 SHORT $LN21@GetSkillAt
$LN4@GetSkillAt:

; 5669 : 	{
; 5670 : 		for(int n = 0; n < MAX_MAGIC; n++)

  00107	83 c6 18	 add	 esi, 24			; 00000018H
  0010a	43		 inc	 ebx
  0010b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00111	7c cd		 jl	 SHORT $LL6@GetSkillAt
$LN27@GetSkillAt:

; 5676 : 			}
; 5677 : 		}
; 5678 : 	}
; 5679 : 	return 0.0f;

  00113	d9 ee		 fldz
  00115	5f		 pop	 edi
  00116	5b		 pop	 ebx
  00117	5e		 pop	 esi

; 5680 : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN20@GetSkillAt:

; 5661 : 		{
; 5662 : 			LogAddTD("[GetSkillAttackDamage] fail!!! - %d",iSkill);

  0011e	ff 75 0c	 push	 DWORD PTR _iSkill$[ebp]
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NKODFDAA@?$FLGetSkillAttackDamage?$FN?5fail?$CB?$CB?$CB?5?9@
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 5676 : 			}
; 5677 : 		}
; 5678 : 	}
; 5679 : 	return 0.0f;

  0012c	d9 ee		 fldz
  0012e	83 c4 08	 add	 esp, 8
  00131	5f		 pop	 edi
  00132	5b		 pop	 ebx
  00133	5e		 pop	 esi

; 5680 : }

  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
$LN28@GetSkillAt:

; 5663 : 			iBrandOfSkill = 0;
; 5664 : 			break;
; 5665 : 		}
; 5666 : 	}
; 5667 : 
; 5668 : 	if( iBrandOfSkill > 0 )

  0013a	8b 45 08	 mov	 eax, DWORD PTR _iBrandOfSkill$[ebp]
  0013d	8b 7d 08	 mov	 edi, DWORD PTR _iValuType$[ebp]
  00140	89 45 fc	 mov	 DWORD PTR _iBrandOfSkill$1$[ebp], eax
  00143	eb 84		 jmp	 SHORT $LN11@GetSkillAt
$LN21@GetSkillAt:

; 5673 : 				lpObj->Magic[n].m_Skill == iBrandOfSkill )
; 5674 : 			{
; 5675 : 				return this->GetMasterSkillValue(iValuType,lpObj->Magic[n].m_Level);	

  00145	8b 82 a8 06 00
	00		 mov	 eax, DWORD PTR [edx+1704]
  0014b	8d 0c 5b	 lea	 ecx, DWORD PTR [ebx+ebx*2]
  0014e	0f b6 44 c8 04	 movzx	 eax, BYTE PTR [eax+ecx*8+4]
  00153	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00156	50		 push	 eax
  00157	57		 push	 edi
  00158	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0015d	5f		 pop	 edi
  0015e	5b		 pop	 ebx
  0015f	5e		 pop	 esi

; 5680 : }

  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 08 00	 ret	 8
?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z
_TEXT	SEGMENT
tv94 = -280						; size = 4
_szTemp$ = -276						; size = 256
_szPos$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_dbValue$ = 8						; size = 8
_iPos$ = 16						; size = 4
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z PROC	; CMasterLevelSkillTreeSystem::RoundValue, COMDAT
; _this$ = ecx

; 5613 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi

; 5614 : 	char szTemp[256];
; 5615 : 	char szPos[16];
; 5616 : 
; 5617 : 	sprintf(szPos,"%%.%d",iPos);

  00014	ff 75 10	 push	 DWORD PTR _iPos$[ebp]
  00017	8d 45 ec	 lea	 eax, DWORD PTR _szPos$[ebp]
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_05GPIHJIAI@?$CF?$CF?4?$CFd?$AA@
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _sprintf

; 5618 : 	strcat(szPos,"f");

  00025	8d 7d ec	 lea	 edi, DWORD PTR _szPos$[ebp]
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	4f		 dec	 edi
  0002c	0f 1f 40 00	 npad	 4
$LL3@RoundValue:
  00030	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00033	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00036	84 c0		 test	 al, al
  00038	75 f6		 jne	 SHORT $LL3@RoundValue
  0003a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01INIBCBCB@f?$AA@

; 5619 : 	sprintf(szTemp,szPos,dbValue);

  00040	83 ec 08	 sub	 esp, 8
  00043	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _dbValue$[ebp]
  00048	66 89 07	 mov	 WORD PTR [edi], ax
  0004b	8d 45 ec	 lea	 eax, DWORD PTR _szPos$[ebp]
  0004e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00053	50		 push	 eax
  00054	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _sprintf

; 5620 : 	return (float)atof(szTemp);

  00060	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _atof

; 5621 : }

  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	83 c4 14	 add	 esp, 20			; 00000014H
  00072	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR tv94[ebp]
  00078	d9 85 e8 fe ff
	ff		 fld	 DWORD PTR tv94[ebp]
  0007e	33 cd		 xor	 ecx, ebp
  00080	5f		 pop	 edi
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 0c 00	 ret	 12			; 0000000cH
?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ENDP	; CMasterLevelSkillTreeSystem::RoundValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::GetCurSkillLevel, COMDAT
; _this$ = ecx

; 5602 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5603 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00009	33 ff		 xor	 edi, edi
  0000b	33 f6		 xor	 esi, esi
  0000d	0f 1f 00	 npad	 3
$LL4@GetCurSkil:

; 5604 : 	{
; 5605 : 		if( lpObj->Magic[iCount].IsMagic() &&

  00010	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	85 c0		 test	 eax, eax
  0001f	74 0f		 je	 SHORT $LN2@GetCurSkil
  00021	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0002a	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0002e	74 16		 je	 SHORT $LN8@GetCurSkil
$LN2@GetCurSkil:

; 5603 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00030	83 c6 18	 add	 esi, 24			; 00000018H
  00033	47		 inc	 edi
  00034	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0003a	7c d4		 jl	 SHORT $LL4@GetCurSkil

; 5608 : 	}
; 5609 : 	return -1;

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	83 c8 ff	 or	 eax, -1
  00041	5b		 pop	 ebx

; 5610 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN8@GetCurSkil:

; 5606 : 			lpObj->Magic[iCount].m_Skill == iSkill )
; 5607 : 			return lpObj->Magic[iCount].m_Level;

  00046	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00049	0f b6 44 c8 04	 movzx	 eax, BYTE PTR [eax+ecx*8+4]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 5610 : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill, COMDAT
; _this$ = ecx

; 5586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5587 : 	if( iType != ITEMGET(13,4) )

  00004	81 7d 0c 04 1a
	00 00		 cmp	 DWORD PTR _iType$[ebp], 6660 ; 00001a04H
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	75 72		 jne	 SHORT $LN13@SetPetItem

; 5588 : 		return;
; 5589 : 
; 5590 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	33 ff		 xor	 edi, edi
  00018	33 f6		 xor	 esi, esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@SetPetItem:

; 5591 : 	{
; 5592 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00020	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  00026	03 ce		 add	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0002d	83 f8 01	 cmp	 eax, 1
  00030	75 10		 jne	 SHORT $LN2@SetPetItem
  00032	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00038	81 7c 30 08 fe
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 510 ; 000001feH
  00040	74 15		 je	 SHORT $LN9@SetPetItem
$LN2@SetPetItem:

; 5588 : 		return;
; 5589 : 
; 5590 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00042	83 c6 18	 add	 esi, 24			; 00000018H
  00045	47		 inc	 edi
  00046	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0004c	7c d2		 jl	 SHORT $LL4@SetPetItem
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 5596 : 			break;
; 5597 : 		}
; 5598 : 	}
; 5599 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN9@SetPetItem:

; 5593 : 			lpObj->Magic[iCount].m_Skill == 510 )
; 5594 : 		{
; 5595 : 			lpObj->m_MPSkillOpt.MpsDarkHorseStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00057	8b c8		 mov	 ecx, eax
  00059	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  0005c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00061	50		 push	 eax
  00062	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0006b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	d9 9b a0 07 00
	00		 fstp	 DWORD PTR [ebx+1952]
  00081	5b		 pop	 ebx
$LN13@SetPetItem:

; 5596 : 			break;
; 5597 : 		}
; 5598 : 	}
; 5599 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?SetPetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetPetItemMLPassiveSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iType$ = 12						; size = 4
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill, COMDAT
; _this$ = ecx

; 5140 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5141 : 	int iCount = 0;
; 5142 : 
; 5143 : 	switch(iType)

  00004	8b 45 0c	 mov	 eax, DWORD PTR _iType$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	83 f8 19	 cmp	 eax, 25			; 00000019H
  0000d	0f 87 3f 10 00
	00		 ja	 $LN433@SetItemMLP
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN439@SetItemMLP[eax*4]
$LN124@SetItemMLP:
  0001d	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5144 : 	{
; 5145 : 	case 0:
; 5146 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00020	33 db		 xor	 ebx, ebx
  00022	33 f6		 xor	 esi, esi
  00024	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL6@SetItemMLP:

; 5147 : 		{
; 5148 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00030	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00036	03 ce		 add	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 10		 jne	 SHORT $LN4@SetItemMLP
  00042	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00048	81 7c 30 08 5c
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 348 ; 0000015cH
  00050	74 0e		 je	 SHORT $LN230@SetItemMLP
$LN4@SetItemMLP:

; 5144 : 	{
; 5145 : 	case 0:
; 5146 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00052	83 c6 18	 add	 esi, 24			; 00000018H
  00055	43		 inc	 ebx
  00056	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0005c	7c d2		 jl	 SHORT $LL6@SetItemMLP
  0005e	eb 28		 jmp	 SHORT $LN394@SetItemMLP
$LN230@SetItemMLP:

; 5149 : 				lpObj->Magic[iCount].m_Skill == 348 )
; 5150 : 			{
; 5151 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00060	8b c8		 mov	 ecx, eax
  00062	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00065	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0006a	50		 push	 eax
  0006b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00074	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00082	d9 9f f8 06 00
	00		 fstp	 DWORD PTR [edi+1784]
$LN394@SetItemMLP:

; 5152 : 				break;
; 5153 : 			}
; 5154 : 		}
; 5155 : 
; 5156 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00088	33 db		 xor	 ebx, ebx
  0008a	33 f6		 xor	 esi, esi
  0008c	0f 1f 40 00	 npad	 4
$LL9@SetItemMLP:

; 5157 : 		{
; 5158 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00090	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00096	03 ce		 add	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	75 10		 jne	 SHORT $LN7@SetItemMLP
  000a2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  000a8	81 7c 30 08 60
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 352 ; 00000160H
  000b0	74 15		 je	 SHORT $LN231@SetItemMLP
$LN7@SetItemMLP:

; 5152 : 				break;
; 5153 : 			}
; 5154 : 		}
; 5155 : 
; 5156 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  000b2	83 c6 18	 add	 esi, 24			; 00000018H
  000b5	43		 inc	 ebx
  000b6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  000bc	7c d2		 jl	 SHORT $LL9@SetItemMLP
  000be	5f		 pop	 edi
  000bf	5e		 pop	 esi
  000c0	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
$LN231@SetItemMLP:

; 5159 : 				lpObj->Magic[iCount].m_Skill == 352 )
; 5160 : 			{
; 5161 : 				lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  000c7	8b d0		 mov	 edx, eax
  000c9	8d 34 5b	 lea	 esi, DWORD PTR [ebx+ebx*2]
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000d1	0f b6 44 f2 04	 movzx	 eax, BYTE PTR [edx+esi*8+4]
  000d6	50		 push	 eax
  000d7	ff 74 f2 08	 push	 DWORD PTR [edx+esi*8+8]
  000db	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000e9	d9 9f 08 07 00
	00		 fstp	 DWORD PTR [edi+1800]
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN127@SetItemMLP:
  000f8	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5162 : 				break;
; 5163 : 			}
; 5164 : 		}
; 5165 : 		break;
; 5166 : 	case 1:
; 5167 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  000fb	33 db		 xor	 ebx, ebx
  000fd	33 f6		 xor	 esi, esi
  000ff	90		 npad	 1
$LL12@SetItemMLP:

; 5168 : 		{
; 5169 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00100	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00106	03 ce		 add	 ecx, esi
  00108	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0010d	83 f8 01	 cmp	 eax, 1
  00110	75 10		 jne	 SHORT $LN10@SetItemMLP
  00112	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00118	81 7c 30 08 5d
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 349 ; 0000015dH
  00120	74 0e		 je	 SHORT $LN232@SetItemMLP
$LN10@SetItemMLP:

; 5162 : 				break;
; 5163 : 			}
; 5164 : 		}
; 5165 : 		break;
; 5166 : 	case 1:
; 5167 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00122	83 c6 18	 add	 esi, 24			; 00000018H
  00125	43		 inc	 ebx
  00126	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0012c	7c d2		 jl	 SHORT $LL12@SetItemMLP
  0012e	eb 28		 jmp	 SHORT $LN396@SetItemMLP
$LN232@SetItemMLP:

; 5170 : 				lpObj->Magic[iCount].m_Skill == 349 )
; 5171 : 			{
; 5172 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00130	8b c8		 mov	 ecx, eax
  00132	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00135	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0013a	50		 push	 eax
  0013b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0013f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00144	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00149	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00152	d9 9f fc 06 00
	00		 fstp	 DWORD PTR [edi+1788]
$LN396@SetItemMLP:

; 5173 : 				break;
; 5174 : 			}
; 5175 : 		}
; 5176 : 
; 5177 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00158	33 db		 xor	 ebx, ebx
  0015a	33 f6		 xor	 esi, esi
  0015c	0f 1f 40 00	 npad	 4
$LL15@SetItemMLP:

; 5178 : 		{
; 5179 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00160	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00166	03 ce		 add	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0016d	83 f8 01	 cmp	 eax, 1
  00170	75 10		 jne	 SHORT $LN13@SetItemMLP
  00172	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00178	81 7c 30 08 61
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 353 ; 00000161H
  00180	74 15		 je	 SHORT $LN233@SetItemMLP
$LN13@SetItemMLP:

; 5173 : 				break;
; 5174 : 			}
; 5175 : 		}
; 5176 : 
; 5177 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00182	83 c6 18	 add	 esi, 24			; 00000018H
  00185	43		 inc	 ebx
  00186	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0018c	7c d2		 jl	 SHORT $LL15@SetItemMLP
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 08 00	 ret	 8
$LN233@SetItemMLP:

; 5180 : 				lpObj->Magic[iCount].m_Skill == 353 )
; 5181 : 			{
; 5182 : 				lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00197	8b c8		 mov	 ecx, eax
  00199	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0019c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  001a1	50		 push	 eax
  001a2	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ab	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001b9	d9 9f 0c 07 00
	00		 fstp	 DWORD PTR [edi+1804]
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 08 00	 ret	 8
$LN130@SetItemMLP:
  001c8	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5183 : 				break;
; 5184 : 			}
; 5185 : 		}
; 5186 : 		break;
; 5187 : 	case 2:
; 5188 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  001cb	33 db		 xor	 ebx, ebx
  001cd	33 f6		 xor	 esi, esi
  001cf	90		 npad	 1
$LL18@SetItemMLP:

; 5189 : 		{
; 5190 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  001d0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  001d6	03 ce		 add	 ecx, esi
  001d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  001dd	83 f8 01	 cmp	 eax, 1
  001e0	75 10		 jne	 SHORT $LN16@SetItemMLP
  001e2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  001e8	81 7c 30 08 5e
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 350 ; 0000015eH
  001f0	74 0e		 je	 SHORT $LN234@SetItemMLP
$LN16@SetItemMLP:

; 5183 : 				break;
; 5184 : 			}
; 5185 : 		}
; 5186 : 		break;
; 5187 : 	case 2:
; 5188 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  001f2	83 c6 18	 add	 esi, 24			; 00000018H
  001f5	43		 inc	 ebx
  001f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  001fc	7c d2		 jl	 SHORT $LL18@SetItemMLP
  001fe	eb 28		 jmp	 SHORT $LN398@SetItemMLP
$LN234@SetItemMLP:

; 5191 : 				lpObj->Magic[iCount].m_Skill == 350 )
; 5192 : 			{
; 5193 : 				lpObj->m_MPSkillOpt.MpsMaceStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00200	8b c8		 mov	 ecx, eax
  00202	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00205	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0020a	50		 push	 eax
  0020b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00214	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00219	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00222	d9 9f 00 07 00
	00		 fstp	 DWORD PTR [edi+1792]
$LN398@SetItemMLP:

; 5194 : 				break;
; 5195 : 			}
; 5196 : 		}
; 5197 : 
; 5198 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00228	33 db		 xor	 ebx, ebx
  0022a	33 f6		 xor	 esi, esi
  0022c	0f 1f 40 00	 npad	 4
$LL21@SetItemMLP:

; 5199 : 		{
; 5200 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00230	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00236	03 ce		 add	 ecx, esi
  00238	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0023d	83 f8 01	 cmp	 eax, 1
  00240	75 10		 jne	 SHORT $LN19@SetItemMLP
  00242	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00248	81 7c 30 08 62
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 354 ; 00000162H
  00250	74 15		 je	 SHORT $LN235@SetItemMLP
$LN19@SetItemMLP:

; 5194 : 				break;
; 5195 : 			}
; 5196 : 		}
; 5197 : 
; 5198 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00252	83 c6 18	 add	 esi, 24			; 00000018H
  00255	43		 inc	 ebx
  00256	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0025c	7c d2		 jl	 SHORT $LL21@SetItemMLP
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 08 00	 ret	 8
$LN235@SetItemMLP:

; 5201 : 				lpObj->Magic[iCount].m_Skill == 354 )
; 5202 : 			{
; 5203 : 				lpObj->m_MPSkillOpt.MpsMaceMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00267	8b c8		 mov	 ecx, eax
  00269	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0026c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00271	50		 push	 eax
  00272	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00276	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0027b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00280	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00289	d9 9f 18 07 00
	00		 fstp	 DWORD PTR [edi+1816]
  0028f	5f		 pop	 edi
  00290	5e		 pop	 esi
  00291	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00292	8b e5		 mov	 esp, ebp
  00294	5d		 pop	 ebp
  00295	c2 08 00	 ret	 8
$LN133@SetItemMLP:
  00298	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5204 : 				break;
; 5205 : 			}
; 5206 : 		}
; 5207 : 		break;
; 5208 : 	case 3:
; 5209 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0029b	33 db		 xor	 ebx, ebx
  0029d	33 f6		 xor	 esi, esi
  0029f	90		 npad	 1
$LL24@SetItemMLP:

; 5210 : 		{
; 5211 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  002a0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  002a6	03 ce		 add	 ecx, esi
  002a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  002ad	83 f8 01	 cmp	 eax, 1
  002b0	75 10		 jne	 SHORT $LN22@SetItemMLP
  002b2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  002b8	81 7c 30 08 5f
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 351 ; 0000015fH
  002c0	74 0e		 je	 SHORT $LN236@SetItemMLP
$LN22@SetItemMLP:

; 5204 : 				break;
; 5205 : 			}
; 5206 : 		}
; 5207 : 		break;
; 5208 : 	case 3:
; 5209 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  002c2	83 c6 18	 add	 esi, 24			; 00000018H
  002c5	43		 inc	 ebx
  002c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  002cc	7c d2		 jl	 SHORT $LL24@SetItemMLP
  002ce	eb 28		 jmp	 SHORT $LN400@SetItemMLP
$LN236@SetItemMLP:

; 5212 : 				lpObj->Magic[iCount].m_Skill == 351 )
; 5213 : 			{
; 5214 : 				lpObj->m_MPSkillOpt.MpsSpearStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  002d0	8b c8		 mov	 ecx, eax
  002d2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  002d5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  002da	50		 push	 eax
  002db	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  002df	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002e4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  002e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002ec	50		 push	 eax
  002ed	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  002f2	d9 9f 04 07 00
	00		 fstp	 DWORD PTR [edi+1796]
$LN400@SetItemMLP:

; 5215 : 				break;
; 5216 : 			}
; 5217 : 		}
; 5218 : 
; 5219 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  002f8	33 db		 xor	 ebx, ebx
  002fa	33 f6		 xor	 esi, esi
  002fc	0f 1f 40 00	 npad	 4
$LL27@SetItemMLP:

; 5220 : 		{
; 5221 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00300	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00306	03 ce		 add	 ecx, esi
  00308	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0030d	83 f8 01	 cmp	 eax, 1
  00310	75 10		 jne	 SHORT $LN25@SetItemMLP
  00312	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00318	81 7c 30 08 63
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 355 ; 00000163H
  00320	74 15		 je	 SHORT $LN237@SetItemMLP
$LN25@SetItemMLP:

; 5215 : 				break;
; 5216 : 			}
; 5217 : 		}
; 5218 : 
; 5219 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00322	83 c6 18	 add	 esi, 24			; 00000018H
  00325	43		 inc	 ebx
  00326	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0032c	7c d2		 jl	 SHORT $LL27@SetItemMLP
  0032e	5f		 pop	 edi
  0032f	5e		 pop	 esi
  00330	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c2 08 00	 ret	 8
$LN237@SetItemMLP:

; 5222 : 				lpObj->Magic[iCount].m_Skill == 355 )
; 5223 : 			{
; 5224 : 				lpObj->m_MPSkillOpt.MpsSpearMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00337	8b c8		 mov	 ecx, eax
  00339	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0033c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00341	50		 push	 eax
  00342	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00346	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0034b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00350	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00353	50		 push	 eax
  00354	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00359	d9 9f 14 07 00
	00		 fstp	 DWORD PTR [edi+1812]
  0035f	5f		 pop	 edi
  00360	5e		 pop	 esi
  00361	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00362	8b e5		 mov	 esp, ebp
  00364	5d		 pop	 ebp
  00365	c2 08 00	 ret	 8
$LN136@SetItemMLP:
  00368	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5225 : 				break;
; 5226 : 			}
; 5227 : 		}
; 5228 : 		break;
; 5229 : 	case 4:
; 5230 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0036b	33 db		 xor	 ebx, ebx
  0036d	33 f6		 xor	 esi, esi
  0036f	90		 npad	 1
$LL30@SetItemMLP:

; 5231 : 		{
; 5232 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00370	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00376	03 ce		 add	 ecx, esi
  00378	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0037d	83 f8 01	 cmp	 eax, 1
  00380	75 10		 jne	 SHORT $LN28@SetItemMLP
  00382	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00388	81 7c 30 08 8d
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 397 ; 0000018dH
  00390	74 0e		 je	 SHORT $LN238@SetItemMLP
$LN28@SetItemMLP:

; 5225 : 				break;
; 5226 : 			}
; 5227 : 		}
; 5228 : 		break;
; 5229 : 	case 4:
; 5230 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00392	83 c6 18	 add	 esi, 24			; 00000018H
  00395	43		 inc	 ebx
  00396	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0039c	7c d2		 jl	 SHORT $LL30@SetItemMLP
  0039e	eb 28		 jmp	 SHORT $LN402@SetItemMLP
$LN238@SetItemMLP:

; 5233 : 				lpObj->Magic[iCount].m_Skill == 397 )
; 5234 : 			{
; 5235 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  003a0	8b c8		 mov	 ecx, eax
  003a2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  003a5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  003aa	50		 push	 eax
  003ab	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  003af	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  003b4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  003b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  003c2	d9 9f 28 07 00
	00		 fstp	 DWORD PTR [edi+1832]
$LN402@SetItemMLP:

; 5236 : 				break;
; 5237 : 			}
; 5238 : 		}
; 5239 : 
; 5240 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  003c8	33 db		 xor	 ebx, ebx
  003ca	33 f6		 xor	 esi, esi
  003cc	0f 1f 40 00	 npad	 4
$LL33@SetItemMLP:

; 5241 : 		{
; 5242 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  003d0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  003d6	03 ce		 add	 ecx, esi
  003d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  003dd	83 f8 01	 cmp	 eax, 1
  003e0	75 10		 jne	 SHORT $LN31@SetItemMLP
  003e2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  003e8	81 7c 30 08 90
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 400 ; 00000190H
  003f0	74 15		 je	 SHORT $LN239@SetItemMLP
$LN31@SetItemMLP:

; 5236 : 				break;
; 5237 : 			}
; 5238 : 		}
; 5239 : 
; 5240 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  003f2	83 c6 18	 add	 esi, 24			; 00000018H
  003f5	43		 inc	 ebx
  003f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  003fc	7c d2		 jl	 SHORT $LL33@SetItemMLP
  003fe	5f		 pop	 edi
  003ff	5e		 pop	 esi
  00400	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00401	8b e5		 mov	 esp, ebp
  00403	5d		 pop	 ebp
  00404	c2 08 00	 ret	 8
$LN239@SetItemMLP:

; 5243 : 				lpObj->Magic[iCount].m_Skill == 400 )
; 5244 : 			{
; 5245 : 				lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00407	8b c8		 mov	 ecx, eax
  00409	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0040c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00411	50		 push	 eax
  00412	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00416	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0041b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00420	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00423	50		 push	 eax
  00424	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00429	d9 9f 30 07 00
	00		 fstp	 DWORD PTR [edi+1840]
  0042f	5f		 pop	 edi
  00430	5e		 pop	 esi
  00431	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00432	8b e5		 mov	 esp, ebp
  00434	5d		 pop	 ebp
  00435	c2 08 00	 ret	 8
$LN139@SetItemMLP:
  00438	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5246 : 				break;
; 5247 : 			}
; 5248 : 		}
; 5249 : 		break;
; 5250 : 	case 5:
; 5251 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0043b	33 db		 xor	 ebx, ebx
  0043d	33 f6		 xor	 esi, esi
  0043f	90		 npad	 1
$LL36@SetItemMLP:

; 5252 : 		{
; 5253 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00440	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00446	03 ce		 add	 ecx, esi
  00448	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0044d	83 f8 01	 cmp	 eax, 1
  00450	75 10		 jne	 SHORT $LN34@SetItemMLP
  00452	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00458	81 7c 30 08 8e
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 398 ; 0000018eH
  00460	74 0e		 je	 SHORT $LN240@SetItemMLP
$LN34@SetItemMLP:

; 5246 : 				break;
; 5247 : 			}
; 5248 : 		}
; 5249 : 		break;
; 5250 : 	case 5:
; 5251 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00462	83 c6 18	 add	 esi, 24			; 00000018H
  00465	43		 inc	 ebx
  00466	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0046c	7c d2		 jl	 SHORT $LL36@SetItemMLP
  0046e	eb 28		 jmp	 SHORT $LN404@SetItemMLP
$LN240@SetItemMLP:

; 5254 : 				lpObj->Magic[iCount].m_Skill == 398 )
; 5255 : 			{
; 5256 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00470	8b c8		 mov	 ecx, eax
  00472	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00475	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0047a	50		 push	 eax
  0047b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0047f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00484	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00489	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0048c	50		 push	 eax
  0048d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00492	d9 9f 24 07 00
	00		 fstp	 DWORD PTR [edi+1828]
$LN404@SetItemMLP:

; 5257 : 				break;
; 5258 : 			}
; 5259 : 		}
; 5260 : 
; 5261 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00498	33 db		 xor	 ebx, ebx
  0049a	33 f6		 xor	 esi, esi
  0049c	0f 1f 40 00	 npad	 4
$LL39@SetItemMLP:

; 5262 : 		{
; 5263 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  004a0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  004a6	03 ce		 add	 ecx, esi
  004a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  004ad	83 f8 01	 cmp	 eax, 1
  004b0	75 10		 jne	 SHORT $LN37@SetItemMLP
  004b2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  004b8	81 7c 30 08 91
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 401 ; 00000191H
  004c0	74 15		 je	 SHORT $LN241@SetItemMLP
$LN37@SetItemMLP:

; 5257 : 				break;
; 5258 : 			}
; 5259 : 		}
; 5260 : 
; 5261 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  004c2	83 c6 18	 add	 esi, 24			; 00000018H
  004c5	43		 inc	 ebx
  004c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  004cc	7c d2		 jl	 SHORT $LL39@SetItemMLP
  004ce	5f		 pop	 edi
  004cf	5e		 pop	 esi
  004d0	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  004d1	8b e5		 mov	 esp, ebp
  004d3	5d		 pop	 ebp
  004d4	c2 08 00	 ret	 8
$LN241@SetItemMLP:

; 5264 : 				lpObj->Magic[iCount].m_Skill == 401 )
; 5265 : 			{
; 5266 : 				lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  004d7	8b c8		 mov	 ecx, eax
  004d9	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  004dc	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  004e1	50		 push	 eax
  004e2	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  004e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  004eb	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  004f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  004f3	50		 push	 eax
  004f4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  004f9	d9 9f 34 07 00
	00		 fstp	 DWORD PTR [edi+1844]
  004ff	5f		 pop	 edi
  00500	5e		 pop	 esi
  00501	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00502	8b e5		 mov	 esp, ebp
  00504	5d		 pop	 ebp
  00505	c2 08 00	 ret	 8
$LN142@SetItemMLP:
  00508	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5267 : 				break;
; 5268 : 			}
; 5269 : 		}
; 5270 : 		break;
; 5271 : 	case 6:
; 5272 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0050b	33 db		 xor	 ebx, ebx
  0050d	33 f6		 xor	 esi, esi
  0050f	90		 npad	 1
$LL42@SetItemMLP:

; 5273 : 		{
; 5274 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00510	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00516	03 ce		 add	 ecx, esi
  00518	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0051d	83 f8 01	 cmp	 eax, 1
  00520	75 1f		 jne	 SHORT $LN40@SetItemMLP

; 5275 : 			{
; 5276 : 				if( lpObj->Magic[iCount].m_Skill == 399 )

  00522	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00528	8b 44 30 08	 mov	 eax, DWORD PTR [eax+esi+8]
  0052c	3d 8f 01 00 00	 cmp	 eax, 399		; 0000018fH
  00531	74 7b		 je	 SHORT $LN242@SetItemMLP

; 5279 : 					break;
; 5280 : 				}
; 5281 : 
; 5282 : 				if( lpObj->Magic[iCount].m_Skill == 437 )

  00533	3d b5 01 00 00	 cmp	 eax, 437		; 000001b5H
  00538	74 46		 je	 SHORT $LN243@SetItemMLP

; 5286 : 				}
; 5287 : 
; 5288 : 				if( lpObj->Magic[iCount].m_Skill == 528 )

  0053a	3d 10 02 00 00	 cmp	 eax, 528		; 00000210H
  0053f	74 11		 je	 SHORT $LN244@SetItemMLP
$LN40@SetItemMLP:

; 5267 : 				break;
; 5268 : 			}
; 5269 : 		}
; 5270 : 		break;
; 5271 : 	case 6:
; 5272 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00541	83 c6 18	 add	 esi, 24			; 00000018H
  00544	43		 inc	 ebx
  00545	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0054b	7c c3		 jl	 SHORT $LL42@SetItemMLP
  0054d	e9 88 00 00 00	 jmp	 $LN406@SetItemMLP
$LN244@SetItemMLP:

; 5289 : 				{
; 5290 : 					lpObj->m_MPSkillOpt.MpsShieldStrength3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00552	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00558	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0055b	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00560	50		 push	 eax
  00561	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00565	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0056a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0056f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00572	50		 push	 eax
  00573	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00578	d9 9f bc 07 00
	00		 fstp	 DWORD PTR [edi+1980]
  0057e	eb 5a		 jmp	 SHORT $LN406@SetItemMLP
$LN243@SetItemMLP:

; 5283 : 				{
; 5284 : 					lpObj->m_MPSkillOpt.MpsShieldStrength2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00580	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00586	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00589	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0058e	50		 push	 eax
  0058f	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00593	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00598	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0059d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  005a0	50		 push	 eax
  005a1	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  005a6	d9 9f 4c 07 00
	00		 fstp	 DWORD PTR [edi+1868]

; 5285 : 					break;

  005ac	eb 2c		 jmp	 SHORT $LN406@SetItemMLP
$LN242@SetItemMLP:

; 5277 : 				{
; 5278 : 					lpObj->m_MPSkillOpt.MpsShieldStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  005ae	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  005b4	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  005b7	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  005bc	50		 push	 eax
  005bd	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  005c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  005c6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  005cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  005ce	50		 push	 eax
  005cf	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  005d4	d9 9f 2c 07 00
	00		 fstp	 DWORD PTR [edi+1836]
$LN406@SetItemMLP:

; 5291 : 					break;
; 5292 : 				}
; 5293 : 			}
; 5294 : 		}
; 5295 : 
; 5296 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  005da	33 db		 xor	 ebx, ebx
  005dc	33 f6		 xor	 esi, esi
  005de	66 90		 npad	 2
$LL45@SetItemMLP:

; 5297 : 		{
; 5298 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  005e0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  005e6	03 ce		 add	 ecx, esi
  005e8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  005ed	83 f8 01	 cmp	 eax, 1
  005f0	75 23		 jne	 SHORT $LN43@SetItemMLP

; 5299 : 			{
; 5300 : 				if( lpObj->Magic[iCount].m_Skill == 402 )

  005f2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  005f8	8b 44 30 08	 mov	 eax, DWORD PTR [eax+esi+8]
  005fc	3d 92 01 00 00	 cmp	 eax, 402		; 00000192H
  00601	0f 84 8d 00 00
	00		 je	 $LN245@SetItemMLP

; 5303 : 					break;
; 5304 : 				}
; 5305 : 
; 5306 : 				if( lpObj->Magic[iCount].m_Skill == 440 )

  00607	3d b8 01 00 00	 cmp	 eax, 440		; 000001b8H
  0060c	74 51		 je	 SHORT $LN246@SetItemMLP

; 5309 : 					break;
; 5310 : 				}
; 5311 : 
; 5312 : 				if( lpObj->Magic[iCount].m_Skill == 532 )

  0060e	3d 14 02 00 00	 cmp	 eax, 532		; 00000214H
  00613	74 15		 je	 SHORT $LN247@SetItemMLP
$LN43@SetItemMLP:

; 5291 : 					break;
; 5292 : 				}
; 5293 : 			}
; 5294 : 		}
; 5295 : 
; 5296 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00615	83 c6 18	 add	 esi, 24			; 00000018H
  00618	43		 inc	 ebx
  00619	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0061f	7c bf		 jl	 SHORT $LL45@SetItemMLP
  00621	5f		 pop	 edi
  00622	5e		 pop	 esi
  00623	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00624	8b e5		 mov	 esp, ebp
  00626	5d		 pop	 ebp
  00627	c2 08 00	 ret	 8
$LN247@SetItemMLP:

; 5313 : 				{
; 5314 : 					lpObj->m_MPSkillOpt.MpsShieldMastery3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0062a	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00630	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00633	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00638	50		 push	 eax
  00639	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0063d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00642	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00647	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0064a	50		 push	 eax
  0064b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00650	d9 9f c0 07 00
	00		 fstp	 DWORD PTR [edi+1984]
  00656	5f		 pop	 edi
  00657	5e		 pop	 esi
  00658	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00659	8b e5		 mov	 esp, ebp
  0065b	5d		 pop	 ebp
  0065c	c2 08 00	 ret	 8
$LN246@SetItemMLP:

; 5307 : 				{
; 5308 : 					lpObj->m_MPSkillOpt.MpsShieldMastery2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  0065f	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00665	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00668	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0066d	50		 push	 eax
  0066e	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00672	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00677	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0067c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0067f	50		 push	 eax
  00680	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00685	d9 9f 50 07 00
	00		 fstp	 DWORD PTR [edi+1872]
  0068b	5f		 pop	 edi
  0068c	5e		 pop	 esi
  0068d	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  0068e	8b e5		 mov	 esp, ebp
  00690	5d		 pop	 ebp
  00691	c2 08 00	 ret	 8
$LN245@SetItemMLP:

; 5301 : 				{
; 5302 : 					lpObj->m_MPSkillOpt.MpsShieldMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00694	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  0069a	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0069d	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  006a2	50		 push	 eax
  006a3	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  006a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  006ac	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  006b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  006b4	50		 push	 eax
  006b5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  006ba	d9 9f 38 07 00
	00		 fstp	 DWORD PTR [edi+1848]
  006c0	5f		 pop	 edi
  006c1	5e		 pop	 esi
  006c2	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  006c3	8b e5		 mov	 esp, ebp
  006c5	5d		 pop	 ebp
  006c6	c2 08 00	 ret	 8
$LN151@SetItemMLP:
  006c9	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5315 : 					break;
; 5316 : 				}
; 5317 : 			}
; 5318 : 		}
; 5319 : 		break;
; 5320 : 	case 7:
; 5321 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  006cc	33 db		 xor	 ebx, ebx
  006ce	33 f6		 xor	 esi, esi
$LL48@SetItemMLP:

; 5322 : 		{
; 5323 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  006d0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  006d6	03 ce		 add	 ecx, esi
  006d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  006dd	83 f8 01	 cmp	 eax, 1
  006e0	75 10		 jne	 SHORT $LN46@SetItemMLP
  006e2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  006e8	81 7c 30 08 b3
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 435 ; 000001b3H
  006f0	74 0e		 je	 SHORT $LN248@SetItemMLP
$LN46@SetItemMLP:

; 5315 : 					break;
; 5316 : 				}
; 5317 : 			}
; 5318 : 		}
; 5319 : 		break;
; 5320 : 	case 7:
; 5321 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  006f2	83 c6 18	 add	 esi, 24			; 00000018H
  006f5	43		 inc	 ebx
  006f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  006fc	7c d2		 jl	 SHORT $LL48@SetItemMLP
  006fe	eb 28		 jmp	 SHORT $LN408@SetItemMLP
$LN248@SetItemMLP:

; 5324 : 				lpObj->Magic[iCount].m_Skill == 435 )
; 5325 : 			{
; 5326 : 				lpObj->m_MPSkillOpt.MpsBowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00700	8b c8		 mov	 ecx, eax
  00702	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00705	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0070a	50		 push	 eax
  0070b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0070f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00714	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00719	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0071c	50		 push	 eax
  0071d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00722	d9 9f 3c 07 00
	00		 fstp	 DWORD PTR [edi+1852]
$LN408@SetItemMLP:

; 5327 : 				break;
; 5328 : 			}
; 5329 : 		}
; 5330 : 
; 5331 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00728	33 db		 xor	 ebx, ebx
  0072a	33 f6		 xor	 esi, esi
  0072c	0f 1f 40 00	 npad	 4
$LL51@SetItemMLP:

; 5332 : 		{
; 5333 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00730	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00736	03 ce		 add	 ecx, esi
  00738	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0073d	83 f8 01	 cmp	 eax, 1
  00740	75 10		 jne	 SHORT $LN49@SetItemMLP
  00742	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00748	81 7c 30 08 b6
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 438 ; 000001b6H
  00750	74 15		 je	 SHORT $LN249@SetItemMLP
$LN49@SetItemMLP:

; 5327 : 				break;
; 5328 : 			}
; 5329 : 		}
; 5330 : 
; 5331 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00752	83 c6 18	 add	 esi, 24			; 00000018H
  00755	43		 inc	 ebx
  00756	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0075c	7c d2		 jl	 SHORT $LL51@SetItemMLP
  0075e	5f		 pop	 edi
  0075f	5e		 pop	 esi
  00760	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00761	8b e5		 mov	 esp, ebp
  00763	5d		 pop	 ebp
  00764	c2 08 00	 ret	 8
$LN249@SetItemMLP:

; 5334 : 				lpObj->Magic[iCount].m_Skill == 438 )
; 5335 : 			{
; 5336 : 				lpObj->m_MPSkillOpt.MpsBowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00767	8b c8		 mov	 ecx, eax
  00769	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0076c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00771	50		 push	 eax
  00772	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00776	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0077b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00780	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00783	50		 push	 eax
  00784	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00789	d9 9f 40 07 00
	00		 fstp	 DWORD PTR [edi+1856]
  0078f	5f		 pop	 edi
  00790	5e		 pop	 esi
  00791	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00792	8b e5		 mov	 esp, ebp
  00794	5d		 pop	 ebp
  00795	c2 08 00	 ret	 8
$LN154@SetItemMLP:
  00798	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5337 : 				break;
; 5338 : 			}
; 5339 : 		}
; 5340 : 		break;
; 5341 : 	case 8:
; 5342 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0079b	33 db		 xor	 ebx, ebx
  0079d	33 f6		 xor	 esi, esi
  0079f	90		 npad	 1
$LL54@SetItemMLP:

; 5343 : 		{
; 5344 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  007a0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  007a6	03 ce		 add	 ecx, esi
  007a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  007ad	83 f8 01	 cmp	 eax, 1
  007b0	75 10		 jne	 SHORT $LN52@SetItemMLP
  007b2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  007b8	81 7c 30 08 b4
	01 00 00	 cmp	 DWORD PTR [eax+esi+8], 436 ; 000001b4H
  007c0	74 0e		 je	 SHORT $LN250@SetItemMLP
$LN52@SetItemMLP:

; 5337 : 				break;
; 5338 : 			}
; 5339 : 		}
; 5340 : 		break;
; 5341 : 	case 8:
; 5342 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  007c2	83 c6 18	 add	 esi, 24			; 00000018H
  007c5	43		 inc	 ebx
  007c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  007cc	7c d2		 jl	 SHORT $LL54@SetItemMLP
  007ce	eb 28		 jmp	 SHORT $LN410@SetItemMLP
$LN250@SetItemMLP:

; 5345 : 				lpObj->Magic[iCount].m_Skill == 436 )
; 5346 : 			{
; 5347 : 				lpObj->m_MPSkillOpt.MpsCrossbowStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  007d0	8b c8		 mov	 ecx, eax
  007d2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  007d5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  007da	50		 push	 eax
  007db	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  007df	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  007e4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  007e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  007ec	50		 push	 eax
  007ed	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  007f2	d9 9f 44 07 00
	00		 fstp	 DWORD PTR [edi+1860]
$LN410@SetItemMLP:

; 5348 : 				break;
; 5349 : 			}
; 5350 : 		}
; 5351 : 
; 5352 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  007f8	33 db		 xor	 ebx, ebx
  007fa	33 f6		 xor	 esi, esi
  007fc	0f 1f 40 00	 npad	 4
$LL57@SetItemMLP:

; 5353 : 		{
; 5354 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00800	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00806	03 ce		 add	 ecx, esi
  00808	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0080d	83 f8 01	 cmp	 eax, 1
  00810	75 10		 jne	 SHORT $LN55@SetItemMLP
  00812	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00818	81 7c 06 08 b7
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 439 ; 000001b7H
  00820	74 15		 je	 SHORT $LN251@SetItemMLP
$LN55@SetItemMLP:

; 5348 : 				break;
; 5349 : 			}
; 5350 : 		}
; 5351 : 
; 5352 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00822	83 c6 18	 add	 esi, 24			; 00000018H
  00825	43		 inc	 ebx
  00826	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0082c	7c d2		 jl	 SHORT $LL57@SetItemMLP
  0082e	5f		 pop	 edi
  0082f	5e		 pop	 esi
  00830	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00831	8b e5		 mov	 esp, ebp
  00833	5d		 pop	 ebp
  00834	c2 08 00	 ret	 8
$LN251@SetItemMLP:

; 5355 : 				lpObj->Magic[iCount].m_Skill == 439 )
; 5356 : 			{
; 5357 : 				lpObj->m_MPSkillOpt.MpsCrossbowMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00837	8b c8		 mov	 ecx, eax
  00839	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0083c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00841	50		 push	 eax
  00842	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00846	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0084b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00850	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00853	50		 push	 eax
  00854	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00859	d9 9f 48 07 00
	00		 fstp	 DWORD PTR [edi+1864]
  0085f	5f		 pop	 edi
  00860	5e		 pop	 esi
  00861	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00862	8b e5		 mov	 esp, ebp
  00864	5d		 pop	 ebp
  00865	c2 08 00	 ret	 8
$LN157@SetItemMLP:
  00868	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5358 : 				break;
; 5359 : 			}
; 5360 : 		}
; 5361 : 		break;
; 5362 : 	case 9:
; 5363 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0086b	33 db		 xor	 ebx, ebx
  0086d	33 f6		 xor	 esi, esi
  0086f	90		 npad	 1
$LL60@SetItemMLP:

; 5364 : 		{
; 5365 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00870	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00876	03 ce		 add	 ecx, esi
  00878	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0087d	83 f8 01	 cmp	 eax, 1
  00880	75 10		 jne	 SHORT $LN58@SetItemMLP
  00882	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00888	81 7c 06 08 d1
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 465 ; 000001d1H
  00890	74 0e		 je	 SHORT $LN252@SetItemMLP
$LN58@SetItemMLP:

; 5358 : 				break;
; 5359 : 			}
; 5360 : 		}
; 5361 : 		break;
; 5362 : 	case 9:
; 5363 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00892	83 c6 18	 add	 esi, 24			; 00000018H
  00895	43		 inc	 ebx
  00896	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0089c	7c d2		 jl	 SHORT $LL60@SetItemMLP
  0089e	eb 28		 jmp	 SHORT $LN412@SetItemMLP
$LN252@SetItemMLP:

; 5366 : 				lpObj->Magic[iCount].m_Skill == 465 )
; 5367 : 			{
; 5368 : 				lpObj->m_MPSkillOpt.MpsStickStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  008a0	8b c8		 mov	 ecx, eax
  008a2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  008a5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  008aa	50		 push	 eax
  008ab	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  008af	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  008b4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  008b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  008bc	50		 push	 eax
  008bd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  008c2	d9 9f 80 07 00
	00		 fstp	 DWORD PTR [edi+1920]
$LN412@SetItemMLP:

; 5369 : 				break;
; 5370 : 			}
; 5371 : 		}
; 5372 : 
; 5373 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  008c8	33 db		 xor	 ebx, ebx
  008ca	33 f6		 xor	 esi, esi
  008cc	0f 1f 40 00	 npad	 4
$LL63@SetItemMLP:

; 5374 : 		{
; 5375 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  008d0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  008d6	03 ce		 add	 ecx, esi
  008d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  008dd	83 f8 01	 cmp	 eax, 1
  008e0	75 10		 jne	 SHORT $LN61@SetItemMLP
  008e2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  008e8	81 7c 06 08 d3
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 467 ; 000001d3H
  008f0	74 15		 je	 SHORT $LN253@SetItemMLP
$LN61@SetItemMLP:

; 5369 : 				break;
; 5370 : 			}
; 5371 : 		}
; 5372 : 
; 5373 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  008f2	83 c6 18	 add	 esi, 24			; 00000018H
  008f5	43		 inc	 ebx
  008f6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  008fc	7c d2		 jl	 SHORT $LL63@SetItemMLP
  008fe	5f		 pop	 edi
  008ff	5e		 pop	 esi
  00900	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00901	8b e5		 mov	 esp, ebp
  00903	5d		 pop	 ebp
  00904	c2 08 00	 ret	 8
$LN253@SetItemMLP:

; 5376 : 				lpObj->Magic[iCount].m_Skill == 467 )
; 5377 : 			{
; 5378 : 				lpObj->m_MPSkillOpt.MpsStickMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00907	8b c8		 mov	 ecx, eax
  00909	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0090c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00911	50		 push	 eax
  00912	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00916	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0091b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00920	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00923	50		 push	 eax
  00924	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00929	d9 9f 88 07 00
	00		 fstp	 DWORD PTR [edi+1928]
  0092f	5f		 pop	 edi
  00930	5e		 pop	 esi
  00931	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00932	8b e5		 mov	 esp, ebp
  00934	5d		 pop	 ebp
  00935	c2 08 00	 ret	 8
$LN160@SetItemMLP:
  00938	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5379 : 				break;
; 5380 : 			}
; 5381 : 		}
; 5382 : 		break;
; 5383 : 	case 10:
; 5384 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  0093b	33 db		 xor	 ebx, ebx
  0093d	33 f6		 xor	 esi, esi
  0093f	90		 npad	 1
$LL66@SetItemMLP:

; 5385 : 		{
; 5386 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00940	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00946	03 ce		 add	 ecx, esi
  00948	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0094d	83 f8 01	 cmp	 eax, 1
  00950	75 10		 jne	 SHORT $LN64@SetItemMLP
  00952	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00958	81 7c 06 08 d2
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 466 ; 000001d2H
  00960	74 0e		 je	 SHORT $LN254@SetItemMLP
$LN64@SetItemMLP:

; 5379 : 				break;
; 5380 : 			}
; 5381 : 		}
; 5382 : 		break;
; 5383 : 	case 10:
; 5384 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00962	83 c6 18	 add	 esi, 24			; 00000018H
  00965	43		 inc	 ebx
  00966	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0096c	7c d2		 jl	 SHORT $LL66@SetItemMLP
  0096e	eb 28		 jmp	 SHORT $LN414@SetItemMLP
$LN254@SetItemMLP:

; 5387 : 				lpObj->Magic[iCount].m_Skill == 466 )
; 5388 : 			{
; 5389 : 				lpObj->m_MPSkillOpt.MpsTomeStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00970	8b c8		 mov	 ecx, eax
  00972	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00975	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  0097a	50		 push	 eax
  0097b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  0097f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00984	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00989	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0098c	50		 push	 eax
  0098d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00992	d9 9f 84 07 00
	00		 fstp	 DWORD PTR [edi+1924]
$LN414@SetItemMLP:

; 5390 : 				break;
; 5391 : 			}
; 5392 : 		}
; 5393 : 
; 5394 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00998	33 db		 xor	 ebx, ebx
  0099a	33 f6		 xor	 esi, esi
  0099c	0f 1f 40 00	 npad	 4
$LL69@SetItemMLP:

; 5395 : 		{
; 5396 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  009a0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  009a6	03 ce		 add	 ecx, esi
  009a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  009ad	83 f8 01	 cmp	 eax, 1
  009b0	75 10		 jne	 SHORT $LN67@SetItemMLP
  009b2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  009b8	81 7c 06 08 d4
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 468 ; 000001d4H
  009c0	74 15		 je	 SHORT $LN255@SetItemMLP
$LN67@SetItemMLP:

; 5390 : 				break;
; 5391 : 			}
; 5392 : 		}
; 5393 : 
; 5394 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  009c2	83 c6 18	 add	 esi, 24			; 00000018H
  009c5	43		 inc	 ebx
  009c6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  009cc	7c d2		 jl	 SHORT $LL69@SetItemMLP
  009ce	5f		 pop	 edi
  009cf	5e		 pop	 esi
  009d0	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  009d1	8b e5		 mov	 esp, ebp
  009d3	5d		 pop	 ebp
  009d4	c2 08 00	 ret	 8
$LN255@SetItemMLP:

; 5397 : 				lpObj->Magic[iCount].m_Skill == 468 )
; 5398 : 			{
; 5399 : 				lpObj->m_MPSkillOpt.MpsTomeMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  009d7	8b c8		 mov	 ecx, eax
  009d9	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  009dc	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  009e1	50		 push	 eax
  009e2	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  009e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  009eb	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  009f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  009f3	50		 push	 eax
  009f4	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  009f9	d9 9f 8c 07 00
	00		 fstp	 DWORD PTR [edi+1932]
  009ff	5f		 pop	 edi
  00a00	5e		 pop	 esi
  00a01	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00a02	8b e5		 mov	 esp, ebp
  00a04	5d		 pop	 ebp
  00a05	c2 08 00	 ret	 8
$LN163@SetItemMLP:
  00a08	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 5400 : 				break;
; 5401 : 			}
; 5402 : 		}
; 5403 : 		break;
; 5404 : 	case 11:
; 5405 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a0b	33 db		 xor	 ebx, ebx
  00a0d	33 ff		 xor	 edi, edi
  00a0f	90		 npad	 1
$LL72@SetItemMLP:

; 5406 : 		{
; 5407 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00a10	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00a16	03 cf		 add	 ecx, edi
  00a18	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00a1d	83 f8 01	 cmp	 eax, 1
  00a20	75 10		 jne	 SHORT $LN70@SetItemMLP
  00a22	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00a28	81 7c 07 08 0f
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 527 ; 0000020fH
  00a30	74 0e		 je	 SHORT $LN256@SetItemMLP
$LN70@SetItemMLP:

; 5400 : 				break;
; 5401 : 			}
; 5402 : 		}
; 5403 : 		break;
; 5404 : 	case 11:
; 5405 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a32	83 c7 18	 add	 edi, 24			; 00000018H
  00a35	43		 inc	 ebx
  00a36	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00a3c	7c d2		 jl	 SHORT $LL72@SetItemMLP
  00a3e	eb 28		 jmp	 SHORT $LN416@SetItemMLP
$LN256@SetItemMLP:

; 5408 : 				lpObj->Magic[iCount].m_Skill == 527 )
; 5409 : 			{
; 5410 : 				lpObj->m_MPSkillOpt.MpsScepterStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00a40	8b c8		 mov	 ecx, eax
  00a42	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00a45	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00a4a	50		 push	 eax
  00a4b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00a4f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00a54	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00a59	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00a5c	50		 push	 eax
  00a5d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00a62	d9 9e b4 07 00
	00		 fstp	 DWORD PTR [esi+1972]
$LN416@SetItemMLP:

; 5411 : 				break;
; 5412 : 			}
; 5413 : 		}
; 5414 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a68	33 db		 xor	 ebx, ebx
  00a6a	33 ff		 xor	 edi, edi
  00a6c	0f 1f 40 00	 npad	 4
$LL75@SetItemMLP:

; 5415 : 		{
; 5416 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00a70	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00a76	03 cf		 add	 ecx, edi
  00a78	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00a7d	83 f8 01	 cmp	 eax, 1
  00a80	75 10		 jne	 SHORT $LN73@SetItemMLP
  00a82	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00a88	81 7c 07 08 11
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 529 ; 00000211H
  00a90	74 0e		 je	 SHORT $LN257@SetItemMLP
$LN73@SetItemMLP:

; 5411 : 				break;
; 5412 : 			}
; 5413 : 		}
; 5414 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00a92	83 c7 18	 add	 edi, 24			; 00000018H
  00a95	43		 inc	 ebx
  00a96	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00a9c	7c d2		 jl	 SHORT $LL75@SetItemMLP
  00a9e	eb 28		 jmp	 SHORT $LN417@SetItemMLP
$LN257@SetItemMLP:

; 5417 : 				lpObj->Magic[iCount].m_Skill == 529 )
; 5418 : 			{
; 5419 : 				lpObj->m_MPSkillOpt.MpsUseScepterPetStr = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00aa0	8b c8		 mov	 ecx, eax
  00aa2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00aa5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00aaa	50		 push	 eax
  00aab	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00aaf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00ab4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00ab9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00ac2	d9 9e c4 07 00
	00		 fstp	 DWORD PTR [esi+1988]
$LN417@SetItemMLP:

; 5420 : 				break;
; 5421 : 			}
; 5422 : 		}
; 5423 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00ac8	33 db		 xor	 ebx, ebx
  00aca	33 ff		 xor	 edi, edi
  00acc	0f 1f 40 00	 npad	 4
$LL78@SetItemMLP:

; 5424 : 		{
; 5425 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00ad0	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00ad6	03 cf		 add	 ecx, edi
  00ad8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00add	83 f8 01	 cmp	 eax, 1
  00ae0	75 10		 jne	 SHORT $LN76@SetItemMLP
  00ae2	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00ae8	81 7c 07 08 13
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 531 ; 00000213H
  00af0	74 0e		 je	 SHORT $LN258@SetItemMLP
$LN76@SetItemMLP:

; 5420 : 				break;
; 5421 : 			}
; 5422 : 		}
; 5423 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00af2	83 c7 18	 add	 edi, 24			; 00000018H
  00af5	43		 inc	 ebx
  00af6	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00afc	7c d2		 jl	 SHORT $LL78@SetItemMLP
  00afe	eb 28		 jmp	 SHORT $LN418@SetItemMLP
$LN258@SetItemMLP:

; 5426 : 				lpObj->Magic[iCount].m_Skill == 531 )
; 5427 : 			{
; 5428 : 				lpObj->m_MPSkillOpt.MpsScepterMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00b00	8b c8		 mov	 ecx, eax
  00b02	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00b05	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00b0a	50		 push	 eax
  00b0b	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00b0f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00b14	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00b19	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00b1c	50		 push	 eax
  00b1d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00b22	d9 9e b8 07 00
	00		 fstp	 DWORD PTR [esi+1976]
$LN418@SetItemMLP:

; 5429 : 				break;
; 5430 : 			}
; 5431 : 		}
; 5432 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b28	33 db		 xor	 ebx, ebx
  00b2a	33 ff		 xor	 edi, edi
  00b2c	0f 1f 40 00	 npad	 4
$LL81@SetItemMLP:

; 5433 : 		{
; 5434 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00b30	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00b36	03 cf		 add	 ecx, edi
  00b38	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00b3d	83 f8 01	 cmp	 eax, 1
  00b40	75 10		 jne	 SHORT $LN79@SetItemMLP
  00b42	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00b48	81 7c 07 08 15
	02 00 00	 cmp	 DWORD PTR [edi+eax+8], 533 ; 00000215H
  00b50	74 15		 je	 SHORT $LN259@SetItemMLP
$LN79@SetItemMLP:

; 5429 : 				break;
; 5430 : 			}
; 5431 : 		}
; 5432 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b52	83 c7 18	 add	 edi, 24			; 00000018H
  00b55	43		 inc	 ebx
  00b56	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00b5c	7c d2		 jl	 SHORT $LL81@SetItemMLP
  00b5e	5f		 pop	 edi
  00b5f	5e		 pop	 esi
  00b60	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00b61	8b e5		 mov	 esp, ebp
  00b63	5d		 pop	 ebp
  00b64	c2 08 00	 ret	 8
$LN259@SetItemMLP:

; 5435 : 				lpObj->Magic[iCount].m_Skill == 533 )
; 5436 : 			{
; 5437 : 				lpObj->m_MPSkillOpt.MpsCommandAttackInc = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00b67	8b c8		 mov	 ecx, eax
  00b69	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00b6c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00b71	50		 push	 eax
  00b72	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00b76	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00b7b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00b80	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00b83	50		 push	 eax
  00b84	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00b89	5f		 pop	 edi
  00b8a	d9 9e c8 07 00
	00		 fstp	 DWORD PTR [esi+1992]
  00b90	5e		 pop	 esi
  00b91	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00b92	8b e5		 mov	 esp, ebp
  00b94	5d		 pop	 ebp
  00b95	c2 08 00	 ret	 8
$LN168@SetItemMLP:
  00b98	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5438 : 				break;
; 5439 : 			}
; 5440 : 		}
; 5441 : 		break;
; 5442 : 	case 12:
; 5443 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00b9b	33 db		 xor	 ebx, ebx
  00b9d	33 f6		 xor	 esi, esi
  00b9f	90		 npad	 1
$LL84@SetItemMLP:

; 5444 : 		{
; 5445 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00ba0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00ba6	03 ce		 add	 ecx, esi
  00ba8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00bad	83 f8 01	 cmp	 eax, 1
  00bb0	75 10		 jne	 SHORT $LN82@SetItemMLP
  00bb2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00bb8	81 7c 06 08 38
	02 00 00	 cmp	 DWORD PTR [esi+eax+8], 568 ; 00000238H
  00bc0	74 0e		 je	 SHORT $LN260@SetItemMLP
$LN82@SetItemMLP:

; 5438 : 				break;
; 5439 : 			}
; 5440 : 		}
; 5441 : 		break;
; 5442 : 	case 12:
; 5443 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00bc2	83 c6 18	 add	 esi, 24			; 00000018H
  00bc5	43		 inc	 ebx
  00bc6	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00bcc	7c d2		 jl	 SHORT $LL84@SetItemMLP
  00bce	eb 28		 jmp	 SHORT $LN420@SetItemMLP
$LN260@SetItemMLP:

; 5446 : 				lpObj->Magic[iCount].m_Skill == 568 )
; 5447 : 			{
; 5448 : 				lpObj->m_MPSkillOpt.MpsFistStrength = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00bd0	8b c8		 mov	 ecx, eax
  00bd2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00bd5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00bda	50		 push	 eax
  00bdb	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00bdf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00be4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00be9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00bec	50		 push	 eax
  00bed	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00bf2	d9 9f 24 08 00
	00		 fstp	 DWORD PTR [edi+2084]
$LN420@SetItemMLP:

; 5449 : 				break;
; 5450 : 			}
; 5451 : 		}
; 5452 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00bf8	33 db		 xor	 ebx, ebx
  00bfa	33 f6		 xor	 esi, esi
  00bfc	0f 1f 40 00	 npad	 4
$LL87@SetItemMLP:

; 5453 : 		{
; 5454 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00c00	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00c06	03 ce		 add	 ecx, esi
  00c08	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00c0d	83 f8 01	 cmp	 eax, 1
  00c10	75 10		 jne	 SHORT $LN85@SetItemMLP
  00c12	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00c18	81 7c 06 08 3b
	02 00 00	 cmp	 DWORD PTR [esi+eax+8], 571 ; 0000023bH
  00c20	74 15		 je	 SHORT $LN261@SetItemMLP
$LN85@SetItemMLP:

; 5449 : 				break;
; 5450 : 			}
; 5451 : 		}
; 5452 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00c22	83 c6 18	 add	 esi, 24			; 00000018H
  00c25	43		 inc	 ebx
  00c26	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00c2c	7c d2		 jl	 SHORT $LL87@SetItemMLP
  00c2e	5f		 pop	 edi
  00c2f	5e		 pop	 esi
  00c30	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00c31	8b e5		 mov	 esp, ebp
  00c33	5d		 pop	 ebp
  00c34	c2 08 00	 ret	 8
$LN261@SetItemMLP:

; 5455 : 				lpObj->Magic[iCount].m_Skill == 571 )
; 5456 : 			{
; 5457 : 				lpObj->m_MPSkillOpt.MpsFistMastery = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00c37	8b c8		 mov	 ecx, eax
  00c39	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00c3c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00c41	50		 push	 eax
  00c42	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00c46	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00c4b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00c50	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00c53	50		 push	 eax
  00c54	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00c59	d9 9f 28 08 00
	00		 fstp	 DWORD PTR [edi+2088]
  00c5f	5f		 pop	 edi
  00c60	5e		 pop	 esi
  00c61	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00c62	8b e5		 mov	 esp, ebp
  00c64	5d		 pop	 ebp
  00c65	c2 08 00	 ret	 8
$LN171@SetItemMLP:
  00c68	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5458 : 				break;
; 5459 : 			}
; 5460 : 		}
; 5461 : 		break;
; 5462 : 	case 20:
; 5463 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00c6b	33 db		 xor	 ebx, ebx
  00c6d	33 f6		 xor	 esi, esi
  00c6f	90		 npad	 1
$LL90@SetItemMLP:

; 5464 : 		{
; 5465 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00c70	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00c76	03 ce		 add	 ecx, esi
  00c78	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00c7d	83 f8 01	 cmp	 eax, 1
  00c80	75 10		 jne	 SHORT $LN88@SetItemMLP
  00c82	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00c88	81 7c 06 08 42
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 322 ; 00000142H
  00c90	74 0e		 je	 SHORT $LN262@SetItemMLP
$LN88@SetItemMLP:

; 5458 : 				break;
; 5459 : 			}
; 5460 : 		}
; 5461 : 		break;
; 5462 : 	case 20:
; 5463 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00c92	83 c6 18	 add	 esi, 24			; 00000018H
  00c95	43		 inc	 ebx
  00c96	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00c9c	7c d2		 jl	 SHORT $LL90@SetItemMLP
  00c9e	eb 28		 jmp	 SHORT $LN422@SetItemMLP
$LN262@SetItemMLP:

; 5466 : 				lpObj->Magic[iCount].m_Skill == 322 )
; 5467 : 			{
; 5468 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00ca0	8b c8		 mov	 ecx, eax
  00ca2	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00ca5	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00caa	50		 push	 eax
  00cab	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00caf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00cb4	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00cb9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00cbc	50		 push	 eax
  00cbd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00cc2	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN422@SetItemMLP:

; 5469 : 				break;
; 5470 : 			}
; 5471 : 		}
; 5472 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00cc8	33 db		 xor	 ebx, ebx
  00cca	33 f6		 xor	 esi, esi
  00ccc	0f 1f 40 00	 npad	 4
$LL93@SetItemMLP:

; 5473 : 		{
; 5474 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00cd0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00cd6	03 ce		 add	 ecx, esi
  00cd8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00cdd	83 f8 01	 cmp	 eax, 1
  00ce0	75 14		 jne	 SHORT $LN91@SetItemMLP
  00ce2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00ce8	81 7c 06 08 44
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 324 ; 00000144H
  00cf0	0f 84 31 03 00
	00		 je	 $LN273@SetItemMLP
$LN91@SetItemMLP:

; 5469 : 				break;
; 5470 : 			}
; 5471 : 		}
; 5472 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00cf6	83 c6 18	 add	 esi, 24			; 00000018H
  00cf9	43		 inc	 ebx
  00cfa	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00d00	7c ce		 jl	 SHORT $LL93@SetItemMLP
  00d02	5f		 pop	 edi
  00d03	5e		 pop	 esi
  00d04	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00d05	8b e5		 mov	 esp, ebp
  00d07	5d		 pop	 ebp
  00d08	c2 08 00	 ret	 8
$LN174@SetItemMLP:
  00d0b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5475 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5476 : 			{
; 5477 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5478 : 				break;
; 5479 : 			}
; 5480 : 		}
; 5481 : 		break;
; 5482 : 	case 21:
; 5483 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00d0e	33 db		 xor	 ebx, ebx
  00d10	33 f6		 xor	 esi, esi
$LL96@SetItemMLP:

; 5484 : 		{
; 5485 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00d12	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00d18	03 ce		 add	 ecx, esi
  00d1a	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00d1f	83 f8 01	 cmp	 eax, 1
  00d22	75 10		 jne	 SHORT $LN94@SetItemMLP
  00d24	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00d2a	81 7c 06 08 77
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 375 ; 00000177H
  00d32	74 0e		 je	 SHORT $LN264@SetItemMLP
$LN94@SetItemMLP:

; 5475 : 				lpObj->Magic[iCount].m_Skill == 324 )
; 5476 : 			{
; 5477 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5478 : 				break;
; 5479 : 			}
; 5480 : 		}
; 5481 : 		break;
; 5482 : 	case 21:
; 5483 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00d34	83 c6 18	 add	 esi, 24			; 00000018H
  00d37	43		 inc	 ebx
  00d38	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00d3e	7c d2		 jl	 SHORT $LL96@SetItemMLP
  00d40	eb 28		 jmp	 SHORT $LN424@SetItemMLP
$LN264@SetItemMLP:

; 5486 : 				lpObj->Magic[iCount].m_Skill == 375 )
; 5487 : 			{
; 5488 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00d42	8b c8		 mov	 ecx, eax
  00d44	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00d47	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00d4c	50		 push	 eax
  00d4d	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00d51	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00d56	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00d5b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00d5e	50		 push	 eax
  00d5f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00d64	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN424@SetItemMLP:

; 5489 : 				break;
; 5490 : 			}
; 5491 : 		}
; 5492 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00d6a	33 db		 xor	 ebx, ebx
  00d6c	33 f6		 xor	 esi, esi
  00d6e	66 90		 npad	 2
$LL99@SetItemMLP:

; 5493 : 		{
; 5494 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00d70	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00d76	03 ce		 add	 ecx, esi
  00d78	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00d7d	83 f8 01	 cmp	 eax, 1
  00d80	75 14		 jne	 SHORT $LN97@SetItemMLP
  00d82	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00d88	81 7c 06 08 79
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 377 ; 00000179H
  00d90	0f 84 91 02 00
	00		 je	 $LN273@SetItemMLP
$LN97@SetItemMLP:

; 5489 : 				break;
; 5490 : 			}
; 5491 : 		}
; 5492 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00d96	83 c6 18	 add	 esi, 24			; 00000018H
  00d99	43		 inc	 ebx
  00d9a	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00da0	7c ce		 jl	 SHORT $LL99@SetItemMLP
  00da2	5f		 pop	 edi
  00da3	5e		 pop	 esi
  00da4	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00da5	8b e5		 mov	 esp, ebp
  00da7	5d		 pop	 ebp
  00da8	c2 08 00	 ret	 8
$LN177@SetItemMLP:
  00dab	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5495 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5496 : 			{
; 5497 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5498 : 				break;
; 5499 : 			}
; 5500 : 		}
; 5501 : 		break;
; 5502 : 	case 22:
; 5503 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00dae	33 db		 xor	 ebx, ebx
  00db0	33 f6		 xor	 esi, esi
$LL102@SetItemMLP:

; 5504 : 		{
; 5505 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00db2	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00db8	03 ce		 add	 ecx, esi
  00dba	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00dbf	83 f8 01	 cmp	 eax, 1
  00dc2	75 10		 jne	 SHORT $LN100@SetItemMLP
  00dc4	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00dca	81 7c 06 08 9a
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 410 ; 0000019aH
  00dd2	74 0e		 je	 SHORT $LN266@SetItemMLP
$LN100@SetItemMLP:

; 5495 : 				lpObj->Magic[iCount].m_Skill == 377 )
; 5496 : 			{
; 5497 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5498 : 				break;
; 5499 : 			}
; 5500 : 		}
; 5501 : 		break;
; 5502 : 	case 22:
; 5503 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00dd4	83 c6 18	 add	 esi, 24			; 00000018H
  00dd7	43		 inc	 ebx
  00dd8	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00dde	7c d2		 jl	 SHORT $LL102@SetItemMLP
  00de0	eb 28		 jmp	 SHORT $LN426@SetItemMLP
$LN266@SetItemMLP:

; 5506 : 				lpObj->Magic[iCount].m_Skill == 410 )
; 5507 : 			{
; 5508 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00de2	8b c8		 mov	 ecx, eax
  00de4	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00de7	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00dec	50		 push	 eax
  00ded	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00df1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00df6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00dfb	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00dfe	50		 push	 eax
  00dff	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00e04	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN426@SetItemMLP:

; 5509 : 				break;
; 5510 : 			}
; 5511 : 		}
; 5512 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00e0a	33 db		 xor	 ebx, ebx
  00e0c	33 f6		 xor	 esi, esi
  00e0e	66 90		 npad	 2
$LL105@SetItemMLP:

; 5513 : 		{
; 5514 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00e10	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00e16	03 ce		 add	 ecx, esi
  00e18	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00e1d	83 f8 01	 cmp	 eax, 1
  00e20	75 14		 jne	 SHORT $LN103@SetItemMLP
  00e22	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00e28	81 7c 06 08 9c
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 412 ; 0000019cH
  00e30	0f 84 f1 01 00
	00		 je	 $LN273@SetItemMLP
$LN103@SetItemMLP:

; 5509 : 				break;
; 5510 : 			}
; 5511 : 		}
; 5512 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00e36	83 c6 18	 add	 esi, 24			; 00000018H
  00e39	43		 inc	 ebx
  00e3a	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00e40	7c ce		 jl	 SHORT $LL105@SetItemMLP
  00e42	5f		 pop	 edi
  00e43	5e		 pop	 esi
  00e44	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00e45	8b e5		 mov	 esp, ebp
  00e47	5d		 pop	 ebp
  00e48	c2 08 00	 ret	 8
$LN180@SetItemMLP:
  00e4b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5515 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5516 : 			{
; 5517 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5518 : 				break;
; 5519 : 			}
; 5520 : 		}
; 5521 : 		break;
; 5522 : 	case 23:
; 5523 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00e4e	33 db		 xor	 ebx, ebx
  00e50	33 f6		 xor	 esi, esi
$LL108@SetItemMLP:

; 5524 : 		{
; 5525 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00e52	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00e58	03 ce		 add	 ecx, esi
  00e5a	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00e5f	83 f8 01	 cmp	 eax, 1
  00e62	75 10		 jne	 SHORT $LN106@SetItemMLP
  00e64	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00e6a	81 7c 06 08 dc
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 476 ; 000001dcH
  00e72	74 0e		 je	 SHORT $LN268@SetItemMLP
$LN106@SetItemMLP:

; 5515 : 				lpObj->Magic[iCount].m_Skill == 412 )
; 5516 : 			{
; 5517 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5518 : 				break;
; 5519 : 			}
; 5520 : 		}
; 5521 : 		break;
; 5522 : 	case 23:
; 5523 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00e74	83 c6 18	 add	 esi, 24			; 00000018H
  00e77	43		 inc	 ebx
  00e78	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00e7e	7c d2		 jl	 SHORT $LL108@SetItemMLP
  00e80	eb 28		 jmp	 SHORT $LN428@SetItemMLP
$LN268@SetItemMLP:

; 5526 : 				lpObj->Magic[iCount].m_Skill == 476 )
; 5527 : 			{
; 5528 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00e82	8b c8		 mov	 ecx, eax
  00e84	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00e87	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00e8c	50		 push	 eax
  00e8d	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00e91	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00e96	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00e9b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00e9e	50		 push	 eax
  00e9f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00ea4	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN428@SetItemMLP:

; 5529 : 				break;
; 5530 : 			}
; 5531 : 		}
; 5532 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00eaa	33 db		 xor	 ebx, ebx
  00eac	33 f6		 xor	 esi, esi
  00eae	66 90		 npad	 2
$LL111@SetItemMLP:

; 5533 : 		{
; 5534 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00eb0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00eb6	03 ce		 add	 ecx, esi
  00eb8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00ebd	83 f8 01	 cmp	 eax, 1
  00ec0	75 14		 jne	 SHORT $LN109@SetItemMLP
  00ec2	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00ec8	81 7c 06 08 de
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 478 ; 000001deH
  00ed0	0f 84 51 01 00
	00		 je	 $LN273@SetItemMLP
$LN109@SetItemMLP:

; 5529 : 				break;
; 5530 : 			}
; 5531 : 		}
; 5532 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00ed6	83 c6 18	 add	 esi, 24			; 00000018H
  00ed9	43		 inc	 ebx
  00eda	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00ee0	7c ce		 jl	 SHORT $LL111@SetItemMLP
  00ee2	5f		 pop	 edi
  00ee3	5e		 pop	 esi
  00ee4	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00ee5	8b e5		 mov	 esp, ebp
  00ee7	5d		 pop	 ebp
  00ee8	c2 08 00	 ret	 8
$LN183@SetItemMLP:
  00eeb	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5535 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5536 : 			{
; 5537 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5538 : 				break;
; 5539 : 			}
; 5540 : 		}
; 5541 : 		break;
; 5542 : 	case 24:
; 5543 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00eee	33 db		 xor	 ebx, ebx
  00ef0	33 f6		 xor	 esi, esi
$LL114@SetItemMLP:

; 5544 : 		{
; 5545 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00ef2	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00ef8	03 ce		 add	 ecx, esi
  00efa	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00eff	83 f8 01	 cmp	 eax, 1
  00f02	75 10		 jne	 SHORT $LN112@SetItemMLP
  00f04	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00f0a	81 7c 06 08 f9
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 505 ; 000001f9H
  00f12	74 0e		 je	 SHORT $LN270@SetItemMLP
$LN112@SetItemMLP:

; 5535 : 				lpObj->Magic[iCount].m_Skill == 478 )
; 5536 : 			{
; 5537 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5538 : 				break;
; 5539 : 			}
; 5540 : 		}
; 5541 : 		break;
; 5542 : 	case 24:
; 5543 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00f14	83 c6 18	 add	 esi, 24			; 00000018H
  00f17	43		 inc	 ebx
  00f18	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00f1e	7c d2		 jl	 SHORT $LL114@SetItemMLP
  00f20	eb 28		 jmp	 SHORT $LN430@SetItemMLP
$LN270@SetItemMLP:

; 5546 : 				lpObj->Magic[iCount].m_Skill == 505 )
; 5547 : 			{
; 5548 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00f22	8b c8		 mov	 ecx, eax
  00f24	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00f27	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00f2c	50		 push	 eax
  00f2d	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00f31	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00f36	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00f3b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00f3e	50		 push	 eax
  00f3f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00f44	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN430@SetItemMLP:

; 5549 : 				break;
; 5550 : 			}
; 5551 : 		}
; 5552 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00f4a	33 db		 xor	 ebx, ebx
  00f4c	33 f6		 xor	 esi, esi
  00f4e	66 90		 npad	 2
$LL117@SetItemMLP:

; 5553 : 		{
; 5554 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00f50	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00f56	03 ce		 add	 ecx, esi
  00f58	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00f5d	83 f8 01	 cmp	 eax, 1
  00f60	75 14		 jne	 SHORT $LN115@SetItemMLP
  00f62	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00f68	81 7c 06 08 fb
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 507 ; 000001fbH
  00f70	0f 84 b1 00 00
	00		 je	 $LN273@SetItemMLP
$LN115@SetItemMLP:

; 5549 : 				break;
; 5550 : 			}
; 5551 : 		}
; 5552 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00f76	83 c6 18	 add	 esi, 24			; 00000018H
  00f79	43		 inc	 ebx
  00f7a	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00f80	7c ce		 jl	 SHORT $LL117@SetItemMLP
  00f82	5f		 pop	 edi
  00f83	5e		 pop	 esi
  00f84	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  00f85	8b e5		 mov	 esp, ebp
  00f87	5d		 pop	 ebp
  00f88	c2 08 00	 ret	 8
$LN186@SetItemMLP:
  00f8b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 5555 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5556 : 			{
; 5557 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5558 : 				break;
; 5559 : 			}
; 5560 : 		}
; 5561 : 		break;
; 5562 : 	case 25:
; 5563 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00f8e	33 db		 xor	 ebx, ebx
  00f90	33 f6		 xor	 esi, esi
$LL120@SetItemMLP:

; 5564 : 		{
; 5565 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00f92	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00f98	03 ce		 add	 ecx, esi
  00f9a	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00f9f	83 f8 01	 cmp	 eax, 1
  00fa2	75 10		 jne	 SHORT $LN118@SetItemMLP
  00fa4	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00faa	81 7c 06 08 be
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 446 ; 000001beH
  00fb2	74 0e		 je	 SHORT $LN272@SetItemMLP
$LN118@SetItemMLP:

; 5555 : 				lpObj->Magic[iCount].m_Skill == 507 )
; 5556 : 			{
; 5557 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);
; 5558 : 				break;
; 5559 : 			}
; 5560 : 		}
; 5561 : 		break;
; 5562 : 	case 25:
; 5563 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00fb4	83 c6 18	 add	 esi, 24			; 00000018H
  00fb7	43		 inc	 ebx
  00fb8	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00fbe	7c d2		 jl	 SHORT $LL120@SetItemMLP
  00fc0	eb 28		 jmp	 SHORT $LN432@SetItemMLP
$LN272@SetItemMLP:

; 5566 : 				lpObj->Magic[iCount].m_Skill == 446 )
; 5567 : 			{
; 5568 : 				lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  00fc2	8b c8		 mov	 ecx, eax
  00fc4	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  00fc7	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  00fcc	50		 push	 eax
  00fcd	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  00fd1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00fd6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00fdb	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00fde	50		 push	 eax
  00fdf	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00fe4	d9 9f 48 08 00
	00		 fstp	 DWORD PTR [edi+2120]
$LN432@SetItemMLP:

; 5569 : 				break;
; 5570 : 			}
; 5571 : 		}
; 5572 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  00fea	33 db		 xor	 ebx, ebx
  00fec	33 f6		 xor	 esi, esi
  00fee	66 90		 npad	 2
$LL123@SetItemMLP:

; 5573 : 		{
; 5574 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE &&

  00ff0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00ff6	03 ce		 add	 ecx, esi
  00ff8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  00ffd	83 f8 01	 cmp	 eax, 1
  01000	75 10		 jne	 SHORT $LN121@SetItemMLP
  01002	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  01008	81 7c 06 08 bf
	01 00 00	 cmp	 DWORD PTR [esi+eax+8], 447 ; 000001bfH
  01010	74 15		 je	 SHORT $LN273@SetItemMLP
$LN121@SetItemMLP:

; 5569 : 				break;
; 5570 : 			}
; 5571 : 		}
; 5572 : 		for( iCount = 0; iCount < MAX_MAGIC; iCount++)

  01012	83 c6 18	 add	 esi, 24			; 00000018H
  01015	43		 inc	 ebx
  01016	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0101c	7c d2		 jl	 SHORT $LL123@SetItemMLP
  0101e	5f		 pop	 edi
  0101f	5e		 pop	 esi
  01020	5b		 pop	 ebx

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  01021	8b e5		 mov	 esp, ebp
  01023	5d		 pop	 ebp
  01024	c2 08 00	 ret	 8
$LN273@SetItemMLP:

; 5575 : 				lpObj->Magic[iCount].m_Skill == 447 )
; 5576 : 			{
; 5577 : 				lpObj->m_MPSkillOpt.MpsWingAttackIncrease = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[iCount].m_Skill),lpObj->Magic[iCount].m_Level);

  01027	8b c8		 mov	 ecx, eax
  01029	8d 14 5b	 lea	 edx, DWORD PTR [ebx+ebx*2]
  0102c	0f b6 44 d1 04	 movzx	 eax, BYTE PTR [ecx+edx*8+4]
  01031	50		 push	 eax
  01032	ff 74 d1 08	 push	 DWORD PTR [ecx+edx*8+8]
  01036	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0103b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  01040	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  01043	50		 push	 eax
  01044	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  01049	d9 9f 4c 08 00
	00		 fstp	 DWORD PTR [edi+2124]
$LN434@SetItemMLP:
  0104f	5f		 pop	 edi
  01050	5e		 pop	 esi
  01051	5b		 pop	 ebx
$LN433@SetItemMLP:

; 5578 : 				break;
; 5579 : 			}
; 5580 : 		}
; 5581 : 		break;
; 5582 : 	}
; 5583 : }

  01052	8b e5		 mov	 esp, ebp
  01054	5d		 pop	 ebp
  01055	c2 08 00	 ret	 8
$LN439@SetItemMLP:
  01058	00 00 00 00	 DD	 $LN124@SetItemMLP
  0105c	00 00 00 00	 DD	 $LN127@SetItemMLP
  01060	00 00 00 00	 DD	 $LN130@SetItemMLP
  01064	00 00 00 00	 DD	 $LN133@SetItemMLP
  01068	00 00 00 00	 DD	 $LN136@SetItemMLP
  0106c	00 00 00 00	 DD	 $LN139@SetItemMLP
  01070	00 00 00 00	 DD	 $LN142@SetItemMLP
  01074	00 00 00 00	 DD	 $LN151@SetItemMLP
  01078	00 00 00 00	 DD	 $LN154@SetItemMLP
  0107c	00 00 00 00	 DD	 $LN157@SetItemMLP
  01080	00 00 00 00	 DD	 $LN160@SetItemMLP
  01084	00 00 00 00	 DD	 $LN163@SetItemMLP
  01088	00 00 00 00	 DD	 $LN168@SetItemMLP
  0108c	00 00 00 00	 DD	 $LN434@SetItemMLP
  01090	00 00 00 00	 DD	 $LN434@SetItemMLP
  01094	00 00 00 00	 DD	 $LN434@SetItemMLP
  01098	00 00 00 00	 DD	 $LN434@SetItemMLP
  0109c	00 00 00 00	 DD	 $LN434@SetItemMLP
  010a0	00 00 00 00	 DD	 $LN434@SetItemMLP
  010a4	00 00 00 00	 DD	 $LN434@SetItemMLP
  010a8	00 00 00 00	 DD	 $LN171@SetItemMLP
  010ac	00 00 00 00	 DD	 $LN174@SetItemMLP
  010b0	00 00 00 00	 DD	 $LN177@SetItemMLP
  010b4	00 00 00 00	 DD	 $LN180@SetItemMLP
  010b8	00 00 00 00	 DD	 $LN183@SetItemMLP
  010bc	00 00 00 00	 DD	 $LN186@SetItemMLP
?SetItemMLPassiveSkill@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::SetItemMLPassiveSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv371 = -4						; size = 4
tv366 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill2, COMDAT
; _this$ = ecx

; 5118 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5119 : 	int nReturn = 0;
; 5120 : 
; 5121 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	69 4d 08 74 08
	00 00		 imul	 ecx, DWORD PTR _iClass$[ebp], 2164
  00012	53		 push	 ebx
  00013	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00016	33 db		 xor	 ebx, ebx
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	56		 push	 esi
  0001c	03 c1		 add	 eax, ecx
  0001e	89 4d fc	 mov	 DWORD PTR tv371[ebp], ecx
  00021	57		 push	 edi
  00022	89 45 08	 mov	 DWORD PTR tv366[ebp], eax
$LL4@GetParentS:

; 5122 : 	{
; 5123 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00025	33 f6		 xor	 esi, esi
  00027	8b f8		 mov	 edi, eax
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@GetParentS:

; 5124 : 		{
; 5125 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00030	33 c9		 xor	 ecx, ecx
  00032	8b c7		 mov	 eax, edi
$LL10@GetParentS:

; 5126 : 			{
; 5127 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00034	39 10		 cmp	 DWORD PTR [eax], edx
  00036	74 2e		 je	 SHORT $LN16@GetParentS

; 5124 : 		{
; 5125 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00038	41		 inc	 ecx
  00039	83 c0 14	 add	 eax, 20			; 00000014H
  0003c	83 f9 04	 cmp	 ecx, 4
  0003f	7c f3		 jl	 SHORT $LL10@GetParentS

; 5122 : 	{
; 5123 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00041	46		 inc	 esi
  00042	83 c7 50	 add	 edi, 80			; 00000050H
  00045	83 fe 09	 cmp	 esi, 9
  00048	7c e6		 jl	 SHORT $LL7@GetParentS

; 5119 : 	int nReturn = 0;
; 5120 : 
; 5121 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0004a	8b 45 08	 mov	 eax, DWORD PTR tv366[ebp]
  0004d	43		 inc	 ebx
  0004e	05 d0 02 00 00	 add	 eax, 720		; 000002d0H
  00053	89 45 08	 mov	 DWORD PTR tv366[ebp], eax
  00056	83 fb 03	 cmp	 ebx, 3
  00059	7c ca		 jl	 SHORT $LL4@GetParentS

; 5131 : 				}
; 5132 : 			}
; 5133 : 		}
; 5134 : 	}
; 5135 : 
; 5136 : 	return nReturn;

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	33 c0		 xor	 eax, eax
  0005f	5b		 pop	 ebx

; 5137 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN16@GetParentS:

; 5128 : 				{
; 5129 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2;
; 5130 : 					return nReturn;

  00066	8d 04 de	 lea	 eax, DWORD PTR [esi+ebx*8]
  00069	03 c3		 add	 eax, ebx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8d 04 85 01 00
	00 00		 lea	 eax, DWORD PTR [eax*4+1]
  00075	03 c1		 add	 eax, ecx
  00077	8b 4d fc	 mov	 ecx, DWORD PTR tv371[ebp]
  0007a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0007d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00083	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]

; 5137 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv372 = -4						; size = 4
tv368 = 8						; size = 4
_iClass$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetParentSkill1, COMDAT
; _this$ = ecx

; 5096 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 5097 : 	int nReturn = 0;
; 5098 : 
; 5099 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00006	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	69 4d 08 74 08
	00 00		 imul	 ecx, DWORD PTR _iClass$[ebp], 2164
  00012	53		 push	 ebx
  00013	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00016	33 db		 xor	 ebx, ebx
  00018	83 c0 18	 add	 eax, 24			; 00000018H
  0001b	56		 push	 esi
  0001c	03 c1		 add	 eax, ecx
  0001e	89 4d fc	 mov	 DWORD PTR tv372[ebp], ecx
  00021	57		 push	 edi
  00022	89 45 08	 mov	 DWORD PTR tv368[ebp], eax
$LL4@GetParentS:

; 5100 : 	{
; 5101 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00025	33 f6		 xor	 esi, esi
  00027	8b f8		 mov	 edi, eax
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@GetParentS:

; 5102 : 		{
; 5103 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00030	33 c9		 xor	 ecx, ecx
  00032	8b c7		 mov	 eax, edi
$LL10@GetParentS:

; 5104 : 			{
; 5105 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00034	39 10		 cmp	 DWORD PTR [eax], edx
  00036	74 2e		 je	 SHORT $LN16@GetParentS

; 5102 : 		{
; 5103 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00038	41		 inc	 ecx
  00039	83 c0 14	 add	 eax, 20			; 00000014H
  0003c	83 f9 04	 cmp	 ecx, 4
  0003f	7c f3		 jl	 SHORT $LL10@GetParentS

; 5100 : 	{
; 5101 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00041	46		 inc	 esi
  00042	83 c7 50	 add	 edi, 80			; 00000050H
  00045	83 fe 09	 cmp	 esi, 9
  00048	7c e6		 jl	 SHORT $LL7@GetParentS

; 5097 : 	int nReturn = 0;
; 5098 : 
; 5099 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0004a	8b 45 08	 mov	 eax, DWORD PTR tv368[ebp]
  0004d	43		 inc	 ebx
  0004e	05 d0 02 00 00	 add	 eax, 720		; 000002d0H
  00053	89 45 08	 mov	 DWORD PTR tv368[ebp], eax
  00056	83 fb 03	 cmp	 ebx, 3
  00059	7c ca		 jl	 SHORT $LL4@GetParentS

; 5109 : 				}
; 5110 : 			}
; 5111 : 		}
; 5112 : 	}
; 5113 : 
; 5114 : 	return nReturn;

  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	33 c0		 xor	 eax, eax
  0005f	5b		 pop	 ebx

; 5115 : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN16@GetParentS:

; 5106 : 				{
; 5107 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1;
; 5108 : 					return nReturn;

  00066	8d 04 de	 lea	 eax, DWORD PTR [esi+ebx*8]
  00069	03 c3		 add	 eax, ebx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00071	8b 4d fc	 mov	 ecx, DWORD PTR tv372[ebp]
  00074	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00077	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007d	8b 44 08 10	 mov	 eax, DWORD PTR [eax+ecx+16]

; 5115 : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetParentSkill1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv382 = 8						; size = 4
_iClass$ = 8						; size = 4
tv386 = 12						; size = 4
_iSkill$ = 12						; size = 4
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex, COMDAT
; _this$ = ecx

; 5062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5063 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_FIGHTER )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	83 f8 06	 cmp	 eax, 6
  0000d	0f 87 99 00 00
	00		 ja	 $LN12@GetMasterS

; 5067 : 	}
; 5068 : 
; 5069 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00013	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00016	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0001c	77 76		 ja	 SHORT $LN14@GetMasterS

; 5073 : 	}
; 5074 : 
; 5075 : 	int nReturn = -1;
; 5076 : 
; 5077 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0001e	69 c0 74 08 00
	00		 imul	 eax, eax, 2164
  00024	53		 push	 ebx
  00025	33 db		 xor	 ebx, ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	89 45 0c	 mov	 DWORD PTR tv386[ebp], eax
  0002c	83 c0 18	 add	 eax, 24			; 00000018H
  0002f	03 c1		 add	 eax, ecx
  00031	89 45 08	 mov	 DWORD PTR tv382[ebp], eax
$LL4@GetMasterS:

; 5078 : 	{
; 5079 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00034	33 f6		 xor	 esi, esi
  00036	8b f8		 mov	 edi, eax
$LL7@GetMasterS:

; 5080 : 		{
; 5081 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00038	33 c9		 xor	 ecx, ecx
  0003a	8b c7		 mov	 eax, edi
  0003c	0f 1f 40 00	 npad	 4
$LL10@GetMasterS:

; 5082 : 			{
; 5083 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00040	39 10		 cmp	 DWORD PTR [eax], edx
  00042	74 2f		 je	 SHORT $LN20@GetMasterS

; 5080 : 		{
; 5081 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00044	41		 inc	 ecx
  00045	83 c0 14	 add	 eax, 20			; 00000014H
  00048	83 f9 04	 cmp	 ecx, 4
  0004b	7c f3		 jl	 SHORT $LL10@GetMasterS

; 5078 : 	{
; 5079 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  0004d	46		 inc	 esi
  0004e	83 c7 50	 add	 edi, 80			; 00000050H
  00051	83 fe 09	 cmp	 esi, 9
  00054	7c e2		 jl	 SHORT $LL7@GetMasterS

; 5073 : 	}
; 5074 : 
; 5075 : 	int nReturn = -1;
; 5076 : 
; 5077 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00056	8b 45 08	 mov	 eax, DWORD PTR tv382[ebp]
  00059	43		 inc	 ebx
  0005a	05 d0 02 00 00	 add	 eax, 720		; 000002d0H
  0005f	89 45 08	 mov	 DWORD PTR tv382[ebp], eax
  00062	83 fb 03	 cmp	 ebx, 3
  00065	7c cd		 jl	 SHORT $LL4@GetMasterS

; 5087 : 				}
; 5088 : 			}
; 5089 : 		}
; 5090 : 	}
; 5091 : 
; 5092 : return nReturn;

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	83 c8 ff	 or	 eax, -1
  0006c	5b		 pop	 ebx

; 5093 : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
$LN20@GetMasterS:

; 5084 : 				{
; 5085 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex;
; 5086 : 					return nReturn;

  00073	8d 04 de	 lea	 eax, DWORD PTR [esi+ebx*8]
  00076	03 c3		 add	 eax, ebx
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
  0007b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR tv386[ebp]
  00081	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00084	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0008a	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]

; 5093 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN14@GetMasterS:

; 5070 : 	{
; 5071 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Skill Code : %d",iSkill);

  00094	52		 push	 edx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a0	83 c4 08	 add	 esp, 8

; 5072 : 		return -1;

  000a3	83 c8 ff	 or	 eax, -1

; 5093 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
$LN12@GetMasterS:

; 5064 : 	{
; 5065 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Class Code  : %d",iClass);

  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	83 c4 08	 add	 esp, 8

; 5066 : 		return -1;

  000bb	83 c8 ff	 or	 eax, -1

; 5093 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
tv564 = -16						; size = 4
_iPos2$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
_nTreeKind$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_nRank$1$ = 12						; size = 4
_iSkill$ = 12						; size = 4
_iLevel$ = 16						; size = 4
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill, COMDAT
; _this$ = ecx

; 4990 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 4991 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00007	8b 75 0c	 mov	 esi, DWORD PTR _iSkill$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d f8	 mov	 DWORD PTR _this$1$[ebp], edi

; 4995 : 	}
; 4996 : 
; 4997 : 	int nTreeKind = -1;
; 4998 : 	int nRank = MagicDamageC.GetSkillRank(iSkill)-1;

  00010	56		 push	 esi
  00011	81 fe 89 02 00
	00		 cmp	 esi, 649		; 00000289H
  00017	0f 87 10 01 00
	00		 ja	 $LN18@CheckPrevi
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00022	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _nTreeKind$1$[ebp], -1
  00029	e8 00 00 00 00	 call	 ?GetSkillRank@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillRank
  0002e	48		 dec	 eax
  0002f	89 45 0c	 mov	 DWORD PTR _nRank$1$[ebp], eax

; 4999 : 
; 5000 : 	if( nRank < 1 )

  00032	83 f8 01	 cmp	 eax, 1
  00035	7d 0d		 jge	 SHORT $LN19@CheckPrevi

; 5001 : 		return 1;

  00037	5f		 pop	 edi
  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	5e		 pop	 esi

; 5039 : 		nReturn = TRUE;
; 5040 : 	else
; 5041 : 		nReturn = FALSE;
; 5042 : 
; 5043 : 	return nReturn;
; 5044 : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 0c 00	 ret	 12			; 0000000cH
$LN19@CheckPrevi:

; 5002 : 
; 5003 : 	int iClass = lpObj->Class;

  00044	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00047	8d 57 18	 lea	 edx, DWORD PTR [edi+24]
  0004a	53		 push	 ebx

; 5004 : 	int nReturn = -1;
; 5005 : 
; 5006 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0004b	33 db		 xor	 ebx, ebx
  0004d	0f b7 80 90 00
	00 00		 movzx	 eax, WORD PTR [eax+144]
  00054	69 c0 74 08 00
	00		 imul	 eax, eax, 2164
  0005a	89 45 f0	 mov	 DWORD PTR tv564[ebp], eax
  0005d	03 d0		 add	 edx, eax
  0005f	90		 npad	 1
$LL4@CheckPrevi:

; 5007 : 	{
; 5008 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00060	bf 09 00 00 00	 mov	 edi, 9
$LL7@CheckPrevi:

; 5009 : 		{
; 5010 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00065	33 c9		 xor	 ecx, ecx
  00067	8b c2		 mov	 eax, edx
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@CheckPrevi:

; 5011 : 			{
; 5012 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00070	39 30		 cmp	 DWORD PTR [eax], esi
  00072	74 0b		 je	 SHORT $LN31@CheckPrevi

; 5009 : 		{
; 5010 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00074	41		 inc	 ecx
  00075	83 c0 14	 add	 eax, 20			; 00000014H
  00078	83 f9 04	 cmp	 ecx, 4
  0007b	7c f3		 jl	 SHORT $LL10@CheckPrevi

; 5011 : 			{
; 5012 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0007d	eb 03		 jmp	 SHORT $LN5@CheckPrevi
$LN31@CheckPrevi:

; 5013 : 				{
; 5014 : 					nTreeKind = iTreeKind;

  0007f	89 5d fc	 mov	 DWORD PTR _nTreeKind$1$[ebp], ebx
$LN5@CheckPrevi:

; 5007 : 	{
; 5008 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00082	83 c2 50	 add	 edx, 80			; 00000050H
  00085	83 ef 01	 sub	 edi, 1
  00088	75 db		 jne	 SHORT $LL7@CheckPrevi

; 5004 : 	int nReturn = -1;
; 5005 : 
; 5006 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  0008a	43		 inc	 ebx
  0008b	83 fb 03	 cmp	 ebx, 3
  0008e	7c d0		 jl	 SHORT $LL4@CheckPrevi

; 5015 : 					break;
; 5016 : 				}
; 5017 : 			}
; 5018 : 		}
; 5019 : 	}
; 5020 : 
; 5021 : 	int nPoint = 0;
; 5022 : 	nRank -= 1;

  00090	ff 4d 0c	 dec	 DWORD PTR _nRank$1$[ebp]

; 5023 : 
; 5024 : 	for(int iPos2 = 0; iPos2 < MAX_SKILLTREE_POS; iPos2++ )

  00093	33 db		 xor	 ebx, ebx
  00095	89 5d f4	 mov	 DWORD PTR _iPos2$1$[ebp], ebx
  00098	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@CheckPrevi:

; 5025 : 	{
; 5026 : 		for(int i = 0; i < MAX_MAGIC; i++)

  000a0	33 f6		 xor	 esi, esi
$LL16@CheckPrevi:

; 5027 : 		{
; 5028 : 			if( lpObj->Magic[i].IsMagic() == TRUE && this->CheckMasterLevelSkill(lpObj->Magic[i].m_Skill) == TRUE  )

  000a2	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000a5	8b 88 a8 06 00
	00		 mov	 ecx, DWORD PTR [eax+1704]
  000ab	03 ce		 add	 ecx, esi
  000ad	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	75 51		 jne	 SHORT $LN14@CheckPrevi
  000b7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bd	8b 80 a8 06 00
	00		 mov	 eax, DWORD PTR [eax+1704]
  000c3	ff 74 06 08	 push	 DWORD PTR [esi+eax+8]
  000c7	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  000cc	83 f8 01	 cmp	 eax, 1
  000cf	75 37		 jne	 SHORT $LN14@CheckPrevi

; 5029 : 			{
; 5030 : 				if( lpObj->Magic[i].m_Skill == this->m_SkillTreeData[iClass].m_SkillInfo[nTreeKind][nRank][iPos2].m_iSkillID )

  000d1	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _nTreeKind$1$[ebp]
  000d7	8b 90 a8 06 00
	00		 mov	 edx, DWORD PTR [eax+1704]
  000dd	8b 45 0c	 mov	 eax, DWORD PTR _nRank$1$[ebp]
  000e0	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  000e3	03 c1		 add	 eax, ecx
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR tv564[ebp]
  000e8	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000eb	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000ee	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000f1	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  000f4	8b 44 32 08	 mov	 eax, DWORD PTR [edx+esi+8]
  000f8	3b 44 19 18	 cmp	 eax, DWORD PTR [ecx+ebx+24]
  000fc	8b 5d f4	 mov	 ebx, DWORD PTR _iPos2$1$[ebp]
  000ff	75 07		 jne	 SHORT $LN14@CheckPrevi

; 5031 : 				{
; 5032 : 					nPoint |= lpObj->Magic[i].m_Level;

  00101	0f b6 44 32 04	 movzx	 eax, BYTE PTR [edx+esi+4]
  00106	0b f8		 or	 edi, eax
$LN14@CheckPrevi:

; 5025 : 	{
; 5026 : 		for(int i = 0; i < MAX_MAGIC; i++)

  00108	83 c6 18	 add	 esi, 24			; 00000018H
  0010b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00111	7c 8f		 jl	 SHORT $LL16@CheckPrevi

; 5023 : 
; 5024 : 	for(int iPos2 = 0; iPos2 < MAX_SKILLTREE_POS; iPos2++ )

  00113	43		 inc	 ebx
  00114	89 5d f4	 mov	 DWORD PTR _iPos2$1$[ebp], ebx
  00117	83 fb 04	 cmp	 ebx, 4
  0011a	7c 84		 jl	 SHORT $LL13@CheckPrevi

; 5033 : 				}
; 5034 : 			}
; 5035 : 		}
; 5036 : 	}
; 5037 : 
; 5038 : 	if( nPoint >= 10 )

  0011c	33 c0		 xor	 eax, eax
  0011e	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  00121	5b		 pop	 ebx
  00122	5f		 pop	 edi
  00123	0f 9d c0	 setge	 al
  00126	5e		 pop	 esi

; 5039 : 		nReturn = TRUE;
; 5040 : 	else
; 5041 : 		nReturn = FALSE;
; 5042 : 
; 5043 : 	return nReturn;
; 5044 : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
$LN18@CheckPrevi:

; 4992 : 	{
; 4993 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Skill Code : %d",iSkill);

  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00138	83 c4 08	 add	 esp, 8

; 4994 : 		return -1;

  0013b	83 c8 ff	 or	 eax, -1
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi

; 5039 : 		nReturn = TRUE;
; 5040 : 	else
; 5041 : 		nReturn = FALSE;
; 5042 : 
; 5043 : 	return nReturn;
; 5044 : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 0c 00	 ret	 12			; 0000000cH
?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillLevel, COMDAT
; _this$ = ecx

; 5047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi

; 5048 : 	for(int i = 0; i < MAX_MAGIC; i++)

  00009	33 ff		 xor	 edi, edi
  0000b	33 f6		 xor	 esi, esi
  0000d	0f 1f 00	 npad	 3
$LL4@CheckSkill:

; 5049 : 	{
; 5050 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&

  00010	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 0f		 jne	 SHORT $LN2@CheckSkill
  00022	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _iSkill$[ebp]
  0002b	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  0002f	74 15		 je	 SHORT $LN8@CheckSkill
$LN2@CheckSkill:

; 5048 : 	for(int i = 0; i < MAX_MAGIC; i++)

  00031	83 c6 18	 add	 esi, 24			; 00000018H
  00034	47		 inc	 edi
  00035	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0003b	7c d3		 jl	 SHORT $LL4@CheckSkill

; 5054 : 		}
; 5055 : 	}
; 5056 : 
; 5057 : 
; 5058 : return 0;

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	33 c0		 xor	 eax, eax
  00041	5b		 pop	 ebx

; 5059 : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN8@CheckSkill:

; 5051 : 			lpObj->Magic[i].m_Skill == iSkill )
; 5052 : 		{
; 5053 : 			return lpObj->Magic[i].m_Level;

  00046	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00049	0f b6 44 c8 04	 movzx	 eax, BYTE PTR [eax+ecx*8+4]
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx

; 5059 : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
tv192 = 16						; size = 4
_iStep$ = 16						; size = 4
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue, COMDAT
; _this$ = ecx

; 4955 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4956 : 	int nStep = iStep;
; 4957 : 	int nSkill = iSkill;

  00004	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]

; 4958 : 	int nPrevSkill = nSkill;

  00007	8b c2		 mov	 eax, edx
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _iStep$[ebp]
  0000e	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	57		 push	 edi

; 4959 : 
; 4960 : 	while( nStep != 0 )

  00012	85 f6		 test	 esi, esi
  00014	74 1c		 je	 SHORT $LN13@GetBrandOf
$LL2@GetBrandOf:

; 4961 : 	{
; 4962 : 		if( nPrevSkill == 0 )

  00016	85 c0		 test	 eax, eax
  00018	74 15		 je	 SHORT $LN22@GetBrandOf

; 4963 : 			break;
; 4964 : 
; 4965 : 		nPrevSkill = MagicDamageC.GetBrandOfSkill(nSkill);

  0001a	52		 push	 edx
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00020	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  00025	0f b7 c0	 movzx	 eax, ax

; 4966 : 		nSkill = nPrevSkill;

  00028	8b d0		 mov	 edx, eax

; 4967 : 		nStep--;

  0002a	83 ee 01	 sub	 esi, 1
  0002d	75 e7		 jne	 SHORT $LL2@GetBrandOf
$LN22@GetBrandOf:
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN13@GetBrandOf:

; 4968 : 	}
; 4969 : 
; 4970 : 	WORD iBrandOfSkill = nSkill;
; 4971 : 	int iLevel;
; 4972 : 
; 4973 : 	if( this->CheckMasterLevelSkill(iBrandOfSkill) )

  00032	0f b7 c2	 movzx	 eax, dx
  00035	50		 push	 eax
  00036	89 45 10	 mov	 DWORD PTR tv192[ebp], eax
  00039	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0003e	85 c0		 test	 eax, eax
  00040	74 3b		 je	 SHORT $LN21@GetBrandOf

; 4974 : 	{
; 4975 : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00042	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00045	33 ff		 xor	 edi, edi
  00047	33 f6		 xor	 esi, esi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@GetBrandOf:

; 4976 : 		{
; 4977 : 			if( lpObj->Magic[iCount].IsMagic() == TRUE && 

  00050	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  00056	03 ce		 add	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0005d	83 f8 01	 cmp	 eax, 1
  00060	75 0f		 jne	 SHORT $LN4@GetBrandOf
  00062	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00068	8b 4d 10	 mov	 ecx, DWORD PTR tv192[ebp]
  0006b	39 4c 06 08	 cmp	 DWORD PTR [esi+eax+8], ecx
  0006f	74 17		 je	 SHORT $LN14@GetBrandOf
$LN4@GetBrandOf:

; 4974 : 	{
; 4975 : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00071	83 c6 18	 add	 esi, 24			; 00000018H
  00074	47		 inc	 edi
  00075	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0007b	7c d3		 jl	 SHORT $LL6@GetBrandOf
$LN21@GetBrandOf:

; 4982 : 			}
; 4983 : 		}
; 4984 : 	}
; 4985 : 
; 4986 : 	return 0.0f;

  0007d	d9 ee		 fldz
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 4987 : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
$LN14@GetBrandOf:

; 4978 : 				lpObj->Magic[iCount].m_Skill == iBrandOfSkill )
; 4979 : 			{
; 4980 : 				iLevel = lpObj->Magic[iCount].m_Level;

  00088	8d 14 7f	 lea	 edx, DWORD PTR [edi+edi*2]
  0008b	0f b6 44 d0 04	 movzx	 eax, BYTE PTR [eax+edx*8+4]

; 4981 : 				return this->GetMasterSkillValue(MagicDamageC.SkillGet(iBrandOfSkill),iLevel);

  00090	50		 push	 eax
  00091	51		 push	 ecx
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00097	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx

; 4987 : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 0c 00	 ret	 12			; 0000000cH
?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z
_TEXT	SEGMENT
_iPoint$ = 8						; size = 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate, COMDAT
; _this$ = ecx

; 4944 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4945 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iPoint$[ebp]
  00006	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00009	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000c	77 0b		 ja	 SHORT $LN3@GetMasterS

; 4949 : 	}
; 4950 : 
; 4951 : 	return this->m_fValue[21][iPoint];

  0000e	d9 84 91 14 42
	00 00		 fld	 DWORD PTR [ecx+edx*4+16916]

; 4952 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetMasterS:

; 4946 : 	{
; 4947 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillManaIncRate - Invalid Point : %d",iPoint);

  00019	52		 push	 edx
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@HDBFHAFF@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 4948 : 		return -1.0f;

  00025	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  0002b	83 c4 08	 add	 esp, 8

; 4952 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetMasterSkillManaIncRate@CMasterLevelSkillTreeSystem@@QAEMH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillManaIncRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z
_TEXT	SEGMENT
_iType$ = 8						; size = 4
_iPoint$ = 12						; size = 4
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue, COMDAT
; _this$ = ecx

; 4927 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4928 : 	if( iPoint < 1 || iPoint > MAX_SKILLTREE_LEVEL )

  00003	8b 55 0c	 mov	 edx, DWORD PTR _iPoint$[ebp]
  00006	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00009	83 f8 13	 cmp	 eax, 19			; 00000013H
  0000c	77 27		 ja	 SHORT $LN3@GetMasterS

; 4932 : 	}
; 4933 : 
; 4934 : 	if( iType < 0 || iType > 38 )

  0000e	8b 45 08	 mov	 eax, DWORD PTR _iType$[ebp]
  00011	83 f8 26	 cmp	 eax, 38			; 00000026H
  00014	77 10		 ja	 SHORT $LN5@GetMasterS

; 4937 : 		return 0.0f;
; 4938 : 	}
; 4939 : 
; 4940 : 	return this->m_fValue[iType][iPoint];

  00016	6b c0 15	 imul	 eax, eax, 21
  00019	03 c2		 add	 eax, edx
  0001b	d9 84 81 30 3b
	00 00		 fld	 DWORD PTR [ecx+eax*4+15152]

; 4941 : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN5@GetMasterS:

; 4935 : 	{
; 4936 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Type : %d",iType);

  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@FJHPDEPE@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00032	83 c4 08	 add	 esp, 8
$LN3@GetMasterS:

; 4929 : 	{
; 4930 : //		LogAddTD("[MasterLevelSkillTreeSystem] GetMasterSkillValue - Invalid Point : %d",iPoint);
; 4931 : 		return 0.0f;

  00035	d9 ee		 fldz

; 4941 : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_nReturn$1$ = 8						; size = 4
_iClass$ = 8						; size = 4
tv527 = 12						; size = 4
_iSkill$ = 12						; size = 4
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill, COMDAT
; _this$ = ecx

; 4894 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4895 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_FIGHTER )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	83 f8 06	 cmp	 eax, 6
  0000d	0f 87 99 00 00
	00		 ja	 $LN12@GetMaxPoin

; 4899 : 	}
; 4900 : 
; 4901 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00013	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00016	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0001c	77 76		 ja	 SHORT $LN14@GetMaxPoin

; 4904 : 		return -1;
; 4905 : 	}
; 4906 : 
; 4907 : 	int nReturn = -1;

  0001e	53		 push	 ebx
  0001f	69 c0 74 08 00
	00		 imul	 eax, eax, 2164
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
  0002a	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _nReturn$1$[ebp], -1
  00031	33 ff		 xor	 edi, edi
  00033	89 45 0c	 mov	 DWORD PTR tv527[ebp], eax
  00036	03 f0		 add	 esi, eax
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetMaxPoin:

; 4910 : 	{
; 4911 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00040	bb 09 00 00 00	 mov	 ebx, 9
$LL7@GetMaxPoin:

; 4912 : 		{
; 4913 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00045	33 c9		 xor	 ecx, ecx
  00047	8b c6		 mov	 eax, esi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@GetMaxPoin:

; 4914 : 			{
; 4915 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00050	39 10		 cmp	 DWORD PTR [eax], edx
  00052	74 0e		 je	 SHORT $LN20@GetMaxPoin

; 4912 : 		{
; 4913 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00054	41		 inc	 ecx
  00055	83 c0 14	 add	 eax, 20			; 00000014H
  00058	83 f9 04	 cmp	 ecx, 4
  0005b	7c f3		 jl	 SHORT $LL10@GetMaxPoin

; 4914 : 			{
; 4915 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _nReturn$1$[ebp]
  00060	eb 17		 jmp	 SHORT $LN5@GetMaxPoin
$LN20@GetMaxPoin:

; 4916 : 				{
; 4917 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint;

  00062	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR tv527[ebp]
  00068	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0006b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00071	0f b6 4c 08 0d	 movzx	 ecx, BYTE PTR [eax+ecx+13]
  00076	89 4d 08	 mov	 DWORD PTR _nReturn$1$[ebp], ecx
$LN5@GetMaxPoin:

; 4910 : 	{
; 4911 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00079	83 c6 50	 add	 esi, 80			; 00000050H
  0007c	83 c7 04	 add	 edi, 4
  0007f	83 eb 01	 sub	 ebx, 1
  00082	75 c1		 jne	 SHORT $LL7@GetMaxPoin

; 4908 : 
; 4909 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00084	83 ff 6c	 cmp	 edi, 108		; 0000006cH
  00087	7c b7		 jl	 SHORT $LL4@GetMaxPoin

; 4918 : 					break;
; 4919 : 				}
; 4920 : 			}
; 4921 : 		}
; 4922 : 	}
; 4923 : return nReturn;

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	8b c1		 mov	 eax, ecx
  0008d	5b		 pop	 ebx

; 4924 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN14@GetMaxPoin:

; 4902 : 	{
; 4903 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Skill Code : %d",iSkill);

  00094	52		 push	 edx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a0	83 c4 08	 add	 esp, 8
  000a3	83 c8 ff	 or	 eax, -1

; 4924 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
$LN12@GetMaxPoin:

; 4896 : 	{
; 4897 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Class Code  : %d",iClass);

  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	83 c4 08	 add	 esp, 8

; 4898 : 		return -1;

  000bb	83 c8 ff	 or	 eax, -1

; 4924 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_nReturn$1$ = 8						; size = 4
_iClass$ = 8						; size = 4
tv527 = 12						; size = 4
_iSkill$ = 12						; size = 4
?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z PROC ; CMasterLevelSkillTreeSystem::GetRequireMLPoint, COMDAT
; _this$ = ecx

; 4860 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4861 : 
; 4862 : 	if( iClass < CLASS_WIZARD || iClass > CLASS_FIGHTER )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iClass$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	83 f8 06	 cmp	 eax, 6
  0000d	0f 87 99 00 00
	00		 ja	 $LN12@GetRequire

; 4866 : 	}
; 4867 : 
; 4868 : 	if( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00013	8b 55 0c	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00016	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0001c	77 76		 ja	 SHORT $LN14@GetRequire

; 4871 : 		return -1;
; 4872 : 	}
; 4873 : 
; 4874 : 	int nReturn = -1;

  0001e	53		 push	 ebx
  0001f	69 c0 74 08 00
	00		 imul	 eax, eax, 2164
  00025	56		 push	 esi
  00026	57		 push	 edi
  00027	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
  0002a	c7 45 08 ff ff
	ff ff		 mov	 DWORD PTR _nReturn$1$[ebp], -1
  00031	33 ff		 xor	 edi, edi
  00033	89 45 0c	 mov	 DWORD PTR tv527[ebp], eax
  00036	03 f0		 add	 esi, eax
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetRequire:

; 4877 : 	{
; 4878 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00040	bb 09 00 00 00	 mov	 ebx, 9
$LL7@GetRequire:

; 4879 : 		{
; 4880 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00045	33 c9		 xor	 ecx, ecx
  00047	8b c6		 mov	 eax, esi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@GetRequire:

; 4881 : 			{
; 4882 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  00050	39 10		 cmp	 DWORD PTR [eax], edx
  00052	74 0e		 je	 SHORT $LN20@GetRequire

; 4879 : 		{
; 4880 : 			for(int iPos = 0; iPos < MAX_SKILLTREE_POS; iPos++)

  00054	41		 inc	 ecx
  00055	83 c0 14	 add	 eax, 20			; 00000014H
  00058	83 f9 04	 cmp	 ecx, 4
  0005b	7c f3		 jl	 SHORT $LL10@GetRequire

; 4881 : 			{
; 4882 : 				if( this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID == iSkill )

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _nReturn$1$[ebp]
  00060	eb 17		 jmp	 SHORT $LN5@GetRequire
$LN20@GetRequire:

; 4883 : 				{
; 4884 : 					nReturn = this->m_SkillTreeData[iClass].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint;

  00062	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR tv527[ebp]
  00068	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0006b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00071	0f b6 4c 08 0c	 movzx	 ecx, BYTE PTR [eax+ecx+12]
  00076	89 4d 08	 mov	 DWORD PTR _nReturn$1$[ebp], ecx
$LN5@GetRequire:

; 4877 : 	{
; 4878 : 		for(int iRank = 0; iRank < MAX_SKILLTREE_RANK; iRank++)

  00079	83 c6 50	 add	 esi, 80			; 00000050H
  0007c	83 c7 04	 add	 edi, 4
  0007f	83 eb 01	 sub	 ebx, 1
  00082	75 c1		 jne	 SHORT $LL7@GetRequire

; 4875 : 
; 4876 : 	for(int iTreeKind = 0; iTreeKind < MAX_SKILLTREE_TYPE; iTreeKind++)

  00084	83 ff 6c	 cmp	 edi, 108		; 0000006cH
  00087	7c b7		 jl	 SHORT $LL4@GetRequire

; 4885 : 					break;
; 4886 : 				}
; 4887 : 			}
; 4888 : 		}
; 4889 : 	}
; 4890 : return nReturn;

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	8b c1		 mov	 eax, ecx
  0008d	5b		 pop	 ebx

; 4891 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN14@GetRequire:

; 4869 : 	{
; 4870 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Skill Code : %d",iSkill);

  00094	52		 push	 edx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@IOMPPJNP@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a0	83 c4 08	 add	 esp, 8
  000a3	83 c8 ff	 or	 eax, -1

; 4891 : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
$LN12@GetRequire:

; 4863 : 	{
; 4864 : 		LogAddTD("[MasterLevelSkillTreeSystem] GetRequireMLPoint - Invalid Class Code  : %d",iClass);

  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@FPJIEBPO@?$FLMasterLevelSkillTreeSystem?$FN?5Get@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	83 c4 08	 add	 esp, 8

; 4865 : 		return -1;

  000bb	83 c8 ff	 or	 eax, -1

; 4891 : }

  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetRequireMLPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_iApplyHealDistance$ = -64				; size = 16
_lpObj$1$ = -48						; size = 4
_iApplyHealDistance$1$ = -44				; size = 4
_iApplyHealDistance$2$ = -40				; size = 4
_iApplyHealDistance$3$ = -36				; size = 4
_lpMagic$GSCopy$1$ = -32				; size = 4
_addlife$1$ = -28					; size = 4
tv512 = -24						; size = 4
_this$1$ = -24						; size = 4
_fSkillValue$1 = -24					; size = 4
_iApplyHealIndex$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal, COMDAT
; _this$ = ecx

; 7237 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00013	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00016	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 7238 : 	int skillSuccess = TRUE;
; 7239 : 	LPOBJ lpObj = &gObj[aIndex];

  00019	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0001f	56		 push	 esi
  00020	8b 75 0c	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  00023	89 45 e0	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax
  00026	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	89 4d d0	 mov	 DWORD PTR _lpObj$1$[ebp], ecx

; 7240 : 
; 7241 : 	if(lpObj->Class != CLASS_ELF)

  0002f	66 83 b9 90 00
	00 00 02	 cmp	 WORD PTR [ecx+144], 2
  00037	0f 85 2d 02 00
	00		 jne	 $LN6@MLS_SkillP

; 7242 : 	{
; 7243 : 		return;
; 7244 : 	}
; 7245 : 
; 7246 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0003d	85 f6		 test	 esi, esi
  0003f	78 0f		 js	 SHORT $LN38@MLS_SkillP
  00041	33 c0		 xor	 eax, eax
  00043	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00049	0f 9e c0	 setle	 al
  0004c	85 c0		 test	 eax, eax
  0004e	75 02		 jne	 SHORT $LN9@MLS_SkillP
$LN38@MLS_SkillP:

; 7247 : 	{
; 7248 : 		aTargetIndex = aIndex;

  00050	8b f2		 mov	 esi, edx
$LN9@MLS_SkillP:
  00052	53		 push	 ebx

; 7249 : 	}
; 7250 : 	
; 7251 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00053	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  00059	57		 push	 edi

; 7252 : 
; 7253 : 	if( lpObj->PartyNumber == -1 || lpObj->PartyNumber != lpTargetObj->PartyNumber )

  0005a	8b b9 0c 06 00
	00		 mov	 edi, DWORD PTR [ecx+1548]
  00060	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00066	83 ff ff	 cmp	 edi, -1
  00069	0f 84 e5 01 00
	00		 je	 $LN11@MLS_SkillP
  0006f	3b bb 0c 06 00
	00		 cmp	 edi, DWORD PTR [ebx+1548]
  00075	0f 85 d9 01 00
	00		 jne	 $LN11@MLS_SkillP

; 7256 : 		return;
; 7257 : 	}	
; 7258 : 
; 7259 : 	int partynumber = lpObj->PartyNumber;
; 7260 : 	int addlife = (5 + (lpObj->Energy + lpObj->AddEnergy) / 5);

  0007b	8b 45 d0	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0007e	0f b7 89 02 01
	00 00		 movzx	 ecx, WORD PTR [ecx+258]
  00085	0f b7 80 d6 00
	00 00		 movzx	 eax, WORD PTR [eax+214]
  0008c	03 c8		 add	 ecx, eax
  0008e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00093	f7 e9		 imul	 ecx

; 7261 : 
; 7262 : 	if( lpMagic->m_Skill == AT_MSKILL_FE_PARTYHEAL1 )

  00095	8b 45 e0	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00098	d1 fa		 sar	 edx, 1
  0009a	8b ca		 mov	 ecx, edx
  0009c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0009f	83 c1 05	 add	 ecx, 5
  000a2	03 ca		 add	 ecx, edx
  000a4	81 78 08 ad 01
	00 00		 cmp	 DWORD PTR [eax+8], 429	; 000001adH
  000ab	89 4d e4	 mov	 DWORD PTR _addlife$1$[ebp], ecx
  000ae	75 50		 jne	 SHORT $LN39@MLS_SkillP

; 7263 : 	{
; 7264 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000b0	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b9	50		 push	 eax
  000ba	68 ad 01 00 00	 push	 429			; 000001adH
  000bf	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000c4	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c7	50		 push	 eax
  000c8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000cd	d9 5d e8	 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 7265 : 
; 7266 : 		if( fSkillValue > 0.0f )

  000d0	f3 0f 10 55 e8	 movss	 xmm2, DWORD PTR _fSkillValue$1[ebp]
  000d5	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@00000000
  000dc	76 22		 jbe	 SHORT $LN39@MLS_SkillP

; 7267 : 		{
; 7268 : 			addlife += addlife*fSkillValue/100.0f;

  000de	66 0f 6e 4d e4	 movd	 xmm1, DWORD PTR _addlife$1$[ebp]
  000e3	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000e6	0f 28 c1	 movaps	 xmm0, xmm1
  000e9	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000ed	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  000f5	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f9	f3 0f 2c c0	 cvttss2si eax, xmm0
  000fd	89 45 e4	 mov	 DWORD PTR _addlife$1$[ebp], eax
$LN39@MLS_SkillP:

; 7269 : 		}
; 7270 : 	}
; 7271 : 
; 7272 : 	int iApplyHealIndex[4];
; 7273 : 	int iApplyHealDistance[4];
; 7274 : 	memset(iApplyHealIndex,-1,sizeof(iApplyHealIndex));

  00100	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00107	8b c7		 mov	 eax, edi
  00109	c1 e0 04	 shl	 eax, 4
  0010c	2b c7		 sub	 eax, edi
  0010e	c7 45 e8 05 00
	00 00		 mov	 DWORD PTR tv512[ebp], 5
  00115	0f 11 45 ec	 movups	 XMMWORD PTR _iApplyHealIndex$[ebp], xmm0

; 7275 : 	memset(iApplyHealDistance,-1,sizeof(iApplyHealDistance));
; 7276 : 
; 7277 : 	iApplyHealIndex[0] = aTargetIndex;

  00119	89 75 ec	 mov	 DWORD PTR _iApplyHealIndex$[ebp], esi
  0011c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00123	0f 11 45 c0	 movups	 XMMWORD PTR _iApplyHealDistance$[ebp], xmm0
  00127	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0012e	8b 45 cc	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+12]
  00131	89 45 dc	 mov	 DWORD PTR _iApplyHealDistance$3$[ebp], eax
  00134	8b 45 c8	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+8]
  00137	89 45 d8	 mov	 DWORD PTR _iApplyHealDistance$2$[ebp], eax
  0013a	8b 45 c4	 mov	 eax, DWORD PTR _iApplyHealDistance$[ebp+4]
  0013d	89 45 d4	 mov	 DWORD PTR _iApplyHealDistance$1$[ebp], eax
$LL4@MLS_SkillP:

; 7283 : 	{
; 7284 : 		int number = gParty.m_PartyS[partynumber].Number[i];

  00140	8b 37		 mov	 esi, DWORD PTR [edi]

; 7285 : 
; 7286 : 		if( number >= 0 )

  00142	85 f6		 test	 esi, esi
  00144	78 60		 js	 SHORT $LN2@MLS_SkillP

; 7287 : 		{
; 7288 : 			if( lpTargetObj->MapNumber != gObj[number].MapNumber )

  00146	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  0014c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00152	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00158	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  0015e	75 46		 jne	 SHORT $LN2@MLS_SkillP

; 7289 : 				continue;
; 7290 : 
; 7291 : 			int dis = gObjCalDistance(lpTargetObj,&gObj[number]);

  00160	51		 push	 ecx
  00161	53		 push	 ebx
  00162	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00167	83 c4 08	 add	 esp, 8

; 7292 : 
; 7293 : 			if( dis >= 10 )

  0016a	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0016d	7d 37		 jge	 SHORT $LN2@MLS_SkillP

; 7294 : 				continue;
; 7295 : 
; 7296 : 			if( iApplyHealIndex[1] == -1 || iApplyHealDistance[1] > dis )

  0016f	83 7d f0 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+4], -1
  00173	74 2b		 je	 SHORT $LN19@MLS_SkillP
  00175	39 45 d4	 cmp	 DWORD PTR _iApplyHealDistance$1$[ebp], eax
  00178	7f 26		 jg	 SHORT $LN19@MLS_SkillP

; 7300 : 			}
; 7301 : 			else if( iApplyHealIndex[2] == -1 || iApplyHealDistance[2] > dis )

  0017a	83 7d f4 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+8], -1
  0017e	74 18		 je	 SHORT $LN22@MLS_SkillP
  00180	39 45 d8	 cmp	 DWORD PTR _iApplyHealDistance$2$[ebp], eax
  00183	7f 13		 jg	 SHORT $LN22@MLS_SkillP

; 7305 : 			}
; 7306 : 			else if( iApplyHealIndex[3] == -1 || iApplyHealDistance[3] > dis )

  00185	83 7d f8 ff	 cmp	 DWORD PTR _iApplyHealIndex$[ebp+12], -1
  00189	74 05		 je	 SHORT $LN24@MLS_SkillP
  0018b	39 45 dc	 cmp	 DWORD PTR _iApplyHealDistance$3$[ebp], eax
  0018e	7e 16		 jle	 SHORT $LN2@MLS_SkillP
$LN24@MLS_SkillP:

; 7307 : 			{
; 7308 : 				iApplyHealIndex[3] = number;

  00190	89 75 f8	 mov	 DWORD PTR _iApplyHealIndex$[ebp+12], esi

; 7309 : 				iApplyHealDistance[3] = dis;

  00193	89 45 dc	 mov	 DWORD PTR _iApplyHealDistance$3$[ebp], eax
  00196	eb 0e		 jmp	 SHORT $LN2@MLS_SkillP
$LN22@MLS_SkillP:

; 7302 : 			{
; 7303 : 				iApplyHealIndex[2] = number;

  00198	89 75 f4	 mov	 DWORD PTR _iApplyHealIndex$[ebp+8], esi

; 7304 : 				iApplyHealDistance[2] = dis;

  0019b	89 45 d8	 mov	 DWORD PTR _iApplyHealDistance$2$[ebp], eax
  0019e	eb 06		 jmp	 SHORT $LN2@MLS_SkillP
$LN19@MLS_SkillP:

; 7297 : 			{
; 7298 : 				iApplyHealIndex[1] = number;

  001a0	89 75 f0	 mov	 DWORD PTR _iApplyHealIndex$[ebp+4], esi

; 7299 : 				iApplyHealDistance[1] = dis;

  001a3	89 45 d4	 mov	 DWORD PTR _iApplyHealDistance$1$[ebp], eax
$LN2@MLS_SkillP:

; 7278 : 	iApplyHealDistance[0] = 0;
; 7279 : 
; 7280 : 	int i;
; 7281 : 
; 7282 : 	for( i = 0; i < MAX_USER_IN_PARTY; i++)

  001a6	83 c7 04	 add	 edi, 4
  001a9	83 6d e8 01	 sub	 DWORD PTR tv512[ebp], 1
  001ad	75 91		 jne	 SHORT $LL4@MLS_SkillP

; 7310 : 			}
; 7311 : 		}
; 7312 : 	}
; 7313 : 
; 7314 : 	for( i = 0; i < 4; i++)

  001af	33 ff		 xor	 edi, edi
$LL7@MLS_SkillP:

; 7315 : 	{
; 7316 : 		if( iApplyHealIndex[i] != -1 )

  001b1	8b 44 bd ec	 mov	 eax, DWORD PTR _iApplyHealIndex$[ebp+edi*4]
  001b5	83 f8 ff	 cmp	 eax, -1
  001b8	74 7d		 je	 SHORT $LN5@MLS_SkillP

; 7317 : 		{
; 7318 : 			LPOBJ lpHealObj = &gObj[iApplyHealIndex[i]];

  001ba	66 0f 6e 45 e4	 movd	 xmm0, DWORD PTR _addlife$1$[ebp]
  001bf	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 7319 : 			lpHealObj->Life += addlife;

  001c5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001c8	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ce	66 0f 6e 8e 24
	01 00 00	 movd	 xmm1, DWORD PTR [esi+292]
  001d6	f3 0f 58 86 d8
	00 00 00	 addss	 xmm0, DWORD PTR [esi+216]

; 7320 : 
; 7321 : 			if( lpHealObj->Life > lpHealObj->MaxLife+lpHealObj->AddLife )

  001de	0f 5b c9	 cvtdq2ps xmm1, xmm1
  001e1	f3 0f 11 86 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm0
  001e9	f3 0f 58 8e dc
	00 00 00	 addss	 xmm1, DWORD PTR [esi+220]
  001f1	0f 2f c1	 comiss	 xmm0, xmm1
  001f4	76 08		 jbe	 SHORT $LN26@MLS_SkillP

; 7322 : 				lpHealObj->Life = lpHealObj->MaxLife+lpHealObj->AddLife;

  001f6	f3 0f 11 8e d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm1
$LN26@MLS_SkillP:

; 7323 : 
; 7324 : 			GCReFillSend(lpTargetObj->m_Index,(WORD)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  001fe	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  00205	50		 push	 eax
  00206	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  0020e	6a 00		 push	 0
  00210	68 ff 00 00 00	 push	 255			; 000000ffH
  00215	0f b7 c0	 movzx	 eax, ax
  00218	50		 push	 eax
  00219	ff 33		 push	 DWORD PTR [ebx]
  0021b	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 7325 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpHealObj->m_Index,skillSuccess);

  00220	8b 45 e0	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00223	6a 01		 push	 1
  00225	ff 36		 push	 DWORD PTR [esi]
  00227	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0022b	50		 push	 eax
  0022c	ff 75 d0	 push	 DWORD PTR _lpObj$1$[ebp]
  0022f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00234	83 c4 24	 add	 esp, 36			; 00000024H
$LN5@MLS_SkillP:

; 7310 : 			}
; 7311 : 		}
; 7312 : 	}
; 7313 : 
; 7314 : 	for( i = 0; i < 4; i++)

  00237	47		 inc	 edi
  00238	83 ff 04	 cmp	 edi, 4
  0023b	0f 8c 70 ff ff
	ff		 jl	 $LL7@MLS_SkillP
  00241	5f		 pop	 edi
  00242	5b		 pop	 ebx
  00243	5e		 pop	 esi

; 7326 : 		}
; 7327 : 	}
; 7328 : }

  00244	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	33 cd		 xor	 ecx, ebp
  00249	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c2 0c 00	 ret	 12			; 0000000cH
$LN11@MLS_SkillP:

; 7254 : 	{
; 7255 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aIndex,FALSE);

  00254	8b 45 e0	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00257	6a 00		 push	 0
  00259	52		 push	 edx
  0025a	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0025e	50		 push	 eax
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	5f		 pop	 edi
  00269	5b		 pop	 ebx
$LN6@MLS_SkillP:

; 7326 : 		}
; 7327 : 	}
; 7328 : }

  0026a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026d	33 cd		 xor	 ecx, ebp
  0026f	5e		 pop	 esi
  00270	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00275	8b e5		 mov	 esp, ebp
  00277	5d		 pop	 ebp
  00278	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_nEffectValue$2$ = -44					; size = 4
_partynum$1$ = -40					; size = 4
_lpMagic$GSCopy$1$ = -36				; size = 4
_this$GSCopy$1$ = -32					; size = 4
_fSkillValue2$ = -32					; size = 4
tv416 = -28						; size = 4
_fSkillValue$ = -28					; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery, COMDAT
; _this$ = ecx

; 6051 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	8b d1		 mov	 edx, ecx
  00015	53		 push	 ebx
  00016	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00019	56		 push	 esi

; 6052 : 	int skillSuccess = TRUE;
; 6053 : 	LPOBJ lpObj = &gObj[aIndex];

  0001a	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00020	89 55 e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edx
  00023	89 5d dc	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00026	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6054 : 	int number;
; 6055 : 
; 6056 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  0002c	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00030	74 1d		 je	 SHORT $LN8@MLS_SkillM
  00032	83 be 30 06 00
	00 ff		 cmp	 DWORD PTR [esi+1584], -1
  00039	75 14		 jne	 SHORT $LN8@MLS_SkillM
$LN34@MLS_SkillM:
  0003b	5e		 pop	 esi

; 6057 : 		return FALSE;

  0003c	33 c0		 xor	 eax, eax
  0003e	5b		 pop	 ebx

; 6138 : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	33 cd		 xor	 ecx, ebp
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN8@MLS_SkillM:

; 6058 : 
; 6059 : 	if( lpObj->Class != CLASS_FIGHTER )

  0004f	66 83 be 90 00
	00 00 06	 cmp	 WORD PTR [esi+144], 6
  00057	75 e2		 jne	 SHORT $LN34@MLS_SkillM

; 6060 : 		return FALSE;
; 6061 : 
; 6062 : 	int partynum = 0;
; 6063 : 	int partycount;
; 6064 : 	int dis;
; 6065 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 6066 : 	int nEffectValue;
; 6067 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 6068 : 	LPOBJ lpPartyObj;
; 6069 : 
; 6070 : 	partynum = lpObj->PartyNumber;

  00059	8b 8e 0c 06 00
	00		 mov	 ecx, DWORD PTR [esi+1548]
  0005f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00066	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  0006d	89 4d d8	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00070	57		 push	 edi
  00071	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 6071 : 
; 6072 : 	if( partynum != -1 )

  00075	83 f9 ff	 cmp	 ecx, -1
  00078	74 60		 je	 SHORT $LN3@MLS_SkillM

; 6073 : 	{
; 6074 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6075 : 
; 6076 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0007a	8b c1		 mov	 eax, ecx
  0007c	33 ff		 xor	 edi, edi
  0007e	c1 e0 04	 shl	 eax, 4
  00081	2b c1		 sub	 eax, ecx
  00083	8d 14 85 0c 00
	00 00		 lea	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0008a	89 55 e4	 mov	 DWORD PTR tv416[ebp], edx
  0008d	0f 1f 00	 npad	 3
$LL4@MLS_SkillM:

; 6077 : 		{
; 6078 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 02		 mov	 eax, DWORD PTR [edx]

; 6079 : 
; 6080 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 32		 js	 SHORT $LN2@MLS_SkillM

; 6081 : 			{
; 6082 : 				lpPartyObj = &gObj[number];

  00096	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  0009c	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6083 : 
; 6084 : 
; 6085 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  000a2	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  000a8	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000ae	75 18		 jne	 SHORT $LN2@MLS_SkillM

; 6086 : 				{
; 6087 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000b0	53		 push	 ebx
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b7	8b 55 e4	 mov	 edx, DWORD PTR tv416[ebp]
  000ba	83 c4 08	 add	 esp, 8

; 6088 : 					if( dis < 4 )

  000bd	83 f8 04	 cmp	 eax, 4
  000c0	7d 06		 jge	 SHORT $LN2@MLS_SkillM

; 6089 : 					{
; 6090 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c4	89 44 bd e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+edi*4], eax
$LN2@MLS_SkillM:

; 6073 : 	{
; 6074 : 		partycount = gParty.m_PartyS[partynum].Count;
; 6075 : 
; 6076 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000c8	47		 inc	 edi
  000c9	83 c2 04	 add	 edx, 4
  000cc	89 55 e4	 mov	 DWORD PTR tv416[ebp], edx
  000cf	83 ff 05	 cmp	 edi, 5
  000d2	7c bc		 jl	 SHORT $LL4@MLS_SkillM
  000d4	8b 5d dc	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  000d7	8b 55 e0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@MLS_SkillM:

; 6091 : 					}
; 6092 : 				}
; 6093 : 			}
; 6094 : 		}
; 6095 : 	}
; 6096 : 
; 6097 : 	if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE2 )

  000da	81 7b 08 3c 02
	00 00		 cmp	 DWORD PTR [ebx+8], 572	; 0000023cH
  000e1	0f 85 be 01 00
	00		 jne	 $LN14@MLS_SkillM

; 6098 : 	{
; 6099 : 		nEffectValue = 10.0f + (lpObj->Energy+lpObj->AddEnergy-80)/10.0f;

  000e7	0f b7 8e 02 01
	00 00		 movzx	 ecx, WORD PTR [esi+258]
  000ee	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]
  000f5	83 c1 b0	 add	 ecx, -80		; ffffffb0H
  000f8	03 c1		 add	 eax, ecx

; 6100 : 
; 6101 : 		if( nEffectValue > 100 )
; 6102 : 			nEffectValue = 100;
; 6103 : 	}
; 6104 : 	else
; 6105 : 	{
; 6106 : 		return FALSE;
; 6107 : 	}
; 6108 : 
; 6109 : 	float fSkillValue = GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  000fa	8b ca		 mov	 ecx, edx
  000fc	6a 01		 push	 1
  000fe	68 3c 02 00 00	 push	 572			; 0000023cH
  00103	56		 push	 esi
  00104	66 0f 6e c8	 movd	 xmm1, eax
  00108	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0010d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00110	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@41200000
  00118	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@41200000
  00120	f3 0f 2c f9	 cvttss2si edi, xmm1
  00124	3b f8		 cmp	 edi, eax
  00126	0f 4f f8	 cmovg	 edi, eax
  00129	89 7d d4	 mov	 DWORD PTR _nEffectValue$2$[ebp], edi
  0012c	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 6110 : 	float fSkillValue2 = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00131	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00135	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0013a	50		 push	 eax
  0013b	ff 73 08	 push	 DWORD PTR [ebx+8]
  0013e	d9 5d e4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  00141	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00146	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 6111 : 	
; 6112 : 
; 6113 : 	if( partynum == -1 )

  0014f	83 7d d8 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  00153	d9 5d e0	 fstp	 DWORD PTR _fSkillValue2$[ebp]
  00156	0f 85 8f 00 00
	00		 jne	 $LN17@MLS_SkillM

; 6114 : 	{
; 6115 : 		if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE2 )

  0015c	81 7b 08 3c 02
	00 00		 cmp	 DWORD PTR [ebx+8], 572	; 0000023cH
  00163	0f 85 24 01 00
	00		 jne	 $LN6@MLS_SkillM

; 6116 : 		{
; 6117 : 			gObjAddBuffEffect(lpObj,BUFF_INCREASE_DEFRATE3,ADD_OPTION_DEFRATE,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,60+lpObj->Energy/5);

  00169	66 0f 6e 8e 7c
	06 00 00	 movd	 xmm1, DWORD PTR [esi+1660]
  00171	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00176	0f b7 8e d6 00
	00 00		 movzx	 ecx, WORD PTR [esi+214]
  0017d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00180	f7 e9		 imul	 ecx
  00182	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _fSkillValue$[ebp]
  00187	66 0f 6e c7	 movd	 xmm0, edi
  0018b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0018e	d1 fa		 sar	 edx, 1
  00190	8b c2		 mov	 eax, edx
  00192	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00195	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  0019d	83 c0 3c	 add	 eax, 60			; 0000003cH
  001a0	03 c2		 add	 eax, edx
  001a2	50		 push	 eax
  001a3	f3 0f 2c 45 e0	 cvttss2si eax, DWORD PTR _fSkillValue2$[ebp]
  001a8	f3 0f 58 c8	 addss	 xmm1, xmm0
  001ac	50		 push	 eax
  001ad	6a 03		 push	 3
  001af	f3 0f 2c c1	 cvttss2si eax, xmm1
  001b3	50		 push	 eax
  001b4	6a 4a		 push	 74			; 0000004aH
  001b6	68 9a 00 00 00	 push	 154			; 0000009aH
  001bb	56		 push	 esi
  001bc	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6118 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001c1	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  001c5	6a 01		 push	 1
  001c7	ff 36		 push	 DWORD PTR [esi]
  001c9	50		 push	 eax
  001ca	56		 push	 esi
  001cb	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001d0	83 c4 2c	 add	 esp, 44			; 0000002cH

; 6133 : 				}
; 6134 : 			}
; 6135 : 		}
; 6136 : 	}
; 6137 : 	return TRUE;

  001d3	b8 01 00 00 00	 mov	 eax, 1
  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx

; 6138 : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e5	8b e5		 mov	 esp, ebp
  001e7	5d		 pop	 ebp
  001e8	c2 08 00	 ret	 8
$LN17@MLS_SkillM:
  001eb	8b 4d dc	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]

; 6119 : 		}
; 6120 : 	}
; 6121 : 	else
; 6122 : 	{
; 6123 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  001ee	33 db		 xor	 ebx, ebx
$LL7@MLS_SkillM:

; 6124 : 		{
; 6125 : 			if( ApplyPartyIndex[n] != -1 )

  001f0	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  001f4	83 f8 ff	 cmp	 eax, -1
  001f7	0f 84 86 00 00
	00		 je	 $LN5@MLS_SkillM

; 6126 : 			{
; 6127 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  001fd	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00203	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6128 : 
; 6129 : 				if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE2 )

  00209	81 79 08 3c 02
	00 00		 cmp	 DWORD PTR [ecx+8], 572	; 0000023cH
  00210	75 71		 jne	 SHORT $LN5@MLS_SkillM

; 6130 : 				{
; 6131 : 					gObjAddBuffEffect(lpPartyObj,BUFF_INCREASE_DEFRATE3,ADD_OPTION_DEFRATE,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,ADD_OPTION_DEFENSE,fSkillValue2,60+lpObj->Energy/5);

  00212	66 0f 6e 8f 7c
	06 00 00	 movd	 xmm1, DWORD PTR [edi+1660]
  0021a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0021f	0f b7 8e d6 00
	00 00		 movzx	 ecx, WORD PTR [esi+214]
  00226	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00229	66 0f 6e 45 d4	 movd	 xmm0, DWORD PTR _nEffectValue$2$[ebp]
  0022e	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _fSkillValue$[ebp]
  00233	f7 e9		 imul	 ecx
  00235	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00238	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00240	d1 fa		 sar	 edx, 1
  00242	8b c2		 mov	 eax, edx
  00244	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00247	83 c0 3c	 add	 eax, 60			; 0000003cH
  0024a	03 c2		 add	 eax, edx
  0024c	50		 push	 eax
  0024d	f3 0f 2c 45 e0	 cvttss2si eax, DWORD PTR _fSkillValue2$[ebp]
  00252	f3 0f 58 c8	 addss	 xmm1, xmm0
  00256	50		 push	 eax
  00257	6a 03		 push	 3
  00259	f3 0f 2c c1	 cvttss2si eax, xmm1
  0025d	50		 push	 eax
  0025e	6a 4a		 push	 74			; 0000004aH
  00260	68 9a 00 00 00	 push	 154			; 0000009aH
  00265	57		 push	 edi
  00266	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6132 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0026b	8b 45 dc	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0026e	6a 01		 push	 1
  00270	ff 37		 push	 DWORD PTR [edi]
  00272	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00276	50		 push	 eax
  00277	57		 push	 edi
  00278	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0027d	8b 4d dc	 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00280	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN5@MLS_SkillM:

; 6119 : 		}
; 6120 : 	}
; 6121 : 	else
; 6122 : 	{
; 6123 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00283	43		 inc	 ebx
  00284	83 fb 05	 cmp	 ebx, 5
  00287	0f 8c 63 ff ff
	ff		 jl	 $LL7@MLS_SkillM
$LN6@MLS_SkillM:
  0028d	5f		 pop	 edi
  0028e	5e		 pop	 esi

; 6133 : 				}
; 6134 : 			}
; 6135 : 		}
; 6136 : 	}
; 6137 : 	return TRUE;

  0028f	b8 01 00 00 00	 mov	 eax, 1
  00294	5b		 pop	 ebx

; 6138 : }

  00295	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00298	33 cd		 xor	 ecx, ebp
  0029a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c2 08 00	 ret	 8
$LN14@MLS_SkillM:
  002a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a8	33 c0		 xor	 eax, eax
  002aa	5f		 pop	 edi
  002ab	5e		 pop	 esi
  002ac	33 cd		 xor	 ecx, ebp
  002ae	5b		 pop	 ebx
  002af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b4	8b e5		 mov	 esp, ebp
  002b6	5d		 pop	 ebp
  002b7	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$1$ = -44					; size = 4
_this$GSCopy$1$ = -40					; size = 4
_lpMagic$GSCopy$1$ = -36				; size = 4
_Duration$1$ = -36					; size = 4
_nEffectValue$1$ = -32					; size = 4
tv559 = -28						; size = 4
_fSkillValue$ = -28					; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty, COMDAT
; _this$ = ecx

; 5921 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00017	56		 push	 esi

; 5922 : 	int skillSuccess = TRUE;
; 5923 : 	LPOBJ lpObj = &gObj[aIndex];

  00018	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  0001e	89 4d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00021	89 5d dc	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00024	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 5924 : 	int number;
; 5925 : 
; 5926 : 	if( lpObj->Type != OBJ_USER && lpObj->m_RecallMon == -1 )

  0002a	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0002e	74 1d		 je	 SHORT $LN8@MLS_SkillM
  00030	83 be 30 06 00
	00 ff		 cmp	 DWORD PTR [esi+1584], -1
  00037	75 14		 jne	 SHORT $LN8@MLS_SkillM
$LN49@MLS_SkillM:
  00039	5e		 pop	 esi

; 5927 : 		return FALSE;

  0003a	33 c0		 xor	 eax, eax
  0003c	5b		 pop	 ebx

; 6048 : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN8@MLS_SkillM:

; 5928 : 
; 5929 : 	if( lpObj->Class != CLASS_FIGHTER )

  0004d	66 83 be 90 00
	00 00 06	 cmp	 WORD PTR [esi+144], 6
  00055	75 e2		 jne	 SHORT $LN49@MLS_SkillM

; 5930 : 		return FALSE;
; 5931 : 
; 5932 : 	int partynum = 0;
; 5933 : 	int partycount;
; 5934 : 	int dis;
; 5935 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 5936 : 	int nEffectValue;
; 5937 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 5938 : 	LPOBJ lpPartyObj;
; 5939 : 
; 5940 : 	partynum = lpObj->PartyNumber;

  00057	8b 8e 0c 06 00
	00		 mov	 ecx, DWORD PTR [esi+1548]
  0005d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00064	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  0006b	89 4d d4	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  0006e	57		 push	 edi
  0006f	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 5941 : 
; 5942 : 	if( partynum != -1 )

  00073	83 f9 ff	 cmp	 ecx, -1
  00076	74 5f		 je	 SHORT $LN3@MLS_SkillM

; 5943 : 	{
; 5944 : 		partycount = gParty.m_PartyS[partynum].Count;
; 5945 : 
; 5946 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00078	8b c1		 mov	 eax, ecx
  0007a	33 ff		 xor	 edi, edi
  0007c	c1 e0 04	 shl	 eax, 4
  0007f	2b c1		 sub	 eax, ecx
  00081	8d 14 85 0c 00
	00 00		 lea	 edx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  00088	89 55 e4	 mov	 DWORD PTR tv559[ebp], edx
  0008b	0f 1f 44 00 00	 npad	 5
$LL4@MLS_SkillM:

; 5947 : 		{
; 5948 : 			number = gParty.m_PartyS[partynum].Number[n];

  00090	8b 02		 mov	 eax, DWORD PTR [edx]

; 5949 : 
; 5950 : 			if( number >= 0 )

  00092	85 c0		 test	 eax, eax
  00094	78 32		 js	 SHORT $LN2@MLS_SkillM

; 5951 : 			{
; 5952 : 				lpPartyObj = &gObj[number];

  00096	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  0009c	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 5953 : 
; 5954 : 
; 5955 : 				if( lpPartyObj->MapNumber == lpObj->MapNumber )

  000a2	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  000a8	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000ae	75 18		 jne	 SHORT $LN2@MLS_SkillM

; 5956 : 				{
; 5957 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000b0	53		 push	 ebx
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000b7	8b 55 e4	 mov	 edx, DWORD PTR tv559[ebp]
  000ba	83 c4 08	 add	 esp, 8

; 5958 : 					if( dis < 4 )

  000bd	83 f8 04	 cmp	 eax, 4
  000c0	7d 06		 jge	 SHORT $LN2@MLS_SkillM

; 5959 : 					{
; 5960 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000c2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000c4	89 44 bd e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+edi*4], eax
$LN2@MLS_SkillM:

; 5943 : 	{
; 5944 : 		partycount = gParty.m_PartyS[partynum].Count;
; 5945 : 
; 5946 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000c8	47		 inc	 edi
  000c9	83 c2 04	 add	 edx, 4
  000cc	89 55 e4	 mov	 DWORD PTR tv559[ebp], edx
  000cf	83 ff 05	 cmp	 edi, 5
  000d2	7c bc		 jl	 SHORT $LL4@MLS_SkillM
  000d4	8b 5d dc	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
$LN3@MLS_SkillM:

; 5961 : 					}
; 5962 : 				}
; 5963 : 			}
; 5964 : 		}
; 5965 : 	}
; 5966 : 
; 5967 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000d7	ff 73 08	 push	 DWORD PTR [ebx+8]
  000da	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000df	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  000e4	8b c8		 mov	 ecx, eax

; 5968 : 
; 5969 : 	if( !lpInfo )

  000e6	85 c9		 test	 ecx, ecx
  000e8	0f 84 74 02 00
	00		 je	 $LN19@MLS_SkillM

; 5970 : 	{
; 5971 : 		return 0;
; 5972 : 	}
; 5973 : 	
; 5974 : 	int Duration;
; 5975 : 
; 5976 : 	if( lpMagic->m_Skill == AT_MSKILL_RF_FITNESS1 )

  000ee	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000f1	81 fa 3d 02 00
	00		 cmp	 edx, 573		; 0000023dH
  000f7	74 0c		 je	 SHORT $LN47@MLS_SkillM

; 5977 : 	{
; 5978 : 		nEffectValue = lpInfo->m_Arg1 + (lpObj->Energy+lpObj->AddEnergy-lpInfo->m_Arg2)/10.0;
; 5979 : 
; 5980 : 		if( nEffectValue > lpInfo->m_Arg3 )
; 5981 : 			nEffectValue = lpInfo->m_Arg3;
; 5982 : 
; 5983 : 		Duration = lpInfo->m_Arg4+lpObj->Energy/lpInfo->m_Arg5;
; 5984 : 
; 5985 : 		if( Duration > lpInfo->m_Arg6 )
; 5986 : 		{
; 5987 : 			Duration = lpInfo->m_Arg6;
; 5988 : 		}
; 5989 : 	}
; 5990 : 	else if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE1 )

  000f9	81 fa 39 02 00
	00		 cmp	 edx, 569		; 00000239H
  000ff	0f 85 5d 02 00
	00		 jne	 $LN19@MLS_SkillM
$LN47@MLS_SkillM:

; 5991 : 	{
; 5992 : 		nEffectValue = lpInfo->m_Arg1 + (lpObj->Energy+lpObj->AddEnergy-lpInfo->m_Arg2)/10.0;

  00105	0f b7 be d6 00
	00 00		 movzx	 edi, WORD PTR [esi+214]
  0010c	0f b7 86 02 01
	00 00		 movzx	 eax, WORD PTR [esi+258]
  00113	03 c7		 add	 eax, edi
  00115	66 0f 6e c0	 movd	 xmm0, eax
  00119	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00121	0f 5a c8	 cvtps2pd xmm1, xmm0
  00124	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00129	f2 0f 5e 0d 00
	00 00 00	 divsd	 xmm1, QWORD PTR __real@4024000000000000
  00131	0f 5a c0	 cvtps2pd xmm0, xmm0
  00134	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00138	f2 0f 2c c1	 cvttsd2si eax, xmm1

; 5993 : 
; 5994 : 		if( nEffectValue > lpInfo->m_Arg3 )

  0013c	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00141	89 45 e0	 mov	 DWORD PTR _nEffectValue$1$[ebp], eax
  00144	66 0f 6e c0	 movd	 xmm0, eax
  00148	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0014b	0f 2f c1	 comiss	 xmm0, xmm1
  0014e	76 07		 jbe	 SHORT $LN21@MLS_SkillM

; 5995 : 			nEffectValue = lpInfo->m_Arg3;

  00150	f3 0f 2c c1	 cvttss2si eax, xmm1
  00154	89 45 e0	 mov	 DWORD PTR _nEffectValue$1$[ebp], eax
$LN21@MLS_SkillM:

; 5996 : 
; 5997 : 		Duration = lpInfo->m_Arg4+lpObj->Energy/lpInfo->m_Arg5;

  00157	66 0f 6e c7	 movd	 xmm0, edi
  0015b	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 5998 : 
; 5999 : 		if( Duration > lpInfo->m_Arg6 )

  0015e	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00163	f3 0f 5e 41 14	 divss	 xmm0, DWORD PTR [ecx+20]
  00168	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  0016d	f3 0f 2c f8	 cvttss2si edi, xmm0
  00171	89 7d dc	 mov	 DWORD PTR _Duration$1$[ebp], edi
  00174	66 0f 6e c7	 movd	 xmm0, edi
  00178	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017b	0f 2f c1	 comiss	 xmm0, xmm1
  0017e	76 07		 jbe	 SHORT $LN22@MLS_SkillM

; 6000 : 		{
; 6001 : 			Duration = lpInfo->m_Arg6;

  00180	f3 0f 2c f9	 cvttss2si edi, xmm1
  00184	89 7d dc	 mov	 DWORD PTR _Duration$1$[ebp], edi
$LN22@MLS_SkillM:

; 6002 : 		}
; 6003 : 	}
; 6004 : 	else
; 6005 : 	{
; 6006 : 		return FALSE;
; 6007 : 	}
; 6008 : 
; 6009 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00187	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  0018b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00190	50		 push	 eax
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00197	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 6010 : 
; 6011 : 	if( partynum == -1 )

  001a0	83 7d d4 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001a4	d9 5d e4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  001a7	0f 85 cf 00 00
	00		 jne	 $LN23@MLS_SkillM

; 6012 : 	{
; 6013 : 		if( lpMagic->m_Skill == AT_MSKILL_RF_FITNESS1 )

  001ad	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001b0	3d 3d 02 00 00	 cmp	 eax, 573		; 0000023dH
  001b5	75 55		 jne	 SHORT $LN25@MLS_SkillM

; 6014 : 		{
; 6015 : 			gObjAddBuffEffect(lpObj,BUFF_INCREASE_VIT2,ADD_OPTION_INCRVITALITY,nEffectValue+fSkillValue,0,0,Duration);

  001b7	66 0f 6e 45 e0	 movd	 xmm0, DWORD PTR _nEffectValue$1$[ebp]
  001bc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001bf	57		 push	 edi
  001c0	6a 00		 push	 0
  001c2	6a 00		 push	 0
  001c4	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  001c9	f3 0f 2c c0	 cvttss2si eax, xmm0
  001cd	50		 push	 eax
  001ce	6a 49		 push	 73			; 00000049H
  001d0	68 9b 00 00 00	 push	 155			; 0000009bH
  001d5	56		 push	 esi
  001d6	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6016 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001db	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  001df	6a 01		 push	 1
  001e1	ff 36		 push	 DWORD PTR [esi]
  001e3	50		 push	 eax
  001e4	56		 push	 esi
  001e5	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6017 : 			gObjCalCharacter(lpObj->m_Index);

  001ea	ff 36		 push	 DWORD PTR [esi]
  001ec	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  001f1	83 c4 30	 add	 esp, 48			; 00000030H

; 6043 : 				}
; 6044 : 			}
; 6045 : 		}
; 6046 : 	}
; 6047 : 	return TRUE;

  001f4	b8 01 00 00 00	 mov	 eax, 1
  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx

; 6048 : }

  001fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ff	33 cd		 xor	 ecx, ebp
  00201	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00206	8b e5		 mov	 esp, ebp
  00208	5d		 pop	 ebp
  00209	c2 08 00	 ret	 8
$LN25@MLS_SkillM:

; 6018 : 		}
; 6019 : 		else if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE1 )

  0020c	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  00211	0f 85 33 01 00
	00		 jne	 $LN6@MLS_SkillM

; 6020 : 		{
; 6021 : 			gObjAddBuffEffect(lpObj,BUFF_INCREASE_DEFRATE2,ADD_OPTION_DEFRATE,nEffectValue+lpObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Duration);

  00217	66 0f 6e 8e 7c
	06 00 00	 movd	 xmm1, DWORD PTR [esi+1660]
  0021f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00222	57		 push	 edi
  00223	6a 00		 push	 0
  00225	6a 00		 push	 0
  00227	66 0f 6e 45 e0	 movd	 xmm0, DWORD PTR _nEffectValue$1$[ebp]
  0022c	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _fSkillValue$[ebp]
  00231	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00234	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  0023c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00240	f3 0f 2c c1	 cvttss2si eax, xmm1
  00244	50		 push	 eax
  00245	6a 4a		 push	 74			; 0000004aH
  00247	68 99 00 00 00	 push	 153			; 00000099H
  0024c	56		 push	 esi
  0024d	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6022 : 			GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  00252	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00256	6a 01		 push	 1
  00258	ff 36		 push	 DWORD PTR [esi]
  0025a	50		 push	 eax
  0025b	56		 push	 esi
  0025c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00261	83 c4 2c	 add	 esp, 44			; 0000002cH

; 6043 : 				}
; 6044 : 			}
; 6045 : 		}
; 6046 : 	}
; 6047 : 	return TRUE;

  00264	b8 01 00 00 00	 mov	 eax, 1
  00269	5f		 pop	 edi
  0026a	5e		 pop	 esi
  0026b	5b		 pop	 ebx

; 6048 : }

  0026c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026f	33 cd		 xor	 ecx, ebp
  00271	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00276	8b e5		 mov	 esp, ebp
  00278	5d		 pop	 ebp
  00279	c2 08 00	 ret	 8
$LN23@MLS_SkillM:

; 6023 : 		}
; 6024 : 	}
; 6025 : 	else
; 6026 : 	{
; 6027 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0027c	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _fSkillValue$[ebp]
  00281	33 ff		 xor	 edi, edi
$LL7@MLS_SkillM:

; 6028 : 		{
; 6029 : 			if( ApplyPartyIndex[n] != -1 )

  00283	8b 44 bd e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+edi*4]
  00287	83 f8 ff	 cmp	 eax, -1
  0028a	0f 84 b0 00 00
	00		 je	 $LN5@MLS_SkillM

; 6030 : 			{
; 6031 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  00290	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 6032 : 
; 6033 : 				if( lpMagic->m_Skill == AT_MSKILL_RF_FITNESS1 )

  00296	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00299	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0029f	3d 3d 02 00 00	 cmp	 eax, 573		; 0000023dH
  002a4	75 40		 jne	 SHORT $LN29@MLS_SkillM

; 6034 : 				{
; 6035 : 					gObjAddBuffEffect(lpPartyObj,BUFF_INCREASE_VIT2,ADD_OPTION_INCRVITALITY,nEffectValue+fSkillValue,0,0,Duration);

  002a6	66 0f 6e 45 e0	 movd	 xmm0, DWORD PTR _nEffectValue$1$[ebp]
  002ab	ff 75 dc	 push	 DWORD PTR _Duration$1$[ebp]
  002ae	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002b1	6a 00		 push	 0
  002b3	6a 00		 push	 0
  002b5	f3 0f 58 c2	 addss	 xmm0, xmm2
  002b9	f3 0f 2c c0	 cvttss2si eax, xmm0
  002bd	50		 push	 eax
  002be	6a 49		 push	 73			; 00000049H
  002c0	68 9b 00 00 00	 push	 155			; 0000009bH
  002c5	56		 push	 esi
  002c6	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6036 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  002cb	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  002cf	6a 01		 push	 1
  002d1	ff 36		 push	 DWORD PTR [esi]
  002d3	50		 push	 eax
  002d4	56		 push	 esi
  002d5	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6037 : 					gObjCalCharacter(lpPartyObj->m_Index);

  002da	ff 36		 push	 DWORD PTR [esi]
  002dc	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  002e1	83 c4 30	 add	 esp, 48			; 00000030H
  002e4	eb 55		 jmp	 SHORT $LN48@MLS_SkillM
$LN29@MLS_SkillM:

; 6038 : 				}
; 6039 : 				else if( lpMagic->m_Skill == AT_MSKILL_RF_DEFRATE1 )

  002e6	3d 39 02 00 00	 cmp	 eax, 569		; 00000239H
  002eb	75 53		 jne	 SHORT $LN5@MLS_SkillM

; 6040 : 				{
; 6041 : 					gObjAddBuffEffect(lpPartyObj,BUFF_INCREASE_DEFRATE2,ADD_OPTION_DEFRATE,nEffectValue+lpPartyObj->m_SuccessfulBlocking*fSkillValue/100.0f,0,0,Duration);

  002ed	66 0f 6e 8e 7c
	06 00 00	 movd	 xmm1, DWORD PTR [esi+1660]
  002f5	0f 5b c9	 cvtdq2ps xmm1, xmm1
  002f8	66 0f 6e 45 e0	 movd	 xmm0, DWORD PTR _nEffectValue$1$[ebp]
  002fd	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00301	ff 75 dc	 push	 DWORD PTR _Duration$1$[ebp]
  00304	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00307	6a 00		 push	 0
  00309	6a 00		 push	 0
  0030b	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00313	f3 0f 58 c8	 addss	 xmm1, xmm0
  00317	f3 0f 2c c1	 cvttss2si eax, xmm1
  0031b	50		 push	 eax
  0031c	6a 4a		 push	 74			; 0000004aH
  0031e	68 99 00 00 00	 push	 153			; 00000099H
  00323	56		 push	 esi
  00324	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6042 : 					GCMagicAttackNumberSend(lpPartyObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  00329	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  0032d	6a 01		 push	 1
  0032f	ff 36		 push	 DWORD PTR [esi]
  00331	50		 push	 eax
  00332	56		 push	 esi
  00333	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00338	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN48@MLS_SkillM:
  0033b	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _fSkillValue$[ebp]
$LN5@MLS_SkillM:

; 6023 : 		}
; 6024 : 	}
; 6025 : 	else
; 6026 : 	{
; 6027 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00340	47		 inc	 edi
  00341	83 ff 05	 cmp	 edi, 5
  00344	0f 8c 39 ff ff
	ff		 jl	 $LL7@MLS_SkillM
$LN6@MLS_SkillM:
  0034a	5f		 pop	 edi
  0034b	5e		 pop	 esi

; 6043 : 				}
; 6044 : 			}
; 6045 : 		}
; 6046 : 	}
; 6047 : 	return TRUE;

  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	5b		 pop	 ebx

; 6048 : }

  00352	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00355	33 cd		 xor	 ecx, ebp
  00357	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 08 00	 ret	 8
$LN19@MLS_SkillM:
  00362	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00365	33 c0		 xor	 eax, eax
  00367	5f		 pop	 edi
  00368	5e		 pop	 esi
  00369	33 cd		 xor	 ecx, ebp
  0036b	5b		 pop	 ebx
  0036c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00371	8b e5		 mov	 esp, ebp
  00373	5d		 pop	 ebp
  00374	c2 08 00	 ret	 8
?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -16					; size = 4
_fSkillValue$ = -12					; size = 4
_this$1$ = -8						; size = 4
tv487 = -4						; size = 4
?gObj@@3PAUOBJECTSTRUCT@@A$1 = 8			; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv480 = 16						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery, COMDAT
; _this$ = ecx

; 5810 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 5811 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00009	53		 push	 ebx
  0000a	69 da 40 27 00
	00		 imul	 ebx, edx, 10048
  00010	56		 push	 esi
  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	03 de		 add	 ebx, esi
  00019	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 5812 : 	int nTargetObjNum = 0;
; 5813 : 	int nViewPortObjectCount = 0;
; 5814 : 	int DuelIndex = lpObj->m_iDuelUser;
; 5815 : 
; 5816 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  0001f	57		 push	 edi
  00020	33 ff		 xor	 edi, edi
  00022	89 75 08	 mov	 DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A$1[ebp], esi
  00025	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  0002b	89 45 f0	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0002e	85 c9		 test	 ecx, ecx
  00030	0f 88 15 02 00
	00		 js	 $LN42@MLS_SkillM
  00036	33 c0		 xor	 eax, eax
  00038	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0003e	0f 9e c0	 setle	 al
  00041	85 c0		 test	 eax, eax
  00043	0f 84 02 02 00
	00		 je	 $LN42@MLS_SkillM

; 5819 : 			aIndex,gObj[aIndex].AccountID);
; 5820 : 		return;
; 5821 : 	}
; 5822 : 
; 5823 : 	int EnableAttack;
; 5824 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00049	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048

; 5825 : 
; 5826 : 	float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00052	89 45 fc	 mov	 DWORD PTR tv487[ebp], eax
  00055	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00059	50		 push	 eax
  0005a	ff 71 08	 push	 DWORD PTR [ecx+8]
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00062	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00067	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00070	8b 4d 10	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00073	8d 83 4a 0c 00
	00		 lea	 eax, DWORD PTR [ebx+3146]
  00079	d9 5d f4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0007c	0f 1f 40 00	 npad	 4
$LL2@MLS_SkillM:

; 5827 : 
; 5828 : 	while( TRUE )
; 5829 : 	{
; 5830 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  00080	80 78 fe 00	 cmp	 BYTE PTR [eax-2], 0
  00084	74 0b		 je	 SHORT $LN9@MLS_SkillM

; 5831 : 		{
; 5832 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  00086	0f bf 30	 movsx	 esi, WORD PTR [eax]

; 5833 : 
; 5834 : 			if( nTargetObjNum >= 0 && 

  00089	85 f6		 test	 esi, esi
  0008b	78 04		 js	 SHORT $LN9@MLS_SkillM
  0008d	3b f1		 cmp	 esi, ecx
  0008f	74 12		 je	 SHORT $LN35@MLS_SkillM
$LN9@MLS_SkillM:

; 5904 : 						}
; 5905 : 					}
; 5906 : 				}
; 5907 : 				break;
; 5908 : 			}
; 5909 : 		}
; 5910 : 
; 5911 : 		nViewPortObjectCount++;

  00091	47		 inc	 edi
  00092	83 c0 0c	 add	 eax, 12			; 0000000cH

; 5912 : 
; 5913 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  00095	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  00098	7e e6		 jle	 SHORT $LL2@MLS_SkillM
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 5914 : 		{
; 5915 : 			break;
; 5916 : 		}
; 5917 : 	}
; 5918 : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$LN35@MLS_SkillM:

; 5835 : 				nTargetObjNum == aTargetIndex )
; 5836 : 			{
; 5837 : 				EnableAttack = FALSE;
; 5838 : 
; 5839 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  000a3	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a6	80 bc 83 4c 0c
	00 00 01	 cmp	 BYTE PTR [ebx+eax*4+3148], 1
  000ae	74 67		 je	 SHORT $LN44@MLS_SkillM

; 5840 : 				{
; 5841 : 					EnableAttack = TRUE;
; 5842 : 				}
; 5843 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  000b0	8b 45 08	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A$1[ebp]
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR tv487[ebp]
  000b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bc	80 7c 01 50 02	 cmp	 BYTE PTR [ecx+eax+80], 2
  000c1	75 10		 jne	 SHORT $LN12@MLS_SkillM
  000c3	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  000c9	83 bc 10 30 06
	00 00 00	 cmp	 DWORD PTR [eax+edx+1584], 0
  000d1	7c 4a		 jl	 SHORT $LN43@MLS_SkillM
$LN12@MLS_SkillM:

; 5844 : 				{
; 5845 : 					EnableAttack = TRUE;
; 5846 : 				}
; 5847 : 				else if( nTargetObjNum == DuelIndex )

  000d3	3b 75 f0	 cmp	 esi, DWORD PTR _DuelIndex$1$[ebp]
  000d6	74 45		 je	 SHORT $LN43@MLS_SkillM

; 5848 : 				{
; 5849 : 					EnableAttack = TRUE;
; 5850 : 				}
; 5851 : 				else
; 5852 : 				{
; 5853 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  000d8	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 5854 : 
; 5855 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  000de	80 7c 10 50 02	 cmp	 BYTE PTR [eax+edx+80], 2
  000e3	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000e6	75 14		 jne	 SHORT $LN16@MLS_SkillM
  000e8	8b 84 10 30 06
	00 00		 mov	 eax, DWORD PTR [eax+edx+1584]
  000ef	85 c0		 test	 eax, eax
  000f1	78 09		 js	 SHORT $LN16@MLS_SkillM

; 5856 : 					{
; 5857 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  000f3	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000f9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
$LN16@MLS_SkillM:

; 5858 : 					}
; 5859 : 
; 5860 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000fc	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00102	03 c2		 add	 eax, edx
  00104	50		 push	 eax
  00105	53		 push	 ebx
  00106	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0010b	83 c4 08	 add	 esp, 8
  0010e	83 f8 01	 cmp	 eax, 1
  00111	0f 85 47 01 00
	00		 jne	 $LN5@MLS_SkillM
$LN44@MLS_SkillM:
  00117	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN43@MLS_SkillM:

; 5861 : 					{
; 5862 : 						EnableAttack = TRUE;
; 5863 : 					}
; 5864 : 				}
; 5865 : 
; 5866 : 				if( EnableAttack != FALSE && 

  0011d	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00123	8b 75 fc	 mov	 esi, DWORD PTR tv487[ebp]
  00126	0f b6 84 11 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+289]
  0012e	50		 push	 eax
  0012f	0f b6 84 11 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+288]
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0013a	50		 push	 eax
  0013b	0f b6 84 16 21
	01 00 00	 movzx	 eax, BYTE PTR [esi+edx+289]
  00143	50		 push	 eax
  00144	0f b6 84 16 20
	01 00 00	 movzx	 eax, BYTE PTR [esi+edx+288]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00152	83 f8 04	 cmp	 eax, 4
  00155	0f 8d 03 01 00
	00		 jge	 $LN5@MLS_SkillM

; 5867 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )
; 5868 : 				{
; 5869 : 					int nMaxBarrageCount = 0;
; 5870 : 
; 5871 : 					if( lpMagic->m_Skill == AT_MSKILL_RF_KILLBLOW2 )

  0015b	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0015e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00161	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  00166	75 07		 jne	 SHORT $LN19@MLS_SkillM

; 5872 : 					{
; 5873 : 						nMaxBarrageCount = 5;

  00168	bf 05 00 00 00	 mov	 edi, 5
  0016d	eb 0f		 jmp	 SHORT $LN21@MLS_SkillM
$LN19@MLS_SkillM:

; 5874 : 					}
; 5875 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT2 )

  0016f	33 ff		 xor	 edi, edi
  00171	ba 03 00 00 00	 mov	 edx, 3
  00176	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  0017b	0f 44 fa	 cmove	 edi, edx
$LN21@MLS_SkillM:

; 5876 : 					{
; 5877 : 						nMaxBarrageCount = 3;
; 5878 : 					}
; 5879 : 					else
; 5880 : 					{
; 5881 : 						nMaxBarrageCount = 0;
; 5882 : 					}
; 5883 : 
; 5884 : 					if( lpMagic->m_Skill == AT_MSKILL_RF_KILLBLOW2 && 

  0017e	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  00183	75 33		 jne	 SHORT $LN23@MLS_SkillM
  00185	e8 00 00 00 00	 call	 _rand
  0018a	99		 cdq
  0018b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00190	f7 f9		 idiv	 ecx
  00192	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00195	7d 1e		 jge	 SHORT $LN46@MLS_SkillM

; 5885 : 						rand()%100 < 10 )
; 5886 : 					{
; 5887 : 						gObjAddBuffEffect(lpTargetObj,BUFF_WEAKNESS,ADD_OPTION_WEAKNESS,5+fSkillValue,0,0,10);

  00197	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  0019c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40a00000
  001a4	6a 0a		 push	 10			; 0000000aH
  001a6	6a 00		 push	 0
  001a8	6a 00		 push	 0
  001aa	f3 0f 2c c0	 cvttss2si eax, xmm0
  001ae	50		 push	 eax
  001af	6a 1d		 push	 29			; 0000001dH
  001b1	6a 4c		 push	 76			; 0000004cH
  001b3	eb 3a		 jmp	 SHORT $LN48@MLS_SkillM
$LN46@MLS_SkillM:
  001b5	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
$LN23@MLS_SkillM:

; 5888 : 					}
; 5889 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT2 &&

  001b8	81 79 08 2b 02
	00 00		 cmp	 DWORD PTR [ecx+8], 555	; 0000022bH
  001bf	75 3f		 jne	 SHORT $LN25@MLS_SkillM
  001c1	e8 00 00 00 00	 call	 _rand
  001c6	99		 cdq
  001c7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001cc	f7 f9		 idiv	 ecx
  001ce	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001d1	7d 2a		 jge	 SHORT $LN45@MLS_SkillM

; 5890 : 						rand()%100 < 10 )
; 5891 : 					{
; 5892 : 						gObjAddBuffEffect(lpTargetObj,BUFF_DEFENSEDOWN,ADD_OPTION_DEFENSEDOWN,10+fSkillValue,0,0,10);

  001d3	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  001d8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  001e0	6a 0a		 push	 10			; 0000000aH
  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	f3 0f 2c c0	 cvttss2si eax, xmm0
  001ea	50		 push	 eax
  001eb	6a 17		 push	 23			; 00000017H
  001ed	6a 3a		 push	 58			; 0000003aH
$LN48@MLS_SkillM:
  001ef	8b 45 08	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A$1[ebp]
  001f2	03 c6		 add	 eax, esi
  001f4	50		 push	 eax
  001f5	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  001fa	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN45@MLS_SkillM:
  001fd	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
$LN25@MLS_SkillM:

; 5893 : 					}
; 5894 : 
; 5895 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  00200	be 01 00 00 00	 mov	 esi, 1
  00205	3b fe		 cmp	 edi, esi
  00207	7e 55		 jle	 SHORT $LN5@MLS_SkillM
  00209	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0020c	89 45 10	 mov	 DWORD PTR tv480[ebp], eax
  0020f	90		 npad	 1
$LL6@MLS_SkillM:

; 5896 : 					{
; 5897 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  00210	8b c6		 mov	 eax, esi
  00212	99		 cdq
  00213	f7 7d 10	 idiv	 DWORD PTR tv480[ebp]

; 5898 : 						{
; 5899 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  00216	8b 45 fc	 mov	 eax, DWORD PTR tv487[ebp]
  00219	03 45 08	 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A$1[ebp]
  0021c	6a 00		 push	 0
  0021e	56		 push	 esi
  0021f	6a 00		 push	 0
  00221	6a 00		 push	 0
  00223	6a 01		 push	 1
  00225	83 fa 01	 cmp	 edx, 1
  00228	75 03		 jne	 SHORT $LN26@MLS_SkillM
  0022a	52		 push	 edx

; 5900 : 						}
; 5901 : 						else

  0022b	eb 02		 jmp	 SHORT $LN47@MLS_SkillM
$LN26@MLS_SkillM:

; 5902 : 						{
; 5903 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  0022d	6a 00		 push	 0
$LN47@MLS_SkillM:
  0022f	51		 push	 ecx
  00230	50		 push	 eax
  00231	53		 push	 ebx
  00232	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00237	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0023a	46		 inc	 esi
  0023b	83 c4 24	 add	 esp, 36			; 00000024H
  0023e	3b f7		 cmp	 esi, edi
  00240	7c ce		 jl	 SHORT $LL6@MLS_SkillM
  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx

; 5914 : 		{
; 5915 : 			break;
; 5916 : 		}
; 5917 : 	}
; 5918 : }

  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 0c 00	 ret	 12			; 0000000cH
$LN42@MLS_SkillM:

; 5817 : 	{
; 5818 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",

  0024b	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0024e	50		 push	 eax
  0024f	52		 push	 edx
  00250	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@MLS_SkillM:
  0025e	5f		 pop	 edi
  0025f	5e		 pop	 esi
  00260	5b		 pop	 ebx

; 5914 : 		{
; 5915 : 			break;
; 5916 : 		}
; 5917 : 	}
; 5918 : }

  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv505 = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
tv497 = 12						; size = 4
_lpMagic$ = 12						; size = 4
_nMaxBarrageCount$1$ = 16				; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget, COMDAT
; _this$ = ecx

; 5683 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 5684 : 	LPOBJ lpObj = &gObj[aIndex];

  00007	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 5685 : 	int nTargetObjNum = 0;
; 5686 : 	int nViewPortObjectCount = 0;

  0000d	33 d2		 xor	 edx, edx
  0000f	56		 push	 esi

; 5687 : 	int DuelIndex = lpObj->m_iDuelUser;
; 5688 : 
; 5689 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  00010	8b 75 10	 mov	 esi, DWORD PTR _aTargetIndex$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00017	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001a	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00020	03 cb		 add	 ecx, ebx
  00022	89 4d 08	 mov	 DWORD PTR _lpObj$1$[ebp], ecx
  00025	85 f6		 test	 esi, esi
  00027	0f 88 21 02 00
	00		 js	 $LN51@MLS_SkillM
  0002d	33 c0		 xor	 eax, eax
  0002f	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00035	0f 9e c0	 setle	 al
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 0e 02 00
	00		 je	 $LN51@MLS_SkillM

; 5692 : 			aIndex,gObj[aIndex].AccountID);
; 5693 : 		return;
; 5694 : 	}
; 5695 : 
; 5696 : 	int EnableAttack;
; 5697 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00040	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00046	89 45 fc	 mov	 DWORD PTR tv505[ebp], eax
  00049	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  0004c	8d 81 4a 0c 00
	00		 lea	 eax, DWORD PTR [ecx+3146]
$LL2@MLS_SkillM:

; 5698 : 
; 5699 : 	while( TRUE )
; 5700 : 	{
; 5701 : 		if( lpObj->VpPlayer2[nViewPortObjectCount].state != 0 )

  00052	80 78 fe 00	 cmp	 BYTE PTR [eax-2], 0
  00056	74 0c		 je	 SHORT $LN9@MLS_SkillM

; 5702 : 		{
; 5703 : 			nTargetObjNum = lpObj->VpPlayer2[nViewPortObjectCount].number;

  00058	0f bf 30	 movsx	 esi, WORD PTR [eax]

; 5704 : 
; 5705 : 			if( nTargetObjNum >= 0 && 

  0005b	85 f6		 test	 esi, esi
  0005d	78 05		 js	 SHORT $LN9@MLS_SkillM
  0005f	3b 75 10	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00062	74 12		 je	 SHORT $LN44@MLS_SkillM
$LN9@MLS_SkillM:

; 5793 : 						}
; 5794 : 					}
; 5795 : 				}
; 5796 : 				break;
; 5797 : 			}
; 5798 : 		}
; 5799 : 
; 5800 : 		nViewPortObjectCount++;

  00064	42		 inc	 edx
  00065	83 c0 0c	 add	 eax, 12			; 0000000cH

; 5801 : 
; 5802 : 		if(nViewPortObjectCount > MAX_VIEWPORT -1)

  00068	83 fa 4a	 cmp	 edx, 74			; 0000004aH
  0006b	7e e5		 jle	 SHORT $LL2@MLS_SkillM
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 5803 : 		{
; 5804 : 			break;
; 5805 : 		}
; 5806 : 	}
; 5807 : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 0c 00	 ret	 12			; 0000000cH
$LN44@MLS_SkillM:

; 5706 : 				nTargetObjNum == aTargetIndex )
; 5707 : 			{
; 5708 : 				EnableAttack = FALSE;
; 5709 : 
; 5710 : 				if(lpObj->VpPlayer2[nViewPortObjectCount].type == OBJ_USER )

  00076	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00079	80 bc 81 4c 0c
	00 00 01	 cmp	 BYTE PTR [ecx+eax*4+3148], 1
  00081	74 63		 je	 SHORT $LN52@MLS_SkillM

; 5711 : 				{
; 5712 : 					EnableAttack = TRUE;
; 5713 : 				}
; 5714 : 				else if( lpTargetObj->Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon < 0 )

  00083	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  00087	75 10		 jne	 SHORT $LN12@MLS_SkillM
  00089	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  0008f	83 bc 18 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ebx+1584], 0
  00097	7c 4d		 jl	 SHORT $LN52@MLS_SkillM
$LN12@MLS_SkillM:

; 5715 : 				{
; 5716 : 					EnableAttack = TRUE;
; 5717 : 				}
; 5718 : 				else if( nTargetObjNum == DuelIndex )

  00099	3b b1 50 12 00
	00		 cmp	 esi, DWORD PTR [ecx+4688]
  0009f	74 45		 je	 SHORT $LN52@MLS_SkillM

; 5719 : 				{
; 5720 : 					EnableAttack = TRUE;
; 5721 : 				}
; 5722 : 				else
; 5723 : 				{
; 5724 : 					int CallMonIndex = gObj[nTargetObjNum].m_Index;

  000a1	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 5725 : 
; 5726 : 					if(gObj[nTargetObjNum].Type == OBJ_MONSTER && gObj[nTargetObjNum].m_RecallMon >= 0)

  000a7	80 7c 18 50 02	 cmp	 BYTE PTR [eax+ebx+80], 2
  000ac	8b 14 18	 mov	 edx, DWORD PTR [eax+ebx]
  000af	75 14		 jne	 SHORT $LN16@MLS_SkillM
  000b1	8b 84 18 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ebx+1584]
  000b8	85 c0		 test	 eax, eax
  000ba	78 09		 js	 SHORT $LN16@MLS_SkillM

; 5727 : 					{
; 5728 : 						CallMonIndex = gObj[gObj[nTargetObjNum].m_RecallMon].m_Index;

  000bc	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000c2	8b 14 18	 mov	 edx, DWORD PTR [eax+ebx]
$LN16@MLS_SkillM:

; 5729 : 					}
; 5730 : 
; 5731 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000c5	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  000cb	03 c3		 add	 eax, ebx
  000cd	50		 push	 eax
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000d4	83 c4 08	 add	 esp, 8
  000d7	83 f8 01	 cmp	 eax, 1
  000da	0f 85 81 01 00
	00		 jne	 $LN5@MLS_SkillM
  000e0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN52@MLS_SkillM:

; 5732 : 					{
; 5733 : 						EnableAttack = TRUE;
; 5734 : 					}
; 5735 : 				}
; 5736 : 
; 5737 : 				if( EnableAttack != FALSE && 

  000e6	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  000ec	0f b6 84 19 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+289]
  000f4	50		 push	 eax
  000f5	0f b6 84 19 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+288]
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR tv505[ebp]
  00100	50		 push	 eax
  00101	0f b6 84 19 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+289]
  00109	50		 push	 eax
  0010a	0f b6 84 19 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+ebx+288]
  00112	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0011b	83 f8 04	 cmp	 eax, 4
  0011e	0f 8d 3d 01 00
	00		 jge	 $LN5@MLS_SkillM

; 5738 : 					MLS_CalDistance(gObj[aTargetIndex].X,gObj[aTargetIndex].Y,gObj[nTargetObjNum].X,gObj[nTargetObjNum].Y) < 4 )
; 5739 : 				{
; 5740 : 					int nMaxBarrageCount = 0;
; 5741 : 
; 5742 : 					if( lpMagic->m_Skill == AT_MSKILL_RF_KILLBLOW1 )

  00124	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00127	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0012a	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  0012f	74 35		 je	 SHORT $LN25@MLS_SkillM

; 5743 : 					{
; 5744 : 						nMaxBarrageCount = 5;
; 5745 : 					}
; 5746 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT1 )

  00131	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  00136	75 09		 jne	 SHORT $LN21@MLS_SkillM
$LN28@MLS_SkillM:

; 5747 : 					{
; 5748 : 						nMaxBarrageCount = 3;

  00138	c7 45 10 03 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$1$[ebp], 3
  0013f	eb 2c		 jmp	 SHORT $LN27@MLS_SkillM
$LN21@MLS_SkillM:

; 5749 : 					}
; 5750 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_CHAINDRIVE1 || lpMagic->m_Skill == AT_MSKILL_RF_CHAINDRIVE2 )

  00141	3d 2e 02 00 00	 cmp	 eax, 558		; 0000022eH
  00146	74 1e		 je	 SHORT $LN25@MLS_SkillM
  00148	3d 32 02 00 00	 cmp	 eax, 562		; 00000232H
  0014d	74 17		 je	 SHORT $LN25@MLS_SkillM

; 5753 : 					}
; 5754 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_DARKSIDE1 
; 5755 : 						|| lpMagic->m_Skill == AT_MSKILL_RF_DARKSIDE2 )

  0014f	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  00154	74 e2		 je	 SHORT $LN28@MLS_SkillM
  00156	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  0015b	74 db		 je	 SHORT $LN28@MLS_SkillM

; 5756 : 					{
; 5757 : 						nMaxBarrageCount = 3;
; 5758 : 					}
; 5759 : 					else
; 5760 : 					{
; 5761 : 						nMaxBarrageCount = 0;

  0015d	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$1$[ebp], 0
  00164	eb 07		 jmp	 SHORT $LN27@MLS_SkillM
$LN25@MLS_SkillM:

; 5751 : 					{
; 5752 : 						nMaxBarrageCount = 5;

  00166	c7 45 10 05 00
	00 00		 mov	 DWORD PTR _nMaxBarrageCount$1$[ebp], 5
$LN27@MLS_SkillM:

; 5762 : 					}
; 5763 : 
; 5764 : 					if( lpMagic->m_Skill == AT_MSKILL_RF_KILLBLOW1 && 

  0016d	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  00172	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  00177	75 1b		 jne	 SHORT $LN29@MLS_SkillM
  00179	e8 00 00 00 00	 call	 _rand
  0017e	99		 cdq
  0017f	f7 fe		 idiv	 esi
  00181	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00184	7d 0e		 jge	 SHORT $LN29@MLS_SkillM

; 5765 : 						rand()%100 < 10 )
; 5766 : 					{
; 5767 : 						gObjAddBuffEffect(lpTargetObj,BUFF_WEAKNESS,ADD_OPTION_WEAKNESS,5,0,0,10);

  00186	6a 0a		 push	 10			; 0000000aH
  00188	6a 00		 push	 0
  0018a	6a 00		 push	 0
  0018c	6a 05		 push	 5
  0018e	6a 1d		 push	 29			; 0000001dH
  00190	6a 4c		 push	 76			; 0000004cH
  00192	eb 68		 jmp	 SHORT $LN53@MLS_SkillM
$LN29@MLS_SkillM:

; 5768 : 					}
; 5769 : 					else if( lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT1 &&

  00194	81 7b 08 28 02
	00 00		 cmp	 DWORD PTR [ebx+8], 552	; 00000228H
  0019b	75 1b		 jne	 SHORT $LN31@MLS_SkillM
  0019d	e8 00 00 00 00	 call	 _rand
  001a2	99		 cdq
  001a3	f7 fe		 idiv	 esi
  001a5	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  001a8	7d 0e		 jge	 SHORT $LN31@MLS_SkillM

; 5770 : 						rand()%100 < 10 )
; 5771 : 					{
; 5772 : 						gObjAddBuffEffect(lpTargetObj,BUFF_DEFENSEDOWN,ADD_OPTION_DEFENSEDOWN,10,0,0,10);

  001aa	6a 0a		 push	 10			; 0000000aH
  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	6a 0a		 push	 10			; 0000000aH
  001b2	6a 17		 push	 23			; 00000017H
  001b4	6a 3a		 push	 58			; 0000003aH
  001b6	eb 44		 jmp	 SHORT $LN53@MLS_SkillM
$LN31@MLS_SkillM:

; 5773 : 					}
; 5774 : 					else if( (lpMagic->m_Skill == AT_MSKILL_RF_CHAINDRIVE1 || lpMagic->m_Skill == AT_MSKILL_RF_CHAINDRIVE2 ) &&

  001b8	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001bb	3d 2e 02 00 00	 cmp	 eax, 558		; 0000022eH
  001c0	74 07		 je	 SHORT $LN34@MLS_SkillM
  001c2	3d 32 02 00 00	 cmp	 eax, 562		; 00000232H
  001c7	75 3c		 jne	 SHORT $LN33@MLS_SkillM
$LN34@MLS_SkillM:
  001c9	e8 00 00 00 00	 call	 _rand
  001ce	99		 cdq
  001cf	f7 fe		 idiv	 esi
  001d1	83 fa 28	 cmp	 edx, 40			; 00000028H
  001d4	7d 2f		 jge	 SHORT $LN33@MLS_SkillM

; 5775 : 						rand()%100 < 40 )
; 5776 : 					{
; 5777 : 						lpTargetObj->lpAttackObj = lpObj;

  001d6	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]

; 5778 : 						lpTargetObj->DelayActionTime = 1000;
; 5779 : 						lpTargetObj->DelayLevel = 1;
; 5780 : 
; 5781 : 						gObjAddBuffEffect(lpTargetObj,BUFF_COLD,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  001d9	6a 0a		 push	 10			; 0000000aH
  001db	6a 00		 push	 0
  001dd	6a 00		 push	 0
  001df	6a 00		 push	 0
  001e1	6a 14		 push	 20			; 00000014H
  001e3	89 87 b4 05 00
	00		 mov	 DWORD PTR [edi+1460], eax
  001e9	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  001f3	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  001fa	6a 56		 push	 86			; 00000056H
$LN53@MLS_SkillM:
  001fc	57		 push	 edi
  001fd	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00202	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN33@MLS_SkillM:

; 5782 : 					}
; 5783 : 
; 5784 : 					for(int i = 1; i < nMaxBarrageCount; i++)

  00205	8b 45 10	 mov	 eax, DWORD PTR _nMaxBarrageCount$1$[ebp]
  00208	be 01 00 00 00	 mov	 esi, 1
  0020d	3b c6		 cmp	 eax, esi
  0020f	7e 50		 jle	 SHORT $LN5@MLS_SkillM
  00211	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  00214	89 4d 0c	 mov	 DWORD PTR tv497[ebp], ecx
$LL6@MLS_SkillM:

; 5785 : 					{
; 5786 : 						if( (i%(nMaxBarrageCount-1)) == TRUE  )

  00217	8b c6		 mov	 eax, esi
  00219	99		 cdq
  0021a	f7 f9		 idiv	 ecx

; 5787 : 						{
; 5788 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,TRUE,0,0,i,0);

  0021c	6a 00		 push	 0
  0021e	56		 push	 esi
  0021f	6a 00		 push	 0
  00221	6a 00		 push	 0
  00223	6a 01		 push	 1
  00225	83 fa 01	 cmp	 edx, 1
  00228	75 03		 jne	 SHORT $LN35@MLS_SkillM
  0022a	52		 push	 edx

; 5789 : 						}
; 5790 : 						else

  0022b	eb 02		 jmp	 SHORT $LN54@MLS_SkillM
$LN35@MLS_SkillM:

; 5791 : 						{
; 5792 : 							gObjAttack(lpObj,lpTargetObj,lpMagic,FALSE,TRUE,0,0,i,0);

  0022d	6a 00		 push	 0
$LN54@MLS_SkillM:
  0022f	53		 push	 ebx
  00230	57		 push	 edi
  00231	ff 75 08	 push	 DWORD PTR _lpObj$1$[ebp]
  00234	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00239	8b 4d 0c	 mov	 ecx, DWORD PTR tv497[ebp]
  0023c	46		 inc	 esi
  0023d	83 c4 24	 add	 esp, 36			; 00000024H
  00240	3b 75 10	 cmp	 esi, DWORD PTR _nMaxBarrageCount$1$[ebp]
  00243	7c d2		 jl	 SHORT $LL6@MLS_SkillM
  00245	5f		 pop	 edi
  00246	5e		 pop	 esi
  00247	5b		 pop	 ebx

; 5803 : 		{
; 5804 : 			break;
; 5805 : 		}
; 5806 : 	}
; 5807 : }

  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c2 0c 00	 ret	 12			; 0000000cH
$LN51@MLS_SkillM:

; 5690 : 	{
; 5691 : 		LogAddTD("[InvalidTargetIndex][MLS_SkillMonkBarrageJustOneTarget] Index :%d , AccountID : %s ",

  0024e	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00251	50		 push	 eax
  00252	57		 push	 edi
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@MOAJDGKI@?$FLInvalidTargetIndex?$FN?$FLMLS_SkillMo@
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@MLS_SkillM:
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi
  00263	5b		 pop	 ebx

; 5803 : 		{
; 5804 : 			break;
; 5805 : 		}
; 5806 : 	}
; 5807 : }

  00264	8b e5		 mov	 esp, ebp
  00266	5d		 pop	 ebp
  00267	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_AddLife$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_fSkillValue$1 = -4					; size = 4
_BuffNumber$1$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_AddDefense$1$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense, COMDAT
; _this$ = ecx

; 7196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 7197 : 	int skillSuccess = true;
; 7198 : 
; 7199 : 	LPOBJ lpObj = &gObj[aIndex];
; 7200 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000e	56		 push	 esi
  0000f	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  00016	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00019	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 7201 : 
; 7202 : 	if( lpObj->Type != OBJ_USER || lpObj->Class != CLASS_DARKLORD)

  00025	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00029	0f 85 d6 00 00
	00		 jne	 $LN3@MLS_SkillI
  0002f	66 83 be 90 00
	00 00 04	 cmp	 WORD PTR [esi+144], 4
  00037	0f 85 c8 00 00
	00		 jne	 $LN3@MLS_SkillI

; 7203 : 	{
; 7204 : 		return;
; 7205 : 	}
; 7206 : 
; 7207 : 
; 7208 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  0003d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00045	57		 push	 edi
  00046	ff 70 08	 push	 DWORD PTR [eax+8]
  00049	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0004e	8b f8		 mov	 edi, eax

; 7209 : 
; 7210 : 	if( !lpInfo )

  00050	85 ff		 test	 edi, edi
  00052	0f 84 ac 00 00
	00		 je	 $LN7@MLS_SkillI

; 7211 : 	{
; 7212 : 		return;
; 7213 : 	}
; 7214 : 
; 7215 : 	int AddDefense = lpInfo->m_Arg1;

  00058	f3 0f 2c 4f 04	 cvttss2si ecx, DWORD PTR [edi+4]

; 7216 : 	int AddLife = lpInfo->m_Arg2;
; 7217 : 
; 7218 : 	int BuffNumber = BUFF_IRONDEFENSE;
; 7219 : 
; 7220 : 	if( lpMagic->m_Skill == AT_MSKILL_DL_IRONDEFENSE1 )

  0005d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00060	c7 45 08 86 00
	00 00		 mov	 DWORD PTR _BuffNumber$1$[ebp], 134 ; 00000086H
  00067	81 78 08 0c 02
	00 00		 cmp	 DWORD PTR [eax+8], 524	; 0000020cH
  0006e	f3 0f 2c 57 08	 cvttss2si edx, DWORD PTR [edi+8]
  00073	89 4d 0c	 mov	 DWORD PTR _AddDefense$1$[ebp], ecx
  00076	89 55 f8	 mov	 DWORD PTR _AddLife$1$[ebp], edx
  00079	75 49		 jne	 SHORT $LN5@MLS_SkillI

; 7221 : 	{
; 7222 : 		BuffNumber = BUFF_IRONDEFENSE2;
; 7223 : 
; 7224 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0007b	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0007f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00084	50		 push	 eax
  00085	68 0c 02 00 00	 push	 524			; 0000020cH
  0008a	c7 45 08 a5 00
	00 00		 mov	 DWORD PTR _BuffNumber$1$[ebp], 165 ; 000000a5H
  00091	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0009f	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _AddDefense$1$[ebp]

; 7225 : 
; 7226 : 		AddDefense += fSkillValue;

  000a4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a7	d9 5d fc	 fstp	 DWORD PTR _fSkillValue$1[ebp]
  000aa	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  000af	f3 0f 2c c8	 cvttss2si ecx, xmm0
  000b3	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _AddLife$1$[ebp]

; 7227 : 		AddLife += fSkillValue;

  000b8	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000bb	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  000c0	f3 0f 2c d0	 cvttss2si edx, xmm0
$LN5@MLS_SkillI:

; 7228 : 	}
; 7229 : 
; 7230 : 	AddDefense = (AddDefense*10)/20;
; 7231 : 
; 7232 : 	gObjAddBuffEffect(lpTargetObj,BuffNumber,ADD_OPTION_DEFENSE,AddDefense,ADD_OPTION_LIFE,AddLife,lpInfo->m_Arg3);

  000c4	f3 0f 2c 47 0c	 cvttss2si eax, DWORD PTR [edi+12]
  000c9	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000cc	03 c9		 add	 ecx, ecx
  000ce	50		 push	 eax
  000cf	52		 push	 edx
  000d0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000d5	f7 e9		 imul	 ecx
  000d7	6a 04		 push	 4
  000d9	c1 fa 03	 sar	 edx, 3
  000dc	8b c2		 mov	 eax, edx
  000de	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e1	03 c2		 add	 eax, edx
  000e3	50		 push	 eax
  000e4	6a 03		 push	 3
  000e6	ff 75 08	 push	 DWORD PTR _BuffNumber$1$[ebp]
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 7233 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  000ef	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000f2	6a 01		 push	 1
  000f4	ff 33		 push	 DWORD PTR [ebx]
  000f6	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000fa	50		 push	 eax
  000fb	56		 push	 esi
  000fc	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00101	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN7@MLS_SkillI:
  00104	5f		 pop	 edi
$LN3@MLS_SkillI:
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx

; 7234 : }

  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -12					; size = 4
_HitCount$1$ = -8					; size = 4
_lpObj$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv478 = 16						; size = 4
_TargetPos$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier, COMDAT
; _this$ = ecx

; 7103 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7104 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 7105 : 	int bSuccess = TRUE;
; 7106 : 
; 7107 : 	MLS_SkillFrustrum3(aIndex,TargetPos,1.5f,6.0f,1.5f,0);

  0000c	83 ec 10	 sub	 esp, 16			; 00000010H
  0000f	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  00015	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  0001d	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	c7 44 24 08 00
	00 c0 3f	 mov	 DWORD PTR [esp+8], 1069547520 ; 3fc00000H
  0002b	c7 44 24 04 00
	00 c0 40	 mov	 DWORD PTR [esp+4], 1086324736 ; 40c00000H
  00033	c7 04 24 00 00
	c0 3f		 mov	 DWORD PTR [esp], 1069547520 ; 3fc00000H
  0003a	ff 75 10	 push	 DWORD PTR _TargetPos$[ebp]
  0003d	89 5d fc	 mov	 DWORD PTR _lpObj$1$[ebp], ebx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 7108 : 
; 7109 : 	int tObjNum;
; 7110 : 	int count = 0;
; 7111 : 	int HitCount = 0;
; 7112 : 	int bAttack;
; 7113 : 	int DuelIndex = lpObj->m_iDuelUser;

  00046	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  0004c	81 c3 4c 0c 00
	00		 add	 ebx, 3148		; 00000c4cH
  00052	8b 7d 14	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00055	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0005e	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _HitCount$1$[ebp], 0
  0006a	c7 45 10 4b 00
	00 00		 mov	 DWORD PTR tv478[ebp], 75 ; 0000004bH
$LL2@MLS_SkillC:

; 7114 : 	int EnableAttack;
; 7115 : 
; 7116 : 	while ( true )
; 7117 : 	{
; 7118 : 		if(lpObj->VpPlayer2[count].state != 0)

  00071	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00075	0f 84 6d 01 00
	00		 je	 $LN16@MLS_SkillC

; 7119 : 		{
; 7120 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007b	0f bf 73 fe	 movsx	 esi, WORD PTR [ebx-2]

; 7121 : 
; 7122 : 			if(tObjNum >= 0)

  0007f	85 f6		 test	 esi, esi
  00081	0f 88 61 01 00
	00		 js	 $LN16@MLS_SkillC

; 7123 : 			{
; 7124 : 				EnableAttack = 0;
; 7125 : 
; 7126 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00087	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00089	80 f9 02	 cmp	 cl, 2
  0008c	75 10		 jne	 SHORT $LN6@MLS_SkillC
  0008e	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00094	83 bc 10 30 06
	00 00 00	 cmp	 DWORD PTR [eax+edx+1584], 0
  0009c	7c 55		 jl	 SHORT $LN39@MLS_SkillC
$LN6@MLS_SkillC:

; 7127 : 				{
; 7128 : 					EnableAttack = 1;
; 7129 : 				}
; 7130 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0009e	3b f7		 cmp	 esi, edi
  000a0	74 51		 je	 SHORT $LN39@MLS_SkillC
  000a2	39 75 f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000a5	74 4c		 je	 SHORT $LN39@MLS_SkillC

; 7131 : 				{
; 7132 : 					EnableAttack = 1;
; 7133 : 				}
; 7134 : #if (GS_CASTLE == 1)
; 7135 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000a7	80 f9 03	 cmp	 cl, 3
  000aa	0f 84 e3 00 00
	00		 je	 $LN11@MLS_SkillC
  000b0	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000b6	80 bc 17 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+edx+291], 30 ; 0000001eH
  000be	0f 85 cf 00 00
	00		 jne	 $LN11@MLS_SkillC
  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000c9	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 7136 : 				{
; 7137 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000ce	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d4	83 f8 07	 cmp	 eax, 7
  000d7	0f 85 b6 00 00
	00		 jne	 $LN11@MLS_SkillC
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  000e0	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  000e6	3a 84 17 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+edx+8282]
  000ed	0f 84 ef 00 00
	00		 je	 $LN36@MLS_SkillC
$LN39@MLS_SkillC:
  000f3	8b 7d fc	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN10@MLS_SkillC:

; 7151 : 					{
; 7152 : 						EnableAttack = 1;
; 7153 : 					}
; 7154 : 				}
; 7155 : 
; 7156 : 				if( EnableAttack != FALSE && SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  000f6	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  000f9	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  000ff	0f b6 84 11 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+289]
  00107	50		 push	 eax
  00108	0f b6 84 11 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+edx+288]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	85 c0		 test	 eax, eax
  0011b	0f 84 bb 00 00
	00		 je	 $LN35@MLS_SkillC

; 7157 : 				{
; 7158 : 					bAttack = FALSE;
; 7159 : 
; 7160 : 					if( HitCount > 8 )

  00121	83 7d f8 08	 cmp	 DWORD PTR _HitCount$1$[ebp], 8
  00125	7e 13		 jle	 SHORT $LN17@MLS_SkillC

; 7161 : 					{
; 7162 : 						if(rand()%2)

  00127	e8 00 00 00 00	 call	 _rand
  0012c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00131	79 05		 jns	 SHORT $LN40@MLS_SkillC
  00133	48		 dec	 eax
  00134	83 c8 fe	 or	 eax, -2			; fffffffeH
  00137	40		 inc	 eax
$LN40@MLS_SkillC:
  00138	74 19		 je	 SHORT $LN20@MLS_SkillC
$LN17@MLS_SkillC:

; 7163 : 						{
; 7164 : 							bAttack = TRUE;
; 7165 : 						}
; 7166 : 					}
; 7167 : 					else
; 7168 : 					{
; 7169 : 						bAttack = TRUE;
; 7170 : 					}
; 7171 : 
; 7172 : 					if( bAttack != FALSE )
; 7173 : 					{
; 7174 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  0013a	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0013d	6a 00		 push	 0
  0013f	ff 70 08	 push	 DWORD PTR [eax+8]
  00142	68 fa 00 00 00	 push	 250			; 000000faH
  00147	56		 push	 esi
  00148	6a 32		 push	 50			; 00000032H
  0014a	57		 push	 edi
  0014b	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00150	83 c4 18	 add	 esp, 24			; 00000018H
$LN20@MLS_SkillC:

; 7175 : 					}
; 7176 : 
; 7177 : 					if( OBJMAX_RANGE(aTargetIndex) && aTargetIndex == tObjNum)

  00153	8b 7d 14	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00156	85 ff		 test	 edi, edi
  00158	78 2e		 js	 SHORT $LN21@MLS_SkillC
  0015a	33 c0		 xor	 eax, eax
  0015c	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00162	0f 9e c0	 setle	 al
  00165	85 c0		 test	 eax, eax
  00167	74 1f		 je	 SHORT $LN21@MLS_SkillC
  00169	3b fe		 cmp	 edi, esi
  0016b	75 1b		 jne	 SHORT $LN21@MLS_SkillC

; 7178 : 					{
; 7179 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,300,lpMagic->m_Skill,0);

  0016d	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00170	6a 00		 push	 0
  00172	ff 70 08	 push	 DWORD PTR [eax+8]
  00175	68 2c 01 00 00	 push	 300			; 0000012cH
  0017a	56		 push	 esi
  0017b	6a 32		 push	 50			; 00000032H
  0017d	ff 75 fc	 push	 DWORD PTR _lpObj$1$[ebp]
  00180	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00185	83 c4 18	 add	 esp, 24			; 00000018H
$LN21@MLS_SkillC:

; 7180 : 					}
; 7181 : 
; 7182 : 					HitCount++;

  00188	ff 45 f8	 inc	 DWORD PTR _HitCount$1$[ebp]
  0018b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00191	eb 52		 jmp	 SHORT $LN42@MLS_SkillC
$LN11@MLS_SkillC:

; 7138 : 						EnableAttack = 1;
; 7139 : 				}
; 7140 : #endif
; 7141 : 				else
; 7142 : 				{
; 7143 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00193	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 7144 : 
; 7145 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00199	80 7c 10 50 02	 cmp	 BYTE PTR [eax+edx+80], 2
  0019e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001a1	75 14		 jne	 SHORT $LN14@MLS_SkillC
  001a3	8b 84 10 30 06
	00 00		 mov	 eax, DWORD PTR [eax+edx+1584]
  001aa	85 c0		 test	 eax, eax
  001ac	78 09		 js	 SHORT $LN14@MLS_SkillC

; 7146 : 					{
; 7147 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  001ae	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  001b4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
$LN14@MLS_SkillC:

; 7148 : 					}
; 7149 : 
; 7150 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  001b7	8b 7d fc	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  001ba	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  001c0	03 c2		 add	 eax, edx
  001c2	50		 push	 eax
  001c3	57		 push	 edi
  001c4	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  001c9	83 c4 08	 add	 esp, 8
  001cc	83 f8 01	 cmp	 eax, 1
  001cf	75 0b		 jne	 SHORT $LN35@MLS_SkillC
  001d1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d7	e9 1a ff ff ff	 jmp	 $LN10@MLS_SkillC
$LN35@MLS_SkillC:

; 7180 : 					}
; 7181 : 
; 7182 : 					HitCount++;

  001dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_SkillC:
  001e2	8b 7d 14	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
$LN42@MLS_SkillC:
  001e5	8b 45 10	 mov	 eax, DWORD PTR tv478[ebp]
$LN16@MLS_SkillC:

; 7183 : 				}
; 7184 : 			}
; 7185 : 		}
; 7186 : 
; 7187 : 		count++;

  001e8	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 7188 : 		if(count > MAX_VIEWPORT -1)

  001eb	83 e8 01	 sub	 eax, 1
  001ee	89 45 10	 mov	 DWORD PTR tv478[ebp], eax
  001f1	0f 85 7a fe ff
	ff		 jne	 $LL2@MLS_SkillC
  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx

; 7189 : 		{
; 7190 : 			break;
; 7191 : 		}
; 7192 : 	}
; 7193 : }

  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z
_TEXT	SEGMENT
_iangle$1$ = -20					; size = 4
tv553 = -16						; size = 4
tv549 = -12						; size = 4
_DuelIndex$1$ = -8					; size = 4
_Hit$1$ = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_dir$ = 24						; size = 1
tv555 = 28						; size = 4
_TargetPos$ = 28					; size = 1
_aTargetIndex$ = 32					; size = 4
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark, COMDAT
; _this$ = ecx

; 7022 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 7023 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _aIndex$[ebp], 10048

; 7024 : 
; 7025 : 	int TargePosx = lpObj->X - (8 - (TargetPos & 15));
; 7026 : 	int TargePosy = lpObj->Y - (8 - ((TargetPos & 240) >> 4));
; 7027 : 
; 7028 : 	int tObjNum;
; 7029 : 	int count = 0;
; 7030 : 	int DuelIndex = lpObj->m_iDuelUser;
; 7031 : 	int iangle = MLS_GetAngle(lpObj->X,lpObj->Y,TargePosx,TargePosy);

  0000d	0f b6 55 1c	 movzx	 edx, BYTE PTR _TargetPos$[ebp]
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	8b d9		 mov	 ebx, ecx
  0001b	89 45 f0	 mov	 DWORD PTR tv553[ebp], eax
  0001e	03 c6		 add	 eax, esi
  00020	57		 push	 edi
  00021	89 45 08	 mov	 DWORD PTR _lpObj$1$[ebp], eax
  00024	8b 88 50 12 00
	00		 mov	 ecx, DWORD PTR [eax+4688]
  0002a	0f b6 b8 21 01
	00 00		 movzx	 edi, BYTE PTR [eax+289]
  00031	89 4d f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], ecx
  00034	0f b6 88 20 01
	00 00		 movzx	 ecx, BYTE PTR [eax+288]
  0003b	8b c2		 mov	 eax, edx
  0003d	c1 e8 04	 shr	 eax, 4
  00040	83 e2 0f	 and	 edx, 15			; 0000000fH
  00043	83 c0 f8	 add	 eax, -8			; fffffff8H
  00046	03 c7		 add	 eax, edi
  00048	50		 push	 eax
  00049	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  0004c	03 c1		 add	 eax, ecx
  0004e	50		 push	 eax
  0004f	57		 push	 edi
  00050	51		 push	 ecx
  00051	8b cb		 mov	 ecx, ebx
  00053	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle
  00058	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]

; 7032 : 	int delaytime;
; 7033 : 	int Hit = 0;

  0005b	33 c9		 xor	 ecx, ecx
  0005d	89 45 ec	 mov	 DWORD PTR _iangle$1$[ebp], eax
  00060	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  00065	89 4d fc	 mov	 DWORD PTR _Hit$1$[ebp], ecx
  00068	89 45 1c	 mov	 DWORD PTR tv555[ebp], eax
  0006b	8d 9a 4c 0c 00
	00		 lea	 ebx, DWORD PTR [edx+3148]
$LL2@MLS_SkillE:

; 7034 : 	int EnableAttack;
; 7035 : 
; 7036 : 	while ( true )
; 7037 : 	{
; 7038 : 		if(lpObj->VpPlayer2[count].state != 0)

  00071	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00075	0f 84 2f 01 00
	00		 je	 $LN17@MLS_SkillE

; 7039 : 		{
; 7040 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007b	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 7041 : 
; 7042 : 			if(tObjNum >= 0)

  0007f	85 ff		 test	 edi, edi
  00081	0f 88 23 01 00
	00		 js	 $LN17@MLS_SkillE

; 7043 : 			{
; 7044 : 				EnableAttack = 0;
; 7045 : 
; 7046 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00087	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00089	80 f9 02	 cmp	 cl, 2
  0008c	75 14		 jne	 SHORT $LN6@MLS_SkillE
  0008e	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00094	83 bc 30 30 06
	00 00 00	 cmp	 DWORD PTR [eax+esi+1584], 0
  0009c	0f 8c 9b 00 00
	00		 jl	 $LN10@MLS_SkillE
$LN6@MLS_SkillE:

; 7047 : 				{
; 7048 : 					EnableAttack = 1;
; 7049 : 				}
; 7050 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000a2	3b 7d 20	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  000a5	0f 84 92 00 00
	00		 je	 $LN10@MLS_SkillE
  000ab	39 7d f8	 cmp	 DWORD PTR _DuelIndex$1$[ebp], edi
  000ae	0f 84 89 00 00
	00		 je	 $LN10@MLS_SkillE

; 7051 : 				{
; 7052 : 					EnableAttack = 1;
; 7053 : 				}
; 7054 : #if (GS_CASTLE == 1)
; 7055 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b4	80 f9 03	 cmp	 cl, 3
  000b7	74 43		 je	 SHORT $LN11@MLS_SkillE
  000b9	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  000bf	89 45 f4	 mov	 DWORD PTR tv549[ebp], eax
  000c2	80 bc 30 23 01
	00 00 1e	 cmp	 BYTE PTR [eax+esi+291], 30 ; 0000001eH
  000ca	75 30		 jne	 SHORT $LN11@MLS_SkillE
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000d1	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 7056 : 				{
; 7057 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d6	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
  000d9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000df	83 f8 07	 cmp	 eax, 7
  000e2	75 18		 jne	 SHORT $LN11@MLS_SkillE
  000e4	8b 4d f4	 mov	 ecx, DWORD PTR tv549[ebp]
  000e7	8a 82 5a 20 00
	00		 mov	 al, BYTE PTR [edx+8282]
  000ed	3a 84 31 5a 20
	00 00		 cmp	 al, BYTE PTR [ecx+esi+8282]
  000f4	0f 84 ad 00 00
	00		 je	 $LN30@MLS_SkillE

; 7058 : 						EnableAttack = 1;
; 7059 : 				}
; 7060 : #endif
; 7061 : 				else

  000fa	eb 41		 jmp	 SHORT $LN10@MLS_SkillE
$LN11@MLS_SkillE:

; 7062 : 				{
; 7063 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000fc	69 c7 40 27 00
	00		 imul	 eax, edi, 10048

; 7064 : 
; 7065 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00102	80 7c 30 50 02	 cmp	 BYTE PTR [eax+esi+80], 2
  00107	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  0010a	75 14		 jne	 SHORT $LN14@MLS_SkillE
  0010c	8b 84 30 30 06
	00 00		 mov	 eax, DWORD PTR [eax+esi+1584]
  00113	85 c0		 test	 eax, eax
  00115	78 09		 js	 SHORT $LN14@MLS_SkillE

; 7066 : 					{
; 7067 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00117	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0011d	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
$LN14@MLS_SkillE:

; 7068 : 					}
; 7069 : 
; 7070 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00120	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00126	03 c6		 add	 eax, esi
  00128	50		 push	 eax
  00129	52		 push	 edx
  0012a	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0012f	83 c4 08	 add	 esp, 8
  00132	83 f8 01	 cmp	 eax, 1
  00135	75 67		 jne	 SHORT $LN29@MLS_SkillE
  00137	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_SkillE:

; 7071 : 					{
; 7072 : 						EnableAttack = 1;
; 7073 : 					}
; 7074 : 				}
; 7075 : 
; 7076 : 				if(EnableAttack != 0)
; 7077 : 				{
; 7078 : 					if(SkillElectricSparkHitBox.HitCheck(iangle,gObj[aIndex].X,gObj[aIndex].Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  0013d	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00143	0f b6 84 31 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+289]
  0014b	50		 push	 eax
  0014c	0f b6 84 31 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+288]
  00154	8b 4d f0	 mov	 ecx, DWORD PTR tv553[ebp]
  00157	50		 push	 eax
  00158	0f b6 84 31 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+289]
  00160	50		 push	 eax
  00161	0f b6 84 31 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+288]
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  0016e	50		 push	 eax
  0016f	ff 75 ec	 push	 DWORD PTR _iangle$1$[ebp]
  00172	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  00177	85 c0		 test	 eax, eax
  00179	74 23		 je	 SHORT $LN29@MLS_SkillE

; 7079 : 					{
; 7080 : 						delaytime = 500;
; 7081 : 						Hit = 1;
; 7082 : 
; 7083 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  0017b	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0017e	6a 00		 push	 0
  00180	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _Hit$1$[ebp], 1
  00187	ff 70 08	 push	 DWORD PTR [eax+8]
  0018a	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0018d	68 f4 01 00 00	 push	 500			; 000001f4H
  00192	57		 push	 edi
  00193	6a 32		 push	 50			; 00000032H
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
$LN29@MLS_SkillE:
  0019e	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
  001a1	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN30@MLS_SkillE:
  001a7	8b 45 1c	 mov	 eax, DWORD PTR tv555[ebp]
$LN17@MLS_SkillE:

; 7084 : 					}
; 7085 : 				}
; 7086 : 			}
; 7087 : 		}
; 7088 : 
; 7089 : 		count++;

  001aa	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 7090 : 		if(count > MAX_VIEWPORT -1)

  001ad	83 e8 01	 sub	 eax, 1
  001b0	89 45 1c	 mov	 DWORD PTR tv555[ebp], eax
  001b3	0f 85 b8 fe ff
	ff		 jne	 $LL2@MLS_SkillE

; 7091 : 		{
; 7092 : 			break;
; 7093 : 		}
; 7094 : 	}
; 7095 : 
; 7096 : 	if(Hit != 0)

  001b9	8b 4d fc	 mov	 ecx, DWORD PTR _Hit$1$[ebp]
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx
  001bf	85 c9		 test	 ecx, ecx
  001c1	74 09		 je	 SHORT $LN19@MLS_SkillE

; 7097 : 	{
; 7098 : 		DecPartyMemberHPandMP(lpObj);

  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 ?DecPartyMemberHPandMP@@YAHPAUOBJECTSTRUCT@@@Z ; DecPartyMemberHPandMP
  001c9	83 c4 04	 add	 esp, 4
$LN19@MLS_SkillE:

; 7099 : 	}
; 7100 : }

  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 1c 00	 ret	 28			; 0000001cH
?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -52					; size = 4
_partynum$1$ = -48					; size = 4
_lpMagic$GSCopy$1$ = -44				; size = 4
_SkillTime$1$ = -40					; size = 4
_lpInfo$1$ = -40					; size = 4
_this$GSCopy$1$ = -36					; size = 4
_fExcRate$ = -36					; size = 4
_addcriticaldamagevalue$2$ = -32			; size = 4
tv508 = -32						; size = 4
tv543 = -28						; size = 4
tv541 = -28						; size = 4
_fRate$ = -28						; size = 4
_fSkillValue$ = -28					; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage, COMDAT
; _this$ = ecx

; 3024 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00017	57		 push	 edi

; 3025 : 	int skillSuccess = TRUE;
; 3026 : 	LPOBJ lpObj = &gObj[aIndex];

  00018	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  0001e	89 4d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00021	89 45 cc	 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], eax
  00024	89 5d d4	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00027	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3027 : 
; 3028 : 	if( lpObj->Type != OBJ_USER &&

  0002d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00031	74 0d		 je	 SHORT $LN8@MLS_SkillF
  00033	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0003a	0f 84 ad 02 00
	00		 je	 $LN6@MLS_SkillF
$LN8@MLS_SkillF:

; 3029 : 		lpObj->m_RecallMon == -1 )
; 3030 : 		return;
; 3031 : 
; 3032 : 	if( lpObj->Class != CLASS_DARKLORD )

  00040	66 83 bf 90 00
	00 00 04	 cmp	 WORD PTR [edi+144], 4
  00048	0f 85 9f 02 00
	00		 jne	 $LN6@MLS_SkillF

; 3033 : 		return;
; 3034 : 
; 3035 : 	int number;
; 3036 : 	int partynum = 0;
; 3037 : 	int totallevel = 0;
; 3038 : 	int partycount;
; 3039 : 	int dis;
; 3040 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 3041 : 	LPOBJ lpPartyObj;
; 3042 : 
; 3043 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 3044 : 
; 3045 : 	partynum = lpObj->PartyNumber;

  0004e	8b 8f 0c 06 00
	00		 mov	 ecx, DWORD PTR [edi+1548]
  00054	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00062	89 4d d0	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00065	56		 push	 esi
  00066	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 3046 : 
; 3047 : 	if( partynum != -1 )

  0006a	83 f9 ff	 cmp	 ecx, -1
  0006d	74 5a		 je	 SHORT $LN3@MLS_SkillF

; 3048 : 	{
; 3049 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3050 : 
; 3051 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0006f	8b c1		 mov	 eax, ecx
  00071	33 db		 xor	 ebx, ebx
  00073	c1 e0 04	 shl	 eax, 4
  00076	2b c1		 sub	 eax, ecx
  00078	8d 0c 85 0c 00
	00 00		 lea	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0007f	89 4d e0	 mov	 DWORD PTR tv508[ebp], ecx
$LL4@MLS_SkillF:

; 3052 : 		{
; 3053 : 			number = gParty.m_PartyS[partynum].Number[n];

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3054 : 
; 3055 : 			if( number >= 0 )

  00084	85 c0		 test	 eax, eax
  00086	78 32		 js	 SHORT $LN2@MLS_SkillF

; 3056 : 			{
; 3057 : 				lpPartyObj = &gObj[number];

  00088	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 3058 : 
; 3059 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008e	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00094	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000a0	75 18		 jne	 SHORT $LN2@MLS_SkillF

; 3060 : 				{
; 3061 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000a2	56		 push	 esi
  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000a9	8b 4d e0	 mov	 ecx, DWORD PTR tv508[ebp]
  000ac	83 c4 08	 add	 esp, 8

; 3062 : 
; 3063 : 					if( dis < 10 )

  000af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b2	7d 06		 jge	 SHORT $LN2@MLS_SkillF

; 3064 : 					{
; 3065 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000b4	8b 06		 mov	 eax, DWORD PTR [esi]
  000b6	89 44 9d e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ebx*4], eax
$LN2@MLS_SkillF:

; 3048 : 	{
; 3049 : 		partycount = gParty.m_PartyS[partynum].Count;
; 3050 : 
; 3051 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ba	43		 inc	 ebx
  000bb	83 c1 04	 add	 ecx, 4
  000be	89 4d e0	 mov	 DWORD PTR tv508[ebp], ecx
  000c1	83 fb 05	 cmp	 ebx, 5
  000c4	7c bc		 jl	 SHORT $LL4@MLS_SkillF
  000c6	8b 5d d4	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
$LN3@MLS_SkillF:

; 3066 : 					}
; 3067 : 				}
; 3068 : 			}
; 3069 : 		}
; 3070 : 	}
; 3071 : 
; 3072 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000c9	ff 73 08	 push	 DWORD PTR [ebx+8]
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000d1	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  000d6	8b f0		 mov	 esi, eax
  000d8	89 75 d8	 mov	 DWORD PTR _lpInfo$1$[ebp], esi

; 3073 : 
; 3074 : 	if( !lpInfo )

  000db	85 f6		 test	 esi, esi
  000dd	0f 84 09 02 00
	00		 je	 $LN31@MLS_SkillF

; 3075 : 	{
; 3076 : 		return;
; 3077 : 	}
; 3078 : 
; 3079 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg2 + (lpObj->Leadership+lpObj->AddLeadership)/lpInfo->m_Arg1;

  000e3	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  000ea	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  000f1	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  000f8	03 d1		 add	 edx, ecx
  000fa	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00101	03 c8		 add	 ecx, eax

; 3080 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,3);

  00103	6a 03		 push	 3
  00105	66 0f 6e ca	 movd	 xmm1, edx
  00109	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0010c	66 0f 6e c1	 movd	 xmm0, ecx
  00110	f3 0f 5e 4e 04	 divss	 xmm1, DWORD PTR [esi+4]
  00115	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00118	ff 73 08	 push	 DWORD PTR [ebx+8]
  0011b	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  00120	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00123	8b cb		 mov	 ecx, ebx
  00125	57		 push	 edi
  00126	f3 0f 58 c8	 addss	 xmm1, xmm0
  0012a	f3 0f 2c f1	 cvttss2si esi, xmm1
  0012e	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 3081 : 
; 3082 : 	if( addcriticaldamagevalue > lpInfo->m_Arg3 )

  00133	8b 4d d8	 mov	 ecx, DWORD PTR _lpInfo$1$[ebp]
  00136	66 0f 6e c6	 movd	 xmm0, esi
  0013a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0013d	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00142	f3 0f 11 45 e4	 movss	 DWORD PTR tv543[ebp], xmm0
  00147	d8 45 e4	 fadd	 DWORD PTR tv543[ebp]
  0014a	d9 5d e4	 fstp	 DWORD PTR tv541[ebp]
  0014d	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR tv541[ebp]
  00152	89 45 e0	 mov	 DWORD PTR _addcriticaldamagevalue$2$[ebp], eax
  00155	66 0f 6e c0	 movd	 xmm0, eax
  00159	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015c	0f 2f c1	 comiss	 xmm0, xmm1
  0015f	76 07		 jbe	 SHORT $LN15@MLS_SkillF

; 3083 : 	{
; 3084 : 		addcriticaldamagevalue = lpInfo->m_Arg3;

  00161	f3 0f 2c c1	 cvttss2si eax, xmm1
  00165	89 45 e0	 mov	 DWORD PTR _addcriticaldamagevalue$2$[ebp], eax
$LN15@MLS_SkillF:

; 3085 : 	}
; 3086 : 
; 3087 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  00168	8b 75 d4	 mov	 esi, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0016b	8b cb		 mov	 ecx, ebx
  0016d	6a 02		 push	 2
  0016f	ff 76 08	 push	 DWORD PTR [esi+8]
  00172	57		 push	 edi
  00173	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 3088 : 	int SkillTime = lpInfo->m_Arg4 + (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg5 + fSkillValue;

  00178	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  0017f	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00186	03 c8		 add	 ecx, eax
  00188	8b 45 d8	 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  0018b	d9 5d e4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0018e	66 0f 6e c1	 movd	 xmm0, ecx
  00192	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 3089 : 
; 3090 : 	if( SkillTime > lpInfo->m_Arg6 )

  00195	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [eax+24]
  0019a	f3 0f 5e 40 14	 divss	 xmm0, DWORD PTR [eax+20]
  0019f	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  001a4	f3 0f 58 45 e4	 addss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  001a9	f3 0f 2c d8	 cvttss2si ebx, xmm0
  001ad	89 5d d8	 mov	 DWORD PTR _SkillTime$1$[ebp], ebx
  001b0	66 0f 6e c3	 movd	 xmm0, ebx
  001b4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001b7	0f 2f c1	 comiss	 xmm0, xmm1
  001ba	76 07		 jbe	 SHORT $LN16@MLS_SkillF

; 3091 : 	{
; 3092 : 		SkillTime = lpInfo->m_Arg6;

  001bc	f3 0f 2c d9	 cvttss2si ebx, xmm1
  001c0	89 5d d8	 mov	 DWORD PTR _SkillTime$1$[ebp], ebx
$LN16@MLS_SkillF:

; 3093 : 	}
; 3094 : 
; 3095 : 	float fRate = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  001c3	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001c6	6a 01		 push	 1
  001c8	ff 76 08	 push	 DWORD PTR [esi+8]
  001cb	57		 push	 edi
  001cc	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 3096 : 	float fExcRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001d1	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  001d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001da	50		 push	 eax
  001db	ff 76 08	 push	 DWORD PTR [esi+8]
  001de	d9 5d e4	 fstp	 DWORD PTR _fRate$[ebp]
  001e1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001e6	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001e9	50		 push	 eax
  001ea	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 3097 : 
; 3098 : 	if( partynum == -1 )

  001ef	83 7d d0 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001f3	d9 5d dc	 fstp	 DWORD PTR _fExcRate$[ebp]
  001f6	75 6e		 jne	 SHORT $LN17@MLS_SkillF

; 3099 : 	{
; 3100 : 		gObjAddBuffEffect(lpObj,BUFF_ADD_CRITDMG3,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,ADD_OPTION_INCCRITDMG,fRate,SkillTime);

  001f8	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _fRate$[ebp]
  001fd	53		 push	 ebx
  001fe	50		 push	 eax
  001ff	6a 37		 push	 55			; 00000037H
  00201	ff 75 e0	 push	 DWORD PTR _addcriticaldamagevalue$2$[ebp]
  00204	6a 11		 push	 17			; 00000011H
  00206	68 95 00 00 00	 push	 149			; 00000095H
  0020b	57		 push	 edi
  0020c	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00211	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3101 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  00214	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00219	53		 push	 ebx
  0021a	68 d8 04 00 00	 push	 1240			; 000004d8H
  0021f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00224	50		 push	 eax
  00225	ff 75 cc	 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  00228	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3102 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0022d	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00231	6a 01		 push	 1
  00233	ff 37		 push	 DWORD PTR [edi]
  00235	50		 push	 eax
  00236	57		 push	 edi
  00237	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3103 : 		lpObj->m_MPSkillOpt.MpsCritBuffExcDamage = fExcRate;

  0023c	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fExcRate$[ebp]

; 3104 : 		gObjCalCharacter(lpObj->m_Index);

  00241	ff 37		 push	 DWORD PTR [edi]
  00243	f3 0f 11 87 74
	08 00 00	 movss	 DWORD PTR [edi+2164], xmm0
  0024b	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00250	83 c4 20	 add	 esp, 32			; 00000020H
  00253	5e		 pop	 esi
  00254	5f		 pop	 edi
  00255	5b		 pop	 ebx

; 3119 : 			}
; 3120 : 		}
; 3121 : 	}
; 3122 : }

  00256	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00259	33 cd		 xor	 ecx, ebp
  0025b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 0c 00	 ret	 12			; 0000000cH
$LN17@MLS_SkillF:

; 3105 : 	}
; 3106 : 	else
; 3107 : 	{
; 3108 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00266	33 db		 xor	 ebx, ebx
  00268	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@MLS_SkillF:

; 3109 : 		{
; 3110 : 			if( ApplyPartyIndex[n] != -1 )

  00270	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00274	83 f8 ff	 cmp	 eax, -1
  00277	74 6d		 je	 SHORT $LN5@MLS_SkillF

; 3111 : 			{
; 3112 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 3113 : 
; 3114 : 				gObjAddBuffEffect(lpPartyObj,BUFF_ADD_CRITDMG3,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,ADD_OPTION_INCCRITDMG,fRate,SkillTime);

  00279	ff 75 d8	 push	 DWORD PTR _SkillTime$1$[ebp]
  0027c	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00282	f3 0f 2c 45 e4	 cvttss2si eax, DWORD PTR _fRate$[ebp]
  00287	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0028d	50		 push	 eax
  0028e	6a 37		 push	 55			; 00000037H
  00290	ff 75 e0	 push	 DWORD PTR _addcriticaldamagevalue$2$[ebp]
  00293	6a 11		 push	 17			; 00000011H
  00295	68 95 00 00 00	 push	 149			; 00000095H
  0029a	56		 push	 esi
  0029b	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  002a0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3115 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  002a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  002a8	ff 75 d8	 push	 DWORD PTR _SkillTime$1$[ebp]
  002ab	68 d8 04 00 00	 push	 1240			; 000004d8H
  002b0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  002b5	50		 push	 eax
  002b6	ff 36		 push	 DWORD PTR [esi]
  002b8	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3116 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  002bd	8b 45 d4	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  002c0	6a 01		 push	 1
  002c2	ff 36		 push	 DWORD PTR [esi]
  002c4	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  002c8	50		 push	 eax
  002c9	57		 push	 edi
  002ca	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3117 : 				lpPartyObj->m_MPSkillOpt.MpsCritBuffExcDamage = fExcRate;

  002cf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _fExcRate$[ebp]

; 3118 : 				gObjCalCharacter(lpPartyObj->m_Index);

  002d4	ff 36		 push	 DWORD PTR [esi]
  002d6	f3 0f 11 86 74
	08 00 00	 movss	 DWORD PTR [esi+2164], xmm0
  002de	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  002e3	83 c4 20	 add	 esp, 32			; 00000020H
$LN5@MLS_SkillF:

; 3105 : 	}
; 3106 : 	else
; 3107 : 	{
; 3108 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  002e6	43		 inc	 ebx
  002e7	83 fb 05	 cmp	 ebx, 5
  002ea	7c 84		 jl	 SHORT $LL7@MLS_SkillF
$LN31@MLS_SkillF:
  002ec	5e		 pop	 esi
$LN6@MLS_SkillF:

; 3119 : 			}
; 3120 : 		}
; 3121 : 	}
; 3122 : }

  002ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002f0	5f		 pop	 edi
  002f1	33 cd		 xor	 ecx, ebp
  002f3	5b		 pop	 ebx
  002f4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f9	8b e5		 mov	 esp, ebp
  002fb	5d		 pop	 ebp
  002fc	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
tv592 = -16						; size = 4
_BuffNumber$1$ = -12					; size = 4
_DuelIndex$1$ = -12					; size = 4
_Value$2$ = -8						; size = 4
_count$1$ = -8						; size = 4
tv598 = -4						; size = 4
_fSkillValue$1 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlind, COMDAT
; _this$ = ecx

; 6883 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 6884 : 	LPOBJ lpObj = &gObj[aIndex];
; 6885 : 	int bSuccess = FALSE;
; 6886 : 	int tObjNum;
; 6887 : 
; 6888 : 	int Angle = MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 6889 : 	int count = 0;
; 6890 : 
; 6891 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000d	56		 push	 esi
  0000e	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00012	57		 push	 edi
  00013	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  0001a	6a 01		 push	 1
  0001c	53		 push	 ebx
  0001d	50		 push	 eax
  0001e	89 4d ec	 mov	 DWORD PTR _this$1$[ebp], ecx
  00021	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	57		 push	 edi
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$1$[ebp], 0
  0002f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6892 : 
; 6893 : 	int DuelIndex = lpObj->m_iDuelUser;

  00034	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 6894 : 	int Rate = 0;
; 6895 : 
; 6896 : 	if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  0003d	69 db 40 27 00
	00		 imul	 ebx, ebx, 10048
  00043	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004b	89 5d fc	 mov	 DWORD PTR tv598[ebp], ebx
  0004e	80 7c 03 50 02	 cmp	 BYTE PTR [ebx+eax+80], 2
  00053	75 2b		 jne	 SHORT $LN4@MLS_SkillB

; 6897 : 	{
; 6898 : 		Rate = lpObj->m_AttackRating * (20 + lpObj->Energy / 50) / 100;

  00055	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  0005c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00061	f7 e9		 imul	 ecx
  00063	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00068	c1 fa 04	 sar	 edx, 4
  0006b	8b ca		 mov	 ecx, edx
  0006d	83 c2 14	 add	 edx, 20			; 00000014H
  00070	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00073	03 ca		 add	 ecx, edx
  00075	0f af 8f 68 06
	00 00		 imul	 ecx, DWORD PTR [edi+1640]
  0007c	f7 e9		 imul	 ecx

; 6899 : 	}
; 6900 : 	else

  0007e	eb 4c		 jmp	 SHORT $LN59@MLS_SkillB
$LN4@MLS_SkillB:

; 6901 : 	{
; 6902 : 		int Tmp = lpObj->Level * 3 + lpObj->Dexterity * 35 / 10;

  00080	0f b7 87 d2 00
	00 00		 movzx	 eax, WORD PTR [edi+210]
  00087	6b c8 23	 imul	 ecx, eax, 35
  0008a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0008f	f7 e9		 imul	 ecx
  00091	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]

; 6903 : 		Rate = Tmp * (20 + lpObj->Energy / 50) / 100;

  00098	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  0009f	c1 fa 02	 sar	 edx, 2
  000a2	8b f2		 mov	 esi, edx
  000a4	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000a7	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000aa	03 f2		 add	 esi, edx
  000ac	03 f0		 add	 esi, eax
  000ae	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000b3	f7 e9		 imul	 ecx
  000b5	c1 fa 04	 sar	 edx, 4
  000b8	8b c2		 mov	 eax, edx
  000ba	83 c2 14	 add	 edx, 20			; 00000014H
  000bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c0	03 c2		 add	 eax, edx
  000c2	0f af f0	 imul	 esi, eax
  000c5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000ca	f7 ee		 imul	 esi
$LN59@MLS_SkillB:
  000cc	c1 fa 05	 sar	 edx, 5
  000cf	8b f2		 mov	 esi, edx
  000d1	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000d4	03 f2		 add	 esi, edx

; 6904 : 	}
; 6905 : 
; 6906 : 	if( Rate < rand()%100 )

  000d6	e8 00 00 00 00	 call	 _rand
  000db	99		 cdq
  000dc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000e1	f7 f9		 idiv	 ecx
  000e3	3b f2		 cmp	 esi, edx
  000e5	7d 25		 jge	 SHORT $LN49@MLS_SkillB

; 6907 : 	{
; 6908 : 		GCDamageSend(lpObj->m_Index,gObj[aTargetIndex].m_Index,0,0,0,0);

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	6a 00		 push	 0
  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	6a 00		 push	 0
  000f4	ff 34 03	 push	 DWORD PTR [ebx+eax]
  000f7	ff 37		 push	 DWORD PTR [edi]
  000f9	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000fe	83 c4 18	 add	 esp, 24			; 00000018H
  00101	33 c0		 xor	 eax, eax
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx

; 7013 : 		{
; 7014 : 			break;
; 7015 : 		}
; 7016 : 	}
; 7017 : 
; 7018 : return bSuccess;
; 7019 : }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 0c 00	 ret	 12			; 0000000cH
$LN49@MLS_SkillB:

; 6909 : 		return false;

  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	8d 9f 4c 0c 00
	00		 lea	 ebx, DWORD PTR [edi+3148]
  00118	33 c0		 xor	 eax, eax
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL2@MLS_SkillB:

; 6910 : 	}
; 6911 : 
; 6912 : 	int EnableAttack;
; 6913 : 
; 6914 : 	while( TRUE )
; 6915 : 	{
; 6916 : 		if(lpObj->VpPlayer2[count].state != 0)

  00120	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00124	0f 84 1d 01 00
	00		 je	 $LN21@MLS_SkillB

; 6917 : 		{
; 6918 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0012a	0f bf 73 fe	 movsx	 esi, WORD PTR [ebx-2]

; 6919 : 
; 6920 : 			if( tObjNum >= 0 )

  0012e	85 f6		 test	 esi, esi
  00130	0f 88 11 01 00
	00		 js	 $LN21@MLS_SkillB

; 6921 : 			{
; 6922 : 				EnableAttack = 0;
; 6923 : 
; 6924 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00136	8a 33		 mov	 dh, BYTE PTR [ebx]
  00138	80 fe 02	 cmp	 dh, 2
  0013b	75 14		 jne	 SHORT $LN9@MLS_SkillB
  0013d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00143	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0014b	0f 8c d0 00 00
	00		 jl	 $LN15@MLS_SkillB
$LN9@MLS_SkillB:

; 6925 : 				{
; 6926 : 					EnableAttack = 1;
; 6927 : 				}
; 6928 : 				else if(tObjNum == aTargetIndex && DuelIndex == tObjNum)

  00151	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00154	75 09		 jne	 SHORT $LN11@MLS_SkillB
  00156	39 75 f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  00159	0f 84 c2 00 00
	00		 je	 $LN15@MLS_SkillB
$LN11@MLS_SkillB:

; 6929 : 				{
; 6930 : 					EnableAttack = 1;
; 6931 : 				}
; 6932 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||
; 6933 : 						 IT_MAP_RANGE(lpObj->MapNumber) || 

  0015f	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  00165	80 fa 35	 cmp	 dl, 53			; 00000035H
  00168	0f 84 b3 00 00
	00		 je	 $LN15@MLS_SkillB
  0016e	80 fa 12	 cmp	 dl, 18			; 00000012H
  00171	72 0f		 jb	 SHORT $LN47@MLS_SkillB
  00173	b0 17		 mov	 al, 23			; 00000017H
  00175	3a c2		 cmp	 al, dl
  00177	1b c0		 sbb	 eax, eax
  00179	83 c0 01	 add	 eax, 1
  0017c	0f 85 9f 00 00
	00		 jne	 $LN15@MLS_SkillB
$LN47@MLS_SkillB:
  00182	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  00185	72 0f		 jb	 SHORT $LN48@MLS_SkillB
  00187	b0 32		 mov	 al, 50			; 00000032H
  00189	3a c2		 cmp	 al, dl
  0018b	1b c0		 sbb	 eax, eax
  0018d	83 c0 01	 add	 eax, 1
  00190	0f 85 8b 00 00
	00		 jne	 $LN15@MLS_SkillB
$LN48@MLS_SkillB:
  00196	80 fa 3f	 cmp	 dl, 63			; 0000003fH
  00199	0f 84 82 00 00
	00		 je	 $LN15@MLS_SkillB

; 6934 : 						 lpObj->MapNumber == MAP_INDEX_VULCANUS )
; 6935 : 				{
; 6936 : 					EnableAttack = 1;
; 6937 : 				}
; 6938 : #if (GS_CASTLE == 1)
; 6939 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0019f	80 fe 03	 cmp	 dh, 3
  001a2	74 3c		 je	 SHORT $LN16@MLS_SkillB
  001a4	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  001aa	89 45 f0	 mov	 DWORD PTR tv592[ebp], eax
  001ad	80 bc 08 23 01
	00 00 1e	 cmp	 BYTE PTR [eax+ecx+291], 30 ; 0000001eH
  001b5	75 29		 jne	 SHORT $LN16@MLS_SkillB
  001b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001bc	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6940 : 				{
; 6941 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c7	83 f8 07	 cmp	 eax, 7
  001ca	75 14		 jne	 SHORT $LN16@MLS_SkillB
  001cc	8b 55 f0	 mov	 edx, DWORD PTR tv592[ebp]
  001cf	8a 87 5a 20 00
	00		 mov	 al, BYTE PTR [edi+8282]
  001d5	3a 84 0a 5a 20
	00 00		 cmp	 al, BYTE PTR [edx+ecx+8282]
  001dc	74 66		 je	 SHORT $LN57@MLS_SkillB

; 6942 : 						EnableAttack = 1;
; 6943 : 				}
; 6944 : #endif
; 6945 : 				else

  001de	eb 41		 jmp	 SHORT $LN15@MLS_SkillB
$LN16@MLS_SkillB:

; 6946 : 				{
; 6947 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  001e0	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6948 : 
; 6949 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  001e6	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  001eb	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  001ee	75 14		 jne	 SHORT $LN19@MLS_SkillB
  001f0	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  001f7	85 c0		 test	 eax, eax
  001f9	78 09		 js	 SHORT $LN19@MLS_SkillB

; 6950 : 					{
; 6951 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  001fb	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00201	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN19@MLS_SkillB:

; 6952 : 					}
; 6953 : 
; 6954 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00204	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  0020a	03 c1		 add	 eax, ecx
  0020c	50		 push	 eax
  0020d	57		 push	 edi
  0020e	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00213	83 c4 08	 add	 esp, 8
  00216	83 f8 01	 cmp	 eax, 1
  00219	75 23		 jne	 SHORT $LN51@MLS_SkillB
  0021b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN15@MLS_SkillB:

; 6955 : 					{
; 6956 : 						EnableAttack = 1;
; 6957 : 					}
; 6958 : 				}
; 6959 : 
; 6960 : 				if( EnableAttack != 0 &&
; 6961 : 					tObjNum == aTargetIndex && 

  00221	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  00224	3b f2		 cmp	 esi, edx
  00226	75 1c		 jne	 SHORT $LN57@MLS_SkillB
  00228	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  0022b	ff 76 08	 push	 DWORD PTR [esi+8]
  0022e	52		 push	 edx
  0022f	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00232	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00237	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023a	85 c0		 test	 eax, eax
  0023c	75 24		 jne	 SHORT $LN40@MLS_SkillB
$LN51@MLS_SkillB:
  0023e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN57@MLS_SkillB:
  00244	8b 45 f8	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN21@MLS_SkillB:

; 7005 : 					break;
; 7006 : 				}
; 7007 : 			}
; 7008 : 		}
; 7009 : 
; 7010 : 		count++;

  00247	40		 inc	 eax
  00248	83 c3 0c	 add	 ebx, 12			; 0000000cH
  0024b	89 45 f8	 mov	 DWORD PTR _count$1$[ebp], eax

; 7011 : 
; 7012 : 		if( count > MAX_VIEWPORT -1)

  0024e	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00251	0f 8e c9 fe ff
	ff		 jle	 $LL2@MLS_SkillB
  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	33 c0		 xor	 eax, eax
  0025b	5b		 pop	 ebx

; 7013 : 		{
; 7014 : 			break;
; 7015 : 		}
; 7016 : 	}
; 7017 : 
; 7018 : return bSuccess;
; 7019 : }

  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c2 0c 00	 ret	 12			; 0000000cH
$LN40@MLS_SkillB:

; 6962 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )
; 6963 : 				{
; 6964 : 					int BuffNumber = (lpMagic->m_Skill==AT_MSKILL_SUM_BLIND1) ? BUFF_BLIND2 : BUFF_BLIND;

  00262	81 7e 08 cf 01
	00 00		 cmp	 DWORD PTR [esi+8], 463	; 000001cfH
  00269	b8 90 00 00 00	 mov	 eax, 144		; 00000090H

; 6965 : 					int Value = 20 + lpObj->Energy / 50;

  0026e	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  00275	bb 49 00 00 00	 mov	 ebx, 73			; 00000049H
  0027a	0f 44 d8	 cmove	 ebx, eax
  0027d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00282	f7 e9		 imul	 ecx
  00284	89 5d f4	 mov	 DWORD PTR _BuffNumber$1$[ebp], ebx
  00287	c1 fa 04	 sar	 edx, 4
  0028a	8b c2		 mov	 eax, edx
  0028c	83 c2 14	 add	 edx, 20			; 00000014H
  0028f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00292	03 c2		 add	 eax, edx

; 6966 : 
; 6967 : 					if( Value > 100 )

  00294	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00299	83 f8 64	 cmp	 eax, 100		; 00000064H
  0029c	0f 4f c2	 cmovg	 eax, edx

; 6968 : 						Value = 100;
; 6969 : 
; 6970 : 					int Time = 0;
; 6971 : 
; 6972 : 					if( gObj[aTargetIndex].Type == OBJ_MONSTER )

  0029f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a5	89 45 f8	 mov	 DWORD PTR _Value$2$[ebp], eax
  002a8	33 f6		 xor	 esi, esi
  002aa	8b 45 fc	 mov	 eax, DWORD PTR tv598[ebp]
  002ad	8a 44 10 50	 mov	 al, BYTE PTR [eax+edx+80]
  002b1	3c 02		 cmp	 al, 2
  002b3	75 3f		 jne	 SHORT $LN23@MLS_SkillB

; 6973 : 					{
; 6974 : 						Time = (9 + lpObj->Energy/46) - (gObj[aTargetIndex].Level / 15);

  002b5	8b 45 fc	 mov	 eax, DWORD PTR tv598[ebp]
  002b8	0f b7 b7 d6 00
	00 00		 movzx	 esi, WORD PTR [edi+214]
  002bf	0f bf 8c 10 96
	00 00 00	 movsx	 ecx, WORD PTR [eax+edx+150]
  002c7	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002cc	f7 e9		 imul	 ecx
  002ce	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  002d3	03 d1		 add	 edx, ecx
  002d5	c1 fa 03	 sar	 edx, 3
  002d8	8b ca		 mov	 ecx, edx
  002da	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  002dd	03 ca		 add	 ecx, edx
  002df	f7 ee		 imul	 esi
  002e1	03 d6		 add	 edx, esi
  002e3	c1 fa 05	 sar	 edx, 5
  002e6	8b f2		 mov	 esi, edx
  002e8	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  002eb	03 f2		 add	 esi, edx
  002ed	2b f1		 sub	 esi, ecx
  002ef	83 c6 09	 add	 esi, 9
  002f2	eb 1a		 jmp	 SHORT $LN25@MLS_SkillB
$LN23@MLS_SkillB:

; 6975 : 					}
; 6976 : 					else if( gObj[aTargetIndex].Type == OBJ_USER )

  002f4	3c 01		 cmp	 al, 1
  002f6	75 16		 jne	 SHORT $LN25@MLS_SkillB

; 6977 : 					{
; 6978 : 						Time = 3 + (lpObj->Energy/210) + (gObj[aTargetIndex].Level-gObj[aTargetIndex].Level) / 100;

  002f8	b8 9d c0 09 9c	 mov	 eax, -1677082467	; 9c09c09dH
  002fd	f7 e9		 imul	 ecx
  002ff	03 d1		 add	 edx, ecx
  00301	c1 fa 07	 sar	 edx, 7
  00304	8b f2		 mov	 esi, edx
  00306	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00309	83 c6 03	 add	 esi, 3
  0030c	03 f2		 add	 esi, edx
$LN25@MLS_SkillB:

; 6979 : 					}
; 6980 : 
; 6981 : 					if( BuffNumber == BUFF_BLIND2 )

  0030e	81 fb 90 00 00
	00		 cmp	 ebx, 144		; 00000090H
  00314	0f 85 8f 00 00
	00		 jne	 $LN55@MLS_SkillB

; 6982 : 					{
; 6983 : 						float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0031a	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0031d	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00321	50		 push	 eax
  00322	ff 71 08	 push	 DWORD PTR [ecx+8]
  00325	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0032a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0032f	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00338	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 6984 : 
; 6985 : 						if( fSkillValue > 0.0f )

  0033b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  00340	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00347	76 60		 jbe	 SHORT $LN55@MLS_SkillB

; 6986 : 						{
; 6987 : 							float fpercent = rand()%100;

  00349	e8 00 00 00 00	 call	 _rand
  0034e	99		 cdq
  0034f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00354	f7 f9		 idiv	 ecx

; 6988 : 
; 6989 : 							if( fpercent < fSkillValue )

  00356	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fSkillValue$1[ebp]
  0035b	66 0f 6e c2	 movd	 xmm0, edx
  0035f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00362	0f 2f c8	 comiss	 xmm1, xmm0
  00365	76 42		 jbe	 SHORT $LN55@MLS_SkillB

; 6990 : 							{
; 6991 : 								gObjAddBuffEffect(&gObj[aTargetIndex],BUFF_STUN,0,0,0,0,2);

  00367	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0036c	8b 5d fc	 mov	 ebx, DWORD PTR tv598[ebp]
  0036f	03 c3		 add	 eax, ebx
  00371	6a 02		 push	 2
  00373	6a 00		 push	 0
  00375	6a 00		 push	 0
  00377	6a 00		 push	 0
  00379	6a 00		 push	 0
  0037b	6a 3d		 push	 61			; 0000003dH
  0037d	50		 push	 eax
  0037e	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6992 : 								gObjSetPosition(aTargetIndex,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  00383	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00389	0f b6 84 0b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+289]
  00391	50		 push	 eax
  00392	0f b6 84 0b 20
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+288]
  0039a	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0039d	50		 push	 eax
  0039e	53		 push	 ebx
  0039f	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  003a4	83 c4 28	 add	 esp, 40			; 00000028H
  003a7	eb 03		 jmp	 SHORT $LN52@MLS_SkillB
$LN55@MLS_SkillB:
  003a9	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
$LN52@MLS_SkillB:

; 6993 : 							}
; 6994 : 						}
; 6995 : 					}
; 6996 : 
; 6997 : 					if( gObjCheckPowerfulEffect(&gObj[aTargetIndex],BuffNumber,Value,0) == TRUE )

  003ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b1	03 45 fc	 add	 eax, DWORD PTR tv598[ebp]
  003b4	6a 00		 push	 0
  003b6	ff 75 f8	 push	 DWORD PTR _Value$2$[ebp]
  003b9	ff 75 f4	 push	 DWORD PTR _BuffNumber$1$[ebp]
  003bc	50		 push	 eax
  003bd	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  003c2	83 c4 10	 add	 esp, 16			; 00000010H
  003c5	3c 01		 cmp	 al, 1
  003c7	75 1f		 jne	 SHORT $LN29@MLS_SkillB

; 6998 : 					{
; 6999 : 						GCMagicAttackNumberSend(lpObj ,lpMagic->m_Skill, aTargetIndex, 0);

  003c9	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  003cc	6a 00		 push	 0
  003ce	53		 push	 ebx
  003cf	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  003d3	50		 push	 eax
  003d4	57		 push	 edi
  003d5	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  003da	83 c4 10	 add	 esp, 16			; 00000010H
  003dd	33 c0		 xor	 eax, eax
  003df	5f		 pop	 edi
  003e0	5e		 pop	 esi
  003e1	5b		 pop	 ebx

; 7013 : 		{
; 7014 : 			break;
; 7015 : 		}
; 7016 : 	}
; 7017 : 
; 7018 : return bSuccess;
; 7019 : }

  003e2	8b e5		 mov	 esp, ebp
  003e4	5d		 pop	 ebp
  003e5	c2 0c 00	 ret	 12			; 0000000cH
$LN29@MLS_SkillB:

; 7000 : 						return FALSE;
; 7001 : 					}
; 7002 : 
; 7003 : 					gObjAddBuffEffect(&gObj[aTargetIndex],BuffNumber,ADD_OPTION_DECATTACKRATE,Value,0,0,Time);

  003e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003ed	03 45 fc	 add	 eax, DWORD PTR tv598[ebp]
  003f0	56		 push	 esi
  003f1	6a 00		 push	 0
  003f3	6a 00		 push	 0
  003f5	ff 75 f8	 push	 DWORD PTR _Value$2$[ebp]
  003f8	6a 6a		 push	 106			; 0000006aH
  003fa	ff 75 f4	 push	 DWORD PTR _BuffNumber$1$[ebp]
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00403	83 c4 1c	 add	 esp, 28			; 0000001cH

; 7004 : 					bSuccess = TRUE;

  00406	b8 01 00 00 00	 mov	 eax, 1
  0040b	5f		 pop	 edi
  0040c	5e		 pop	 esi
  0040d	5b		 pop	 ebx

; 7013 : 		{
; 7014 : 			break;
; 7015 : 		}
; 7016 : 	}
; 7017 : 
; 7018 : return bSuccess;
; 7019 : }

  0040e	8b e5		 mov	 esp, ebp
  00410	5d		 pop	 ebp
  00411	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -12					; size = 4
_HitCount$1$ = -8					; size = 4
_count$1$ = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
tv479 = 24						; size = 4
_aTargetIndex$ = 24					; size = 4
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation, COMDAT
; _this$ = ecx

; 6796 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6797 : 	LPOBJ lpObj = &gObj[aIndex];

  00009	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048

; 6798 : 	int bSuccess = FALSE;
; 6799 : 	int tObjNum;
; 6800 : 	int count = 0;
; 6801 : 	int HitCount = 0;
; 6802 : 	int DuelIndex = lpObj->m_iDuelUser;
; 6803 : 	int EnableAttack;
; 6804 : 
; 6805 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00010	6a 01		 push	 1
  00012	ff 75 18	 push	 DWORD PTR _aTargetIndex$[ebp]
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1$[ebp], 0
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _HitCount$1$[ebp], 0
  00023	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	89 7d 08	 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0002c	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  00032	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00035	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00038	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0003c	50		 push	 eax
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	8d 87 4c 0c 00
	00		 lea	 eax, DWORD PTR [edi+3148]
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	89 45 18	 mov	 DWORD PTR tv479[ebp], eax
  00055	33 d2		 xor	 edx, edx
  00057	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@MLS_SkillI:

; 6806 : 
; 6807 : 	while( TRUE )
; 6808 : 	{
; 6809 : 		if(lpObj->VpPlayer2[count].state != 0)

  00060	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00064	0f 84 6a 01 00
	00		 je	 $LN20@MLS_SkillI

; 6810 : 		{
; 6811 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0006a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 6812 : 
; 6813 : 			if( tObjNum >= 0 )

  0006e	85 f6		 test	 esi, esi
  00070	0f 88 5e 01 00
	00		 js	 $LN20@MLS_SkillI

; 6814 : 			{
; 6815 : 				EnableAttack = 0;
; 6816 : 
; 6817 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00076	8a 18		 mov	 bl, BYTE PTR [eax]
  00078	80 fb 02	 cmp	 bl, 2
  0007b	75 14		 jne	 SHORT $LN6@MLS_SkillI
  0007d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00083	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0008b	0f 8c f6 00 00
	00		 jl	 $LN12@MLS_SkillI
$LN6@MLS_SkillI:

; 6818 : 				{
; 6819 : 					EnableAttack = 1;
; 6820 : 				}
; 6821 : 				else if(DuelIndex == tObjNum)

  00091	39 75 f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  00094	0f 84 ed 00 00
	00		 je	 $LN12@MLS_SkillI

; 6822 : 				{
; 6823 : 					EnableAttack = 1;
; 6824 : 				}
; 6825 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||
; 6826 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||

  0009a	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  000a0	80 fa 35	 cmp	 dl, 53			; 00000035H
  000a3	0f 84 de 00 00
	00		 je	 $LN12@MLS_SkillI
  000a9	80 fa 12	 cmp	 dl, 18			; 00000012H
  000ac	72 0f		 jb	 SHORT $LN36@MLS_SkillI
  000ae	b0 17		 mov	 al, 23			; 00000017H
  000b0	3a c2		 cmp	 al, dl
  000b2	1b c0		 sbb	 eax, eax
  000b4	83 c0 01	 add	 eax, 1
  000b7	0f 85 ca 00 00
	00		 jne	 $LN12@MLS_SkillI
$LN36@MLS_SkillI:
  000bd	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  000c0	72 0f		 jb	 SHORT $LN37@MLS_SkillI
  000c2	b0 32		 mov	 al, 50			; 00000032H
  000c4	3a c2		 cmp	 al, dl
  000c6	1b c0		 sbb	 eax, eax
  000c8	83 c0 01	 add	 eax, 1
  000cb	0f 85 b6 00 00
	00		 jne	 $LN12@MLS_SkillI
$LN37@MLS_SkillI:
  000d1	80 fa 3f	 cmp	 dl, 63			; 0000003fH
  000d4	0f 84 ad 00 00
	00		 je	 $LN12@MLS_SkillI

; 6827 : 						 lpObj->MapNumber == MAP_INDEX_VULCANUS)
; 6828 : 				{
; 6829 : 					EnableAttack = 1;
; 6830 : 				}
; 6831 : #if (GS_CASTLE == 1)
; 6832 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000da	80 fb 03	 cmp	 bl, 3
  000dd	74 67		 je	 SHORT $LN13@MLS_SkillI
  000df	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000e5	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000ed	75 54		 jne	 SHORT $LN45@MLS_SkillI
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f4	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6833 : 				{
; 6834 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ff	83 f8 07	 cmp	 eax, 7
  00102	75 3f		 jne	 SHORT $LN45@MLS_SkillI
  00104	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  00107	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  0010d	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  00114	0f 84 b1 00 00
	00		 je	 $LN44@MLS_SkillI

; 6835 : 					{
; 6836 : 						if( gObj[tObjNum].Class != 283 &&

  0011a	0f b7 84 0f 90
	00 00 00	 movzx	 eax, WORD PTR [edi+ecx+144]
  00122	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH

; 6837 : 							gObj[tObjNum].Class != 277 )
; 6838 : 							EnableAttack = 1;
; 6839 : 					}
; 6840 : 				}
; 6841 : #endif
; 6842 : 				else

  00127	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  0012a	66 3b c2	 cmp	 ax, dx
  0012d	0f 84 9b 00 00
	00		 je	 $LN46@MLS_SkillI

; 6835 : 					{
; 6836 : 						if( gObj[tObjNum].Class != 283 &&

  00133	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00138	66 3b c2	 cmp	 ax, dx
  0013b	0f 84 8d 00 00
	00		 je	 $LN46@MLS_SkillI

; 6837 : 							gObj[tObjNum].Class != 277 )
; 6838 : 							EnableAttack = 1;
; 6839 : 					}
; 6840 : 				}
; 6841 : #endif
; 6842 : 				else

  00141	eb 44		 jmp	 SHORT $LN12@MLS_SkillI
$LN45@MLS_SkillI:
  00143	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN13@MLS_SkillI:

; 6843 : 				{
; 6844 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00146	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6845 : 
; 6846 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0014c	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00151	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00154	75 14		 jne	 SHORT $LN17@MLS_SkillI
  00156	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  0015d	85 c0		 test	 eax, eax
  0015f	78 09		 js	 SHORT $LN17@MLS_SkillI

; 6847 : 					{
; 6848 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00161	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00167	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN17@MLS_SkillI:

; 6849 : 					}
; 6850 : 
; 6851 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0016a	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00170	03 c1		 add	 eax, ecx
  00172	50		 push	 eax
  00173	57		 push	 edi
  00174	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00179	83 c4 08	 add	 esp, 8
  0017c	83 f8 01	 cmp	 eax, 1
  0017f	75 42		 jne	 SHORT $LN40@MLS_SkillI
  00181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN12@MLS_SkillI:

; 6852 : 					{
; 6853 : 						EnableAttack = 1;
; 6854 : 					}
; 6855 : 				}
; 6856 : 
; 6857 : 				if( EnableAttack != 0 &&

  00187	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  0018d	03 c1		 add	 eax, ecx
  0018f	50		 push	 eax
  00190	57		 push	 edi
  00191	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00196	83 c4 08	 add	 esp, 8
  00199	83 f8 05	 cmp	 eax, 5
  0019c	7d 25		 jge	 SHORT $LN40@MLS_SkillI

; 6858 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )
; 6859 : 				{
; 6860 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0019e	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  001a1	6a 00		 push	 0
  001a3	ff 70 08	 push	 DWORD PTR [eax+8]
  001a6	68 bc 02 00 00	 push	 700			; 000002bcH
  001ab	56		 push	 esi
  001ac	6a 32		 push	 50			; 00000032H
  001ae	57		 push	 edi
  001af	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay

; 6861 : 					HitCount++;

  001b4	8b 5d f8	 mov	 ebx, DWORD PTR _HitCount$1$[ebp]
  001b7	83 c4 18	 add	 esp, 24			; 00000018H
  001ba	43		 inc	 ebx
  001bb	89 5d f8	 mov	 DWORD PTR _HitCount$1$[ebp], ebx

; 6862 : 
; 6863 : 					if(HitCount >= 5)

  001be	83 fb 05	 cmp	 ebx, 5
  001c1	7d 24		 jge	 SHORT $LN41@MLS_SkillI
$LN40@MLS_SkillI:
  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c9	eb 03		 jmp	 SHORT $LN46@MLS_SkillI
$LN44@MLS_SkillI:
  001cb	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN46@MLS_SkillI:
  001ce	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
  001d1	8b 45 18	 mov	 eax, DWORD PTR tv479[ebp]
$LN20@MLS_SkillI:

; 6864 : 					{
; 6865 : 						break;
; 6866 : 					}
; 6867 : 				}
; 6868 : 			}
; 6869 : 		}
; 6870 : 
; 6871 : 		count++;

  001d4	42		 inc	 edx
  001d5	83 c0 0c	 add	 eax, 12			; 0000000cH
  001d8	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
  001db	89 45 18	 mov	 DWORD PTR tv479[ebp], eax

; 6872 : 
; 6873 : 		if( count > MAX_VIEWPORT -1)

  001de	83 fa 4a	 cmp	 edx, 74			; 0000004aH
  001e1	0f 8e 79 fe ff
	ff		 jle	 $LL2@MLS_SkillI
$LN41@MLS_SkillI:
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi

; 6874 : 		{
; 6875 : 			break;
; 6876 : 		}
; 6877 : 	}
; 6878 : 
; 6879 : return bSuccess;

  001e9	33 c0		 xor	 eax, eax
  001eb	5b		 pop	 ebx

; 6880 : }

  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -12					; size = 4
_HitCount$1$ = -8					; size = 4
_count$1$ = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
tv479 = 24						; size = 4
_aTargetIndex$ = 24					; size = 4
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness, COMDAT
; _this$ = ecx

; 6709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 6710 : 	LPOBJ lpObj = &gObj[aIndex];

  00009	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048

; 6711 : 	int bSuccess = FALSE;
; 6712 : 	int tObjNum;
; 6713 : 	int count = 0;
; 6714 : 	int HitCount = 0;
; 6715 : 	int DuelIndex = lpObj->m_iDuelUser;
; 6716 : 	int EnableAttack;
; 6717 : 
; 6718 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00010	6a 01		 push	 1
  00012	ff 75 18	 push	 DWORD PTR _aTargetIndex$[ebp]
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$1$[ebp], 0
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _HitCount$1$[ebp], 0
  00023	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	89 7d 08	 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0002c	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  00032	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00035	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00038	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0003c	50		 push	 eax
  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	8d 87 4c 0c 00
	00		 lea	 eax, DWORD PTR [edi+3148]
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	89 45 18	 mov	 DWORD PTR tv479[ebp], eax
  00055	33 d2		 xor	 edx, edx
  00057	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@MLS_SkillW:

; 6719 : 
; 6720 : 	while( TRUE )
; 6721 : 	{
; 6722 : 		if(lpObj->VpPlayer2[count].state != 0)

  00060	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00064	0f 84 6a 01 00
	00		 je	 $LN20@MLS_SkillW

; 6723 : 		{
; 6724 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0006a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 6725 : 
; 6726 : 			if( tObjNum >= 0 )

  0006e	85 f6		 test	 esi, esi
  00070	0f 88 5e 01 00
	00		 js	 $LN20@MLS_SkillW

; 6727 : 			{
; 6728 : 				EnableAttack = 0;
; 6729 : 
; 6730 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00076	8a 18		 mov	 bl, BYTE PTR [eax]
  00078	80 fb 02	 cmp	 bl, 2
  0007b	75 14		 jne	 SHORT $LN6@MLS_SkillW
  0007d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00083	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0008b	0f 8c f6 00 00
	00		 jl	 $LN12@MLS_SkillW
$LN6@MLS_SkillW:

; 6731 : 				{
; 6732 : 					EnableAttack = 1;
; 6733 : 				}
; 6734 : 				else if(DuelIndex == tObjNum)

  00091	39 75 f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  00094	0f 84 ed 00 00
	00		 je	 $LN12@MLS_SkillW

; 6735 : 				{
; 6736 : 					EnableAttack = 1;
; 6737 : 				}
; 6738 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||
; 6739 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||

  0009a	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  000a0	80 fa 35	 cmp	 dl, 53			; 00000035H
  000a3	0f 84 de 00 00
	00		 je	 $LN12@MLS_SkillW
  000a9	80 fa 12	 cmp	 dl, 18			; 00000012H
  000ac	72 0f		 jb	 SHORT $LN36@MLS_SkillW
  000ae	b0 17		 mov	 al, 23			; 00000017H
  000b0	3a c2		 cmp	 al, dl
  000b2	1b c0		 sbb	 eax, eax
  000b4	83 c0 01	 add	 eax, 1
  000b7	0f 85 ca 00 00
	00		 jne	 $LN12@MLS_SkillW
$LN36@MLS_SkillW:
  000bd	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  000c0	72 0f		 jb	 SHORT $LN37@MLS_SkillW
  000c2	b0 32		 mov	 al, 50			; 00000032H
  000c4	3a c2		 cmp	 al, dl
  000c6	1b c0		 sbb	 eax, eax
  000c8	83 c0 01	 add	 eax, 1
  000cb	0f 85 b6 00 00
	00		 jne	 $LN12@MLS_SkillW
$LN37@MLS_SkillW:
  000d1	80 fa 3f	 cmp	 dl, 63			; 0000003fH
  000d4	0f 84 ad 00 00
	00		 je	 $LN12@MLS_SkillW

; 6740 : 						 lpObj->MapNumber == MAP_INDEX_VULCANUS)
; 6741 : 				{
; 6742 : 					EnableAttack = 1;
; 6743 : 				}
; 6744 : #if (GS_CASTLE == 1)
; 6745 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000da	80 fb 03	 cmp	 bl, 3
  000dd	74 67		 je	 SHORT $LN13@MLS_SkillW
  000df	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000e5	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000ed	75 54		 jne	 SHORT $LN45@MLS_SkillW
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f4	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6746 : 				{
; 6747 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ff	83 f8 07	 cmp	 eax, 7
  00102	75 3f		 jne	 SHORT $LN45@MLS_SkillW
  00104	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  00107	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  0010d	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  00114	0f 84 b1 00 00
	00		 je	 $LN44@MLS_SkillW

; 6748 : 					{
; 6749 : 						if( gObj[tObjNum].Class != 283 &&

  0011a	0f b7 84 0f 90
	00 00 00	 movzx	 eax, WORD PTR [edi+ecx+144]
  00122	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH

; 6750 : 							gObj[tObjNum].Class != 277 )
; 6751 : 							EnableAttack = 1;
; 6752 : 					}
; 6753 : 				}
; 6754 : #endif
; 6755 : 				else

  00127	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  0012a	66 3b c2	 cmp	 ax, dx
  0012d	0f 84 9b 00 00
	00		 je	 $LN46@MLS_SkillW

; 6748 : 					{
; 6749 : 						if( gObj[tObjNum].Class != 283 &&

  00133	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00138	66 3b c2	 cmp	 ax, dx
  0013b	0f 84 8d 00 00
	00		 je	 $LN46@MLS_SkillW

; 6750 : 							gObj[tObjNum].Class != 277 )
; 6751 : 							EnableAttack = 1;
; 6752 : 					}
; 6753 : 				}
; 6754 : #endif
; 6755 : 				else

  00141	eb 44		 jmp	 SHORT $LN12@MLS_SkillW
$LN45@MLS_SkillW:
  00143	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN13@MLS_SkillW:

; 6756 : 				{
; 6757 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00146	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6758 : 
; 6759 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0014c	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00151	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00154	75 14		 jne	 SHORT $LN17@MLS_SkillW
  00156	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  0015d	85 c0		 test	 eax, eax
  0015f	78 09		 js	 SHORT $LN17@MLS_SkillW

; 6760 : 					{
; 6761 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00161	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00167	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN17@MLS_SkillW:

; 6762 : 					}
; 6763 : 
; 6764 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0016a	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00170	03 c1		 add	 eax, ecx
  00172	50		 push	 eax
  00173	57		 push	 edi
  00174	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00179	83 c4 08	 add	 esp, 8
  0017c	83 f8 01	 cmp	 eax, 1
  0017f	75 42		 jne	 SHORT $LN40@MLS_SkillW
  00181	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN12@MLS_SkillW:

; 6765 : 					{
; 6766 : 						EnableAttack = 1;
; 6767 : 					}
; 6768 : 				}
; 6769 : 
; 6770 : 				if( EnableAttack != 0 &&

  00187	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  0018d	03 c1		 add	 eax, ecx
  0018f	50		 push	 eax
  00190	57		 push	 edi
  00191	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00196	83 c4 08	 add	 esp, 8
  00199	83 f8 05	 cmp	 eax, 5
  0019c	7d 25		 jge	 SHORT $LN40@MLS_SkillW

; 6771 : 					gObjCalDistance(lpObj,&gObj[tObjNum]) < 5 )
; 6772 : 				{
; 6773 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0019e	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  001a1	6a 00		 push	 0
  001a3	ff 70 08	 push	 DWORD PTR [eax+8]
  001a6	68 bc 02 00 00	 push	 700			; 000002bcH
  001ab	56		 push	 esi
  001ac	6a 32		 push	 50			; 00000032H
  001ae	57		 push	 edi
  001af	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay

; 6774 : 					HitCount++;

  001b4	8b 5d f8	 mov	 ebx, DWORD PTR _HitCount$1$[ebp]
  001b7	83 c4 18	 add	 esp, 24			; 00000018H
  001ba	43		 inc	 ebx
  001bb	89 5d f8	 mov	 DWORD PTR _HitCount$1$[ebp], ebx

; 6775 : 
; 6776 : 					if(HitCount >= 5)

  001be	83 fb 05	 cmp	 ebx, 5
  001c1	7d 24		 jge	 SHORT $LN41@MLS_SkillW
$LN40@MLS_SkillW:
  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c9	eb 03		 jmp	 SHORT $LN46@MLS_SkillW
$LN44@MLS_SkillW:
  001cb	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN46@MLS_SkillW:
  001ce	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
  001d1	8b 45 18	 mov	 eax, DWORD PTR tv479[ebp]
$LN20@MLS_SkillW:

; 6777 : 					{
; 6778 : 						break;
; 6779 : 					}
; 6780 : 				}
; 6781 : 			}
; 6782 : 		}
; 6783 : 
; 6784 : 		count++;

  001d4	42		 inc	 edx
  001d5	83 c0 0c	 add	 eax, 12			; 0000000cH
  001d8	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
  001db	89 45 18	 mov	 DWORD PTR tv479[ebp], eax

; 6785 : 
; 6786 : 		if( count > MAX_VIEWPORT -1)

  001de	83 fa 4a	 cmp	 edx, 74			; 0000004aH
  001e1	0f 8e 79 fe ff
	ff		 jle	 $LL2@MLS_SkillW
$LN41@MLS_SkillW:
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi

; 6787 : 		{
; 6788 : 			break;
; 6789 : 		}
; 6790 : 	}
; 6791 : 
; 6792 : return bSuccess;

  001e9	33 c0		 xor	 eax, eax
  001eb	5b		 pop	 ebx

; 6793 : }

  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
tv508 = -16						; size = 4
_fSkillValue$1 = -12					; size = 4
_HitCount$1$ = -8					; size = 4
_lpObj$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_DuelIndex$1$ = 16					; size = 4
_targetangle$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike, COMDAT
; _this$ = ecx

; 6600 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 6601 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 6602 : 	int bSuccess = TRUE;
; 6603 : 	int tObjNum;
; 6604 : 
; 6605 : 	MLS_SkillFrustrum3(aIndex,targetangle,2.0f,4.0f,5.0f,0);

  0000c	83 ec 10	 sub	 esp, 16			; 00000010H
  0000f	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00015	89 4d ec	 mov	 DWORD PTR _this$1$[ebp], ecx
  00018	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00020	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	c7 44 24 08 00
	00 a0 40	 mov	 DWORD PTR [esp+8], 1084227584 ; 40a00000H
  0002e	c7 44 24 04 00
	00 80 40	 mov	 DWORD PTR [esp+4], 1082130432 ; 40800000H
  00036	c7 04 24 00 00
	00 40		 mov	 DWORD PTR [esp], 1073741824 ; 40000000H
  0003d	ff 75 10	 push	 DWORD PTR _targetangle$[ebp]
  00040	89 7d fc	 mov	 DWORD PTR _lpObj$1$[ebp], edi
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3

; 6606 : 
; 6607 : 	int count = 0;
; 6608 : 	int HitCount = 0;
; 6609 : 	int bAttack;
; 6610 : 	int DuelIndex = lpObj->m_iDuelUser;

  00049	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  0004f	8d 9f 4c 0c 00
	00		 lea	 ebx, DWORD PTR [edi+3148]
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _HitCount$1$[ebp], 0
  00062	89 45 10	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00065	c7 45 f0 4b 00
	00 00		 mov	 DWORD PTR tv508[ebp], 75 ; 0000004bH
  0006c	0f 1f 40 00	 npad	 4
$LL2@MLS_SkillF:

; 6611 : 	int EnableAttack;
; 6612 : 
; 6613 : 	while ( true )
; 6614 : 	{
; 6615 : 		if(lpObj->VpPlayer2[count].state != 0)

  00070	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00074	0f 84 c4 01 00
	00		 je	 $LN17@MLS_SkillF

; 6616 : 		{
; 6617 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007a	0f bf 73 fe	 movsx	 esi, WORD PTR [ebx-2]

; 6618 : 
; 6619 : 			if(tObjNum >= 0)

  0007e	85 f6		 test	 esi, esi
  00080	0f 88 b8 01 00
	00		 js	 $LN17@MLS_SkillF

; 6620 : 			{
; 6621 : 				EnableAttack = 0;
; 6622 : 
; 6623 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00086	8a 13		 mov	 dl, BYTE PTR [ebx]
  00088	80 fa 02	 cmp	 dl, 2
  0008b	75 17		 jne	 SHORT $LN6@MLS_SkillF
  0008d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00093	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0009b	0f 8c a1 00 00
	00		 jl	 $LN10@MLS_SkillF
  000a1	8b 45 10	 mov	 eax, DWORD PTR _DuelIndex$1$[ebp]
$LN6@MLS_SkillF:

; 6624 : 				{
; 6625 : 					EnableAttack = 1;
; 6626 : 				}
; 6627 : 				else if( tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000a4	3b 75 14	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000a7	0f 84 95 00 00
	00		 je	 $LN10@MLS_SkillF
  000ad	3b c6		 cmp	 eax, esi
  000af	0f 84 8d 00 00
	00		 je	 $LN10@MLS_SkillF

; 6628 : 				{
; 6629 : 					EnableAttack = 1;
; 6630 : 				}
; 6631 : #if (GS_CASTLE == 1)
; 6632 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b5	80 fa 03	 cmp	 dl, 3
  000b8	74 43		 je	 SHORT $LN11@MLS_SkillF
  000ba	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000c0	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000c8	75 30		 jne	 SHORT $LN37@MLS_SkillF
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000cf	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6633 : 				{
; 6634 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000da	83 f8 07	 cmp	 eax, 7
  000dd	75 1b		 jne	 SHORT $LN37@MLS_SkillF
  000df	8b 45 fc	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  000e2	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  000e8	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  000ef	0f 84 46 01 00
	00		 je	 $LN40@MLS_SkillF

; 6635 : 						EnableAttack = 1;
; 6636 : 				}
; 6637 : #endif
; 6638 : 				else

  000f5	8b 7d fc	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  000f8	eb 48		 jmp	 SHORT $LN10@MLS_SkillF
$LN37@MLS_SkillF:
  000fa	8b 7d fc	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN11@MLS_SkillF:

; 6639 : 				{
; 6640 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000fd	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6641 : 
; 6642 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00103	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00108	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  0010b	75 14		 jne	 SHORT $LN14@MLS_SkillF
  0010d	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  00114	85 c0		 test	 eax, eax
  00116	78 09		 js	 SHORT $LN14@MLS_SkillF

; 6643 : 					{
; 6644 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00118	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0011e	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN14@MLS_SkillF:

; 6645 : 					}
; 6646 : 
; 6647 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00121	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00127	03 c1		 add	 eax, ecx
  00129	50		 push	 eax
  0012a	57		 push	 edi
  0012b	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00130	83 c4 08	 add	 esp, 8
  00133	83 f8 01	 cmp	 eax, 1
  00136	0f 85 f9 00 00
	00		 jne	 $LN36@MLS_SkillF
  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_SkillF:

; 6648 : 					{
; 6649 : 						EnableAttack = 1;
; 6650 : 					}
; 6651 : 				}
; 6652 : 
; 6653 : 				if(EnableAttack != 0)
; 6654 : 				{
; 6655 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  00142	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00145	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  0014b	0f b6 84 0e 21
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+289]
  00153	50		 push	 eax
  00154	0f b6 84 0e 20
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+288]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH
  00165	85 c0		 test	 eax, eax
  00167	0f 84 c8 00 00
	00		 je	 $LN36@MLS_SkillF

; 6656 : 					{
; 6657 : 						bAttack = FALSE;
; 6658 : 
; 6659 : 						if(HitCount > 8)

  0016d	83 7d f8 08	 cmp	 DWORD PTR _HitCount$1$[ebp], 8
  00171	7e 17		 jle	 SHORT $LN18@MLS_SkillF

; 6660 : 						{
; 6661 : 							if( rand()%2 )

  00173	e8 00 00 00 00	 call	 _rand
  00178	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0017d	79 05		 jns	 SHORT $LN41@MLS_SkillF
  0017f	48		 dec	 eax
  00180	83 c8 fe	 or	 eax, -2			; fffffffeH
  00183	40		 inc	 eax
$LN41@MLS_SkillF:
  00184	0f 84 a8 00 00
	00		 je	 $LN21@MLS_SkillF
$LN18@MLS_SkillF:

; 6662 : 							{
; 6663 : 								bAttack = TRUE;
; 6664 : 							}
; 6665 : 						}
; 6666 : 						else
; 6667 : 						{
; 6668 : 							bAttack = TRUE;
; 6669 : 						}
; 6670 : 
; 6671 : 						if(bAttack != FALSE)
; 6672 : 						{
; 6673 : 							if( lpMagic->m_Skill == AT_MSKILL_MG_FLAMESTRIKE2 )

  0018a	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0018d	81 78 08 ee 01
	00 00		 cmp	 DWORD PTR [eax+8], 494	; 000001eeH
  00194	75 61		 jne	 SHORT $LN24@MLS_SkillF

; 6674 : 							{
; 6675 : 								float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00196	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0019a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0019f	50		 push	 eax
  001a0	68 ee 01 00 00	 push	 494			; 000001eeH
  001a5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001aa	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001b3	d9 5d f4	 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 6676 : 
; 6677 : 								if( fSkillValue > 0.0f )

  001b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  001bb	0f 57 c9	 xorps	 xmm1, xmm1
  001be	0f 2f c1	 comiss	 xmm0, xmm1
  001c1	76 31		 jbe	 SHORT $LN39@MLS_SkillF

; 6678 : 								{
; 6679 : 									float fpercent = rand()%100;

  001c3	e8 00 00 00 00	 call	 _rand
  001c8	99		 cdq
  001c9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ce	f7 f9		 idiv	 ecx

; 6680 : 
; 6681 : 									if( fpercent < fSkillValue )

  001d0	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _fSkillValue$1[ebp]
  001d5	66 0f 6e c2	 movd	 xmm0, edx
  001d9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001dc	0f 2f c8	 comiss	 xmm1, xmm0
  001df	76 13		 jbe	 SHORT $LN39@MLS_SkillF

; 6682 : 									{
; 6683 : 										gObjBackSpring2(&gObj[tObjNum],lpObj,2);

  001e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e6	6a 02		 push	 2
  001e8	03 c6		 add	 eax, esi
  001ea	57		 push	 edi
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN39@MLS_SkillF:
  001f4	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
$LN24@MLS_SkillF:

; 6684 : 									}
; 6685 : 								}
; 6686 : 							}
; 6687 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	6a 01		 push	 1
  00203	50		 push	 eax
  00204	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00209	03 c6		 add	 eax, esi
  0020b	50		 push	 eax
  0020c	57		 push	 edi
  0020d	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 6688 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00217	6a 00		 push	 0
  00219	6a 00		 push	 0
  0021b	6a 00		 push	 0
  0021d	6a 00		 push	 0
  0021f	6a 00		 push	 0
  00221	6a 01		 push	 1
  00223	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00226	03 c6		 add	 eax, esi
  00228	50		 push	 eax
  00229	57		 push	 edi
  0022a	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0022f	83 c4 48	 add	 esp, 72			; 00000048H
$LN21@MLS_SkillF:

; 6689 : 						}
; 6690 : 
; 6691 : 						HitCount++;

  00232	ff 45 f8	 inc	 DWORD PTR _HitCount$1$[ebp]
$LN36@MLS_SkillF:
  00235	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN40@MLS_SkillF:
  0023b	8b 45 10	 mov	 eax, DWORD PTR _DuelIndex$1$[ebp]
$LN17@MLS_SkillF:

; 6692 : 					}
; 6693 : 				}
; 6694 : 			}
; 6695 : 		}
; 6696 : 
; 6697 : 		count++;
; 6698 : 		if(count > MAX_VIEWPORT -1)

  0023e	8b 7d fc	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  00241	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00244	83 6d f0 01	 sub	 DWORD PTR tv508[ebp], 1
  00248	0f 85 22 fe ff
	ff		 jne	 $LL2@MLS_SkillF
  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	5b		 pop	 ebx

; 6699 : 		{
; 6700 : 			break;
; 6701 : 		}
; 6702 : 	}
; 6703 : 
; 6704 : }

  00251	8b e5		 mov	 esp, ebp
  00253	5d		 pop	 ebp
  00254	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm, COMDAT
; _this$ = ecx

; 6595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6596 : 	MLS_SkillAreaMonsterAttack(aIndex,lpMagic,x,y,aTargetIndex,6,1,0,400);

  00003	68 90 01 00 00	 push	 400			; 00000190H
  00008	6a 00		 push	 0
  0000a	6a 01		 push	 1
  0000c	6a 06		 push	 6
  0000e	ff 75 18	 push	 DWORD PTR _aTargetIndex$[ebp]
  00011	ff 75 14	 push	 DWORD PTR _y$[ebp]
  00014	ff 75 10	 push	 DWORD PTR _x$[ebp]
  00017	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  0001a	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  0001d	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack

; 6597 : }

  00022	5d		 pop	 ebp
  00023	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_fSkillValue$1 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery, COMDAT
; _this$ = ecx

; 4204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 4205 : 	int skillSuccess = 1;
; 4206 : 	LPOBJ lpObj = &gObj[aIndex];
; 4207 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00005	69 75 0c 40 27
	00 00		 imul	 esi, DWORD PTR _aTargetIndex$[ebp], 10048
  0000c	57		 push	 edi
  0000d	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00014	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00017	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4208 : 
; 4209 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  00023	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00027	75 0a		 jne	 SHORT $LN2@MLS_MaGumS
  00029	66 83 bf 90 00
	00 00 03	 cmp	 WORD PTR [edi+144], 3
  00031	75 74		 jne	 SHORT $LN3@MLS_MaGumS
$LN2@MLS_MaGumS:

; 4210 : 	{
; 4211 : 		return;
; 4212 : 	}
; 4213 : 
; 4214 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  00033	6a 01		 push	 1
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  0003b	83 c4 08	 add	 esp, 8
  0003e	85 c0		 test	 eax, eax
  00040	74 65		 je	 SHORT $LN3@MLS_MaGumS

; 4215 : 	{
; 4216 : 		int nEffectValue = 10;
; 4217 : 		float fSkillValue = GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00042	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00045	53		 push	 ebx
  00046	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  0004b	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0004f	50		 push	 eax
  00050	ff 71 08	 push	 DWORD PTR [ecx+8]
  00053	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00058	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00066	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 4218 : 
; 4219 : 		if( fSkillValue > 0.0f )

  00069	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  0006e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00075	76 0c		 jbe	 SHORT $LN4@MLS_MaGumS

; 4220 : 		{
; 4221 : 			nEffectValue += fSkillValue;

  00077	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  0007f	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN4@MLS_MaGumS:

; 4222 : 		}
; 4223 : 
; 4224 : 		gObjAddBuffEffect(lpTargetObj,BUFF_DEFENSEDOWN,ADD_OPTION_DEFENSEDOWN,nEffectValue,0,0,10);

  00083	6a 0a		 push	 10			; 0000000aH
  00085	6a 00		 push	 0
  00087	6a 00		 push	 0
  00089	53		 push	 ebx
  0008a	6a 17		 push	 23			; 00000017H
  0008c	6a 3a		 push	 58			; 0000003aH
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 4225 : 		GCMagicAttackNumberSend(lpObj,AT_MSKILL_MG_FIRESLASH2,lpTargetObj->m_Index,skillSuccess);

  00094	6a 01		 push	 1
  00096	ff 36		 push	 DWORD PTR [esi]
  00098	68 ed 01 00 00	 push	 493			; 000001edH
  0009d	57		 push	 edi
  0009e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000a3	83 c4 2c	 add	 esp, 44			; 0000002cH
  000a6	5b		 pop	 ebx
$LN3@MLS_MaGumS:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi

; 4226 : 	}
; 4227 : }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 0c 00	 ret	 12			; 0000000cH
?MLS_MaGumSkillDefenseDownMastery@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDownMastery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_fSkillValue$1 = 8					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBless, COMDAT
; _this$ = ecx

; 6553 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 6554 : 	int skillSuccess = true;
; 6555 : 
; 6556 : 	LPOBJ lpObj = &gObj[aIndex];

  00005	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _aIndex$[ebp], 10048
  0000c	56		 push	 esi

; 6557 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000d	69 75 0c 40 27
	00 00		 imul	 esi, DWORD PTR _aTargetIndex$[ebp], 10048
  00014	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00017	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6558 : 
; 6559 : 	if( lpObj->Type != OBJ_USER )

  00023	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00027	74 0d		 je	 SHORT $LN2@MLS_SkillB

; 6560 : 	{
; 6561 : 		return true;

  00029	5e		 pop	 esi
  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	5b		 pop	 ebx

; 6592 : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_SkillB:

; 6562 : 	}
; 6563 : 
; 6564 : 	int iAddStats = lpObj->Energy/100;

  00036	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  0003d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00042	f7 e9		 imul	 ecx
  00044	57		 push	 edi
  00045	c1 fa 05	 sar	 edx, 5
  00048	8b fa		 mov	 edi, edx
  0004a	c1 ef 1f	 shr	 edi, 31			; 0000001fH

; 6565 : 
; 6566 : 	if( gObjCheckPowerfulEffect(lpTargetObj,BUFF_BLESS,iAddStats,0) )

  0004d	6a 00		 push	 0
  0004f	03 fa		 add	 edi, edx
  00051	57		 push	 edi
  00052	68 8e 00 00 00	 push	 142			; 0000008eH
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	84 c0		 test	 al, al

; 6567 : 	{
; 6568 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,0);

  00062	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00065	74 1d		 je	 SHORT $LN3@MLS_SkillB
  00067	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0006b	6a 00		 push	 0
  0006d	ff 36		 push	 DWORD PTR [esi]
  0006f	50		 push	 eax
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00076	83 c4 10	 add	 esp, 16			; 00000010H

; 6569 : 		return false;

  00079	33 c0		 xor	 eax, eax
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 6592 : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
$LN3@MLS_SkillB:

; 6570 : 	}
; 6571 : 
; 6572 : 	if( lpMagic->m_Skill == AT_MSKILL_FE_BLESS1 )

  00084	81 78 08 b1 01
	00 00		 cmp	 DWORD PTR [eax+8], 433	; 000001b1H
  0008b	75 50		 jne	 SHORT $LN4@MLS_SkillB

; 6573 : 	{
; 6574 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0008d	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00096	50		 push	 eax
  00097	68 b1 01 00 00	 push	 433			; 000001b1H
  0009c	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000aa	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 6575 : 
; 6576 : 		if( fSkillValue > 0.0f )

  000ad	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fSkillValue$1[ebp]
  000b2	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  000b9	76 0f		 jbe	 SHORT $LN6@MLS_SkillB

; 6577 : 		{
; 6578 : 			iAddStats += fSkillValue;

  000bb	66 0f 6e c7	 movd	 xmm0, edi
  000bf	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c6	f3 0f 2c f8	 cvttss2si edi, xmm0
$LN6@MLS_SkillB:

; 6579 : 		}
; 6580 : 
; 6581 : 		gObjAddBuffEffect(lpTargetObj,BUFF_BLESS2,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);

  000ca	68 2c 01 00 00	 push	 300			; 0000012cH
  000cf	6a 00		 push	 0
  000d1	6a 00		 push	 0
  000d3	57		 push	 edi
  000d4	6a 67		 push	 103			; 00000067H
  000d6	68 a1 00 00 00	 push	 161			; 000000a1H

; 6582 : 	}
; 6583 : 	else

  000db	eb 11		 jmp	 SHORT $LN9@MLS_SkillB
$LN4@MLS_SkillB:

; 6584 : 	{
; 6585 : 		gObjAddBuffEffect(lpTargetObj,BUFF_BLESS,ADD_OPTION_ALLSTATS,iAddStats,0,0,300);

  000dd	68 2c 01 00 00	 push	 300			; 0000012cH
  000e2	6a 00		 push	 0
  000e4	6a 00		 push	 0
  000e6	57		 push	 edi
  000e7	6a 67		 push	 103			; 00000067H
  000e9	68 8e 00 00 00	 push	 142			; 0000008eH
$LN9@MLS_SkillB:
  000ee	56		 push	 esi
  000ef	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6586 : 	}
; 6587 : 
; 6588 : 	
; 6589 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  000f4	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000f7	83 c4 1c	 add	 esp, 28			; 0000001cH
  000fa	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000fe	6a 01		 push	 1
  00100	ff 36		 push	 DWORD PTR [esi]
  00102	50		 push	 eax
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6590 : 	gObjCalCharacter(lpTargetObj->m_Index);

  00109	ff 36		 push	 DWORD PTR [esi]
  0010b	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00110	83 c4 14	 add	 esp, 20			; 00000014H

; 6591 : 	return true;

  00113	b8 01 00 00 00	 mov	 eax, 1
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx

; 6592 : }

  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBless
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z
_TEXT	SEGMENT
_tObjNum$1$ = -308					; size = 4
_this$1$ = -304						; size = 4
_aIndex$GSCopy$1$ = -300				; size = 4
_lpMagic$GSCopy$1$ = -296				; size = 4
tv874 = -292						; size = 4
_lpObj$1$ = -288					; size = 4
tv878 = -284						; size = 4
_DuelIndex$1$ = -284					; size = 4
tv875 = -280						; size = 4
_fSkillValue$1 = -280					; size = 4
tv891 = -276						; size = 4
_vFrustrum2$ = -272					; size = 60
_fSkillFrustrumY$ = -212				; size = 20
_fSkillFrustrumX$ = -192				; size = 20
_vFrustrum$ = -172					; size = 60
_Matrix$ = -112						; size = 48
_p$ = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_targetpos$ = 16					; size = 1
_aTargetIndex$ = 20					; size = 4
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot, COMDAT
; _this$ = ecx

; 6359 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00016	8b d1		 mov	 edx, ecx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0001b	53		 push	 ebx

; 6360 : 	LPOBJ lpObj = &gObj[aIndex];
; 6361 : 
; 6362 : 	this->MLS_SkillFrustrum3(aIndex,targetpos,6.0f,7.0f,1.0f,0);

  0001c	8b 5d 10	 mov	 ebx, DWORD PTR _targetpos$[ebp]
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	83 ec 10	 sub	 esp, 16			; 00000010H
  00024	69 f9 40 27 00
	00		 imul	 edi, ecx, 10048
  0002a	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], ecx
  00030	89 95 d0 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], edx
  00036	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax
  0003c	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00044	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004a	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  00052	c7 44 24 04 00
	00 e0 40	 mov	 DWORD PTR [esp+4], 1088421888 ; 40e00000H
  0005a	c7 04 24 00 00
	c0 40		 mov	 DWORD PTR [esp], 1086324736 ; 40c00000H
  00061	53		 push	 ebx
  00062	51		 push	 ecx
  00063	8b ca		 mov	 ecx, edx
  00065	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0006b	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum3@CMasterLevelSkillTreeSystem@@QAEXHEMMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum3
  00070	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000422000000000000000000000

; 6363 : 
; 6364 : 	float p[5][3];
; 6365 : 	float Matrix[3][MAX_ARRAY_FRUSTRUM];
; 6366 : 	float vFrustrum[5][3];
; 6367 : 
; 6368 : 	p[4][0] = 0;
; 6369 : 	p[4][1] = 6.0f;
; 6370 : 	p[4][2] = 0;
; 6371 : 
; 6372 : 	p[0][0] = 0;
; 6373 : 	p[0][1] = 0;
; 6374 : 	p[0][2] = 40.0f;
; 6375 : 
; 6376 : 	p[1][0] = 0;
; 6377 : 	p[1][1] = 0;
; 6378 : 	p[1][2] = 20.0f;
; 6379 : 
; 6380 : 	p[2][0] = 0;
; 6381 : 	p[2][1] = 0;
; 6382 : 	p[2][2] = 340.0f;
; 6383 : 
; 6384 : 	p[3][0] = 0;
; 6385 : 	p[3][1] = 0;
; 6386 : 	p[3][2] = 320.0f;
; 6387 : 
; 6388 : 	AngleMatrix((const float *)&p[0],Matrix);

  00077	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0007a	0f 11 45 c0	 movups	 XMMWORD PTR _p$[ebp], xmm0
  0007e	50		 push	 eax
  0007f	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000000000000041a0000000000000
  00086	8d 45 c0	 lea	 eax, DWORD PTR _p$[ebp]
  00089	0f 11 45 d0	 movups	 XMMWORD PTR _p$[ebp+16], xmm0
  0008d	50		 push	 eax
  0008e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@43a00000000000000000000043aa0000
  00095	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+48], 0
  0009c	c7 45 f4 00 00
	c0 40		 mov	 DWORD PTR _p$[ebp+52], 1086324736 ; 40c00000H
  000a3	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+56], 0
  000aa	0f 11 45 e0	 movups	 XMMWORD PTR _p$[ebp+32], xmm0
  000ae	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix

; 6389 : 	VectorRotate((const float *)&p[4],(const float *)&Matrix[0],(float *)&vFrustrum[0]);

  000b3	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp]
  000b9	50		 push	 eax
  000ba	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000bd	50		 push	 eax
  000be	8d 45 f0	 lea	 eax, DWORD PTR _p$[ebp+48]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6390 : 
; 6391 : 	AngleMatrix((const float *)&p[1],Matrix);

  000c7	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000ca	50		 push	 eax
  000cb	8d 45 cc	 lea	 eax, DWORD PTR _p$[ebp+12]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix

; 6392 : 	VectorRotate((const float *)&p[4],(const float *)&Matrix[0],(float *)&vFrustrum[1]);

  000d4	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+12]
  000da	50		 push	 eax
  000db	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000de	50		 push	 eax
  000df	8d 45 f0	 lea	 eax, DWORD PTR _p$[ebp+48]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6393 : 
; 6394 : 	vFrustrum[2][0] = 0;
; 6395 : 	vFrustrum[2][1] = 6.0f;
; 6396 : 	vFrustrum[2][2] = 0;
; 6397 : 
; 6398 : 	AngleMatrix((const float *)&p[2],Matrix);

  000e8	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000eb	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vFrustrum$[ebp+24], 0
  000f5	50		 push	 eax
  000f6	8d 45 d8	 lea	 eax, DWORD PTR _p$[ebp+24]
  000f9	c7 85 70 ff ff
	ff 00 00 c0 40	 mov	 DWORD PTR _vFrustrum$[ebp+28], 1086324736 ; 40c00000H
  00103	50		 push	 eax
  00104	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vFrustrum$[ebp+32], 0
  0010e	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix

; 6399 : 	VectorRotate((const float *)&p[4],(const float *)&Matrix[0],(float *)&vFrustrum[3]);

  00113	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp+36]
  00119	50		 push	 eax
  0011a	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0011d	50		 push	 eax
  0011e	8d 45 f0	 lea	 eax, DWORD PTR _p$[ebp+48]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6400 : 
; 6401 : 	AngleMatrix((const float *)&p[3],Matrix);

  00127	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0012a	50		 push	 eax
  0012b	8d 45 e4	 lea	 eax, DWORD PTR _p$[ebp+36]
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix
  00134	83 c4 44	 add	 esp, 68			; 00000044H

; 6402 : 	VectorRotate((const float *)&p[4],(const float *)&Matrix[0],(float *)&vFrustrum[4]);

  00137	8d 45 84	 lea	 eax, DWORD PTR _vFrustrum$[ebp+48]
  0013a	50		 push	 eax
  0013b	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  0013e	50		 push	 eax
  0013f	8d 45 f0	 lea	 eax, DWORD PTR _p$[ebp+48]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6403 : 
; 6404 : 	p[0][0] = 0;
; 6405 : 	p[0][1] = 0;
; 6406 : 	p[0][2] = targetpos*360/255;

  00148	0f b6 c3	 movzx	 eax, bl
  0014b	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  00151	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00156	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _p$[ebp], 0
  0015d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+4], 0
  00164	f7 e9		 imul	 ecx
  00166	03 d1		 add	 edx, ecx
  00168	c1 fa 07	 sar	 edx, 7
  0016b	8b c2		 mov	 eax, edx
  0016d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00170	03 c2		 add	 eax, edx
  00172	66 0f 6e c0	 movd	 xmm0, eax

; 6407 : 
; 6408 : 	AngleMatrix((const float *)&p[0],Matrix);

  00176	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  00179	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017c	50		 push	 eax
  0017d	8d 45 c0	 lea	 eax, DWORD PTR _p$[ebp]
  00180	50		 push	 eax
  00181	f3 0f 11 45 c8	 movss	 DWORD PTR _p$[ebp+8], xmm0
  00186	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix
  0018b	83 c4 14	 add	 esp, 20			; 00000014H

; 6409 : 
; 6410 : 	int fSkillFrustrumX[5];
; 6411 : 	int fSkillFrustrumY[5];
; 6412 : 
; 6413 : 	float vFrustrum2[5][3];
; 6414 : 
; 6415 : 	for(int i = 0; i < 5; i++)

  0018e	33 db		 xor	 ebx, ebx
  00190	89 9d e4 fe ff
	ff		 mov	 DWORD PTR tv878[ebp], ebx
  00196	eb 0a		 jmp	 SHORT $LN4@MLS_SkillM
  00198	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL49@MLS_SkillM:
  001a0	8b fe		 mov	 edi, esi
$LN4@MLS_SkillM:

; 6416 : 	{
; 6417 : 		VectorRotate(vFrustrum[i],(const float *)&Matrix[0],vFrustrum2[i]);

  001a2	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR _vFrustrum2$[ebp]
  001a8	03 f3		 add	 esi, ebx
  001aa	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  001ad	56		 push	 esi
  001ae	50		 push	 eax
  001af	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _vFrustrum$[ebp]
  001b5	03 c3		 add	 eax, ebx
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 6418 : 
; 6419 : 		fSkillFrustrumX[i] = int(vFrustrum2[i][0]) + lpObj->X;

  001bd	f3 0f 2c 06	 cvttss2si eax, DWORD PTR [esi]
  001c1	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR tv878[ebp]
  001c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ca	0f b6 8f 20 01
	00 00		 movzx	 ecx, BYTE PTR [edi+288]

; 6420 : 		fSkillFrustrumY[i] = int(vFrustrum2[i][1]) + lpObj->Y;

  001d1	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _lpObj$1$[ebp]
  001d7	03 c8		 add	 ecx, eax
  001d9	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  001e0	89 8c 15 40 ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumX$[ebp+edx], ecx
  001e7	f3 0f 2c 8c 1d
	f4 fe ff ff	 cvttss2si ecx, DWORD PTR _vFrustrum2$[ebp+ebx+4]
  001f0	83 c3 0c	 add	 ebx, 12			; 0000000cH
  001f3	03 c8		 add	 ecx, eax
  001f5	89 8c 15 2c ff
	ff ff		 mov	 DWORD PTR _fSkillFrustrumY$[ebp+edx], ecx
  001fc	83 c2 04	 add	 edx, 4
  001ff	89 95 e4 fe ff
	ff		 mov	 DWORD PTR tv878[ebp], edx
  00205	83 fb 3c	 cmp	 ebx, 60			; 0000003cH
  00208	7c 96		 jl	 SHORT $LL49@MLS_SkillM

; 6421 : 	}
; 6422 : 
; 6423 : 	int tObjNum;
; 6424 : 	int count = 0;
; 6425 : 	int tmpvar = 0;
; 6426 : 	int DuelIndex = lpObj->m_iDuelUser;

  0020a	8b 96 50 12 00
	00		 mov	 edx, DWORD PTR [esi+4688]
  00210	8d 8e 4c 0c 00
	00		 lea	 ecx, DWORD PTR [esi+3148]
  00216	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0021c	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  00221	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _DuelIndex$1$[ebp], edx
  00227	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv874[ebp], ecx
  0022d	c7 85 ec fe ff
	ff 4b 00 00 00	 mov	 DWORD PTR tv891[ebp], 75 ; 0000004bH
  00237	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@MLS_SkillM:

; 6427 : 	int EnableAttack;
; 6428 : 
; 6429 : 	while ( true )
; 6430 : 	{
; 6431 : 		if(lpObj->VpPlayer2[count].state != 0)

  00240	80 79 fc 00	 cmp	 BYTE PTR [ecx-4], 0
  00244	0f 84 65 02 00
	00		 je	 $LN8@MLS_SkillM

; 6432 : 		{
; 6433 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0024a	0f bf 41 fe	 movsx	 eax, WORD PTR [ecx-2]
  0024e	89 85 cc fe ff
	ff		 mov	 DWORD PTR _tObjNum$1$[ebp], eax

; 6434 : 
; 6435 : 			if(tObjNum >= 0 && gObj[tObjNum].Live)

  00254	85 c0		 test	 eax, eax
  00256	0f 88 4d 02 00
	00		 js	 $LN53@MLS_SkillM
  0025c	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  00262	80 7c 3b 51 00	 cmp	 BYTE PTR [ebx+edi+81], 0
  00267	0f 84 3c 02 00
	00		 je	 $LN53@MLS_SkillM

; 6436 : 			{
; 6437 : 				EnableAttack = 0;
; 6438 : 
; 6439 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0026d	8a 09		 mov	 cl, BYTE PTR [ecx]
  0026f	80 f9 02	 cmp	 cl, 2
  00272	75 0e		 jne	 SHORT $LN12@MLS_SkillM
  00274	83 bc 3b 30 06
	00 00 00	 cmp	 DWORD PTR [ebx+edi+1584], 0
  0027c	0f 8c 81 00 00
	00		 jl	 $LN16@MLS_SkillM
$LN12@MLS_SkillM:

; 6440 : 				{
; 6441 : 					EnableAttack = 1;
; 6442 : 				}
; 6443 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00282	3b 45 14	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  00285	74 7c		 je	 SHORT $LN16@MLS_SkillM
  00287	3b d0		 cmp	 edx, eax
  00289	74 78		 je	 SHORT $LN16@MLS_SkillM

; 6444 : 				{
; 6445 : 					EnableAttack = 1;
; 6446 : 				}
; 6447 : #if (GS_CASTLE == 1)
; 6448 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0028b	80 f9 03	 cmp	 cl, 3
  0028e	74 34		 je	 SHORT $LN17@MLS_SkillM
  00290	80 bc 3b 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+edi+291], 30 ; 0000001eH
  00298	75 2a		 jne	 SHORT $LN17@MLS_SkillM
  0029a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0029f	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6449 : 				{
; 6450 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  002a4	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002aa	83 f8 07	 cmp	 eax, 7
  002ad	75 15		 jne	 SHORT $LN17@MLS_SkillM
  002af	8a 86 5a 20 00
	00		 mov	 al, BYTE PTR [esi+8282]
  002b5	3a 84 3b 5a 20
	00 00		 cmp	 al, BYTE PTR [ebx+edi+8282]
  002bc	0f 84 db 01 00
	00		 je	 $LN51@MLS_SkillM

; 6451 : 						EnableAttack = 1;
; 6452 : 				}
; 6453 : #endif
; 6454 : 				else

  002c2	eb 3f		 jmp	 SHORT $LN16@MLS_SkillM
$LN17@MLS_SkillM:

; 6455 : 				{
; 6456 : 					int CallMonIndex = gObj[tObjNum].m_Index;
; 6457 : 
; 6458 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  002c4	80 7c 3b 50 02	 cmp	 BYTE PTR [ebx+edi+80], 2
  002c9	8b 0c 3b	 mov	 ecx, DWORD PTR [ebx+edi]
  002cc	75 14		 jne	 SHORT $LN20@MLS_SkillM
  002ce	8b 84 3b 30 06
	00 00		 mov	 eax, DWORD PTR [ebx+edi+1584]
  002d5	85 c0		 test	 eax, eax
  002d7	78 09		 js	 SHORT $LN20@MLS_SkillM

; 6459 : 					{
; 6460 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  002d9	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  002df	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
$LN20@MLS_SkillM:

; 6461 : 					}
; 6462 : 
; 6463 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  002e2	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  002e8	03 c7		 add	 eax, edi
  002ea	50		 push	 eax
  002eb	56		 push	 esi
  002ec	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  002f1	83 c4 08	 add	 esp, 8
  002f4	83 f8 01	 cmp	 eax, 1
  002f7	0f 85 9a 01 00
	00		 jne	 $LN48@MLS_SkillM
  002fd	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN16@MLS_SkillM:

; 6464 : 					{
; 6465 : 						EnableAttack = 1;
; 6466 : 					}
; 6467 : 				}
; 6468 : 
; 6469 : 				if( EnableAttack != FALSE )
; 6470 : 				{
; 6471 : 					if( SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex) )

  00303	ff b5 d4 fe ff
	ff		 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  00309	0f b6 84 3b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+edi+289]
  00311	50		 push	 eax
  00312	0f b6 84 3b 20
	01 00 00	 movzx	 eax, BYTE PTR [ebx+edi+288]
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  00320	83 c4 0c	 add	 esp, 12			; 0000000cH
  00323	85 c0		 test	 eax, eax
  00325	0f 84 6c 01 00
	00		 je	 $LN48@MLS_SkillM

; 6472 : 					{
; 6473 : 
; 6474 : 						if( lpMagic->m_Skill == AT_MSKILL_FE_MULTISHOT2 )

  0032b	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00331	81 78 08 af 01
	00 00		 cmp	 DWORD PTR [eax+8], 431	; 000001afH
  00338	0f 85 93 00 00
	00		 jne	 $LN26@MLS_SkillM

; 6475 : 						{
; 6476 : 							float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0033e	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00342	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00347	50		 push	 eax
  00348	68 af 01 00 00	 push	 431			; 000001afH
  0034d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00352	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  00358	50		 push	 eax
  00359	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0035e	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR _fSkillValue$1[ebp]

; 6477 : 
; 6478 : 							if( fSkillValue > 0.0f )

  00364	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _fSkillValue$1[ebp]
  0036c	0f 57 c9	 xorps	 xmm1, xmm1
  0036f	0f 2f c1	 comiss	 xmm0, xmm1
  00372	76 5d		 jbe	 SHORT $LN26@MLS_SkillM

; 6479 : 							{
; 6480 : 								float fpercent = rand()%100;

  00374	e8 00 00 00 00	 call	 _rand
  00379	99		 cdq
  0037a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0037f	f7 f9		 idiv	 ecx

; 6481 : 
; 6482 : 								if( fpercent < fSkillValue )

  00381	f3 0f 10 8d e8
	fe ff ff	 movss	 xmm1, DWORD PTR _fSkillValue$1[ebp]
  00389	66 0f 6e c2	 movd	 xmm0, edx
  0038d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00390	0f 2f c8	 comiss	 xmm1, xmm0
  00393	76 3c		 jbe	 SHORT $LN26@MLS_SkillM

; 6483 : 								{
; 6484 : 									gObjAddBuffEffect(&gObj[tObjNum],BUFF_STUN,0,0,0,0,2);

  00395	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0039a	6a 02		 push	 2
  0039c	6a 00		 push	 0
  0039e	6a 00		 push	 0
  003a0	6a 00		 push	 0
  003a2	6a 00		 push	 0
  003a4	03 c3		 add	 eax, ebx
  003a6	6a 3d		 push	 61			; 0000003dH
  003a8	50		 push	 eax
  003a9	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 6485 : 									gObjSetPosition(gObj[tObjNum].m_Index,gObj[tObjNum].X,gObj[tObjNum].Y);

  003ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003b4	0f b6 84 0b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+289]
  003bc	50		 push	 eax
  003bd	0f b6 84 0b 20
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+288]
  003c5	50		 push	 eax
  003c6	ff 34 0b	 push	 DWORD PTR [ebx+ecx]
  003c9	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  003ce	83 c4 28	 add	 esp, 40			; 00000028H
$LN26@MLS_SkillM:

; 6486 : 								}
; 6487 : 							}
; 6488 : 						}
; 6489 : 
; 6490 : 						for(int i = 0; i < 5; i++)

  003d1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003d7	33 c0		 xor	 eax, eax
  003d9	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv875[ebp], eax
  003df	90		 npad	 1
$LL9@MLS_SkillM:

; 6491 : 						{
; 6492 : 							float Dis = (fSkillFrustrumY[i] - lpObj->Y)*(gObj[tObjNum].Y - lpObj->Y) - (fSkillFrustrumX[i] - lpObj->X)*(gObj[tObjNum].X - lpObj->X);

  003e0	0f b6 96 21 01
	00 00		 movzx	 edx, BYTE PTR [esi+289]
  003e7	0f b6 8e 20 01
	00 00		 movzx	 ecx, BYTE PTR [esi+288]
  003ee	8b 84 05 40 ff
	ff ff		 mov	 eax, DWORD PTR _fSkillFrustrumX$[ebp+eax]
  003f5	0f b6 b4 3b 20
	01 00 00	 movzx	 esi, BYTE PTR [ebx+edi+288]
  003fd	2b c1		 sub	 eax, ecx
  003ff	2b f1		 sub	 esi, ecx
  00401	0f b6 8c 3b 21
	01 00 00	 movzx	 ecx, BYTE PTR [ebx+edi+289]
  00409	0f af f0	 imul	 esi, eax
  0040c	2b ca		 sub	 ecx, edx
  0040e	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv875[ebp]
  00414	8b 84 05 2c ff
	ff ff		 mov	 eax, DWORD PTR _fSkillFrustrumY$[ebp+eax]
  0041b	2b c2		 sub	 eax, edx
  0041d	0f af c8	 imul	 ecx, eax
  00420	2b ce		 sub	 ecx, esi
  00422	66 0f 6e c1	 movd	 xmm0, ecx
  00426	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 6493 : 						
; 6494 : 							if( (Dis >= -5 && Dis <= 5) || tObjNum == aTargetIndex )

  00429	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@c0a00000
  00430	72 0d		 jb	 SHORT $LN29@MLS_SkillM
  00432	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40a00000
  0043a	0f 2f c8	 comiss	 xmm1, xmm0
  0043d	73 0b		 jae	 SHORT $LN28@MLS_SkillM
$LN29@MLS_SkillM:
  0043f	8b 45 14	 mov	 eax, DWORD PTR _aTargetIndex$[ebp]
  00442	39 85 cc fe ff
	ff		 cmp	 DWORD PTR _tObjNum$1$[ebp], eax
  00448	75 2d		 jne	 SHORT $LN50@MLS_SkillM
$LN28@MLS_SkillM:

; 6495 : 							{
; 6496 : 								gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  0044a	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _lpObj$1$[ebp]
  00450	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00453	6a 00		 push	 0
  00455	6a 00		 push	 0
  00457	6a 00		 push	 0
  00459	6a 00		 push	 0
  0045b	6a 00		 push	 0
  0045d	6a 01		 push	 1
  0045f	ff b5 d8 fe ff
	ff		 push	 DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00465	50		 push	 eax
  00466	56		 push	 esi
  00467	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0046c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00472	83 c4 24	 add	 esp, 36			; 00000024H
  00475	eb 06		 jmp	 SHORT $LN7@MLS_SkillM
$LN50@MLS_SkillM:
  00477	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _lpObj$1$[ebp]
$LN7@MLS_SkillM:
  0047d	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR tv875[ebp]
  00483	83 c0 04	 add	 eax, 4
  00486	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv875[ebp], eax

; 6486 : 								}
; 6487 : 							}
; 6488 : 						}
; 6489 : 
; 6490 : 						for(int i = 0; i < 5; i++)

  0048c	83 f8 14	 cmp	 eax, 20			; 00000014H
  0048f	0f 8c 4b ff ff
	ff		 jl	 $LL9@MLS_SkillM
  00495	eb 06		 jmp	 SHORT $LN51@MLS_SkillM
$LN48@MLS_SkillM:
  00497	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN51@MLS_SkillM:
  0049d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR tv874[ebp]
  004a3	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _DuelIndex$1$[ebp]
$LN53@MLS_SkillM:
  004a9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv891[ebp]
$LN8@MLS_SkillM:

; 6497 : 							}
; 6498 : 						}
; 6499 : 					}
; 6500 : 				}
; 6501 : 			}
; 6502 : 		}
; 6503 : 
; 6504 : 		count++;

  004af	83 c1 0c	 add	 ecx, 12			; 0000000cH

; 6505 : 
; 6506 : 		if( count > (MAX_VIEWPORT-1) )

  004b2	83 e8 01	 sub	 eax, 1
  004b5	89 8d dc fe ff
	ff		 mov	 DWORD PTR tv874[ebp], ecx
  004bb	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv891[ebp], eax
  004c1	0f 85 79 fd ff
	ff		 jne	 $LL5@MLS_SkillM

; 6507 : 		{
; 6508 : 			break;
; 6509 : 		}
; 6510 : 	}
; 6511 : }

  004c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	33 cd		 xor	 ecx, ebp
  004ce	5b		 pop	 ebx
  004cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d4	8b e5		 mov	 esp, ebp
  004d6	5d		 pop	 ebp
  004d7	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillCure, COMDAT
; _this$ = ecx

; 6342 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 6343 : 	int skillSuccess = true;
; 6344 : 
; 6345 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  0000b	57		 push	 edi

; 6346 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000c	69 7d 0c 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00013	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6347 : 
; 6348 : 	if( lpObj->Type != OBJ_USER )

  0001f	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00023	75 1d		 jne	 SHORT $LN4@MLS_SkillC

; 6349 : 	{
; 6350 : 		return true;
; 6351 : 	}
; 6352 : 	
; 6353 : 	gObjClearBuffEffect(lpObj,CLEAR_TYPE_MONSTERREGEN);

  00025	6a 03		 push	 3
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect

; 6354 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0002d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00030	6a 01		 push	 1
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00038	50		 push	 eax
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0003f	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@MLS_SkillC:

; 6355 : 	return true;

  00042	5f		 pop	 edi
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5e		 pop	 esi

; 6356 : }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillCure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -20					; size = 4
_HitCount$1$ = -16					; size = 4
_bAttack$1$ = -12					; size = 4
tv502 = -8						; size = 4
tv494 = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison, COMDAT
; _this$ = ecx

; 6241 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 6242 : 	LPOBJ lpObj = &gObj[aIndex];
; 6243 : 	int tmpvar = 0;
; 6244 : 	int bAttack = 0;

  00007	33 c0		 xor	 eax, eax
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00012	89 45 f4	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 6245 : 	int tObjNum;
; 6246 : 	int count = 0;
; 6247 : 	int HitCount = 0;

  00015	89 45 f0	 mov	 DWORD PTR _HitCount$1$[ebp], eax

; 6248 : 
; 6249 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00018	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0001b	6a 01		 push	 1
  0001d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00020	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0002a	50		 push	 eax
  0002b	57		 push	 edi
  0002c	89 7d 08	 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0002f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 6250 : 
; 6251 : 	int EnableAttack;
; 6252 : 	int bForceAttack = TRUE;
; 6253 : 	int DuelIndex = lpObj->m_iDuelUser;

  00034	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00043	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00048	89 45 ec	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0004b	8d 87 4c 0c 00
	00		 lea	 eax, DWORD PTR [edi+3148]
  00051	89 45 fc	 mov	 DWORD PTR tv494[ebp], eax
  00054	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv502[ebp], 75 ; 0000004bH
  0005b	0f 1f 44 00 00	 npad	 5
$LL2@MLS_SkillE:

; 6254 : 
; 6255 : 	while ( true )
; 6256 : 	{
; 6257 : 		if(lpObj->VpPlayer2[count].state != 0)

  00060	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00064	0f 84 b4 00 00
	00		 je	 $LN26@MLS_SkillE

; 6258 : 		{
; 6259 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0006a	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 6260 : 
; 6261 : 			if(tObjNum >= 0)

  0006e	85 f6		 test	 esi, esi
  00070	0f 88 a8 00 00
	00		 js	 $LN26@MLS_SkillE

; 6262 : 			{
; 6263 : 				EnableAttack = 0;
; 6264 : 
; 6265 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00076	8a 18		 mov	 bl, BYTE PTR [eax]
  00078	80 fb 02	 cmp	 bl, 2
  0007b	75 14		 jne	 SHORT $LN6@MLS_SkillE
  0007d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00083	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0008b	0f 8c f0 00 00
	00		 jl	 $LN51@MLS_SkillE
$LN6@MLS_SkillE:

; 6266 : 				{
; 6267 : 					EnableAttack = 1;
; 6268 : 				}
; 6269 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) )

  00091	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  00097	80 fa 35	 cmp	 dl, 53			; 00000035H
  0009a	0f 84 e1 00 00
	00		 je	 $LN51@MLS_SkillE
  000a0	80 fa 12	 cmp	 dl, 18			; 00000012H
  000a3	72 0f		 jb	 SHORT $LN42@MLS_SkillE
  000a5	b0 17		 mov	 al, 23			; 00000017H
  000a7	3a c2		 cmp	 al, dl
  000a9	1b c0		 sbb	 eax, eax
  000ab	83 c0 01	 add	 eax, 1
  000ae	0f 85 cd 00 00
	00		 jne	 $LN51@MLS_SkillE
$LN42@MLS_SkillE:
  000b4	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  000b7	72 0f		 jb	 SHORT $LN43@MLS_SkillE
  000b9	b0 32		 mov	 al, 50			; 00000032H
  000bb	3a c2		 cmp	 al, dl
  000bd	1b c0		 sbb	 eax, eax
  000bf	83 c0 01	 add	 eax, 1
  000c2	0f 85 b9 00 00
	00		 jne	 $LN51@MLS_SkillE
$LN43@MLS_SkillE:

; 6270 : 				{
; 6271 : 					EnableAttack = 1;
; 6272 : 				}
; 6273 : 				else if( (tObjNum == aTargetIndex && bForceAttack == TRUE ) || DuelIndex == tObjNum)

  000c8	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000cb	0f 84 b0 00 00
	00		 je	 $LN51@MLS_SkillE
  000d1	39 75 ec	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000d4	0f 84 a7 00 00
	00		 je	 $LN51@MLS_SkillE

; 6274 : 				{
; 6275 : 					EnableAttack = 1;
; 6276 : 				}
; 6277 : #if (GS_CASTLE == 1)
; 6278 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000da	80 fb 03	 cmp	 bl, 3
  000dd	74 5d		 je	 SHORT $LN15@MLS_SkillE
  000df	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000e5	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000ed	75 4a		 jne	 SHORT $LN55@MLS_SkillE
  000ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f4	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6279 : 				{
; 6280 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ff	83 f8 07	 cmp	 eax, 7
  00102	75 35		 jne	 SHORT $LN55@MLS_SkillE
  00104	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
  00107	8a 82 5a 20 00
	00		 mov	 al, BYTE PTR [edx+8282]
  0010d	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  00114	75 6e		 jne	 SHORT $LN10@MLS_SkillE
  00116	8b fa		 mov	 edi, edx
$LN58@MLS_SkillE:
  00118	8b 55 f8	 mov	 edx, DWORD PTR tv502[ebp]
  0011b	8b 45 fc	 mov	 eax, DWORD PTR tv494[ebp]
$LN26@MLS_SkillE:

; 6326 : //							gObjAddBuffEffect(&gObj[tObjNum],BUFF_STUN,0,0,0,0,5); //fix
; 6327 : 						}
; 6328 : 					}
; 6329 : 				}
; 6330 : 			}
; 6331 : 		}
; 6332 : 
; 6333 : 		count++;

  0011e	83 c0 0c	 add	 eax, 12			; 0000000cH

; 6334 : 		if(count > MAX_VIEWPORT -1)

  00121	83 ea 01	 sub	 edx, 1
  00124	89 45 fc	 mov	 DWORD PTR tv494[ebp], eax
  00127	89 55 f8	 mov	 DWORD PTR tv502[ebp], edx
  0012a	0f 85 30 ff ff
	ff		 jne	 $LL2@MLS_SkillE
  00130	5f		 pop	 edi
  00131	5e		 pop	 esi
  00132	5b		 pop	 ebx

; 6335 : 		{
; 6336 : 			break;
; 6337 : 		}
; 6338 : 	}
; 6339 : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 0c 00	 ret	 12			; 0000000cH
$LN55@MLS_SkillE:
  00139	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN15@MLS_SkillE:

; 6281 : 						EnableAttack = 1;
; 6282 : 				}
; 6283 : #endif
; 6284 : 				else
; 6285 : 				{
; 6286 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0013c	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6287 : 
; 6288 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00142	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00147	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  0014a	75 14		 jne	 SHORT $LN18@MLS_SkillE
  0014c	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  00153	85 c0		 test	 eax, eax
  00155	78 09		 js	 SHORT $LN18@MLS_SkillE

; 6289 : 					{
; 6290 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00157	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0015d	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN18@MLS_SkillE:

; 6291 : 					}
; 6292 : 
; 6293 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00160	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00166	03 c1		 add	 eax, ecx
  00168	50		 push	 eax
  00169	57		 push	 edi
  0016a	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0016f	83 c4 08	 add	 esp, 8
  00172	83 f8 01	 cmp	 eax, 1
  00175	0f 85 b3 00 00
	00		 jne	 $LN45@MLS_SkillE
  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN51@MLS_SkillE:
  00181	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
$LN10@MLS_SkillE:

; 6294 : 					{
; 6295 : 						EnableAttack = 1;
; 6296 : 					}
; 6297 : 				}
; 6298 : 
; 6299 : 				if(EnableAttack != 0)
; 6300 : 				{
; 6301 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 3)

  00184	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0018a	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0018d	50		 push	 eax
  0018e	52		 push	 edx
  0018f	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00194	83 c4 08	 add	 esp, 8
  00197	83 f8 03	 cmp	 eax, 3
  0019a	0f 8f 8b 00 00
	00		 jg	 $LN54@MLS_SkillE

; 6302 : 					{
; 6303 : 						HitCount++;

  001a0	8b 5d f0	 mov	 ebx, DWORD PTR _HitCount$1$[ebp]
  001a3	43		 inc	 ebx
  001a4	89 5d f0	 mov	 DWORD PTR _HitCount$1$[ebp], ebx

; 6304 : 
; 6305 : 						if(HitCount > 5)

  001a7	83 fb 05	 cmp	 ebx, 5
  001aa	7e 13		 jle	 SHORT $LN22@MLS_SkillE

; 6306 : 						{
; 6307 : 							if( rand()%2 )

  001ac	e8 00 00 00 00	 call	 _rand
  001b1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001b6	79 05		 jns	 SHORT $LN57@MLS_SkillE
  001b8	48		 dec	 eax
  001b9	83 c8 fe	 or	 eax, -2			; fffffffeH
  001bc	40		 inc	 eax
$LN57@MLS_SkillE:
  001bd	74 0a		 je	 SHORT $LN56@MLS_SkillE
$LN22@MLS_SkillE:

; 6308 : 							{
; 6309 : 								bAttack = TRUE;

  001bf	bb 01 00 00 00	 mov	 ebx, 1
  001c4	89 5d f4	 mov	 DWORD PTR _bAttack$1$[ebp], ebx

; 6310 : 							}
; 6311 : 						}
; 6312 : 						else

  001c7	eb 03		 jmp	 SHORT $LN23@MLS_SkillE
$LN56@MLS_SkillE:
  001c9	8b 5d f4	 mov	 ebx, DWORD PTR _bAttack$1$[ebp]
$LN23@MLS_SkillE:

; 6313 : 						{
; 6314 : 							bAttack = TRUE;
; 6315 : 						}
; 6316 : 
; 6317 : 						if(HitCount > 12)

  001cc	83 7d f0 0c	 cmp	 DWORD PTR _HitCount$1$[ebp], 12 ; 0000000cH
  001d0	7e 13		 jle	 SHORT $LN25@MLS_SkillE

; 6318 : 						{
; 6319 : 							bAttack = FALSE;
; 6320 : 						}
; 6321 : 
; 6322 : 						if(bAttack == TRUE)

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d8	33 c0		 xor	 eax, eax
  001da	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  001dd	89 45 f4	 mov	 DWORD PTR _bAttack$1$[ebp], eax
  001e0	e9 33 ff ff ff	 jmp	 $LN58@MLS_SkillE
$LN25@MLS_SkillE:
  001e5	83 fb 01	 cmp	 ebx, 1
  001e8	75 41		 jne	 SHORT $LN54@MLS_SkillE

; 6323 : 						{
; 6324 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,0,0,0,0,0);

  001ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ef	6a 00		 push	 0
  001f1	6a 00		 push	 0
  001f3	6a 00		 push	 0
  001f5	6a 00		 push	 0
  001f7	6a 00		 push	 0
  001f9	53		 push	 ebx
  001fa	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  001fd	03 c7		 add	 eax, edi
  001ff	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  00202	53		 push	 ebx
  00203	50		 push	 eax
  00204	57		 push	 edi
  00205	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 6325 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,800,lpMagic->m_Skill,0);

  0020a	6a 00		 push	 0
  0020c	ff 73 08	 push	 DWORD PTR [ebx+8]
  0020f	68 20 03 00 00	 push	 800			; 00000320H
  00214	56		 push	 esi
  00215	6a 32		 push	 50			; 00000032H
  00217	57		 push	 edi
  00218	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0021d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00223	83 c4 3c	 add	 esp, 60			; 0000003cH
  00226	e9 ed fe ff ff	 jmp	 $LN58@MLS_SkillE
$LN54@MLS_SkillE:
  0022b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN45@MLS_SkillE:
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00234	e9 df fe ff ff	 jmp	 $LN58@MLS_SkillE
?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start, COMDAT
; _this$ = ecx

; 6223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 6224 : 	LPOBJ lpObj = &gObj[aIndex];

  00005	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00008	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0000e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6225 : 
; 6226 : 	if(lpObj->SkillHellFire2State != 0)

  00014	80 be a8 14 00
	00 00		 cmp	 BYTE PTR [esi+5288], 0
  0001b	74 1e		 je	 SHORT $LN2@MLS_SkillH

; 6227 : 	{
; 6228 : 		LogAddTD("[%s][%s] SkillHellFire2 error on start",lpObj->AccountID,lpObj->Name);

  0001d	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00020	50		 push	 eax
  00021	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00024	50		 push	 eax
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FEMHONHI@?$FL?$CFs?$FN?$FL?$CFs?$FN?5SkillHellFire2?5error?5on@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6229 : 		return false;

  00033	33 c0		 xor	 eax, eax
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 6238 : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN2@MLS_SkillH:

; 6230 : 	}
; 6231 : 
; 6232 : 	lpObj->SkillHellFire2Time = GetTickCount();

  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 6233 : 	lpObj->SkillHellFire2State = 1;
; 6234 : 	lpObj->SkillHellFire2Count = 0;
; 6235 : 
; 6236 : 	GCMagicAttackNumberSend(lpObj,395,aIndex,1);

  00041	6a 01		 push	 1
  00043	57		 push	 edi
  00044	68 8b 01 00 00	 push	 395			; 0000018bH
  00049	56		 push	 esi
  0004a	89 86 ac 14 00
	00		 mov	 DWORD PTR [esi+5292], eax
  00050	66 c7 86 a8 14
	00 00 01 00	 mov	 WORD PTR [esi+5288], 1
  00059	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0005e	83 c4 10	 add	 esp, 16			; 00000010H

; 6237 : 	return true;

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 6238 : }

  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -8					; size = 4
tv448 = -4						; size = 4
tv443 = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2, COMDAT
; _this$ = ecx

; 6141 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 6142 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	57		 push	 edi
  0000a	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00010	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 6143 : 	int tObjNum;
; 6144 : 
; 6145 : 	if(lpObj->SkillHellFire2State == 0)

  00016	80 bf a8 14 00
	00 00		 cmp	 BYTE PTR [edi+5288], 0
  0001d	75 10		 jne	 SHORT $LN4@MLS_SkillH

; 6146 : 	{
; 6147 : 		return MLS_SkillHellFire2Start(aIndex,lpMagic);

  0001f	ff 75 10	 push	 DWORD PTR _lpMagic$[ebp]
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2Start@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2Start
  00028	5f		 pop	 edi

; 6217 : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_SkillH:
  0002f	53		 push	 ebx

; 6148 : 	}
; 6149 : 
; 6150 : 	lpObj->SkillHellFire2State = 0;
; 6151 : 	int count = 0;
; 6152 : 	lpObj->SkillHellFire2Time = 0;
; 6153 : 
; 6154 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 6155 : 	int DuelIndex = lpObj->m_iDuelUser;

  00030	8b 9f 50 12 00
	00		 mov	 ebx, DWORD PTR [edi+4688]
  00036	8d 87 4c 0c 00
	00		 lea	 eax, DWORD PTR [edi+3148]
  0003c	c6 87 a8 14 00
	00 00		 mov	 BYTE PTR [edi+5288], 0
  00043	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00048	c7 87 ac 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+5292], 0
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00058	56		 push	 esi
  00059	89 5d f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], ebx
  0005c	89 45 08	 mov	 DWORD PTR tv443[ebp], eax
  0005f	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv448[ebp], 75 ; 0000004bH
  00066	eb 0b		 jmp	 SHORT $LN2@MLS_SkillH
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL33@MLS_SkillH:
  00070	8b 5d f8	 mov	 ebx, DWORD PTR _DuelIndex$1$[ebp]
$LN2@MLS_SkillH:

; 6156 : 	int EnableAttack;
; 6157 : 
; 6158 : 	while ( true )
; 6159 : 	{
; 6160 : 		if(lpObj->VpPlayer2[count].state != 0)

  00073	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00077	0f 84 02 01 00
	00		 je	 $LN32@MLS_SkillH

; 6161 : 		{
; 6162 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007d	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 6163 : 
; 6164 : 			if(tObjNum >= 0)

  00081	85 f6		 test	 esi, esi
  00083	0f 88 f6 00 00
	00		 js	 $LN32@MLS_SkillH

; 6165 : 			{
; 6166 : 				EnableAttack = 0;
; 6167 : 
; 6168 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00089	8a 10		 mov	 dl, BYTE PTR [eax]
  0008b	80 fa 02	 cmp	 dl, 2
  0008e	75 14		 jne	 SHORT $LN7@MLS_SkillH
  00090	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00096	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0009e	0f 8c 91 00 00
	00		 jl	 $LN11@MLS_SkillH
$LN7@MLS_SkillH:

; 6169 : 				{
; 6170 : 					EnableAttack = 1;
; 6171 : 				}
; 6172 : 				else if(aTargetIndex == tObjNum || DuelIndex == tObjNum)

  000a4	39 75 0c	 cmp	 DWORD PTR _aTargetIndex$[ebp], esi
  000a7	0f 84 88 00 00
	00		 je	 $LN11@MLS_SkillH
  000ad	3b de		 cmp	 ebx, esi
  000af	0f 84 80 00 00
	00		 je	 $LN11@MLS_SkillH

; 6173 : 				{
; 6174 : 					EnableAttack = 1;
; 6175 : 				}
; 6176 : #if (GS_CASTLE == 1)
; 6177 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b5	80 fa 03	 cmp	 dl, 3
  000b8	74 3a		 je	 SHORT $LN12@MLS_SkillH
  000ba	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  000c0	80 bc 0b 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+ecx+291], 30 ; 0000001eH
  000c8	75 2a		 jne	 SHORT $LN12@MLS_SkillH
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000cf	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 6178 : 				{
; 6179 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000da	83 f8 07	 cmp	 eax, 7
  000dd	75 15		 jne	 SHORT $LN12@MLS_SkillH
  000df	8a 87 5a 20 00
	00		 mov	 al, BYTE PTR [edi+8282]
  000e5	3a 84 0b 5a 20
	00 00		 cmp	 al, BYTE PTR [ebx+ecx+8282]
  000ec	0f 84 87 00 00
	00		 je	 $LN30@MLS_SkillH

; 6180 : 						EnableAttack = 1;
; 6181 : 				}
; 6182 : #endif
; 6183 : 				else

  000f2	eb 41		 jmp	 SHORT $LN11@MLS_SkillH
$LN12@MLS_SkillH:

; 6184 : 				{
; 6185 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000f4	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 6186 : 
; 6187 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000fa	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  000ff	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00102	75 14		 jne	 SHORT $LN15@MLS_SkillH
  00104	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  0010b	85 c0		 test	 eax, eax
  0010d	78 09		 js	 SHORT $LN15@MLS_SkillH

; 6188 : 					{
; 6189 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0010f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00115	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN15@MLS_SkillH:

; 6190 : 					}
; 6191 : 
; 6192 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00118	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  0011e	03 c1		 add	 eax, ecx
  00120	50		 push	 eax
  00121	57		 push	 edi
  00122	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00127	83 c4 08	 add	 esp, 8
  0012a	83 f8 01	 cmp	 eax, 1
  0012d	75 44		 jne	 SHORT $LN29@MLS_SkillH
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN11@MLS_SkillH:

; 6193 : 					{
; 6194 : 						EnableAttack = 1;
; 6195 : 					}
; 6196 : 				}
; 6197 : 
; 6198 : 				if(EnableAttack != 0)
; 6199 : 				{
; 6200 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= 6)

  00135	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  0013b	03 c1		 add	 eax, ecx
  0013d	50		 push	 eax
  0013e	57		 push	 edi
  0013f	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00144	83 c4 08	 add	 esp, 8
  00147	83 f8 06	 cmp	 eax, 6
  0014a	7f 27		 jg	 SHORT $LN29@MLS_SkillH

; 6201 : 					{
; 6202 : 						gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,600,lpMagic->m_Skill,0);

  0014c	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  0014f	6a 00		 push	 0
  00151	ff 73 08	 push	 DWORD PTR [ebx+8]
  00154	68 58 02 00 00	 push	 600			; 00000258H
  00159	56		 push	 esi
  0015a	6a 32		 push	 50			; 00000032H
  0015c	57		 push	 edi
  0015d	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00162	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00168	83 c4 18	 add	 esp, 24			; 00000018H
  0016b	8b 45 08	 mov	 eax, DWORD PTR tv443[ebp]
  0016e	8b 55 fc	 mov	 edx, DWORD PTR tv448[ebp]
  00171	eb 0f		 jmp	 SHORT $LN18@MLS_SkillH
$LN29@MLS_SkillH:
  00173	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN30@MLS_SkillH:
  00179	8b 55 fc	 mov	 edx, DWORD PTR tv448[ebp]
  0017c	8b 45 08	 mov	 eax, DWORD PTR tv443[ebp]
$LN32@MLS_SkillH:
  0017f	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
$LN18@MLS_SkillH:

; 6203 : 					}
; 6204 : 				}
; 6205 : 			}
; 6206 : 		}
; 6207 : 
; 6208 : 		count++;

  00182	83 c0 0c	 add	 eax, 12			; 0000000cH

; 6209 : 		if(count > MAX_VIEWPORT -1)

  00185	83 ea 01	 sub	 edx, 1
  00188	89 45 08	 mov	 DWORD PTR tv443[ebp], eax
  0018b	89 55 fc	 mov	 DWORD PTR tv448[ebp], edx
  0018e	0f 85 dc fe ff
	ff		 jne	 $LL33@MLS_SkillH

; 6210 : 		{
; 6211 : 			break;
; 6212 : 		}
; 6213 : 	}
; 6214 : 
; 6215 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  00194	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00198	6a 01		 push	 1
  0019a	ff 37		 push	 DWORD PTR [edi]
  0019c	50		 push	 eax
  0019d	57		 push	 edi
  0019e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001a3	83 c4 10	 add	 esp, 16			; 00000010H

; 6216 : 	return true;

  001a6	b8 01 00 00 00	 mov	 eax, 1
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	5f		 pop	 edi

; 6217 : }

  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -8					; size = 4
_lpObj$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_count$1$ = 12						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife, COMDAT
; _this$ = ecx

; 4788 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 4789 : 	if( !OBJMAX_RANGE(aTargetIndex) )

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  0000a	85 db		 test	 ebx, ebx
  0000c	0f 88 3f 01 00
	00		 js	 $LN25@MLS_SkillD
  00012	33 c0		 xor	 eax, eax
  00014	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 2c 01 00
	00		 je	 $LN25@MLS_SkillD

; 4791 : 
; 4792 : 	LPOBJ lpObj = &gObj[aIndex];
; 4793 : 	int bRet = FALSE;
; 4794 : 	int tObjNum;
; 4795 : 
; 4796 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 4797 : 	int count = 0;
; 4798 : 
; 4799 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00025	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00028	56		 push	 esi
  00029	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  00030	57		 push	 edi
  00031	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00035	6a 01		 push	 1
  00037	53		 push	 ebx
  00038	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003e	50		 push	 eax
  0003f	56		 push	 esi
  00040	89 75 fc	 mov	 DWORD PTR _lpObj$1$[ebp], esi
  00043	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _count$1$[ebp], 0
  0004a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4800 : 
; 4801 : 	int DuelIndex = lpObj->m_iDuelUser;

  0004f	8b 96 50 12 00
	00		 mov	 edx, DWORD PTR [esi+4688]
  00055	8d be 4a 0c 00
	00		 lea	 edi, DWORD PTR [esi+3146]
  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	89 55 f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], edx
  00067	33 c0		 xor	 eax, eax
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@MLS_SkillD:

; 4802 : 	int EnableAttack;
; 4803 : 
; 4804 : 	while( TRUE )
; 4805 : 	{
; 4806 : 		if(lpObj->VpPlayer2[count].state != 0)

  00070	80 7f fe 00	 cmp	 BYTE PTR [edi-2], 0
  00074	0f 84 8f 00 00
	00		 je	 $LN14@MLS_SkillD

; 4807 : 		{
; 4808 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0007a	0f bf 37	 movsx	 esi, WORD PTR [edi]

; 4809 : 
; 4810 : 			if( tObjNum >= 0 )

  0007d	85 f6		 test	 esi, esi
  0007f	0f 88 84 00 00
	00		 js	 $LN14@MLS_SkillD

; 4811 : 			{
; 4812 : 				EnableAttack = 0;
; 4813 : 
; 4814 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00085	80 7f 02 02	 cmp	 BYTE PTR [edi+2], 2
  00089	75 10		 jne	 SHORT $LN7@MLS_SkillD
  0008b	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00091	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  00099	7c 4b		 jl	 SHORT $LN11@MLS_SkillD
$LN7@MLS_SkillD:

; 4815 : 				{
; 4816 : 					EnableAttack = 1;
; 4817 : 				}
; 4818 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0009b	3b f3		 cmp	 esi, ebx
  0009d	74 4b		 je	 SHORT $LN27@MLS_SkillD
  0009f	3b d6		 cmp	 edx, esi
  000a1	74 43		 je	 SHORT $LN11@MLS_SkillD

; 4819 : 				{
; 4820 : 					EnableAttack = 1;
; 4821 : 				}
; 4822 : 				else
; 4823 : 				{
; 4824 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000a3	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 4825 : 
; 4826 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000a9	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  000ae	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  000b1	75 14		 jne	 SHORT $LN12@MLS_SkillD
  000b3	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  000ba	85 c0		 test	 eax, eax
  000bc	78 09		 js	 SHORT $LN12@MLS_SkillD

; 4827 : 					{
; 4828 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000be	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000c4	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN12@MLS_SkillD:

; 4829 : 					}
; 4830 : 
; 4831 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000c7	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  000cd	03 c1		 add	 eax, ecx
  000cf	50		 push	 eax
  000d0	ff 75 fc	 push	 DWORD PTR _lpObj$1$[ebp]
  000d3	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000d8	83 c4 08	 add	 esp, 8
  000db	83 f8 01	 cmp	 eax, 1
  000de	75 20		 jne	 SHORT $LN28@MLS_SkillD
  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN11@MLS_SkillD:

; 4832 : 					{
; 4833 : 						EnableAttack = 1;
; 4834 : 					}
; 4835 : 				}
; 4836 : 
; 4837 : 				if( EnableAttack != 0 &&
; 4838 : 					tObjNum == aTargetIndex && 

  000e6	3b f3		 cmp	 esi, ebx
  000e8	75 1c		 jne	 SHORT $LN29@MLS_SkillD
$LN27@MLS_SkillD:
  000ea	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000ed	ff 70 08	 push	 DWORD PTR [eax+8]
  000f0	53		 push	 ebx
  000f1	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  000f4	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fc	85 c0		 test	 eax, eax
  000fe	75 1d		 jne	 SHORT $LN21@MLS_SkillD
$LN28@MLS_SkillD:
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN29@MLS_SkillD:
  00106	8b 45 0c	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN14@MLS_SkillD:

; 4843 : 					break;
; 4844 : 				}
; 4845 : 			}
; 4846 : 		}
; 4847 : 
; 4848 : 		count++;

  00109	40		 inc	 eax
  0010a	83 c7 0c	 add	 edi, 12			; 0000000cH
  0010d	89 45 0c	 mov	 DWORD PTR _count$1$[ebp], eax

; 4849 : 
; 4850 : 		if( count > MAX_VIEWPORT -1)

  00110	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00113	7f 31		 jg	 SHORT $LN30@MLS_SkillD

; 4851 : 		{
; 4852 : 			break;
; 4853 : 		}
; 4854 : 	}

  00115	8b 55 f8	 mov	 edx, DWORD PTR _DuelIndex$1$[ebp]
  00118	e9 53 ff ff ff	 jmp	 $LL2@MLS_SkillD
$LN21@MLS_SkillD:

; 4839 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )
; 4840 : 				{
; 4841 : 					gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,700,lpMagic->m_Skill,0);

  0011d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00120	6a 00		 push	 0
  00122	ff 70 08	 push	 DWORD PTR [eax+8]
  00125	68 bc 02 00 00	 push	 700			; 000002bcH
  0012a	56		 push	 esi
  0012b	6a 32		 push	 50			; 00000032H
  0012d	ff 75 fc	 push	 DWORD PTR _lpObj$1$[ebp]
  00130	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00135	83 c4 18	 add	 esp, 24			; 00000018H

; 4842 : 					bRet = TRUE;

  00138	b8 01 00 00 00	 mov	 eax, 1
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx

; 4855 : 
; 4856 : return bRet;
; 4857 : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 0c 00	 ret	 12			; 0000000cH
$LN30@MLS_SkillD:
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	33 c0		 xor	 eax, eax
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 0c 00	 ret	 12			; 0000000cH
$LN25@MLS_SkillD:

; 4790 : 		return false;

  00151	33 c0		 xor	 eax, eax
  00153	5b		 pop	 ebx

; 4855 : 
; 4856 : return bRet;
; 4857 : }

  00154	8b e5		 mov	 esp, ebp
  00156	5d		 pop	 ebp
  00157	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -16					; size = 4
_nHitCount$1$ = -12					; size = 4
_bAttack$1$ = -8					; size = 4
tv498 = -4						; size = 4
tv503 = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock, COMDAT
; _this$ = ecx

; 4684 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 4685 : 	LPOBJ lpObj = &gObj[aIndex];

  00007	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _aIndex$[ebp], 10048

; 4686 : 	int bRet = 0;
; 4687 : 	int bAttack = 0;

  0000e	33 c0		 xor	 eax, eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 45 f8	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 4688 : 	int tObjNum;
; 4689 : 	int count = 0;
; 4690 : 	int HitCount = 0;
; 4691 : 	int iDistance = 7;
; 4692 : 	int nHitCount = 0;

  00015	33 c9		 xor	 ecx, ecx

; 4693 : 
; 4694 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00017	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0001a	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00020	6a 01		 push	 1
  00022	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00025	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00029	50		 push	 eax
  0002a	53		 push	 ebx
  0002b	89 4d f4	 mov	 DWORD PTR _nHitCount$1$[ebp], ecx
  0002e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4695 : 
; 4696 : 	int EnableAttack;
; 4697 : 	int bPVP = TRUE;
; 4698 : 	int DuelIndex = lpObj->m_iDuelUser;

  00033	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  00039	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  0003f	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00044	89 45 f0	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	89 4d fc	 mov	 DWORD PTR tv498[ebp], ecx
  0004d	0f 1f 00	 npad	 3
$LL2@MLS_SkillL:

; 4699 : 
; 4700 : 	while ( true )
; 4701 : 	{
; 4702 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  00054	0f 84 6d 01 00
	00		 je	 $LN45@MLS_SkillL

; 4703 : 		{
; 4704 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 4705 : 
; 4706 : 			if(tObjNum >= 0 && gObj[tObjNum].Live )

  0005e	85 f6		 test	 esi, esi
  00060	0f 88 61 01 00
	00		 js	 $LN45@MLS_SkillL
  00066	69 d6 40 27 00
	00		 imul	 edx, esi, 10048
  0006c	89 55 08	 mov	 DWORD PTR tv503[ebp], edx
  0006f	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00075	80 7a 51 00	 cmp	 BYTE PTR [edx+81], 0
  00079	0f 84 48 01 00
	00		 je	 $LN45@MLS_SkillL

; 4707 : 			{
; 4708 : 				EnableAttack = 0;
; 4709 : 
; 4710 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0007f	8a 2f		 mov	 ch, BYTE PTR [edi]
  00081	80 fd 02	 cmp	 ch, 2
  00084	75 0d		 jne	 SHORT $LN6@MLS_SkillL
  00086	83 ba 30 06 00
	00 00		 cmp	 DWORD PTR [edx+1584], 0
  0008d	0f 8c c1 00 00
	00		 jl	 $LN51@MLS_SkillL
$LN6@MLS_SkillL:

; 4711 : 				{
; 4712 : 					EnableAttack = 1;
; 4713 : 				}
; 4714 : 				else if( CC_MAP_RANGE( lpObj->MapNumber ) || IT_MAP_RANGE( lpObj->MapNumber ) 

  00093	8a 8b 23 01 00
	00		 mov	 cl, BYTE PTR [ebx+291]
  00099	80 f9 35	 cmp	 cl, 53			; 00000035H
  0009c	0f 84 b2 00 00
	00		 je	 $LN51@MLS_SkillL
  000a2	80 f9 12	 cmp	 cl, 18			; 00000012H
  000a5	72 0f		 jb	 SHORT $LN42@MLS_SkillL
  000a7	b0 17		 mov	 al, 23			; 00000017H
  000a9	3a c1		 cmp	 al, cl
  000ab	1b c0		 sbb	 eax, eax
  000ad	83 c0 01	 add	 eax, 1
  000b0	0f 85 9e 00 00
	00		 jne	 $LN51@MLS_SkillL
$LN42@MLS_SkillL:
  000b6	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  000b9	72 0f		 jb	 SHORT $LN43@MLS_SkillL
  000bb	b0 32		 mov	 al, 50			; 00000032H
  000bd	3a c1		 cmp	 al, cl
  000bf	1b c0		 sbb	 eax, eax
  000c1	83 c0 01	 add	 eax, 1
  000c4	0f 85 8a 00 00
	00		 jne	 $LN51@MLS_SkillL
$LN43@MLS_SkillL:

; 4715 : //					|| lpObj->MapNumber == MAP_INDEX_VULCANUS
; 4716 : 					)
; 4717 : 				{
; 4718 : 					EnableAttack = 1;
; 4719 : 				}
; 4720 : 				else if( (tObjNum == aTargetIndex && bPVP == TRUE ) || DuelIndex == tObjNum)

  000ca	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000cd	0f 84 81 00 00
	00		 je	 $LN51@MLS_SkillL
  000d3	39 75 f0	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000d6	74 7c		 je	 SHORT $LN51@MLS_SkillL

; 4721 : 				{
; 4722 : 					EnableAttack = 1;
; 4723 : 				}
; 4724 : #if (GS_CASTLE == 1)
; 4725 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000d8	80 fd 03	 cmp	 ch, 3
  000db	74 35		 je	 SHORT $LN44@MLS_SkillL
  000dd	80 ba 23 01 00
	00 1e		 cmp	 BYTE PTR [edx+291], 30	; 0000001eH
  000e4	75 2c		 jne	 SHORT $LN44@MLS_SkillL
  000e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000eb	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  000f0	83 f8 07	 cmp	 eax, 7
  000f3	75 1d		 jne	 SHORT $LN44@MLS_SkillL

; 4726 : 				{
; 4727 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fa	8b 55 08	 mov	 edx, DWORD PTR tv503[ebp]
  000fd	8a 8b 5a 20 00
	00		 mov	 cl, BYTE PTR [ebx+8282]
  00103	3a 8c 02 5a 20
	00 00		 cmp	 cl, BYTE PTR [edx+eax+8282]
  0010a	0f 84 b4 00 00
	00		 je	 $LN56@MLS_SkillL

; 4728 : 						EnableAttack = 1;
; 4729 : 				}
; 4730 : #endif
; 4731 : 				else

  00110	eb 45		 jmp	 SHORT $LN10@MLS_SkillL
$LN44@MLS_SkillL:

; 4732 : 				{
; 4733 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  00112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00118	8b 55 08	 mov	 edx, DWORD PTR tv503[ebp]

; 4734 : 
; 4735 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0011b	80 7c 0a 50 02	 cmp	 BYTE PTR [edx+ecx+80], 2
  00120	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00123	75 14		 jne	 SHORT $LN18@MLS_SkillL
  00125	8b 94 0a 30 06
	00 00		 mov	 edx, DWORD PTR [edx+ecx+1584]
  0012c	85 d2		 test	 edx, edx
  0012e	78 09		 js	 SHORT $LN18@MLS_SkillL

; 4736 : 					{
; 4737 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00130	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00136	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
$LN18@MLS_SkillL:

; 4738 : 					}
; 4739 : 
; 4740 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00139	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0013f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00145	50		 push	 eax
  00146	53		 push	 ebx
  00147	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0014c	83 c4 08	 add	 esp, 8
  0014f	83 f8 01	 cmp	 eax, 1
  00152	75 70		 jne	 SHORT $LN56@MLS_SkillL
$LN51@MLS_SkillL:
  00154	8b 55 08	 mov	 edx, DWORD PTR tv503[ebp]
$LN10@MLS_SkillL:

; 4741 : 					{
; 4742 : 						EnableAttack = 1;
; 4743 : 					}
; 4744 : 				}
; 4745 : 
; 4746 : 				if(EnableAttack != 0)
; 4747 : 				{
; 4748 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 7)

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015c	03 c2		 add	 eax, edx
  0015e	50		 push	 eax
  0015f	53		 push	 ebx
  00160	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00165	83 c4 08	 add	 esp, 8
  00168	83 f8 07	 cmp	 eax, 7
  0016b	7d 57		 jge	 SHORT $LN56@MLS_SkillL

; 4749 : 					{
; 4750 : 						nHitCount++;

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _nHitCount$1$[ebp]
  00170	40		 inc	 eax
  00171	89 45 f4	 mov	 DWORD PTR _nHitCount$1$[ebp], eax

; 4751 : 
; 4752 : 						if( nHitCount > 5)

  00174	83 f8 05	 cmp	 eax, 5
  00177	7e 13		 jle	 SHORT $LN22@MLS_SkillL

; 4753 : 						{
; 4754 : 							if( rand()%2 )

  00179	e8 00 00 00 00	 call	 _rand
  0017e	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00183	79 05		 jns	 SHORT $LN57@MLS_SkillL
  00185	48		 dec	 eax
  00186	83 c8 fe	 or	 eax, -2			; fffffffeH
  00189	40		 inc	 eax
$LN57@MLS_SkillL:
  0018a	74 0a		 je	 SHORT $LN52@MLS_SkillL
$LN22@MLS_SkillL:

; 4755 : 							{
; 4756 : 								bAttack = TRUE;

  0018c	b8 01 00 00 00	 mov	 eax, 1
  00191	89 45 f8	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 4757 : 							}
; 4758 : 						}
; 4759 : 						else

  00194	eb 03		 jmp	 SHORT $LN23@MLS_SkillL
$LN52@MLS_SkillL:
  00196	8b 45 f8	 mov	 eax, DWORD PTR _bAttack$1$[ebp]
$LN23@MLS_SkillL:

; 4760 : 						{
; 4761 : 							bAttack = TRUE;
; 4762 : 						}
; 4763 : 
; 4764 : 						if( nHitCount > 12)

  00199	83 7d f4 0c	 cmp	 DWORD PTR _nHitCount$1$[ebp], 12 ; 0000000cH
  0019d	7e 07		 jle	 SHORT $LN25@MLS_SkillL

; 4765 : 						{
; 4766 : 							bAttack = FALSE;

  0019f	33 c0		 xor	 eax, eax
  001a1	89 45 f8	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 4767 : 						}
; 4768 : 
; 4769 : 						if(bAttack == TRUE)

  001a4	eb 1e		 jmp	 SHORT $LN56@MLS_SkillL
$LN25@MLS_SkillL:
  001a6	83 f8 01	 cmp	 eax, 1
  001a9	75 19		 jne	 SHORT $LN56@MLS_SkillL

; 4770 : 						{
; 4771 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,250,lpMagic->m_Skill,0);

  001ab	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  001ae	6a 00		 push	 0
  001b0	ff 70 08	 push	 DWORD PTR [eax+8]
  001b3	68 fa 00 00 00	 push	 250			; 000000faH
  001b8	56		 push	 esi
  001b9	6a 32		 push	 50			; 00000032H
  001bb	53		 push	 ebx
  001bc	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  001c1	83 c4 18	 add	 esp, 24			; 00000018H
$LN56@MLS_SkillL:
  001c4	8b 4d fc	 mov	 ecx, DWORD PTR tv498[ebp]
$LN45@MLS_SkillL:

; 4772 : 						}
; 4773 : 					}
; 4774 : 				}
; 4775 : 			}
; 4776 : 		}
; 4777 : 
; 4778 : 		count++;

  001c7	83 c7 0c	 add	 edi, 12			; 0000000cH

; 4779 : 		if(count > MAX_VIEWPORT -1)

  001ca	83 e9 01	 sub	 ecx, 1
  001cd	89 4d fc	 mov	 DWORD PTR tv498[ebp], ecx
  001d0	0f 85 7a fe ff
	ff		 jne	 $LL2@MLS_SkillL

; 4780 : 		{
; 4781 : 			break;
; 4782 : 		}
; 4783 : 	}
; 4784 : return TRUE;

  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	b8 01 00 00 00	 mov	 eax, 1
  001dd	5b		 pop	 ebx

; 4785 : }

  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv810 = -328						; size = 4
_DuelIndex$1$ = -324					; size = 4
_lpObj$1$ = -320					; size = 4
_aIndex$GSCopy$1$ = -316				; size = 4
tv812 = -312						; size = 4
_lpTargetObj$1$ = -308					; size = 4
_lpMagic$GSCopy$1$ = -304				; size = 4
_Target$2$ = -300					; size = 4
tv807 = -296						; size = 4
_count$1$ = -292					; size = 4
_aTargetIndex$GSCopy$1$ = -288				; size = 4
_pMsg$ = -284						; size = 10
_Target$ = -272						; size = 12
_cBUFF$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning, COMDAT
; _this$ = ecx

; 4541 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00019	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0001c	53		 push	 ebx
  0001d	56		 push	 esi
  0001e	57		 push	 edi

; 4542 : 	LPOBJ lpObj = &gObj[aIndex];

  0001f	69 fa 40 27 00
	00		 imul	 edi, edx, 10048

; 4543 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 4544 : 
; 4545 : 	int bSuccess = TRUE;
; 4546 : 	int tObjNum;
; 4547 : 	int count = 0;
; 4548 : 
; 4549 : 	int Target[3];
; 4550 : 
; 4551 : 	Target[0] = -1;
; 4552 : 	Target[1] = -1;

  00025	83 ce ff	 or	 esi, -1
  00028	89 95 c4 fe ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], edx

; 4553 : 	Target[2] = -1;

  0002e	0b de		 or	 ebx, esi
  00030	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048

; 4554 : 
; 4555 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00036	6a 01		 push	 1
  00038	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax
  0003e	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00042	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	51		 push	 ecx
  0004f	50		 push	 eax
  00050	57		 push	 edi
  00051	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _aTargetIndex$GSCopy$1$[ebp], ecx
  00057	89 bd c0 fe ff
	ff		 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0005d	89 95 cc fe ff
	ff		 mov	 DWORD PTR _lpTargetObj$1$[ebp], edx
  00063	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$1$[ebp], 0
  0006d	c7 85 f0 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _Target$[ebp], -1
  00077	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], esi
  0007d	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _Target$2$[ebp], ebx
  00083	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ebx
  00089	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4556 : 
; 4557 : 	int DuelIndex = lpObj->m_iDuelUser;

  0008e	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]

; 4558 : 	int EnableAttack;
; 4559 : 
; 4560 : 	if( gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) == FALSE )

  00094	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
  0009a	89 85 bc fe ff
	ff		 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  000a0	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  000a6	ff 70 08	 push	 DWORD PTR [eax+8]
  000a9	51		 push	 ecx
  000aa	ff b5 c4 fe ff
	ff		 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  000b0	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  000b5	83 c4 1c	 add	 esp, 28			; 0000001cH
  000b8	85 c0		 test	 eax, eax
  000ba	75 13		 jne	 SHORT $LN10@MLS_SkillC
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx

; 4679 : 	}
; 4680 : return bSuccess;
; 4681 : }

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c2	33 cd		 xor	 ecx, ebp
  000c4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 0c 00	 ret	 12			; 0000000cH
$LN10@MLS_SkillC:

; 4561 : 	{
; 4562 : 		return FALSE;
; 4563 : 	}
; 4564 : 
; 4565 : 	Target[0] = aTargetIndex;

  000cf	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
  000d5	8d 97 4a 0c 00
	00		 lea	 edx, DWORD PTR [edi+3146]
  000db	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], edx
  000e1	33 c0		 xor	 eax, eax
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e9	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR tv807[ebp]
  000ef	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp], ecx
$LL2@MLS_SkillC:

; 4566 : 
; 4567 : 	while( TRUE )
; 4568 : 	{
; 4569 : 		if(lpObj->VpPlayer2[count].state != 0)

  000f5	80 7f fe 00	 cmp	 BYTE PTR [edi-2], 0
  000f9	0f 84 92 01 00
	00		 je	 $LN25@MLS_SkillC

; 4570 : 		{
; 4571 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000ff	0f bf 37	 movsx	 esi, WORD PTR [edi]

; 4572 : 
; 4573 : 			if( tObjNum >= 0 )

  00102	85 f6		 test	 esi, esi
  00104	0f 88 81 01 00
	00		 js	 $LN57@MLS_SkillC

; 4574 : 			{
; 4575 : 				EnableAttack = 0;
; 4576 : 
; 4577 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0010a	80 7f 02 02	 cmp	 BYTE PTR [edi+2], 2
  0010e	75 10		 jne	 SHORT $LN13@MLS_SkillC
  00110	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00116	83 bc 10 30 06
	00 00 00	 cmp	 DWORD PTR [eax+edx+1584], 0
  0011e	7c 56		 jl	 SHORT $LN17@MLS_SkillC
$LN13@MLS_SkillC:

; 4578 : 				{
; 4579 : 					EnableAttack = 1;
; 4580 : 				}
; 4581 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00120	3b f1		 cmp	 esi, ecx
  00122	74 52		 je	 SHORT $LN17@MLS_SkillC
  00124	39 b5 bc fe ff
	ff		 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  0012a	74 4a		 je	 SHORT $LN17@MLS_SkillC

; 4582 : 				{
; 4583 : 					EnableAttack = 1;
; 4584 : 				}
; 4585 : 				else
; 4586 : 				{
; 4587 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0012c	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 4588 : 
; 4589 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00132	80 7c 10 50 02	 cmp	 BYTE PTR [eax+edx+80], 2
  00137	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0013a	75 14		 jne	 SHORT $LN18@MLS_SkillC
  0013c	8b 84 10 30 06
	00 00		 mov	 eax, DWORD PTR [eax+edx+1584]
  00143	85 c0		 test	 eax, eax
  00145	78 09		 js	 SHORT $LN18@MLS_SkillC

; 4590 : 					{
; 4591 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00147	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0014d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
$LN18@MLS_SkillC:

; 4592 : 					}
; 4593 : 
; 4594 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00150	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00156	03 c2		 add	 eax, edx
  00158	50		 push	 eax
  00159	ff b5 c0 fe ff
	ff		 push	 DWORD PTR _lpObj$1$[ebp]
  0015f	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00164	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016a	83 c4 08	 add	 esp, 8
  0016d	83 f8 01	 cmp	 eax, 1
  00170	0f 85 09 01 00
	00		 jne	 $LN59@MLS_SkillC
$LN17@MLS_SkillC:

; 4595 : 					{
; 4596 : 						EnableAttack = 1;
; 4597 : 					}
; 4598 : 				}
; 4599 : 
; 4600 : 				if( EnableAttack != 0 )
; 4601 : 				{
; 4602 : 					if( gObj[tObjNum].X >= (lpTargetObj->X -1) &&
; 4603 : 						gObj[tObjNum].X <= (lpTargetObj->X +1) &&
; 4604 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -1) &&
; 4605 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +1) &&

  00176	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  0017c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00182	03 ca		 add	 ecx, edx
  00184	0f b6 98 20 01
	00 00		 movzx	 ebx, BYTE PTR [eax+288]
  0018b	0f b6 b9 20 01
	00 00		 movzx	 edi, BYTE PTR [ecx+288]
  00192	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00195	3b f8		 cmp	 edi, eax
  00197	7c 77		 jl	 SHORT $LN21@MLS_SkillC
  00199	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0019c	3b f8		 cmp	 edi, eax
  0019e	7f 70		 jg	 SHORT $LN21@MLS_SkillC
  001a0	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _lpTargetObj$1$[ebp]
  001a6	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  001ad	89 85 c8 fe ff
	ff		 mov	 DWORD PTR tv812[ebp], eax
  001b3	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  001ba	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c0	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv810[ebp], eax
  001c6	48		 dec	 eax
  001c7	39 85 c8 fe ff
	ff		 cmp	 DWORD PTR tv812[ebp], eax
  001cd	7c 41		 jl	 SHORT $LN21@MLS_SkillC
  001cf	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR tv810[ebp]
  001d5	40		 inc	 eax
  001d6	39 85 c8 fe ff
	ff		 cmp	 DWORD PTR tv812[ebp], eax
  001dc	7f 32		 jg	 SHORT $LN21@MLS_SkillC
  001de	80 79 50 02	 cmp	 BYTE PTR [ecx+80], 2
  001e2	75 2c		 jne	 SHORT $LN21@MLS_SkillC

; 4606 : 						gObj[tObjNum].Type == OBJ_MONSTER )
; 4607 : 					{
; 4608 : 						Target[1] = tObjNum;
; 4609 : 
; 4610 : 						if(Target[2] != -1)

  001e4	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _Target$2$[ebp]
  001ea	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], esi
  001f0	83 fb ff	 cmp	 ebx, -1
  001f3	0f 85 bd 00 00
	00		 jne	 $LN27@MLS_SkillC

; 4611 : 							break;
; 4612 : 					}
; 4613 : 					else if( gObj[tObjNum].X >= (lpTargetObj->X -2) &&

  001f9	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR tv807[ebp]
  001ff	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$1$[ebp]
  00205	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
  0020b	e9 81 00 00 00	 jmp	 $LN25@MLS_SkillC
$LN21@MLS_SkillC:

; 4614 : 						gObj[tObjNum].X <= (lpTargetObj->X +2) &&
; 4615 : 						gObj[tObjNum].Y >= (lpTargetObj->Y -2) &&
; 4616 : 						gObj[tObjNum].Y <= (lpTargetObj->Y +2) &&

  00210	8d 43 fe	 lea	 eax, DWORD PTR [ebx-2]
  00213	3b f8		 cmp	 edi, eax
  00215	7c 5c		 jl	 SHORT $LN51@MLS_SkillC
  00217	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  0021a	3b f8		 cmp	 edi, eax
  0021c	7f 55		 jg	 SHORT $LN51@MLS_SkillC
  0021e	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  00224	0f b6 b9 21 01
	00 00		 movzx	 edi, BYTE PTR [ecx+289]
  0022b	0f b6 98 21 01
	00 00		 movzx	 ebx, BYTE PTR [eax+289]
  00232	8d 43 fe	 lea	 eax, DWORD PTR [ebx-2]
  00235	3b f8		 cmp	 edi, eax
  00237	7c 3a		 jl	 SHORT $LN51@MLS_SkillC
  00239	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  0023c	3b f8		 cmp	 edi, eax
  0023e	7f 33		 jg	 SHORT $LN51@MLS_SkillC
  00240	80 79 50 02	 cmp	 BYTE PTR [ecx+80], 2
  00244	75 2d		 jne	 SHORT $LN51@MLS_SkillC

; 4617 : 						gObj[tObjNum].Type == OBJ_MONSTER )
; 4618 : 					{
; 4619 : 						Target[2] = tObjNum;

  00246	8b de		 mov	 ebx, esi

; 4620 : 	
; 4621 : 						if(Target[1] != -1)

  00248	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _Target$[ebp+4]
  0024e	89 9d d4 fe ff
	ff		 mov	 DWORD PTR _Target$2$[ebp], ebx
  00254	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ebx
  0025a	83 fe ff	 cmp	 esi, -1
  0025d	75 4b		 jne	 SHORT $LN35@MLS_SkillC

; 4611 : 							break;
; 4612 : 					}
; 4613 : 					else if( gObj[tObjNum].X >= (lpTargetObj->X -2) &&

  0025f	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR tv807[ebp]
  00265	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$1$[ebp]
  0026b	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
  00271	eb 1e		 jmp	 SHORT $LN25@MLS_SkillC
$LN51@MLS_SkillC:
  00273	8b 9d d4 fe ff
	ff		 mov	 ebx, DWORD PTR _Target$2$[ebp]
  00279	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR tv807[ebp]
$LN59@MLS_SkillC:
  0027f	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _count$1$[ebp]
  00285	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
$LN57@MLS_SkillC:
  0028b	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _Target$[ebp+4]
$LN25@MLS_SkillC:

; 4622 : 							break;
; 4623 : 					}
; 4624 : 				}
; 4625 : 			}
; 4626 : 		}
; 4627 : 
; 4628 : 		count++;

  00291	40		 inc	 eax
  00292	83 c7 0c	 add	 edi, 12			; 0000000cH
  00295	89 85 dc fe ff
	ff		 mov	 DWORD PTR _count$1$[ebp], eax
  0029b	89 bd d8 fe ff
	ff		 mov	 DWORD PTR tv807[ebp], edi

; 4629 : 
; 4630 : 		if( count > MAX_VIEWPORT -1)

  002a1	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  002a4	0f 8e 4b fe ff
	ff		 jle	 $LL2@MLS_SkillC
$LN35@MLS_SkillC:

; 4631 : 		{
; 4632 : 			break;
; 4633 : 		}
; 4634 : 	}
; 4635 : 
; 4636 : 	if( Target[2] == -1 )

  002aa	83 fb ff	 cmp	 ebx, -1
  002ad	0f 44 de	 cmove	 ebx, esi
  002b0	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ebx
$LN27@MLS_SkillC:

; 4637 : 	{
; 4638 : 		Target[2] = Target[1];
; 4639 : 	}
; 4640 : 
; 4641 : 	if( Target[1] == -1 )

  002b6	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _aTargetIndex$GSCopy$1$[ebp]
  002bc	83 fe ff	 cmp	 esi, -1
  002bf	75 10		 jne	 SHORT $LN28@MLS_SkillC

; 4642 : 	{
; 4643 : 		Target[1] = Target[0];
; 4644 : 		Target[2] = Target[1];

  002c1	8b f1		 mov	 esi, ecx
  002c3	8b d9		 mov	 ebx, ecx
  002c5	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+4], esi
  002cb	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _Target$[ebp+8], ebx
$LN28@MLS_SkillC:

; 4645 : 	}
; 4646 : 
; 4647 : 	int lOfs = 0;
; 4648 : 	BYTE cBUFF[256];
; 4649 : 	PMSG_SKILL_TARGET_COUNT pMsg;
; 4650 : 
; 4651 : 	pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);

  002d1	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _lpMagic$GSCopy$1$[ebp]

; 4652 : 	pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);
; 4653 : 	pMsg.Index = aIndex;
; 4654 : 	pMsg.Count = 3;
; 4655 : 
; 4656 : 	lOfs += sizeof(pMsg);
; 4657 : 
; 4658 : 	int i;
; 4659 : 	for(i = 0; i < 3; i++)
; 4660 : 	{
; 4661 : 		WORD wIndex = Target[i];
; 4662 : 		memcpy(&cBUFF[lOfs],&wIndex,2);
; 4663 : 		lOfs+= 2;
; 4664 : 	}
; 4665 : 
; 4666 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,10,lOfs);

  002d7	6a 10		 push	 16			; 00000010H
  002d9	6a 0a		 push	 10			; 0000000aH
  002db	68 bf 00 00 00	 push	 191			; 000000bfH
  002e0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002e3	c1 e8 08	 shr	 eax, 8
  002e6	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], al
  002ec	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  002ef	88 85 e9 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], al
  002f5	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _aIndex$GSCopy$1$[ebp]
  002fb	66 89 85 ea fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+6], ax
  00302	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00308	50		 push	 eax
  00309	c6 85 ec fe ff
	ff 03		 mov	 BYTE PTR _pMsg$[ebp+8], 3
  00310	66 89 8d 06 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+10], cx
  00317	66 89 b5 08 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+12], si
  0031e	66 89 9d 0a ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+14], bx
  00325	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 4667 : 	memcpy(&cBUFF[0],&pMsg,sizeof(pMsg));
; 4668 : 
; 4669 : 	if( lpObj->Type == OBJ_USER )

  0032a	8b 9d c0 fe ff
	ff		 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	f3 0f 7e 85 e4
	fe ff ff	 movq	 xmm0, QWORD PTR _pMsg$[ebp]
  0033b	66 8b 85 ec fe
	ff ff		 mov	 ax, WORD PTR _pMsg$[ebp+8]
  00342	66 0f d6 85 fc
	fe ff ff	 movq	 QWORD PTR _cBUFF$[ebp], xmm0
  0034a	66 89 85 04 ff
	ff ff		 mov	 WORD PTR _cBUFF$[ebp+8], ax
  00351	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00355	75 19		 jne	 SHORT $LN29@MLS_SkillC

; 4670 : 	{
; 4671 : 		DataSend(lpObj->m_Index,(LPBYTE)&cBUFF[0],pMsg.h.size);

  00357	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0035e	50		 push	 eax
  0035f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cBUFF$[ebp]
  00365	50		 push	 eax
  00366	ff 33		 push	 DWORD PTR [ebx]
  00368	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0036d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@MLS_SkillC:

; 4672 : 	}
; 4673 : 
; 4674 : 	MsgSendV2(lpObj,(LPBYTE)&cBUFF[0],pMsg.h.size);

  00370	0f b6 85 e5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00377	50		 push	 eax
  00378	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cBUFF$[ebp]
  0037e	50		 push	 eax
  0037f	53		 push	 ebx
  00380	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH
  00388	bf c8 00 00 00	 mov	 edi, 200		; 000000c8H

; 4675 : 
; 4676 : 	for(i = 0; i < 3; i++)

  0038d	33 c0		 xor	 eax, eax
  0038f	90		 npad	 1
$LL9@MLS_SkillC:

; 4677 : 	{
; 4678 : 		gObjAddAttackProcMsgSendDelay(lpObj,50,Target[i],200 + 200*i,lpMagic->m_Skill,i+1);

  00390	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00396	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00399	56		 push	 esi
  0039a	ff 71 08	 push	 DWORD PTR [ecx+8]
  0039d	57		 push	 edi
  0039e	ff b4 85 f0 fe
	ff ff		 push	 DWORD PTR _Target$[ebp+eax*4]
  003a5	6a 32		 push	 50			; 00000032H
  003a7	53		 push	 ebx
  003a8	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  003ad	81 c7 c8 00 00
	00		 add	 edi, 200		; 000000c8H
  003b3	83 c4 18	 add	 esp, 24			; 00000018H
  003b6	8b c6		 mov	 eax, esi
  003b8	81 ff 20 03 00
	00		 cmp	 edi, 800		; 00000320H
  003be	7c d0		 jl	 SHORT $LL9@MLS_SkillC

; 4679 : 	}
; 4680 : return bSuccess;
; 4681 : }

  003c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c3	b8 01 00 00 00	 mov	 eax, 1
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	33 cd		 xor	 ecx, ebp
  003cc	5b		 pop	 ebx
  003cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d2	8b e5		 mov	 esp, ebp
  003d4	5d		 pop	 ebp
  003d5	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -16					; size = 4
_count$1$ = -12						; size = 4
_lpObj$1$ = -8						; size = 4
tv485 = -4						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSleep, COMDAT
; _this$ = ecx

; 4445 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4446 : 	LPOBJ lpObj = &gObj[aIndex];
; 4447 : 	int bRet = FALSE;
; 4448 : 	int tObjNum;
; 4449 : 
; 4450 : 	int Angle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);
; 4451 : 	int count = 0;
; 4452 : 
; 4453 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00006	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00013	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00017	6a 01		 push	 1
  00019	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0001c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _count$1$[ebp], 0
  00023	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	89 7d f8	 mov	 DWORD PTR _lpObj$1$[ebp], edi
  0002e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 4454 : 
; 4455 : 	int DuelIndex = lpObj->m_iDuelUser;

  00033	8b 87 50 12 00
	00		 mov	 eax, DWORD PTR [edi+4688]
  00039	8d 97 4c 0c 00
	00		 lea	 edx, DWORD PTR [edi+3148]
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	83 c4 10	 add	 esp, 16			; 00000010H
  00048	89 45 f0	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0004b	33 c0		 xor	 eax, eax
  0004d	89 55 fc	 mov	 DWORD PTR tv485[ebp], edx
$LL2@MLS_SkillS:

; 4456 : 	int EnableAttack;
; 4457 : 
; 4458 : 	while( TRUE )
; 4459 : 	{
; 4460 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 7a fc 00	 cmp	 BYTE PTR [edx-4], 0
  00054	0f 84 32 01 00
	00		 je	 $LN19@MLS_SkillS

; 4461 : 		{
; 4462 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 72 fe	 movsx	 esi, WORD PTR [edx-2]

; 4463 : 
; 4464 : 			if( tObjNum >= 0 )

  0005e	85 f6		 test	 esi, esi
  00060	0f 88 26 01 00
	00		 js	 $LN19@MLS_SkillS

; 4465 : 			{
; 4466 : 				EnableAttack = 0;
; 4467 : 
; 4468 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00066	8a 1a		 mov	 bl, BYTE PTR [edx]
  00068	80 fb 02	 cmp	 bl, 2
  0006b	75 14		 jne	 SHORT $LN6@MLS_SkillS
  0006d	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00073	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0007b	0f 8c dd 00 00
	00		 jl	 $LN13@MLS_SkillS
$LN6@MLS_SkillS:

; 4469 : 				{
; 4470 : 					EnableAttack = 1;
; 4471 : 				}
; 4472 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00081	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00084	0f 84 dd 00 00
	00		 je	 $LN47@MLS_SkillS
  0008a	39 75 f0	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  0008d	0f 84 cb 00 00
	00		 je	 $LN13@MLS_SkillS

; 4473 : 				{
; 4474 : 					EnableAttack = 1;
; 4475 : 				}
; 4476 : 				else if( CC_MAP_RANGE(lpObj->MapNumber) ||
; 4477 : 						 IT_MAP_RANGE(lpObj->MapNumber) ||

  00093	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  00099	80 fa 35	 cmp	 dl, 53			; 00000035H
  0009c	0f 84 b9 00 00
	00		 je	 $LN45@MLS_SkillS
  000a2	80 fa 12	 cmp	 dl, 18			; 00000012H
  000a5	72 0f		 jb	 SHORT $LN35@MLS_SkillS
  000a7	b0 17		 mov	 al, 23			; 00000017H
  000a9	3a c2		 cmp	 al, dl
  000ab	1b c0		 sbb	 eax, eax
  000ad	83 c0 01	 add	 eax, 1
  000b0	0f 85 a5 00 00
	00		 jne	 $LN45@MLS_SkillS
$LN35@MLS_SkillS:
  000b6	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  000b9	72 0f		 jb	 SHORT $LN36@MLS_SkillS
  000bb	b0 32		 mov	 al, 50			; 00000032H
  000bd	3a c2		 cmp	 al, dl
  000bf	1b c0		 sbb	 eax, eax
  000c1	83 c0 01	 add	 eax, 1
  000c4	0f 85 91 00 00
	00		 jne	 $LN45@MLS_SkillS
$LN36@MLS_SkillS:
  000ca	80 fa 3f	 cmp	 dl, 63			; 0000003fH
  000cd	0f 84 88 00 00
	00		 je	 $LN45@MLS_SkillS

; 4478 : 						 lpObj->MapNumber == MAP_INDEX_VULCANUS )
; 4479 : 				{
; 4480 : 					EnableAttack = 1;
; 4481 : 				}
; 4482 : #if (GS_CASTLE == 1)
; 4483 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000d3	80 fb 03	 cmp	 bl, 3
  000d6	74 42		 je	 SHORT $LN14@MLS_SkillS
  000d8	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000de	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000e6	75 2f		 jne	 SHORT $LN46@MLS_SkillS
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ed	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 4484 : 				{
; 4485 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	83 f8 07	 cmp	 eax, 7
  000fb	75 1a		 jne	 SHORT $LN46@MLS_SkillS
  000fd	8b 45 f8	 mov	 eax, DWORD PTR _lpObj$1$[ebp]

; 4486 : 						EnableAttack = 1;
; 4487 : 				}
; 4488 : #endif
; 4489 : 				else

  00100	8b 55 fc	 mov	 edx, DWORD PTR tv485[ebp]
  00103	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  00109	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  00110	74 77		 je	 SHORT $LN48@MLS_SkillS
  00112	8b 7d f8	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  00115	eb 47		 jmp	 SHORT $LN13@MLS_SkillS
$LN46@MLS_SkillS:
  00117	8b 7d f8	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
$LN14@MLS_SkillS:

; 4490 : 				{
; 4491 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0011a	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 4492 : 
; 4493 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00120	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00125	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00128	75 14		 jne	 SHORT $LN17@MLS_SkillS
  0012a	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  00131	85 c0		 test	 eax, eax
  00133	78 09		 js	 SHORT $LN17@MLS_SkillS

; 4494 : 					{
; 4495 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00135	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0013b	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN17@MLS_SkillS:

; 4496 : 					}
; 4497 : 
; 4498 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0013e	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00144	03 c1		 add	 eax, ecx
  00146	50		 push	 eax
  00147	57		 push	 edi
  00148	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0014d	83 c4 08	 add	 esp, 8
  00150	83 f8 01	 cmp	 eax, 1
  00153	75 2b		 jne	 SHORT $LN40@MLS_SkillS
  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN45@MLS_SkillS:
  0015b	8b 55 fc	 mov	 edx, DWORD PTR tv485[ebp]
$LN13@MLS_SkillS:

; 4499 : 					{
; 4500 : 						EnableAttack = 1;
; 4501 : 					}
; 4502 : 				}
; 4503 : 
; 4504 : 				if( EnableAttack != 0 &&
; 4505 : 					tObjNum == aTargetIndex && 

  0015e	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
  00161	3b f3		 cmp	 esi, ebx
  00163	75 24		 jne	 SHORT $LN48@MLS_SkillS
  00165	eb 03		 jmp	 SHORT $LN37@MLS_SkillS
$LN47@MLS_SkillS:
  00167	8b 5d 0c	 mov	 ebx, DWORD PTR _aTargetIndex$[ebp]
$LN37@MLS_SkillS:
  0016a	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  0016d	ff 76 08	 push	 DWORD PTR [esi+8]
  00170	53		 push	 ebx
  00171	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00174	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017c	85 c0		 test	 eax, eax
  0017e	75 23		 jne	 SHORT $LN30@MLS_SkillS
$LN40@MLS_SkillS:
  00180	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00186	8b 55 fc	 mov	 edx, DWORD PTR tv485[ebp]
$LN48@MLS_SkillS:
  00189	8b 45 f4	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN19@MLS_SkillS:

; 4509 : 					bRet = TRUE;
; 4510 : 					break;
; 4511 : 				}
; 4512 : 			}
; 4513 : 		}
; 4514 : 
; 4515 : 		count++;

  0018c	40		 inc	 eax
  0018d	83 c2 0c	 add	 edx, 12			; 0000000cH
  00190	89 45 f4	 mov	 DWORD PTR _count$1$[ebp], eax
  00193	89 55 fc	 mov	 DWORD PTR tv485[ebp], edx

; 4516 : 
; 4517 : 		if( count > MAX_VIEWPORT -1)

  00196	83 f8 4a	 cmp	 eax, 74			; 0000004aH
  00199	7f 39		 jg	 SHORT $LN38@MLS_SkillS

; 4518 : 		{
; 4519 : 			break;
; 4520 : 		}
; 4521 : 	}

  0019b	8b 7d f8	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  0019e	e9 ad fe ff ff	 jmp	 $LL2@MLS_SkillS
$LN30@MLS_SkillS:

; 4506 : 					gCheckSkillDistance(aIndex,aTargetIndex,lpMagic->m_Skill) != FALSE )
; 4507 : 				{
; 4508 : 					gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,1,0,0,0,0,0);

  001a3	6a 00		 push	 0
  001a5	6a 00		 push	 0
  001a7	6a 00		 push	 0
  001a9	6a 00		 push	 0
  001ab	6a 00		 push	 0
  001ad	69 c3 40 27 00
	00		 imul	 eax, ebx, 10048
  001b3	6a 01		 push	 1
  001b5	56		 push	 esi
  001b6	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bc	50		 push	 eax
  001bd	57		 push	 edi
  001be	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001c3	83 c4 24	 add	 esp, 36			; 00000024H

; 4522 : 
; 4523 : return bRet;

  001c6	b8 01 00 00 00	 mov	 eax, 1
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	5b		 pop	 ebx

; 4524 : }

  001ce	8b e5		 mov	 esp, ebp
  001d0	5d		 pop	 ebp
  001d1	c2 0c 00	 ret	 12			; 0000000cH
$LN38@MLS_SkillS:
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi

; 4522 : 
; 4523 : return bRet;

  001d6	33 c0		 xor	 eax, eax
  001d8	5b		 pop	 ebx

; 4524 : }

  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckUsableWeaponSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_nCount$ = 12						; size = 4
?CheckUsableWeaponSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckUsableWeaponSkill, COMDAT
; _this$ = ecx

; 4410 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4411 : 	int iBaseMLS = 0;
; 4412 : 
; 4413 : 	if( this->CheckMasterLevelSkill(lpObj->Magic[nCount].m_Skill) )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  00011	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00017	ff 74 f8 08	 push	 DWORD PTR [eax+edi*8+8]
  0001b	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00020	85 c0		 test	 eax, eax
  00022	0f 84 a7 00 00
	00		 je	 $LN7@CheckUsabl

; 4414 : 	{
; 4415 : 		iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[nCount].m_Skill);

  00028	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  0002e	8b cb		 mov	 ecx, ebx
  00030	ff 74 f8 08	 push	 DWORD PTR [eax+edi*8+8]
  00034	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
  00039	8b d8		 mov	 ebx, eax

; 4416 : 
; 4417 : 		if( iBaseMLS > 0 && 

  0003b	85 db		 test	 ebx, ebx
  0003d	0f 8e 8c 00 00
	00		 jle	 $LN7@CheckUsabl
  00043	53		 push	 ebx
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00049	e8 00 00 00 00	 call	 ?GetSkillType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillType
  0004e	83 f8 04	 cmp	 eax, 4
  00051	75 7c		 jne	 SHORT $LN7@CheckUsabl

; 4418 : 			MagicDamageC.GetSkillType(iBaseMLS) == 4 )
; 4419 : 		{
; 4420 : 			WORD BrandSkill = MagicDamageC.GetNormalBrandOfSkill(iBaseMLS);

  00053	53		 push	 ebx
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00059	e8 00 00 00 00	 call	 ?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetNormalBrandOfSkill
  0005e	0f b7 d8	 movzx	 ebx, ax

; 4421 : 			BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(lpObj->Magic[nCount].m_Skill);

  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00066	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  0006c	ff 74 f8 08	 push	 DWORD PTR [eax+edi*8+8]
  00070	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill

; 4422 : 
; 4423 : 			if( byIsItemSkill )

  00075	84 c0		 test	 al, al
  00077	74 56		 je	 SHORT $LN7@CheckUsabl

; 4424 : 			{
; 4425 : 				int bUseSkill = 0;
; 4426 : 
; 4427 : 				if( lpObj->pInventory[1].IsItem() == TRUE &&

  00079	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  0007f	33 ff		 xor	 edi, edi
  00081	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00087	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	75 15		 jne	 SHORT $LN5@CheckUsabl
  00091	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00097	66 39 98 06 01
	00 00		 cmp	 WORD PTR [eax+262], bx
  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	0f 44 f8	 cmove	 edi, eax
$LN5@CheckUsabl:

; 4428 : 					lpObj->pInventory[1].m_Special[0] == BrandSkill )
; 4429 : 					bUseSkill = TRUE;
; 4430 : 
; 4431 : 				if( lpObj->pInventory[0].IsItem() == TRUE &&

  000a6	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  000ac	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000b1	83 f8 01	 cmp	 eax, 1
  000b4	75 0c		 jne	 SHORT $LN6@CheckUsabl
  000b6	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  000bc	66 39 58 32	 cmp	 WORD PTR [eax+50], bx
  000c0	74 0d		 je	 SHORT $LN7@CheckUsabl
$LN6@CheckUsabl:

; 4432 : 					lpObj->pInventory[0].m_Special[0] == BrandSkill )
; 4433 : 					bUseSkill = TRUE;
; 4434 : 
; 4435 : 				if( bUseSkill == 0 )

  000c2	85 ff		 test	 edi, edi
  000c4	75 09		 jne	 SHORT $LN7@CheckUsabl

; 4436 : 					return false;

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	33 c0		 xor	 eax, eax
  000ca	5b		 pop	 ebx

; 4442 : }

  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
$LN7@CheckUsabl:
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi

; 4437 : 			}
; 4438 : 		}
; 4439 : 	}
; 4440 : 
; 4441 : return true;

  000d1	b8 01 00 00 00	 mov	 eax, 1
  000d6	5b		 pop	 ebx

; 4442 : }

  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
?CheckUsableWeaponSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckUsableWeaponSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_WeaponSkillAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?MLS_WeaponSkillAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillAdd, COMDAT
; _this$ = ecx

; 4388 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 4389 : 	int iBaseMLS = 0;
; 4390 : 
; 4391 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0000b	33 f6		 xor	 esi, esi
  0000d	0f 1f 00	 npad	 3
$LL4@MLS_Weapon:

; 4392 : 	{
; 4393 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 

  00010	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 3e		 jne	 SHORT $LN2@MLS_Weapon
  00022	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00028	8b cb		 mov	 ecx, ebx
  0002a	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  0002e	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00033	85 c0		 test	 eax, eax
  00035	74 29		 je	 SHORT $LN2@MLS_Weapon

; 4394 : 			this->CheckMasterLevelSkill(lpObj->Magic[iCount].m_Skill) )
; 4395 : 		{
; 4396 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  00037	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  0003d	8b cb		 mov	 ecx, ebx
  0003f	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  00043	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 4397 : 
; 4398 : 			if( iBaseMLS > 0 && 

  00048	85 c0		 test	 eax, eax
  0004a	7e 14		 jle	 SHORT $LN2@MLS_Weapon
  0004c	50		 push	 eax
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00052	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  00057	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _aSkill$[ebp]
  0005b	66 3b c8	 cmp	 cx, ax
  0005e	74 14		 je	 SHORT $LN9@MLS_Weapon
$LN2@MLS_Weapon:

; 4389 : 	int iBaseMLS = 0;
; 4390 : 
; 4391 : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00060	83 c6 18	 add	 esi, 24			; 00000018H
  00063	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00069	7c a5		 jl	 SHORT $LL4@MLS_Weapon

; 4403 : 			}
; 4404 : 		}
; 4405 : 	}
; 4406 : 	return 0;

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	33 c0		 xor	 eax, eax
  0006f	5b		 pop	 ebx

; 4407 : }

  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
$LN9@MLS_Weapon:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 4399 : 				aSkill == MagicDamageC.GetBrandOfSkill(iBaseMLS) )
; 4400 : 			{
; 4401 : 				//GCMagicListOneSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);
; 4402 : 				return true;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	5b		 pop	 ebx

; 4407 : }

  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_WeaponSkillAdd@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillAdd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_WeaponSkillDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_aSkill$ = 12						; size = 1
_Level$ = 16						; size = 1
?MLS_WeaponSkillDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z PROC ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillDel, COMDAT
; _this$ = ecx

; 4357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi

; 4358 : 	int iBaseMLS = 0;
; 4359 : 
; 4360 : 	for( int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0000a	33 ff		 xor	 edi, edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	33 f6		 xor	 esi, esi
$LL4@MLS_Weapon:

; 4361 : 	{
; 4362 : 		if( lpObj->Magic[iCount].IsMagic() == TRUE && 

  00011	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  00017	03 ce		 add	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001e	83 f8 01	 cmp	 eax, 1
  00021	75 54		 jne	 SHORT $LN2@MLS_Weapon
  00023	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0002c	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  00030	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00035	85 c0		 test	 eax, eax
  00037	74 3e		 je	 SHORT $LN2@MLS_Weapon

; 4363 : 			this->CheckMasterLevelSkill(lpObj->Magic[iCount].m_Skill) )
; 4364 : 		{
; 4365 : 			iBaseMLS = this->GetBaseMasterLevelSkill(lpObj->Magic[iCount].m_Skill);

  00039	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00042	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  00046	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 4366 : 
; 4367 : 			if( iBaseMLS > 0 )

  0004b	85 c0		 test	 eax, eax
  0004d	7e 28		 jle	 SHORT $LN2@MLS_Weapon

; 4368 : 			{
; 4369 : 				WORD BrandSkill = MagicDamageC.GetNormalBrandOfSkill(iBaseMLS);

  0004f	50		 push	 eax
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00055	e8 00 00 00 00	 call	 ?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetNormalBrandOfSkill
  0005a	0f b7 c8	 movzx	 ecx, ax

; 4370 : 
; 4371 : 				if( aSkill ==  BrandSkill )

  0005d	8a 45 0c	 mov	 al, BYTE PTR _aSkill$[ebp]
  00060	0f b6 c0	 movzx	 eax, al
  00063	66 3b c1	 cmp	 ax, cx
  00066	75 0f		 jne	 SHORT $LN2@MLS_Weapon

; 4372 : 				{
; 4373 : 					BYTE byIsItemSkill = MagicDamageC.IsItemAttachedSkill(BrandSkill);

  00068	51		 push	 ecx
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0006e	e8 00 00 00 00	 call	 ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ; CMagicDamage::IsItemAttachedSkill

; 4374 : 
; 4375 : 					if( byIsItemSkill )

  00073	84 c0		 test	 al, al
  00075	75 17		 jne	 SHORT $LN11@MLS_Weapon
$LN2@MLS_Weapon:

; 4358 : 	int iBaseMLS = 0;
; 4359 : 
; 4360 : 	for( int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00077	83 c6 18	 add	 esi, 24			; 00000018H
  0007a	47		 inc	 edi
  0007b	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00081	7c 8e		 jl	 SHORT $LL4@MLS_Weapon

; 4379 : 					}
; 4380 : 				}
; 4381 : 			}
; 4382 : 		}
; 4383 : 	}
; 4384 : 	return 0;

  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	33 c0		 xor	 eax, eax
  00087	5b		 pop	 ebx

; 4385 : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 0c 00	 ret	 12			; 0000000cH
$LN11@MLS_Weapon:

; 4376 : 					{
; 4377 : 						GCMagicListOneDelSend(lpObj->m_Index,iCount,lpObj->Magic[iCount].m_Skill,lpObj->Magic[iCount].m_Level,0,0);

  0008e	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00094	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  0009e	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000a2	50		 push	 eax
  000a3	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]
  000a7	50		 push	 eax
  000a8	57		 push	 edi
  000a9	ff 33		 push	 DWORD PTR [ebx]
  000ab	e8 00 00 00 00	 call	 ?GCMagicListOneDelSend@@YAXHDGEEE@Z ; GCMagicListOneDelSend
  000b0	83 c4 18	 add	 esp, 24			; 00000018H

; 4378 : 						return true;

  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx

; 4385 : }

  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 0c 00	 ret	 12			; 0000000cH
?MLS_WeaponSkillDel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@EE@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_WeaponSkillDel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireScream, COMDAT
; _this$ = ecx

; 4328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4329 : 	if(g_SkillAdditionInfo.GetFireScreamSkill() == false)

  00003	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+28, 0
  0000a	75 06		 jne	 SHORT $LN2@MLS_FireSc

; 4330 : 	{
; 4331 : 		return false;

  0000c	33 c0		 xor	 eax, eax

; 4354 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_FireSc:
  00012	56		 push	 esi

; 4332 : 	}
; 4333 : 
; 4334 : 	LPOBJ lpObj = &gObj[aIndex];

  00013	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  0001a	57		 push	 edi

; 4335 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0001b	69 7d 0c 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00022	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4336 : 
; 4337 : 	if(gObjIsConnected(lpObj->m_Index) == false && gObjIsConnected(lpTargetObj->m_Index) == false)

  0002e	ff 36		 push	 DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00035	83 c4 04	 add	 esp, 4
  00038	85 c0		 test	 eax, eax
  0003a	75 0e		 jne	 SHORT $LN3@MLS_FireSc
  0003c	ff 37		 push	 DWORD PTR [edi]
  0003e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	74 10		 je	 SHORT $LN11@MLS_FireSc
$LN3@MLS_FireSc:

; 4338 : 	{
; 4339 : 		return false;
; 4340 : 	}
; 4341 : 
; 4342 : 	if(lpObj->Type != OBJ_USER)

  0004a	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0004e	75 0a		 jne	 SHORT $LN11@MLS_FireSc

; 4343 : 	{
; 4344 : 		return false;
; 4345 : 	}
; 4346 : 
; 4347 : 	if(lpObj->Class != CLASS_DARKLORD)

  00050	66 83 be 90 00
	00 00 04	 cmp	 WORD PTR [esi+144], 4
  00058	74 08		 je	 SHORT $LN5@MLS_FireSc
$LN11@MLS_FireSc:
  0005a	5f		 pop	 edi

; 4348 : 	{
; 4349 : 		return false;

  0005b	33 c0		 xor	 eax, eax
  0005d	5e		 pop	 esi

; 4354 : }

  0005e	5d		 pop	 ebp
  0005f	c2 0c 00	 ret	 12			; 0000000cH
$LN5@MLS_FireSc:

; 4350 : 	}
; 4351 : 
; 4352 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,0,0,0,0,0);

  00062	6a 00		 push	 0
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	ff 75 10	 push	 DWORD PTR _lpMagic$[ebp]
  00071	57		 push	 edi
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00078	83 c4 24	 add	 esp, 36			; 00000024H

; 4353 : 	return true;

  0007b	b8 01 00 00 00	 mov	 eax, 1
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 4354 : }

  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireScream@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireScream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z
_TEXT	SEGMENT
tv473 = -12						; size = 4
_HitCount$1$ = -8					; size = 4
_lpObj$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_DuelIndex$1$ = 24					; size = 4
_Targetangle$ = 24					; size = 1
_aTargetIndex$ = 28					; size = 4
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_PowerSlash, COMDAT
; _this$ = ecx

; 4230 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 4231 : 	LPOBJ lpObj = &gObj[aIndex];
; 4232 : 	int StartDis = 1;
; 4233 : 
; 4234 : 	int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0000f	8b f1		 mov	 esi, ecx
  00011	ff 70 08	 push	 DWORD PTR [eax+8]
  00014	69 df 40 27 00
	00		 imul	 ebx, edi, 10048
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0001f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	89 5d fc	 mov	 DWORD PTR _lpObj$1$[ebp], ebx
  00028	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 4235 : 	float fAngle = Targetangle*360/255;
; 4236 : 	this->MLS_SkillFrustrum(aIndex,fAngle,iSkillDis+1.0f,iSkillDis+1.0f);

  0002d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00030	66 0f 6e c0	 movd	 xmm0, eax
  00034	0f b6 45 18	 movzx	 eax, BYTE PTR _Targetangle$[ebp]
  00038	69 c8 68 01 00
	00		 imul	 ecx, eax, 360
  0003e	b8 81 80 80 80	 mov	 eax, -2139062143	; 80808081H
  00043	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00046	f7 e9		 imul	 ecx
  00048	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00050	03 d1		 add	 edx, ecx
  00052	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00058	c1 fa 07	 sar	 edx, 7
  0005b	8b ce		 mov	 ecx, esi
  0005d	8b c2		 mov	 eax, edx
  0005f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00065	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00068	03 c2		 add	 eax, edx
  0006a	66 0f 6e c0	 movd	 xmm0, eax
  0006e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 4237 : 
; 4238 : 	int tObjNum;
; 4239 : 	int count = 0;
; 4240 : 	int HitCount = 0;
; 4241 : 	int bAttack;
; 4242 : 	int DuelIndex = lpObj->m_iDuelUser;

  0007c	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  00082	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _HitCount$1$[ebp], 0
  00095	89 45 18	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00098	c7 45 f4 4b 00
	00 00		 mov	 DWORD PTR tv473[ebp], 75 ; 0000004bH
  0009f	90		 npad	 1
$LL2@MLS_PowerS:

; 4243 : 	int EnableAttack;
; 4244 : 
; 4245 : 	while ( true )
; 4246 : 	{
; 4247 : 		if(lpObj->VpPlayer2[count].state != 0)

  000a0	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  000a4	0f 84 32 01 00
	00		 je	 $LN17@MLS_PowerS

; 4248 : 		{
; 4249 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000aa	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 4250 : 
; 4251 : 			if(tObjNum >= 0)

  000ae	85 f6		 test	 esi, esi
  000b0	0f 88 26 01 00
	00		 js	 $LN17@MLS_PowerS

; 4252 : 			{
; 4253 : 				EnableAttack = 0;
; 4254 : 
; 4255 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000b6	8a 17		 mov	 dl, BYTE PTR [edi]
  000b8	80 fa 02	 cmp	 dl, 2
  000bb	75 17		 jne	 SHORT $LN6@MLS_PowerS
  000bd	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  000c3	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  000cb	0f 8c 9a 00 00
	00		 jl	 $LN10@MLS_PowerS
  000d1	8b 45 18	 mov	 eax, DWORD PTR _DuelIndex$1$[ebp]
$LN6@MLS_PowerS:

; 4256 : 				{
; 4257 : 					EnableAttack = 1;
; 4258 : 				}
; 4259 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000d4	3b 75 1c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000d7	0f 84 8e 00 00
	00		 je	 $LN10@MLS_PowerS
  000dd	3b c6		 cmp	 eax, esi
  000df	0f 84 86 00 00
	00		 je	 $LN10@MLS_PowerS

; 4260 : 				{
; 4261 : 					EnableAttack = 1;
; 4262 : 				}
; 4263 : #if (GS_CASTLE == 1)
; 4264 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000e5	80 fa 03	 cmp	 dl, 3
  000e8	74 40		 je	 SHORT $LN11@MLS_PowerS
  000ea	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  000f0	80 bc 0b 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+ecx+291], 30 ; 0000001eH
  000f8	75 2d		 jne	 SHORT $LN35@MLS_PowerS
  000fa	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ff	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 4265 : 				{
; 4266 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010a	83 f8 07	 cmp	 eax, 7
  0010d	75 18		 jne	 SHORT $LN35@MLS_PowerS
  0010f	8b 45 fc	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  00112	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  00118	3a 84 0b 5a 20
	00 00		 cmp	 al, BYTE PTR [ebx+ecx+8282]
  0011f	0f 84 b4 00 00
	00		 je	 $LN36@MLS_PowerS

; 4267 : 						EnableAttack = 1;
; 4268 : 				}
; 4269 : #endif
; 4270 : 				else

  00125	eb 44		 jmp	 SHORT $LN10@MLS_PowerS
$LN35@MLS_PowerS:
  00127	8b 5d fc	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
$LN11@MLS_PowerS:

; 4271 : 				{
; 4272 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0012a	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 4273 : 
; 4274 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00130	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  00135	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00138	75 14		 jne	 SHORT $LN14@MLS_PowerS
  0013a	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  00141	85 c0		 test	 eax, eax
  00143	78 09		 js	 SHORT $LN14@MLS_PowerS

; 4275 : 					{
; 4276 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  00145	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  0014b	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN14@MLS_PowerS:

; 4277 : 					}
; 4278 : 
; 4279 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  0014e	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00154	03 c1		 add	 eax, ecx
  00156	50		 push	 eax
  00157	53		 push	 ebx
  00158	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0015d	83 c4 08	 add	 esp, 8
  00160	83 f8 01	 cmp	 eax, 1
  00163	75 6e		 jne	 SHORT $LN34@MLS_PowerS
  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_PowerS:

; 4280 : 					{
; 4281 : 						EnableAttack = 1;
; 4282 : 					}
; 4283 : 				}
; 4284 : 
; 4285 : 				if(EnableAttack != 0)
; 4286 : 				{
; 4287 : 					if(SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  0016b	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  0016e	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  00174	0f b6 84 0e 21
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+289]
  0017c	50		 push	 eax
  0017d	0f b6 84 0e 20
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+288]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  0018b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018e	85 c0		 test	 eax, eax
  00190	74 41		 je	 SHORT $LN34@MLS_PowerS

; 4288 : 					{
; 4289 : 						bAttack = 0;
; 4290 : 
; 4291 : 						if(HitCount > 10)
; 4292 : 						{
; 4293 : 							bAttack = 0;
; 4294 : 						}
; 4295 : 						
; 4296 : 						if(HitCount >= 5)

  00192	8b 5d f8	 mov	 ebx, DWORD PTR _HitCount$1$[ebp]
  00195	83 fb 05	 cmp	 ebx, 5
  00198	7c 13		 jl	 SHORT $LN19@MLS_PowerS

; 4297 : 						{
; 4298 : 							if(rand()%2)

  0019a	e8 00 00 00 00	 call	 _rand
  0019f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001a4	79 05		 jns	 SHORT $LN37@MLS_PowerS
  001a6	48		 dec	 eax
  001a7	83 c8 fe	 or	 eax, -2			; fffffffeH
  001aa	40		 inc	 eax
$LN37@MLS_PowerS:
  001ab	74 22		 je	 SHORT $LN22@MLS_PowerS
$LN19@MLS_PowerS:

; 4299 : 							{
; 4300 : 								bAttack = 1;
; 4301 : 							}
; 4302 : 						}
; 4303 : 						else
; 4304 : 						{
; 4305 : 							bAttack = 1;
; 4306 : 						}
; 4307 : 
; 4308 : 						if(bAttack != 0)
; 4309 : 						{
; 4310 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001b2	6a 00		 push	 0
  001b4	6a 00		 push	 0
  001b6	6a 00		 push	 0
  001b8	6a 00		 push	 0
  001ba	6a 01		 push	 1
  001bc	6a 01		 push	 1
  001be	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  001c1	03 c6		 add	 eax, esi
  001c3	50		 push	 eax
  001c4	ff 75 fc	 push	 DWORD PTR _lpObj$1$[ebp]
  001c7	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001cc	83 c4 24	 add	 esp, 36			; 00000024H
$LN22@MLS_PowerS:

; 4311 : 						}
; 4312 : 
; 4313 : 						HitCount++;

  001cf	43		 inc	 ebx
  001d0	89 5d f8	 mov	 DWORD PTR _HitCount$1$[ebp], ebx
$LN34@MLS_PowerS:
  001d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_PowerS:
  001d9	8b 45 18	 mov	 eax, DWORD PTR _DuelIndex$1$[ebp]
$LN17@MLS_PowerS:

; 4314 : 					}
; 4315 : 				}
; 4316 : 			}
; 4317 : 		}
; 4318 : 
; 4319 : 		count++;
; 4320 : 		if(count > MAX_VIEWPORT -1)

  001dc	8b 5d fc	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
  001df	83 c7 0c	 add	 edi, 12			; 0000000cH
  001e2	83 6d f4 01	 sub	 DWORD PTR tv473[ebp], 1
  001e6	0f 85 b4 fe ff
	ff		 jne	 $LL2@MLS_PowerS
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx

; 4321 : 		{
; 4322 : 			break;
; 4323 : 		}
; 4324 : 	}
; 4325 : }

  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c2 18 00	 ret	 24			; 00000018H
?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown, COMDAT
; _this$ = ecx

; 4186 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4187 : 	int skillSuccess = 1;
; 4188 : 	LPOBJ lpObj = &gObj[aIndex];
; 4189 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 75 0c 40 27
	00 00		 imul	 esi, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi
  0000c	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00013	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00019	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4190 : 
; 4191 : 	if(lpObj->Type == OBJ_USER && lpObj->Class != CLASS_MAGUMSA)

  0001f	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00023	75 0a		 jne	 SHORT $LN2@MLS_MaGumS
  00025	66 83 bf 90 00
	00 00 03	 cmp	 WORD PTR [edi+144], 3
  0002d	75 33		 jne	 SHORT $LN3@MLS_MaGumS
$LN2@MLS_MaGumS:

; 4192 : 	{
; 4193 : 		return;
; 4194 : 	}
; 4195 : 
; 4196 : 	if( retCalcSkillResistance(lpTargetObj,R_POISON) )

  0002f	6a 01		 push	 1
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?retCalcSkillResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retCalcSkillResistance
  00037	83 c4 08	 add	 esp, 8
  0003a	85 c0		 test	 eax, eax
  0003c	74 24		 je	 SHORT $LN3@MLS_MaGumS

; 4197 : 	{
; 4198 : 		gObjAddBuffEffect(lpTargetObj,BUFF_DEFENSEDOWN,ADD_OPTION_DEFENSEDOWN,10,0,0,10);

  0003e	6a 0a		 push	 10			; 0000000aH
  00040	6a 00		 push	 0
  00042	6a 00		 push	 0
  00044	6a 0a		 push	 10			; 0000000aH
  00046	6a 17		 push	 23			; 00000017H
  00048	6a 3a		 push	 58			; 0000003aH
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 4199 : 		GCMagicAttackNumberSend(lpObj,AT_MSKILL_MG_FIRESLASH1,lpTargetObj->m_Index,skillSuccess);

  00050	6a 01		 push	 1
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	68 ea 01 00 00	 push	 490			; 000001eaH
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0005f	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN3@MLS_MaGumS:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 4200 : 	}
; 4201 : }

  00064	5d		 pop	 ebp
  00065	c2 08 00	 ret	 8
?MLS_MaGumSkillDefenseDown@CMasterLevelSkillTreeSystem@@QAEXHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_MaGumSkillDefenseDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpTargetObj$1$ = -4					; size = 4
tv487 = 8						; size = 4
_iPreSkill$1$ = 8					; size = 4
_fValue$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aMLSkillValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense, COMDAT
; _this$ = ecx

; 4113 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4114 : 	int skillSuccess = true;
; 4115 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	53		 push	 ebx

; 4116 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000a	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  0001a	8b f1		 mov	 esi, ecx
  0001c	03 d8		 add	 ebx, eax
  0001e	89 5d fc	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ebx
  00021	03 f8		 add	 edi, eax

; 4117 : 
; 4118 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00023	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00027	74 0d		 je	 SHORT $LN5@MLS_SkillS
  00029	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  00030	0f 84 86 01 00
	00		 je	 $LN1@MLS_SkillS
$LN5@MLS_SkillS:

; 4119 : 	{
; 4120 : 		return;
; 4121 : 	}
; 4122 : 
; 4123 : 	if(lpObj->Class != CLASS_ELF)

  00036	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  0003e	0f 85 78 01 00
	00		 jne	 $LN1@MLS_SkillS

; 4124 : 	{
; 4125 : 		return;
; 4126 : 	}
; 4127 : 
; 4128 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00044	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  0004a	3c 35		 cmp	 al, 53			; 00000035H
  0004c	74 0f		 je	 SHORT $LN23@MLS_SkillS
  0004e	3c 12		 cmp	 al, 18			; 00000012H
  00050	72 15		 jb	 SHORT $LN7@MLS_SkillS
  00052	b1 17		 mov	 cl, 23			; 00000017H
  00054	3a c8		 cmp	 cl, al
  00056	1b c0		 sbb	 eax, eax
  00058	83 c0 01	 add	 eax, 1
  0005b	74 0a		 je	 SHORT $LN7@MLS_SkillS
$LN23@MLS_SkillS:
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00061	0f 85 55 01 00
	00		 jne	 $LN1@MLS_SkillS
$LN7@MLS_SkillS:

; 4129 : 	{
; 4130 : 		return;
; 4131 : 	}
; 4132 : 
; 4133 : 	float skill_defense;
; 4134 : 	float fValue;
; 4135 : 	float aMLSkillValue;
; 4136 : 	
; 4137 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  00067	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006a	8b ce		 mov	 ecx, esi
  0006c	ff 70 08	 push	 DWORD PTR [eax+8]
  0006f	6a 02		 push	 2
  00071	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  00076	89 45 08	 mov	 DWORD PTR _iPreSkill$1$[ebp], eax

; 4138 : 
; 4139 : 	if( iPreSkill > 0 )

  00079	85 c0		 test	 eax, eax
  0007b	7e 26		 jle	 SHORT $LN9@MLS_SkillS

; 4140 : 	{
; 4141 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  0007d	50		 push	 eax
  0007e	57		 push	 edi
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 4142 : 
; 4143 : 		if( iPreLevel > 0 )

  00086	85 c0		 test	 eax, eax
  00088	7e 19		 jle	 SHORT $LN9@MLS_SkillS

; 4144 : 		{
; 4145 : 			aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  0008a	50		 push	 eax
  0008b	ff 75 08	 push	 DWORD PTR _iPreSkill$1$[ebp]
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00093	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000a0	d9 5d 0c	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
$LN9@MLS_SkillS:

; 4146 : 		}
; 4147 : 	}
; 4148 : 	
; 4149 : 	fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a3	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000a6	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000aa	50		 push	 eax
  000ab	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b8	50		 push	 eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4150 : 
; 4151 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000c0	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000c3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000c8	d9 5d 08	 fstp	 DWORD PTR _fValue$[ebp]
  000cb	ff 70 08	 push	 DWORD PTR [eax+8]
  000ce	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 4152 : 
; 4153 : 	if( !lpInfo )

  000d3	85 c0		 test	 eax, eax
  000d5	0f 84 e1 00 00
	00		 je	 $LN1@MLS_SkillS

; 4154 : 	{
; 4155 : 		return;
; 4156 : 	}
; 4157 : 
; 4158 : 	skill_defense = (float)( lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2);

  000db	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  000e2	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  000e9	03 d1		 add	 edx, ecx

; 4159 : 	skill_defense += skill_defense*(fValue+aMLSkillValue)/100.0f;

  000eb	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fValue$[ebp]
  000f0	0f 28 ca	 movaps	 xmm1, xmm2
  000f3	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _aMLSkillValue$[ebp]
  000f8	66 0f 6e c2	 movd	 xmm0, edx
  000fc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ff	f3 0f 5e 40 08	 divss	 xmm0, DWORD PTR [eax+8]
  00104	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00109	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0010d	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00115	f3 0f 58 c8	 addss	 xmm1, xmm0

; 4160 : 
; 4161 : 	if( skill_defense > lpInfo->m_Arg3 )

  00119	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0011e	0f 2f c8	 comiss	 xmm1, xmm0
  00121	76 03		 jbe	 SHORT $LN11@MLS_SkillS

; 4162 : 	{
; 4163 : 		skill_defense = lpInfo->m_Arg3;

  00123	0f 28 c8	 movaps	 xmm1, xmm0
$LN11@MLS_SkillS:

; 4164 : 	}
; 4165 : 
; 4166 : 	int nTime = lpInfo->m_Arg4 + fValue;

  00126	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0012b	f3 0f 58 c2	 addss	 xmm0, xmm2

; 4167 : 
; 4168 : 	gObjAddBuffEffect(lpTargetObj,BUFF_ADD_DEFENSE,ADD_OPTION_DEFENSE,(int)skill_defense,0,0,nTime);

  0012f	f3 0f 2c c9	 cvttss2si ecx, xmm1
  00133	f3 0f 2c c0	 cvttss2si eax, xmm0
  00137	89 4d 08	 mov	 DWORD PTR tv487[ebp], ecx
  0013a	50		 push	 eax
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	51		 push	 ecx
  00140	6a 03		 push	 3
  00142	6a 02		 push	 2
  00144	53		 push	 ebx
  00145	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0014a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0014d	8d b7 48 0c 00
	00		 lea	 esi, DWORD PTR [edi+3144]
  00153	bb 4b 00 00 00	 mov	 ebx, 75			; 0000004bH
$LL4@MLS_SkillS:

; 4171 : 	{
; 4172 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00158	80 7e 04 02	 cmp	 BYTE PTR [esi+4], 2
  0015c	75 3e		 jne	 SHORT $LN2@MLS_SkillS
  0015e	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00161	74 39		 je	 SHORT $LN2@MLS_SkillS

; 4173 : 		{
; 4174 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  00163	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]
  00167	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  0016d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4175 : 			if(lpMonster->m_iCurrentAI != 0)

  00173	83 b9 d0 20 00
	00 00		 cmp	 DWORD PTR [ecx+8400], 0
  0017a	74 20		 je	 SHORT $LN2@MLS_SkillS

; 4176 : 			{
; 4177 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  0017c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00181	81 c1 ec 20 00
	00		 add	 ecx, 8428		; 000020ecH
  00187	f7 6d 08	 imul	 DWORD PTR tv487[ebp]
  0018a	c1 fa 02	 sar	 edx, 2
  0018d	8b c2		 mov	 eax, edx
  0018f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00192	03 c2		 add	 eax, edx
  00194	50		 push	 eax
  00195	ff 37		 push	 DWORD PTR [edi]
  00197	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN2@MLS_SkillS:

; 4169 : 
; 4170 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  0019c	83 c6 0c	 add	 esi, 12			; 0000000cH
  0019f	83 eb 01	 sub	 ebx, 1
  001a2	75 b4		 jne	 SHORT $LL4@MLS_SkillS

; 4178 : 			}
; 4179 : 		}
; 4180 : 	}
; 4181 : 
; 4182 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  001a7	6a 01		 push	 1
  001a9	ff 30		 push	 DWORD PTR [eax]
  001ab	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  001ae	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  001b2	50		 push	 eax
  001b3	57		 push	 edi
  001b4	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001b9	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS:
  001bc	5f		 pop	 edi
  001bd	5e		 pop	 esi
  001be	5b		 pop	 ebx

; 4183 : }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpTargetObj$1$ = -4					; size = 4
tv486 = 8						; size = 4
_aMLSkillValue$1$ = 8					; size = 4
_aMLSkillValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_iPreSkill$1$ = 12					; size = 4
_fValue$ = 12						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack, COMDAT
; _this$ = ecx

; 4040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4041 : 	int skillSuccess = true;
; 4042 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00009	53		 push	 ebx

; 4043 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000a	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  0001a	8b f1		 mov	 esi, ecx
  0001c	03 d8		 add	 ebx, eax
  0001e	89 5d fc	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ebx
  00021	03 f8		 add	 edi, eax

; 4044 : 
; 4045 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00023	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00027	74 0d		 je	 SHORT $LN5@MLS_SkillS
  00029	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  00030	0f 84 9e 01 00
	00		 je	 $LN1@MLS_SkillS
$LN5@MLS_SkillS:

; 4046 : 	{
; 4047 : 		return;
; 4048 : 	}
; 4049 : 
; 4050 : 	if(lpObj->Class != CLASS_ELF)

  00036	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  0003e	0f 85 90 01 00
	00		 jne	 $LN1@MLS_SkillS

; 4051 : 	{
; 4052 : 		return;
; 4053 : 	}
; 4054 : 
; 4055 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00044	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  0004a	3c 35		 cmp	 al, 53			; 00000035H
  0004c	74 0f		 je	 SHORT $LN23@MLS_SkillS
  0004e	3c 12		 cmp	 al, 18			; 00000012H
  00050	72 15		 jb	 SHORT $LN7@MLS_SkillS
  00052	b1 17		 mov	 cl, 23			; 00000017H
  00054	3a c8		 cmp	 cl, al
  00056	1b c0		 sbb	 eax, eax
  00058	83 c0 01	 add	 eax, 1
  0005b	74 0a		 je	 SHORT $LN7@MLS_SkillS
$LN23@MLS_SkillS:
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00061	0f 85 6d 01 00
	00		 jne	 $LN1@MLS_SkillS
$LN7@MLS_SkillS:

; 4056 : 	{
; 4057 : 		return;
; 4058 : 	}
; 4059 : 
; 4060 : 	float skill_attack;
; 4061 : 	float fValue;
; 4062 : 	float aMLSkillValue = 0;
; 4063 : 	
; 4064 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  00067	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	8b ce		 mov	 ecx, esi
  0006f	f3 0f 11 45 08	 movss	 DWORD PTR _aMLSkillValue$1$[ebp], xmm0
  00074	ff 70 08	 push	 DWORD PTR [eax+8]
  00077	6a 02		 push	 2
  00079	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  0007e	89 45 0c	 mov	 DWORD PTR _iPreSkill$1$[ebp], eax

; 4065 : 
; 4066 : 	if( iPreSkill > 0 )

  00081	85 c0		 test	 eax, eax
  00083	7e 30		 jle	 SHORT $LN9@MLS_SkillS

; 4067 : 	{
; 4068 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 4069 : 
; 4070 : 		if( iPreLevel > 0 )

  0008e	85 c0		 test	 eax, eax
  00090	7e 23		 jle	 SHORT $LN9@MLS_SkillS

; 4071 : 		{
; 4072 : 			aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  00092	50		 push	 eax
  00093	ff 75 0c	 push	 DWORD PTR _iPreSkill$1$[ebp]
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0009b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a0	50		 push	 eax
  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000a8	d9 5d 08	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  000ab	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aMLSkillValue$[ebp]
  000b0	f3 0f 11 45 08	 movss	 DWORD PTR _aMLSkillValue$1$[ebp], xmm0
$LN9@MLS_SkillS:

; 4073 : 		}
; 4074 : 	}
; 4075 : 
; 4076 : 	fValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000b5	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000b8	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000bc	50		 push	 eax
  000bd	ff 71 08	 push	 DWORD PTR [ecx+8]
  000c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000c5	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000ca	50		 push	 eax
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4077 : 
; 4078 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000d2	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000da	d9 5d 0c	 fstp	 DWORD PTR _fValue$[ebp]
  000dd	ff 70 08	 push	 DWORD PTR [eax+8]
  000e0	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 4079 : 
; 4080 : 	if( !lpInfo )

  000e5	85 c0		 test	 eax, eax
  000e7	0f 84 e7 00 00
	00		 je	 $LN1@MLS_SkillS

; 4081 : 	{
; 4082 : 		return;
; 4083 : 	}
; 4084 : 
; 4085 : 	skill_attack = (float)lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2;

  000ed	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  000f4	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  000fb	03 d1		 add	 edx, ecx

; 4086 : 	skill_attack += skill_attack*(aMLSkillValue+fValue)/100.0f;

  000fd	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fValue$[ebp]
  00102	0f 28 ca	 movaps	 xmm1, xmm2
  00105	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _aMLSkillValue$1$[ebp]
  0010a	66 0f 6e c2	 movd	 xmm0, edx
  0010e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00111	f3 0f 5e 40 08	 divss	 xmm0, DWORD PTR [eax+8]
  00116	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0011b	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0011f	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00127	f3 0f 58 c8	 addss	 xmm1, xmm0

; 4087 : 
; 4088 : 	if( skill_attack > lpInfo->m_Arg3 )

  0012b	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00130	0f 2f c8	 comiss	 xmm1, xmm0
  00133	76 03		 jbe	 SHORT $LN11@MLS_SkillS

; 4089 : 	{
; 4090 : 		skill_attack = lpInfo->m_Arg3;

  00135	0f 28 c8	 movaps	 xmm1, xmm0
$LN11@MLS_SkillS:

; 4091 : 	}
; 4092 : 
; 4093 : 	int nTime = lpInfo->m_Arg4 + fValue;

  00138	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0013d	f3 0f 58 c2	 addss	 xmm0, xmm2

; 4094 : 
; 4095 : 	gObjAddBuffEffect(lpTargetObj,BUFF_ADD_ATTACK,ADD_OPTION_ATTACK_DAMAGE,skill_attack,0,0,nTime);

  00141	f3 0f 2c c9	 cvttss2si ecx, xmm1
  00145	f3 0f 2c c0	 cvttss2si eax, xmm0
  00149	89 4d 08	 mov	 DWORD PTR tv486[ebp], ecx
  0014c	50		 push	 eax
  0014d	6a 00		 push	 0
  0014f	6a 00		 push	 0
  00151	51		 push	 ecx
  00152	6a 02		 push	 2
  00154	6a 01		 push	 1
  00156	53		 push	 ebx
  00157	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0015c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0015f	8d b7 48 0c 00
	00		 lea	 esi, DWORD PTR [edi+3144]
  00165	bb 4b 00 00 00	 mov	 ebx, 75			; 0000004bH
  0016a	66 0f 1f 44 00
	00		 npad	 6
$LL4@MLS_SkillS:

; 4098 : 	{
; 4099 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00170	80 7e 04 02	 cmp	 BYTE PTR [esi+4], 2
  00174	75 3e		 jne	 SHORT $LN2@MLS_SkillS
  00176	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00179	74 39		 je	 SHORT $LN2@MLS_SkillS

; 4100 : 		{
; 4101 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0017b	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]
  0017f	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00185	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4102 : 			if(lpMonster->m_iCurrentAI != 0)

  0018b	83 b9 d0 20 00
	00 00		 cmp	 DWORD PTR [ecx+8400], 0
  00192	74 20		 je	 SHORT $LN2@MLS_SkillS

; 4103 : 			{
; 4104 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  00194	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00199	81 c1 ec 20 00
	00		 add	 ecx, 8428		; 000020ecH
  0019f	f7 6d 08	 imul	 DWORD PTR tv486[ebp]
  001a2	c1 fa 02	 sar	 edx, 2
  001a5	8b c2		 mov	 eax, edx
  001a7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001aa	03 c2		 add	 eax, edx
  001ac	50		 push	 eax
  001ad	ff 37		 push	 DWORD PTR [edi]
  001af	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN2@MLS_SkillS:

; 4096 : 
; 4097 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  001b4	83 c6 0c	 add	 esi, 12			; 0000000cH
  001b7	83 eb 01	 sub	 ebx, 1
  001ba	75 b4		 jne	 SHORT $LL4@MLS_SkillS

; 4105 : 			}
; 4106 : 		}
; 4107 : 	}
; 4108 : 
; 4109 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  001bc	8b 45 fc	 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  001bf	6a 01		 push	 1
  001c1	ff 30		 push	 DWORD PTR [eax]
  001c3	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  001c6	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  001ca	50		 push	 eax
  001cb	57		 push	 edi
  001cc	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001d1	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillS:
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx

; 4110 : }

  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv452 = 8						; size = 4
_aMLSkillValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpTargetObj$1$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAttack, COMDAT
; _this$ = ecx

; 3982 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3983 : 	int skillSuccess = true;
; 3984 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx

; 3985 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00019	8b f1		 mov	 esi, ecx
  0001b	03 d8		 add	 ebx, eax
  0001d	89 5d 0c	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ebx
  00020	03 f8		 add	 edi, eax

; 3986 : 
; 3987 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00022	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00026	74 0d		 je	 SHORT $LN5@MLS_SkillA
  00028	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  0002f	0f 84 3f 01 00
	00		 je	 $LN1@MLS_SkillA
$LN5@MLS_SkillA:

; 3988 : 	{
; 3989 : 		return;
; 3990 : 	}
; 3991 : 
; 3992 : 	if(lpObj->Class != CLASS_ELF)

  00035	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  0003d	0f 85 31 01 00
	00		 jne	 $LN1@MLS_SkillA

; 3993 : 	{
; 3994 : 		return;
; 3995 : 	}
; 3996 : 
; 3997 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00043	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00049	3c 35		 cmp	 al, 53			; 00000035H
  0004b	74 0f		 je	 SHORT $LN21@MLS_SkillA
  0004d	3c 12		 cmp	 al, 18			; 00000012H
  0004f	72 15		 jb	 SHORT $LN7@MLS_SkillA
  00051	b1 17		 mov	 cl, 23			; 00000017H
  00053	3a c8		 cmp	 cl, al
  00055	1b c0		 sbb	 eax, eax
  00057	83 c0 01	 add	 eax, 1
  0005a	74 0a		 je	 SHORT $LN7@MLS_SkillA
$LN21@MLS_SkillA:
  0005c	8b 07		 mov	 eax, DWORD PTR [edi]
  0005e	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00060	0f 85 0e 01 00
	00		 jne	 $LN1@MLS_SkillA
$LN7@MLS_SkillA:

; 3998 : 	{
; 3999 : 		return;
; 4000 : 	}
; 4001 : 
; 4002 : 	float skill_attack;
; 4003 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00069	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0006d	50		 push	 eax
  0006e	ff 71 08	 push	 DWORD PTR [ecx+8]
  00071	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00076	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 4004 : 	
; 4005 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00083	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0008b	d9 5d 08	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  0008e	ff 70 08	 push	 DWORD PTR [eax+8]
  00091	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 4006 : 
; 4007 : 	if( !lpInfo )

  00096	85 c0		 test	 eax, eax
  00098	0f 84 d6 00 00
	00		 je	 $LN1@MLS_SkillA

; 4008 : 	{
; 4009 : 		return;
; 4010 : 	}
; 4011 : 
; 4012 : 	skill_attack = (float)lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2;

  0009e	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  000a5	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  000ac	03 d1		 add	 edx, ecx
  000ae	66 0f 6e c2	 movd	 xmm0, edx
  000b2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b5	f3 0f 5e 40 08	 divss	 xmm0, DWORD PTR [eax+8]
  000ba	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]

; 4013 : 	skill_attack += skill_attack*aMLSkillValue/100.0f;

  000bf	0f 28 c8	 movaps	 xmm1, xmm0
  000c2	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _aMLSkillValue$[ebp]
  000c7	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  000cf	f3 0f 58 c8	 addss	 xmm1, xmm0

; 4014 : 
; 4015 : 	if( skill_attack > lpInfo->m_Arg3 )

  000d3	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000d8	0f 2f c8	 comiss	 xmm1, xmm0
  000db	76 03		 jbe	 SHORT $LN9@MLS_SkillA

; 4016 : 	{
; 4017 : 		skill_attack = lpInfo->m_Arg3;

  000dd	0f 28 c8	 movaps	 xmm1, xmm0
$LN9@MLS_SkillA:

; 4018 : 	}
; 4019 : 
; 4020 : 
; 4021 : 	gObjAddBuffEffect(lpTargetObj,BUFF_ADD_ATTACK,ADD_OPTION_ATTACK_DAMAGE,(int)skill_attack,0,0,lpInfo->m_Arg4);

  000e0	f3 0f 2c 40 10	 cvttss2si eax, DWORD PTR [eax+16]
  000e5	f3 0f 2c c9	 cvttss2si ecx, xmm1
  000e9	50		 push	 eax
  000ea	6a 00		 push	 0
  000ec	6a 00		 push	 0
  000ee	51		 push	 ecx
  000ef	6a 02		 push	 2
  000f1	6a 01		 push	 1
  000f3	53		 push	 ebx
  000f4	89 4d 08	 mov	 DWORD PTR tv452[ebp], ecx
  000f7	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  000fc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ff	8d b7 48 0c 00
	00		 lea	 esi, DWORD PTR [edi+3144]
  00105	bb 4b 00 00 00	 mov	 ebx, 75			; 0000004bH
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@MLS_SkillA:

; 4025 : 	{
; 4026 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00110	80 7e 04 02	 cmp	 BYTE PTR [esi+4], 2
  00114	75 3e		 jne	 SHORT $LN2@MLS_SkillA
  00116	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00119	74 39		 je	 SHORT $LN2@MLS_SkillA

; 4027 : 		{
; 4028 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0011b	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]
  0011f	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00125	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 4029 : 			if(lpMonster->m_iCurrentAI != 0)

  0012b	83 b9 d0 20 00
	00 00		 cmp	 DWORD PTR [ecx+8400], 0
  00132	74 20		 je	 SHORT $LN2@MLS_SkillA

; 4030 : 			{
; 4031 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_attack)/10);

  00134	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00139	81 c1 ec 20 00
	00		 add	 ecx, 8428		; 000020ecH
  0013f	f7 6d 08	 imul	 DWORD PTR tv452[ebp]
  00142	c1 fa 02	 sar	 edx, 2
  00145	8b c2		 mov	 eax, edx
  00147	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0014a	03 c2		 add	 eax, edx
  0014c	50		 push	 eax
  0014d	ff 37		 push	 DWORD PTR [edi]
  0014f	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN2@MLS_SkillA:

; 4022 : 
; 4023 : 
; 4024 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00154	83 c6 0c	 add	 esi, 12			; 0000000cH
  00157	83 eb 01	 sub	 ebx, 1
  0015a	75 b4		 jne	 SHORT $LL4@MLS_SkillA

; 4032 : 			}
; 4033 : 		}
; 4034 : 	}
; 4035 : 
; 4036 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0015c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  0015f	6a 01		 push	 1
  00161	ff 30		 push	 DWORD PTR [eax]
  00163	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00166	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0016a	50		 push	 eax
  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00171	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillA:
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx

; 4037 : }

  00177	5d		 pop	 ebp
  00178	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv453 = 8						; size = 4
_aMLSkillValue$ = 8					; size = 4
_aIndex$ = 8						; size = 4
_lpTargetObj$1$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillDefense, COMDAT
; _this$ = ecx

; 3926 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3927 : 	int skillSuccess = true;
; 3928 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	53		 push	 ebx

; 3929 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00009	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _aIndex$[ebp], 10048
  00019	8b f1		 mov	 esi, ecx
  0001b	03 d8		 add	 ebx, eax
  0001d	89 5d 0c	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ebx
  00020	03 f8		 add	 edi, eax

; 3930 : 
; 3931 : 	if(lpTargetObj->Type != OBJ_USER && lpTargetObj->m_RecallMon == -1)

  00022	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00026	74 0d		 je	 SHORT $LN5@MLS_SkillD
  00028	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  0002f	0f 84 3f 01 00
	00		 je	 $LN1@MLS_SkillD
$LN5@MLS_SkillD:

; 3932 : 	{
; 3933 : 		return;
; 3934 : 	}
; 3935 : 
; 3936 : 	if(lpObj->Class != CLASS_ELF)

  00035	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  0003d	0f 85 31 01 00
	00		 jne	 $LN1@MLS_SkillD

; 3937 : 	{
; 3938 : 		return;
; 3939 : 	}
; 3940 : 
; 3941 : 	if(CC_MAP_RANGE(lpObj->MapNumber) && lpObj->m_Index != lpTargetObj->m_Index)

  00043	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00049	3c 35		 cmp	 al, 53			; 00000035H
  0004b	74 0f		 je	 SHORT $LN21@MLS_SkillD
  0004d	3c 12		 cmp	 al, 18			; 00000012H
  0004f	72 15		 jb	 SHORT $LN7@MLS_SkillD
  00051	b1 17		 mov	 cl, 23			; 00000017H
  00053	3a c8		 cmp	 cl, al
  00055	1b c0		 sbb	 eax, eax
  00057	83 c0 01	 add	 eax, 1
  0005a	74 0a		 je	 SHORT $LN7@MLS_SkillD
$LN21@MLS_SkillD:
  0005c	8b 07		 mov	 eax, DWORD PTR [edi]
  0005e	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00060	0f 85 0e 01 00
	00		 jne	 $LN1@MLS_SkillD
$LN7@MLS_SkillD:

; 3942 : 	{
; 3943 : 		return;
; 3944 : 	}
; 3945 : 
; 3946 : 	float skill_defense;
; 3947 : 	float aMLSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00069	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0006d	50		 push	 eax
  0006e	ff 71 08	 push	 DWORD PTR [ecx+8]
  00071	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00076	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0007b	50		 push	 eax
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 3948 : 
; 3949 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00083	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00086	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0008b	d9 5d 08	 fstp	 DWORD PTR _aMLSkillValue$[ebp]
  0008e	ff 70 08	 push	 DWORD PTR [eax+8]
  00091	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 3950 : 
; 3951 : 	if( !lpInfo )

  00096	85 c0		 test	 eax, eax
  00098	0f 84 d6 00 00
	00		 je	 $LN1@MLS_SkillD

; 3952 : 	{
; 3953 : 		return;
; 3954 : 	}
; 3955 : 	
; 3956 : 	skill_defense = (float)(lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2);

  0009e	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  000a5	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  000ac	03 d1		 add	 edx, ecx
  000ae	66 0f 6e c2	 movd	 xmm0, edx
  000b2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b5	f3 0f 5e 40 08	 divss	 xmm0, DWORD PTR [eax+8]
  000ba	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]

; 3957 : 	skill_defense += skill_defense*aMLSkillValue/100.0f;

  000bf	0f 28 c8	 movaps	 xmm1, xmm0
  000c2	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _aMLSkillValue$[ebp]
  000c7	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  000cf	f3 0f 58 c8	 addss	 xmm1, xmm0

; 3958 : 
; 3959 : 	if( skill_defense > lpInfo->m_Arg3 )

  000d3	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000d8	0f 2f c8	 comiss	 xmm1, xmm0
  000db	76 03		 jbe	 SHORT $LN9@MLS_SkillD

; 3960 : 	{
; 3961 : 		skill_defense = lpInfo->m_Arg3;

  000dd	0f 28 c8	 movaps	 xmm1, xmm0
$LN9@MLS_SkillD:

; 3962 : 	}
; 3963 : 
; 3964 : 	gObjAddBuffEffect(lpTargetObj,BUFF_ADD_DEFENSE,ADD_OPTION_DEFENSE,(int)skill_defense,0,0,lpInfo->m_Arg4);

  000e0	f3 0f 2c 40 10	 cvttss2si eax, DWORD PTR [eax+16]
  000e5	f3 0f 2c c9	 cvttss2si ecx, xmm1
  000e9	50		 push	 eax
  000ea	6a 00		 push	 0
  000ec	6a 00		 push	 0
  000ee	51		 push	 ecx
  000ef	6a 03		 push	 3
  000f1	6a 02		 push	 2
  000f3	53		 push	 ebx
  000f4	89 4d 08	 mov	 DWORD PTR tv453[ebp], ecx
  000f7	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  000fc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ff	8d b7 48 0c 00
	00		 lea	 esi, DWORD PTR [edi+3144]
  00105	bb 4b 00 00 00	 mov	 ebx, 75			; 0000004bH
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@MLS_SkillD:

; 3967 : 	{
; 3968 : 		if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00110	80 7e 04 02	 cmp	 BYTE PTR [esi+4], 2
  00114	75 3e		 jne	 SHORT $LN2@MLS_SkillD
  00116	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00119	74 39		 je	 SHORT $LN2@MLS_SkillD

; 3969 : 		{
; 3970 : 			LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0011b	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]
  0011f	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00125	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 3971 : 			if(lpMonster->m_iCurrentAI != 0)

  0012b	83 b9 d0 20 00
	00 00		 cmp	 DWORD PTR [ecx+8400], 0
  00132	74 20		 je	 SHORT $LN2@MLS_SkillD

; 3972 : 			{
; 3973 : 				lpMonster->m_Agro.IncAgro(lpObj->m_Index,int(skill_defense)/10);

  00134	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00139	81 c1 ec 20 00
	00		 add	 ecx, 8428		; 000020ecH
  0013f	f7 6d 08	 imul	 DWORD PTR tv453[ebp]
  00142	c1 fa 02	 sar	 edx, 2
  00145	8b c2		 mov	 eax, edx
  00147	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0014a	03 c2		 add	 eax, edx
  0014c	50		 push	 eax
  0014d	ff 37		 push	 DWORD PTR [edi]
  0014f	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN2@MLS_SkillD:

; 3965 : 
; 3966 : 	for(int n = 0; n < MAX_VIEWPORT; n++)

  00154	83 c6 0c	 add	 esi, 12			; 0000000cH
  00157	83 eb 01	 sub	 ebx, 1
  0015a	75 b4		 jne	 SHORT $LL4@MLS_SkillD

; 3974 : 			}
; 3975 : 		}
; 3976 : 	}
; 3977 : 
; 3978 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  0015c	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$1$[ebp]
  0015f	6a 01		 push	 1
  00161	ff 30		 push	 DWORD PTR [eax]
  00163	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00166	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0016a	50		 push	 eax
  0016b	57		 push	 edi
  0016c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00171	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@MLS_SkillD:
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx

; 3979 : }

  00177	5d		 pop	 ebp
  00178	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -12					; size = 4
tv451 = -8						; size = 4
tv450 = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury, COMDAT
; _this$ = ecx

; 3831 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3832 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00011	53		 push	 ebx
  00012	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _aIndex$[ebp], 10048
  00019	03 d9		 add	 ebx, ecx
  0001b	89 55 f8	 mov	 DWORD PTR tv451[ebp], edx
  0001e	56		 push	 esi
  0001f	57		 push	 edi

; 3833 : 	int tObjNum;
; 3834 : 	int count = 0;
; 3835 : 	int DuelIndex = lpObj->m_iDuelUser;

  00020	8b bb 50 12 00
	00		 mov	 edi, DWORD PTR [ebx+4688]
  00026	8d 83 4c 0c 00
	00		 lea	 eax, DWORD PTR [ebx+3148]
  0002c	89 7d f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], edi
  0002f	89 45 fc	 mov	 DWORD PTR tv450[ebp], eax
$LL2@MLS_SkillB:

; 3836 : 	int HitCount = 0;
; 3837 : 	int bAttack = 0;
; 3838 : 	int EnableAttack;
; 3839 : 
; 3840 : 	while ( true )
; 3841 : 	{
; 3842 : 		if(lpObj->VpPlayer2[count].state != 0)

  00032	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  00036	0f 84 0d 01 00
	00		 je	 $LN23@MLS_SkillB

; 3843 : 		{
; 3844 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0003c	0f bf 70 fe	 movsx	 esi, WORD PTR [eax-2]

; 3845 : 
; 3846 : 			if(tObjNum >= 0)

  00040	85 f6		 test	 esi, esi
  00042	0f 88 01 01 00
	00		 js	 $LN23@MLS_SkillB

; 3847 : 			{
; 3848 : 				EnableAttack = 0;
; 3849 : 
; 3850 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00048	8a 10		 mov	 dl, BYTE PTR [eax]
  0004a	80 fa 02	 cmp	 dl, 2
  0004d	75 14		 jne	 SHORT $LN6@MLS_SkillB
  0004f	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00055	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  0005d	0f 8c 91 00 00
	00		 jl	 $LN10@MLS_SkillB
$LN6@MLS_SkillB:

; 3851 : 				{
; 3852 : 					EnableAttack = 1;
; 3853 : 				}
; 3854 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00063	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  00066	0f 84 88 00 00
	00		 je	 $LN10@MLS_SkillB
  0006c	3b fe		 cmp	 edi, esi
  0006e	0f 84 80 00 00
	00		 je	 $LN10@MLS_SkillB

; 3855 : 				{
; 3856 : 					EnableAttack = 1;
; 3857 : 				}
; 3858 : #if (GS_CASTLE == 1)
; 3859 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00074	80 fa 03	 cmp	 dl, 3
  00077	74 3a		 je	 SHORT $LN11@MLS_SkillB
  00079	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0007f	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  00087	75 2a		 jne	 SHORT $LN11@MLS_SkillB
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0008e	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 3860 : 				{
; 3861 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	83 f8 07	 cmp	 eax, 7
  0009c	75 15		 jne	 SHORT $LN11@MLS_SkillB
  0009e	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  000a4	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  000ab	0f 84 8f 00 00
	00		 je	 $LN36@MLS_SkillB

; 3862 : 						EnableAttack = 1;
; 3863 : 				}
; 3864 : #endif
; 3865 : 				else

  000b1	eb 41		 jmp	 SHORT $LN10@MLS_SkillB
$LN11@MLS_SkillB:

; 3866 : 				{
; 3867 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000b3	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 3868 : 
; 3869 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000b9	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  000be	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  000c1	75 14		 jne	 SHORT $LN14@MLS_SkillB
  000c3	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  000ca	85 c0		 test	 eax, eax
  000cc	78 09		 js	 SHORT $LN14@MLS_SkillB

; 3870 : 					{
; 3871 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000ce	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000d4	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN14@MLS_SkillB:

; 3872 : 					}
; 3873 : 
; 3874 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000d7	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  000dd	03 c1		 add	 eax, ecx
  000df	50		 push	 eax
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000e6	83 c4 08	 add	 esp, 8
  000e9	83 f8 01	 cmp	 eax, 1
  000ec	75 4c		 jne	 SHORT $LN35@MLS_SkillB
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_SkillB:

; 3875 : 					{
; 3876 : 						EnableAttack = 1;
; 3877 : 					}
; 3878 : 				}
; 3879 : 
; 3880 : 				if(EnableAttack != 0)
; 3881 : 				{
; 3882 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 4)

  000f4	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  000fa	03 c1		 add	 eax, ecx
  000fc	50		 push	 eax
  000fd	53		 push	 ebx
  000fe	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00103	83 c4 08	 add	 esp, 8
  00106	83 f8 04	 cmp	 eax, 4
  00109	7d 2f		 jge	 SHORT $LN35@MLS_SkillB

; 3883 : 					{
; 3884 : 						bAttack = 0;
; 3885 : 
; 3886 : 						if(HitCount > 15)
; 3887 : 						{
; 3888 : 							bAttack = 0;
; 3889 : 						}
; 3890 : 
; 3891 : 						if(HitCount >= 10)
; 3892 : 						{
; 3893 : 							if(rand()%2)
; 3894 : 							{
; 3895 : 								bAttack = 1;
; 3896 : 							}
; 3897 : 						}
; 3898 : 						else
; 3899 : 						{
; 3900 : 							bAttack = 1;
; 3901 : 						}
; 3902 : 
; 3903 : 						if(bAttack != 0)
; 3904 : 						{
; 3905 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,isCombo);

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0010e	8b 7d 1c	 mov	 edi, DWORD PTR _isCombo$[ebp]
  00111	57		 push	 edi
  00112	ff 70 08	 push	 DWORD PTR [eax+8]
  00115	68 f4 01 00 00	 push	 500			; 000001f4H
  0011a	56		 push	 esi
  0011b	6a 32		 push	 50			; 00000032H
  0011d	53		 push	 ebx
  0011e	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00123	83 c4 18	 add	 esp, 24			; 00000018H

; 3906 : 
; 3907 : 							if(isCombo != 0)

  00126	85 ff		 test	 edi, edi
  00128	74 10		 je	 SHORT $LN35@MLS_SkillB

; 3908 : 							{
; 3909 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,aIndex,1);

  0012a	6a 01		 push	 1
  0012c	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  0012f	6a 3b		 push	 59			; 0000003bH
  00131	53		 push	 ebx
  00132	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00137	83 c4 10	 add	 esp, 16			; 00000010H
$LN35@MLS_SkillB:
  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_SkillB:
  00140	8b 45 fc	 mov	 eax, DWORD PTR tv450[ebp]
  00143	8b 55 f8	 mov	 edx, DWORD PTR tv451[ebp]
  00146	8b 7d f4	 mov	 edi, DWORD PTR _DuelIndex$1$[ebp]
$LN23@MLS_SkillB:

; 3910 : 							}
; 3911 : 						}
; 3912 : 					}
; 3913 : 				}
; 3914 : 			}
; 3915 : 		}
; 3916 : 
; 3917 : 		count++;

  00149	83 c0 0c	 add	 eax, 12			; 0000000cH

; 3918 : 		if(count > MAX_VIEWPORT -1)

  0014c	83 ea 01	 sub	 edx, 1
  0014f	89 45 fc	 mov	 DWORD PTR tv450[ebp], eax
  00152	89 55 f8	 mov	 DWORD PTR tv451[ebp], edx
  00155	0f 85 d7 fe ff
	ff		 jne	 $LL2@MLS_SkillB
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx

; 3919 : 		{
; 3920 : 			break;
; 3921 : 		}
; 3922 : 	}
; 3923 : }

  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z
_TEXT	SEGMENT
tv398 = -12						; size = 4
_DuelIndex$1$ = -8					; size = 4
_fangle$1$ = -4						; size = 4
_loopcount$1$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_isCombo$ = 20						; size = 4
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightBlow, COMDAT
; _this$ = ecx

; 3730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3731 : 	LPOBJ lpObj = &gObj[aIndex];
; 3732 : 	int StartDis = 1;
; 3733 : 	int tObjNum;
; 3734 : 
; 3735 : 	float fangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  00006	69 55 0c 40 27
	00 00		 imul	 edx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000d	53		 push	 ebx
  0000e	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _aIndex$[ebp], 10048
  00015	56		 push	 esi
  00016	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001c	57		 push	 edi
  0001d	03 de		 add	 ebx, esi
  0001f	8b f9		 mov	 edi, ecx
  00021	0f b6 84 32 21
	01 00 00	 movzx	 eax, BYTE PTR [edx+esi+289]
  00029	50		 push	 eax
  0002a	0f b6 84 32 20
	01 00 00	 movzx	 eax, BYTE PTR [edx+esi+288]
  00032	50		 push	 eax
  00033	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  0003a	50		 push	 eax
  0003b	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle

; 3736 : 	float fSkillDist = MagicDamageC.GetSkillDistance(lpMagic->m_Skill)+1.0f;

  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004d	66 0f 6e c0	 movd	 xmm0, eax
  00051	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00054	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00057	ff 70 08	 push	 DWORD PTR [eax+8]
  0005a	f3 0f 11 45 fc	 movss	 DWORD PTR _fangle$1$[ebp], xmm0
  0005f	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 3737 : 
; 3738 : 	this->MLS_SkillFrustrum(aIndex,fangle,1.5f,fSkillDist);

  00064	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00067	8b cf		 mov	 ecx, edi
  00069	66 0f 6e c0	 movd	 xmm0, eax
  0006d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00070	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00078	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0007e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fangle$1$[ebp]
  00083	c7 44 24 04 00
	00 c0 3f	 mov	 DWORD PTR [esp+4], 1069547520 ; 3fc00000H
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00093	e8 00 00 00 00	 call	 ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum

; 3739 : 
; 3740 : 	int count = 0;
; 3741 : 	int loopcount = 0;
; 3742 : 	int attackcheck;
; 3743 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  00098	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0009b	33 f6		 xor	 esi, esi
  0009d	6a 01		 push	 1
  0009f	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  000a2	33 ff		 xor	 edi, edi
  000a4	89 75 fc	 mov	 DWORD PTR _loopcount$1$[ebp], esi
  000a7	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000ab	50		 push	 eax
  000ac	53		 push	 ebx
  000ad	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3744 : 
; 3745 : 	int DuelIndex = lpObj->m_iDuelUser;

  000b2	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  000b8	83 c4 10	 add	 esp, 16			; 00000010H
  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c1	89 45 f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
$LL2@MLS_Knight:

; 3746 : 	int EnableAttack;
; 3747 : 
; 3748 : 	while ( true )
; 3749 : 	{
; 3750 : 		if(lpObj->VpPlayer2[count].state != 0)

  000c4	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000c7	80 bc 83 48 0c
	00 00 00	 cmp	 BYTE PTR [ebx+eax*4+3144], 0
  000cf	0f 84 58 01 00
	00		 je	 $LN22@MLS_Knight

; 3751 : 		{
; 3752 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000d5	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000d8	0f bf b4 83 4a
	0c 00 00	 movsx	 esi, WORD PTR [ebx+eax*4+3146]

; 3753 : 
; 3754 : 			if(tObjNum >= 0)

  000e0	85 f6		 test	 esi, esi
  000e2	0f 88 42 01 00
	00		 js	 $LN36@MLS_Knight

; 3755 : 			{
; 3756 : 				EnableAttack = 0;
; 3757 : 
; 3758 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000e8	8a 94 83 4c 0c
	00 00		 mov	 dl, BYTE PTR [ebx+eax*4+3148]
  000ef	80 fa 02	 cmp	 dl, 2
  000f2	75 14		 jne	 SHORT $LN6@MLS_Knight
  000f4	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  000fa	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  00102	0f 8c 9c 00 00
	00		 jl	 $LN10@MLS_Knight
$LN6@MLS_Knight:

; 3759 : 				{
; 3760 : 					EnableAttack = 1;
; 3761 : 				}
; 3762 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00108	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  0010b	0f 84 93 00 00
	00		 je	 $LN10@MLS_Knight
  00111	39 75 f8	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  00114	0f 84 8a 00 00
	00		 je	 $LN10@MLS_Knight

; 3763 : 				{
; 3764 : 					EnableAttack = 1;
; 3765 : 				}
; 3766 : #if (GS_CASTLE == 1)
; 3767 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0011a	80 fa 03	 cmp	 dl, 3
  0011d	74 40		 je	 SHORT $LN11@MLS_Knight
  0011f	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00125	89 45 f4	 mov	 DWORD PTR tv398[ebp], eax
  00128	80 bc 08 23 01
	00 00 1e	 cmp	 BYTE PTR [eax+ecx+291], 30 ; 0000001eH
  00130	75 2d		 jne	 SHORT $LN11@MLS_Knight
  00132	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00137	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 3768 : 				{
; 3769 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00142	83 f8 07	 cmp	 eax, 7
  00145	75 18		 jne	 SHORT $LN11@MLS_Knight
  00147	8b 55 f4	 mov	 edx, DWORD PTR tv398[ebp]
  0014a	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  00150	3a 84 0a 5a 20
	00 00		 cmp	 al, BYTE PTR [edx+ecx+8282]
  00157	0f 84 cd 00 00
	00		 je	 $LN36@MLS_Knight

; 3770 : 						EnableAttack = 1;
; 3771 : 				}
; 3772 : #endif
; 3773 : 				else

  0015d	eb 45		 jmp	 SHORT $LN10@MLS_Knight
$LN11@MLS_Knight:

; 3774 : 				{
; 3775 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0015f	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 3776 : 
; 3777 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00165	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  0016a	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  0016d	75 14		 jne	 SHORT $LN14@MLS_Knight
  0016f	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  00176	85 c0		 test	 eax, eax
  00178	78 09		 js	 SHORT $LN14@MLS_Knight

; 3778 : 					{
; 3779 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0017a	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00180	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN14@MLS_Knight:

; 3780 : 					}
; 3781 : 
; 3782 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00183	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00189	03 c1		 add	 eax, ecx
  0018b	50		 push	 eax
  0018c	53		 push	 ebx
  0018d	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00192	83 c4 08	 add	 esp, 8
  00195	83 f8 01	 cmp	 eax, 1
  00198	0f 85 86 00 00
	00		 jne	 $LN34@MLS_Knight
  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_Knight:

; 3783 : 					{
; 3784 : 						EnableAttack = 1;
; 3785 : 					}
; 3786 : 				}
; 3787 : 
; 3788 : 				if(EnableAttack != 0)
; 3789 : 				{
; 3790 : 					attackcheck = 0;
; 3791 : 
; 3792 : 					if(loopcount == 0)

  001a4	83 7d fc 00	 cmp	 DWORD PTR _loopcount$1$[ebp], 0
  001a8	74 17		 je	 SHORT $LN32@MLS_Knight

; 3793 : 					{
; 3794 : 						attackcheck = 1;
; 3795 : 					}
; 3796 : 					else if(rand()%3==0)

  001aa	e8 00 00 00 00	 call	 _rand
  001af	99		 cdq
  001b0	b9 03 00 00 00	 mov	 ecx, 3
  001b5	f7 f9		 idiv	 ecx
  001b7	85 d2		 test	 edx, edx
  001b9	75 69		 jne	 SHORT $LN34@MLS_Knight
  001bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN32@MLS_Knight:

; 3797 : 					{
; 3798 : 						attackcheck = 1;
; 3799 : 					}
; 3800 : 
; 3801 : 					if(attackcheck != 0)
; 3802 : 					{
; 3803 : 						if(::SkillTestFrustrum(gObj[tObjNum].X,gObj[tObjNum].Y,aIndex))

  001c1	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  001c4	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  001ca	0f b6 84 0e 21
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+289]
  001d2	50		 push	 eax
  001d3	0f b6 84 0e 20
	01 00 00	 movzx	 eax, BYTE PTR [esi+ecx+288]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?SkillTestFrustrum@@YAHHHH@Z ; SkillTestFrustrum
  001e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e4	85 c0		 test	 eax, eax
  001e6	74 3c		 je	 SHORT $LN34@MLS_Knight

; 3804 : 						{
; 3805 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	6a 00		 push	 0
  001ef	6a 00		 push	 0
  001f1	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  001f4	03 c6		 add	 eax, esi
  001f6	6a 00		 push	 0
  001f8	6a 01		 push	 1
  001fa	6a 00		 push	 0
  001fc	ff 75 10	 push	 DWORD PTR _lpMagic$[ebp]
  001ff	50		 push	 eax
  00200	53		 push	 ebx
  00201	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00206	83 c4 24	 add	 esp, 36			; 00000024H

; 3806 : 							if(isCombo != 0)

  00209	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0020d	74 15		 je	 SHORT $LN34@MLS_Knight

; 3807 : 							{
; 3808 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  0020f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00214	6a 01		 push	 1
  00216	ff 34 06	 push	 DWORD PTR [esi+eax]
  00219	6a 3b		 push	 59			; 0000003bH
  0021b	53		 push	 ebx
  0021c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00221	83 c4 10	 add	 esp, 16			; 00000010H
$LN34@MLS_Knight:
  00224	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_Knight:
  0022a	8b 75 fc	 mov	 esi, DWORD PTR _loopcount$1$[ebp]
$LN22@MLS_Knight:

; 3809 : 							}
; 3810 : 						}
; 3811 : 					}
; 3812 : 				}
; 3813 : 			}
; 3814 : 		}
; 3815 : 
; 3816 : 		count++;

  0022d	47		 inc	 edi

; 3817 : 		if(count > MAX_VIEWPORT -1)

  0022e	83 ff 4a	 cmp	 edi, 74			; 0000004aH
  00231	0f 8e 8d fe ff
	ff		 jle	 $LL2@MLS_Knight

; 3818 : 		{
; 3819 : 			loopcount++;

  00237	46		 inc	 esi

; 3820 : 			count = 0;

  00238	33 ff		 xor	 edi, edi
  0023a	89 75 fc	 mov	 DWORD PTR _loopcount$1$[ebp], esi

; 3821 : 			if(loopcount >= 3)

  0023d	83 fe 03	 cmp	 esi, 3
  00240	0f 8c 7e fe ff
	ff		 jl	 $LL2@MLS_Knight

; 3822 : 			{
; 3823 : 				break;
; 3824 : 			}
; 3825 : 		}
; 3826 : 	}
; 3827 : 	return true;

  00246	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00249	5f		 pop	 edi
  0024a	5e		 pop	 esi
  0024b	5b		 pop	 ebx

; 3828 : }

  0024c	8b e5		 mov	 esp, ebp
  0024e	5d		 pop	 ebp
  0024f	c2 10 00	 ret	 16			; 00000010H
?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z
_TEXT	SEGMENT
_lpObj$1$ = -168					; size = 4
tv393 = -164						; size = 4
_vFrustrum$ = -160					; size = 48
_Matrix$ = -112						; size = 48
_p$ = -64						; size = 48
_Angle$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_fangle$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum, COMDAT
; _this$ = ecx

; 3691 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3692 : 	LPOBJ lpObj = &gObj[aIndex];
; 3693 : 
; 3694 : 	float p[MAX_ARRAY_FRUSTRUM][3];
; 3695 : 
; 3696 : 	p[0][0] = -tx;

  00013	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _tx$[ebp]
  00018	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  0001b	0f 28 c2	 movaps	 xmm0, xmm2
  0001e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000

; 3697 : 	p[0][1] = ty;

  00025	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _ty$[ebp]
  0002a	56		 push	 esi
  0002b	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 3698 : 	p[0][2] = 0;
; 3699 : 	p[1][0] = tx;
; 3700 : 	p[1][1] = ty;
; 3701 : 	p[1][2] = 0;
; 3702 : 	p[2][0] = 1.0f;
; 3703 : 	p[2][1] = 0;
; 3704 : 	p[2][2] = 0;
; 3705 : 	p[3][0] = -1.0f;
; 3706 : 	p[3][1] = 0;
; 3707 : 	p[3][2] = 0;
; 3708 : 
; 3709 : 	float Angle[3];
; 3710 : 
; 3711 : 	Angle[0] = 0;
; 3712 : 	Angle[1] = 0;
; 3713 : 	Angle[2] = fangle;
; 3714 : 
; 3715 : 	float Matrix[3][MAX_ARRAY_FRUSTRUM];
; 3716 : 	float vFrustrum[MAX_ARRAY_FRUSTRUM][3];
; 3717 : 
; 3718 : 	AngleMatrix(Angle,Matrix);

  00031	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  00034	f3 0f 11 45 c0	 movss	 DWORD PTR _p$[ebp], xmm0
  00039	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000000003f80000000000000
  00040	57		 push	 edi
  00041	50		 push	 eax
  00042	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00048	8d 45 f0	 lea	 eax, DWORD PTR _Angle$[ebp]
  0004b	0f 11 45 d4	 movups	 XMMWORD PTR _p$[ebp+20], xmm0
  0004f	50		 push	 eax
  00050	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fangle$[ebp]
  00055	89 b5 58 ff ff
	ff		 mov	 DWORD PTR _lpObj$1$[ebp], esi
  0005b	f3 0f 11 4d c4	 movss	 DWORD PTR _p$[ebp+4], xmm1
  00060	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+8], 0
  00067	f3 0f 11 55 cc	 movss	 DWORD PTR _p$[ebp+12], xmm2
  0006c	f3 0f 11 4d d0	 movss	 DWORD PTR _p$[ebp+16], xmm1
  00071	c7 45 e4 00 00
	80 bf		 mov	 DWORD PTR _p$[ebp+36], -1082130432 ; bf800000H
  00078	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+40], 0
  0007f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _p$[ebp+44], 0
  00086	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Angle$[ebp], 0
  0008d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Angle$[ebp+4], 0
  00094	f3 0f 11 45 f8	 movss	 DWORD PTR _Angle$[ebp+8], xmm0
  00099	e8 00 00 00 00	 call	 ?AngleMatrix@@YAXPBMPAY03M@Z ; AngleMatrix
  0009e	8d 86 98 14 00
	00		 lea	 eax, DWORD PTR [esi+5272]
  000a4	83 c4 08	 add	 esp, 8
  000a7	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv393[ebp], eax

; 3719 : 
; 3720 : 	for(int i = 0; i < MAX_ARRAY_FRUSTRUM; i++)

  000ad	33 ff		 xor	 edi, edi
  000af	90		 npad	 1
$LL4@MLS_SkillF:

; 3721 : 	{
; 3722 : 		VectorRotate((const float *)&p[i],(const float *)&Matrix[0],(float *)&vFrustrum[i]);

  000b0	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR _vFrustrum$[ebp]
  000b6	03 f7		 add	 esi, edi
  000b8	8d 45 90	 lea	 eax, DWORD PTR _Matrix$[ebp]
  000bb	56		 push	 esi
  000bc	50		 push	 eax
  000bd	8d 45 c0	 lea	 eax, DWORD PTR _p$[ebp]
  000c0	03 c7		 add	 eax, edi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?VectorRotate@@YAXQBM0QAM@Z ; VectorRotate

; 3723 : 
; 3724 : 		lpObj->fSkillFrustrumX[i] = (int)vFrustrum[i][0] + lpObj->X;

  000c8	f3 0f 2c 0e	 cvttss2si ecx, DWORD PTR [esi]
  000cc	8b b5 58 ff ff
	ff		 mov	 esi, DWORD PTR _lpObj$1$[ebp]
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d5	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv393[ebp]
  000db	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  000e2	03 c8		 add	 ecx, eax
  000e4	89 4a f0	 mov	 DWORD PTR [edx-16], ecx

; 3725 : 		lpObj->fSkillFrustrumY[i] = (int)vFrustrum[i][1] + lpObj->Y;

  000e7	f3 0f 2c 8c 3d
	64 ff ff ff	 cvttss2si ecx, DWORD PTR _vFrustrum$[ebp+edi+4]
  000f0	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  000f7	83 c7 0c	 add	 edi, 12			; 0000000cH
  000fa	03 c8		 add	 ecx, eax
  000fc	89 0a		 mov	 DWORD PTR [edx], ecx
  000fe	83 c2 04	 add	 edx, 4
  00101	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv393[ebp], edx
  00107	83 ff 30	 cmp	 edi, 48			; 00000030H
  0010a	7c a4		 jl	 SHORT $LL4@MLS_SkillF

; 3726 : 	}
; 3727 : }

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	5f		 pop	 edi
  00110	33 cd		 xor	 ecx, ebp
  00112	5e		 pop	 esi
  00113	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillFrustrum@CMasterLevelSkillTreeSystem@@QAEXHMMM@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFrustrum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z
_TEXT	SEGMENT
tv135 = -8						; size = 8
tv130 = -8						; size = 8
tv84 = -8						; size = 8
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_tx$ = 16						; size = 4
_ty$ = 20						; size = 4
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_GetAngle, COMDAT
; _this$ = ecx

; 3676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3677 : 	double diffX = x - tx;
; 3678 : 	double diffY = y - ty;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00009	2b 45 14	 sub	 eax, DWORD PTR _ty$[ebp]
  0000c	66 0f 6e c0	 movd	 xmm0, eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00013	2b 45 10	 sub	 eax, DWORD PTR _tx$[ebp]
  00016	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0

; 3679 : 
; 3680 : 	double rad = atan2(diffY,diffX);

  0001a	f2 0f 11 45 f8	 movsd	 QWORD PTR tv135[ebp], xmm0
  0001f	dd 45 f8	 fld	 QWORD PTR tv135[ebp]
  00022	66 0f 6e c0	 movd	 xmm0, eax
  00026	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0002a	f2 0f 11 45 f8	 movsd	 QWORD PTR tv130[ebp], xmm0
  0002f	dd 45 f8	 fld	 QWORD PTR tv130[ebp]
  00032	e8 00 00 00 00	 call	 __CIatan2

; 3681 : 
; 3682 : 	int angle  = rad*180/M_PI + 90.0f;

  00037	dd 5d f8	 fstp	 QWORD PTR tv84[ebp]
  0003a	f2 0f 10 45 f8	 movsd	 xmm0, QWORD PTR tv84[ebp]
  0003f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4066800000000000
  00047	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@400921fb60000000
  0004f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4056800000000000
  00057	f2 0f 2c c0	 cvttsd2si eax, xmm0

; 3683 : 
; 3684 : 	if( angle < 0 )

  0005b	85 c0		 test	 eax, eax
  0005d	79 05		 jns	 SHORT $LN2@MLS_GetAng

; 3685 : 		angle += 360;

  0005f	05 68 01 00 00	 add	 eax, 360		; 00000168H
$LN2@MLS_GetAng:

; 3686 : 
; 3687 : return angle;
; 3688 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 10 00	 ret	 16			; 00000010H
?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_GetAngle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_CalDistance, COMDAT
; _this$ = ecx

; 3660 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H

; 3661 : 	if( x == x1 &&

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00009	8b 55 14	 mov	 edx, DWORD PTR _y1$[ebp]
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  0000f	3b 4d 10	 cmp	 ecx, DWORD PTR _x1$[ebp]
  00012	75 0c		 jne	 SHORT $LN2@MLS_CalDis
  00014	3b c2		 cmp	 eax, edx
  00016	75 08		 jne	 SHORT $LN2@MLS_CalDis

; 3662 : 		y == y1 )
; 3663 : 		return 0;

  00018	33 c0		 xor	 eax, eax

; 3669 : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
$LN2@MLS_CalDis:

; 3664 : 
; 3665 : 	float tx = x - x1;

  00020	2b 4d 10	 sub	 ecx, DWORD PTR _x1$[ebp]

; 3666 : 	float ty = y - y1;

  00023	2b c2		 sub	 eax, edx
  00025	66 0f 6e c9	 movd	 xmm1, ecx
  00029	66 0f 6e c0	 movd	 xmm0, eax
  0002d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00030	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 3668 : 	return sqrt((tx*tx)+(ty*ty));

  00033	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00037	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0003b	f3 0f 58 c1	 addss	 xmm0, xmm1
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  0003f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00042	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00047	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp

; 3668 : 	return sqrt((tx*tx)+(ty*ty));

  0004b	f3 0f 2c c0	 cvttss2si eax, xmm0

; 3669 : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 10 00	 ret	 16			; 00000010H
?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_CalDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
tv456 = -12						; size = 4
_DuelIndex$1$ = -8					; size = 4
tv457 = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SuddenIce, COMDAT
; _this$ = ecx

; 3565 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3566 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _aIndex$[ebp], 10048
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	03 d6		 add	 edx, esi
  00017	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001a	57		 push	 edi
  0001b	89 55 08	 mov	 DWORD PTR _lpObj$1$[ebp], edx

; 3567 : 	int tObjNum;
; 3568 : 	int count = 0;
; 3569 : 	int FirstHit = 0;
; 3570 : 	int HitCount = 0;
; 3571 : 	int bAttack;
; 3572 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 3573 : 	int DuelIndex = lpObj->m_iDuelUser;

  0001e	8b 82 50 12 00
	00		 mov	 eax, DWORD PTR [edx+4688]
  00024	8d 9a 4c 0c 00
	00		 lea	 ebx, DWORD PTR [edx+3148]
  0002a	89 45 f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0002d	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  00032	89 45 fc	 mov	 DWORD PTR tv457[ebp], eax
$LL2@MLS_Sudden:

; 3574 : 	int EnableAttack;
; 3575 : 
; 3576 : 	while ( true )
; 3577 : 	{
; 3578 : 		if(lpObj->VpPlayer2[count].state != 0)

  00035	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00039	0f 84 24 01 00
	00		 je	 $LN22@MLS_Sudden

; 3579 : 		{
; 3580 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0003f	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 3581 : 
; 3582 : 			if(tObjNum >= 0)

  00043	85 ff		 test	 edi, edi
  00045	0f 88 18 01 00
	00		 js	 $LN22@MLS_Sudden

; 3583 : 			{
; 3584 : 				EnableAttack = 0;
; 3585 : 
; 3586 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0004b	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0004d	80 f9 02	 cmp	 cl, 2
  00050	75 14		 jne	 SHORT $LN6@MLS_Sudden
  00052	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00058	83 bc 30 30 06
	00 00 00	 cmp	 DWORD PTR [eax+esi+1584], 0
  00060	0f 8c 9b 00 00
	00		 jl	 $LN10@MLS_Sudden
$LN6@MLS_Sudden:

; 3587 : 				{
; 3588 : 					EnableAttack = 1;
; 3589 : 				}
; 3590 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00066	3b 7d 18	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00069	0f 84 92 00 00
	00		 je	 $LN10@MLS_Sudden
  0006f	39 7d f8	 cmp	 DWORD PTR _DuelIndex$1$[ebp], edi
  00072	0f 84 89 00 00
	00		 je	 $LN10@MLS_Sudden

; 3591 : 				{
; 3592 : 					EnableAttack = 1;
; 3593 : 				}
; 3594 : #if (GS_CASTLE == 1)
; 3595 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00078	80 f9 03	 cmp	 cl, 3
  0007b	74 43		 je	 SHORT $LN11@MLS_Sudden
  0007d	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00083	89 45 f4	 mov	 DWORD PTR tv456[ebp], eax
  00086	80 bc 30 23 01
	00 00 1e	 cmp	 BYTE PTR [eax+esi+291], 30 ; 0000001eH
  0008e	75 30		 jne	 SHORT $LN11@MLS_Sudden
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00095	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 3596 : 				{
; 3597 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0009a	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
  0009d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a3	83 f8 07	 cmp	 eax, 7
  000a6	75 18		 jne	 SHORT $LN11@MLS_Sudden
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR tv456[ebp]
  000ab	8a 82 5a 20 00
	00		 mov	 al, BYTE PTR [edx+8282]
  000b1	3a 84 31 5a 20
	00 00		 cmp	 al, BYTE PTR [ecx+esi+8282]
  000b8	0f 84 a2 00 00
	00		 je	 $LN36@MLS_Sudden

; 3598 : 						EnableAttack = 1;
; 3599 : 				}
; 3600 : #endif
; 3601 : 				else

  000be	eb 41		 jmp	 SHORT $LN10@MLS_Sudden
$LN11@MLS_Sudden:

; 3602 : 				{
; 3603 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000c0	69 c7 40 27 00
	00		 imul	 eax, edi, 10048

; 3604 : 
; 3605 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000c6	80 7c 30 50 02	 cmp	 BYTE PTR [eax+esi+80], 2
  000cb	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000ce	75 14		 jne	 SHORT $LN14@MLS_Sudden
  000d0	8b 84 30 30 06
	00 00		 mov	 eax, DWORD PTR [eax+esi+1584]
  000d7	85 c0		 test	 eax, eax
  000d9	78 09		 js	 SHORT $LN14@MLS_Sudden

; 3606 : 					{
; 3607 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000db	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000e1	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
$LN14@MLS_Sudden:

; 3608 : 					}
; 3609 : 
; 3610 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000e4	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  000ea	03 c6		 add	 eax, esi
  000ec	50		 push	 eax
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000f3	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f9	83 c4 08	 add	 esp, 8
  000fc	83 f8 01	 cmp	 eax, 1
  000ff	75 5c		 jne	 SHORT $LN35@MLS_Sudden
$LN10@MLS_Sudden:

; 3611 : 					{
; 3612 : 						EnableAttack = 1;
; 3613 : 					}
; 3614 : 				}
; 3615 : 
; 3616 : 				if(EnableAttack != 0)
; 3617 : 				{
; 3618 : 					if( this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  00101	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00104	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  0010a	0f b6 84 37 21
	01 00 00	 movzx	 eax, BYTE PTR [edi+esi+289]
  00112	50		 push	 eax
  00113	0f b6 84 37 20
	01 00 00	 movzx	 eax, BYTE PTR [edi+esi+288]
  0011b	50		 push	 eax
  0011c	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  00120	50		 push	 eax
  00121	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  0012b	83 f8 04	 cmp	 eax, 4
  0012e	7d 2d		 jge	 SHORT $LN35@MLS_Sudden

; 3619 : 					{
; 3620 : 						bAttack = 0;
; 3621 : 						
; 3622 : 						if(HitCount >= 5)
; 3623 : 						{
; 3624 : 							if(rand()%2)
; 3625 : 							{
; 3626 : 								bAttack = 1;
; 3627 : 							}
; 3628 : 						}
; 3629 : 						else
; 3630 : 						{
; 3631 : 							bAttack = 1;
; 3632 : 						}
; 3633 : 
; 3634 : 						if(HitCount > 10)
; 3635 : 						{
; 3636 : 							bAttack = 0;
; 3637 : 						}
; 3638 : 
; 3639 : 						if(bAttack != 0)
; 3640 : 						{
; 3641 : 							int delay = rand()%500;

  00130	e8 00 00 00 00	 call	 _rand

; 3642 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,1,1,0,0,0,0);

  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013a	6a 00		 push	 0
  0013c	6a 00		 push	 0
  0013e	6a 00		 push	 0
  00140	6a 00		 push	 0
  00142	6a 01		 push	 1
  00144	6a 01		 push	 1
  00146	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00149	03 c7		 add	 eax, edi
  0014b	50		 push	 eax
  0014c	ff 75 08	 push	 DWORD PTR _lpObj$1$[ebp]
  0014f	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00154	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015a	83 c4 24	 add	 esp, 36			; 00000024H
$LN35@MLS_Sudden:
  0015d	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
$LN36@MLS_Sudden:
  00160	8b 45 fc	 mov	 eax, DWORD PTR tv457[ebp]
$LN22@MLS_Sudden:

; 3643 : //							gObjAddBuffEffect(&gObj[tObjNum],BUFF_STUN,0,0,0,0,3); //fix
; 3644 : 						}
; 3645 : 					}
; 3646 : 				}
; 3647 : 			}
; 3648 : 		}
; 3649 : 
; 3650 : 		count++;

  00163	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 3651 : 		if(count > MAX_VIEWPORT -1)

  00166	83 e8 01	 sub	 eax, 1
  00169	89 45 fc	 mov	 DWORD PTR tv457[ebp], eax
  0016c	0f 85 c3 fe ff
	ff		 jne	 $LL2@MLS_Sudden

; 3652 : 		{
; 3653 : 			break;
; 3654 : 		}
; 3655 : 	}
; 3656 : 	return true;

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	b8 01 00 00 00	 mov	 eax, 1
  00179	5b		 pop	 ebx

; 3657 : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 14 00	 ret	 20			; 00000014H
?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z
_TEXT	SEGMENT
_tObjNum$1$ = -36					; size = 4
_DuelIndex$1$ = -32					; size = 4
_nMaxCount$1$ = -28					; size = 4
_nMinCount$1$ = -24					; size = 4
_nHitCount$1$ = -20					; size = 4
tv627 = -16						; size = 4
tv626 = -12						; size = 4
_lpObj$1$ = -8						; size = 4
_bAttack$1$ = -4					; size = 4
_bRet$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv617 = 16						; size = 4
_x$ = 16						; size = 1
tv631 = 20						; size = 4
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_aDistance$ = 28					; size = 4
_bPVP$ = 32						; size = 4
_nSuccessRate$ = 36					; size = 4
_nDelay$ = 40						; size = 4
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack, COMDAT
; _this$ = ecx

; 3406 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 3407 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	69 45 08 40 27
	00 00		 imul	 eax, DWORD PTR _aIndex$[ebp], 10048
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx

; 3408 : 	int bRet = FALSE;

  00012	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _bRet$1$[ebp], 0
  00019	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001f	89 45 f8	 mov	 DWORD PTR _lpObj$1$[ebp], eax

; 3409 : 	int count = 0;
; 3410 : 	int tObjNum;
; 3411 : 	int attackcheck;
; 3412 : 	int DuelIndex = lpObj->m_iDuelUser;
; 3413 : 	int nHitCount = 0;

  00022	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nHitCount$1$[ebp], 0

; 3414 : 	int bAttack = FALSE;
; 3415 : 
; 3416 : 	int nMinCount = 4;

  00029	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _nMinCount$1$[ebp], 4
  00030	8b 88 50 12 00
	00		 mov	 ecx, DWORD PTR [eax+4688]
  00036	89 4d e0	 mov	 DWORD PTR _DuelIndex$1$[ebp], ecx
  00039	33 c9		 xor	 ecx, ecx
  0003b	89 4d fc	 mov	 DWORD PTR _bAttack$1$[ebp], ecx

; 3417 : 	int nMaxCount = 8;
; 3418 : 
; 3419 : 	if( lpMagic->m_Skill == AT_MSKILL_MG_GIGANTICSTORM1 )

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00041	c7 45 e4 08 00
	00 00		 mov	 DWORD PTR _nMaxCount$1$[ebp], 8
  00048	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0004b	81 f9 f0 01 00
	00		 cmp	 ecx, 496		; 000001f0H
  00051	75 0e		 jne	 SHORT $LN7@MLS_SkillA

; 3420 : 	{
; 3421 : 		nMinCount = 8;

  00053	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR _nMinCount$1$[ebp], 8

; 3422 : 		nMaxCount = 12;

  0005a	c7 45 e4 0c 00
	00 00		 mov	 DWORD PTR _nMaxCount$1$[ebp], 12 ; 0000000cH
$LN7@MLS_SkillA:

; 3423 : 	}
; 3424 : 
; 3425 : 	if( x == FALSE &&

  00061	8a 7d 10	 mov	 bh, BYTE PTR _x$[ebp]
  00064	8a 5d 14	 mov	 bl, BYTE PTR _y$[ebp]
  00067	84 ff		 test	 bh, bh
  00069	75 10		 jne	 SHORT $LN8@MLS_SkillA
  0006b	84 db		 test	 bl, bl
  0006d	75 0c		 jne	 SHORT $LN8@MLS_SkillA

; 3426 : 		y == FALSE )
; 3427 : 	{
; 3428 : 		x = lpObj->X;

  0006f	8a b8 20 01 00
	00		 mov	 bh, BYTE PTR [eax+288]

; 3429 : 		y = lpObj->Y;

  00075	8a 98 21 01 00
	00		 mov	 bl, BYTE PTR [eax+289]
$LN8@MLS_SkillA:

; 3430 : 	}
; 3431 : 
; 3432 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  0007b	51		 push	 ecx
  0007c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00081	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance
  00086	8b f0		 mov	 esi, eax

; 3433 : 
; 3434 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  00088	0f b6 cf	 movzx	 ecx, bh
  0008b	0f b6 c3	 movzx	 eax, bl
  0008e	8b 5d f8	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
  00091	50		 push	 eax
  00092	89 45 f0	 mov	 DWORD PTR tv627[ebp], eax
  00095	51		 push	 ecx
  00096	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  0009d	50		 push	 eax
  0009e	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  000a5	89 4d f4	 mov	 DWORD PTR tv626[ebp], ecx
  000a8	8b cf		 mov	 ecx, edi
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  000b0	3b c6		 cmp	 eax, esi
  000b2	0f 8f 8a 02 00
	00		 jg	 $LN52@MLS_SkillA

; 3430 : 	}
; 3431 : 
; 3432 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  000b8	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
  000bb	8d 83 4c 0c 00
	00		 lea	 eax, DWORD PTR [ebx+3148]
  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  000cc	89 45 10	 mov	 DWORD PTR tv617[ebp], eax
  000cf	c7 45 14 4b 00
	00 00		 mov	 DWORD PTR tv631[ebp], 75 ; 0000004bH
  000d6	eb 0b		 jmp	 SHORT $LN2@MLS_SkillA
  000d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL63@MLS_SkillA:
  000e0	8b 45 10	 mov	 eax, DWORD PTR tv617[ebp]
$LN2@MLS_SkillA:

; 3435 : 	{
; 3436 : 		while( TRUE )
; 3437 : 		{
; 3438 : 			if(lpObj->VpPlayer2[count].state != 0)

  000e3	80 78 fc 00	 cmp	 BYTE PTR [eax-4], 0
  000e7	0f 84 2e 02 00
	00		 je	 $LN58@MLS_SkillA

; 3439 : 			{
; 3440 : 				tObjNum = lpObj->VpPlayer2[count].number;

  000ed	0f bf 78 fe	 movsx	 edi, WORD PTR [eax-2]
  000f1	89 7d dc	 mov	 DWORD PTR _tObjNum$1$[ebp], edi

; 3441 : 
; 3442 : 				if( tObjNum >= 0 )

  000f4	85 ff		 test	 edi, edi
  000f6	0f 88 1f 02 00
	00		 js	 $LN58@MLS_SkillA

; 3443 : 				{
; 3444 : 					int EnableAttack = 0;
; 3445 : 
; 3446 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000fc	8a 10		 mov	 dl, BYTE PTR [eax]
  000fe	80 fa 02	 cmp	 dl, 2
  00101	75 14		 jne	 SHORT $LN12@MLS_SkillA
  00103	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00109	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  00111	0f 8c a2 00 00
	00		 jl	 $LN50@MLS_SkillA
$LN12@MLS_SkillA:

; 3447 : 					{
; 3448 : 						EnableAttack = 1;
; 3449 : 					}
; 3450 : 					else if( (tObjNum == aTargetIndex && bPVP == 1) || DuelIndex ==tObjNum )

  00117	3b 7d 18	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  0011a	75 0a		 jne	 SHORT $LN17@MLS_SkillA
  0011c	83 7d 20 01	 cmp	 DWORD PTR _bPVP$[ebp], 1
  00120	0f 84 93 00 00
	00		 je	 $LN50@MLS_SkillA
$LN17@MLS_SkillA:
  00126	39 7d e0	 cmp	 DWORD PTR _DuelIndex$1$[ebp], edi
  00129	0f 84 8a 00 00
	00		 je	 $LN50@MLS_SkillA

; 3451 : 					{
; 3452 : 						EnableAttack = 1;
; 3453 : 					}
; 3454 : #if (GS_CASTLE == 1)
; 3455 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  0012f	80 fa 03	 cmp	 dl, 3
  00132	74 40		 je	 SHORT $LN18@MLS_SkillA
  00134	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0013a	80 bc 0e 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+ecx+291], 30 ; 0000001eH
  00142	75 2d		 jne	 SHORT $LN65@MLS_SkillA
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00149	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 3456 : 					{
; 3457 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  0014e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00154	83 f8 07	 cmp	 eax, 7
  00157	75 18		 jne	 SHORT $LN65@MLS_SkillA
  00159	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  0015f	3a 84 0e 5a 20
	00 00		 cmp	 al, BYTE PTR [esi+ecx+8282]

; 3458 : 							EnableAttack = 1;
; 3459 : 					}	
; 3460 : #endif
; 3461 : 					else

  00166	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
  00169	0f 84 b4 01 00
	00		 je	 $LN67@MLS_SkillA
  0016f	eb 48		 jmp	 SHORT $LN50@MLS_SkillA
$LN65@MLS_SkillA:
  00171	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
$LN18@MLS_SkillA:

; 3462 : 					{
; 3463 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  00174	69 c7 40 27 00
	00		 imul	 eax, edi, 10048

; 3464 : 	
; 3465 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  0017a	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  0017f	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00182	75 14		 jne	 SHORT $LN21@MLS_SkillA
  00184	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  0018b	85 c0		 test	 eax, eax
  0018d	78 09		 js	 SHORT $LN21@MLS_SkillA

; 3466 : 						{
; 3467 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0018f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00195	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN21@MLS_SkillA:

; 3468 : 						}
; 3469 : 	
; 3470 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00198	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  0019e	03 c1		 add	 eax, ecx
  001a0	50		 push	 eax
  001a1	53		 push	 ebx
  001a2	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  001a7	83 c4 08	 add	 esp, 8
  001aa	83 f8 01	 cmp	 eax, 1
  001ad	0f 85 a2 00 00
	00		 jne	 $LN55@MLS_SkillA
  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN50@MLS_SkillA:

; 3471 : 						{
; 3472 : 							EnableAttack = 1;
; 3473 : 						}
; 3474 : 					}
; 3475 : 
; 3476 : 					if( EnableAttack != 0 )
; 3477 : 					{
; 3478 : 						attackcheck = 0;
; 3479 : 
; 3480 : 						if( nSuccessRate == 0 )

  001b9	85 f6		 test	 esi, esi
  001bb	74 16		 je	 SHORT $LN51@MLS_SkillA

; 3481 : 						{
; 3482 : 							attackcheck = 1;
; 3483 : 						}
; 3484 : 						else
; 3485 : 						{
; 3486 : 							attackcheck = rand()%nSuccessRate;

  001bd	e8 00 00 00 00	 call	 _rand
  001c2	99		 cdq
  001c3	f7 fe		 idiv	 esi

; 3487 : 						}
; 3488 : 						
; 3489 : 						if( attackcheck != 0 )

  001c5	85 d2		 test	 edx, edx
  001c7	0f 84 88 00 00
	00		 je	 $LN55@MLS_SkillA
  001cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN51@MLS_SkillA:

; 3490 : 						{
; 3491 : 							if( gObj[tObjNum].X >= (x -aDistance) &&
; 3492 : 								gObj[tObjNum].X <= (x +aDistance) &&
; 3493 : 								gObj[tObjNum].Y >= (y -aDistance) &&

  001d3	8b 45 f4	 mov	 eax, DWORD PTR tv626[ebp]
  001d6	2b 45 1c	 sub	 eax, DWORD PTR _aDistance$[ebp]
  001d9	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  001df	0f b6 b4 0f 20
	01 00 00	 movzx	 esi, BYTE PTR [edi+ecx+288]
  001e7	8d 14 0f	 lea	 edx, DWORD PTR [edi+ecx]
  001ea	3b f0		 cmp	 esi, eax
  001ec	0f 8c 2e 01 00
	00		 jl	 $LN62@MLS_SkillA
  001f2	8b 45 1c	 mov	 eax, DWORD PTR _aDistance$[ebp]
  001f5	03 45 f4	 add	 eax, DWORD PTR tv626[ebp]
  001f8	8b 5d f8	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
  001fb	3b f0		 cmp	 esi, eax
  001fd	0f 8f 12 01 00
	00		 jg	 $LN61@MLS_SkillA
  00203	8b 45 f0	 mov	 eax, DWORD PTR tv627[ebp]
  00206	0f b6 b2 21 01
	00 00		 movzx	 esi, BYTE PTR [edx+289]
  0020d	2b 45 1c	 sub	 eax, DWORD PTR _aDistance$[ebp]
  00210	3b f0		 cmp	 esi, eax
  00212	0f 8c 08 01 00
	00		 jl	 $LN62@MLS_SkillA
  00218	8b 45 1c	 mov	 eax, DWORD PTR _aDistance$[ebp]
  0021b	03 45 f0	 add	 eax, DWORD PTR tv627[ebp]
  0021e	3b f0		 cmp	 esi, eax
  00220	0f 8f fa 00 00
	00		 jg	 $LN62@MLS_SkillA

; 3494 : 								gObj[tObjNum].Y <= (y +aDistance) )
; 3495 : 							{
; 3496 : 								gObj[tObjNum].lpAttackObj = lpObj;
; 3497 : 								nHitCount++;

  00226	8b 75 ec	 mov	 esi, DWORD PTR _nHitCount$1$[ebp]
  00229	46		 inc	 esi
  0022a	89 9a b4 05 00
	00		 mov	 DWORD PTR [edx+1460], ebx
  00230	89 75 ec	 mov	 DWORD PTR _nHitCount$1$[ebp], esi

; 3498 : 	
; 3499 : 								if( nHitCount > nMinCount )

  00233	3b 75 e8	 cmp	 esi, DWORD PTR _nMinCount$1$[ebp]
  00236	7e 13		 jle	 SHORT $LN28@MLS_SkillA

; 3500 : 								{
; 3501 : 									if(rand()%2)

  00238	e8 00 00 00 00	 call	 _rand
  0023d	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00242	79 05		 jns	 SHORT $LN66@MLS_SkillA
  00244	48		 dec	 eax
  00245	83 c8 fe	 or	 eax, -2			; fffffffeH
  00248	40		 inc	 eax
$LN66@MLS_SkillA:
  00249	74 15		 je	 SHORT $LN64@MLS_SkillA
$LN28@MLS_SkillA:

; 3502 : 									{
; 3503 : 										bAttack = TRUE;

  0024b	ba 01 00 00 00	 mov	 edx, 1
  00250	89 55 fc	 mov	 DWORD PTR _bAttack$1$[ebp], edx

; 3504 : 									}
; 3505 : 								}
; 3506 : 								else

  00253	eb 0e		 jmp	 SHORT $LN29@MLS_SkillA
$LN55@MLS_SkillA:

; 3543 : 									}
; 3544 : 								}
; 3545 : 
; 3546 : 								bRet = TRUE;

  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025b	e9 c3 00 00 00	 jmp	 $LN67@MLS_SkillA
$LN64@MLS_SkillA:
  00260	8b 55 fc	 mov	 edx, DWORD PTR _bAttack$1$[ebp]
$LN29@MLS_SkillA:

; 3507 : 								{
; 3508 : 									bAttack = TRUE;
; 3509 : 								}
; 3510 : 	
; 3511 : 								if( nHitCount > nMaxCount )

  00263	3b 75 e4	 cmp	 esi, DWORD PTR _nMaxCount$1$[ebp]
  00266	7e 0a		 jle	 SHORT $LN31@MLS_SkillA

; 3512 : 								{
; 3513 : 									bAttack = FALSE;

  00268	33 c9		 xor	 ecx, ecx
  0026a	89 4d fc	 mov	 DWORD PTR _bAttack$1$[ebp], ecx

; 3514 : 								}
; 3515 : 
; 3516 : 								if( bAttack == TRUE )

  0026d	e9 90 00 00 00	 jmp	 $LN34@MLS_SkillA
$LN31@MLS_SkillA:
  00272	83 fa 01	 cmp	 edx, 1
  00275	0f 85 87 00 00
	00		 jne	 $LN34@MLS_SkillA

; 3517 : 								{
; 3518 : 									if( nDelay == 0 )

  0027b	8b 75 28	 mov	 esi, DWORD PTR _nDelay$[ebp]
  0027e	85 f6		 test	 esi, esi
  00280	75 69		 jne	 SHORT $LN33@MLS_SkillA

; 3519 : 									{
; 3520 : 										if( lpMagic->m_Skill == AT_MSKILL_RF_DRAGONRORE1 
; 3521 : 											|| lpMagic->m_Skill == AT_MSKILL_RF_DRAGONRORE2 )

  00282	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00285	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00288	3d 30 02 00 00	 cmp	 eax, 560		; 00000230H
  0028d	74 21		 je	 SHORT $LN37@MLS_SkillA
  0028f	3d 31 02 00 00	 cmp	 eax, 561		; 00000231H
  00294	74 1a		 je	 SHORT $LN37@MLS_SkillA

; 3532 : 												}
; 3533 : 											}
; 3534 : 										}
; 3535 : 										else
; 3536 : 										{
; 3537 : 											gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,FALSE,0,0,0,0);

  00296	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0029b	56		 push	 esi
  0029c	56		 push	 esi
  0029d	56		 push	 esi
  0029e	56		 push	 esi
  0029f	56		 push	 esi
  002a0	52		 push	 edx
  002a1	51		 push	 ecx
  002a2	03 c7		 add	 eax, edi
  002a4	50		 push	 eax
  002a5	53		 push	 ebx
  002a6	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  002ab	83 c4 24	 add	 esp, 36			; 00000024H
  002ae	eb 52		 jmp	 SHORT $LN34@MLS_SkillA
$LN37@MLS_SkillA:

; 3522 : 										{
; 3523 : 											for(int i = 1; i <= 4; i++)

  002b0	be 01 00 00 00	 mov	 esi, 1
$LL6@MLS_SkillA:

; 3524 : 											{
; 3525 : 												if( i == 1 )
; 3526 : 												{
; 3527 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,TRUE,TRUE,0,0,i,0);

  002b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ba	03 c7		 add	 eax, edi
  002bc	6a 00		 push	 0
  002be	83 fe 01	 cmp	 esi, 1
  002c1	75 09		 jne	 SHORT $LN38@MLS_SkillA
  002c3	56		 push	 esi
  002c4	6a 00		 push	 0
  002c6	6a 00		 push	 0
  002c8	56		 push	 esi
  002c9	56		 push	 esi

; 3528 : 												}
; 3529 : 												else

  002ca	eb 09		 jmp	 SHORT $LN68@MLS_SkillA
$LN38@MLS_SkillA:

; 3530 : 												{
; 3531 : 													gObjAttack(lpObj,&gObj[tObjNum],lpMagic,FALSE,TRUE,0,0,i,0);

  002cc	56		 push	 esi
  002cd	6a 00		 push	 0
  002cf	6a 00		 push	 0
  002d1	6a 01		 push	 1
  002d3	6a 00		 push	 0
$LN68@MLS_SkillA:
  002d5	51		 push	 ecx
  002d6	50		 push	 eax
  002d7	53		 push	 ebx
  002d8	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  002dd	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  002e0	46		 inc	 esi
  002e1	83 c4 24	 add	 esp, 36			; 00000024H
  002e4	83 fe 04	 cmp	 esi, 4
  002e7	7e cc		 jle	 SHORT $LL6@MLS_SkillA

; 3538 : 										}
; 3539 : 									}
; 3540 : 									else

  002e9	eb 17		 jmp	 SHORT $LN34@MLS_SkillA
$LN33@MLS_SkillA:

; 3541 : 									{
; 3542 : 										gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,nDelay,lpMagic->m_Skill,0);

  002eb	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  002ee	6a 00		 push	 0
  002f0	ff 70 08	 push	 DWORD PTR [eax+8]
  002f3	56		 push	 esi
  002f4	ff 75 dc	 push	 DWORD PTR _tObjNum$1$[ebp]
  002f7	6a 32		 push	 50			; 00000032H
  002f9	53		 push	 ebx
  002fa	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  002ff	83 c4 18	 add	 esp, 24			; 00000018H
$LN34@MLS_SkillA:

; 3543 : 									}
; 3544 : 								}
; 3545 : 
; 3546 : 								bRet = TRUE;

  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00308	b8 01 00 00 00	 mov	 eax, 1
  0030d	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
  00310	89 45 08	 mov	 DWORD PTR _bRet$1$[ebp], eax
  00313	eb 11		 jmp	 SHORT $LN69@MLS_SkillA
$LN61@MLS_SkillA:
  00315	8b 55 14	 mov	 edx, DWORD PTR tv631[ebp]
  00318	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
$LN58@MLS_SkillA:
  0031b	8b 45 08	 mov	 eax, DWORD PTR _bRet$1$[ebp]
  0031e	eb 09		 jmp	 SHORT $LN27@MLS_SkillA
$LN62@MLS_SkillA:
  00320	8b 75 24	 mov	 esi, DWORD PTR _nSuccessRate$[ebp]
$LN67@MLS_SkillA:
  00323	8b 45 08	 mov	 eax, DWORD PTR _bRet$1$[ebp]
$LN69@MLS_SkillA:
  00326	8b 55 14	 mov	 edx, DWORD PTR tv631[ebp]
$LN27@MLS_SkillA:

; 3547 : 							}
; 3548 : 						}
; 3549 : 					}
; 3550 : 				}
; 3551 : 			}
; 3552 : 
; 3553 : 			count++;

  00329	83 45 10 0c	 add	 DWORD PTR tv617[ebp], 12 ; 0000000cH

; 3554 : 
; 3555 : 			if( count > (MAX_VIEWPORT-1) )

  0032d	83 ea 01	 sub	 edx, 1
  00330	89 55 14	 mov	 DWORD PTR tv631[ebp], edx
  00333	0f 85 a7 fd ff
	ff		 jne	 $LL63@MLS_SkillA
  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi
  0033b	5b		 pop	 ebx

; 3562 : }

  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c2 24 00	 ret	 36			; 00000024H
$LN52@MLS_SkillA:
  00342	5f		 pop	 edi
  00343	5e		 pop	 esi

; 3556 : 			{
; 3557 : 				break;
; 3558 : 			}
; 3559 : 		}
; 3560 : 	}
; 3561 : 	return bRet;

  00344	33 c0		 xor	 eax, eax
  00346	5b		 pop	 ebx

; 3562 : }

  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c2 24 00	 ret	 36			; 00000024H
?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_iangle$1$ = -12					; size = 4
_DuelIndex$1$ = -8					; size = 4
tv534 = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear, COMDAT
; _this$ = ecx

; 3311 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3312 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx
  0000c	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _aIndex$[ebp], 10048
  00013	56		 push	 esi
  00014	57		 push	 edi

; 3313 : 	int StartDis = 1;
; 3314 : 	int tObjNum;
; 3315 : 
; 3316 : 	int iangle = this->MLS_GetAngle(lpObj->X,lpObj->Y,gObj[aTargetIndex].X,gObj[aTargetIndex].Y);

  00015	8b 7d 0c	 mov	 edi, DWORD PTR _aTargetIndex$[ebp]
  00018	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0001e	03 d8		 add	 ebx, eax
  00020	89 5d 08	 mov	 DWORD PTR _lpObj$1$[ebp], ebx
  00023	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
  00026	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  0002d	50		 push	 eax
  0002e	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00035	50		 push	 eax
  00036	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  0003d	50		 push	 eax
  0003e	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?MLS_GetAngle@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_GetAngle

; 3317 : 	int count = 0;
; 3318 : 	int loopcount = 0;
; 3319 : 	int attackcheck;
; 3320 : 
; 3321 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,aTargetIndex,1);

  0004b	6a 01		 push	 1
  0004d	57		 push	 edi
  0004e	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00051	89 45 f4	 mov	 DWORD PTR _iangle$1$[ebp], eax
  00054	0f b7 4f 08	 movzx	 ecx, WORD PTR [edi+8]
  00058	51		 push	 ecx
  00059	53		 push	 ebx
  0005a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0005f	83 c4 10	 add	 esp, 16			; 00000010H

; 3322 : 
; 3323 : 	if(lpObj->SkillLongSpearChange == 0)

  00062	80 bb 0a 16 00
	00 00		 cmp	 BYTE PTR [ebx+5642], 0
  00069	75 2c		 jne	 SHORT $LN4@MLS_SkillS

; 3324 : 	{
; 3325 : 		gObjAttack(lpObj,&gObj[aTargetIndex],lpMagic,0,1,0,0,0,0);

  0006b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00070	6a 00		 push	 0
  00072	6a 00		 push	 0
  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	6a 01		 push	 1
  0007a	6a 00		 push	 0
  0007c	57		 push	 edi
  0007d	03 c6		 add	 eax, esi
  0007f	50		 push	 eax
  00080	53		 push	 ebx
  00081	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00086	83 c4 24	 add	 esp, 36			; 00000024H

; 3398 : 		{
; 3399 : 			break;
; 3400 : 		}
; 3401 : 	}
; 3402 : 	return true;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx

; 3403 : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
$LN4@MLS_SkillS:

; 3326 : 		return true;
; 3327 : 	}
; 3328 : 
; 3329 : 	int DuelIndex = lpObj->m_iDuelUser;

  00097	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  0009d	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  000a3	89 45 f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  000a6	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b0	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv534[ebp], 75 ; 0000004bH
  000b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@MLS_SkillS:

; 3330 : 	int EnableAttack;
; 3331 : 
; 3332 : 	while ( true )
; 3333 : 	{
; 3334 : 		if(lpObj->VpPlayer2[count].state != 0)

  000c0	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  000c4	0f 84 27 01 00
	00		 je	 $LN22@MLS_SkillS

; 3335 : 		{
; 3336 : 			tObjNum = lpObj->VpPlayer2[count].number;

  000ca	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 3337 : 
; 3338 : 			if(tObjNum >= 0)

  000ce	85 f6		 test	 esi, esi
  000d0	0f 88 1b 01 00
	00		 js	 $LN22@MLS_SkillS

; 3339 : 			{
; 3340 : 				EnableAttack = 0;
; 3341 : 
; 3342 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000d6	8a 17		 mov	 dl, BYTE PTR [edi]
  000d8	80 fa 02	 cmp	 dl, 2
  000db	75 14		 jne	 SHORT $LN7@MLS_SkillS
  000dd	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  000e3	83 bc 01 30 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1584], 0
  000eb	0f 8c 9e 00 00
	00		 jl	 $LN11@MLS_SkillS
$LN7@MLS_SkillS:

; 3343 : 				{
; 3344 : 					EnableAttack = 1;
; 3345 : 				}
; 3346 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000f1	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000f4	0f 84 95 00 00
	00		 je	 $LN11@MLS_SkillS
  000fa	39 75 f8	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000fd	0f 84 8c 00 00
	00		 je	 $LN11@MLS_SkillS

; 3347 : 				{
; 3348 : 					EnableAttack = 1;
; 3349 : 				}
; 3350 : #if (GS_CASTLE == 1)
; 3351 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00103	80 fa 03	 cmp	 dl, 3
  00106	74 47		 je	 SHORT $LN12@MLS_SkillS
  00108	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  0010e	80 bc 03 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+eax+291], 30 ; 0000001eH
  00116	75 34		 jne	 SHORT $LN37@MLS_SkillS
  00118	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0011d	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  00122	83 f8 07	 cmp	 eax, 7
  00125	75 20		 jne	 SHORT $LN34@MLS_SkillS

; 3352 : 				{
; 3353 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00127	8b 45 08	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  0012a	8a 88 5a 20 00
	00		 mov	 cl, BYTE PTR [eax+8282]
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00135	3a 8c 03 5a 20
	00 00		 cmp	 cl, BYTE PTR [ebx+eax+8282]

; 3354 : 						EnableAttack = 1;
; 3355 : 				}
; 3356 : #endif
; 3357 : 				else

  0013c	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
  0013f	0f 84 a9 00 00
	00		 je	 $LN36@MLS_SkillS
  00145	eb 48		 jmp	 SHORT $LN11@MLS_SkillS
$LN34@MLS_SkillS:
  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN37@MLS_SkillS:
  0014c	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$1$[ebp]
$LN12@MLS_SkillS:

; 3358 : 				{
; 3359 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  0014f	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048

; 3360 : 
; 3361 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00155	80 7c 01 50 02	 cmp	 BYTE PTR [ecx+eax+80], 2
  0015a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0015d	75 14		 jne	 SHORT $LN15@MLS_SkillS
  0015f	8b 8c 01 30 06
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+1584]
  00166	85 c9		 test	 ecx, ecx
  00168	78 09		 js	 SHORT $LN15@MLS_SkillS

; 3362 : 					{
; 3363 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0016a	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  00170	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
$LN15@MLS_SkillS:

; 3364 : 					}
; 3365 : 
; 3366 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00173	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00179	03 c8		 add	 ecx, eax
  0017b	51		 push	 ecx
  0017c	53		 push	 ebx
  0017d	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00182	83 c4 08	 add	 esp, 8
  00185	83 f8 01	 cmp	 eax, 1
  00188	75 5f		 jne	 SHORT $LN35@MLS_SkillS
  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN11@MLS_SkillS:

; 3367 : 					{
; 3368 : 						EnableAttack = 1;
; 3369 : 					}
; 3370 : 				}
; 3371 : 
; 3372 : 				if(EnableAttack != 0)
; 3373 : 				{
; 3374 : 					attackcheck = 0;
; 3375 : 
; 3376 : 					if(loopcount == 0)
; 3377 : 					{
; 3378 : 						attackcheck = 1;
; 3379 : 					}
; 3380 : 					else if(rand()%3==0)
; 3381 : 					{
; 3382 : 						attackcheck = 1;
; 3383 : 					}
; 3384 : 
; 3385 : 					if(attackcheck != 0)
; 3386 : 					{
; 3387 : 						if(SkillSpearHitBox.HitCheck(iangle,lpObj->X,lpObj->Y,gObj[tObjNum].X,gObj[tObjNum].Y))

  0018f	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  00195	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
  00198	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0019f	50		 push	 eax
  001a0	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  001a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  001ac	50		 push	 eax
  001ad	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  001b4	50		 push	 eax
  001b5	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  001bc	50		 push	 eax
  001bd	ff 75 f4	 push	 DWORD PTR _iangle$1$[ebp]
  001c0	e8 00 00 00 00	 call	 ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ; CSkillHitBox::HitCheck
  001c5	85 c0		 test	 eax, eax
  001c7	74 20		 je	 SHORT $LN35@MLS_SkillS

; 3388 : 						{
; 3389 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,0,0,0);

  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ce	6a 00		 push	 0
  001d0	6a 00		 push	 0
  001d2	6a 00		 push	 0
  001d4	6a 00		 push	 0
  001d6	6a 01		 push	 1
  001d8	6a 00		 push	 0
  001da	ff 75 10	 push	 DWORD PTR _lpMagic$[ebp]
  001dd	03 c6		 add	 eax, esi
  001df	50		 push	 eax
  001e0	53		 push	 ebx
  001e1	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  001e6	83 c4 24	 add	 esp, 36			; 00000024H
$LN35@MLS_SkillS:
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_SkillS:
  001ee	8b 4d fc	 mov	 ecx, DWORD PTR tv534[ebp]
$LN22@MLS_SkillS:

; 3390 : 						}
; 3391 : 					}
; 3392 : 				}
; 3393 : 			}
; 3394 : 		}
; 3395 : 
; 3396 : 		count++;

  001f1	83 c7 0c	 add	 edi, 12			; 0000000cH

; 3397 : 		if(count > MAX_VIEWPORT -1)

  001f4	83 e9 01	 sub	 ecx, 1
  001f7	89 4d fc	 mov	 DWORD PTR tv534[ebp], ecx
  001fa	0f 85 c0 fe ff
	ff		 jne	 $LL2@MLS_SkillS

; 3398 : 		{
; 3399 : 			break;
; 3400 : 		}
; 3401 : 	}
; 3402 : 	return true;

  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	b8 01 00 00 00	 mov	 eax, 1
  00207	5b		 pop	 ebx

; 3403 : }

  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
tv446 = -16						; size = 4
_DuelIndex$1$ = -12					; size = 4
_lpTargetObj$1$ = -8					; size = 4
tv447 = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_FireBurst, COMDAT
; _this$ = ecx

; 3220 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 3221 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00006	69 4d 0c 40 27
	00 00		 imul	 ecx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000d	53		 push	 ebx

; 3222 : 	int StartDis = 1;
; 3223 : 	int tObjNum;
; 3224 : 	int count = 0;
; 3225 : 	int loopcount = 0;
; 3226 : 
; 3227 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,1);

  0000e	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00011	56		 push	 esi
  00012	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	57		 push	 edi
  00019	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  0001c	03 f1		 add	 esi, ecx
  0001e	6a 01		 push	 1
  00020	89 4d f0	 mov	 DWORD PTR tv446[ebp], ecx
  00023	89 75 f8	 mov	 DWORD PTR _lpTargetObj$1$[ebp], esi
  00026	ff 36		 push	 DWORD PTR [esi]
  00028	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  0002c	50		 push	 eax
  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 3228 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,0,0,0);

  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	6a 01		 push	 1
  0003d	6a 00		 push	 0
  0003f	57		 push	 edi
  00040	56		 push	 esi
  00041	53		 push	 ebx
  00042	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack

; 3229 : 
; 3230 : 	int attackcheck;
; 3231 : 	int DuelIndex = lpObj->m_iDuelUser;

  00047	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  0004d	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  00053	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00056	83 c4 34	 add	 esp, 52			; 00000034H
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005e	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv447[ebp], 75 ; 0000004bH
$LL2@MLS_FireBu:

; 3232 : 	int EnableAttack;
; 3233 : 	int delaytime;
; 3234 : 
; 3235 : 	while ( true )
; 3236 : 	{
; 3237 : 		if(lpObj->VpPlayer2[count].state != 0)

  00065	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  00069	0f 84 1e 01 00
	00		 je	 $LN21@MLS_FireBu

; 3238 : 		{
; 3239 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0006f	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 3240 : 
; 3241 : 			if(tObjNum >= 0 && aTargetIndex != tObjNum)

  00073	85 f6		 test	 esi, esi
  00075	0f 88 12 01 00
	00		 js	 $LN21@MLS_FireBu
  0007b	39 75 0c	 cmp	 DWORD PTR _aTargetIndex$[ebp], esi
  0007e	0f 84 09 01 00
	00		 je	 $LN21@MLS_FireBu

; 3242 : 			{
; 3243 : 				EnableAttack = 0;
; 3244 : 
; 3245 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00084	8a 17		 mov	 dl, BYTE PTR [edi]
  00086	80 fa 02	 cmp	 dl, 2
  00089	75 14		 jne	 SHORT $LN6@MLS_FireBu
  0008b	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00091	83 bc 01 30 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1584], 0
  00099	0f 8c a0 00 00
	00		 jl	 $LN10@MLS_FireBu
$LN6@MLS_FireBu:

; 3246 : 				{
; 3247 : 					EnableAttack = 1;
; 3248 : 				}
; 3249 : 				else if(tObjNum == lpTargetObj->m_Index || DuelIndex == tObjNum)

  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _lpTargetObj$1$[ebp]
  000a2	3b 31		 cmp	 esi, DWORD PTR [ecx]
  000a4	0f 84 95 00 00
	00		 je	 $LN10@MLS_FireBu
  000aa	39 75 f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000ad	0f 84 8c 00 00
	00		 je	 $LN10@MLS_FireBu

; 3250 : 				{
; 3251 : 					EnableAttack = 1;
; 3252 : 				}
; 3253 : #if (GS_CASTLE == 1)
; 3254 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000b3	80 fa 03	 cmp	 dl, 3
  000b6	74 47		 je	 SHORT $LN11@MLS_FireBu
  000b8	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  000be	80 bc 03 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+eax+291], 30 ; 0000001eH
  000c6	75 34		 jne	 SHORT $LN35@MLS_FireBu
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000cd	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  000d2	83 f8 07	 cmp	 eax, 7
  000d5	75 20		 jne	 SHORT $LN33@MLS_FireBu

; 3255 : 				{
; 3256 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000d7	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000da	8a 88 5a 20 00
	00		 mov	 cl, BYTE PTR [eax+8282]
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e5	3a 8c 03 5a 20
	00 00		 cmp	 cl, BYTE PTR [ebx+eax+8282]
  000ec	0f 84 9b 00 00
	00		 je	 $LN21@MLS_FireBu

; 3257 : 						EnableAttack = 1;
; 3258 : 				}
; 3259 : #endif
; 3260 : 				else

  000f2	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000f5	eb 48		 jmp	 SHORT $LN10@MLS_FireBu
$LN33@MLS_FireBu:
  000f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN35@MLS_FireBu:
  000fc	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
$LN11@MLS_FireBu:

; 3261 : 				{
; 3262 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000ff	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048

; 3263 : 
; 3264 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00105	80 7c 01 50 02	 cmp	 BYTE PTR [ecx+eax+80], 2
  0010a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010d	75 14		 jne	 SHORT $LN14@MLS_FireBu
  0010f	8b 8c 01 30 06
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+1584]
  00116	85 c9		 test	 ecx, ecx
  00118	78 09		 js	 SHORT $LN14@MLS_FireBu

; 3265 : 					{
; 3266 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0011a	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  00120	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
$LN14@MLS_FireBu:

; 3267 : 					}
; 3268 : 
; 3269 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00123	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00129	03 c8		 add	 ecx, eax
  0012b	51		 push	 ecx
  0012c	53		 push	 ebx
  0012d	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00132	83 c4 08	 add	 esp, 8
  00135	83 f8 01	 cmp	 eax, 1
  00138	75 4e		 jne	 SHORT $LN34@MLS_FireBu
  0013a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN10@MLS_FireBu:

; 3270 : 					{
; 3271 : 						EnableAttack = 1;
; 3272 : 					}
; 3273 : 				}
; 3274 : 
; 3275 : 				if(EnableAttack != 0)
; 3276 : 				{
; 3277 : 					attackcheck = 0;
; 3278 : 
; 3279 : 					if(loopcount == 0)
; 3280 : 					{
; 3281 : 						attackcheck = 1;
; 3282 : 					}
; 3283 : 					else if(rand()%3==0)
; 3284 : 					{
; 3285 : 						attackcheck = 1;
; 3286 : 					}
; 3287 : 
; 3288 : 					if(attackcheck != 0)
; 3289 : 					{
; 3290 : 						if(gObjCalDistance(&gObj[aTargetIndex],&gObj[tObjNum]) < 3)

  0013f	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00145	03 c8		 add	 ecx, eax
  00147	03 45 f0	 add	 eax, DWORD PTR tv446[ebp]
  0014a	51		 push	 ecx
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00151	83 c4 08	 add	 esp, 8
  00154	83 f8 03	 cmp	 eax, 3
  00157	7d 2f		 jge	 SHORT $LN34@MLS_FireBu

; 3291 : 						{
; 3292 : 							delaytime = (rand()*17)%300 + 500;

  00159	e8 00 00 00 00	 call	 _rand
  0015e	8b c8		 mov	 ecx, eax
  00160	c1 e1 04	 shl	 ecx, 4
  00163	03 c1		 add	 eax, ecx
  00165	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0016a	99		 cdq
  0016b	f7 f9		 idiv	 ecx

; 3293 : 
; 3294 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delaytime,lpMagic->m_Skill,0);

  0016d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00170	6a 00		 push	 0
  00172	81 c2 f4 01 00
	00		 add	 edx, 500		; 000001f4H
  00178	ff 70 08	 push	 DWORD PTR [eax+8]
  0017b	52		 push	 edx
  0017c	56		 push	 esi
  0017d	6a 32		 push	 50			; 00000032H
  0017f	53		 push	 ebx
  00180	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00185	83 c4 18	 add	 esp, 24			; 00000018H
$LN34@MLS_FireBu:
  00188	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN21@MLS_FireBu:

; 3295 : 						}
; 3296 : 					}
; 3297 : 				}
; 3298 : 			}
; 3299 : 		}
; 3300 : 
; 3301 : 		count++;
; 3302 : 		if(count > MAX_VIEWPORT -1)

  0018d	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00190	83 c7 0c	 add	 edi, 12			; 0000000cH
  00193	83 6d fc 01	 sub	 DWORD PTR tv447[ebp], 1
  00197	0f 85 c8 fe ff
	ff		 jne	 $LL2@MLS_FireBu

; 3303 : 		{
; 3304 : 			break;
; 3305 : 		}
; 3306 : 	}
; 3307 : 	return true;

  0019d	5f		 pop	 edi
  0019e	5e		 pop	 esi
  0019f	b8 01 00 00 00	 mov	 eax, 1
  001a4	5b		 pop	 ebx

; 3308 : }

  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 0c 00	 ret	 12			; 0000000cH
?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_FireBurst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -8					; size = 4
tv455 = -4						; size = 4
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack, COMDAT
; _this$ = ecx

; 3125 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3126 : 	int tObjNum;
; 3127 : 	int count = 0;
; 3128 : 	int HitCount = 0;
; 3129 : 	int bAttack;
; 3130 : 	int DuelIndex = lpObj->m_iDuelUser;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 3131 : 	int EnableAttack;
; 3132 : 
; 3133 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,1);

  0000c	6a 01		 push	 1
  0000e	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  00014	ff 33		 push	 DWORD PTR [ebx]
  00016	89 45 f8	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00019	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0001c	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00020	50		 push	 eax
  00021	53		 push	 ebx
  00022	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002d	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  00033	83 c4 10	 add	 esp, 16			; 00000010H
  00036	c7 45 fc 4b 00
	00 00		 mov	 DWORD PTR tv455[ebp], 75 ; 0000004bH
  0003d	ba 0b 02 00 00	 mov	 edx, 523		; 0000020bH
  00042	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@MLS_DarkHo:

; 3134 : 
; 3135 : 	while ( true )
; 3136 : 	{
; 3137 : 		if(lpObj->VpPlayer2[count].state != 0)

  00050	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  00054	0f 84 fb 00 00
	00		 je	 $LN24@MLS_DarkHo

; 3138 : 		{
; 3139 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0005a	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 3140 : 
; 3141 : 			if(tObjNum >= 0)

  0005e	85 f6		 test	 esi, esi
  00060	0f 88 ef 00 00
	00		 js	 $LN24@MLS_DarkHo

; 3142 : 			{
; 3143 : 				EnableAttack = 0;
; 3144 : 				if( (gObj[tObjNum].Class < 100 || gObj[tObjNum].Class > 110) && gObj[tObjNum].Class != 523 )

  00066	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  0006c	0f b7 84 0b 90
	00 00 00	 movzx	 eax, WORD PTR [ebx+ecx+144]
  00074	83 f8 64	 cmp	 eax, 100		; 00000064H
  00077	72 09		 jb	 SHORT $LN7@MLS_DarkHo
  00079	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  0007c	0f 86 d0 00 00
	00		 jbe	 $LN39@MLS_DarkHo
$LN7@MLS_DarkHo:
  00082	66 3b c2	 cmp	 ax, dx
  00085	0f 84 c7 00 00
	00		 je	 $LN39@MLS_DarkHo

; 3145 : 				{
; 3146 : 	
; 3147 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  0008b	8a 07		 mov	 al, BYTE PTR [edi]
  0008d	3c 02		 cmp	 al, 2
  0008f	75 0a		 jne	 SHORT $LN8@MLS_DarkHo
  00091	83 bc 0b 30 06
	00 00 00	 cmp	 DWORD PTR [ebx+ecx+1584], 0
  00099	7c 7e		 jl	 SHORT $LN12@MLS_DarkHo
$LN8@MLS_DarkHo:

; 3148 : 					{
; 3149 : 						EnableAttack = 1;
; 3150 : 					}
; 3151 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  0009b	3b 75 0c	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  0009e	74 79		 je	 SHORT $LN12@MLS_DarkHo
  000a0	39 75 f8	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000a3	74 74		 je	 SHORT $LN12@MLS_DarkHo

; 3152 : 					{
; 3153 : 						EnableAttack = 1;
; 3154 : 					}
; 3155 : #if (GS_CASTLE == 1)
; 3156 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000a5	3c 03		 cmp	 al, 3
  000a7	74 33		 je	 SHORT $LN13@MLS_DarkHo
  000a9	80 bc 0b 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+ecx+291], 30 ; 0000001eH
  000b1	75 29		 jne	 SHORT $LN13@MLS_DarkHo
  000b3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000b8	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 3157 : 					{
; 3158 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c3	83 f8 07	 cmp	 eax, 7
  000c6	75 14		 jne	 SHORT $LN13@MLS_DarkHo
  000c8	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  000cb	8a 80 5a 20 00
	00		 mov	 al, BYTE PTR [eax+8282]
  000d1	3a 84 0b 5a 20
	00 00		 cmp	 al, BYTE PTR [ebx+ecx+8282]
  000d8	74 73		 je	 SHORT $LN37@MLS_DarkHo

; 3159 : 							EnableAttack = 1;
; 3160 : 					}
; 3161 : #endif
; 3162 : 					else

  000da	eb 3d		 jmp	 SHORT $LN12@MLS_DarkHo
$LN13@MLS_DarkHo:

; 3163 : 					{
; 3164 : 						int CallMonIndex = gObj[tObjNum].m_Index;
; 3165 : 	
; 3166 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000dc	80 7c 0b 50 02	 cmp	 BYTE PTR [ebx+ecx+80], 2
  000e1	8b 14 0b	 mov	 edx, DWORD PTR [ebx+ecx]
  000e4	75 14		 jne	 SHORT $LN16@MLS_DarkHo
  000e6	8b 84 0b 30 06
	00 00		 mov	 eax, DWORD PTR [ebx+ecx+1584]
  000ed	85 c0		 test	 eax, eax
  000ef	78 09		 js	 SHORT $LN16@MLS_DarkHo

; 3167 : 						{
; 3168 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000f1	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000f7	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN16@MLS_DarkHo:

; 3169 : 						}
; 3170 : 	
; 3171 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000fa	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  00100	03 c1		 add	 eax, ecx
  00102	50		 push	 eax
  00103	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00106	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  0010b	83 c4 08	 add	 esp, 8
  0010e	83 f8 01	 cmp	 eax, 1
  00111	75 34		 jne	 SHORT $LN36@MLS_DarkHo
  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN12@MLS_DarkHo:

; 3172 : 						{
; 3173 : 							EnableAttack = 1;
; 3174 : 						}
; 3175 : 					}
; 3176 : 	
; 3177 : 					if(EnableAttack != 0)
; 3178 : 					{
; 3179 : 						if(gObjCalDistance(lpObj,&gObj[tObjNum]) < 5)

  00119	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  0011c	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0011f	50		 push	 eax
  00120	53		 push	 ebx
  00121	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00126	83 c4 08	 add	 esp, 8
  00129	83 f8 05	 cmp	 eax, 5
  0012c	7d 19		 jge	 SHORT $LN36@MLS_DarkHo

; 3180 : 						{
; 3181 : 							bAttack = 0;
; 3182 : 	
; 3183 : 							if(HitCount > 15)
; 3184 : 							{
; 3185 : 								bAttack = 0;
; 3186 : 							}
; 3187 : 	
; 3188 : 							if(HitCount >= 10)
; 3189 : 							{
; 3190 : 								if(rand()%2)
; 3191 : 								{
; 3192 : 									bAttack = 1;
; 3193 : 								}
; 3194 : 							}
; 3195 : 							else
; 3196 : 							{
; 3197 : 								bAttack = 1;
; 3198 : 							}
; 3199 : 	
; 3200 : 							if(bAttack != 0)
; 3201 : 							{
; 3202 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  0012e	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00131	6a 00		 push	 0
  00133	ff 70 08	 push	 DWORD PTR [eax+8]
  00136	68 f4 01 00 00	 push	 500			; 000001f4H
  0013b	56		 push	 esi
  0013c	6a 32		 push	 50			; 00000032H
  0013e	53		 push	 ebx
  0013f	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00144	83 c4 18	 add	 esp, 24			; 00000018H
$LN36@MLS_DarkHo:
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN37@MLS_DarkHo:
  0014d	ba 0b 02 00 00	 mov	 edx, 523		; 0000020bH
$LN39@MLS_DarkHo:
  00152	8b 45 fc	 mov	 eax, DWORD PTR tv455[ebp]
$LN24@MLS_DarkHo:

; 3203 : 							}
; 3204 : 						}
; 3205 : 					}
; 3206 : 				}
; 3207 : 			}
; 3208 : 		}
; 3209 : 	
; 3210 : 		count++;

  00155	83 c7 0c	 add	 edi, 12			; 0000000cH

; 3211 : 		if(count > MAX_VIEWPORT -1)

  00158	83 e8 01	 sub	 eax, 1
  0015b	89 45 fc	 mov	 DWORD PTR tv455[ebp], eax
  0015e	0f 85 ec fe ff
	ff		 jne	 $LL2@MLS_DarkHo

; 3212 : 		{
; 3213 : 			break;
; 3214 : 		}
; 3215 : 	}
; 3216 : return true;

  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	b8 01 00 00 00	 mov	 eax, 1
  0016b	5b		 pop	 ebx

; 3217 : }

  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 0c 00	 ret	 12			; 0000000cH
?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -52					; size = 4
_partynum$1$ = -48					; size = 4
_fSkillValue$ = -44					; size = 4
_lpMagic$GSCopy$1$ = -40				; size = 4
_SkillTime$1$ = -36					; size = 4
_lpInfo$1$ = -36					; size = 4
_this$GSCopy$1$ = -32					; size = 4
_fRate$ = -32						; size = 4
_addcriticaldamagevalue$2$ = -28			; size = 4
tv502 = -28						; size = 4
tv500 = -28						; size = 4
tv474 = -28						; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage, COMDAT
; _this$ = ecx

; 2928 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00017	57		 push	 edi

; 2929 : 		int skillSuccess = TRUE;
; 2930 : 	LPOBJ lpObj = &gObj[aIndex];

  00018	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00021	89 45 cc	 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], eax
  00024	89 5d d8	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00027	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2931 : 
; 2932 : 	if( lpObj->Type != OBJ_USER &&

  0002d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00031	74 0d		 je	 SHORT $LN8@MLS_SkillM
  00033	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0003a	0f 84 6b 02 00
	00		 je	 $LN6@MLS_SkillM
$LN8@MLS_SkillM:

; 2933 : 		lpObj->m_RecallMon == -1 )
; 2934 : 		return;
; 2935 : 
; 2936 : 	if( lpObj->Class != CLASS_DARKLORD )

  00040	66 83 bf 90 00
	00 00 04	 cmp	 WORD PTR [edi+144], 4
  00048	0f 85 5d 02 00
	00		 jne	 $LN6@MLS_SkillM

; 2937 : 		return;
; 2938 : 
; 2939 : 	int number;
; 2940 : 	int partynum = 0;
; 2941 : 	int totallevel = 0;
; 2942 : 	int partycount;
; 2943 : 	int dis;
; 2944 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2945 : 	LPOBJ lpPartyObj;
; 2946 : 
; 2947 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2948 : 
; 2949 : 	partynum = lpObj->PartyNumber;

  0004e	8b 8f 0c 06 00
	00		 mov	 ecx, DWORD PTR [edi+1548]
  00054	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00062	89 4d d0	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00065	56		 push	 esi
  00066	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 2950 : 
; 2951 : 	if( partynum != -1 )

  0006a	83 f9 ff	 cmp	 ecx, -1
  0006d	74 5a		 je	 SHORT $LN3@MLS_SkillM

; 2952 : 	{
; 2953 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2954 : 
; 2955 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0006f	8b c1		 mov	 eax, ecx
  00071	33 db		 xor	 ebx, ebx
  00073	c1 e0 04	 shl	 eax, 4
  00076	2b c1		 sub	 eax, ecx
  00078	8d 0c 85 0c 00
	00 00		 lea	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0007f	89 4d e4	 mov	 DWORD PTR tv474[ebp], ecx
$LL4@MLS_SkillM:

; 2956 : 		{
; 2957 : 			number = gParty.m_PartyS[partynum].Number[n];

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2958 : 
; 2959 : 			if( number >= 0 )

  00084	85 c0		 test	 eax, eax
  00086	78 32		 js	 SHORT $LN2@MLS_SkillM

; 2960 : 			{
; 2961 : 				lpPartyObj = &gObj[number];

  00088	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2962 : 
; 2963 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008e	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00094	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000a0	75 18		 jne	 SHORT $LN2@MLS_SkillM

; 2964 : 				{
; 2965 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000a2	56		 push	 esi
  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR tv474[ebp]
  000ac	83 c4 08	 add	 esp, 8

; 2966 : 
; 2967 : 					if( dis < 10 )

  000af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b2	7d 06		 jge	 SHORT $LN2@MLS_SkillM

; 2968 : 					{
; 2969 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000b4	8b 06		 mov	 eax, DWORD PTR [esi]
  000b6	89 44 9d e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ebx*4], eax
$LN2@MLS_SkillM:

; 2952 : 	{
; 2953 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2954 : 
; 2955 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ba	43		 inc	 ebx
  000bb	83 c1 04	 add	 ecx, 4
  000be	89 4d e4	 mov	 DWORD PTR tv474[ebp], ecx
  000c1	83 fb 05	 cmp	 ebx, 5
  000c4	7c bc		 jl	 SHORT $LL4@MLS_SkillM
  000c6	8b 5d d8	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
$LN3@MLS_SkillM:

; 2970 : 					}
; 2971 : 				}
; 2972 : 			}
; 2973 : 		}
; 2974 : 	}
; 2975 : 	
; 2976 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000c9	ff 73 08	 push	 DWORD PTR [ebx+8]
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000d1	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  000d6	8b f0		 mov	 esi, eax
  000d8	89 75 dc	 mov	 DWORD PTR _lpInfo$1$[ebp], esi

; 2977 : 
; 2978 : 	if( !lpInfo )

  000db	85 f6		 test	 esi, esi
  000dd	0f 84 c7 01 00
	00		 je	 $LN31@MLS_SkillM

; 2979 : 	{
; 2980 : 		return;
; 2981 : 	}
; 2982 : 
; 2983 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg2 + (lpObj->Leadership+lpObj->AddLeadership)/lpInfo->m_Arg1;

  000e3	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  000ea	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  000f1	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  000f8	03 d1		 add	 edx, ecx
  000fa	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00101	03 c8		 add	 ecx, eax

; 2984 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  00103	6a 02		 push	 2
  00105	66 0f 6e ca	 movd	 xmm1, edx
  00109	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0010c	66 0f 6e c1	 movd	 xmm0, ecx
  00110	f3 0f 5e 4e 04	 divss	 xmm1, DWORD PTR [esi+4]
  00115	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00118	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011b	ff 73 08	 push	 DWORD PTR [ebx+8]
  0011e	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  00123	57		 push	 edi
  00124	f3 0f 58 c8	 addss	 xmm1, xmm0
  00128	f3 0f 2c f1	 cvttss2si esi, xmm1
  0012c	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 2985 : 
; 2986 : 	if( addcriticaldamagevalue > lpInfo->m_Arg3 )

  00131	8b 45 dc	 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  00134	66 0f 6e c6	 movd	 xmm0, esi
  00138	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0013b	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  00140	f3 0f 11 45 e4	 movss	 DWORD PTR tv502[ebp], xmm0
  00145	d8 45 e4	 fadd	 DWORD PTR tv502[ebp]
  00148	d9 5d e4	 fstp	 DWORD PTR tv500[ebp]
  0014b	f3 0f 2c 75 e4	 cvttss2si esi, DWORD PTR tv500[ebp]
  00150	89 75 e4	 mov	 DWORD PTR _addcriticaldamagevalue$2$[ebp], esi
  00153	66 0f 6e c6	 movd	 xmm0, esi
  00157	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015a	0f 2f c1	 comiss	 xmm0, xmm1
  0015d	76 07		 jbe	 SHORT $LN15@MLS_SkillM

; 2987 : 	{
; 2988 : 		addcriticaldamagevalue = lpInfo->m_Arg3;

  0015f	f3 0f 2c c1	 cvttss2si eax, xmm1
  00163	89 45 e4	 mov	 DWORD PTR _addcriticaldamagevalue$2$[ebp], eax
$LN15@MLS_SkillM:

; 2989 : 	}
; 2990 : 
; 2991 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  00166	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00169	6a 01		 push	 1
  0016b	ff 73 08	 push	 DWORD PTR [ebx+8]
  0016e	57		 push	 edi
  0016f	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 2992 : 	int SkillTime = lpInfo->m_Arg4 + (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg5 + fSkillValue;

  00174	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  0017b	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00182	03 c8		 add	 ecx, eax
  00184	8b 45 dc	 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  00187	d9 5d d4	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0018a	66 0f 6e c1	 movd	 xmm0, ecx
  0018e	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2993 : 
; 2994 : 	if( SkillTime > lpInfo->m_Arg6 )

  00191	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [eax+24]
  00196	f3 0f 5e 40 14	 divss	 xmm0, DWORD PTR [eax+20]
  0019b	f3 0f 58 40 10	 addss	 xmm0, DWORD PTR [eax+16]
  001a0	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  001a5	f3 0f 2c d8	 cvttss2si ebx, xmm0
  001a9	89 5d dc	 mov	 DWORD PTR _SkillTime$1$[ebp], ebx
  001ac	66 0f 6e c3	 movd	 xmm0, ebx
  001b0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001b3	0f 2f c1	 comiss	 xmm0, xmm1
  001b6	76 07		 jbe	 SHORT $LN16@MLS_SkillM

; 2995 : 	{
; 2996 : 		SkillTime = lpInfo->m_Arg6;

  001b8	f3 0f 2c d9	 cvttss2si ebx, xmm1
  001bc	89 5d dc	 mov	 DWORD PTR _SkillTime$1$[ebp], ebx
$LN16@MLS_SkillM:

; 2997 : 	}
; 2998 : 
; 2999 : 	float fRate = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001bf	8b 75 d8	 mov	 esi, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  001c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001c7	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  001cb	50		 push	 eax
  001cc	ff 76 08	 push	 DWORD PTR [esi+8]
  001cf	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001d4	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 3000 : 
; 3001 : 	if( partynum == -1 )

  001dd	83 7d d0 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001e1	d9 5d e0	 fstp	 DWORD PTR _fRate$[ebp]
  001e4	75 5a		 jne	 SHORT $LN17@MLS_SkillM

; 3002 : 	{
; 3003 : 		gObjAddBuffEffect(lpObj,BUFF_ADD_CRITDMG2,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,ADD_OPTION_INCCRITDMG,fRate,SkillTime);

  001e6	f3 0f 2c 45 e0	 cvttss2si eax, DWORD PTR _fRate$[ebp]
  001eb	53		 push	 ebx
  001ec	50		 push	 eax
  001ed	6a 37		 push	 55			; 00000037H
  001ef	ff 75 e4	 push	 DWORD PTR _addcriticaldamagevalue$2$[ebp]
  001f2	6a 11		 push	 17			; 00000011H
  001f4	68 94 00 00 00	 push	 148			; 00000094H
  001f9	57		 push	 edi
  001fa	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  001ff	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3004 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  00202	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00207	53		 push	 ebx
  00208	68 d8 04 00 00	 push	 1240			; 000004d8H
  0020d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00212	50		 push	 eax
  00213	ff 75 cc	 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  00216	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3005 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0021b	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  0021f	6a 01		 push	 1
  00221	ff 37		 push	 DWORD PTR [edi]
  00223	50		 push	 eax
  00224	57		 push	 edi
  00225	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0022a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0022d	5e		 pop	 esi
  0022e	5f		 pop	 edi
  0022f	5b		 pop	 ebx

; 3018 : 			}
; 3019 : 		}
; 3020 : 	}
; 3021 : }

  00230	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00233	33 cd		 xor	 ecx, ebp
  00235	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 0c 00	 ret	 12			; 0000000cH
$LN17@MLS_SkillM:

; 3006 : 	}
; 3007 : 	else
; 3008 : 	{
; 3009 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00240	33 db		 xor	 ebx, ebx
$LL7@MLS_SkillM:

; 3010 : 		{
; 3011 : 			if( ApplyPartyIndex[n] != -1 )

  00242	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00246	83 f8 ff	 cmp	 eax, -1
  00249	74 59		 je	 SHORT $LN5@MLS_SkillM

; 3012 : 			{
; 3013 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 3014 : 
; 3015 : 				gObjAddBuffEffect(lpPartyObj,BUFF_ADD_CRITDMG2,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,ADD_OPTION_INCCRITDMG,fRate,SkillTime);

  0024b	ff 75 dc	 push	 DWORD PTR _SkillTime$1$[ebp]
  0024e	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00254	f3 0f 2c 45 e0	 cvttss2si eax, DWORD PTR _fRate$[ebp]
  00259	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0025f	50		 push	 eax
  00260	6a 37		 push	 55			; 00000037H
  00262	ff 75 e4	 push	 DWORD PTR _addcriticaldamagevalue$2$[ebp]
  00265	6a 11		 push	 17			; 00000011H
  00267	68 94 00 00 00	 push	 148			; 00000094H
  0026c	56		 push	 esi
  0026d	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00272	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3016 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  00275	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0027a	ff 75 dc	 push	 DWORD PTR _SkillTime$1$[ebp]
  0027d	68 d8 04 00 00	 push	 1240			; 000004d8H
  00282	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00287	50		 push	 eax
  00288	ff 36		 push	 DWORD PTR [esi]
  0028a	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 3017 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0028f	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00292	6a 01		 push	 1
  00294	ff 36		 push	 DWORD PTR [esi]
  00296	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0029a	50		 push	 eax
  0029b	57		 push	 edi
  0029c	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  002a1	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN5@MLS_SkillM:

; 3006 : 	}
; 3007 : 	else
; 3008 : 	{
; 3009 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  002a4	43		 inc	 ebx
  002a5	83 fb 05	 cmp	 ebx, 5
  002a8	7c 98		 jl	 SHORT $LL7@MLS_SkillM
$LN31@MLS_SkillM:
  002aa	5e		 pop	 esi
$LN6@MLS_SkillM:

; 3018 : 			}
; 3019 : 		}
; 3020 : 	}
; 3021 : }

  002ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ae	5f		 pop	 edi
  002af	33 cd		 xor	 ecx, ebp
  002b1	5b		 pop	 ebx
  002b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -48					; size = 4
_partynum$1$ = -44					; size = 4
_lpMagic$GSCopy$1$ = -40				; size = 4
tv498 = -36						; size = 4
tv496 = -36						; size = 4
_this$GSCopy$1$ = -32					; size = 4
tv490 = -32						; size = 4
tv488 = -32						; size = 4
_SkillTime$1$ = -28					; size = 4
_addcriticaldamagevalue$1$ = -28			; size = 4
tv470 = -28						; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage, COMDAT
; _this$ = ecx

; 2835 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00017	57		 push	 edi

; 2836 : 	int skillSuccess = TRUE;
; 2837 : 	LPOBJ lpObj = &gObj[aIndex];

  00018	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00021	89 45 d0	 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], eax
  00024	89 5d d8	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00027	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2838 : 
; 2839 : 	if( lpObj->Type != OBJ_USER &&

  0002d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00031	74 0d		 je	 SHORT $LN8@MLS_SkillS
  00033	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0003a	0f 84 49 02 00
	00		 je	 $LN6@MLS_SkillS
$LN8@MLS_SkillS:

; 2840 : 		lpObj->m_RecallMon == -1 )
; 2841 : 		return;
; 2842 : 
; 2843 : 	if( lpObj->Class != CLASS_DARKLORD )

  00040	66 83 bf 90 00
	00 00 04	 cmp	 WORD PTR [edi+144], 4
  00048	0f 85 3b 02 00
	00		 jne	 $LN6@MLS_SkillS

; 2844 : 		return;
; 2845 : 
; 2846 : 	int number;
; 2847 : 	int partynum = 0;
; 2848 : 	int totallevel = 0;
; 2849 : 	int partycount;
; 2850 : 	int dis;
; 2851 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2852 : 	LPOBJ lpPartyObj;
; 2853 : 
; 2854 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2855 : 
; 2856 : 	partynum = lpObj->PartyNumber;

  0004e	8b 8f 0c 06 00
	00		 mov	 ecx, DWORD PTR [edi+1548]
  00054	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00062	89 4d d4	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00065	56		 push	 esi
  00066	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 2857 : 
; 2858 : 	if( partynum != -1 )

  0006a	83 f9 ff	 cmp	 ecx, -1
  0006d	74 5a		 je	 SHORT $LN3@MLS_SkillS

; 2859 : 	{
; 2860 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2861 : 
; 2862 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0006f	8b c1		 mov	 eax, ecx
  00071	33 db		 xor	 ebx, ebx
  00073	c1 e0 04	 shl	 eax, 4
  00076	2b c1		 sub	 eax, ecx
  00078	8d 0c 85 0c 00
	00 00		 lea	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0007f	89 4d e4	 mov	 DWORD PTR tv470[ebp], ecx
$LL4@MLS_SkillS:

; 2863 : 		{
; 2864 : 			number = gParty.m_PartyS[partynum].Number[n];

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2865 : 
; 2866 : 			if( number >= 0 )

  00084	85 c0		 test	 eax, eax
  00086	78 32		 js	 SHORT $LN2@MLS_SkillS

; 2867 : 			{
; 2868 : 				lpPartyObj = &gObj[number];

  00088	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2869 : 
; 2870 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008e	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00094	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000a0	75 18		 jne	 SHORT $LN2@MLS_SkillS

; 2871 : 				{
; 2872 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000a2	56		 push	 esi
  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR tv470[ebp]
  000ac	83 c4 08	 add	 esp, 8

; 2873 : 
; 2874 : 					if( dis < 10 )

  000af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b2	7d 06		 jge	 SHORT $LN2@MLS_SkillS

; 2875 : 					{
; 2876 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000b4	8b 06		 mov	 eax, DWORD PTR [esi]
  000b6	89 44 9d e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ebx*4], eax
$LN2@MLS_SkillS:

; 2859 : 	{
; 2860 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2861 : 
; 2862 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ba	43		 inc	 ebx
  000bb	83 c1 04	 add	 ecx, 4
  000be	89 4d e4	 mov	 DWORD PTR tv470[ebp], ecx
  000c1	83 fb 05	 cmp	 ebx, 5
  000c4	7c bc		 jl	 SHORT $LL4@MLS_SkillS
  000c6	8b 5d d8	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
$LN3@MLS_SkillS:

; 2877 : 					}
; 2878 : 				}
; 2879 : 			}
; 2880 : 		}
; 2881 : 	}
; 2882 : 
; 2883 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000c9	ff 73 08	 push	 DWORD PTR [ebx+8]
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000d1	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  000d6	8b f0		 mov	 esi, eax

; 2884 : 
; 2885 : 	if( !lpInfo )

  000d8	85 f6		 test	 esi, esi
  000da	0f 84 a8 01 00
	00		 je	 $LN31@MLS_SkillS

; 2886 : 	{
; 2887 : 		return;
; 2888 : 	}
; 2889 : 
; 2890 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg2 + (lpObj->Leadership+lpObj->AddLeadership)/lpInfo->m_Arg1;

  000e0	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  000e7	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  000ee	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  000f5	03 d1		 add	 edx, ecx
  000f7	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  000fe	03 c8		 add	 ecx, eax
  00100	66 0f 6e ca	 movd	 xmm1, edx
  00104	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00107	66 0f 6e c1	 movd	 xmm0, ecx
  0010b	f3 0f 5e 4e 04	 divss	 xmm1, DWORD PTR [esi+4]
  00110	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00113	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  00118	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011c	f3 0f 2c c1	 cvttss2si eax, xmm1

; 2891 : 
; 2892 : 	if( addcriticaldamagevalue > lpInfo->m_Arg3 )

  00120	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00125	89 45 e4	 mov	 DWORD PTR _addcriticaldamagevalue$1$[ebp], eax
  00128	66 0f 6e c0	 movd	 xmm0, eax
  0012c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0012f	0f 2f c1	 comiss	 xmm0, xmm1
  00132	76 07		 jbe	 SHORT $LN15@MLS_SkillS

; 2893 : 	{
; 2894 : 		addcriticaldamagevalue = lpInfo->m_Arg3;

  00134	f3 0f 2c c1	 cvttss2si eax, xmm1
  00138	89 45 e4	 mov	 DWORD PTR _addcriticaldamagevalue$1$[ebp], eax
$LN15@MLS_SkillS:

; 2895 : 	}
; 2896 : 
; 2897 : 	addcriticaldamagevalue += this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0013b	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0013e	6a 01		 push	 1
  00140	ff 73 08	 push	 DWORD PTR [ebx+8]
  00143	57		 push	 edi
  00144	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00149	66 0f 6e 45 e4	 movd	 xmm0, DWORD PTR _addcriticaldamagevalue$1$[ebp]

; 2898 : 	int SkillTime = lpInfo->m_Arg4 + (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg5 + this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0014e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00153	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00157	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015a	50		 push	 eax
  0015b	ff 73 08	 push	 DWORD PTR [ebx+8]
  0015e	f3 0f 11 45 dc	 movss	 DWORD PTR tv498[ebp], xmm0
  00163	d8 45 dc	 fadd	 DWORD PTR tv498[ebp]
  00166	d9 5d dc	 fstp	 DWORD PTR tv496[ebp]
  00169	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0016e	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00177	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  0017e	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00185	03 c8		 add	 ecx, eax

; 2899 : 	
; 2900 : 	if( SkillTime > lpInfo->m_Arg6 )

  00187	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  0018c	66 0f 6e c1	 movd	 xmm0, ecx
  00190	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00193	f3 0f 5e 46 14	 divss	 xmm0, DWORD PTR [esi+20]
  00198	f3 0f 58 46 10	 addss	 xmm0, DWORD PTR [esi+16]
  0019d	f3 0f 11 45 e0	 movss	 DWORD PTR tv490[ebp], xmm0
  001a2	d8 45 e0	 fadd	 DWORD PTR tv490[ebp]
  001a5	d9 5d e0	 fstp	 DWORD PTR tv488[ebp]
  001a8	f3 0f 2c 4d e0	 cvttss2si ecx, DWORD PTR tv488[ebp]
  001ad	89 4d e4	 mov	 DWORD PTR _SkillTime$1$[ebp], ecx
  001b0	66 0f 6e c1	 movd	 xmm0, ecx
  001b4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001b7	0f 2f c1	 comiss	 xmm0, xmm1
  001ba	76 07		 jbe	 SHORT $LN16@MLS_SkillS

; 2901 : 	{
; 2902 : 		SkillTime = lpInfo->m_Arg6;

  001bc	f3 0f 2c c9	 cvttss2si ecx, xmm1
  001c0	89 4d e4	 mov	 DWORD PTR _SkillTime$1$[ebp], ecx
$LN16@MLS_SkillS:

; 2903 : 	}
; 2904 : 
; 2905 : 	if( partynum == -1 )

  001c3	83 7d d4 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001c7	75 58		 jne	 SHORT $LN17@MLS_SkillS

; 2906 : 	{
; 2907 : 		gObjAddBuffEffect(lpObj,AT_INCREASE_CRITICAL_DMG,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,0,0,SkillTime);

  001c9	f3 0f 2c 45 dc	 cvttss2si eax, DWORD PTR tv496[ebp]
  001ce	51		 push	 ecx
  001cf	6a 00		 push	 0
  001d1	6a 00		 push	 0
  001d3	50		 push	 eax
  001d4	6a 11		 push	 17			; 00000011H
  001d6	6a 05		 push	 5
  001d8	57		 push	 edi
  001d9	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  001de	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2908 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001e6	ff 75 e4	 push	 DWORD PTR _SkillTime$1$[ebp]
  001e9	68 d8 04 00 00	 push	 1240			; 000004d8H
  001ee	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001f3	50		 push	 eax
  001f4	ff 75 d0	 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  001f7	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2909 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001fc	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  00200	6a 01		 push	 1
  00202	ff 37		 push	 DWORD PTR [edi]
  00204	50		 push	 eax
  00205	57		 push	 edi
  00206	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0020b	83 c4 1c	 add	 esp, 28			; 0000001cH
  0020e	5e		 pop	 esi
  0020f	5f		 pop	 edi
  00210	5b		 pop	 ebx

; 2922 : 			}
; 2923 : 		}
; 2924 : 	}
; 2925 : }

  00211	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00214	33 cd		 xor	 ecx, ebp
  00216	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c2 0c 00	 ret	 12			; 0000000cH
$LN17@MLS_SkillS:

; 2910 : 	}
; 2911 : 	else
; 2912 : 	{
; 2913 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00221	33 db		 xor	 ebx, ebx
$LL7@MLS_SkillS:

; 2914 : 		{
; 2915 : 			if( ApplyPartyIndex[n] != -1 )

  00223	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00227	83 f8 ff	 cmp	 eax, -1
  0022a	74 53		 je	 SHORT $LN5@MLS_SkillS

; 2916 : 			{
; 2917 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0022c	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2918 : 
; 2919 : 				gObjAddBuffEffect(lpPartyObj,AT_INCREASE_CRITICAL_DMG,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,0,0,SkillTime);

  00232	f3 0f 2c 45 dc	 cvttss2si eax, DWORD PTR tv496[ebp]
  00237	51		 push	 ecx
  00238	6a 00		 push	 0
  0023a	6a 00		 push	 0
  0023c	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00242	50		 push	 eax
  00243	6a 11		 push	 17			; 00000011H
  00245	6a 05		 push	 5
  00247	56		 push	 esi
  00248	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0024d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2920 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  00250	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00255	ff 75 e4	 push	 DWORD PTR _SkillTime$1$[ebp]
  00258	68 d8 04 00 00	 push	 1240			; 000004d8H
  0025d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00262	50		 push	 eax
  00263	ff 36		 push	 DWORD PTR [esi]
  00265	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2921 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  0026a	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0026d	6a 01		 push	 1
  0026f	ff 36		 push	 DWORD PTR [esi]
  00271	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00275	50		 push	 eax
  00276	57		 push	 edi
  00277	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0027c	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN5@MLS_SkillS:

; 2910 : 	}
; 2911 : 	else
; 2912 : 	{
; 2913 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0027f	8b 4d e4	 mov	 ecx, DWORD PTR _SkillTime$1$[ebp]
  00282	43		 inc	 ebx
  00283	83 fb 05	 cmp	 ebx, 5
  00286	7c 9b		 jl	 SHORT $LL7@MLS_SkillS
$LN31@MLS_SkillS:
  00288	5e		 pop	 esi
$LN6@MLS_SkillS:

; 2922 : 			}
; 2923 : 		}
; 2924 : 	}
; 2925 : }

  00289	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028c	5f		 pop	 edi
  0028d	33 cd		 xor	 ecx, ebp
  0028f	5b		 pop	 ebx
  00290	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00295	8b e5		 mov	 esp, ebp
  00297	5d		 pop	 ebp
  00298	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -44					; size = 4
_partynum$1$ = -40					; size = 4
_lpMagic$GSCopy$1$ = -36				; size = 4
_this$GSCopy$1$ = -32					; size = 4
tv498 = -32						; size = 4
tv496 = -32						; size = 4
_SkillTime$1$ = -28					; size = 4
_addcriticaldamagevalue$1$ = -28			; size = 4
tv478 = -28						; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage, COMDAT
; _this$ = ecx

; 2742 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00017	57		 push	 edi

; 2743 : 	int skillSuccess = TRUE;
; 2744 : 	LPOBJ lpObj = &gObj[aIndex];

  00018	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  0001e	89 4d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00021	89 45 d4	 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], eax
  00024	89 5d dc	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ebx
  00027	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2745 : 
; 2746 : 	if( lpObj->Type != OBJ_USER &&

  0002d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00031	74 0d		 je	 SHORT $LN8@MLS_SkillS
  00033	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0003a	0f 84 36 02 00
	00		 je	 $LN6@MLS_SkillS
$LN8@MLS_SkillS:

; 2747 : 		lpObj->m_RecallMon == -1 )
; 2748 : 		return;
; 2749 : 
; 2750 : 	if( lpObj->Class != CLASS_DARKLORD )

  00040	66 83 bf 90 00
	00 00 04	 cmp	 WORD PTR [edi+144], 4
  00048	0f 85 28 02 00
	00		 jne	 $LN6@MLS_SkillS

; 2751 : 		return;
; 2752 : 
; 2753 : 	int number;
; 2754 : 	int partynum = 0;
; 2755 : 	int totallevel = 0;
; 2756 : 	int partycount;
; 2757 : 	int dis;
; 2758 : 	int ApplyPartyIndex[MAX_USER_IN_PARTY];
; 2759 : 	LPOBJ lpPartyObj;
; 2760 : 
; 2761 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2762 : 
; 2763 : 	partynum = lpObj->PartyNumber;

  0004e	8b 8f 0c 06 00
	00		 mov	 ecx, DWORD PTR [edi+1548]
  00054	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00062	89 4d d8	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00065	56		 push	 esi
  00066	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 2764 : 
; 2765 : 	if( partynum != -1 )

  0006a	83 f9 ff	 cmp	 ecx, -1
  0006d	74 5a		 je	 SHORT $LN3@MLS_SkillS

; 2766 : 	{
; 2767 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2768 : 
; 2769 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0006f	8b c1		 mov	 eax, ecx
  00071	33 db		 xor	 ebx, ebx
  00073	c1 e0 04	 shl	 eax, 4
  00076	2b c1		 sub	 eax, ecx
  00078	8d 0c 85 0c 00
	00 00		 lea	 ecx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  0007f	89 4d e4	 mov	 DWORD PTR tv478[ebp], ecx
$LL4@MLS_SkillS:

; 2770 : 		{
; 2771 : 			number = gParty.m_PartyS[partynum].Number[n];

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2772 : 
; 2773 : 			if( number >= 0 )

  00084	85 c0		 test	 eax, eax
  00086	78 32		 js	 SHORT $LN2@MLS_SkillS

; 2774 : 			{
; 2775 : 				lpPartyObj = &gObj[number];

  00088	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2776 : 
; 2777 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008e	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00094	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  000a0	75 18		 jne	 SHORT $LN2@MLS_SkillS

; 2778 : 				{
; 2779 : 					dis = gObjCalDistance(lpObj,lpPartyObj);

  000a2	56		 push	 esi
  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR tv478[ebp]
  000ac	83 c4 08	 add	 esp, 8

; 2780 : 
; 2781 : 					if( dis < 10 )

  000af	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b2	7d 06		 jge	 SHORT $LN2@MLS_SkillS

; 2782 : 					{
; 2783 : 						ApplyPartyIndex[n] = lpPartyObj->m_Index;

  000b4	8b 06		 mov	 eax, DWORD PTR [esi]
  000b6	89 44 9d e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+ebx*4], eax
$LN2@MLS_SkillS:

; 2766 : 	{
; 2767 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2768 : 
; 2769 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000ba	43		 inc	 ebx
  000bb	83 c1 04	 add	 ecx, 4
  000be	89 4d e4	 mov	 DWORD PTR tv478[ebp], ecx
  000c1	83 fb 05	 cmp	 ebx, 5
  000c4	7c bc		 jl	 SHORT $LL4@MLS_SkillS
  000c6	8b 5d dc	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
$LN3@MLS_SkillS:

; 2784 : 					}
; 2785 : 				}
; 2786 : 			}
; 2787 : 		}
; 2788 : 	}
; 2789 : 
; 2790 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000c9	ff 73 08	 push	 DWORD PTR [ebx+8]
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  000d1	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  000d6	8b f0		 mov	 esi, eax

; 2791 : 
; 2792 : 	if( !lpInfo )

  000d8	85 f6		 test	 esi, esi
  000da	0f 84 95 01 00
	00		 je	 $LN31@MLS_SkillS

; 2793 : 	{
; 2794 : 		return;
; 2795 : 	}
; 2796 : 
; 2797 : 	int addcriticaldamagevalue = (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg2 + (lpObj->Leadership+lpObj->AddLeadership)/lpInfo->m_Arg1;

  000e0	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  000e7	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  000ee	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  000f5	03 d1		 add	 edx, ecx
  000f7	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  000fe	03 c8		 add	 ecx, eax
  00100	66 0f 6e ca	 movd	 xmm1, edx
  00104	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00107	66 0f 6e c1	 movd	 xmm0, ecx
  0010b	f3 0f 5e 4e 04	 divss	 xmm1, DWORD PTR [esi+4]
  00110	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00113	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  00118	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011c	f3 0f 2c c1	 cvttss2si eax, xmm1

; 2798 : 	
; 2799 : 	if( addcriticaldamagevalue > lpInfo->m_Arg3 )

  00120	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00125	89 45 e4	 mov	 DWORD PTR _addcriticaldamagevalue$1$[ebp], eax
  00128	66 0f 6e c0	 movd	 xmm0, eax
  0012c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0012f	0f 2f c1	 comiss	 xmm0, xmm1
  00132	76 07		 jbe	 SHORT $LN15@MLS_SkillS

; 2800 : 	{
; 2801 : 		addcriticaldamagevalue = lpInfo->m_Arg3;

  00134	f3 0f 2c c1	 cvttss2si eax, xmm1
  00138	89 45 e4	 mov	 DWORD PTR _addcriticaldamagevalue$1$[ebp], eax
$LN15@MLS_SkillS:

; 2802 : 	}
; 2803 : 	
; 2804 : 	addcriticaldamagevalue += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0013b	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  0013f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00144	50		 push	 eax
  00145	ff 73 08	 push	 DWORD PTR [ebx+8]
  00148	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0014d	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00156	66 0f 6e 45 e4	 movd	 xmm0, DWORD PTR _addcriticaldamagevalue$1$[ebp]

; 2805 : 	int SkillTime = lpInfo->m_Arg4 + (lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg5;

  0015b	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00162	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00169	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0016c	03 c8		 add	 ecx, eax

; 2806 : 	
; 2807 : 	if( SkillTime > lpInfo->m_Arg6 )

  0016e	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  00173	f3 0f 11 45 e0	 movss	 DWORD PTR tv498[ebp], xmm0
  00178	66 0f 6e c1	 movd	 xmm0, ecx
  0017c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017f	d8 45 e0	 fadd	 DWORD PTR tv498[ebp]
  00182	f3 0f 5e 46 14	 divss	 xmm0, DWORD PTR [esi+20]
  00187	d9 5d e0	 fstp	 DWORD PTR tv496[ebp]
  0018a	f3 0f 58 46 10	 addss	 xmm0, DWORD PTR [esi+16]
  0018f	f3 0f 2c 55 e0	 cvttss2si edx, DWORD PTR tv496[ebp]
  00194	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00198	89 4d e4	 mov	 DWORD PTR _SkillTime$1$[ebp], ecx
  0019b	66 0f 6e c1	 movd	 xmm0, ecx
  0019f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001a2	0f 2f c1	 comiss	 xmm0, xmm1
  001a5	76 07		 jbe	 SHORT $LN16@MLS_SkillS

; 2808 : 	{
; 2809 : 		SkillTime = lpInfo->m_Arg6;

  001a7	f3 0f 2c c9	 cvttss2si ecx, xmm1
  001ab	89 4d e4	 mov	 DWORD PTR _SkillTime$1$[ebp], ecx
$LN16@MLS_SkillS:

; 2810 : 	}
; 2811 : 
; 2812 : 	if( partynum == -1 )

  001ae	83 7d d8 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001b2	75 53		 jne	 SHORT $LN17@MLS_SkillS

; 2813 : 	{
; 2814 : 		gObjAddBuffEffect(lpObj,AT_INCREASE_CRITICAL_DMG,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,0,0,SkillTime);

  001b4	51		 push	 ecx
  001b5	6a 00		 push	 0
  001b7	6a 00		 push	 0
  001b9	52		 push	 edx
  001ba	6a 11		 push	 17			; 00000011H
  001bc	6a 05		 push	 5
  001be	57		 push	 edi
  001bf	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  001c4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2815 : 		MsgOutput(aIndex,lMsg.Get(MSGGET(4,216)),SkillTime);

  001c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001cc	ff 75 e4	 push	 DWORD PTR _SkillTime$1$[ebp]
  001cf	68 d8 04 00 00	 push	 1240			; 000004d8H
  001d4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001d9	50		 push	 eax
  001da	ff 75 d4	 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  001dd	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2816 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  001e2	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  001e6	6a 01		 push	 1
  001e8	ff 37		 push	 DWORD PTR [edi]
  001ea	50		 push	 eax
  001eb	57		 push	 edi
  001ec	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  001f1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001f4	5e		 pop	 esi
  001f5	5f		 pop	 edi
  001f6	5b		 pop	 ebx

; 2829 : 			}
; 2830 : 		}
; 2831 : 	}
; 2832 : }

  001f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fa	33 cd		 xor	 ecx, ebp
  001fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 0c 00	 ret	 12			; 0000000cH
$LN17@MLS_SkillS:

; 2817 : 	}
; 2818 : 	else
; 2819 : 	{
; 2820 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00207	33 db		 xor	 ebx, ebx
  00209	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@MLS_SkillS:

; 2821 : 		{
; 2822 : 			if( ApplyPartyIndex[n] != -1 )

  00210	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00214	83 f8 ff	 cmp	 eax, -1
  00217	74 53		 je	 SHORT $LN5@MLS_SkillS

; 2823 : 			{
; 2824 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];
; 2825 : 
; 2826 : 				gObjAddBuffEffect(lpPartyObj,AT_INCREASE_CRITICAL_DMG,ADD_OPTION_CRITICALDMG,addcriticaldamagevalue,0,0,SkillTime);

  00219	51		 push	 ecx
  0021a	6a 00		 push	 0
  0021c	6a 00		 push	 0
  0021e	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00224	52		 push	 edx
  00225	6a 11		 push	 17			; 00000011H
  00227	6a 05		 push	 5
  00229	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0022f	56		 push	 esi
  00230	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00235	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2827 : 				MsgOutput(lpPartyObj->m_Index,lMsg.Get(MSGGET(4,216)),SkillTime);

  00238	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0023d	ff 75 e4	 push	 DWORD PTR _SkillTime$1$[ebp]
  00240	68 d8 04 00 00	 push	 1240			; 000004d8H
  00245	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0024a	50		 push	 eax
  0024b	ff 36		 push	 DWORD PTR [esi]
  0024d	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 2828 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,TRUE);

  00252	8b 45 dc	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00255	6a 01		 push	 1
  00257	ff 36		 push	 DWORD PTR [esi]
  00259	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0025d	50		 push	 eax
  0025e	57		 push	 edi
  0025f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00264	f3 0f 2c 55 e0	 cvttss2si edx, DWORD PTR tv496[ebp]
  00269	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN5@MLS_SkillS:

; 2817 : 	}
; 2818 : 	else
; 2819 : 	{
; 2820 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0026c	8b 4d e4	 mov	 ecx, DWORD PTR _SkillTime$1$[ebp]
  0026f	43		 inc	 ebx
  00270	83 fb 05	 cmp	 ebx, 5
  00273	7c 9b		 jl	 SHORT $LL7@MLS_SkillS
$LN31@MLS_SkillS:
  00275	5e		 pop	 esi
$LN6@MLS_SkillS:

; 2829 : 			}
; 2830 : 		}
; 2831 : 	}
; 2832 : }

  00276	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00279	5f		 pop	 edi
  0027a	33 cd		 xor	 ecx, ebp
  0027c	5b		 pop	 ebx
  0027d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00282	8b e5		 mov	 esp, ebp
  00284	5d		 pop	 ebp
  00285	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker, COMDAT
; _this$ = ecx

; 2708 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2709 : 	if( !OBJMAX_RANGE(aIndex) )

  00004	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 88 f1 00 00
	00		 js	 $LN9@MLS_SkillM
  00012	33 c0		 xor	 eax, eax
  00014	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 de 00 00
	00		 je	 $LN9@MLS_SkillM

; 2711 : 
; 2712 : 	LPOBJ lpObj = &gObj[aIndex];
; 2713 : 
; 2714 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00025	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0002d	56		 push	 esi
  0002e	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00034	ff 70 08	 push	 DWORD PTR [eax+8]
  00037	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00042	8b c8		 mov	 ecx, eax

; 2715 : 
; 2716 : 	if( !lpInfo )

  00044	85 c9		 test	 ecx, ecx
  00046	75 07		 jne	 SHORT $LN3@MLS_SkillM
  00048	5e		 pop	 esi

; 2739 : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN3@MLS_SkillM:

; 2717 : 	{
; 2718 : 		return 0;
; 2719 : 	}
; 2720 : 
; 2721 : 	int iDuration = lpInfo->m_Arg3 + lpObj->Energy/lpInfo->m_Arg4;

  0004f	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]

; 2722 : 	if( iDuration > lpInfo->m_Arg5 )

  00056	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  0005b	53		 push	 ebx
  0005c	57		 push	 edi
  0005d	66 0f 6e c8	 movd	 xmm1, eax
  00061	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f3 0f 5e 41 10	 divss	 xmm0, DWORD PTR [ecx+16]
  0006c	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00071	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00075	66 0f 6e c3	 movd	 xmm0, ebx
  00079	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007c	0f 2f c2	 comiss	 xmm0, xmm2
  0007f	76 04		 jbe	 SHORT $LN4@MLS_SkillM

; 2723 : 	{
; 2724 : 		iDuration = lpInfo->m_Arg5;

  00081	f3 0f 2c da	 cvttss2si ebx, xmm2
$LN4@MLS_SkillM:

; 2725 : 	}
; 2726 : 	int EffectUPValue = lpObj->Energy/lpInfo->m_Arg1;

  00085	f3 0f 5e 49 04	 divss	 xmm1, DWORD PTR [ecx+4]
  0008a	f3 0f 2c f9	 cvttss2si edi, xmm1

; 2727 : 	if( EffectUPValue > lpInfo->m_Arg2 )

  0008e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00093	66 0f 6e c7	 movd	 xmm0, edi
  00097	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0009a	0f 2f c1	 comiss	 xmm0, xmm1
  0009d	76 04		 jbe	 SHORT $LN5@MLS_SkillM

; 2728 : 	{
; 2729 : 		EffectUPValue = lpInfo->m_Arg2;

  0009f	f3 0f 2c f9	 cvttss2si edi, xmm1
$LN5@MLS_SkillM:

; 2730 : 	}
; 2731 : 	int EffectDownValue = EffectUPValue / 2;
; 2732 : 
; 2733 : 	lpObj->m_MPSkillOpt.MpsBerserkInc3 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000a6	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000aa	50		 push	 eax
  000ab	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000c1	8b c7		 mov	 eax, edi
  000c3	99		 cdq

; 2734 : 
; 2735 : 	gObjAddBuffEffect(lpObj,BUFF_BERSERKER4,ADD_OPTION_BERSERKMANA_PERC,EffectUPValue,ADD_OPTION_BERSERKLIFE_PERC,EffectDownValue,iDuration);

  000c4	53		 push	 ebx
  000c5	2b c2		 sub	 eax, edx
  000c7	d1 f8		 sar	 eax, 1
  000c9	50		 push	 eax
  000ca	6a 20		 push	 32			; 00000020H
  000cc	57		 push	 edi
  000cd	6a 1f		 push	 31			; 0000001fH
  000cf	68 98 00 00 00	 push	 152			; 00000098H
  000d4	56		 push	 esi
  000d5	d9 9e 98 07 00
	00		 fstp	 DWORD PTR [esi+1944]
  000db	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2736 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000e3	6a 01		 push	 1
  000e5	ff 36		 push	 DWORD PTR [esi]
  000e7	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000eb	50		 push	 eax
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000f2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2737 : 
; 2738 : 	return true;

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	5f		 pop	 edi
  000fb	5b		 pop	 ebx
  000fc	5e		 pop	 esi

; 2739 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
$LN9@MLS_SkillM:

; 2710 : 		return false;

  00103	33 c0		 xor	 eax, eax

; 2739 : }

  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker, COMDAT
; _this$ = ecx

; 2674 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2675 : 	if( !OBJMAX_RANGE(aIndex) )

  00004	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 88 f1 00 00
	00		 js	 $LN9@MLS_SkillS
  00012	33 c0		 xor	 eax, eax
  00014	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 de 00 00
	00		 je	 $LN9@MLS_SkillS

; 2677 : 
; 2678 : 	LPOBJ lpObj = &gObj[aIndex];
; 2679 : 
; 2680 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00025	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0002d	56		 push	 esi
  0002e	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00034	ff 70 08	 push	 DWORD PTR [eax+8]
  00037	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00042	8b c8		 mov	 ecx, eax

; 2681 : 
; 2682 : 	if( !lpInfo )

  00044	85 c9		 test	 ecx, ecx
  00046	75 07		 jne	 SHORT $LN3@MLS_SkillS
  00048	5e		 pop	 esi

; 2705 : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN3@MLS_SkillS:

; 2683 : 	{
; 2684 : 		return 0;
; 2685 : 	}
; 2686 : 
; 2687 : 	int iDuration = lpInfo->m_Arg3 + lpObj->Energy/lpInfo->m_Arg4;

  0004f	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]

; 2688 : 	if( iDuration > lpInfo->m_Arg5 )

  00056	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  0005b	53		 push	 ebx
  0005c	57		 push	 edi
  0005d	66 0f 6e c8	 movd	 xmm1, eax
  00061	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f3 0f 5e 41 10	 divss	 xmm0, DWORD PTR [ecx+16]
  0006c	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00071	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00075	66 0f 6e c3	 movd	 xmm0, ebx
  00079	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007c	0f 2f c2	 comiss	 xmm0, xmm2
  0007f	76 04		 jbe	 SHORT $LN4@MLS_SkillS

; 2689 : 	{
; 2690 : 		iDuration = lpInfo->m_Arg5;

  00081	f3 0f 2c da	 cvttss2si ebx, xmm2
$LN4@MLS_SkillS:

; 2691 : 	}
; 2692 : 	int EffectUPValue = lpObj->Energy/lpInfo->m_Arg1;

  00085	f3 0f 5e 49 04	 divss	 xmm1, DWORD PTR [ecx+4]
  0008a	f3 0f 2c f9	 cvttss2si edi, xmm1

; 2693 : 	if( EffectUPValue > lpInfo->m_Arg2 )

  0008e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00093	66 0f 6e c7	 movd	 xmm0, edi
  00097	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0009a	0f 2f c1	 comiss	 xmm0, xmm1
  0009d	76 04		 jbe	 SHORT $LN5@MLS_SkillS

; 2694 : 	{
; 2695 : 		EffectUPValue = lpInfo->m_Arg2;

  0009f	f3 0f 2c f9	 cvttss2si edi, xmm1
$LN5@MLS_SkillS:

; 2696 : 	}
; 2697 : 	int EffectDownValue = EffectUPValue / 2;
; 2698 : 
; 2699 : 	lpObj->m_MPSkillOpt.MpsBerserkInc2 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000a6	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000aa	50		 push	 eax
  000ab	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000c1	8b c7		 mov	 eax, edi
  000c3	99		 cdq

; 2700 : 
; 2701 : 	gObjAddBuffEffect(lpObj,BUFF_BERSERKER3,ADD_OPTION_BERSERKMANA_PERC,EffectUPValue,ADD_OPTION_BERSERKLIFE_PERC,EffectDownValue,iDuration);

  000c4	53		 push	 ebx
  000c5	2b c2		 sub	 eax, edx
  000c7	d1 f8		 sar	 eax, 1
  000c9	50		 push	 eax
  000ca	6a 20		 push	 32			; 00000020H
  000cc	57		 push	 edi
  000cd	6a 1f		 push	 31			; 0000001fH
  000cf	68 97 00 00 00	 push	 151			; 00000097H
  000d4	56		 push	 esi
  000d5	d9 9e 94 07 00
	00		 fstp	 DWORD PTR [esi+1940]
  000db	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2702 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000e3	6a 01		 push	 1
  000e5	ff 36		 push	 DWORD PTR [esi]
  000e7	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000eb	50		 push	 eax
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000f2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2703 : 
; 2704 : 	return true;

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	5f		 pop	 edi
  000fb	5b		 pop	 ebx
  000fc	5e		 pop	 esi

; 2705 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
$LN9@MLS_SkillS:

; 2676 : 		return false;

  00103	33 c0		 xor	 eax, eax

; 2705 : }

  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker, COMDAT
; _this$ = ecx

; 2637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 2638 : 	if( !OBJMAX_RANGE(aIndex) )

  00004	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 88 f1 00 00
	00		 js	 $LN9@MLS_SkillS
  00012	33 c0		 xor	 eax, eax
  00014	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 de 00 00
	00		 je	 $LN9@MLS_SkillS

; 2640 : 
; 2641 : 	LPOBJ lpObj = &gObj[aIndex];
; 2642 : 
; 2643 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00025	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0002d	56		 push	 esi
  0002e	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00034	ff 70 08	 push	 DWORD PTR [eax+8]
  00037	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003d	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00042	8b c8		 mov	 ecx, eax

; 2644 : 
; 2645 : 	if( !lpInfo )

  00044	85 c9		 test	 ecx, ecx
  00046	75 07		 jne	 SHORT $LN3@MLS_SkillS
  00048	5e		 pop	 esi

; 2671 : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN3@MLS_SkillS:

; 2646 : 	{
; 2647 : 		return 0;
; 2648 : 	}
; 2649 : 
; 2650 : 	int iDuration = lpInfo->m_Arg3 + lpObj->Energy/lpInfo->m_Arg4;

  0004f	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]

; 2651 : 
; 2652 : 	if( iDuration > lpInfo->m_Arg5 )

  00056	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  0005b	53		 push	 ebx
  0005c	57		 push	 edi
  0005d	66 0f 6e c8	 movd	 xmm1, eax
  00061	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f3 0f 5e 41 10	 divss	 xmm0, DWORD PTR [ecx+16]
  0006c	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
  00071	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00075	66 0f 6e c3	 movd	 xmm0, ebx
  00079	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007c	0f 2f c2	 comiss	 xmm0, xmm2
  0007f	76 04		 jbe	 SHORT $LN4@MLS_SkillS

; 2653 : 	{
; 2654 : 		iDuration = lpInfo->m_Arg5;

  00081	f3 0f 2c da	 cvttss2si ebx, xmm2
$LN4@MLS_SkillS:

; 2655 : 	}
; 2656 : 
; 2657 : 	int EffectUPValue = lpObj->Energy/lpInfo->m_Arg1;

  00085	f3 0f 5e 49 04	 divss	 xmm1, DWORD PTR [ecx+4]
  0008a	f3 0f 2c f9	 cvttss2si edi, xmm1

; 2658 : 	if( EffectUPValue > lpInfo->m_Arg2 )

  0008e	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00093	66 0f 6e c7	 movd	 xmm0, edi
  00097	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0009a	0f 2f c1	 comiss	 xmm0, xmm1
  0009d	76 04		 jbe	 SHORT $LN5@MLS_SkillS

; 2659 : 	{
; 2660 : 		EffectUPValue = lpInfo->m_Arg2;

  0009f	f3 0f 2c f9	 cvttss2si edi, xmm1
$LN5@MLS_SkillS:

; 2661 : 	}
; 2662 : 
; 2663 : 	int EffectDownValue = EffectUPValue / 2;
; 2664 : 
; 2665 : 	lpObj->m_MPSkillOpt.MpsBerserkInc1 = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000a6	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000aa	50		 push	 eax
  000ab	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000b3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  000c1	8b c7		 mov	 eax, edi
  000c3	99		 cdq

; 2666 : 
; 2667 : 	gObjAddBuffEffect(lpObj,BUFF_BERSERKER2,ADD_OPTION_BERSERKMANA_PERC,EffectUPValue,ADD_OPTION_BERSERKLIFE_PERC,EffectDownValue,iDuration);

  000c4	53		 push	 ebx
  000c5	2b c2		 sub	 eax, edx
  000c7	d1 f8		 sar	 eax, 1
  000c9	50		 push	 eax
  000ca	6a 20		 push	 32			; 00000020H
  000cc	57		 push	 edi
  000cd	6a 1f		 push	 31			; 0000001fH
  000cf	68 96 00 00 00	 push	 150			; 00000096H
  000d4	56		 push	 esi
  000d5	d9 9e 90 07 00
	00		 fstp	 DWORD PTR [esi+1936]
  000db	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2668 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000e3	6a 01		 push	 1
  000e5	ff 36		 push	 DWORD PTR [esi]
  000e7	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  000eb	50		 push	 eax
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000f2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2669 : 
; 2670 : 	return true;

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	5f		 pop	 edi
  000fb	5b		 pop	 ebx
  000fc	5e		 pop	 esi

; 2671 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 08 00	 ret	 8
$LN9@MLS_SkillS:

; 2639 : 		return false;

  00103	33 c0		 xor	 eax, eax

; 2671 : }

  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow, COMDAT
; _this$ = ecx

; 2608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2609 : 	LPOBJ lpObj = &gObj[aIndex];

  00004	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _aIndex$[ebp], 10048
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2610 : 
; 2611 : 	if( lpObj->Type != OBJ_USER )

  00014	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00018	74 08		 je	 SHORT $LN2@MLS_SkillI
$LN12@MLS_SkillI:
  0001a	5f		 pop	 edi

; 2612 : 		return false;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 2634 : }

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_SkillI:

; 2613 : 
; 2614 : 	if( lpObj->Class != CLASS_ELF )

  00022	66 83 be 90 00
	00 00 02	 cmp	 WORD PTR [esi+144], 2
  0002a	75 ee		 jne	 SHORT $LN12@MLS_SkillI

; 2615 : 		return false;
; 2616 : 
; 2617 : 	if( lpObj->ChangeUP == FALSE )

  0002c	80 be 93 00 00
	00 00		 cmp	 BYTE PTR [esi+147], 0
  00033	74 e5		 je	 SHORT $LN12@MLS_SkillI

; 2618 : 		return false;
; 2619 : 
; 2620 : 	if( lpObj->m_Index != aTargetIndex )

  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	3b 45 0c	 cmp	 eax, DWORD PTR _aTargetIndex$[ebp]
  0003a	75 de		 jne	 SHORT $LN12@MLS_SkillI

; 2621 : 		return false;
; 2622 : 
; 2623 : 	if( gObjCheckUsedBuffEffect(lpObj,BUFF_INFINITY_ARROW2) == TRUE )

  0003c	68 8f 00 00 00	 push	 143			; 0000008fH
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00047	83 c4 08	 add	 esp, 8
  0004a	3c 01		 cmp	 al, 1
  0004c	74 cc		 je	 SHORT $LN12@MLS_SkillI

; 2624 : 		return false;
; 2625 : 
; 2626 : 	lpObj->m_InfinityArrowDmgMul = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00051	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  00055	50		 push	 eax
  00056	ff 71 08	 push	 DWORD PTR [ecx+8]
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0005e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00063	50		 push	 eax
  00064	8b cf		 mov	 ecx, edi
  00066	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0006b	d9 9e bc 26 00
	00		 fstp	 DWORD PTR [esi+9916]

; 2627 : 	gObjAddBuffEffect(lpObj,BUFF_INFINITY_ARROW2,0,0,0,0,g_SkillAdditionInfo.GetInfinityArrowSkillTime());

  00071	ff 35 04 00 00
	00		 push	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+4
  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	68 8f 00 00 00	 push	 143			; 0000008fH
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2628 : 	GCMagicAttackNumberSend(lpObj,441,lpObj->m_Index,TRUE);

  0008a	6a 01		 push	 1
  0008c	ff 36		 push	 DWORD PTR [esi]
  0008e	68 b9 01 00 00	 push	 441			; 000001b9H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2629 : 
; 2630 : 	LogAddTD("[%s][%s] Use Infinity Arrow Skill (Time:%d)(Character Level : %d)(ChangeUp: %d)",

  00099	0f b6 86 93 00
	00 00		 movzx	 eax, BYTE PTR [esi+147]
  000a0	50		 push	 eax
  000a1	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  000a8	50		 push	 eax
  000a9	ff 35 04 00 00
	00		 push	 DWORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A+4
  000af	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000b2	50		 push	 eax
  000b3	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@NONLFBKD@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5Infinity?5Arrow?5Skil@
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c2	83 c4 44	 add	 esp, 68			; 00000044H

; 2631 : 		lpObj->AccountID,lpObj->Name,g_SkillAdditionInfo.GetInfinityArrowSkillTime(),lpObj->Level,lpObj->ChangeUP);
; 2632 : 
; 2633 : 	return true;

  000c5	b8 01 00 00 00	 mov	 eax, 1
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi

; 2634 : }

  000cc	5d		 pop	 ebp
  000cd	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_iManaRate$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_iDefenseValue$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_fSkillValue$ = 12					; size = 4
_fSkillValue1$ = 12					; size = 4
_fSkillValue2$ = 12					; size = 4
_lpMagic$ = 12						; size = 4
_iSkillValidTime$1$ = 16				; size = 4
_lpInfo$1$ = 16						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery, COMDAT
; _this$ = ecx

; 2545 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 2546 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	69 75 10 40 27
	00 00		 imul	 esi, DWORD PTR _aTargetIndex$[ebp], 10048
  0000e	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2547 : 	int skillSuccess = TRUE;
; 2548 : 
; 2549 : 	if( lpTargetObj->Type != OBJ_USER &&

  00017	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0001b	74 0d		 je	 SHORT $LN2@MLS_SkillW
  0001d	83 be 30 06 00
	00 ff		 cmp	 DWORD PTR [esi+1584], -1
  00024	0f 84 d8 01 00
	00		 je	 $LN1@MLS_SkillW
$LN2@MLS_SkillW:
  0002a	57		 push	 edi

; 2550 : 		lpTargetObj->m_RecallMon == -1 )
; 2551 : 		return;
; 2552 : 
; 2553 : 	if( lpObj->Class != CLASS_WIZARD &&

  0002b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0002e	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00035	66 85 c0	 test	 ax, ax
  00038	74 09		 je	 SHORT $LN3@MLS_SkillW
  0003a	83 f8 03	 cmp	 eax, 3
  0003d	0f 85 be 01 00
	00		 jne	 $LN16@MLS_SkillW
$LN3@MLS_SkillW:

; 2554 : 		lpObj->Class != CLASS_MAGUMSA )
; 2555 : 		return;
; 2556 : 
; 2557 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00043	8b 87 0c 06 00
	00		 mov	 eax, DWORD PTR [edi+1548]
  00049	3b 86 0c 06 00
	00		 cmp	 eax, DWORD PTR [esi+1548]
  0004f	0f 85 ac 01 00
	00		 jne	 $LN16@MLS_SkillW

; 2558 : 		return;
; 2559 : 	
; 2560 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00055	53		 push	 ebx
  00056	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0005e	ff 73 08	 push	 DWORD PTR [ebx+8]
  00061	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00066	89 45 10	 mov	 DWORD PTR _lpInfo$1$[ebp], eax

; 2561 : 
; 2562 : 	if( !lpInfo )

  00069	85 c0		 test	 eax, eax
  0006b	0f 84 8f 01 00
	00		 je	 $LN17@MLS_SkillW

; 2563 : 	{
; 2564 : 		return;
; 2565 : 	}
; 2566 : 
; 2567 : 	float iDefenseValue = lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2 + (lpObj->Dexterity+lpObj->AddDexterity)/lpInfo->m_Arg3;

  00071	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  00078	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  0007f	03 d1		 add	 edx, ecx
  00081	0f b7 8f fe 00
	00 00		 movzx	 ecx, WORD PTR [edi+254]
  00088	66 0f 6e ca	 movd	 xmm1, edx
  0008c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0008f	f3 0f 5e 48 08	 divss	 xmm1, DWORD PTR [eax+8]
  00094	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  00099	0f b7 87 d2 00
	00 00		 movzx	 eax, WORD PTR [edi+210]
  000a0	03 c8		 add	 ecx, eax
  000a2	8b 45 10	 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  000a5	66 0f 6e c1	 movd	 xmm0, ecx
  000a9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ac	f3 0f 5e 40 0c	 divss	 xmm0, DWORD PTR [eax+12]
  000b1	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2568 : 
; 2569 : 	if( iDefenseValue > lpInfo->m_Arg4 )

  000b5	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000ba	0f 2f c8	 comiss	 xmm1, xmm0
  000bd	f3 0f 11 4d 08	 movss	 DWORD PTR _iDefenseValue$1$[ebp], xmm1
  000c2	76 05		 jbe	 SHORT $LN6@MLS_SkillW

; 2570 : 		iDefenseValue = lpInfo->m_Arg4;

  000c4	f3 0f 11 45 08	 movss	 DWORD PTR _iDefenseValue$1$[ebp], xmm0
$LN6@MLS_SkillW:

; 2571 : 
; 2572 : 	int iSkillValidTime = 0;
; 2573 : 
; 2574 : 	float fSkillValue2 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  000c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000cc	6a 02		 push	 2
  000ce	ff 73 08	 push	 DWORD PTR [ebx+8]
  000d1	57		 push	 edi
  000d2	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  000d7	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue2$[ebp]

; 2575 : 
; 2576 : 	if( fSkillValue2 > 0.0f )

  000da	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fSkillValue2$[ebp]
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	0f 2f c8	 comiss	 xmm1, xmm0
  000e5	76 0e		 jbe	 SHORT $LN7@MLS_SkillW

; 2577 : 	{
; 2578 : 		iDefenseValue += fSkillValue2;

  000e7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _iDefenseValue$1$[ebp]
  000ec	f3 0f 58 c1	 addss	 xmm0, xmm1
  000f0	f3 0f 11 45 08	 movss	 DWORD PTR _iDefenseValue$1$[ebp], xmm0
$LN7@MLS_SkillW:

; 2579 : 	}
; 2580 : 
; 2581 : 	int iManaRate = g_SkillAdditionInfo.GetManaShieldRate(lpMagic->m_Level);

  000f5	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h

; 47   : 	short GetManaShieldRate(int level) { if( level < 0 || level > 20 ) return 20; return m_SB_ManaRate[level]; };

  000f9	83 f8 14	 cmp	 eax, 20			; 00000014H
  000fc	77 0a		 ja	 SHORT $LN14@MLS_SkillW
  000fe	0f b7 04 45 40
	00 00 00	 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[eax*2+64]
  00106	eb 05		 jmp	 SHORT $LN12@MLS_SkillW
$LN14@MLS_SkillW:
  00108	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
$LN12@MLS_SkillW:
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp

; 2583 : 	iSkillValidTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  0010d	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00114	98		 cwde
  00115	89 45 f8	 mov	 DWORD PTR _iManaRate$1$[ebp], eax
  00118	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  0011f	03 c8		 add	 ecx, eax
  00121	8b 45 10	 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  00124	66 0f 6e c1	 movd	 xmm0, ecx
  00128	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2584 : 
; 2585 : 	if( iSkillValidTime > lpInfo->m_Arg7)

  0012b	f3 0f 10 48 1c	 movss	 xmm1, DWORD PTR [eax+28]
  00130	f3 0f 5e 40 18	 divss	 xmm0, DWORD PTR [eax+24]
  00135	f3 0f 58 40 14	 addss	 xmm0, DWORD PTR [eax+20]
  0013a	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0013e	89 4d 10	 mov	 DWORD PTR _iSkillValidTime$1$[ebp], ecx
  00141	66 0f 6e c1	 movd	 xmm0, ecx
  00145	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00148	0f 2f c1	 comiss	 xmm0, xmm1
  0014b	76 07		 jbe	 SHORT $LN8@MLS_SkillW

; 2586 : 		iSkillValidTime = lpInfo->m_Arg7;

  0014d	f3 0f 2c c1	 cvttss2si eax, xmm1
  00151	89 45 10	 mov	 DWORD PTR _iSkillValidTime$1$[ebp], eax
$LN8@MLS_SkillW:

; 2587 : 
; 2588 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  00154	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00157	6a 01		 push	 1
  00159	ff 73 08	 push	 DWORD PTR [ebx+8]
  0015c	57		 push	 edi
  0015d	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  00162	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue1$[ebp]

; 2589 : 
; 2590 : 	if( fSkillValue1 > 0.0f )

  00165	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fSkillValue1$[ebp]
  0016a	0f 57 c0	 xorps	 xmm0, xmm0
  0016d	0f 2f c8	 comiss	 xmm1, xmm0
  00170	76 13		 jbe	 SHORT $LN9@MLS_SkillW

; 2591 : 	{
; 2592 : 		iSkillValidTime += fSkillValue1;

  00172	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _iSkillValidTime$1$[ebp]
  00177	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0017e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00182	89 45 10	 mov	 DWORD PTR _iSkillValidTime$1$[ebp], eax
$LN9@MLS_SkillW:

; 2593 : 	}
; 2594 : 
; 2595 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00185	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00189	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0018e	50		 push	 eax
  0018f	ff 73 08	 push	 DWORD PTR [ebx+8]
  00192	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00197	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001a0	d9 5d 0c	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2596 : 
; 2597 : 	if( fSkillValue > 0.0f )

  001a3	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fSkillValue$[ebp]
  001a8	0f 57 c0	 xorps	 xmm0, xmm0
  001ab	0f 2f c8	 comiss	 xmm1, xmm0
  001ae	76 1c		 jbe	 SHORT $LN10@MLS_SkillW

; 2598 : 	{
; 2599 : 		lpTargetObj->m_MPSkillOpt.MpsManaShieldAddMana = lpTargetObj->MaxMana*fSkillValue/100.0f;

  001b0	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  001b8	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001bc	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  001c4	f3 0f 11 86 70
	08 00 00	 movss	 DWORD PTR [esi+2160], xmm0
$LN10@MLS_SkillW:

; 2600 : 	}
; 2601 : 
; 2602 : 	gObjAddBuffEffect(lpTargetObj,BUFF_MANASHIELD2,ADD_OPTION_MSDECREASE,(int)iDefenseValue,ADD_OPTION_MSTIME,iManaRate,iSkillValidTime);

  001cc	ff 75 10	 push	 DWORD PTR _iSkillValidTime$1$[ebp]
  001cf	f3 0f 2c 45 08	 cvttss2si eax, DWORD PTR _iDefenseValue$1$[ebp]
  001d4	ff 75 f8	 push	 DWORD PTR _iManaRate$1$[ebp]
  001d7	6a 1c		 push	 28			; 0000001cH
  001d9	50		 push	 eax
  001da	6a 15		 push	 21			; 00000015H
  001dc	68 8c 00 00 00	 push	 140			; 0000008cH
  001e1	56		 push	 esi
  001e2	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2603 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  001e7	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  001eb	6a 01		 push	 1
  001ed	ff 37		 push	 DWORD PTR [edi]
  001ef	50		 push	 eax
  001f0	57		 push	 edi
  001f1	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2604 : 	gObjCalCharacter(lpTargetObj->m_Index);

  001f6	ff 36		 push	 DWORD PTR [esi]
  001f8	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  001fd	83 c4 30	 add	 esp, 48			; 00000030H
$LN17@MLS_SkillW:
  00200	5b		 pop	 ebx
$LN16@MLS_SkillW:
  00201	5f		 pop	 edi
$LN1@MLS_SkillW:
  00202	5e		 pop	 esi

; 2605 : }

  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_iManaRate$1$ = -12					; size = 4
_level$1$ = -8						; size = 4
_iPreSkill$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
tv396 = 8						; size = 4
tv394 = 8						; size = 4
_iPreLevel$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_iDefenseValue$2$ = 16					; size = 4
_iDefenseValue$ = 16					; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense, COMDAT
; _this$ = ecx

; 2481 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 2482 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000e	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 2483 : 	int skillSuccess = TRUE;
; 2484 : 
; 2485 : 	if( lpTargetObj->Type != OBJ_USER &&

  00017	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0001b	74 0d		 je	 SHORT $LN2@MLS_SkillW
  0001d	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  00024	0f 84 0f 02 00
	00		 je	 $LN1@MLS_SkillW
$LN2@MLS_SkillW:
  0002a	56		 push	 esi

; 2486 : 		lpTargetObj->m_RecallMon == -1 )
; 2487 : 		return;
; 2488 : 
; 2489 : 	if( lpObj->Class != CLASS_WIZARD &&

  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0002e	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00035	66 85 c0	 test	 ax, ax
  00038	74 09		 je	 SHORT $LN3@MLS_SkillW
  0003a	83 f8 03	 cmp	 eax, 3
  0003d	0f 85 f5 01 00
	00		 jne	 $LN18@MLS_SkillW
$LN3@MLS_SkillW:

; 2490 : 		lpObj->Class != CLASS_MAGUMSA )
; 2491 : 		return;
; 2492 : 
; 2493 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00043	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  00049	3b 83 0c 06 00
	00		 cmp	 eax, DWORD PTR [ebx+1548]
  0004f	0f 85 e3 01 00
	00		 jne	 $LN18@MLS_SkillW

; 2494 : 		return;
; 2495 : 
; 2496 : 	float iDefenseValue = 0;
; 2497 : 	int iSkillValidTime = 0;
; 2498 : 
; 2499 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00055	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00058	0f 57 c0	 xorps	 xmm0, xmm0
  0005b	57		 push	 edi
  0005c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00061	f3 0f 11 45 10	 movss	 DWORD PTR _iDefenseValue$2$[ebp], xmm0
  00066	ff 70 08	 push	 DWORD PTR [eax+8]
  00069	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0006e	8b f8		 mov	 edi, eax

; 2500 : 
; 2501 : 	if( !lpInfo )

  00070	85 ff		 test	 edi, edi
  00072	0f 84 bf 01 00
	00		 je	 $LN19@MLS_SkillW

; 2502 : 	{
; 2503 : 		return;
; 2504 : 	}
; 2505 : 
; 2506 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  00078	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0007b	0f b7 8e 90 00
	00 00		 movzx	 ecx, WORD PTR [esi+144]
  00082	ff 70 08	 push	 DWORD PTR [eax+8]
  00085	51		 push	 ecx
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00089	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1
  0008e	89 45 f8	 mov	 DWORD PTR _iPreSkill$1$[ebp], eax

; 2507 : 
; 2508 : 	if( iPreSkill > 0 )

  00091	85 c0		 test	 eax, eax
  00093	0f 8e 90 00 00
	00		 jle	 $LN6@MLS_SkillW

; 2509 : 	{
; 2510 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  00099	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0009c	50		 push	 eax
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel
  000a3	89 45 08	 mov	 DWORD PTR _iPreLevel$1$[ebp], eax

; 2511 : 
; 2512 : 		if( iPreLevel > 0 )

  000a6	85 c0		 test	 eax, eax
  000a8	0f 8e d0 00 00
	00		 jle	 $LN10@MLS_SkillW

; 2513 : 		{
; 2514 : 			iDefenseValue = lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2 + (lpObj->Dexterity + lpObj->AddDexterity) / lpInfo->m_Arg3;

  000ae	0f b7 8e d6 00
	00 00		 movzx	 ecx, WORD PTR [esi+214]
  000b5	0f b7 96 02 01
	00 00		 movzx	 edx, WORD PTR [esi+258]
  000bc	0f b7 86 d2 00
	00 00		 movzx	 eax, WORD PTR [esi+210]
  000c3	03 d1		 add	 edx, ecx
  000c5	0f b7 8e fe 00
	00 00		 movzx	 ecx, WORD PTR [esi+254]
  000cc	03 c8		 add	 ecx, eax
  000ce	66 0f 6e ca	 movd	 xmm1, edx
  000d2	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000d5	66 0f 6e c1	 movd	 xmm0, ecx
  000d9	f3 0f 5e 4f 08	 divss	 xmm1, DWORD PTR [edi+8]
  000de	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e1	f3 0f 58 4f 04	 addss	 xmm1, DWORD PTR [edi+4]
  000e6	f3 0f 5e 47 0c	 divss	 xmm0, DWORD PTR [edi+12]
  000eb	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2515 : 
; 2516 : 			if( iDefenseValue > lpInfo->m_Arg4 )

  000ef	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000f4	0f 2f c8	 comiss	 xmm1, xmm0
  000f7	f3 0f 11 4d 10	 movss	 DWORD PTR _iDefenseValue$[ebp], xmm1
  000fc	76 05		 jbe	 SHORT $LN9@MLS_SkillW

; 2517 : 				iDefenseValue = lpInfo->m_Arg4;

  000fe	f3 0f 11 45 10	 movss	 DWORD PTR _iDefenseValue$[ebp], xmm0
$LN9@MLS_SkillW:

; 2518 : 
; 2519 : 			float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  00103	ff 75 08	 push	 DWORD PTR _iPreLevel$1$[ebp]
  00106	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0010b	ff 75 f8	 push	 DWORD PTR _iPreSkill$1$[ebp]
  0010e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2520 : 			iDefenseValue += fSkillValue;

  0011c	d8 45 10	 fadd	 DWORD PTR _iDefenseValue$[ebp]
  0011f	d9 5d 10	 fstp	 DWORD PTR _iDefenseValue$[ebp]

; 2521 : 		}
; 2522 : 	}
; 2523 : 	else

  00122	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _iDefenseValue$[ebp]
  00127	eb 50		 jmp	 SHORT $LN20@MLS_SkillW
$LN6@MLS_SkillW:

; 2524 : 	{
; 2525 : 		iDefenseValue = lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2 + (lpObj->Dexterity + lpObj->AddDexterity) / lpInfo->m_Arg3;

  00129	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]
  00130	0f b7 8e 02 01
	00 00		 movzx	 ecx, WORD PTR [esi+258]
  00137	03 c8		 add	 ecx, eax
  00139	0f b7 86 d2 00
	00 00		 movzx	 eax, WORD PTR [esi+210]
  00140	66 0f 6e c9	 movd	 xmm1, ecx
  00144	0f b7 8e fe 00
	00 00		 movzx	 ecx, WORD PTR [esi+254]
  0014b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0014e	03 c8		 add	 ecx, eax
  00150	66 0f 6e c1	 movd	 xmm0, ecx
  00154	f3 0f 5e 4f 08	 divss	 xmm1, DWORD PTR [edi+8]
  00159	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015c	f3 0f 58 4f 04	 addss	 xmm1, DWORD PTR [edi+4]
  00161	f3 0f 5e 47 0c	 divss	 xmm0, DWORD PTR [edi+12]
  00166	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2526 : 
; 2527 : 			if( iDefenseValue > lpInfo->m_Arg4 )

  0016a	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  0016f	0f 2f c8	 comiss	 xmm1, xmm0
  00172	f3 0f 11 4d 10	 movss	 DWORD PTR _iDefenseValue$2$[ebp], xmm1
  00177	76 05		 jbe	 SHORT $LN10@MLS_SkillW
$LN20@MLS_SkillW:

; 2528 : 				iDefenseValue = lpInfo->m_Arg4;

  00179	f3 0f 11 45 10	 movss	 DWORD PTR _iDefenseValue$2$[ebp], xmm0
$LN10@MLS_SkillW:

; 2529 : 	}
; 2530 : 
; 2531 : 	int iManaRate = g_SkillAdditionInfo.GetManaShieldRate(lpMagic->m_Level);

  0017e	8b 55 0c	 mov	 edx, DWORD PTR _lpMagic$[ebp]
  00181	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00185	89 45 f8	 mov	 DWORD PTR _level$1$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h

; 47   : 	short GetManaShieldRate(int level) { if( level < 0 || level > 20 ) return 20; return m_SB_ManaRate[level]; };

  00188	83 f8 14	 cmp	 eax, 20			; 00000014H
  0018b	77 0a		 ja	 SHORT $LN15@MLS_SkillW
  0018d	0f b7 04 45 40
	00 00 00	 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[eax*2+64]
  00195	eb 05		 jmp	 SHORT $LN13@MLS_SkillW
$LN15@MLS_SkillW:
  00197	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
$LN13@MLS_SkillW:
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp

; 2533 : 	iSkillValidTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  0019c	0f b7 8e 02 01
	00 00		 movzx	 ecx, WORD PTR [esi+258]
  001a3	98		 cwde
  001a4	89 45 f4	 mov	 DWORD PTR _iManaRate$1$[ebp], eax
  001a7	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]
  001ae	03 c8		 add	 ecx, eax

; 2534 : 
; 2535 : 	if( iSkillValidTime > lpInfo->m_Arg7)

  001b0	f3 0f 10 4f 1c	 movss	 xmm1, DWORD PTR [edi+28]
  001b5	66 0f 6e c1	 movd	 xmm0, ecx
  001b9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001bc	f3 0f 5e 47 18	 divss	 xmm0, DWORD PTR [edi+24]
  001c1	f3 0f 58 47 14	 addss	 xmm0, DWORD PTR [edi+20]

; 2536 : 		iSkillValidTime = lpInfo->m_Arg7;

  001c6	f3 0f 2c f9	 cvttss2si edi, xmm1
  001ca	f3 0f 2c c0	 cvttss2si eax, xmm0
  001ce	66 0f 6e c0	 movd	 xmm0, eax
  001d2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001d5	0f 2f c1	 comiss	 xmm0, xmm1
  001d8	77 02		 ja	 SHORT $LN11@MLS_SkillW
  001da	8b f8		 mov	 edi, eax
$LN11@MLS_SkillW:

; 2537 : 
; 2538 : 	iSkillValidTime += this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001dc	ff 75 f8	 push	 DWORD PTR _level$1$[ebp]
  001df	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001e4	ff 72 08	 push	 DWORD PTR [edx+8]
  001e7	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001f5	66 0f 6e c7	 movd	 xmm0, edi
  001f9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001fc	f3 0f 11 45 08	 movss	 DWORD PTR tv396[ebp], xmm0
  00201	d8 45 08	 fadd	 DWORD PTR tv396[ebp]
  00204	d9 5d 08	 fstp	 DWORD PTR tv394[ebp]
  00207	f3 0f 2c 45 08	 cvttss2si eax, DWORD PTR tv394[ebp]

; 2539 : 
; 2540 : 	gObjAddBuffEffect(lpTargetObj,BUFF_MANASHIELD,ADD_OPTION_MSDECREASE,(int)iDefenseValue,ADD_OPTION_MSTIME,iManaRate,iSkillValidTime);

  0020c	50		 push	 eax
  0020d	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _iDefenseValue$2$[ebp]
  00212	ff 75 f4	 push	 DWORD PTR _iManaRate$1$[ebp]
  00215	6a 1c		 push	 28			; 0000001cH
  00217	50		 push	 eax
  00218	6a 15		 push	 21			; 00000015H
  0021a	6a 04		 push	 4
  0021c	53		 push	 ebx
  0021d	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2541 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  00222	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00225	6a 01		 push	 1
  00227	ff 36		 push	 DWORD PTR [esi]
  00229	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0022d	50		 push	 eax
  0022e	56		 push	 esi
  0022f	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00234	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN19@MLS_SkillW:
  00237	5f		 pop	 edi
$LN18@MLS_SkillW:
  00238	5e		 pop	 esi
$LN1@MLS_SkillW:
  00239	5b		 pop	 ebx

; 2542 : }

  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce, COMDAT
; _this$ = ecx

; 2471 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2472 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0000b	75 3a		 jne	 SHORT $LN1@MLS_SkillS

; 2473 : 		return;
; 2474 : 
; 2475 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2476 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00011	57		 push	 edi
  00012	69 7d 10 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00019	6a 01		 push	 1
  0001b	ff 33		 push	 DWORD PTR [ebx]
  0001d	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00021	50		 push	 eax
  00022	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2477 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00042	83 c4 34	 add	 esp, 52			; 00000034H
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
$LN1@MLS_SkillS:
  00047	5b		 pop	 ebx

; 2478 : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
_DuelIndex$1$ = -12					; size = 4
tv462 = -8						; size = 4
tv456 = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_x$ = 16						; size = 1
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison, COMDAT
; _this$ = ecx

; 2373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2374 : 	LPOBJ lpObj = &gObj[aIndex];

  00006	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _aIndex$[ebp], 10048
  0000d	56		 push	 esi
  0000e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00014	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00017	03 d6		 add	 edx, esi
  00019	89 55 08	 mov	 DWORD PTR _lpObj$1$[ebp], edx

; 2375 : 
; 2376 : 	if( lpObj->Type != OBJ_USER )

  0001c	80 7a 50 01	 cmp	 BYTE PTR [edx+80], 1
  00020	0f 85 5d 01 00
	00		 jne	 $LN28@MLS_SkillS

; 2377 : 		return;
; 2378 : 
; 2379 : 	int tObjNum;
; 2380 : 	int count = 0;
; 2381 : 
; 2382 : 	int FirstHit = 0;
; 2383 : 	int HitCount = 0;
; 2384 : 	int bAttack;
; 2385 : 	int DuelIndex = lpObj->m_iDuelUser;

  00026	8b 82 50 12 00
	00		 mov	 eax, DWORD PTR [edx+4688]
  0002c	53		 push	 ebx
  0002d	89 45 f4	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  00030	8d 9a 4c 0c 00
	00		 lea	 ebx, DWORD PTR [edx+3148]
  00036	b8 4b 00 00 00	 mov	 eax, 75			; 0000004bH
  0003b	89 5d fc	 mov	 DWORD PTR tv456[ebp], ebx
  0003e	57		 push	 edi
  0003f	89 45 f8	 mov	 DWORD PTR tv462[ebp], eax
$LL2@MLS_SkillS:

; 2386 : 	int EnableAttack;
; 2387 : 
; 2388 : 	while ( true )
; 2389 : 	{
; 2390 : 		if(lpObj->VpPlayer2[count].state != 0)

  00042	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00046	0f 84 23 01 00
	00		 je	 $LN23@MLS_SkillS

; 2391 : 		{
; 2392 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0004c	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 2393 : 
; 2394 : 			if(tObjNum >= 0)

  00050	85 ff		 test	 edi, edi
  00052	0f 88 17 01 00
	00		 js	 $LN23@MLS_SkillS

; 2395 : 			{
; 2396 : 				EnableAttack = 0;
; 2397 : 
; 2398 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00058	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0005a	80 f9 02	 cmp	 cl, 2
  0005d	75 14		 jne	 SHORT $LN7@MLS_SkillS
  0005f	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00065	83 bc 30 30 06
	00 00 00	 cmp	 DWORD PTR [eax+esi+1584], 0
  0006d	0f 8c 9a 00 00
	00		 jl	 $LN11@MLS_SkillS
$LN7@MLS_SkillS:

; 2399 : 				{
; 2400 : 					EnableAttack = 1;
; 2401 : 				}
; 2402 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00073	3b 7d 18	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00076	0f 84 91 00 00
	00		 je	 $LN11@MLS_SkillS
  0007c	39 7d f4	 cmp	 DWORD PTR _DuelIndex$1$[ebp], edi
  0007f	0f 84 88 00 00
	00		 je	 $LN11@MLS_SkillS

; 2403 : 				{
; 2404 : 					EnableAttack = 1;
; 2405 : 				}
; 2406 : #if (GS_CASTLE == 1)
; 2407 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00085	80 f9 03	 cmp	 cl, 3
  00088	74 42		 je	 SHORT $LN12@MLS_SkillS
  0008a	69 df 40 27 00
	00		 imul	 ebx, edi, 10048
  00090	80 bc 33 23 01
	00 00 1e	 cmp	 BYTE PTR [ebx+esi+291], 30 ; 0000001eH
  00098	75 2f		 jne	 SHORT $LN37@MLS_SkillS
  0009a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0009f	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 2408 : 				{
; 2409 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000a4	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
  000a7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ad	83 f8 07	 cmp	 eax, 7
  000b0	75 17		 jne	 SHORT $LN37@MLS_SkillS
  000b2	8a 82 5a 20 00
	00		 mov	 al, BYTE PTR [edx+8282]
  000b8	3a 84 33 5a 20
	00 00		 cmp	 al, BYTE PTR [ebx+esi+8282]
  000bf	75 4c		 jne	 SHORT $LN11@MLS_SkillS
  000c1	8b 5d fc	 mov	 ebx, DWORD PTR tv456[ebp]
  000c4	e9 a3 00 00 00	 jmp	 $LN39@MLS_SkillS
$LN37@MLS_SkillS:
  000c9	8b 5d fc	 mov	 ebx, DWORD PTR tv456[ebp]
$LN12@MLS_SkillS:

; 2410 : 						EnableAttack = 1;
; 2411 : 				}
; 2412 : #endif
; 2413 : 				else
; 2414 : 				{
; 2415 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000cc	69 c7 40 27 00
	00		 imul	 eax, edi, 10048

; 2416 : 
; 2417 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000d2	80 7c 30 50 02	 cmp	 BYTE PTR [eax+esi+80], 2
  000d7	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000da	75 14		 jne	 SHORT $LN15@MLS_SkillS
  000dc	8b 84 30 30 06
	00 00		 mov	 eax, DWORD PTR [eax+esi+1584]
  000e3	85 c0		 test	 eax, eax
  000e5	78 09		 js	 SHORT $LN15@MLS_SkillS

; 2418 : 					{
; 2419 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000e7	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000ed	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
$LN15@MLS_SkillS:

; 2420 : 					}
; 2421 : 
; 2422 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000f0	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  000f6	03 c6		 add	 eax, esi
  000f8	50		 push	 eax
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000ff	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00105	83 c4 08	 add	 esp, 8
  00108	83 f8 01	 cmp	 eax, 1
  0010b	75 5c		 jne	 SHORT $LN38@MLS_SkillS
$LN11@MLS_SkillS:

; 2423 : 					{
; 2424 : 						EnableAttack = 1;
; 2425 : 					}
; 2426 : 				}
; 2427 : 
; 2428 : 				if(EnableAttack != 0)
; 2429 : 				{
; 2430 : 					if(this->MLS_CalDistance(x,y,gObj[tObjNum].X,gObj[tObjNum].Y) < 4)

  0010d	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00113	0f b6 84 31 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+289]
  0011b	50		 push	 eax
  0011c	0f b6 84 31 20
	01 00 00	 movzx	 eax, BYTE PTR [ecx+esi+288]
  00124	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00127	50		 push	 eax
  00128	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  0012c	50		 push	 eax
  0012d	0f b6 45 10	 movzx	 eax, BYTE PTR _x$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00137	83 f8 04	 cmp	 eax, 4
  0013a	7d 2a		 jge	 SHORT $LN36@MLS_SkillS

; 2431 : 					{
; 2432 : 						bAttack = 0;
; 2433 : 
; 2434 : 						if(HitCount > 10)
; 2435 : 						{
; 2436 : 							bAttack = 0;
; 2437 : 						}
; 2438 : 						
; 2439 : 						if(HitCount >= 5)
; 2440 : 						{
; 2441 : 							if(rand()%2)
; 2442 : 							{
; 2443 : 								bAttack = 1;
; 2444 : 							}
; 2445 : 						}
; 2446 : 						else
; 2447 : 						{
; 2448 : 							bAttack = 1;
; 2449 : 						}
; 2450 : 
; 2451 : 						if(bAttack != 0)
; 2452 : 						{
; 2453 : 							int delay = rand()%500;

  0013c	e8 00 00 00 00	 call	 _rand
  00141	99		 cdq
  00142	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  00147	f7 f9		 idiv	 ecx

; 2454 : 							gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,delay,lpMagic->m_Skill,0);

  00149	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0014c	6a 00		 push	 0
  0014e	ff 70 08	 push	 DWORD PTR [eax+8]
  00151	52		 push	 edx
  00152	57		 push	 edi
  00153	6a 32		 push	 50			; 00000032H
  00155	ff 75 08	 push	 DWORD PTR _lpObj$1$[ebp]
  00158	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  0015d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00163	83 c4 18	 add	 esp, 24			; 00000018H
$LN36@MLS_SkillS:
  00166	8b 5d fc	 mov	 ebx, DWORD PTR tv456[ebp]
$LN38@MLS_SkillS:
  00169	8b 55 08	 mov	 edx, DWORD PTR _lpObj$1$[ebp]
$LN39@MLS_SkillS:
  0016c	8b 45 f8	 mov	 eax, DWORD PTR tv462[ebp]
$LN23@MLS_SkillS:

; 2455 : 						}
; 2456 : 					}
; 2457 : 				}
; 2458 : 			}
; 2459 : 		}
; 2460 : 
; 2461 : 		count++;

  0016f	83 c3 0c	 add	 ebx, 12			; 0000000cH

; 2462 : 		if(count > MAX_VIEWPORT -1)

  00172	83 e8 01	 sub	 eax, 1
  00175	89 5d fc	 mov	 DWORD PTR tv456[ebp], ebx
  00178	89 45 f8	 mov	 DWORD PTR tv462[ebp], eax
  0017b	0f 85 c1 fe ff
	ff		 jne	 $LL2@MLS_SkillS
  00181	5f		 pop	 edi
  00182	5b		 pop	 ebx
$LN28@MLS_SkillS:
  00183	5e		 pop	 esi

; 2463 : 		{
; 2464 : 			break;
; 2465 : 		}
; 2466 : 	}
; 2467 : 	return;
; 2468 : }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 14 00	 ret	 20			; 00000014H
?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison, COMDAT
; _this$ = ecx

; 2354 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2355 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0000b	75 3a		 jne	 SHORT $LN1@MLS_SkillS

; 2356 : 		return;
; 2357 : 
; 2358 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2359 : 	GCMagicAttackNumberSend(lpObj, lpMagic->m_Skill, lpTargetObj->m_Index, TRUE);

  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00011	57		 push	 edi
  00012	69 7d 10 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00019	6a 01		 push	 1
  0001b	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  0001f	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00025	ff 37		 push	 DWORD PTR [edi]
  00027	50		 push	 eax
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2360 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00042	83 c4 34	 add	 esp, 52			; 00000034H
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
$LN1@MLS_SkillS:
  00047	5b		 pop	 ebx

; 2361 : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit, COMDAT
; _this$ = ecx

; 2364 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2365 : 	if( lpObj->Type != OBJ_USER )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	80 79 50 01	 cmp	 BYTE PTR [ecx+80], 1
  0000a	75 26		 jne	 SHORT $LN1@MLS_SkillM

; 2366 : 		return;
; 2367 : 
; 2368 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  0000c	69 45 0c 40 27
	00 00		 imul	 eax, DWORD PTR _aTargetIndex$[ebp], 10048

; 2369 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	6a 00		 push	 0
  00023	6a 01		 push	 1
  00025	ff 75 10	 push	 DWORD PTR _lpMagic$[ebp]
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0002f	83 c4 24	 add	 esp, 36			; 00000024H
$LN1@MLS_SkillM:

; 2370 : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder, COMDAT
; _this$ = ecx

; 2344 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2345 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0000b	75 3a		 jne	 SHORT $LN1@MLS_SkillS

; 2346 : 		return;
; 2347 : 
; 2348 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2349 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00011	57		 push	 edi
  00012	69 7d 10 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00019	6a 01		 push	 1
  0001b	ff 33		 push	 DWORD PTR [ebx]
  0001d	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00021	50		 push	 eax
  00022	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2350 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00042	83 c4 34	 add	 esp, 52			; 00000034H
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
$LN1@MLS_SkillS:
  00047	5b		 pop	 ebx

; 2351 : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame, COMDAT
; _this$ = ecx

; 2334 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2335 : 	if( lpObj->Type != OBJ_USER )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0000b	75 3a		 jne	 SHORT $LN1@MLS_SkillS

; 2336 : 		return;
; 2337 : 
; 2338 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];
; 2339 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000d	56		 push	 esi
  0000e	8b 75 0c	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00011	57		 push	 edi
  00012	69 7d 10 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  00019	6a 01		 push	 1
  0001b	ff 33		 push	 DWORD PTR [ebx]
  0001d	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00021	50		 push	 eax
  00022	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	53		 push	 ebx
  00029	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2340 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	6a 01		 push	 1
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00042	83 c4 34	 add	 esp, 52			; 00000034H
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
$LN1@MLS_SkillS:
  00047	5b		 pop	 ebx

; 2341 : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenFlame@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenFlame
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_fMagicDamage$1$ = 8					; size = 4
_fSkillValue$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower, COMDAT
; _this$ = ecx

; 2298 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 2299 : 	if( lpObj->Type != OBJ_USER )

  00006	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00012	74 0a		 je	 SHORT $LN2@MLS_SkillS
$LN9@MLS_SkillS:
  00014	5e		 pop	 esi

; 2300 : 		return false;

  00015	33 c0		 xor	 eax, eax
  00017	5b		 pop	 ebx

; 2331 : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_SkillS:

; 2301 : 
; 2302 : 	if( lpObj->Class != CLASS_WIZARD )

  0001e	66 83 be 90 00
	00 00 00	 cmp	 WORD PTR [esi+144], 0
  00026	75 ec		 jne	 SHORT $LN9@MLS_SkillS

; 2303 : 		return false;
; 2304 : 
; 2305 : 	if( gObjCheckUsedBuffEffect(lpObj,BUFF_EXP_WIZARDRY3) == TRUE )

  00028	68 8b 00 00 00	 push	 139			; 0000008bH
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00033	83 c4 08	 add	 esp, 8
  00036	3c 01		 cmp	 al, 1
  00038	74 da		 je	 SHORT $LN9@MLS_SkillS

; 2306 : 		return false;
; 2307 : 
; 2308 : 	float fSkillValue = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  0003a	57		 push	 edi
  0003b	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  0003e	8b cb		 mov	 ecx, ebx
  00040	6a 01		 push	 1
  00042	ff 77 08	 push	 DWORD PTR [edi+8]
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 2309 : 
; 2310 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  0004b	ff 77 08	 push	 DWORD PTR [edi+8]
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00053	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$[ebp]
  00056	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0005b	8b f8		 mov	 edi, eax

; 2311 : 
; 2312 : 	if( !lpInfo )

  0005d	85 ff		 test	 edi, edi
  0005f	75 09		 jne	 SHORT $LN5@MLS_SkillS
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx

; 2331 : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 0c 00	 ret	 12			; 0000000cH
$LN5@MLS_SkillS:

; 2313 : 	{
; 2314 : 		return 0;
; 2315 : 	}
; 2316 : 
; 2317 : 	int nEffectValue = (lpObj->Energy/lpInfo->m_Arg1)*lpInfo->m_Arg2;

  0006a	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]

; 2318 : 
; 2319 : 	if( nEffectValue > lpInfo->m_Arg3 )

  00071	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  00076	66 0f 6e c0	 movd	 xmm0, eax
  0007a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007d	f3 0f 5e 47 04	 divss	 xmm0, DWORD PTR [edi+4]
  00082	f3 0f 59 47 08	 mulss	 xmm0, DWORD PTR [edi+8]
  00087	f3 0f 2c d8	 cvttss2si ebx, xmm0
  0008b	66 0f 6e c3	 movd	 xmm0, ebx
  0008f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00092	0f 2f c1	 comiss	 xmm0, xmm1
  00095	76 04		 jbe	 SHORT $LN6@MLS_SkillS

; 2320 : 	{
; 2321 : 		nEffectValue = lpInfo->m_Arg3;

  00097	f3 0f 2c d9	 cvttss2si ebx, xmm1
$LN6@MLS_SkillS:
  0009b	66 0f 6e 86 4c
	06 00 00	 movd	 xmm0, DWORD PTR [esi+1612]

; 2322 : 	}
; 2323 : 
; 2324 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;

  000a3	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2325 : 	fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000a6	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000a9	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000ad	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  000b5	50		 push	 eax
  000b6	ff 71 08	 push	 DWORD PTR [ecx+8]
  000b9	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  000be	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000c3	f3 0f 11 45 08	 movss	 DWORD PTR _fMagicDamage$1$[ebp], xmm0
  000c8	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2326 : 	lpObj->m_MPSkillOpt.MpsExpWizardryCrit = fSkillValue;

  000d6	d9 9e d4 07 00
	00		 fstp	 DWORD PTR [esi+2004]

; 2327 : 
; 2328 : 	gObjAddBuffEffect(lpObj,BUFF_EXP_WIZARDRY3,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,lpInfo->m_Arg4);

  000dc	f3 0f 2c 47 10	 cvttss2si eax, DWORD PTR [edi+16]
  000e1	50		 push	 eax
  000e2	f3 0f 2c 45 08	 cvttss2si eax, DWORD PTR _fMagicDamage$1$[ebp]
  000e7	50		 push	 eax
  000e8	6a 22		 push	 34			; 00000022H
  000ea	53		 push	 ebx
  000eb	6a 21		 push	 33			; 00000021H
  000ed	68 8b 00 00 00	 push	 139			; 0000008bH
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2329 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000f8	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  000fb	6a 01		 push	 1
  000fd	ff 36		 push	 DWORD PTR [esi]
  000ff	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00103	50		 push	 eax
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0010a	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2330 : 	return true;

  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx

; 2331 : }

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z
_TEXT	SEGMENT
_fSkillValue$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower, COMDAT
; _this$ = ecx

; 2263 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2264 : 	if( lpObj->Type != OBJ_USER )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0000e	74 08		 je	 SHORT $LN2@MLS_SkillS
$LN9@MLS_SkillS:
  00010	5e		 pop	 esi

; 2265 : 		return false;

  00011	33 c0		 xor	 eax, eax
  00013	5b		 pop	 ebx

; 2295 : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@MLS_SkillS:

; 2266 : 
; 2267 : 	if( lpObj->Class != CLASS_WIZARD )

  00018	66 83 be 90 00
	00 00 00	 cmp	 WORD PTR [esi+144], 0
  00020	75 ee		 jne	 SHORT $LN9@MLS_SkillS

; 2268 : 		return false;
; 2269 : 
; 2270 : 	if( gObjCheckUsedBuffEffect(lpObj,BUFF_EXP_WIZARDRY2) == TRUE )

  00022	68 8a 00 00 00	 push	 138			; 0000008aH
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0002d	83 c4 08	 add	 esp, 8
  00030	3c 01		 cmp	 al, 1
  00032	74 dc		 je	 SHORT $LN9@MLS_SkillS

; 2271 : 		return false;
; 2272 : 
; 2273 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  00034	57		 push	 edi
  00035	8b 7d 0c	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0003d	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00041	50		 push	 eax
  00042	ff 77 08	 push	 DWORD PTR [edi+8]
  00045	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0004a	50		 push	 eax
  0004b	8b cb		 mov	 ecx, ebx
  0004d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2274 : 
; 2275 : 
; 2276 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00052	ff 77 08	 push	 DWORD PTR [edi+8]
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0005a	d9 5d 08	 fstp	 DWORD PTR _fSkillValue$[ebp]
  0005d	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00062	8b c8		 mov	 ecx, eax

; 2277 : 
; 2278 : 	if( !lpInfo )

  00064	85 c9		 test	 ecx, ecx
  00066	75 07		 jne	 SHORT $LN5@MLS_SkillS
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx

; 2295 : }

  0006b	5d		 pop	 ebp
  0006c	c2 0c 00	 ret	 12			; 0000000cH
$LN5@MLS_SkillS:

; 2279 : 	{
; 2280 : 		return 0;
; 2281 : 	}
; 2282 : 
; 2283 : 	int nEffectValue = (lpObj->Energy/lpInfo->m_Arg1)*lpInfo->m_Arg2;

  0006f	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]

; 2284 : 
; 2285 : 	if( nEffectValue > lpInfo->m_Arg3 )

  00076	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  0007b	66 0f 6e c0	 movd	 xmm0, eax
  0007f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00082	f3 0f 5e 41 04	 divss	 xmm0, DWORD PTR [ecx+4]
  00087	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0008c	f3 0f 2c d0	 cvttss2si edx, xmm0
  00090	66 0f 6e c2	 movd	 xmm0, edx
  00094	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00097	0f 2f c1	 comiss	 xmm0, xmm1
  0009a	76 04		 jbe	 SHORT $LN6@MLS_SkillS

; 2286 : 	{
; 2287 : 		nEffectValue = lpInfo->m_Arg3;

  0009c	f3 0f 2c d1	 cvttss2si edx, xmm1
$LN6@MLS_SkillS:
  000a0	66 0f 6e 86 4c
	06 00 00	 movd	 xmm0, DWORD PTR [esi+1612]

; 2288 : 	}
; 2289 : 
; 2290 : 	float fMagicDamage = (lpObj->m_MagicDamageMax/100.0f)*fSkillValue;

  000a8	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2291 : 
; 2292 : 	gObjAddBuffEffect(lpObj,BUFF_EXP_WIZARDRY2,ADD_OPTION_MAGICDAMAGEMIN,nEffectValue,ADD_OPTION_MAGICDAMAGEMAX,fMagicDamage,lpInfo->m_Arg4);

  000ab	f3 0f 2c 41 10	 cvttss2si eax, DWORD PTR [ecx+16]
  000b0	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  000b8	50		 push	 eax
  000b9	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  000be	f3 0f 2c c0	 cvttss2si eax, xmm0
  000c2	50		 push	 eax
  000c3	6a 22		 push	 34			; 00000022H
  000c5	52		 push	 edx
  000c6	6a 21		 push	 33			; 00000021H
  000c8	68 8a 00 00 00	 push	 138			; 0000008aH
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2293 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  000d3	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  000d7	6a 01		 push	 1
  000d9	ff 36		 push	 DWORD PTR [esi]
  000db	50		 push	 eax
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  000e2	83 c4 2c	 add	 esp, 44			; 0000002cH

; 2294 : 	return true;

  000e5	b8 01 00 00 00	 mov	 eax, 1
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx

; 2295 : }

  000ed	5d		 pop	 ebp
  000ee	c2 0c 00	 ret	 12			; 0000000cH
?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$1$ = -48					; size = 4
_iaddBPpower$ = -48					; size = 4
_iaddManapower$ = -48					; size = 4
_lpMagic$GSCopy$1$ = -44				; size = 4
_iaddLifepower$1$ = -40					; size = 4
_this$GSCopy$1$ = -36					; size = 4
_iLifeTime$1$ = -36					; size = 4
_fSkillValue$ = -36					; size = 4
_iaddManapower$1$ = -32					; size = 4
tv594 = -32						; size = 4
_fSkillValue1$ = -32					; size = 4
_fSkillValue2$ = -32					; size = 4
_iaddBPpower$1$ = -28					; size = 4
_viewplayer$1$ = -28					; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife, COMDAT
; _this$ = ecx

; 2112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00017	89 4d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001a	89 45 d4	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax

; 2113 : 	int skillSuccess = TRUE;
; 2114 : 
; 2115 : 	if( lpObj->Type != OBJ_USER &&

  0001d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00021	74 0d		 je	 SHORT $LN8@MLS_SkillM
  00023	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0002a	0f 84 93 03 00
	00		 je	 $LN6@MLS_SkillM
$LN8@MLS_SkillM:

; 2116 : 		lpObj->m_RecallMon == -1 )
; 2117 : 		return;
; 2118 : 
; 2119 : 	if( lpObj->Class != CLASS_KNIGHT &&

  00030	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	74 09		 je	 SHORT $LN9@MLS_SkillM
  0003c	83 f8 03	 cmp	 eax, 3
  0003f	0f 85 7e 03 00
	00		 jne	 $LN6@MLS_SkillM
$LN9@MLS_SkillM:

; 2120 : 		lpObj->Class != CLASS_MAGUMSA )
; 2121 : 		return;
; 2122 : 
; 2123 : 	int number;
; 2124 : 	int partynum = 0;
; 2125 : 	int totallevel = 0;
; 2126 : 	int partycount;
; 2127 : 	int dis;
; 2128 : 	int ApplyPartyIndex[5];
; 2129 : 	int viewplayer = 0;
; 2130 : 	int viewpercent = 0;
; 2131 : 	LPOBJ lpPartyObj;
; 2132 : 
; 2133 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 2134 : 
; 2135 : 	partynum = lpObj->PartyNumber;

  00045	8b 97 0c 06 00
	00		 mov	 edx, DWORD PTR [edi+1548]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00054	53		 push	 ebx
  00055	33 db		 xor	 ebx, ebx
  00057	89 4d e4	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  0005a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00061	89 55 d0	 mov	 DWORD PTR _partynum$1$[ebp], edx
  00064	56		 push	 esi
  00065	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 2136 : 
; 2137 : 	if( partynum != -1 )

  00069	83 fa ff	 cmp	 edx, -1
  0006c	0f 84 89 00 00
	00		 je	 $LN19@MLS_SkillM

; 2138 : 	{
; 2139 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2140 : 
; 2141 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00072	8b c2		 mov	 eax, edx
  00074	33 f6		 xor	 esi, esi
  00076	c1 e0 04	 shl	 eax, 4
  00079	2b c2		 sub	 eax, edx
  0007b	8d 1c 85 0c 00
	00 00		 lea	 ebx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  00082	89 5d e0	 mov	 DWORD PTR tv594[ebp], ebx
$LL4@MLS_SkillM:

; 2142 : 		{
; 2143 : 			number = gParty.m_PartyS[partynum].Number[n];

  00085	8b 1b		 mov	 ebx, DWORD PTR [ebx]

; 2144 : 
; 2145 : 			if( number >= 0 )

  00087	85 db		 test	 ebx, ebx
  00089	78 39		 js	 SHORT $LN2@MLS_SkillM

; 2146 : 			{
; 2147 : 				lpPartyObj = &gObj[number];
; 2148 : 
; 2149 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008b	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00091	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00097	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009d	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  000a3	75 1c		 jne	 SHORT $LN42@MLS_SkillM

; 2150 : 				{
; 2151 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000a5	51		 push	 ecx
  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 2152 : 
; 2153 : 					if( dis < 10 )
; 2154 : 					{
; 2155 : 						ApplyPartyIndex[n] = number;
; 2156 : 						viewplayer++;

  000ac	8b 4d e4	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
  000af	83 c4 08	 add	 esp, 8
  000b2	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b5	7d 0d		 jge	 SHORT $LN2@MLS_SkillM
  000b7	41		 inc	 ecx
  000b8	89 5c b5 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+esi*4], ebx
  000bc	89 4d e4	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  000bf	eb 03		 jmp	 SHORT $LN2@MLS_SkillM
$LN42@MLS_SkillM:
  000c1	8b 4d e4	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
$LN2@MLS_SkillM:

; 2138 : 	{
; 2139 : 		partycount = gParty.m_PartyS[partynum].Count;
; 2140 : 
; 2141 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000c4	8b 5d e0	 mov	 ebx, DWORD PTR tv594[ebp]
  000c7	46		 inc	 esi
  000c8	83 c3 04	 add	 ebx, 4
  000cb	89 5d e0	 mov	 DWORD PTR tv594[ebp], ebx
  000ce	83 fe 05	 cmp	 esi, 5
  000d1	7c b2		 jl	 SHORT $LL4@MLS_SkillM

; 2157 : 					}
; 2158 : 				}
; 2159 : 			}
; 2160 : 		}
; 2161 : 	}
; 2162 : 
; 2163 : 	if( viewplayer > 1 )

  000d3	83 f9 01	 cmp	 ecx, 1
  000d6	7e 21		 jle	 SHORT $LN44@MLS_SkillM

; 2164 : 	{
; 2165 : 		if( viewplayer == 2 )

  000d8	83 f9 02	 cmp	 ecx, 2
  000db	75 05		 jne	 SHORT $LN15@MLS_SkillM

; 2166 : 		{
; 2167 : 			viewpercent = 1;

  000dd	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
  000e0	eb 19		 jmp	 SHORT $LN19@MLS_SkillM
$LN15@MLS_SkillM:

; 2168 : 		}
; 2169 : 		else if( viewplayer == 3 )

  000e2	83 f9 03	 cmp	 ecx, 3
  000e5	75 05		 jne	 SHORT $LN17@MLS_SkillM

; 2170 : 		{
; 2171 : 			viewpercent = 2;

  000e7	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
  000ea	eb 0f		 jmp	 SHORT $LN19@MLS_SkillM
$LN17@MLS_SkillM:

; 2172 : 		}
; 2173 : 		else if( viewplayer == 4 )

  000ec	33 db		 xor	 ebx, ebx
  000ee	83 f9 04	 cmp	 ecx, 4
  000f1	0f 95 c3	 setne	 bl
  000f4	83 c3 03	 add	 ebx, 3
  000f7	eb 02		 jmp	 SHORT $LN19@MLS_SkillM
$LN44@MLS_SkillM:
  000f9	33 db		 xor	 ebx, ebx
$LN19@MLS_SkillM:

; 2174 : 		{
; 2175 : 			viewpercent = 3;
; 2176 : 		}
; 2177 : 		else
; 2178 : 		{
; 2179 : 			viewpercent = 4;
; 2180 : 		}
; 2181 : 	}
; 2182 : 	
; 2183 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  000fb	8b 45 d4	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00103	ff 70 08	 push	 DWORD PTR [eax+8]
  00106	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0010b	8b f0		 mov	 esi, eax

; 2184 : 
; 2185 : 	if( !lpInfo )

  0010d	85 f6		 test	 esi, esi
  0010f	0f 84 ac 02 00
	00		 je	 $LN45@MLS_SkillM

; 2186 : 	{
; 2187 : 		return;
; 2188 : 	}
; 2189 : 
; 2190 : 	float iaddLifepower = lpInfo->m_Arg1 + (lpObj->Vitality + lpObj->AddVitality) / lpInfo->m_Arg2 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg3 + viewpercent;

  00115	0f b7 8f d4 00
	00 00		 movzx	 ecx, WORD PTR [edi+212]
  0011c	0f b7 97 00 01
	00 00		 movzx	 edx, WORD PTR [edi+256]
  00123	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  0012a	03 d1		 add	 edx, ecx
  0012c	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00133	03 c8		 add	 ecx, eax
  00135	66 0f 6e d3	 movd	 xmm2, ebx
  00139	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0013c	66 0f 6e ca	 movd	 xmm1, edx
  00140	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00143	66 0f 6e c1	 movd	 xmm0, ecx
  00147	f3 0f 5e 4e 08	 divss	 xmm1, DWORD PTR [esi+8]
  0014c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0014f	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00154	f3 0f 5e 46 0c	 divss	 xmm0, DWORD PTR [esi+12]
  00159	f3 0f 11 55 e4	 movss	 DWORD PTR _iaddBPpower$1$[ebp], xmm2
  0015e	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2191 : 
; 2192 : 	if( iaddLifepower > lpInfo->m_Arg4 )

  00162	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00167	f3 0f 58 ca	 addss	 xmm1, xmm2
  0016b	0f 2f c8	 comiss	 xmm1, xmm0
  0016e	f3 0f 11 4d d8	 movss	 DWORD PTR _iaddLifepower$1$[ebp], xmm1
  00173	76 05		 jbe	 SHORT $LN22@MLS_SkillM

; 2193 : 	{
; 2194 : 		iaddLifepower = lpInfo->m_Arg4;

  00175	f3 0f 11 45 d8	 movss	 DWORD PTR _iaddLifepower$1$[ebp], xmm0
$LN22@MLS_SkillM:

; 2195 : 	}
; 2196 : 
; 2197 : 	float fSkillValue2 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  0017a	8b 5d d4	 mov	 ebx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0017d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00180	6a 02		 push	 2
  00182	ff 73 08	 push	 DWORD PTR [ebx+8]
  00185	57		 push	 edi
  00186	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  0018b	d9 5d e0	 fstp	 DWORD PTR _fSkillValue2$[ebp]

; 2198 : 
; 2199 : 	if( fSkillValue2 > 0.0f )

  0018e	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _fSkillValue2$[ebp]
  00193	0f 57 c0	 xorps	 xmm0, xmm0
  00196	0f 2f c8	 comiss	 xmm1, xmm0
  00199	76 0e		 jbe	 SHORT $LN23@MLS_SkillM

; 2200 : 	{
; 2201 : 		iaddLifepower += fSkillValue2;

  0019b	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _iaddLifepower$1$[ebp]
  001a0	f3 0f 58 c1	 addss	 xmm0, xmm1
  001a4	f3 0f 11 45 d8	 movss	 DWORD PTR _iaddLifepower$1$[ebp], xmm0
$LN23@MLS_SkillM:

; 2202 : 	}
; 2203 : 
; 2204 : 	float iaddManapower;
; 2205 : 	float fSkillValue1 = this->GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  001a9	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001ac	6a 01		 push	 1
  001ae	ff 73 08	 push	 DWORD PTR [ebx+8]
  001b1	57		 push	 edi
  001b2	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
  001b7	d9 5d e0	 fstp	 DWORD PTR _fSkillValue1$[ebp]

; 2206 : 
; 2207 : 	if( fSkillValue1 > 0.0f )

  001ba	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _fSkillValue1$[ebp]
  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	0f 2f c8	 comiss	 xmm1, xmm0
  001c5	76 0b		 jbe	 SHORT $LN40@MLS_SkillM

; 2208 : 	{
; 2209 : 		iaddManapower = fSkillValue1+viewpercent;

  001c7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _iaddBPpower$1$[ebp]
  001cc	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d0	eb 05		 jmp	 SHORT $LN47@MLS_SkillM
$LN40@MLS_SkillM:
  001d2	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _iaddManapower$[ebp]
$LN47@MLS_SkillM:

; 2210 : 	}
; 2211 : 
; 2212 : 	float iaddBPpower;
; 2213 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  001d7	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  001db	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001e0	50		 push	 eax
  001e1	ff 73 08	 push	 DWORD PTR [ebx+8]
  001e4	f3 0f 11 45 e0	 movss	 DWORD PTR _iaddManapower$1$[ebp], xmm0
  001e9	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001ee	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001f7	d9 5d dc	 fstp	 DWORD PTR _fSkillValue$[ebp]

; 2214 : 
; 2215 : 	if( fSkillValue > 0.0f )

  001fa	f3 0f 10 55 dc	 movss	 xmm2, DWORD PTR _fSkillValue$[ebp]
  001ff	0f 57 c0	 xorps	 xmm0, xmm0
  00202	0f 2f d0	 comiss	 xmm2, xmm0
  00205	76 0b		 jbe	 SHORT $LN41@MLS_SkillM

; 2216 : 	{
; 2217 : 		iaddBPpower = fSkillValue+viewpercent;

  00207	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _iaddBPpower$1$[ebp]
  0020c	f3 0f 58 ca	 addss	 xmm1, xmm2
  00210	eb 05		 jmp	 SHORT $LN48@MLS_SkillM
$LN41@MLS_SkillM:
  00212	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _iaddBPpower$[ebp]
$LN48@MLS_SkillM:

; 2218 : 	}
; 2219 : 
; 2220 : 	int iLifeTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  00217	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  0021e	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00225	03 c8		 add	 ecx, eax

; 2221 : 
; 2222 : 	if( iLifeTime > lpInfo->m_Arg7 )

  00227	f3 0f 10 56 1c	 movss	 xmm2, DWORD PTR [esi+28]
  0022c	f3 0f 11 4d e4	 movss	 DWORD PTR _iaddBPpower$1$[ebp], xmm1
  00231	66 0f 6e c1	 movd	 xmm0, ecx
  00235	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00238	f3 0f 5e 46 18	 divss	 xmm0, DWORD PTR [esi+24]
  0023d	f3 0f 58 46 14	 addss	 xmm0, DWORD PTR [esi+20]
  00242	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00246	89 4d dc	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
  00249	66 0f 6e c1	 movd	 xmm0, ecx
  0024d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00250	0f 2f c2	 comiss	 xmm0, xmm2
  00253	76 07		 jbe	 SHORT $LN26@MLS_SkillM

; 2223 : 		iLifeTime = lpInfo->m_Arg7;

  00255	f3 0f 2c ca	 cvttss2si ecx, xmm2
  00259	89 4d dc	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
$LN26@MLS_SkillM:

; 2224 : 
; 2225 : 	int iaddlife;
; 2226 : 	int iaddMana;
; 2227 : 	int iaddBP;
; 2228 : 
; 2229 : 	if( partynum == -1 )

  0025c	83 7d d0 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  00260	0f 85 96 00 00
	00		 jne	 $LN27@MLS_SkillM

; 2230 : 	{
; 2231 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2232 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;
; 2233 : 		iaddBP = lpObj->MaxBP*iaddBPpower/100;

  00266	66 0f 6e 87 08
	01 00 00	 movd	 xmm0, DWORD PTR [edi+264]
  0026e	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2234 : 
; 2235 : 		lpObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2236 : 
; 2237 : 		gObjAddBuffEffect(lpObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  00271	51		 push	 ecx
  00272	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00276	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  0027e	f3 0f 5e c1	 divss	 xmm0, xmm1
  00282	f3 0f 2c c0	 cvttss2si eax, xmm0
  00286	66 0f 6e c0	 movd	 xmm0, eax
  0028a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0028d	f3 0f 11 87 6c
	08 00 00	 movss	 DWORD PTR [edi+2156], xmm0
  00295	f3 0f 10 87 f0
	00 00 00	 movss	 xmm0, DWORD PTR [edi+240]
  0029d	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _iaddManapower$1$[ebp]
  002a2	f3 0f 5e c1	 divss	 xmm0, xmm1
  002a6	f3 0f 2c c0	 cvttss2si eax, xmm0
  002aa	f3 0f 10 87 dc
	00 00 00	 movss	 xmm0, DWORD PTR [edi+220]
  002b2	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _iaddLifepower$1$[ebp]
  002b7	50		 push	 eax
  002b8	6a 05		 push	 5
  002ba	f3 0f 5e c1	 divss	 xmm0, xmm1
  002be	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c2	50		 push	 eax
  002c3	6a 04		 push	 4
  002c5	68 88 00 00 00	 push	 136			; 00000088H
  002ca	57		 push	 edi
  002cb	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2238 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  002d0	0f b7 43 08	 movzx	 eax, WORD PTR [ebx+8]
  002d4	6a 01		 push	 1
  002d6	ff 37		 push	 DWORD PTR [edi]
  002d8	50		 push	 eax
  002d9	57		 push	 edi
  002da	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2239 : 		gObjCalCharacter(lpObj->m_Index);

  002df	ff 37		 push	 DWORD PTR [edi]
  002e1	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  002e6	83 c4 30	 add	 esp, 48			; 00000030H
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx
  002eb	5f		 pop	 edi

; 2257 : 			}
; 2258 : 		}
; 2259 : 	}
; 2260 : }

  002ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ef	33 cd		 xor	 ecx, ebp
  002f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f6	8b e5		 mov	 esp, ebp
  002f8	5d		 pop	 ebp
  002f9	c2 08 00	 ret	 8
$LN27@MLS_SkillM:

; 2240 : 	}
; 2241 : 	else
; 2242 : 	{
; 2243 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  002fc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  00304	33 db		 xor	 ebx, ebx
  00306	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@MLS_SkillM:

; 2244 : 		{
; 2245 : 			if( ApplyPartyIndex[n] != -1 )

  00310	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00314	83 f8 ff	 cmp	 eax, -1
  00317	0f 84 92 00 00
	00		 je	 $LN5@MLS_SkillM

; 2246 : 			{
; 2247 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0031d	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2248 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2249 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;
; 2250 : 				iaddBP = lpPartyObj->MaxBP*iaddBPpower/100;
; 2251 : 
; 2252 : 				lpPartyObj->m_MPSkillOpt.MpsSwellLifeAddBP = iaddBP;
; 2253 : 
; 2254 : 				gObjAddBuffEffect(lpPartyObj,BUFF_SWELL_LIFE3,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  00323	51		 push	 ecx
  00324	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0032a	66 0f 6e 86 08
	01 00 00	 movd	 xmm0, DWORD PTR [esi+264]
  00332	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00335	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00339	f3 0f 5e c2	 divss	 xmm0, xmm2
  0033d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00341	66 0f 6e c0	 movd	 xmm0, eax
  00345	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00348	f3 0f 11 86 6c
	08 00 00	 movss	 DWORD PTR [esi+2156], xmm0
  00350	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  00358	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _iaddManapower$1$[ebp]
  0035d	f3 0f 5e c2	 divss	 xmm0, xmm2
  00361	f3 0f 2c c0	 cvttss2si eax, xmm0
  00365	f3 0f 10 86 dc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+220]
  0036d	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _iaddLifepower$1$[ebp]
  00372	50		 push	 eax
  00373	6a 05		 push	 5
  00375	f3 0f 5e c2	 divss	 xmm0, xmm2
  00379	f3 0f 2c c0	 cvttss2si eax, xmm0
  0037d	50		 push	 eax
  0037e	6a 04		 push	 4
  00380	68 88 00 00 00	 push	 136			; 00000088H
  00385	56		 push	 esi
  00386	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2255 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  0038b	8b 45 d4	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0038e	6a 01		 push	 1
  00390	ff 36		 push	 DWORD PTR [esi]
  00392	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00396	50		 push	 eax
  00397	57		 push	 edi
  00398	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend

; 2256 : 				gObjCalCharacter(lpPartyObj->m_Index);

  0039d	ff 36		 push	 DWORD PTR [esi]
  0039f	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  003a4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  003ac	83 c4 30	 add	 esp, 48			; 00000030H
$LN5@MLS_SkillM:

; 2240 : 	}
; 2241 : 	else
; 2242 : 	{
; 2243 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  003af	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _iaddBPpower$1$[ebp]
  003b4	43		 inc	 ebx
  003b5	8b 4d dc	 mov	 ecx, DWORD PTR _iLifeTime$1$[ebp]
  003b8	83 fb 05	 cmp	 ebx, 5
  003bb	0f 8c 4f ff ff
	ff		 jl	 $LL7@MLS_SkillM
$LN45@MLS_SkillM:
  003c1	5e		 pop	 esi
  003c2	5b		 pop	 ebx
$LN6@MLS_SkillM:

; 2257 : 			}
; 2258 : 		}
; 2259 : 	}
; 2260 : }

  003c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c6	33 cd		 xor	 ecx, ebp
  003c8	5f		 pop	 edi
  003c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ce	8b e5		 mov	 esp, ebp
  003d0	5d		 pop	 ebp
  003d1	c2 08 00	 ret	 8
?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$1$ = -44					; size = 4
_iaddLifepower$ = -44					; size = 4
_lpMagic$GSCopy$1$ = -40				; size = 4
_this$GSCopy$1$ = -36					; size = 4
_iLifeTime$1$ = -36					; size = 4
_iaddLifepower$2$ = -32					; size = 4
_viewplayer$1$ = -32					; size = 4
_iPreSkill$1$ = -28					; size = 4
tv638 = -28						; size = 4
tv616 = -28						; size = 4
_iaddManapower$ = -28					; size = 4
_fSkillValue$1 = -28					; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife, COMDAT
; _this$ = ecx

; 1958 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00014	89 4d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  0001a	89 4d d8	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], ecx

; 1959 : 	int skillSuccess = TRUE;
; 1960 : 
; 1961 : 	if( lpObj->Type != OBJ_USER &&

  0001d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00021	74 0d		 je	 SHORT $LN8@MLS_SkillF
  00023	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  0002a	0f 84 6e 03 00
	00		 je	 $LN6@MLS_SkillF
$LN8@MLS_SkillF:

; 1962 : 		lpObj->m_RecallMon == -1 )
; 1963 : 		return;
; 1964 : 
; 1965 : 	if( lpObj->Class != CLASS_KNIGHT &&

  00030	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	74 09		 je	 SHORT $LN9@MLS_SkillF
  0003c	83 f8 03	 cmp	 eax, 3
  0003f	0f 85 59 03 00
	00		 jne	 $LN6@MLS_SkillF
$LN9@MLS_SkillF:

; 1966 : 		lpObj->Class != CLASS_MAGUMSA )
; 1967 : 		return;
; 1968 : 
; 1969 : 	int number;
; 1970 : 	int partynum = 0;
; 1971 : 	int totallevel = 0;
; 1972 : 	int partycount;
; 1973 : 	int dis;
; 1974 : 	int ApplyPartyIndex[5];
; 1975 : 	int viewplayer = 0;
; 1976 : 	int viewpercent = 0;
; 1977 : 	LPOBJ lpPartyObj;
; 1978 : 
; 1979 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 1980 : 
; 1981 : 	partynum = lpObj->PartyNumber;

  00045	8b 97 0c 06 00
	00		 mov	 edx, DWORD PTR [edi+1548]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00054	53		 push	 ebx
  00055	33 db		 xor	 ebx, ebx
  00057	89 4d e0	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  0005a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00061	89 55 d4	 mov	 DWORD PTR _partynum$1$[ebp], edx
  00064	56		 push	 esi
  00065	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 1982 : 
; 1983 : 	if( partynum != -1 )

  00069	83 fa ff	 cmp	 edx, -1
  0006c	0f 84 89 00 00
	00		 je	 $LN19@MLS_SkillF

; 1984 : 	{
; 1985 : 		partycount = gParty.m_PartyS[partynum].Count;
; 1986 : 
; 1987 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00072	8b c2		 mov	 eax, edx
  00074	33 f6		 xor	 esi, esi
  00076	c1 e0 04	 shl	 eax, 4
  00079	2b c2		 sub	 eax, edx
  0007b	8d 1c 85 0c 00
	00 00		 lea	 ebx, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  00082	89 5d e4	 mov	 DWORD PTR tv616[ebp], ebx
$LL4@MLS_SkillF:

; 1988 : 		{
; 1989 : 			number = gParty.m_PartyS[partynum].Number[n];

  00085	8b 1b		 mov	 ebx, DWORD PTR [ebx]

; 1990 : 
; 1991 : 			if( number >= 0 )

  00087	85 db		 test	 ebx, ebx
  00089	78 39		 js	 SHORT $LN2@MLS_SkillF

; 1992 : 			{
; 1993 : 				lpPartyObj = &gObj[number];
; 1994 : 
; 1995 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  0008b	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00091	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00097	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009d	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  000a3	75 1c		 jne	 SHORT $LN43@MLS_SkillF

; 1996 : 				{
; 1997 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000a5	51		 push	 ecx
  000a6	57		 push	 edi
  000a7	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 1998 : 
; 1999 : 					if( dis < 10 )
; 2000 : 					{
; 2001 : 						ApplyPartyIndex[n] = number;
; 2002 : 						viewplayer++;

  000ac	8b 4d e0	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
  000af	83 c4 08	 add	 esp, 8
  000b2	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b5	7d 0d		 jge	 SHORT $LN2@MLS_SkillF
  000b7	41		 inc	 ecx
  000b8	89 5c b5 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+esi*4], ebx
  000bc	89 4d e0	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  000bf	eb 03		 jmp	 SHORT $LN2@MLS_SkillF
$LN43@MLS_SkillF:
  000c1	8b 4d e0	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
$LN2@MLS_SkillF:

; 1984 : 	{
; 1985 : 		partycount = gParty.m_PartyS[partynum].Count;
; 1986 : 
; 1987 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000c4	8b 5d e4	 mov	 ebx, DWORD PTR tv616[ebp]
  000c7	46		 inc	 esi
  000c8	83 c3 04	 add	 ebx, 4
  000cb	89 5d e4	 mov	 DWORD PTR tv616[ebp], ebx
  000ce	83 fe 05	 cmp	 esi, 5
  000d1	7c b2		 jl	 SHORT $LL4@MLS_SkillF

; 2003 : 					}
; 2004 : 				}
; 2005 : 			}
; 2006 : 		}
; 2007 : 	}
; 2008 : 
; 2009 : 	if( viewplayer > 1 )

  000d3	83 f9 01	 cmp	 ecx, 1
  000d6	7e 21		 jle	 SHORT $LN45@MLS_SkillF

; 2010 : 	{
; 2011 : 		if( viewplayer == 2 )

  000d8	83 f9 02	 cmp	 ecx, 2
  000db	75 05		 jne	 SHORT $LN15@MLS_SkillF

; 2012 : 		{
; 2013 : 			viewpercent = 1;

  000dd	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
  000e0	eb 19		 jmp	 SHORT $LN19@MLS_SkillF
$LN15@MLS_SkillF:

; 2014 : 		}
; 2015 : 		else if( viewplayer == 3 )

  000e2	83 f9 03	 cmp	 ecx, 3
  000e5	75 05		 jne	 SHORT $LN17@MLS_SkillF

; 2016 : 		{
; 2017 : 			viewpercent = 2;

  000e7	8d 59 ff	 lea	 ebx, DWORD PTR [ecx-1]
  000ea	eb 0f		 jmp	 SHORT $LN19@MLS_SkillF
$LN17@MLS_SkillF:

; 2018 : 		}
; 2019 : 		else if( viewplayer == 4 )

  000ec	33 db		 xor	 ebx, ebx
  000ee	83 f9 04	 cmp	 ecx, 4
  000f1	0f 95 c3	 setne	 bl
  000f4	83 c3 03	 add	 ebx, 3
  000f7	eb 02		 jmp	 SHORT $LN19@MLS_SkillF
$LN45@MLS_SkillF:
  000f9	33 db		 xor	 ebx, ebx
$LN19@MLS_SkillF:

; 2020 : 		{
; 2021 : 			viewpercent = 3;
; 2022 : 		}
; 2023 : 		else
; 2024 : 		{
; 2025 : 			viewpercent = 4;
; 2026 : 		}
; 2027 : 	}
; 2028 : 
; 2029 : 	float iaddLifepower;
; 2030 : 
; 2031 : 	int iPreSkill = this->GetParentSkill1(lpObj->Class,lpMagic->m_Skill);

  000fb	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  000fe	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00101	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00104	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  0010b	56		 push	 esi
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1

; 2032 : 
; 2033 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00112	56		 push	 esi
  00113	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00118	89 45 e4	 mov	 DWORD PTR _iPreSkill$1$[ebp], eax
  0011b	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00120	8b f0		 mov	 esi, eax

; 2034 : 
; 2035 : 	if( !lpInfo )

  00122	85 f6		 test	 esi, esi
  00124	0f 84 72 02 00
	00		 je	 $LN46@MLS_SkillF

; 2036 : 	{
; 2037 : 		return;
; 2038 : 	}
; 2039 : 
; 2040 : 	if( iPreSkill > 0 )

  0012a	8b 45 e4	 mov	 eax, DWORD PTR _iPreSkill$1$[ebp]
  0012d	85 c0		 test	 eax, eax
  0012f	0f 8e 99 00 00
	00		 jle	 $LN22@MLS_SkillF

; 2041 : 	{
; 2042 : 		int iPreLevel = this->GetCurSkillLevel(lpObj,iPreSkill);

  00135	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00138	50		 push	 eax
  00139	57		 push	 edi
  0013a	e8 00 00 00 00	 call	 ?GetCurSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetCurSkillLevel

; 2043 : 
; 2044 : 		if( iPreLevel > 0 )

  0013f	85 c0		 test	 eax, eax
  00141	0f 8e 80 00 00
	00		 jle	 $LN42@MLS_SkillF

; 2045 : 		{
; 2046 : 			float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iPreSkill),iPreLevel);

  00147	50		 push	 eax
  00148	8b 45 e4	 mov	 eax, DWORD PTR _iPreSkill$1$[ebp]
  0014b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00156	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 2047 : 
; 2048 : 			iaddLifepower = lpInfo->m_Arg1 + (lpObj->Vitality + lpObj->AddVitality) / lpInfo->m_Arg2 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg3 + viewpercent;

  0015f	0f b7 87 d4 00
	00 00		 movzx	 eax, WORD PTR [edi+212]
  00166	0f b7 8f 00 01
	00 00		 movzx	 ecx, WORD PTR [edi+256]
  0016d	03 c8		 add	 ecx, eax
  0016f	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00176	d9 5d e4	 fstp	 DWORD PTR _fSkillValue$1[ebp]
  00179	66 0f 6e c9	 movd	 xmm1, ecx
  0017d	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00184	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00187	03 c8		 add	 ecx, eax
  00189	66 0f 6e c1	 movd	 xmm0, ecx
  0018d	f3 0f 5e 4e 08	 divss	 xmm1, DWORD PTR [esi+8]
  00192	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00195	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  0019a	f3 0f 5e 46 0c	 divss	 xmm0, DWORD PTR [esi+12]
  0019f	f3 0f 58 c8	 addss	 xmm1, xmm0
  001a3	66 0f 6e c3	 movd	 xmm0, ebx
  001a7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001aa	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2049 : 
; 2050 : 			if( lpInfo->m_Arg4 > lpInfo->m_Arg4 )

  001ae	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001b3	0f 2f c0	 comiss	 xmm0, xmm0
  001b6	76 03		 jbe	 SHORT $LN25@MLS_SkillF

; 2051 : 			{
; 2052 : 				iaddLifepower = lpInfo->m_Arg4;

  001b8	0f 28 c8	 movaps	 xmm1, xmm0
$LN25@MLS_SkillF:

; 2053 : 			}
; 2054 : 
; 2055 : 			iaddLifepower += fSkillValue;

  001bb	f3 0f 58 4d e4	 addss	 xmm1, DWORD PTR _fSkillValue$1[ebp]
  001c0	f3 0f 11 4d e0	 movss	 DWORD PTR _iaddLifepower$2$[ebp], xmm1

; 2056 : 		}
; 2057 : 	}
; 2058 : 	else

  001c5	eb 67		 jmp	 SHORT $LN26@MLS_SkillF
$LN42@MLS_SkillF:

; 2063 : 		{
; 2064 : 			iaddLifepower = lpInfo->m_Arg4;

  001c7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _iaddLifepower$[ebp]
  001cc	eb 5b		 jmp	 SHORT $LN48@MLS_SkillF
$LN22@MLS_SkillF:

; 2059 : 	{
; 2060 : 		iaddLifepower = lpInfo->m_Arg1 + (lpObj->Vitality + lpObj->AddVitality) / lpInfo->m_Arg2 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg3 + viewpercent;

  001ce	0f b7 87 d4 00
	00 00		 movzx	 eax, WORD PTR [edi+212]
  001d5	0f b7 8f 00 01
	00 00		 movzx	 ecx, WORD PTR [edi+256]
  001dc	03 c8		 add	 ecx, eax
  001de	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  001e5	66 0f 6e c9	 movd	 xmm1, ecx
  001e9	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  001f0	0f 5b c9	 cvtdq2ps xmm1, xmm1
  001f3	03 c8		 add	 ecx, eax
  001f5	66 0f 6e c1	 movd	 xmm0, ecx
  001f9	f3 0f 5e 4e 08	 divss	 xmm1, DWORD PTR [esi+8]
  001fe	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00201	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00206	f3 0f 5e 46 0c	 divss	 xmm0, DWORD PTR [esi+12]
  0020b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0020f	66 0f 6e c3	 movd	 xmm0, ebx
  00213	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00216	f3 0f 58 c8	 addss	 xmm1, xmm0

; 2061 : 
; 2062 : 		if( lpInfo->m_Arg4 > lpInfo->m_Arg4 )

  0021a	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0021f	0f 2f c0	 comiss	 xmm0, xmm0
  00222	f3 0f 11 4d e0	 movss	 DWORD PTR _iaddLifepower$2$[ebp], xmm1
  00227	76 05		 jbe	 SHORT $LN26@MLS_SkillF
$LN48@MLS_SkillF:

; 2063 : 		{
; 2064 : 			iaddLifepower = lpInfo->m_Arg4;

  00229	f3 0f 11 45 e0	 movss	 DWORD PTR _iaddLifepower$2$[ebp], xmm0
$LN26@MLS_SkillF:

; 2065 : 		}
; 2066 : 	}
; 2067 : 
; 2068 : 
; 2069 : 
; 2070 : 	float iaddManapower;
; 2071 : 	
; 2072 : 	if( lpMagic->m_Skill == 360 )

  0022e	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00231	81 78 08 68 01
	00 00		 cmp	 DWORD PTR [eax+8], 360	; 00000168H
  00238	75 2f		 jne	 SHORT $LN27@MLS_SkillF

; 2073 : 	{
; 2074 : 		float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0023a	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0023e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00243	50		 push	 eax
  00244	68 68 01 00 00	 push	 360			; 00000168H
  00249	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0024e	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00251	50		 push	 eax
  00252	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00257	66 0f 6e c3	 movd	 xmm0, ebx

; 2075 : 		iaddManapower = fSkillValue+viewpercent;

  0025b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0025e	f3 0f 11 45 e4	 movss	 DWORD PTR tv638[ebp], xmm0
  00263	d8 45 e4	 fadd	 DWORD PTR tv638[ebp]
  00266	d9 5d e4	 fstp	 DWORD PTR _iaddManapower$[ebp]
$LN27@MLS_SkillF:

; 2076 : 	}
; 2077 : 
; 2078 : 	int iLifeTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  00269	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00270	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00277	03 c8		 add	 ecx, eax

; 2079 : 
; 2080 : 	if( iLifeTime > lpInfo->m_Arg7 )

  00279	f3 0f 10 4e 1c	 movss	 xmm1, DWORD PTR [esi+28]
  0027e	66 0f 6e c1	 movd	 xmm0, ecx
  00282	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00285	f3 0f 5e 46 18	 divss	 xmm0, DWORD PTR [esi+24]
  0028a	f3 0f 58 46 14	 addss	 xmm0, DWORD PTR [esi+20]
  0028f	f3 0f 2c c8	 cvttss2si ecx, xmm0
  00293	89 4d dc	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
  00296	66 0f 6e c1	 movd	 xmm0, ecx
  0029a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0029d	0f 2f c1	 comiss	 xmm0, xmm1
  002a0	76 07		 jbe	 SHORT $LN28@MLS_SkillF

; 2081 : 		iLifeTime = lpInfo->m_Arg7;

  002a2	f3 0f 2c c9	 cvttss2si ecx, xmm1
  002a6	89 4d dc	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
$LN28@MLS_SkillF:

; 2082 : 
; 2083 : 	int iaddlife;
; 2084 : 	int iaddMana;
; 2085 : 
; 2086 : 	if( partynum == -1 )

  002a9	83 7d d4 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  002ad	75 6c		 jne	 SHORT $LN29@MLS_SkillF

; 2087 : 	{
; 2088 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;
; 2089 : 		iaddMana = lpObj->MaxMana*iaddManapower/100;

  002af	f3 0f 10 87 f0
	00 00 00	 movss	 xmm0, DWORD PTR [edi+240]
  002b7	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _iaddManapower$[ebp]

; 2090 : 
; 2091 : 		gObjAddBuffEffect(lpObj,BUFF_SWELL_LIFE2,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  002bc	51		 push	 ecx
  002bd	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  002c5	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c9	f3 0f 10 87 dc
	00 00 00	 movss	 xmm0, DWORD PTR [edi+220]
  002d1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _iaddLifepower$2$[ebp]
  002d6	50		 push	 eax
  002d7	6a 05		 push	 5
  002d9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  002e1	f3 0f 2c c0	 cvttss2si eax, xmm0
  002e5	50		 push	 eax
  002e6	6a 04		 push	 4
  002e8	68 87 00 00 00	 push	 135			; 00000087H
  002ed	57		 push	 edi
  002ee	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2092 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  002f3	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  002f6	6a 01		 push	 1
  002f8	ff 37		 push	 DWORD PTR [edi]
  002fa	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  002fe	50		 push	 eax
  002ff	57		 push	 edi
  00300	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00305	83 c4 2c	 add	 esp, 44			; 0000002cH
  00308	5e		 pop	 esi
  00309	5b		 pop	 ebx
  0030a	5f		 pop	 edi

; 2106 : 			}
; 2107 : 		}
; 2108 : 	}
; 2109 : }

  0030b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030e	33 cd		 xor	 ecx, ebp
  00310	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00315	8b e5		 mov	 esp, ebp
  00317	5d		 pop	 ebp
  00318	c2 08 00	 ret	 8
$LN29@MLS_SkillF:

; 2093 : 	}
; 2094 : 	else
; 2095 : 	{
; 2096 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  0031b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  00323	33 db		 xor	 ebx, ebx
$LL7@MLS_SkillF:

; 2097 : 		{
; 2098 : 			if( ApplyPartyIndex[n] != -1 )

  00325	8b 44 9d e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+ebx*4]
  00329	83 f8 ff	 cmp	 eax, -1
  0032c	74 65		 je	 SHORT $LN5@MLS_SkillF

; 2099 : 			{
; 2100 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  0032e	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 2101 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 2102 : 				iaddMana = lpPartyObj->MaxMana*iaddManapower/100;
; 2103 : 
; 2104 : 				gObjAddBuffEffect(lpPartyObj,BUFF_SWELL_LIFE2,ADD_OPTION_LIFE,iaddlife,ADD_OPTION_MANA,iaddMana,iLifeTime);

  00334	51		 push	 ecx
  00335	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0033b	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  00343	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _iaddManapower$[ebp]
  00348	f3 0f 5e c1	 divss	 xmm0, xmm1
  0034c	f3 0f 2c c0	 cvttss2si eax, xmm0
  00350	f3 0f 10 86 dc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+220]
  00358	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _iaddLifepower$2$[ebp]
  0035d	50		 push	 eax
  0035e	6a 05		 push	 5
  00360	f3 0f 5e c1	 divss	 xmm0, xmm1
  00364	f3 0f 2c c0	 cvttss2si eax, xmm0
  00368	50		 push	 eax
  00369	6a 04		 push	 4
  0036b	68 87 00 00 00	 push	 135			; 00000087H
  00370	56		 push	 esi
  00371	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2105 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  00376	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00379	6a 01		 push	 1
  0037b	ff 36		 push	 DWORD PTR [esi]
  0037d	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00381	50		 push	 eax
  00382	57		 push	 edi
  00383	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00388	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
  00390	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN5@MLS_SkillF:

; 2093 : 	}
; 2094 : 	else
; 2095 : 	{
; 2096 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  00393	8b 4d dc	 mov	 ecx, DWORD PTR _iLifeTime$1$[ebp]
  00396	43		 inc	 ebx
  00397	83 fb 05	 cmp	 ebx, 5
  0039a	7c 89		 jl	 SHORT $LL7@MLS_SkillF
$LN46@MLS_SkillF:
  0039c	5e		 pop	 esi
  0039d	5b		 pop	 ebx
$LN6@MLS_SkillF:

; 2106 : 			}
; 2107 : 		}
; 2108 : 	}
; 2109 : }

  0039e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a1	33 cd		 xor	 ecx, ebp
  003a3	5f		 pop	 edi
  003a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a9	8b e5		 mov	 esp, ebp
  003ab	5d		 pop	 ebp
  003ac	c2 08 00	 ret	 8
?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z
_TEXT	SEGMENT
_partynum$1$ = -44					; size = 4
_lpMagic$GSCopy$1$ = -40				; size = 4
_viewplayer$1$ = -36					; size = 4
_iaddLifepower$2$ = -32					; size = 4
_this$GSCopy$1$ = -32					; size = 4
_fSkillValue$ = -32					; size = 4
_iLifeTime$1$ = -28					; size = 4
_viewpercent$1$ = -28					; size = 4
tv510 = -28						; size = 4
_ApplyPartyIndex$ = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife, COMDAT
; _this$ = ecx

; 1841 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00017	89 4d e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001a	89 45 d8	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax

; 1842 : 	int skillSuccess = TRUE;
; 1843 : 
; 1844 : 	if( lpObj->Type != OBJ_USER &&

  0001d	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00021	74 0d		 je	 SHORT $LN8@MLS_Knight
  00023	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  0002a	0f 84 52 02 00
	00		 je	 $LN6@MLS_Knight
$LN8@MLS_Knight:

; 1845 : 		lpObj->m_RecallMon == -1 )
; 1846 : 		return;
; 1847 : 
; 1848 : 	if( lpObj->Class != CLASS_KNIGHT &&

  00030	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	74 09		 je	 SHORT $LN9@MLS_Knight
  0003c	83 f8 03	 cmp	 eax, 3
  0003f	0f 85 3d 02 00
	00		 jne	 $LN6@MLS_Knight
$LN9@MLS_Knight:

; 1849 : 		lpObj->Class != CLASS_MAGUMSA )
; 1850 : 		return;
; 1851 : 
; 1852 : 	int number;
; 1853 : 	int partynum = 0;
; 1854 : 	int totallevel = 0;
; 1855 : 	int partycount;
; 1856 : 	int dis;
; 1857 : 	int ApplyPartyIndex[5];
; 1858 : 	int viewplayer = 0;
; 1859 : 	int viewpercent = 0;
; 1860 : 	LPOBJ lpPartyObj;
; 1861 : 
; 1862 : 	memset(ApplyPartyIndex,-1,sizeof(ApplyPartyIndex));
; 1863 : 
; 1864 : 	partynum = lpObj->PartyNumber;

  00045	8b 93 0c 06 00
	00		 mov	 edx, DWORD PTR [ebx+1548]
  0004b	33 c9		 xor	 ecx, ecx
  0004d	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  00054	56		 push	 esi
  00055	33 f6		 xor	 esi, esi
  00057	89 4d dc	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  0005a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ApplyPartyIndex$[ebp+16], -1
  00061	89 55 d4	 mov	 DWORD PTR _partynum$1$[ebp], edx
  00064	57		 push	 edi
  00065	0f 11 45 e8	 movups	 XMMWORD PTR _ApplyPartyIndex$[ebp], xmm0

; 1865 : 
; 1866 : 	if( partynum != -1 )

  00069	83 fa ff	 cmp	 edx, -1
  0006c	0f 84 8c 00 00
	00		 je	 $LN19@MLS_Knight

; 1867 : 	{
; 1868 : 		partycount = gParty.m_PartyS[partynum].Count;
; 1869 : 
; 1870 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00072	8b c2		 mov	 eax, edx
  00074	c1 e0 04	 shl	 eax, 4
  00077	2b c2		 sub	 eax, edx
  00079	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  00080	89 7d e4	 mov	 DWORD PTR tv510[ebp], edi
$LL4@MLS_Knight:

; 1871 : 		{
; 1872 : 			number = gParty.m_PartyS[partynum].Number[n];

  00083	8b 3f		 mov	 edi, DWORD PTR [edi]

; 1873 : 
; 1874 : 			if( number >= 0 )

  00085	85 ff		 test	 edi, edi
  00087	78 39		 js	 SHORT $LN2@MLS_Knight

; 1875 : 			{
; 1876 : 				lpPartyObj = &gObj[number];
; 1877 : 
; 1878 : 				if( lpObj->MapNumber == lpPartyObj->MapNumber )

  00089	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  0008f	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00095	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009b	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  000a1	75 1c		 jne	 SHORT $LN37@MLS_Knight

; 1879 : 				{
; 1880 : 					dis = gObjCalDistance(lpObj,&gObj[number]);

  000a3	51		 push	 ecx
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 1881 : 
; 1882 : 					if( dis < 10 )
; 1883 : 					{
; 1884 : 						ApplyPartyIndex[n] = number;
; 1885 : 						viewplayer++;

  000aa	8b 4d dc	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
  000ad	83 c4 08	 add	 esp, 8
  000b0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b3	7d 0d		 jge	 SHORT $LN2@MLS_Knight
  000b5	41		 inc	 ecx
  000b6	89 7c b5 e8	 mov	 DWORD PTR _ApplyPartyIndex$[ebp+esi*4], edi
  000ba	89 4d dc	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  000bd	eb 03		 jmp	 SHORT $LN2@MLS_Knight
$LN37@MLS_Knight:
  000bf	8b 4d dc	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
$LN2@MLS_Knight:

; 1867 : 	{
; 1868 : 		partycount = gParty.m_PartyS[partynum].Count;
; 1869 : 
; 1870 : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000c2	8b 7d e4	 mov	 edi, DWORD PTR tv510[ebp]
  000c5	46		 inc	 esi
  000c6	83 c7 04	 add	 edi, 4
  000c9	89 7d e4	 mov	 DWORD PTR tv510[ebp], edi
  000cc	83 fe 05	 cmp	 esi, 5
  000cf	7c b2		 jl	 SHORT $LL4@MLS_Knight

; 1886 : 					}
; 1887 : 				}
; 1888 : 			}
; 1889 : 		}
; 1890 : 	}
; 1891 : 
; 1892 : 	if( viewplayer > 1 )

  000d1	83 f9 01	 cmp	 ecx, 1
  000d4	7e 26		 jle	 SHORT $LN39@MLS_Knight

; 1893 : 	{
; 1894 : 		if( viewplayer == 2 )

  000d6	83 f9 02	 cmp	 ecx, 2
  000d9	75 05		 jne	 SHORT $LN15@MLS_Knight

; 1895 : 		{
; 1896 : 			viewpercent = 1;

  000db	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  000de	eb 1e		 jmp	 SHORT $LN19@MLS_Knight
$LN15@MLS_Knight:

; 1897 : 		}
; 1898 : 		else if( viewplayer == 3 )

  000e0	83 f9 03	 cmp	 ecx, 3
  000e3	75 05		 jne	 SHORT $LN17@MLS_Knight

; 1899 : 		{
; 1900 : 			viewpercent = 2;

  000e5	8d 71 ff	 lea	 esi, DWORD PTR [ecx-1]
  000e8	eb 14		 jmp	 SHORT $LN19@MLS_Knight
$LN17@MLS_Knight:

; 1901 : 		}
; 1902 : 		else if( viewplayer == 4 )

  000ea	33 c0		 xor	 eax, eax
  000ec	83 f9 04	 cmp	 ecx, 4
  000ef	0f 95 c0	 setne	 al
  000f2	83 c0 03	 add	 eax, 3
  000f5	89 45 e4	 mov	 DWORD PTR _viewpercent$1$[ebp], eax
  000f8	8b f0		 mov	 esi, eax
  000fa	eb 02		 jmp	 SHORT $LN19@MLS_Knight
$LN39@MLS_Knight:
  000fc	33 f6		 xor	 esi, esi
$LN19@MLS_Knight:

; 1903 : 		{
; 1904 : 			viewpercent = 3;
; 1905 : 		}
; 1906 : 		else
; 1907 : 		{
; 1908 : 			viewpercent = 4;
; 1909 : 		}
; 1910 : 	}
; 1911 : 
; 1912 : 	float iaddLifepower;
; 1913 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  000fe	8b 7d d8	 mov	 edi, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00101	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00106	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0010a	50		 push	 eax
  0010b	ff 77 08	 push	 DWORD PTR [edi+8]
  0010e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00113	8b 4d e0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1914 : 
; 1915 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  0011c	ff 77 08	 push	 DWORD PTR [edi+8]
  0011f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00124	d9 5d e0	 fstp	 DWORD PTR _fSkillValue$[ebp]
  00127	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0012c	8b f8		 mov	 edi, eax

; 1916 : 
; 1917 : 	if( !lpInfo )

  0012e	85 ff		 test	 edi, edi
  00130	0f 84 4a 01 00
	00		 je	 $LN40@MLS_Knight

; 1918 : 	{
; 1919 : 		return;
; 1920 : 	}
; 1921 : 	
; 1922 : 	iaddLifepower = lpInfo->m_Arg1 + (lpObj->Vitality + lpObj->AddVitality) / lpInfo->m_Arg2 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg3 + viewpercent;

  00136	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  0013d	0f b7 93 02 01
	00 00		 movzx	 edx, WORD PTR [ebx+258]
  00144	0f b7 83 d4 00
	00 00		 movzx	 eax, WORD PTR [ebx+212]
  0014b	03 d1		 add	 edx, ecx
  0014d	0f b7 8b 00 01
	00 00		 movzx	 ecx, WORD PTR [ebx+256]
  00154	03 c8		 add	 ecx, eax
  00156	66 0f 6e d2	 movd	 xmm2, edx
  0015a	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0015d	66 0f 6e c9	 movd	 xmm1, ecx
  00161	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00164	0f 28 c2	 movaps	 xmm0, xmm2
  00167	f3 0f 5e 4f 08	 divss	 xmm1, DWORD PTR [edi+8]
  0016c	f3 0f 5e 47 0c	 divss	 xmm0, DWORD PTR [edi+12]
  00171	f3 0f 58 4f 04	 addss	 xmm1, DWORD PTR [edi+4]
  00176	f3 0f 58 c8	 addss	 xmm1, xmm0
  0017a	66 0f 6e c6	 movd	 xmm0, esi
  0017e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00181	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1923 : 
; 1924 : 	if( iaddLifepower > lpInfo->m_Arg4 )

  00185	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  0018a	0f 2f c8	 comiss	 xmm1, xmm0
  0018d	76 03		 jbe	 SHORT $LN22@MLS_Knight

; 1925 : 		iaddLifepower = lpInfo->m_Arg4;

  0018f	0f 28 c8	 movaps	 xmm1, xmm0
$LN22@MLS_Knight:

; 1926 : 
; 1927 : 	iaddLifepower += fSkillValue;
; 1928 : 
; 1929 : 	int iLifeTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  00192	f3 0f 5e 57 18	 divss	 xmm2, DWORD PTR [edi+24]
  00197	f3 0f 58 4d e0	 addss	 xmm1, DWORD PTR _fSkillValue$[ebp]
  0019c	f3 0f 58 57 14	 addss	 xmm2, DWORD PTR [edi+20]
  001a1	f3 0f 11 4d e0	 movss	 DWORD PTR _iaddLifepower$2$[ebp], xmm1
  001a6	f3 0f 2c ca	 cvttss2si ecx, xmm2

; 1930 : 
; 1931 : 	if( iLifeTime > lpInfo->m_Arg7 )

  001aa	f3 0f 10 57 1c	 movss	 xmm2, DWORD PTR [edi+28]
  001af	89 4d e4	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
  001b2	66 0f 6e c1	 movd	 xmm0, ecx
  001b6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001b9	0f 2f c2	 comiss	 xmm0, xmm2
  001bc	76 07		 jbe	 SHORT $LN23@MLS_Knight

; 1932 : 		iLifeTime = lpInfo->m_Arg7;

  001be	f3 0f 2c ca	 cvttss2si ecx, xmm2
  001c2	89 4d e4	 mov	 DWORD PTR _iLifeTime$1$[ebp], ecx
$LN23@MLS_Knight:

; 1933 : 
; 1934 : 	int iaddlife;
; 1935 : 
; 1936 : 	if( partynum == -1 )

  001c5	83 7d d4 ff	 cmp	 DWORD PTR _partynum$1$[ebp], -1
  001c9	75 50		 jne	 SHORT $LN24@MLS_Knight

; 1937 : 	{
; 1938 : 		iaddlife = lpObj->MaxLife*iaddLifepower/100;

  001cb	f3 0f 10 83 dc
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+220]
  001d3	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 1939 : 		gObjAddBuffEffect(lpObj,BUFF_SWELL_LIFE,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  001d7	51		 push	 ecx
  001d8	6a 00		 push	 0
  001da	6a 00		 push	 0
  001dc	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  001e4	f3 0f 2c c0	 cvttss2si eax, xmm0
  001e8	50		 push	 eax
  001e9	6a 04		 push	 4
  001eb	6a 08		 push	 8
  001ed	53		 push	 ebx
  001ee	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1940 : 		GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  001f3	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  001f6	6a 01		 push	 1
  001f8	ff 33		 push	 DWORD PTR [ebx]
  001fa	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  001fe	50		 push	 eax
  001ff	53		 push	 ebx
  00200	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00205	83 c4 2c	 add	 esp, 44			; 0000002cH
  00208	5f		 pop	 edi
  00209	5e		 pop	 esi
  0020a	5b		 pop	 ebx

; 1952 : 			}
; 1953 : 		}
; 1954 : 	}
; 1955 : }

  0020b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020e	33 cd		 xor	 ecx, ebp
  00210	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00215	8b e5		 mov	 esp, ebp
  00217	5d		 pop	 ebp
  00218	c2 08 00	 ret	 8
$LN24@MLS_Knight:

; 1941 : 	}
; 1942 : 	else
; 1943 : 	{
; 1944 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  0021b	33 ff		 xor	 edi, edi
  0021d	0f 1f 00	 npad	 3
$LL7@MLS_Knight:

; 1945 : 		{
; 1946 : 			if( ApplyPartyIndex[n] != -1 )

  00220	8b 44 bd e8	 mov	 eax, DWORD PTR _ApplyPartyIndex$[ebp+edi*4]
  00224	83 f8 ff	 cmp	 eax, -1
  00227	74 4e		 je	 SHORT $LN5@MLS_Knight

; 1947 : 			{
; 1948 : 				lpPartyObj = &gObj[ApplyPartyIndex[n]];

  00229	69 f0 40 27 00
	00		 imul	 esi, eax, 10048

; 1949 : 				iaddlife = lpPartyObj->MaxLife*iaddLifepower/100;
; 1950 : 				gObjAddBuffEffect(lpPartyObj,BUFF_SWELL_LIFE,ADD_OPTION_LIFE,iaddlife,0,0,iLifeTime);

  0022f	51		 push	 ecx
  00230	6a 00		 push	 0
  00232	6a 00		 push	 0
  00234	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0023a	f3 0f 10 86 dc
	00 00 00	 movss	 xmm0, DWORD PTR [esi+220]
  00242	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00246	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  0024e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00252	50		 push	 eax
  00253	6a 04		 push	 4
  00255	6a 08		 push	 8
  00257	56		 push	 esi
  00258	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1951 : 				GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpPartyObj->m_Index,skillSuccess);

  0025d	8b 45 d8	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00260	6a 01		 push	 1
  00262	ff 36		 push	 DWORD PTR [esi]
  00264	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00268	50		 push	 eax
  00269	53		 push	 ebx
  0026a	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0026f	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _iaddLifepower$2$[ebp]
  00274	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN5@MLS_Knight:

; 1941 : 	}
; 1942 : 	else
; 1943 : 	{
; 1944 : 		for(int n = 0; n < MAX_USER_IN_PARTY;n++)

  00277	8b 4d e4	 mov	 ecx, DWORD PTR _iLifeTime$1$[ebp]
  0027a	47		 inc	 edi
  0027b	83 ff 05	 cmp	 edi, 5
  0027e	7c a0		 jl	 SHORT $LL7@MLS_Knight
$LN40@MLS_Knight:
  00280	5f		 pop	 edi
  00281	5e		 pop	 esi
$LN6@MLS_Knight:

; 1952 : 			}
; 1953 : 		}
; 1954 : 	}
; 1955 : }

  00282	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00285	33 cd		 xor	 ecx, ebp
  00287	5b		 pop	 ebx
  00288	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 08 00	 ret	 8
?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z
_TEXT	SEGMENT
_DuelIndex$1$ = -20					; size = 4
_nHitCount$1$ = -16					; size = 4
tv567 = -12						; size = 4
tv566 = -8						; size = 4
_bRet$1$ = -4						; size = 4
_bAttack$1$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
tv570 = 16						; size = 4
_x$ = 16						; size = 1
tv559 = 20						; size = 4
_y$ = 20						; size = 1
_aTargetIndex$ = 24					; size = 4
_isCombo$ = 28						; size = 4
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction, COMDAT
; _this$ = ecx

; 1733 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 1735 : 	int count = 0;
; 1736 : 	int tObjNum;
; 1737 : 	int DuelIndex = lpObj->m_iDuelUser;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000a	56		 push	 esi

; 1738 : 	int nHitCount = 0;
; 1739 : 	int bAttack = 0;
; 1740 : 	int nMinCount = 4;
; 1741 : 	int nMaxCount = 8;
; 1742 : 	int aDistance = 3;
; 1743 : 
; 1744 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,TRUE);

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  0000e	57		 push	 edi
  0000f	8b 83 50 12 00
	00		 mov	 eax, DWORD PTR [ebx+4688]
  00015	8b f9		 mov	 edi, ecx
  00017	89 45 ec	 mov	 DWORD PTR _DuelIndex$1$[ebp], eax
  0001a	33 c0		 xor	 eax, eax
  0001c	6a 01		 push	 1
  0001e	ff 33		 push	 DWORD PTR [ebx]
  00020	89 45 08	 mov	 DWORD PTR _bAttack$1$[ebp], eax
  00023	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00027	50		 push	 eax
  00028	53		 push	 ebx
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bRet$1$[ebp], 0
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _nHitCount$1$[ebp], 0
  00037	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0003c	83 c4 10	 add	 esp, 16			; 00000010H

; 1745 : 
; 1746 : 	int iSkillDistance = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00044	ff 76 08	 push	 DWORD PTR [esi+8]
  00047	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 1747 : 
; 1748 : 
; 1749 : 	if( this->MLS_CalDistance(lpObj->X,lpObj->Y,x,y) <= iSkillDistance )

  0004c	0f b6 4d 10	 movzx	 ecx, BYTE PTR _x$[ebp]
  00050	8b f0		 mov	 esi, eax
  00052	0f b6 45 14	 movzx	 eax, BYTE PTR _y$[ebp]
  00056	50		 push	 eax
  00057	89 45 f4	 mov	 DWORD PTR tv567[ebp], eax
  0005a	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  00061	51		 push	 ecx
  00062	50		 push	 eax
  00063	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  0006a	89 4d f8	 mov	 DWORD PTR tv566[ebp], ecx
  0006d	8b cf		 mov	 ecx, edi
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?MLS_CalDistance@CMasterLevelSkillTreeSystem@@QAEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_CalDistance
  00075	3b c6		 cmp	 eax, esi
  00077	0f 8f cc 01 00
	00		 jg	 $LN32@MLS_SkillS

; 1734 : 	int bRet = FALSE;

  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00083	8d bb 4c 0c 00
	00		 lea	 edi, DWORD PTR [ebx+3148]
  00089	89 7d 14	 mov	 DWORD PTR tv559[ebp], edi
  0008c	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00091	c7 45 10 4b 00
	00 00		 mov	 DWORD PTR tv570[ebp], 75 ; 0000004bH
$LL2@MLS_SkillS:

; 1750 : 	{
; 1751 : 		while ( true )
; 1752 : 		{
; 1753 : 			if(lpObj->VpPlayer2[count].state != 0)

  00098	80 7f fc 00	 cmp	 BYTE PTR [edi-4], 0
  0009c	74 74		 je	 SHORT $LN43@MLS_SkillS

; 1754 : 			{
; 1755 : 				tObjNum = lpObj->VpPlayer2[count].number;	

  0009e	0f bf 77 fe	 movsx	 esi, WORD PTR [edi-2]

; 1756 : 				if(tObjNum >= 0)

  000a2	85 f6		 test	 esi, esi
  000a4	78 6c		 js	 SHORT $LN43@MLS_SkillS

; 1757 : 				{
; 1758 : 					int EnableAttack = 0;
; 1759 : 
; 1760 : 					if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  000a6	8a 17		 mov	 dl, BYTE PTR [edi]
  000a8	80 fa 02	 cmp	 dl, 2
  000ab	75 14		 jne	 SHORT $LN7@MLS_SkillS
  000ad	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  000b3	83 bc 08 30 06
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1584], 0
  000bb	0f 8c b3 00 00
	00		 jl	 $LN11@MLS_SkillS
$LN7@MLS_SkillS:

; 1761 : 					{
; 1762 : 						EnableAttack = 1;
; 1763 : 					}
; 1764 : 					else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  000c1	3b 75 18	 cmp	 esi, DWORD PTR _aTargetIndex$[ebp]
  000c4	0f 84 aa 00 00
	00		 je	 $LN11@MLS_SkillS
  000ca	39 75 ec	 cmp	 DWORD PTR _DuelIndex$1$[ebp], esi
  000cd	0f 84 a1 00 00
	00		 je	 $LN11@MLS_SkillS

; 1765 : 					{
; 1766 : 						EnableAttack = 1;
; 1767 : 					}
; 1768 : #if (GS_CASTLE == 1)
; 1769 : 					else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  000d3	80 fa 03	 cmp	 dl, 3
  000d6	74 5b		 je	 SHORT $LN12@MLS_SkillS
  000d8	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  000de	80 bc 0f 23 01
	00 00 1e	 cmp	 BYTE PTR [edi+ecx+291], 30 ; 0000001eH
  000e6	75 48		 jne	 SHORT $LN40@MLS_SkillS
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000ed	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState

; 1770 : 					{
; 1771 : 						if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	83 f8 07	 cmp	 eax, 7
  000fb	75 33		 jne	 SHORT $LN40@MLS_SkillS
  000fd	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  00103	3a 84 0f 5a 20
	00 00		 cmp	 al, BYTE PTR [edi+ecx+8282]
  0010a	75 68		 jne	 SHORT $LN11@MLS_SkillS
$LN39@MLS_SkillS:
  0010c	8b 7d 14	 mov	 edi, DWORD PTR tv559[ebp]
$LN45@MLS_SkillS:
  0010f	8b 55 10	 mov	 edx, DWORD PTR tv570[ebp]
$LN43@MLS_SkillS:
  00112	8b 45 fc	 mov	 eax, DWORD PTR _bRet$1$[ebp]
$LN18@MLS_SkillS:

; 1824 : 						}
; 1825 : 					}
; 1826 : 				}
; 1827 : 			}
; 1828 : 
; 1829 : 			count++;

  00115	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1830 : 			if(count > MAX_VIEWPORT -1)

  00118	83 ea 01	 sub	 edx, 1
  0011b	89 7d 14	 mov	 DWORD PTR tv559[ebp], edi
  0011e	89 55 10	 mov	 DWORD PTR tv570[ebp], edx
  00121	0f 85 71 ff ff
	ff		 jne	 $LL2@MLS_SkillS
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx

; 1838 : }

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 18 00	 ret	 24			; 00000018H
$LN40@MLS_SkillS:
  00130	8b 7d 14	 mov	 edi, DWORD PTR tv559[ebp]
$LN12@MLS_SkillS:

; 1772 : 							EnableAttack = 1;
; 1773 : 					}
; 1774 : #endif
; 1775 : 					else
; 1776 : 					{
; 1777 : 						int CallMonIndex = gObj[tObjNum].m_Index;

  00133	69 c6 40 27 00
	00		 imul	 eax, esi, 10048

; 1778 : 	
; 1779 : 						if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  00139	80 7c 08 50 02	 cmp	 BYTE PTR [eax+ecx+80], 2
  0013e	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  00141	75 14		 jne	 SHORT $LN15@MLS_SkillS
  00143	8b 84 08 30 06
	00 00		 mov	 eax, DWORD PTR [eax+ecx+1584]
  0014a	85 c0		 test	 eax, eax
  0014c	78 09		 js	 SHORT $LN15@MLS_SkillS

; 1780 : 						{
; 1781 : 							CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  0014e	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00154	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
$LN15@MLS_SkillS:

; 1782 : 						}
; 1783 : 	
; 1784 : 						if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  00157	69 c2 40 27 00
	00		 imul	 eax, edx, 10048
  0015d	03 c1		 add	 eax, ecx
  0015f	50		 push	 eax
  00160	53		 push	 ebx
  00161	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  00166	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016c	83 c4 08	 add	 esp, 8
  0016f	83 f8 01	 cmp	 eax, 1
  00172	75 9b		 jne	 SHORT $LN45@MLS_SkillS
$LN11@MLS_SkillS:

; 1785 : 						{
; 1786 : 							EnableAttack = 1;
; 1787 : 						}
; 1788 : 					}
; 1789 : 
; 1790 : 					if( EnableAttack != 0 )
; 1791 : 					{
; 1792 : 						if( gObj[tObjNum].X >= (x -aDistance) &&
; 1793 : 						gObj[tObjNum].X <= (x +aDistance) &&
; 1794 : 						gObj[tObjNum].Y >= (y -aDistance) &&

  00174	8b 45 f8	 mov	 eax, DWORD PTR tv566[ebp]
  00177	69 d6 40 27 00
	00		 imul	 edx, esi, 10048
  0017d	83 c0 fd	 add	 eax, -3			; fffffffdH
  00180	0f b6 bc 0a 20
	01 00 00	 movzx	 edi, BYTE PTR [edx+ecx+288]
  00188	3b f8		 cmp	 edi, eax
  0018a	7c 80		 jl	 SHORT $LN39@MLS_SkillS
  0018c	8b 45 f8	 mov	 eax, DWORD PTR tv566[ebp]
  0018f	83 c0 03	 add	 eax, 3
  00192	3b f8		 cmp	 edi, eax
  00194	0f 8f 72 ff ff
	ff		 jg	 $LN39@MLS_SkillS
  0019a	8b 45 f4	 mov	 eax, DWORD PTR tv567[ebp]
  0019d	0f b6 bc 0a 21
	01 00 00	 movzx	 edi, BYTE PTR [edx+ecx+289]
  001a5	83 c0 fd	 add	 eax, -3			; fffffffdH
  001a8	3b f8		 cmp	 edi, eax
  001aa	0f 8c 5c ff ff
	ff		 jl	 $LN39@MLS_SkillS
  001b0	8b 45 f4	 mov	 eax, DWORD PTR tv567[ebp]
  001b3	83 c0 03	 add	 eax, 3
  001b6	3b f8		 cmp	 edi, eax
  001b8	0f 8f 4e ff ff
	ff		 jg	 $LN39@MLS_SkillS

; 1795 : 						gObj[tObjNum].Y <= (y +aDistance) )
; 1796 : 						{
; 1797 : 							gObj[tObjNum].lpAttackObj = lpObj;
; 1798 : 							nHitCount++;

  001be	8b 7d f0	 mov	 edi, DWORD PTR _nHitCount$1$[ebp]
  001c1	47		 inc	 edi
  001c2	89 9c 0a b4 05
	00 00		 mov	 DWORD PTR [edx+ecx+1460], ebx
  001c9	89 7d f0	 mov	 DWORD PTR _nHitCount$1$[ebp], edi

; 1799 : 
; 1800 : 							if( nHitCount > nMinCount )

  001cc	83 ff 04	 cmp	 edi, 4
  001cf	7e 13		 jle	 SHORT $LN19@MLS_SkillS

; 1801 : 							{
; 1802 : 								if( rand()%2 )

  001d1	e8 00 00 00 00	 call	 _rand
  001d6	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  001db	79 05		 jns	 SHORT $LN44@MLS_SkillS
  001dd	48		 dec	 eax
  001de	83 c8 fe	 or	 eax, -2			; fffffffeH
  001e1	40		 inc	 eax
$LN44@MLS_SkillS:
  001e2	74 0a		 je	 SHORT $LN41@MLS_SkillS
$LN19@MLS_SkillS:

; 1803 : 									bAttack = TRUE;

  001e4	b8 01 00 00 00	 mov	 eax, 1
  001e9	89 45 08	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 1804 : 							}
; 1805 : 							else

  001ec	eb 03		 jmp	 SHORT $LN20@MLS_SkillS
$LN41@MLS_SkillS:
  001ee	8b 45 08	 mov	 eax, DWORD PTR _bAttack$1$[ebp]
$LN20@MLS_SkillS:

; 1806 : 							{
; 1807 : 								bAttack = TRUE;
; 1808 : 							}
; 1809 : 
; 1810 : 							if( nHitCount > nMaxCount )

  001f1	83 ff 08	 cmp	 edi, 8
  001f4	7e 07		 jle	 SHORT $LN22@MLS_SkillS

; 1811 : 								bAttack = FALSE;

  001f6	33 c0		 xor	 eax, eax
  001f8	89 45 08	 mov	 DWORD PTR _bAttack$1$[ebp], eax

; 1812 : 
; 1813 : 							if( bAttack == TRUE )

  001fb	eb 33		 jmp	 SHORT $LN24@MLS_SkillS
$LN22@MLS_SkillS:
  001fd	83 f8 01	 cmp	 eax, 1
  00200	75 2e		 jne	 SHORT $LN24@MLS_SkillS

; 1814 : 							{
; 1815 : 								gObjAddAttackProcMsgSendDelay(lpObj,50,tObjNum,500,lpMagic->m_Skill,0);

  00202	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00205	6a 00		 push	 0
  00207	ff 70 08	 push	 DWORD PTR [eax+8]
  0020a	68 f4 01 00 00	 push	 500			; 000001f4H
  0020f	56		 push	 esi
  00210	6a 32		 push	 50			; 00000032H
  00212	53		 push	 ebx
  00213	e8 00 00 00 00	 call	 ?gObjAddAttackProcMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHHH@Z ; gObjAddAttackProcMsgSendDelay
  00218	83 c4 18	 add	 esp, 24			; 00000018H

; 1816 : 
; 1817 : 								if( isCombo != 0 )

  0021b	83 7d 1c 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0021f	74 0f		 je	 SHORT $LN24@MLS_SkillS

; 1818 : 								{
; 1819 : 									GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00221	6a 01		 push	 1
  00223	ff 33		 push	 DWORD PTR [ebx]
  00225	6a 3b		 push	 59			; 0000003bH
  00227	53		 push	 ebx
  00228	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0022d	83 c4 10	 add	 esp, 16			; 00000010H
$LN24@MLS_SkillS:

; 1820 : 								}
; 1821 : 							}
; 1822 : 
; 1823 : 							bRet = TRUE;

  00230	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00236	b8 01 00 00 00	 mov	 eax, 1
  0023b	8b 7d 14	 mov	 edi, DWORD PTR tv559[ebp]
  0023e	8b 55 10	 mov	 edx, DWORD PTR tv570[ebp]
  00241	89 45 fc	 mov	 DWORD PTR _bRet$1$[ebp], eax
  00244	e9 cc fe ff ff	 jmp	 $LN18@MLS_SkillS
$LN32@MLS_SkillS:
  00249	5f		 pop	 edi
  0024a	5e		 pop	 esi

; 1831 : 			{
; 1832 : 				break;
; 1833 : 			}
; 1834 : 		}
; 1835 : 	}
; 1836 : 
; 1837 : 	return bRet;

  0024b	33 c0		 xor	 eax, eax
  0024d	5b		 pop	 ebx

; 1838 : }

  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c2 18 00	 ret	 24			; 00000018H
?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword2, COMDAT
; _this$ = ecx

; 1709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1710 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi

; 1711 : 
; 1712 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 4d		 je	 SHORT $LN6@MLS_SkillS

; 1713 : 		return;
; 1714 : 
; 1715 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00023	ff 33		 push	 DWORD PTR [ebx]
  00025	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 3f		 je	 SHORT $LN6@MLS_SkillS

; 1716 : 		return;
; 1717 : 
; 1718 : 	if( lpObj->Type != OBJ_USER )

  00031	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00035	75 39		 jne	 SHORT $LN6@MLS_SkillS

; 1719 : 		return;
; 1720 : 
; 1721 : 	if( lpObj->Class != CLASS_KNIGHT )

  00037	66 83 bf 90 00
	00 00 01	 cmp	 WORD PTR [edi+144], 1
  0003f	75 2f		 jne	 SHORT $LN6@MLS_SkillS

; 1722 : 		return;
; 1723 : 
; 1724 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00058	83 c4 24	 add	 esp, 36			; 00000024H

; 1725 : 
; 1726 : 	if(isCombo != 0)

  0005b	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0005f	74 0f		 je	 SHORT $LN6@MLS_SkillS

; 1727 : 	{
; 1728 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00061	6a 01		 push	 1
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	6a 3b		 push	 59			; 0000003bH
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1729 : 	}
; 1730 : }

  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword1, COMDAT
; _this$ = ecx

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1686 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi

; 1687 : 
; 1688 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 4d		 je	 SHORT $LN6@MLS_SkillS

; 1689 : 		return;
; 1690 : 
; 1691 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00023	ff 33		 push	 DWORD PTR [ebx]
  00025	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 3f		 je	 SHORT $LN6@MLS_SkillS

; 1692 : 		return;
; 1693 : 
; 1694 : 	if( lpObj->Type != OBJ_USER )

  00031	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00035	75 39		 jne	 SHORT $LN6@MLS_SkillS

; 1695 : 		return;
; 1696 : 
; 1697 : 	if( lpObj->Class != CLASS_KNIGHT )

  00037	66 83 bf 90 00
	00 00 01	 cmp	 WORD PTR [edi+144], 1
  0003f	75 2f		 jne	 SHORT $LN6@MLS_SkillS

; 1698 : 		return;
; 1699 : 
; 1700 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00058	83 c4 24	 add	 esp, 36			; 00000024H

; 1701 : 
; 1702 : 	if(isCombo != 0)

  0005b	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0005f	74 0f		 je	 SHORT $LN6@MLS_SkillS

; 1703 : 	{
; 1704 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00061	6a 01		 push	 1
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	6a 3b		 push	 59			; 0000003bH
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1705 : 	}
; 1706 : }

  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword5, COMDAT
; _this$ = ecx

; 1661 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1662 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi

; 1663 : 
; 1664 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 4d		 je	 SHORT $LN6@MLS_SkillS

; 1665 : 		return;
; 1666 : 
; 1667 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00023	ff 33		 push	 DWORD PTR [ebx]
  00025	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 3f		 je	 SHORT $LN6@MLS_SkillS

; 1668 : 		return;
; 1669 : 
; 1670 : 	if( lpObj->Type != OBJ_USER )

  00031	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00035	75 39		 jne	 SHORT $LN6@MLS_SkillS

; 1671 : 		return;
; 1672 : 
; 1673 : 	if( lpObj->Class != CLASS_KNIGHT )

  00037	66 83 bf 90 00
	00 00 01	 cmp	 WORD PTR [edi+144], 1
  0003f	75 2f		 jne	 SHORT $LN6@MLS_SkillS

; 1674 : 		return;
; 1675 : 
; 1676 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00058	83 c4 24	 add	 esp, 36			; 00000024H

; 1677 : 
; 1678 : 	if(isCombo != 0)

  0005b	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0005f	74 0f		 je	 SHORT $LN6@MLS_SkillS

; 1679 : 	{
; 1680 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00061	6a 01		 push	 1
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	6a 3b		 push	 59			; 0000003bH
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1681 : 	}
; 1682 : }

  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa, COMDAT
; _this$ = ecx

; 1637 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1638 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi

; 1639 : 
; 1640 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 4d		 je	 SHORT $LN6@MLS_SkillS

; 1641 : 		return;
; 1642 : 
; 1643 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00023	ff 33		 push	 DWORD PTR [ebx]
  00025	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 3f		 je	 SHORT $LN6@MLS_SkillS

; 1644 : 		return;
; 1645 : 
; 1646 : 	if( lpObj->Type != OBJ_USER )

  00031	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00035	75 39		 jne	 SHORT $LN6@MLS_SkillS

; 1647 : 		return;
; 1648 : 
; 1649 : 	if( lpObj->Class != CLASS_MAGUMSA )

  00037	66 83 bf 90 00
	00 00 03	 cmp	 WORD PTR [edi+144], 3
  0003f	75 2f		 jne	 SHORT $LN6@MLS_SkillS

; 1650 : 		return;
; 1651 : 
; 1652 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00058	83 c4 24	 add	 esp, 36			; 00000024H

; 1653 : 
; 1654 : 	if(isCombo != 0)

  0005b	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0005f	74 0f		 je	 SHORT $LN6@MLS_SkillS

; 1655 : 	{
; 1656 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00061	6a 01		 push	 1
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	6a 3b		 push	 59			; 0000003bH
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1657 : 	}
; 1658 : }

  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_SkillSword4, COMDAT
; _this$ = ecx

; 1613 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1614 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00004	69 5d 10 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000b	57		 push	 edi

; 1615 : 
; 1616 : 	if( !gObjIsConnected(lpObj->m_Index) )

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000f	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 4d		 je	 SHORT $LN6@MLS_SkillS

; 1617 : 		return;
; 1618 : 
; 1619 : 	if( !gObjIsConnected(lpTargetObj->m_Index) )

  00023	ff 33		 push	 DWORD PTR [ebx]
  00025	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002a	83 c4 04	 add	 esp, 4
  0002d	85 c0		 test	 eax, eax
  0002f	74 3f		 je	 SHORT $LN6@MLS_SkillS

; 1620 : 		return;
; 1621 : 
; 1622 : 	if( lpObj->Type != OBJ_USER )

  00031	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00035	75 39		 jne	 SHORT $LN6@MLS_SkillS

; 1623 : 		return;
; 1624 : 
; 1625 : 	if( lpObj->Class != CLASS_KNIGHT )

  00037	66 83 bf 90 00
	00 00 01	 cmp	 WORD PTR [edi+144], 1
  0003f	75 2f		 jne	 SHORT $LN6@MLS_SkillS

; 1626 : 		return;
; 1627 : 
; 1628 : 	gObjAttack(lpObj,lpTargetObj,lpMagic,0,1,0,isCombo,0,0);

  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  00048	6a 00		 push	 0
  0004a	6a 01		 push	 1
  0004c	6a 00		 push	 0
  0004e	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00051	53		 push	 ebx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  00058	83 c4 24	 add	 esp, 36			; 00000024H

; 1629 : 
; 1630 : 	if(isCombo != 0)

  0005b	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  0005f	74 0f		 je	 SHORT $LN6@MLS_SkillS

; 1631 : 	{
; 1632 : 		GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,lpObj->m_Index,1);

  00061	6a 01		 push	 1
  00063	ff 37		 push	 DWORD PTR [edi]
  00065	6a 3b		 push	 59			; 0000003bH
  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@MLS_SkillS:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1633 : 	}
; 1634 : }

  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
tv446 = -8						; size = 4
_DuelIndex$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpMagic$ = 12						; size = 4
_aTargetIndex$ = 16					; size = 4
_isCombo$ = 20						; size = 4
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Wheel, COMDAT
; _this$ = ecx

; 1516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1517 : 	int tObjNum;
; 1518 : 	int count = 0;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000b	53		 push	 ebx
  0000c	56		 push	 esi

; 1519 : 	int HitCount = 0;
; 1520 : 	int bAttack;
; 1521 : 	int DuelIndex = lpObj->m_iDuelUser;

  0000d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00010	57		 push	 edi
  00011	c7 45 f8 4b 00
	00 00		 mov	 DWORD PTR tv446[ebp], 75 ; 0000004bH
  00018	8b 8e 50 12 00
	00		 mov	 ecx, DWORD PTR [esi+4688]
  0001e	8d 9e 4c 0c 00
	00		 lea	 ebx, DWORD PTR [esi+3148]
  00024	89 4d fc	 mov	 DWORD PTR _DuelIndex$1$[ebp], ecx
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@MLS_Wheel:

; 1522 : 	int EnableAttack;
; 1523 : 
; 1524 : 	while ( true )
; 1525 : 	{
; 1526 : 		if(lpObj->VpPlayer2[count].state != 0)

  00030	80 7b fc 00	 cmp	 BYTE PTR [ebx-4], 0
  00034	0f 84 36 01 00
	00		 je	 $LN23@MLS_Wheel

; 1527 : 		{
; 1528 : 			tObjNum = lpObj->VpPlayer2[count].number;

  0003a	0f bf 7b fe	 movsx	 edi, WORD PTR [ebx-2]

; 1529 : 
; 1530 : 			if(tObjNum >= 0)

  0003e	85 ff		 test	 edi, edi
  00040	0f 88 2a 01 00
	00		 js	 $LN23@MLS_Wheel

; 1531 : 			{
; 1532 : 				EnableAttack = 0;
; 1533 : 
; 1534 : 				if(lpObj->VpPlayer2[count].type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon < 0)

  00046	8a 13		 mov	 dl, BYTE PTR [ebx]
  00048	80 fa 02	 cmp	 dl, 2
  0004b	75 17		 jne	 SHORT $LN6@MLS_Wheel
  0004d	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00053	83 bc 01 30 06
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1584], 0
  0005b	0f 8c 98 00 00
	00		 jl	 $LN10@MLS_Wheel
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _DuelIndex$1$[ebp]
$LN6@MLS_Wheel:

; 1535 : 				{
; 1536 : 					EnableAttack = 1;
; 1537 : 				}
; 1538 : 				else if(tObjNum == aTargetIndex || DuelIndex == tObjNum)

  00064	3b 7d 10	 cmp	 edi, DWORD PTR _aTargetIndex$[ebp]
  00067	0f 84 8c 00 00
	00		 je	 $LN10@MLS_Wheel
  0006d	3b cf		 cmp	 ecx, edi
  0006f	0f 84 84 00 00
	00		 je	 $LN10@MLS_Wheel

; 1539 : 				{
; 1540 : 					EnableAttack = 1;
; 1541 : 				}
; 1542 : #if (GS_CASTLE == 1)
; 1543 : 				else if(lpObj->VpPlayer2[count].type != OBJ_NPC && gObj[tObjNum].MapNumber == MAP_INDEX_CASTLESIEGE && g_CastleSiege.GetCastleState() == 7)

  00075	80 fa 03	 cmp	 dl, 3
  00078	74 44		 je	 SHORT $LN11@MLS_Wheel
  0007a	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00080	80 bc 06 23 01
	00 00 1e	 cmp	 BYTE PTR [esi+eax+291], 30 ; 0000001eH
  00088	75 31		 jne	 SHORT $LN36@MLS_Wheel
  0008a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0008f	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  00094	83 f8 07	 cmp	 eax, 7
  00097	75 1d		 jne	 SHORT $LN34@MLS_Wheel

; 1544 : 				{
; 1545 : 					if( lpObj->m_btCsJoinSide != gObj[tObjNum].m_btCsJoinSide )

  00099	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0009c	8a 88 5a 20 00
	00		 mov	 cl, BYTE PTR [eax+8282]
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a7	3a 8c 06 5a 20
	00 00		 cmp	 cl, BYTE PTR [esi+eax+8282]
  000ae	0f 84 b9 00 00
	00		 je	 $LN37@MLS_Wheel

; 1546 : 						EnableAttack = 1;
; 1547 : 				}
; 1548 : #endif
; 1549 : 				else

  000b4	eb 43		 jmp	 SHORT $LN10@MLS_Wheel
$LN34@MLS_Wheel:
  000b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN36@MLS_Wheel:
  000bb	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
$LN11@MLS_Wheel:

; 1550 : 				{
; 1551 : 					int CallMonIndex = gObj[tObjNum].m_Index;

  000be	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048

; 1552 : 
; 1553 : 					if(gObj[tObjNum].Type == OBJ_MONSTER && gObj[tObjNum].m_RecallMon >= 0)

  000c4	80 7c 01 50 02	 cmp	 BYTE PTR [ecx+eax+80], 2
  000c9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000cc	75 14		 jne	 SHORT $LN14@MLS_Wheel
  000ce	8b 8c 01 30 06
	00 00		 mov	 ecx, DWORD PTR [ecx+eax+1584]
  000d5	85 c9		 test	 ecx, ecx
  000d7	78 09		 js	 SHORT $LN14@MLS_Wheel

; 1554 : 					{
; 1555 : 						CallMonIndex = gObj[gObj[tObjNum].m_RecallMon].m_Index;

  000d9	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  000df	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
$LN14@MLS_Wheel:

; 1556 : 					}
; 1557 : 
; 1558 : 					if(gObjTargetGuildWarCheck(lpObj,&gObj[CallMonIndex])==1)

  000e2	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000e8	03 c8		 add	 ecx, eax
  000ea	51		 push	 ecx
  000eb	56		 push	 esi
  000ec	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000f1	83 c4 08	 add	 esp, 8
  000f4	83 f8 01	 cmp	 eax, 1
  000f7	75 6f		 jne	 SHORT $LN35@MLS_Wheel
$LN10@MLS_Wheel:

; 1559 : 					{
; 1560 : 						EnableAttack = 1;
; 1561 : 					}
; 1562 : 				}
; 1563 : 
; 1564 : 				if(EnableAttack != 0)
; 1565 : 				{
; 1566 : 					int iSkillDis = MagicDamageC.GetSkillDistance(lpMagic->m_Skill);

  000f9	8b 45 0c	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00101	ff 70 08	 push	 DWORD PTR [eax+8]
  00104	e8 00 00 00 00	 call	 ?GetSkillDistance@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillDistance

; 1567 : 
; 1568 : 					if(gObjCalDistance(lpObj,&gObj[tObjNum]) <= iSkillDis )

  00109	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010f	8b f0		 mov	 esi, eax
  00111	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  00117	03 cf		 add	 ecx, edi
  00119	51		 push	 ecx
  0011a	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  0011d	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00122	83 c4 08	 add	 esp, 8
  00125	3b c6		 cmp	 eax, esi
  00127	7f 3f		 jg	 SHORT $LN35@MLS_Wheel

; 1569 : 					{
; 1570 : 						bAttack = 0;
; 1571 : 
; 1572 : 						if(HitCount > 15)
; 1573 : 						{
; 1574 : 							bAttack = 0;
; 1575 : 						}
; 1576 : 
; 1577 : 						if(HitCount >= 10)
; 1578 : 						{
; 1579 : 							if(rand()%2)
; 1580 : 							{
; 1581 : 								bAttack = 1;
; 1582 : 							}
; 1583 : 						}
; 1584 : 						else
; 1585 : 						{
; 1586 : 							bAttack = 1;
; 1587 : 						}
; 1588 : 
; 1589 : 						if(bAttack != 0)
; 1590 : 						{
; 1591 : 
; 1592 : 							gObjAttack(lpObj,&gObj[tObjNum],lpMagic,0,1,0,isCombo,0,0);

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00131	03 c7		 add	 eax, edi
  00133	6a 00		 push	 0
  00135	6a 00		 push	 0
  00137	ff 75 14	 push	 DWORD PTR _isCombo$[ebp]
  0013a	6a 00		 push	 0
  0013c	6a 01		 push	 1
  0013e	6a 00		 push	 0
  00140	ff 75 0c	 push	 DWORD PTR _lpMagic$[ebp]
  00143	50		 push	 eax
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  0014a	83 c4 24	 add	 esp, 36			; 00000024H

; 1593 : 
; 1594 : 							if(isCombo != 0)

  0014d	83 7d 14 00	 cmp	 DWORD PTR _isCombo$[ebp], 0
  00151	74 15		 je	 SHORT $LN35@MLS_Wheel

; 1595 : 							{
; 1596 : 								GCMagicAttackNumberSend(lpObj,AT_SKILL_COMBO,gObj[tObjNum].m_Index,1);

  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00158	6a 01		 push	 1
  0015a	ff 34 07	 push	 DWORD PTR [edi+eax]
  0015d	6a 3b		 push	 59			; 0000003bH
  0015f	56		 push	 esi
  00160	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00165	83 c4 10	 add	 esp, 16			; 00000010H
$LN35@MLS_Wheel:
  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN37@MLS_Wheel:
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _DuelIndex$1$[ebp]
$LN23@MLS_Wheel:

; 1597 : 							}
; 1598 : 						}
; 1599 : 					}
; 1600 : 				}
; 1601 : 			}
; 1602 : 		}
; 1603 : 
; 1604 : 		count++;
; 1605 : 		if(count > MAX_VIEWPORT -1)

  00170	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00173	83 c3 0c	 add	 ebx, 12			; 0000000cH
  00176	83 6d f8 01	 sub	 DWORD PTR tv446[ebp], 1
  0017a	0f 85 b0 fe ff
	ff		 jne	 $LL2@MLS_Wheel
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx

; 1606 : 		{
; 1607 : 			break;
; 1608 : 		}
; 1609 : 	}
; 1610 : }

  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c2 10 00	 ret	 16			; 00000010H
?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Wheel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_lpTargetObj$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_fSkillValue$ = -4					; size = 4
_lpObj$ = 8						; size = 4
tv479 = 12						; size = 4
_fAddLife$1$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_Healing, COMDAT
; _this$ = ecx

; 1454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 1455 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00007	69 5d 0c 40 27
	00 00		 imul	 ebx, DWORD PTR _aTargetIndex$[ebp], 10048
  0000e	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	89 5d f8	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ebx

; 1456 : 	int skillSuccess = TRUE;
; 1457 : 
; 1458 : 	if( lpTargetObj->Type != OBJ_USER &&

  0001a	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0001e	74 0d		 je	 SHORT $LN5@MLS_Healin
  00020	83 bb 30 06 00
	00 ff		 cmp	 DWORD PTR [ebx+1584], -1
  00027	0f 84 db 01 00
	00		 je	 $LN1@MLS_Healin
$LN5@MLS_Healin:
  0002d	57		 push	 edi

; 1459 : 		lpTargetObj->m_RecallMon == -1 )
; 1460 : 		return;
; 1461 : 
; 1462 : 	if( lpObj->Class != CLASS_ELF )

  0002e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00031	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  00039	0f 85 c8 01 00
	00		 jne	 $LN28@MLS_Healin

; 1463 : 		return;
; 1464 : 
; 1465 : 	if( CC_MAP_RANGE(lpObj->MapNumber) )

  0003f	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00045	3c 35		 cmp	 al, 53			; 00000035H
  00047	74 0f		 je	 SHORT $LN26@MLS_Healin
  00049	3c 12		 cmp	 al, 18			; 00000012H
  0004b	72 15		 jb	 SHORT $LN8@MLS_Healin
  0004d	b1 17		 mov	 cl, 23			; 00000017H
  0004f	3a c8		 cmp	 cl, al
  00051	1b c0		 sbb	 eax, eax
  00053	83 c0 01	 add	 eax, 1
  00056	74 0a		 je	 SHORT $LN8@MLS_Healin
$LN26@MLS_Healin:

; 1466 : 	{
; 1467 : 		if( lpObj->m_Index != lpTargetObj->m_Index )

  00058	8b 07		 mov	 eax, DWORD PTR [edi]
  0005a	3b 03		 cmp	 eax, DWORD PTR [ebx]
  0005c	0f 85 a5 01 00
	00		 jne	 $LN28@MLS_Healin
$LN8@MLS_Healin:
  00062	56		 push	 esi

; 1468 : 			return;
; 1469 : 	}
; 1470 : 	
; 1471 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00063	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0006b	ff 76 08	 push	 DWORD PTR [esi+8]
  0006e	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 1472 : 
; 1473 : 	if( !lpInfo )

  00073	85 c0		 test	 eax, eax
  00075	0f 84 8b 01 00
	00		 je	 $LN29@MLS_Healin

; 1474 : 	{
; 1475 : 		return;
; 1476 : 	}
; 1477 : 
; 1478 : 	float fAddLife = lpInfo->m_Arg1+(lpObj->Energy+lpObj->AddEnergy)/lpInfo->m_Arg2;

  0007b	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  00082	0f b7 97 02 01
	00 00		 movzx	 edx, WORD PTR [edi+258]
  00089	03 d1		 add	 edx, ecx

; 1479 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  0008b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00090	66 0f 6e c2	 movd	 xmm0, edx
  00094	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00097	f3 0f 5e 40 08	 divss	 xmm0, DWORD PTR [eax+8]
  0009c	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  000a1	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  000a5	50		 push	 eax
  000a6	ff 76 08	 push	 DWORD PTR [esi+8]
  000a9	f3 0f 11 45 0c	 movss	 DWORD PTR _fAddLife$1$[ebp], xmm0
  000ae	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1480 : 
; 1481 : 	if( fSkillValue != 0.0f )
; 1482 : 	{
; 1483 : 		fAddLife += fAddLife*fSkillValue/100.0f;

  000bc	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fAddLife$1$[ebp]
  000c1	d9 5d fc	 fstp	 DWORD PTR _fSkillValue$[ebp]
  000c4	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fSkillValue$[ebp]
  000c9	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000d0	9f		 lahf
  000d1	f6 c4 44	 test	 ah, 68			; 00000044H
  000d4	7b 10		 jnp	 SHORT $LN10@MLS_Healin
  000d6	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000da	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  000e2	f3 0f 58 c8	 addss	 xmm1, xmm0
$LN10@MLS_Healin:

; 1484 : 	}
; 1485 : 
; 1486 : 	lpTargetObj->Life += fAddLife;
; 1487 : 
; 1488 : 	if( (lpTargetObj->MaxLife+lpTargetObj->AddLife) < lpTargetObj->Life )

  000e6	66 0f 6e 83 24
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+292]
  000ee	f3 0f 10 93 dc
	00 00 00	 movss	 xmm2, DWORD PTR [ebx+220]
  000f6	f3 0f 58 8b d8
	00 00 00	 addss	 xmm1, DWORD PTR [ebx+216]
  000fe	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00101	f3 0f 11 8b d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm1
  00109	f3 0f 58 c2	 addss	 xmm0, xmm2
  0010d	0f 2f c8	 comiss	 xmm1, xmm0
  00110	76 08		 jbe	 SHORT $LN11@MLS_Healin

; 1489 : 		lpTargetObj->Life = lpTargetObj->MaxLife+lpTargetObj->AddLife;

  00112	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
$LN11@MLS_Healin:

; 1490 : 
; 1491 : 	if(lpTargetObj->Type == OBJ_USER)

  0011a	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0011e	0f 85 af 00 00
	00		 jne	 $LN12@MLS_Healin

; 1492 : 	{
; 1493 : 		GCReFillSend(lpTargetObj->m_Index,(WORD)lpTargetObj->Life,0xFF,0,lpTargetObj->iShield);

  00124	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  0012b	50		 push	 eax
  0012c	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  00134	6a 00		 push	 0
  00136	68 ff 00 00 00	 push	 255			; 000000ffH
  0013b	0f b7 c0	 movzx	 eax, ax
  0013e	50		 push	 eax
  0013f	ff 33		 push	 DWORD PTR [ebx]
  00141	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  00146	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  0014b	8d b7 48 0c 00
	00		 lea	 esi, DWORD PTR [edi+3144]
  00151	83 c4 14	 add	 esp, 20			; 00000014H
  00154	89 4d 0c	 mov	 DWORD PTR tv479[ebp], ecx
  00157	8b df		 mov	 ebx, edi
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@MLS_Healin:

; 1496 : 		{
; 1497 : 			if(lpObj->VpPlayer2[n].type == OBJ_MONSTER && lpObj->VpPlayer2[n].state != 0)

  00160	80 7e 04 02	 cmp	 BYTE PTR [esi+4], 2
  00164	75 57		 jne	 SHORT $LN2@MLS_Healin
  00166	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00169	74 52		 je	 SHORT $LN2@MLS_Healin

; 1498 : 			{
; 1499 : 				LPOBJ lpMonster = &gObj[lpObj->VpPlayer2[n].number];

  0016b	0f bf 46 02	 movsx	 eax, WORD PTR [esi+2]
  0016f	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00175	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1500 : 				if(lpMonster->m_iCurrentAI != 0)

  0017b	83 bf d0 20 00
	00 00		 cmp	 DWORD PTR [edi+8400], 0
  00182	74 39		 je	 SHORT $LN2@MLS_Healin

; 1501 : 				{
; 1502 : 					lpMonster->m_Agro.IncAgro(lpObj->m_Index,(lpObj->Energy / 5)/40);

  00184	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  0018b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00190	f7 e9		 imul	 ecx
  00192	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00197	d1 fa		 sar	 edx, 1
  00199	8b ca		 mov	 ecx, edx
  0019b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0019e	03 ca		 add	 ecx, edx
  001a0	f7 e9		 imul	 ecx
  001a2	8d 8f ec 20 00
	00		 lea	 ecx, DWORD PTR [edi+8428]
  001a8	c1 fa 04	 sar	 edx, 4
  001ab	8b c2		 mov	 eax, edx
  001ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b0	03 c2		 add	 eax, edx
  001b2	50		 push	 eax
  001b3	ff 33		 push	 DWORD PTR [ebx]
  001b5	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
  001ba	8b 4d 0c	 mov	 ecx, DWORD PTR tv479[ebp]
$LN2@MLS_Healin:

; 1494 : 
; 1495 : 		for(int n = 0; n < MAX_VIEWPORT; n++)

  001bd	83 c6 0c	 add	 esi, 12			; 0000000cH
  001c0	83 e9 01	 sub	 ecx, 1
  001c3	89 4d 0c	 mov	 DWORD PTR tv479[ebp], ecx
  001c6	75 98		 jne	 SHORT $LL4@MLS_Healin

; 1503 : 				}
; 1504 : 			}
; 1505 : 		}
; 1506 : 	}
; 1507 : 	else if(lpTargetObj->m_RecallMon >= 0)

  001c8	8b 5d f8	 mov	 ebx, DWORD PTR _lpTargetObj$1$[ebp]
  001cb	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  001ce	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  001d1	eb 21		 jmp	 SHORT $LN16@MLS_Healin
$LN12@MLS_Healin:
  001d3	8b 8b 30 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1584]
  001d9	85 c9		 test	 ecx, ecx
  001db	78 17		 js	 SHORT $LN16@MLS_Healin

; 1508 : 	{
; 1509 : 		GCRecallMonLife(lpTargetObj->m_RecallMon,(int)lpTargetObj->MaxLife,(int)lpTargetObj->Life);

  001dd	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  001e5	50		 push	 eax
  001e6	f3 0f 2c c2	 cvttss2si eax, xmm2
  001ea	50		 push	 eax
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife
  001f1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@MLS_Healin:

; 1510 : 	}
; 1511 : 
; 1512 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpTargetObj->m_Index,skillSuccess);

  001f4	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  001f8	6a 01		 push	 1
  001fa	ff 33		 push	 DWORD PTR [ebx]
  001fc	50		 push	 eax
  001fd	57		 push	 edi
  001fe	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00203	83 c4 10	 add	 esp, 16			; 00000010H
$LN29@MLS_Healin:
  00206	5e		 pop	 esi
$LN28@MLS_Healin:
  00207	5f		 pop	 edi
$LN1@MLS_Healin:
  00208	5b		 pop	 ebx

; 1513 : }

  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 0c 00	 ret	 12			; 0000000cH
?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_Healing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iDefenseValue$ = 12					; size = 4
_aTargetIndex$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z PROC ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense, COMDAT
; _this$ = ecx

; 1409 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 1410 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00005	69 7d 0c 40 27
	00 00		 imul	 edi, DWORD PTR _aTargetIndex$[ebp], 10048
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1411 : 	int skillSuccess = TRUE;
; 1412 : 
; 1413 : 	if( lpTargetObj->Type != OBJ_USER &&

  00015	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00019	74 0d		 je	 SHORT $LN2@MLS_Wizard
  0001b	83 bf 30 06 00
	00 ff		 cmp	 DWORD PTR [edi+1584], -1
  00022	0f 84 42 01 00
	00		 je	 $LN1@MLS_Wizard
$LN2@MLS_Wizard:
  00028	56		 push	 esi

; 1414 : 		lpTargetObj->m_RecallMon == -1 )
; 1415 : 		return;
; 1416 : 
; 1417 : 	if( lpObj->Class != CLASS_WIZARD &&

  00029	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0002c	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00033	66 85 c0	 test	 ax, ax
  00036	74 09		 je	 SHORT $LN3@MLS_Wizard
  00038	83 f8 03	 cmp	 eax, 3
  0003b	0f 85 28 01 00
	00		 jne	 $LN13@MLS_Wizard
$LN3@MLS_Wizard:

; 1418 : 		lpObj->Class != CLASS_MAGUMSA )
; 1419 : 		return;
; 1420 : 
; 1421 : 	if( lpObj->PartyNumber != lpTargetObj->PartyNumber )

  00041	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  00047	3b 87 0c 06 00
	00		 cmp	 eax, DWORD PTR [edi+1548]
  0004d	0f 85 16 01 00
	00		 jne	 $LN13@MLS_Wizard

; 1422 : 		return;
; 1423 : 
; 1424 : 	float iDefenseValue = 0;
; 1425 : 	int iSkillValidTime = 0;
; 1426 : 
; 1427 : 	BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  00053	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0005b	53		 push	 ebx
  0005c	ff 70 08	 push	 DWORD PTR [eax+8]
  0005f	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  00064	8b d8		 mov	 ebx, eax

; 1428 : 
; 1429 : 	if( !lpInfo )

  00066	85 db		 test	 ebx, ebx
  00068	0f 84 fa 00 00
	00		 je	 $LN14@MLS_Wizard

; 1430 : 	{
; 1431 : 		return;
; 1432 : 	}
; 1433 : 
; 1434 : 	iDefenseValue = lpInfo->m_Arg1 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg2 + (lpObj->Dexterity + lpObj->AddDexterity) / lpInfo->m_Arg3;

  0006e	0f b7 8e d6 00
	00 00		 movzx	 ecx, WORD PTR [esi+214]
  00075	0f b7 96 02 01
	00 00		 movzx	 edx, WORD PTR [esi+258]
  0007c	0f b7 86 d2 00
	00 00		 movzx	 eax, WORD PTR [esi+210]
  00083	03 d1		 add	 edx, ecx
  00085	0f b7 8e fe 00
	00 00		 movzx	 ecx, WORD PTR [esi+254]
  0008c	03 c8		 add	 ecx, eax
  0008e	66 0f 6e ca	 movd	 xmm1, edx
  00092	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00095	66 0f 6e c1	 movd	 xmm0, ecx
  00099	f3 0f 5e 4b 08	 divss	 xmm1, DWORD PTR [ebx+8]
  0009e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000a1	f3 0f 58 4b 04	 addss	 xmm1, DWORD PTR [ebx+4]
  000a6	f3 0f 5e 43 0c	 divss	 xmm0, DWORD PTR [ebx+12]
  000ab	f3 0f 58 c8	 addss	 xmm1, xmm0

; 1435 : 
; 1436 : 	if( iDefenseValue > lpInfo->m_Arg4 )

  000af	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  000b4	0f 2f c8	 comiss	 xmm1, xmm0
  000b7	f3 0f 11 4d 0c	 movss	 DWORD PTR _iDefenseValue$[ebp], xmm1
  000bc	76 05		 jbe	 SHORT $LN6@MLS_Wizard

; 1437 : 		iDefenseValue = lpInfo->m_Arg4;

  000be	f3 0f 11 45 0c	 movss	 DWORD PTR _iDefenseValue$[ebp], xmm0
$LN6@MLS_Wizard:

; 1438 : 
; 1439 : 	float fSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill), lpMagic->m_Level);

  000c3	8b 4d 10	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  000c6	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  000ca	50		 push	 eax
  000cb	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000d3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1440 : 	iDefenseValue += fSkillValue;
; 1441 : 
; 1442 : 	int iManaRate = g_SkillAdditionInfo.GetManaShieldRate(lpMagic->m_Level);

  000e1	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000e4	d8 45 0c	 fadd	 DWORD PTR _iDefenseValue$[ebp]
  000e7	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  000eb	d9 5d 0c	 fstp	 DWORD PTR _iDefenseValue$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\skilladditioninfo.h

; 47   : 	short GetManaShieldRate(int level) { if( level < 0 || level > 20 ) return 20; return m_SB_ManaRate[level]; };

  000ee	83 f8 14	 cmp	 eax, 20			; 00000014H
  000f1	77 0a		 ja	 SHORT $LN11@MLS_Wizard
  000f3	0f b7 04 45 40
	00 00 00	 movzx	 eax, WORD PTR ?g_SkillAdditionInfo@@3VCSkillAdditionInfo@@A[eax*2+64]
  000fb	eb 05		 jmp	 SHORT $LN9@MLS_Wizard
$LN11@MLS_Wizard:
  000fd	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
$LN9@MLS_Wizard:
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp

; 1444 : 	iSkillValidTime = lpInfo->m_Arg5 + (lpObj->Energy + lpObj->AddEnergy) / lpInfo->m_Arg6;

  00102	0f b7 8e 02 01
	00 00		 movzx	 ecx, WORD PTR [esi+258]
  00109	0f bf d0	 movsx	 edx, ax
  0010c	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]
  00113	03 c8		 add	 ecx, eax

; 1445 : 
; 1446 : 	if( iSkillValidTime > lpInfo->m_Arg7)

  00115	f3 0f 10 4b 1c	 movss	 xmm1, DWORD PTR [ebx+28]
  0011a	66 0f 6e c1	 movd	 xmm0, ecx
  0011e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00121	f3 0f 5e 43 18	 divss	 xmm0, DWORD PTR [ebx+24]
  00126	f3 0f 58 43 14	 addss	 xmm0, DWORD PTR [ebx+20]
  0012b	f3 0f 2c c0	 cvttss2si eax, xmm0
  0012f	66 0f 6e c0	 movd	 xmm0, eax
  00133	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00136	0f 2f c1	 comiss	 xmm0, xmm1
  00139	76 04		 jbe	 SHORT $LN7@MLS_Wizard

; 1447 : 		iSkillValidTime = lpInfo->m_Arg7;

  0013b	f3 0f 2c c1	 cvttss2si eax, xmm1
$LN7@MLS_Wizard:

; 1448 : 
; 1449 : 	gObjAddBuffEffect(lpTargetObj,BUFF_MANASHIELD,ADD_OPTION_MSDECREASE,(int)iDefenseValue,ADD_OPTION_MSTIME,iManaRate,iSkillValidTime);

  0013f	50		 push	 eax
  00140	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _iDefenseValue$[ebp]
  00145	52		 push	 edx
  00146	6a 1c		 push	 28			; 0000001cH
  00148	50		 push	 eax
  00149	6a 15		 push	 21			; 00000015H
  0014b	6a 04		 push	 4
  0014d	57		 push	 edi
  0014e	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1450 : 	GCMagicAttackNumberSend(lpObj,lpMagic->m_Skill,lpObj->m_Index,skillSuccess);

  00153	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00156	6a 01		 push	 1
  00158	ff 36		 push	 DWORD PTR [esi]
  0015a	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  0015e	50		 push	 eax
  0015f	56		 push	 esi
  00160	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00165	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN14@MLS_Wizard:
  00168	5b		 pop	 ebx
$LN13@MLS_Wizard:
  00169	5e		 pop	 esi
$LN1@MLS_Wizard:
  0016a	5f		 pop	 edi

; 1451 : }

  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c2 0c 00	 ret	 12			; 0000000cH
?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ENDP ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?RunningSkill_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z
_TEXT	SEGMENT
_pMsg$1 = -8						; size = 7
_lpTargetObj$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
tv692 = 12						; size = 4
_aTargetIndex$ = 12					; size = 4
tv698 = 16						; size = 4
_lpMagic$ = 16						; size = 4
_bCombo$ = 20						; size = 4
tv646 = 24						; size = 4
_x$ = 24						; size = 1
tv699 = 28						; size = 4
_y$ = 28						; size = 1
_dir$ = 32						; size = 1
_aTargetPos$ = 36					; size = 1
?RunningSkill_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z PROC ; CMasterLevelSkillTreeSystem::RunningSkill_MLS, COMDAT
; _this$ = ecx

; 1131 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1132 : 	if( lpObj == NULL || lpMagic == NULL )

  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	85 f6		 test	 esi, esi
  00010	0f 84 8c 08 00
	00		 je	 $LN8@RunningSki
  00016	8b 7d 10	 mov	 edi, DWORD PTR _lpMagic$[ebp]
  00019	85 ff		 test	 edi, edi
  0001b	0f 84 81 08 00
	00		 je	 $LN8@RunningSki

; 1134 : 
; 1135 : 	LPOBJ lpTargetObj = &gObj[aTargetIndex];

  00021	69 4d 0c 40 27
	00 00		 imul	 ecx, DWORD PTR _aTargetIndex$[ebp], 10048
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1136 : 
; 1137 : 	int iBaseMLS = g_MasterSkillSystem.GetBaseMasterLevelSkill(lpMagic->m_Skill);

  0002d	ff 77 08	 push	 DWORD PTR [edi+8]
  00030	03 c1		 add	 eax, ecx
  00032	89 4d 10	 mov	 DWORD PTR tv698[ebp], ecx
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0003a	89 45 08	 mov	 DWORD PTR _lpTargetObj$1$[ebp], eax
  0003d	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 1138 : 
; 1139 : 	switch( iBaseMLS )

  00042	05 ba fe ff ff	 add	 eax, -326		; fffffebaH
  00047	3d f7 00 00 00	 cmp	 eax, 247		; 000000f7H
  0004c	0f 87 42 08 00
	00		 ja	 $LN2@RunningSki
  00052	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN88@RunningSki[eax]
  00059	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN90@RunningSki[eax*4]
$LN9@RunningSki:

; 1140 : 	{
; 1141 : 	case 403:
; 1142 : 		this->MLS_WizardMagicDefense(lpObj,aTargetIndex,lpMagic);

  00060	57		 push	 edi
  00061	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00064	8b cb		 mov	 ecx, ebx
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 ?MLS_WizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_WizardMagicDefense
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	5b		 pop	 ebx

; 1406 : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 20 00	 ret	 32			; 00000020H
$LN10@RunningSki:

; 1143 : 		break;
; 1144 : 	case 413:
; 1145 : 		this->MLS_Healing(lpObj,aTargetIndex,lpMagic);

  0007a	57		 push	 edi
  0007b	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0007e	8b cb		 mov	 ecx, ebx
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?MLS_Healing@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_Healing
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	5b		 pop	 ebx

; 1406 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 20 00	 ret	 32			; 00000020H
$LN11@RunningSki:

; 1146 : 		break;
; 1147 : 	case 330:
; 1148 : 	case 332:
; 1149 : 	case 481:
; 1150 : 		this->MLS_Wheel(lpObj,lpMagic,aTargetIndex,bCombo);

  00094	ff 75 14	 push	 DWORD PTR _bCombo$[ebp]
  00097	8b cb		 mov	 ecx, ebx
  00099	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0009c	57		 push	 edi
  0009d	56		 push	 esi
  0009e	e8 00 00 00 00	 call	 ?MLS_Wheel@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_Wheel
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	5b		 pop	 ebx

; 1406 : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 20 00	 ret	 32			; 00000020H
$LN12@RunningSki:

; 1151 : 		break;
; 1152 : 	case 360:
; 1153 : 		this->MLS_SkillFulKnightSkillAddLife(lpObj,lpMagic);

  000b1	57		 push	 edi
  000b2	56		 push	 esi
  000b3	8b cb		 mov	 ecx, ebx
  000b5	e8 00 00 00 00	 call	 ?MLS_SkillFulKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulKnightSkillAddLife
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	5b		 pop	 ebx

; 1406 : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 20 00	 ret	 32			; 00000020H
$LN13@RunningSki:

; 1154 : 		break;
; 1155 : 	case 356:
; 1156 : 		this->MLS_KnightSkillAddLife(lpObj,lpMagic);

  000c8	57		 push	 edi
  000c9	56		 push	 esi
  000ca	8b cb		 mov	 ecx, ebx
  000cc	e8 00 00 00 00	 call	 ?MLS_KnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_KnightSkillAddLife
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  000d3	b8 01 00 00 00	 mov	 eax, 1
  000d8	5b		 pop	 ebx

; 1406 : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 20 00	 ret	 32			; 00000020H
$LN14@RunningSki:

; 1157 : 		break;
; 1158 : 	case AT_MSKILL_DK_SWELLLIFE3:
; 1159 : 		this->MLS_SkillMasteryKnightSkillAddLife(lpObj,lpMagic);

  000df	57		 push	 edi
  000e0	56		 push	 esi
  000e1	8b cb		 mov	 ecx, ebx
  000e3	e8 00 00 00 00	 call	 ?MLS_SkillMasteryKnightSkillAddLife@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryKnightSkillAddLife
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  000ea	b8 01 00 00 00	 mov	 eax, 1
  000ef	5b		 pop	 ebx

; 1406 : }

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 20 00	 ret	 32			; 00000020H
$LN15@RunningSki:

; 1160 : 		break;
; 1161 : 	case 512:
; 1162 : 	case 516:
; 1163 : 		this->MLS_DarkHorseAttack(lpObj,aTargetIndex,lpMagic);

  000f6	57		 push	 edi
  000f7	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  000fa	8b cb		 mov	 ecx, ebx
  000fc	56		 push	 esi
  000fd	e8 00 00 00 00	 call	 ?MLS_DarkHorseAttack@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_DarkHorseAttack
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00104	b8 01 00 00 00	 mov	 eax, 1
  00109	5b		 pop	 ebx

; 1406 : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 20 00	 ret	 32			; 00000020H
$LN16@RunningSki:

; 1164 : 		break;
; 1165 : 	case 508:
; 1166 : 	case 514:
; 1167 : 		this->MLS_FireBurst(lpObj,aTargetIndex,lpMagic);

  00110	57		 push	 edi
  00111	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00114	8b cb		 mov	 ecx, ebx
  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ?MLS_FireBurst@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_FireBurst
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0011e	b8 01 00 00 00	 mov	 eax, 1
  00123	5b		 pop	 ebx

; 1406 : }

  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 20 00	 ret	 32			; 00000020H
$LN17@RunningSki:

; 1168 : 		break;
; 1169 : 	case AT_MSKILL_DW_ICESTORM1:
; 1170 : 	case AT_MSKILL_DW_ICESTORM2:
; 1171 : 		this->MLS_SuddenIce(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  0012a	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0012d	8b cb		 mov	 ecx, ebx
  0012f	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00132	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00135	57		 push	 edi
  00136	ff 36		 push	 DWORD PTR [esi]
  00138	e8 00 00 00 00	 call	 ?MLS_SuddenIce@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SuddenIce
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	5b		 pop	 ebx

; 1406 : }

  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 20 00	 ret	 32			; 00000020H
$LN18@RunningSki:

; 1172 : 		break;
; 1173 : 	case AT_MSKILL_DK_DEATHSTAB1:
; 1174 : 	case AT_MSKILL_DK_DEATHSTAB2:
; 1175 : 	case AT_MSKILL_DK_DEATHSTAB3:
; 1176 : 		this->MLS_KnightBlow(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);

  0014b	ff 75 14	 push	 DWORD PTR _bCombo$[ebp]
  0014e	8b cb		 mov	 ecx, ebx
  00150	57		 push	 edi
  00151	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00154	ff 36		 push	 DWORD PTR [esi]
  00156	e8 00 00 00 00	 call	 ?MLS_KnightBlow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_KnightBlow
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0015d	b8 01 00 00 00	 mov	 eax, 1
  00162	5b		 pop	 ebx

; 1406 : }

  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 20 00	 ret	 32			; 00000020H
$LN19@RunningSki:

; 1177 : 		break;
; 1178 : 	case 331:
; 1179 : 	case 333:
; 1180 : 		this->MLS_SkillBlowOfFury(lpObj->m_Index,lpMagic,x,y,aTargetIndex,bCombo);

  00169	ff 75 14	 push	 DWORD PTR _bCombo$[ebp]
  0016c	8b cb		 mov	 ecx, ebx
  0016e	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00171	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00174	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00177	57		 push	 edi
  00178	ff 36		 push	 DWORD PTR [esi]
  0017a	e8 00 00 00 00	 call	 ?MLS_SkillBlowOfFury@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlowOfFury
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00181	b8 01 00 00 00	 mov	 eax, 1
  00186	5b		 pop	 ebx

; 1406 : }

  00187	8b e5		 mov	 esp, ebp
  00189	5d		 pop	 ebp
  0018a	c2 20 00	 ret	 32			; 00000020H
$LN20@RunningSki:

; 1181 : 		break;
; 1182 : 	case 417:
; 1183 : 		this->MLS_SkillDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  0018d	57		 push	 edi
  0018e	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00191	8b cb		 mov	 ecx, ebx
  00193	ff 36		 push	 DWORD PTR [esi]
  00195	e8 00 00 00 00	 call	 ?MLS_SkillDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDefense
  0019a	5f		 pop	 edi
  0019b	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0019c	b8 01 00 00 00	 mov	 eax, 1
  001a1	5b		 pop	 ebx

; 1406 : }

  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c2 20 00	 ret	 32			; 00000020H
$LN21@RunningSki:

; 1184 : 		break;
; 1185 : 	case 420:
; 1186 : 		this->MLS_SkillAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  001a8	57		 push	 edi
  001a9	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  001ac	8b cb		 mov	 ecx, ebx
  001ae	ff 36		 push	 DWORD PTR [esi]
  001b0	e8 00 00 00 00	 call	 ?MLS_SkillAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAttack
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  001b7	b8 01 00 00 00	 mov	 eax, 1
  001bc	5b		 pop	 ebx

; 1406 : }

  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 20 00	 ret	 32			; 00000020H
$LN22@RunningSki:

; 1187 : 		break;
; 1188 : 	case 482:
; 1189 : 		this->MLS_PowerSlash(lpObj->m_Index,lpMagic,x,y,aTargetPos,aTargetIndex);

  001c3	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  001c6	8b cb		 mov	 ecx, ebx
  001c8	ff 75 24	 push	 DWORD PTR _aTargetPos$[ebp]
  001cb	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  001ce	ff 75 18	 push	 DWORD PTR _x$[ebp]
  001d1	57		 push	 edi
  001d2	ff 36		 push	 DWORD PTR [esi]
  001d4	e8 00 00 00 00	 call	 ?MLS_PowerSlash@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEH@Z ; CMasterLevelSkillTreeSystem::MLS_PowerSlash
  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  001db	b8 01 00 00 00	 mov	 eax, 1
  001e0	5b		 pop	 ebx

; 1406 : }

  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 20 00	 ret	 32			; 00000020H
$LN23@RunningSki:

; 1190 : 		break;
; 1191 : 	case 454:
; 1192 : 		this->MLS_SkillSleep(lpObj->m_Index,aTargetIndex,lpMagic);

  001e7	57		 push	 edi
  001e8	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  001eb	8b cb		 mov	 ecx, ebx
  001ed	ff 36		 push	 DWORD PTR [esi]
  001ef	e8 00 00 00 00	 call	 ?MLS_SkillSleep@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSleep
  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  001f6	b8 01 00 00 00	 mov	 eax, 1
  001fb	5b		 pop	 ebx

; 1406 : }

  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 20 00	 ret	 32			; 00000020H
$LN24@RunningSki:

; 1193 : 		break;
; 1194 : 	case 455:
; 1195 : 		this->MLS_SkillChainLightning(lpObj->m_Index,aTargetIndex,lpMagic);

  00202	57		 push	 edi
  00203	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00206	8b cb		 mov	 ecx, ebx
  00208	ff 36		 push	 DWORD PTR [esi]
  0020a	e8 00 00 00 00	 call	 ?MLS_SkillChainLightning@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChainLightning
  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00211	b8 01 00 00 00	 mov	 eax, 1
  00216	5b		 pop	 ebx

; 1406 : }

  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 20 00	 ret	 32			; 00000020H
$LN25@RunningSki:

; 1196 : 		break;
; 1197 : 	case 456:
; 1198 : 		this->MLS_SkillLightningShock(lpObj->m_Index,aTargetIndex,lpMagic);

  0021d	57		 push	 edi
  0021e	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00221	8b cb		 mov	 ecx, ebx
  00223	ff 36		 push	 DWORD PTR [esi]
  00225	e8 00 00 00 00	 call	 ?MLS_SkillLightningShock@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillLightningShock
  0022a	5f		 pop	 edi
  0022b	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0022c	b8 01 00 00 00	 mov	 eax, 1
  00231	5b		 pop	 ebx

; 1406 : }

  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c2 20 00	 ret	 32			; 00000020H
$LN26@RunningSki:

; 1199 : 		break;
; 1200 : 	case AT_MSKILL_SUM_DRAINLIFE1:
; 1201 : 	case AT_MSKILL_SUM_DRAINLIFE2:
; 1202 : 		this->MLS_SkillDrainLife(lpObj->m_Index,aTargetIndex,lpMagic);

  00238	57		 push	 edi
  00239	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0023c	8b cb		 mov	 ecx, ebx
  0023e	ff 36		 push	 DWORD PTR [esi]
  00240	e8 00 00 00 00	 call	 ?MLS_SkillDrainLife@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillDrainLife
  00245	5f		 pop	 edi
  00246	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00247	b8 01 00 00 00	 mov	 eax, 1
  0024c	5b		 pop	 ebx

; 1406 : }

  0024d	8b e5		 mov	 esp, ebp
  0024f	5d		 pop	 ebp
  00250	c2 20 00	 ret	 32			; 00000020H
$LN27@RunningSki:

; 1203 : 		break;
; 1204 : 	case 326:
; 1205 : 		this->MLS_SkillSword4(lpObj,lpMagic,aTargetIndex,0);

  00253	6a 00		 push	 0
  00255	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00258	8b cb		 mov	 ecx, ebx
  0025a	57		 push	 edi
  0025b	56		 push	 esi
  0025c	e8 00 00 00 00	 call	 ?MLS_SkillSword4@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00263	b8 01 00 00 00	 mov	 eax, 1
  00268	5b		 pop	 ebx

; 1406 : }

  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c2 20 00	 ret	 32			; 00000020H
$LN28@RunningSki:

; 1206 : 		break;
; 1207 : 	case 479:
; 1208 : 		this->MLS_SkillSword4_Magumsa(lpObj,lpMagic,aTargetIndex,0);

  0026f	6a 00		 push	 0
  00271	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00274	8b cb		 mov	 ecx, ebx
  00276	57		 push	 edi
  00277	56		 push	 esi
  00278	e8 00 00 00 00	 call	 ?MLS_SkillSword4_Magumsa@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword4_Magumsa
  0027d	5f		 pop	 edi
  0027e	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0027f	b8 01 00 00 00	 mov	 eax, 1
  00284	5b		 pop	 ebx

; 1406 : }

  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c2 20 00	 ret	 32			; 00000020H
$LN29@RunningSki:

; 1209 : 		break;
; 1210 : 	case 327:
; 1211 : 		this->MLS_SkillSword5(lpObj,lpMagic,aTargetIndex,0);

  0028b	6a 00		 push	 0
  0028d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00290	8b cb		 mov	 ecx, ebx
  00292	57		 push	 edi
  00293	56		 push	 esi
  00294	e8 00 00 00 00	 call	 ?MLS_SkillSword5@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword5
  00299	5f		 pop	 edi
  0029a	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0029b	b8 01 00 00 00	 mov	 eax, 1
  002a0	5b		 pop	 ebx

; 1406 : }

  002a1	8b e5		 mov	 esp, ebp
  002a3	5d		 pop	 ebp
  002a4	c2 20 00	 ret	 32			; 00000020H
$LN30@RunningSki:

; 1212 : 		break;
; 1213 : 	case 328:
; 1214 : 		this->MLS_SkillSword1(lpObj,lpMagic,aTargetIndex,0);

  002a7	6a 00		 push	 0
  002a9	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  002ac	8b cb		 mov	 ecx, ebx
  002ae	57		 push	 edi
  002af	56		 push	 esi
  002b0	e8 00 00 00 00	 call	 ?MLS_SkillSword1@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword1
  002b5	5f		 pop	 edi
  002b6	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  002b7	b8 01 00 00 00	 mov	 eax, 1
  002bc	5b		 pop	 ebx

; 1406 : }

  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c2 20 00	 ret	 32			; 00000020H
$LN31@RunningSki:

; 1215 : 		break;
; 1216 : 	case 329:
; 1217 : 		this->MLS_SkillSword2(lpObj,lpMagic,aTargetIndex,0);

  002c3	6a 00		 push	 0
  002c5	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  002c8	8b cb		 mov	 ecx, ebx
  002ca	57		 push	 edi
  002cb	56		 push	 esi
  002cc	e8 00 00 00 00	 call	 ?MLS_SkillSword2@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@HH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSword2
  002d1	5f		 pop	 edi
  002d2	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  002d3	b8 01 00 00 00	 mov	 eax, 1
  002d8	5b		 pop	 ebx

; 1406 : }

  002d9	8b e5		 mov	 esp, ebp
  002db	5d		 pop	 ebp
  002dc	c2 20 00	 ret	 32			; 00000020H
$LN32@RunningSki:

; 1218 : 		break;
; 1219 : 	case AT_MSKILL_DK_DESTRUCTION1:
; 1220 : 	case AT_MSKILL_DK_DESTRUCTION2:
; 1221 : 	case AT_MSKILL_DK_DESTRUCTION3:
; 1222 : 		this->MLS_SkillStrengthenDesruction(lpObj,lpMagic,x,y,aTargetIndex,0);

  002df	6a 00		 push	 0
  002e1	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  002e4	8b cb		 mov	 ecx, ebx
  002e6	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  002e9	ff 75 18	 push	 DWORD PTR _x$[ebp]
  002ec	57		 push	 edi
  002ed	56		 push	 esi
  002ee	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDesruction@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@EEHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDesruction
  002f3	5f		 pop	 edi
  002f4	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  002f5	b8 01 00 00 00	 mov	 eax, 1
  002fa	5b		 pop	 ebx

; 1406 : }

  002fb	8b e5		 mov	 esp, ebp
  002fd	5d		 pop	 ebp
  002fe	c2 20 00	 ret	 32			; 00000020H
$LN33@RunningSki:

; 1223 : 		break;
; 1224 : 	case 380:
; 1225 : 		this->MLS_SkillStrengthenMagicPower(lpObj,lpMagic,aTargetIndex);

  00301	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00304	8b cb		 mov	 ecx, ebx
  00306	57		 push	 edi
  00307	56		 push	 esi
  00308	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenMagicPower
  0030d	5f		 pop	 edi
  0030e	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0030f	b8 01 00 00 00	 mov	 eax, 1
  00314	5b		 pop	 ebx

; 1406 : }

  00315	8b e5		 mov	 esp, ebp
  00317	5d		 pop	 ebp
  00318	c2 20 00	 ret	 32			; 00000020H
$LN34@RunningSki:

; 1226 : 		break;
; 1227 : 	case 383:
; 1228 : 		this->MLS_SkillSkillfulMagicPower(lpObj,lpMagic,aTargetIndex);

  0031b	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0031e	8b cb		 mov	 ecx, ebx
  00320	57		 push	 edi
  00321	56		 push	 esi
  00322	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulMagicPower@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulMagicPower
  00327	5f		 pop	 edi
  00328	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00329	b8 01 00 00 00	 mov	 eax, 1
  0032e	5b		 pop	 ebx

; 1406 : }

  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c2 20 00	 ret	 32			; 00000020H
$LN35@RunningSki:

; 1229 : 		break;
; 1230 : 	case 379:
; 1231 : 	case 480:
; 1232 : 		this->MLS_SkillStrengthenThunder(lpObj,lpMagic,aTargetIndex);

  00335	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00338	8b cb		 mov	 ecx, ebx
  0033a	57		 push	 edi
  0033b	56		 push	 esi
  0033c	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenThunder@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenThunder
  00341	5f		 pop	 edi
  00342	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00343	b8 01 00 00 00	 mov	 eax, 1
  00348	5b		 pop	 ebx

; 1406 : }

  00349	8b e5		 mov	 esp, ebp
  0034b	5d		 pop	 ebp
  0034c	c2 20 00	 ret	 32			; 00000020H
$LN36@RunningSki:

; 1233 : 		break;
; 1234 : 	case 384:
; 1235 : 		this->MLS_SkillStrengthenPoison(lpObj,lpMagic,aTargetIndex);

  0034f	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00352	8b cb		 mov	 ecx, ebx
  00354	57		 push	 edi
  00355	56		 push	 esi
  00356	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenPoison@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenPoison
  0035b	5f		 pop	 edi
  0035c	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0035d	b8 01 00 00 00	 mov	 eax, 1
  00362	5b		 pop	 ebx

; 1406 : }

  00363	8b e5		 mov	 esp, ebp
  00365	5d		 pop	 ebp
  00366	c2 20 00	 ret	 32			; 00000020H
$LN37@RunningSki:

; 1236 : 		break;
; 1237 : 	case 387:
; 1238 : 		this->MLS_SkillStrengthenExPoison(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  00369	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0036c	8b cb		 mov	 ecx, ebx
  0036e	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00371	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00374	57		 push	 edi
  00375	ff 36		 push	 DWORD PTR [esi]
  00377	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenExPoison@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenExPoison
  0037c	5f		 pop	 edi
  0037d	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0037e	b8 01 00 00 00	 mov	 eax, 1
  00383	5b		 pop	 ebx

; 1406 : }

  00384	8b e5		 mov	 esp, ebp
  00386	5d		 pop	 ebp
  00387	c2 20 00	 ret	 32			; 00000020H
$LN38@RunningSki:

; 1239 : 		break;
; 1240 : 	case 389:
; 1241 : 	case 489:
; 1242 : 	case AT_MSKILL_MG_ICE2:
; 1243 : 		this->MLS_SkillStrengthenIce(lpObj,lpMagic,aTargetIndex);

  0038a	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0038d	8b cb		 mov	 ecx, ebx
  0038f	57		 push	 edi
  00390	56		 push	 esi
  00391	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenIce@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenIce
  00396	5f		 pop	 edi
  00397	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00398	b8 01 00 00 00	 mov	 eax, 1
  0039d	5b		 pop	 ebx

; 1406 : }

  0039e	8b e5		 mov	 esp, ebp
  003a0	5d		 pop	 ebp
  003a1	c2 20 00	 ret	 32			; 00000020H
$LN39@RunningSki:

; 1244 : 		break;
; 1245 : 	case AT_MSKILL_DW_MANASHIELD2:
; 1246 : 		this->MLS_SkillWizardMagicDefense(lpObj,lpMagic,aTargetIndex);

  003a4	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  003a7	8b cb		 mov	 ecx, ebx
  003a9	57		 push	 edi
  003aa	56		 push	 esi
  003ab	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefense@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefense
  003b0	5f		 pop	 edi
  003b1	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  003b2	b8 01 00 00 00	 mov	 eax, 1
  003b7	5b		 pop	 ebx

; 1406 : }

  003b8	8b e5		 mov	 esp, ebp
  003ba	5d		 pop	 ebp
  003bb	c2 20 00	 ret	 32			; 00000020H
$LN40@RunningSki:

; 1247 : 		break;
; 1248 : 	case 422:
; 1249 : 		this->MLS_SkillStrengthenAttack(lpObj->m_Index,aTargetIndex,lpMagic);

  003be	57		 push	 edi
  003bf	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  003c2	8b cb		 mov	 ecx, ebx
  003c4	ff 36		 push	 DWORD PTR [esi]
  003c6	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenAttack@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenAttack
  003cb	5f		 pop	 edi
  003cc	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  003cd	b8 01 00 00 00	 mov	 eax, 1
  003d2	5b		 pop	 ebx

; 1406 : }

  003d3	8b e5		 mov	 esp, ebp
  003d5	5d		 pop	 ebp
  003d6	c2 20 00	 ret	 32			; 00000020H
$LN41@RunningSki:

; 1250 : 		break;
; 1251 : 	case 423:
; 1252 : 		this->MLS_SkillStrengthenDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  003d9	57		 push	 edi
  003da	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  003dd	8b cb		 mov	 ecx, ebx
  003df	ff 36		 push	 DWORD PTR [esi]
  003e1	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenDefense
  003e6	5f		 pop	 edi
  003e7	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  003e8	b8 01 00 00 00	 mov	 eax, 1
  003ed	5b		 pop	 ebx

; 1406 : }

  003ee	8b e5		 mov	 esp, ebp
  003f0	5d		 pop	 ebp
  003f1	c2 20 00	 ret	 32			; 00000020H
$LN42@RunningSki:

; 1253 : 		break;
; 1254 : 	case 441:
; 1255 : 		this->MLS_SkillInfinityArrow(lpObj->m_Index,aTargetIndex,lpMagic);

  003f4	57		 push	 edi
  003f5	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  003f8	8b cb		 mov	 ecx, ebx
  003fa	ff 36		 push	 DWORD PTR [esi]
  003fc	e8 00 00 00 00	 call	 ?MLS_SkillInfinityArrow@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInfinityArrow
  00401	5f		 pop	 edi
  00402	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00403	b8 01 00 00 00	 mov	 eax, 1
  00408	5b		 pop	 ebx

; 1406 : }

  00409	8b e5		 mov	 esp, ebp
  0040b	5d		 pop	 ebp
  0040c	c2 20 00	 ret	 32			; 00000020H
$LN43@RunningSki:

; 1256 : 		break;
; 1257 : 	case 469:
; 1258 : 		this->MLS_SkillStrengthenBerserker(lpObj->m_Index,lpMagic);

  0040f	57		 push	 edi
  00410	ff 36		 push	 DWORD PTR [esi]
  00412	8b cb		 mov	 ecx, ebx
  00414	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenBerserker
  00419	5f		 pop	 edi
  0041a	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0041b	b8 01 00 00 00	 mov	 eax, 1
  00420	5b		 pop	 ebx

; 1406 : }

  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c2 20 00	 ret	 32			; 00000020H
$LN44@RunningSki:

; 1259 : 		break;
; 1260 : 	case 470:
; 1261 : 		this->MLS_SkillSkillfulBerserker(lpObj->m_Index,lpMagic);

  00427	57		 push	 edi
  00428	ff 36		 push	 DWORD PTR [esi]
  0042a	8b cb		 mov	 ecx, ebx
  0042c	e8 00 00 00 00	 call	 ?MLS_SkillSkillfulBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillfulBerserker
  00431	5f		 pop	 edi
  00432	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00433	b8 01 00 00 00	 mov	 eax, 1
  00438	5b		 pop	 ebx

; 1406 : }

  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c2 20 00	 ret	 32			; 00000020H
$LN45@RunningSki:

; 1262 : 		break;
; 1263 : 	case 472:
; 1264 : 		this->MLS_SkillMasteryBerserker(lpObj->m_Index,lpMagic);

  0043f	57		 push	 edi
  00440	ff 36		 push	 DWORD PTR [esi]
  00442	8b cb		 mov	 ecx, ebx
  00444	e8 00 00 00 00	 call	 ?MLS_SkillMasteryBerserker@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryBerserker
  00449	5f		 pop	 edi
  0044a	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0044b	b8 01 00 00 00	 mov	 eax, 1
  00450	5b		 pop	 ebx

; 1406 : }

  00451	8b e5		 mov	 esp, ebp
  00453	5d		 pop	 ebp
  00454	c2 20 00	 ret	 32			; 00000020H
$LN46@RunningSki:

; 1265 : 		break;
; 1266 : 	case 511:
; 1267 : 		this->MLS_SkillStrendthenAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00457	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0045b	8b cb		 mov	 ecx, ebx
  0045d	57		 push	 edi
  0045e	50		 push	 eax
  0045f	ff 36		 push	 DWORD PTR [esi]
  00461	e8 00 00 00 00	 call	 ?MLS_SkillStrendthenAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrendthenAddCriticalDamage
  00466	5f		 pop	 edi
  00467	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00468	b8 01 00 00 00	 mov	 eax, 1
  0046d	5b		 pop	 ebx

; 1406 : }

  0046e	8b e5		 mov	 esp, ebp
  00470	5d		 pop	 ebp
  00471	c2 20 00	 ret	 32			; 00000020H
$LN47@RunningSki:

; 1268 : 		break;
; 1269 : 	case 515:
; 1270 : 		this->MLS_SkillSkillFulAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00474	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00478	8b cb		 mov	 ecx, ebx
  0047a	57		 push	 edi
  0047b	50		 push	 eax
  0047c	ff 36		 push	 DWORD PTR [esi]
  0047e	e8 00 00 00 00	 call	 ?MLS_SkillSkillFulAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillSkillFulAddCriticalDamage
  00483	5f		 pop	 edi
  00484	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00485	b8 01 00 00 00	 mov	 eax, 1
  0048a	5b		 pop	 ebx

; 1406 : }

  0048b	8b e5		 mov	 esp, ebp
  0048d	5d		 pop	 ebp
  0048e	c2 20 00	 ret	 32			; 00000020H
$LN48@RunningSki:

; 1271 : 		break;
; 1272 : 	case 517:
; 1273 : 		this->MLS_SkillMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  00491	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00495	8b cb		 mov	 ecx, ebx
  00497	57		 push	 edi
  00498	50		 push	 eax
  00499	ff 36		 push	 DWORD PTR [esi]
  0049b	e8 00 00 00 00	 call	 ?MLS_SkillMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMasteryAddCriticalDamage
  004a0	5f		 pop	 edi
  004a1	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  004a2	b8 01 00 00 00	 mov	 eax, 1
  004a7	5b		 pop	 ebx

; 1406 : }

  004a8	8b e5		 mov	 esp, ebp
  004aa	5d		 pop	 ebp
  004ab	c2 20 00	 ret	 32			; 00000020H
$LN49@RunningSki:

; 1274 : 		break;
; 1275 : 	case AT_MSKILL_DL_CRITICALDAMAGE4:
; 1276 : 		this->MLS_SkillFulMasteryAddCriticalDamage(lpObj->m_Index,lpMagic->m_Level,lpMagic);

  004ae	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  004b2	8b cb		 mov	 ecx, ebx
  004b4	57		 push	 edi
  004b5	50		 push	 eax
  004b6	ff 36		 push	 DWORD PTR [esi]
  004b8	e8 00 00 00 00	 call	 ?MLS_SkillFulMasteryAddCriticalDamage@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFulMasteryAddCriticalDamage
  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  004bf	b8 01 00 00 00	 mov	 eax, 1
  004c4	5b		 pop	 ebx

; 1406 : }

  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	c2 20 00	 ret	 32			; 00000020H
$LN50@RunningSki:

; 1277 : 		break;
; 1278 : 	case 509:
; 1279 : 		this->MLS_SkillStrengthenSpear(lpObj->m_Index,aTargetIndex,lpMagic);

  004cb	57		 push	 edi
  004cc	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  004cf	8b cb		 mov	 ecx, ebx
  004d1	ff 36		 push	 DWORD PTR [esi]
  004d3	e8 00 00 00 00	 call	 ?MLS_SkillStrengthenSpear@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillStrengthenSpear
  004d8	5f		 pop	 edi
  004d9	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  004da	b8 01 00 00 00	 mov	 eax, 1
  004df	5b		 pop	 ebx

; 1406 : }

  004e0	8b e5		 mov	 esp, ebp
  004e2	5d		 pop	 ebp
  004e3	c2 20 00	 ret	 32			; 00000020H
$LN51@RunningSki:

; 1280 : 		break;
; 1281 : 	case 424:
; 1282 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);

  004e6	6a 00		 push	 0
  004e8	6a 00		 push	 0
  004ea	6a 00		 push	 0
  004ec	6a 00		 push	 0
  004ee	6a 00		 push	 0
  004f0	6a 01		 push	 1
  004f2	57		 push	 edi
  004f3	ff 75 08	 push	 DWORD PTR _lpTargetObj$1$[ebp]
  004f6	56		 push	 esi
  004f7	e8 00 00 00 00	 call	 ?gObjAttack@@YAXPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; gObjAttack
  004fc	83 c4 24	 add	 esp, 36			; 00000024H

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  004ff	b8 01 00 00 00	 mov	 eax, 1
  00504	5f		 pop	 edi
  00505	5e		 pop	 esi
  00506	5b		 pop	 ebx

; 1406 : }

  00507	8b e5		 mov	 esp, ebp
  00509	5d		 pop	 ebp
  0050a	c2 20 00	 ret	 32			; 00000020H
$LN52@RunningSki:

; 1283 : 		break;
; 1284 : 	case AT_MSKILL_RF_KILLBLOW1:
; 1285 : 	case AT_MSKILL_RF_UPERCUT1:
; 1286 : 	case AT_MSKILL_RF_CHAINDRIVE1:
; 1287 : 	case AT_MSKILL_RF_CHAINDRIVE2:
; 1288 : 		this->MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,aTargetIndex);

  0050d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00510	8b cb		 mov	 ecx, ebx
  00512	57		 push	 edi
  00513	ff 36		 push	 DWORD PTR [esi]
  00515	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
  0051a	5f		 pop	 edi
  0051b	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0051c	b8 01 00 00 00	 mov	 eax, 1
  00521	5b		 pop	 ebx

; 1406 : }

  00522	8b e5		 mov	 esp, ebp
  00524	5d		 pop	 ebp
  00525	c2 20 00	 ret	 32			; 00000020H
$LN53@RunningSki:

; 1289 : 		break;
; 1290 : 	case AT_MSKILL_RF_KILLBLOW2:
; 1291 : 	case AT_MSKILL_RF_UPERCUT2:
; 1292 : 		this->MLS_SkillMonkBarrageJustOneTargetMastery(lpObj->m_Index,lpMagic,aTargetIndex);

  00528	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0052b	8b cb		 mov	 ecx, ebx
  0052d	57		 push	 edi
  0052e	ff 36		 push	 DWORD PTR [esi]
  00530	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTargetMastery@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTargetMastery
  00535	5f		 pop	 edi
  00536	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00537	b8 01 00 00 00	 mov	 eax, 1
  0053c	5b		 pop	 ebx

; 1406 : }

  0053d	8b e5		 mov	 esp, ebp
  0053f	5d		 pop	 ebp
  00540	c2 20 00	 ret	 32			; 00000020H
$LN54@RunningSki:

; 1293 : 		break;
; 1294 : 	case AT_MSKILL_RF_DARKSIDE1:
; 1295 : 	case AT_MSKILL_RF_DARKSIDE2:
; 1296 : 		{
; 1297 : 			PMSG_MONK_DARKSIDE_RECV pMsg = {0};
; 1298 : 			pMsg.NumberH = SET_NUMBERH(aTargetIndex);

  00543	8b 4d 0c	 mov	 ecx, DWORD PTR _aTargetIndex$[ebp]
  00546	33 c0		 xor	 eax, eax

; 1299 : 			pMsg.NumberL = SET_NUMBERL(aTargetIndex);
; 1300 : 
; 1301 : 			pMsg.MagicNumberH = SET_NUMBERH(lpMagic->m_Skill);
; 1302 : 			pMsg.MagicNumberL = SET_NUMBERL(lpMagic->m_Skill);
; 1303 : 
; 1304 : 			GCMonkDarkSideTargetSelect(&pMsg,lpObj->m_Index);

  00548	ff 36		 push	 DWORD PTR [esi]
  0054a	89 45 f9	 mov	 DWORD PTR _pMsg$1[ebp+1], eax
  0054d	66 89 45 fd	 mov	 WORD PTR _pMsg$1[ebp+5], ax
  00551	8b c1		 mov	 eax, ecx
  00553	c1 e8 08	 shr	 eax, 8
  00556	88 45 fd	 mov	 BYTE PTR _pMsg$1[ebp+5], al
  00559	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0055c	c1 e8 08	 shr	 eax, 8
  0055f	88 45 fb	 mov	 BYTE PTR _pMsg$1[ebp+3], al
  00562	8a 47 08	 mov	 al, BYTE PTR [edi+8]
  00565	88 45 fc	 mov	 BYTE PTR _pMsg$1[ebp+4], al
  00568	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0056b	50		 push	 eax
  0056c	c6 45 f8 00	 mov	 BYTE PTR _pMsg$1[ebp], 0
  00570	88 4d fe	 mov	 BYTE PTR _pMsg$1[ebp+6], cl
  00573	e8 00 00 00 00	 call	 ?GCMonkDarkSideTargetSelect@@YAXPAUPMSG_MONK_DARKSIDE_RECV@@H@Z ; GCMonkDarkSideTargetSelect
  00578	83 c4 08	 add	 esp, 8

; 1305 : 
; 1306 : 			if( lpObj->m_btDarkSideTargetCount )

  0057b	80 be c0 26 00
	00 00		 cmp	 BYTE PTR [esi+9920], 0
  00582	0f 84 0c 03 00
	00		 je	 $LN2@RunningSki

; 1307 : 			{
; 1308 : 				for(int i = 0; i < 5; i++)

  00588	8d 86 c2 26 00
	00		 lea	 eax, DWORD PTR [esi+9922]
  0058e	c7 45 18 10 27
	00 00		 mov	 DWORD PTR tv646[ebp], 10000 ; 00002710H
  00595	ba 05 00 00 00	 mov	 edx, 5
  0059a	89 45 0c	 mov	 DWORD PTR tv692[ebp], eax
  0059d	89 55 1c	 mov	 DWORD PTR tv699[ebp], edx
$LL6@RunningSki:

; 1309 : 				{
; 1310 : 					if( lpObj->m_wDarkSideTarget[i] != 10000 )

  005a0	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  005a3	66 3b 4d 18	 cmp	 cx, WORD PTR tv646[ebp]
  005a7	74 14		 je	 SHORT $LN4@RunningSki

; 1311 : 						MLS_SkillMonkBarrageJustOneTarget(lpObj->m_Index,lpMagic,lpObj->m_wDarkSideTarget[i]);

  005a9	0f bf c1	 movsx	 eax, cx
  005ac	8b cb		 mov	 ecx, ebx
  005ae	50		 push	 eax
  005af	57		 push	 edi
  005b0	ff 36		 push	 DWORD PTR [esi]
  005b2	e8 00 00 00 00	 call	 ?MLS_SkillMonkBarrageJustOneTarget@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBarrageJustOneTarget
  005b7	8b 45 0c	 mov	 eax, DWORD PTR tv692[ebp]
  005ba	8b 55 1c	 mov	 edx, DWORD PTR tv699[ebp]
$LN4@RunningSki:

; 1307 : 			{
; 1308 : 				for(int i = 0; i < 5; i++)

  005bd	83 c0 02	 add	 eax, 2
  005c0	83 ea 01	 sub	 edx, 1
  005c3	89 45 0c	 mov	 DWORD PTR tv692[ebp], eax
  005c6	89 55 1c	 mov	 DWORD PTR tv699[ebp], edx
  005c9	75 d5		 jne	 SHORT $LL6@RunningSki

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  005cb	5f		 pop	 edi
  005cc	5e		 pop	 esi
  005cd	b8 01 00 00 00	 mov	 eax, 1
  005d2	5b		 pop	 ebx

; 1406 : }

  005d3	8b e5		 mov	 esp, ebp
  005d5	5d		 pop	 ebp
  005d6	c2 20 00	 ret	 32			; 00000020H
$LN57@RunningSki:

; 1312 : 				}
; 1313 : 			}
; 1314 : 		}
; 1315 : 		break;
; 1316 : 	case AT_MSKILL_RF_DRAGONRORE1:
; 1317 : 	case AT_MSKILL_RF_DRAGONRORE2:
; 1318 : 		{
; 1319 : 			if( !OBJMAX_RANGE(aTargetIndex) )

  005d9	8b 55 0c	 mov	 edx, DWORD PTR _aTargetIndex$[ebp]
  005dc	85 d2		 test	 edx, edx
  005de	78 49		 js	 SHORT $LN87@RunningSki
  005e0	33 c0		 xor	 eax, eax
  005e2	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  005e8	0f 9e c0	 setle	 al
  005eb	85 c0		 test	 eax, eax
  005ed	74 3a		 je	 SHORT $LN87@RunningSki

; 1322 : 					lpObj->m_Index,lpObj->AccountID);
; 1323 : 				break;
; 1324 : 			}
; 1325 : 
; 1326 : 			this->MLS_SkillAreaMonsterAttack(lpObj->m_Index,lpMagic,gObj[aTargetIndex].X,gObj[aTargetIndex].Y,aTargetIndex,3,1,0,0);

  005ef	8b 4d 10	 mov	 ecx, DWORD PTR tv698[ebp]
  005f2	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005f8	6a 00		 push	 0
  005fa	6a 00		 push	 0
  005fc	6a 01		 push	 1
  005fe	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00605	6a 03		 push	 3
  00607	52		 push	 edx
  00608	50		 push	 eax
  00609	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00610	8b cb		 mov	 ecx, ebx
  00612	50		 push	 eax
  00613	57		 push	 edi
  00614	ff 36		 push	 DWORD PTR [esi]
  00616	e8 00 00 00 00	 call	 ?MLS_SkillAreaMonsterAttack@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEHHHHH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillAreaMonsterAttack
  0061b	5f		 pop	 edi
  0061c	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0061d	b8 01 00 00 00	 mov	 eax, 1
  00622	5b		 pop	 ebx

; 1406 : }

  00623	8b e5		 mov	 esp, ebp
  00625	5d		 pop	 ebp
  00626	c2 20 00	 ret	 32			; 00000020H
$LN87@RunningSki:

; 1320 : 			{
; 1321 : 				LogAddTD("[InvalidTargetIndex][CMasterLevelSkillTreeSystem::RunningSkill_MLS][AT_MSKILL_RF_DRAGONRORE1] Index :%d , AccountID : %s ",

  00629	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0062c	50		 push	 eax
  0062d	ff 36		 push	 DWORD PTR [esi]
  0062f	68 00 00 00 00	 push	 OFFSET ??_C@_0HK@DAPGGDKB@?$FLInvalidTargetIndex?$FN?$FLCMasterLeve@
  00634	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0063a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0063d	b8 01 00 00 00	 mov	 eax, 1
  00642	5f		 pop	 edi
  00643	5e		 pop	 esi
  00644	5b		 pop	 ebx

; 1406 : }

  00645	8b e5		 mov	 esp, ebp
  00647	5d		 pop	 ebp
  00648	c2 20 00	 ret	 32			; 00000020H
$LN59@RunningSki:

; 1327 : 		}
; 1328 : 		break;
; 1329 : 	case AT_MSKILL_RF_DEFRATE1:
; 1330 : 	case AT_MSKILL_RF_FITNESS1:
; 1331 : 		MLS_SkillMonkBuffApplyParty(lpObj->m_Index,lpMagic);

  0064b	57		 push	 edi
  0064c	ff 36		 push	 DWORD PTR [esi]
  0064e	8b cb		 mov	 ecx, ebx
  00650	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyParty@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyParty
  00655	5f		 pop	 edi
  00656	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00657	b8 01 00 00 00	 mov	 eax, 1
  0065c	5b		 pop	 ebx

; 1406 : }

  0065d	8b e5		 mov	 esp, ebp
  0065f	5d		 pop	 ebp
  00660	c2 20 00	 ret	 32			; 00000020H
$LN60@RunningSki:

; 1332 : 		break;
; 1333 : 	case AT_MSKILL_RF_DEFRATE2:
; 1334 : 		MLS_SkillMonkBuffApplyPartyMastery(lpObj->m_Index,lpMagic);

  00663	57		 push	 edi
  00664	ff 36		 push	 DWORD PTR [esi]
  00666	8b cb		 mov	 ecx, ebx
  00668	e8 00 00 00 00	 call	 ?MLS_SkillMonkBuffApplyPartyMastery@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMonkBuffApplyPartyMastery
  0066d	5f		 pop	 edi
  0066e	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0066f	b8 01 00 00 00	 mov	 eax, 1
  00674	5b		 pop	 ebx

; 1406 : }

  00675	8b e5		 mov	 esp, ebp
  00677	5d		 pop	 ebp
  00678	c2 20 00	 ret	 32			; 00000020H
$LN61@RunningSki:

; 1335 : 		break;
; 1336 : 	case AT_MSKILL_DK_BLOODSTORM:
; 1337 : 	case AT_MSKILL_DK_BLOODSTORM1:
; 1338 : 		gObjUseSkill.SkillBloodStorm(lpObj->m_Index,aTargetIndex,lpMagic,bCombo);

  0067b	ff 75 14	 push	 DWORD PTR _bCombo$[ebp]
  0067e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  00683	57		 push	 edi
  00684	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00687	ff 36		 push	 DWORD PTR [esi]
  00689	e8 00 00 00 00	 call	 ?SkillBloodStorm@CObjUseSkill@@QAEXHHPAVCMagicInf@@H@Z ; CObjUseSkill::SkillBloodStorm
  0068e	5f		 pop	 edi
  0068f	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00690	b8 01 00 00 00	 mov	 eax, 1
  00695	5b		 pop	 ebx

; 1406 : }

  00696	8b e5		 mov	 esp, ebp
  00698	5d		 pop	 ebp
  00699	c2 20 00	 ret	 32			; 00000020H
$LN62@RunningSki:

; 1339 : 		break;
; 1340 : 	case AT_MSKILL_DW_METEORIT1:
; 1341 : 	case AT_MSKILL_DW_METEORIT2:
; 1342 : 		this->MLS_SkillMeteorit(lpObj,aTargetIndex,lpMagic);

  0069c	57		 push	 edi
  0069d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  006a0	8b cb		 mov	 ecx, ebx
  006a2	56		 push	 esi
  006a3	e8 00 00 00 00	 call	 ?MLS_SkillMeteorit@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMeteorit
  006a8	5f		 pop	 edi
  006a9	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  006aa	b8 01 00 00 00	 mov	 eax, 1
  006af	5b		 pop	 ebx

; 1406 : }

  006b0	8b e5		 mov	 esp, ebp
  006b2	5d		 pop	 ebp
  006b3	c2 20 00	 ret	 32			; 00000020H
$LN63@RunningSki:

; 1343 : 		break;
; 1344 : 	case AT_MSKILL_DW_NOVA1:
; 1345 : 		this->MLS_SkillHellFire2(lpObj->m_Index,aTargetIndex,lpMagic);

  006b6	57		 push	 edi
  006b7	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  006ba	8b cb		 mov	 ecx, ebx
  006bc	ff 36		 push	 DWORD PTR [esi]
  006be	e8 00 00 00 00	 call	 ?MLS_SkillHellFire2@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillHellFire2
  006c3	5f		 pop	 edi
  006c4	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  006c5	b8 01 00 00 00	 mov	 eax, 1
  006ca	5b		 pop	 ebx

; 1406 : }

  006cb	8b e5		 mov	 esp, ebp
  006cd	5d		 pop	 ebp
  006ce	c2 20 00	 ret	 32			; 00000020H
$LN64@RunningSki:

; 1346 : 		break;
; 1347 : 	case AT_MSKILL_DW_EARTHPRISON:
; 1348 : 	case AT_MSKILL_DW_EARTHPRISON1:
; 1349 : 		this->MLS_SkillEarthPrison(lpObj->m_Index,aTargetIndex,lpMagic);

  006d1	57		 push	 edi
  006d2	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  006d5	8b cb		 mov	 ecx, ebx
  006d7	ff 36		 push	 DWORD PTR [esi]
  006d9	e8 00 00 00 00	 call	 ?MLS_SkillEarthPrison@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillEarthPrison
  006de	5f		 pop	 edi
  006df	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  006e0	b8 01 00 00 00	 mov	 eax, 1
  006e5	5b		 pop	 ebx

; 1406 : }

  006e6	8b e5		 mov	 esp, ebp
  006e8	5d		 pop	 ebp
  006e9	c2 20 00	 ret	 32			; 00000020H
$LN65@RunningSki:

; 1350 : 		break;
; 1351 : 	case AT_MSKILL_DW_MANASHIELD3:
; 1352 : 		this->MLS_SkillWizardMagicDefenseMastery(lpObj,lpMagic,aTargetIndex);

  006ec	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  006ef	8b cb		 mov	 ecx, ebx
  006f1	57		 push	 edi
  006f2	56		 push	 esi
  006f3	e8 00 00 00 00	 call	 ?MLS_SkillWizardMagicDefenseMastery@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@PAVCMagicInf@@H@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWizardMagicDefenseMastery
  006f8	5f		 pop	 edi
  006f9	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  006fa	b8 01 00 00 00	 mov	 eax, 1
  006ff	5b		 pop	 ebx

; 1406 : }

  00700	8b e5		 mov	 esp, ebp
  00702	5d		 pop	 ebp
  00703	c2 20 00	 ret	 32			; 00000020H
$LN66@RunningSki:

; 1353 : 		break;
; 1354 : 	case AT_MSKILL_FE_CURE:
; 1355 : 		this->MLS_SkillCure(lpObj->m_Index,aTargetIndex,lpMagic);

  00706	57		 push	 edi
  00707	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0070a	8b cb		 mov	 ecx, ebx
  0070c	ff 36		 push	 DWORD PTR [esi]
  0070e	e8 00 00 00 00	 call	 ?MLS_SkillCure@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillCure
  00713	5f		 pop	 edi
  00714	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00715	b8 01 00 00 00	 mov	 eax, 1
  0071a	5b		 pop	 ebx

; 1406 : }

  0071b	8b e5		 mov	 esp, ebp
  0071d	5d		 pop	 ebp
  0071e	c2 20 00	 ret	 32			; 00000020H
$LN67@RunningSki:

; 1356 : 		break;
; 1357 : 	case AT_MSKILL_FE_MULTISHOT1:
; 1358 : 	case AT_MSKILL_FE_MULTISHOT2:
; 1359 : 		this->MLS_SkillMultiShot(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  00721	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00724	8b cb		 mov	 ecx, ebx
  00726	ff 75 24	 push	 DWORD PTR _aTargetPos$[ebp]
  00729	57		 push	 edi
  0072a	ff 36		 push	 DWORD PTR [esi]
  0072c	e8 00 00 00 00	 call	 ?MLS_SkillMultiShot@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillMultiShot
  00731	5f		 pop	 edi
  00732	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00733	b8 01 00 00 00	 mov	 eax, 1
  00738	5b		 pop	 ebx

; 1406 : }

  00739	8b e5		 mov	 esp, ebp
  0073b	5d		 pop	 ebp
  0073c	c2 20 00	 ret	 32			; 00000020H
$LN68@RunningSki:

; 1360 : 		break;
; 1361 : 	case AT_MSKILL_FE_SUMMONSATYROS:
; 1362 : 		gObjUseSkill.SkillMonsterCall(lpObj->m_Index,597,lpObj->X-1,lpObj->Y+1);

  0073f	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  00746	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0074b	40		 inc	 eax
  0074c	50		 push	 eax
  0074d	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00754	48		 dec	 eax
  00755	50		 push	 eax
  00756	68 55 02 00 00	 push	 597			; 00000255H
  0075b	ff 36		 push	 DWORD PTR [esi]
  0075d	e8 00 00 00 00	 call	 ?SkillMonsterCall@CObjUseSkill@@QAEHHHHH@Z ; CObjUseSkill::SkillMonsterCall
  00762	5f		 pop	 edi
  00763	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00764	b8 01 00 00 00	 mov	 eax, 1
  00769	5b		 pop	 ebx

; 1406 : }

  0076a	8b e5		 mov	 esp, ebp
  0076c	5d		 pop	 ebp
  0076d	c2 20 00	 ret	 32			; 00000020H
$LN70@RunningSki:

; 1363 : 		break;
; 1364 : 	case AT_MSKILL_FE_POISONARROW:
; 1365 : 	case AT_MSKILL_FE_POISONARROW1:
; 1366 : 		gObjAttack(lpObj,lpTargetObj,lpMagic,TRUE,0,0,0,0,0);
; 1367 : 		break;
; 1368 : 	case AT_MSKILL_FE_BLESS:
; 1369 : 	case AT_MSKILL_FE_BLESS1:
; 1370 : 		this->MLS_SkillBless(lpObj->m_Index,aTargetIndex,lpMagic);

  00770	57		 push	 edi
  00771	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00774	8b cb		 mov	 ecx, ebx
  00776	ff 36		 push	 DWORD PTR [esi]
  00778	e8 00 00 00 00	 call	 ?MLS_SkillBless@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBless
  0077d	5f		 pop	 edi
  0077e	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0077f	b8 01 00 00 00	 mov	 eax, 1
  00784	5b		 pop	 ebx

; 1406 : }

  00785	8b e5		 mov	 esp, ebp
  00787	5d		 pop	 ebp
  00788	c2 20 00	 ret	 32			; 00000020H
$LN71@RunningSki:

; 1371 : 		break;
; 1372 : 	case AT_MSKILL_MG_GIGANTICSTORM1:
; 1373 : 		this->MLS_SkillGiganticStorm(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  0078b	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0078e	8b cb		 mov	 ecx, ebx
  00790	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00793	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00796	57		 push	 edi
  00797	ff 36		 push	 DWORD PTR [esi]
  00799	e8 00 00 00 00	 call	 ?MLS_SkillGiganticStorm@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillGiganticStorm
  0079e	5f		 pop	 edi
  0079f	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  007a0	b8 01 00 00 00	 mov	 eax, 1
  007a5	5b		 pop	 ebx

; 1406 : }

  007a6	8b e5		 mov	 esp, ebp
  007a8	5d		 pop	 ebp
  007a9	c2 20 00	 ret	 32			; 00000020H
$LN72@RunningSki:

; 1374 : 		break;
; 1375 : 	case AT_MSKILL_MG_FLAMESTRIKE1:
; 1376 : 	case AT_MSKILL_MG_FLAMESTRIKE2:
; 1377 : 		this->MLS_SkillFlameStrike(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  007ac	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  007af	8b cb		 mov	 ecx, ebx
  007b1	ff 75 24	 push	 DWORD PTR _aTargetPos$[ebp]
  007b4	57		 push	 edi
  007b5	ff 36		 push	 DWORD PTR [esi]
  007b7	e8 00 00 00 00	 call	 ?MLS_SkillFlameStrike@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillFlameStrike
  007bc	5f		 pop	 edi
  007bd	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  007be	b8 01 00 00 00	 mov	 eax, 1
  007c3	5b		 pop	 ebx

; 1406 : }

  007c4	8b e5		 mov	 esp, ebp
  007c6	5d		 pop	 ebp
  007c7	c2 20 00	 ret	 32			; 00000020H
$LN73@RunningSki:

; 1378 : 		break;
; 1379 : 	case AT_MSKILL_SUM_INNOVATION1:
; 1380 : 		this->MLS_SkillInnovation(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  007ca	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  007cd	8b cb		 mov	 ecx, ebx
  007cf	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  007d2	ff 75 18	 push	 DWORD PTR _x$[ebp]
  007d5	57		 push	 edi
  007d6	ff 36		 push	 DWORD PTR [esi]
  007d8	e8 00 00 00 00	 call	 ?MLS_SkillInnovation@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillInnovation
  007dd	5f		 pop	 edi
  007de	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  007df	b8 01 00 00 00	 mov	 eax, 1
  007e4	5b		 pop	 ebx

; 1406 : }

  007e5	8b e5		 mov	 esp, ebp
  007e7	5d		 pop	 ebp
  007e8	c2 20 00	 ret	 32			; 00000020H
$LN74@RunningSki:

; 1381 : 		break;
; 1382 : 	case AT_MSKILL_SUM_WEAKNESS1:
; 1383 : 		this->MLS_SkillWeakness(lpObj->m_Index,lpMagic,x,y,aTargetIndex);

  007eb	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  007ee	8b cb		 mov	 ecx, ebx
  007f0	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  007f3	ff 75 18	 push	 DWORD PTR _x$[ebp]
  007f6	57		 push	 edi
  007f7	ff 36		 push	 DWORD PTR [esi]
  007f9	e8 00 00 00 00	 call	 ?MLS_SkillWeakness@CMasterLevelSkillTreeSystem@@QAEHHPAVCMagicInf@@EEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillWeakness
  007fe	5f		 pop	 edi
  007ff	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00800	b8 01 00 00 00	 mov	 eax, 1
  00805	5b		 pop	 ebx

; 1406 : }

  00806	8b e5		 mov	 esp, ebp
  00808	5d		 pop	 ebp
  00809	c2 20 00	 ret	 32			; 00000020H
$LN75@RunningSki:

; 1384 : 		break;
; 1385 : 	case AT_MSKILL_SUM_BLIND:
; 1386 : 	case AT_MSKILL_SUM_BLIND1:
; 1387 : 		this->MLS_SkillBlind(lpObj->m_Index,aTargetIndex,lpMagic);

  0080c	57		 push	 edi
  0080d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00810	8b cb		 mov	 ecx, ebx
  00812	ff 36		 push	 DWORD PTR [esi]
  00814	e8 00 00 00 00	 call	 ?MLS_SkillBlind@CMasterLevelSkillTreeSystem@@QAEHHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillBlind
  00819	5f		 pop	 edi
  0081a	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0081b	b8 01 00 00 00	 mov	 eax, 1
  00820	5b		 pop	 ebx

; 1406 : }

  00821	8b e5		 mov	 esp, ebp
  00823	5d		 pop	 ebp
  00824	c2 20 00	 ret	 32			; 00000020H
$LN76@RunningSki:

; 1388 : 		break;
; 1389 : 	case AT_MSKILL_DL_ELECTRICSPARK1:
; 1390 : 		this->MLS_SkillElectricSpark(lpObj->m_Index,lpMagic,x,y,dir,aTargetPos,aTargetIndex);

  00827	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0082a	8b cb		 mov	 ecx, ebx
  0082c	ff 75 24	 push	 DWORD PTR _aTargetPos$[ebp]
  0082f	ff 75 20	 push	 DWORD PTR _dir$[ebp]
  00832	ff 75 1c	 push	 DWORD PTR _y$[ebp]
  00835	ff 75 18	 push	 DWORD PTR _x$[ebp]
  00838	57		 push	 edi
  00839	ff 36		 push	 DWORD PTR [esi]
  0083b	e8 00 00 00 00	 call	 ?MLS_SkillElectricSpark@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EEEEH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillElectricSpark
  00840	5f		 pop	 edi
  00841	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00842	b8 01 00 00 00	 mov	 eax, 1
  00847	5b		 pop	 ebx

; 1406 : }

  00848	8b e5		 mov	 esp, ebp
  0084a	5d		 pop	 ebp
  0084b	c2 20 00	 ret	 32			; 00000020H
$LN77@RunningSki:

; 1391 : 		break;
; 1392 : 	case AT_MSKILL_DL_CHAOTICDESEAR1:
; 1393 : 		this->MLS_SkillChaoticDesier(lpObj->m_Index,lpMagic,aTargetPos,aTargetIndex);

  0084e	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00851	8b cb		 mov	 ecx, ebx
  00853	ff 75 24	 push	 DWORD PTR _aTargetPos$[ebp]
  00856	57		 push	 edi
  00857	ff 36		 push	 DWORD PTR [esi]
  00859	e8 00 00 00 00	 call	 ?MLS_SkillChaoticDesier@CMasterLevelSkillTreeSystem@@QAEXHPAVCMagicInf@@EH@Z ; CMasterLevelSkillTreeSystem::MLS_SkillChaoticDesier
  0085e	5f		 pop	 edi
  0085f	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00860	b8 01 00 00 00	 mov	 eax, 1
  00865	5b		 pop	 ebx

; 1406 : }

  00866	8b e5		 mov	 esp, ebp
  00868	5d		 pop	 ebp
  00869	c2 20 00	 ret	 32			; 00000020H
$LN78@RunningSki:

; 1394 : 		break;
; 1395 : 	case AT_MSKILL_DL_IRONDEFENSE:
; 1396 : 	case AT_MSKILL_DL_IRONDEFENSE1:
; 1397 : 		this->MLS_SkillIronDefense(lpObj->m_Index,aTargetIndex,lpMagic);

  0086c	57		 push	 edi
  0086d	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  00870	8b cb		 mov	 ecx, ebx
  00872	ff 36		 push	 DWORD PTR [esi]
  00874	e8 00 00 00 00	 call	 ?MLS_SkillIronDefense@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillIronDefense
  00879	5f		 pop	 edi
  0087a	5e		 pop	 esi

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  0087b	b8 01 00 00 00	 mov	 eax, 1
  00880	5b		 pop	 ebx

; 1406 : }

  00881	8b e5		 mov	 esp, ebp
  00883	5d		 pop	 ebp
  00884	c2 20 00	 ret	 32			; 00000020H
$LN79@RunningSki:

; 1398 : 		break;
; 1399 : 	case AT_MSKILL_FE_PARTYHEAL:
; 1400 : 	case AT_MSKILL_FE_PARTYHEAL1:
; 1401 : 		MLS_SkillPartyHeal(lpObj->m_Index,aTargetIndex,lpMagic);

  00887	57		 push	 edi
  00888	ff 75 0c	 push	 DWORD PTR _aTargetIndex$[ebp]
  0088b	8b cb		 mov	 ecx, ebx
  0088d	ff 36		 push	 DWORD PTR [esi]
  0088f	e8 00 00 00 00	 call	 ?MLS_SkillPartyHeal@CMasterLevelSkillTreeSystem@@QAEXHHPAVCMagicInf@@@Z ; CMasterLevelSkillTreeSystem::MLS_SkillPartyHeal
$LN2@RunningSki:

; 1402 : 		break;
; 1403 : 	}
; 1404 : 
; 1405 : return true;

  00894	5f		 pop	 edi
  00895	5e		 pop	 esi
  00896	b8 01 00 00 00	 mov	 eax, 1
  0089b	5b		 pop	 ebx

; 1406 : }

  0089c	8b e5		 mov	 esp, ebp
  0089e	5d		 pop	 ebp
  0089f	c2 20 00	 ret	 32			; 00000020H
$LN8@RunningSki:
  008a2	5f		 pop	 edi
  008a3	5e		 pop	 esi

; 1133 : 		return false;

  008a4	33 c0		 xor	 eax, eax
  008a6	5b		 pop	 ebx

; 1406 : }

  008a7	8b e5		 mov	 esp, ebp
  008a9	5d		 pop	 ebp
  008aa	c2 20 00	 ret	 32			; 00000020H
  008ad	0f 1f 00	 npad	 3
$LN90@RunningSki:
  008b0	00 00 00 00	 DD	 $LN27@RunningSki
  008b4	00 00 00 00	 DD	 $LN29@RunningSki
  008b8	00 00 00 00	 DD	 $LN30@RunningSki
  008bc	00 00 00 00	 DD	 $LN31@RunningSki
  008c0	00 00 00 00	 DD	 $LN11@RunningSki
  008c4	00 00 00 00	 DD	 $LN19@RunningSki
  008c8	00 00 00 00	 DD	 $LN18@RunningSki
  008cc	00 00 00 00	 DD	 $LN32@RunningSki
  008d0	00 00 00 00	 DD	 $LN61@RunningSki
  008d4	00 00 00 00	 DD	 $LN13@RunningSki
  008d8	00 00 00 00	 DD	 $LN12@RunningSki
  008dc	00 00 00 00	 DD	 $LN14@RunningSki
  008e0	00 00 00 00	 DD	 $LN35@RunningSki
  008e4	00 00 00 00	 DD	 $LN33@RunningSki
  008e8	00 00 00 00	 DD	 $LN34@RunningSki
  008ec	00 00 00 00	 DD	 $LN36@RunningSki
  008f0	00 00 00 00	 DD	 $LN37@RunningSki
  008f4	00 00 00 00	 DD	 $LN38@RunningSki
  008f8	00 00 00 00	 DD	 $LN62@RunningSki
  008fc	00 00 00 00	 DD	 $LN17@RunningSki
  00900	00 00 00 00	 DD	 $LN63@RunningSki
  00904	00 00 00 00	 DD	 $LN9@RunningSki
  00908	00 00 00 00	 DD	 $LN39@RunningSki
  0090c	00 00 00 00	 DD	 $LN65@RunningSki
  00910	00 00 00 00	 DD	 $LN67@RunningSki
  00914	00 00 00 00	 DD	 $LN10@RunningSki
  00918	00 00 00 00	 DD	 $LN20@RunningSki
  0091c	00 00 00 00	 DD	 $LN21@RunningSki
  00920	00 00 00 00	 DD	 $LN40@RunningSki
  00924	00 00 00 00	 DD	 $LN41@RunningSki
  00928	00 00 00 00	 DD	 $LN51@RunningSki
  0092c	00 00 00 00	 DD	 $LN66@RunningSki
  00930	00 00 00 00	 DD	 $LN79@RunningSki
  00934	00 00 00 00	 DD	 $LN70@RunningSki
  00938	00 00 00 00	 DD	 $LN68@RunningSki
  0093c	00 00 00 00	 DD	 $LN42@RunningSki
  00940	00 00 00 00	 DD	 $LN23@RunningSki
  00944	00 00 00 00	 DD	 $LN24@RunningSki
  00948	00 00 00 00	 DD	 $LN25@RunningSki
  0094c	00 00 00 00	 DD	 $LN26@RunningSki
  00950	00 00 00 00	 DD	 $LN74@RunningSki
  00954	00 00 00 00	 DD	 $LN73@RunningSki
  00958	00 00 00 00	 DD	 $LN75@RunningSki
  0095c	00 00 00 00	 DD	 $LN43@RunningSki
  00960	00 00 00 00	 DD	 $LN44@RunningSki
  00964	00 00 00 00	 DD	 $LN45@RunningSki
  00968	00 00 00 00	 DD	 $LN28@RunningSki
  0096c	00 00 00 00	 DD	 $LN22@RunningSki
  00970	00 00 00 00	 DD	 $LN72@RunningSki
  00974	00 00 00 00	 DD	 $LN64@RunningSki
  00978	00 00 00 00	 DD	 $LN71@RunningSki
  0097c	00 00 00 00	 DD	 $LN16@RunningSki
  00980	00 00 00 00	 DD	 $LN50@RunningSki
  00984	00 00 00 00	 DD	 $LN46@RunningSki
  00988	00 00 00 00	 DD	 $LN15@RunningSki
  0098c	00 00 00 00	 DD	 $LN47@RunningSki
  00990	00 00 00 00	 DD	 $LN48@RunningSki
  00994	00 00 00 00	 DD	 $LN76@RunningSki
  00998	00 00 00 00	 DD	 $LN78@RunningSki
  0099c	00 00 00 00	 DD	 $LN49@RunningSki
  009a0	00 00 00 00	 DD	 $LN77@RunningSki
  009a4	00 00 00 00	 DD	 $LN52@RunningSki
  009a8	00 00 00 00	 DD	 $LN53@RunningSki
  009ac	00 00 00 00	 DD	 $LN54@RunningSki
  009b0	00 00 00 00	 DD	 $LN57@RunningSki
  009b4	00 00 00 00	 DD	 $LN59@RunningSki
  009b8	00 00 00 00	 DD	 $LN60@RunningSki
  009bc	00 00 00 00	 DD	 $LN2@RunningSki
$LN88@RunningSki:
  009c0	00		 DB	 0
  009c1	01		 DB	 1
  009c2	02		 DB	 2
  009c3	03		 DB	 3
  009c4	04		 DB	 4
  009c5	05		 DB	 5
  009c6	04		 DB	 4
  009c7	05		 DB	 5
  009c8	43		 DB	 67			; 00000043H
  009c9	43		 DB	 67			; 00000043H
  009ca	06		 DB	 6
  009cb	07		 DB	 7
  009cc	43		 DB	 67			; 00000043H
  009cd	06		 DB	 6
  009ce	07		 DB	 7
  009cf	43		 DB	 67			; 00000043H
  009d0	06		 DB	 6
  009d1	07		 DB	 7
  009d2	08		 DB	 8
  009d3	43		 DB	 67			; 00000043H
  009d4	08		 DB	 8
  009d5	43		 DB	 67			; 00000043H
  009d6	43		 DB	 67			; 00000043H
  009d7	43		 DB	 67			; 00000043H
  009d8	43		 DB	 67			; 00000043H
  009d9	43		 DB	 67			; 00000043H
  009da	43		 DB	 67			; 00000043H
  009db	43		 DB	 67			; 00000043H
  009dc	43		 DB	 67			; 00000043H
  009dd	43		 DB	 67			; 00000043H
  009de	09		 DB	 9
  009df	43		 DB	 67			; 00000043H
  009e0	43		 DB	 67			; 00000043H
  009e1	43		 DB	 67			; 00000043H
  009e2	0a		 DB	 10			; 0000000aH
  009e3	43		 DB	 67			; 00000043H
  009e4	43		 DB	 67			; 00000043H
  009e5	0b		 DB	 11			; 0000000bH
  009e6	43		 DB	 67			; 00000043H
  009e7	43		 DB	 67			; 00000043H
  009e8	43		 DB	 67			; 00000043H
  009e9	43		 DB	 67			; 00000043H
  009ea	43		 DB	 67			; 00000043H
  009eb	43		 DB	 67			; 00000043H
  009ec	43		 DB	 67			; 00000043H
  009ed	43		 DB	 67			; 00000043H
  009ee	43		 DB	 67			; 00000043H
  009ef	43		 DB	 67			; 00000043H
  009f0	43		 DB	 67			; 00000043H
  009f1	43		 DB	 67			; 00000043H
  009f2	43		 DB	 67			; 00000043H
  009f3	43		 DB	 67			; 00000043H
  009f4	43		 DB	 67			; 00000043H
  009f5	0c		 DB	 12			; 0000000cH
  009f6	0d		 DB	 13			; 0000000dH
  009f7	43		 DB	 67			; 00000043H
  009f8	43		 DB	 67			; 00000043H
  009f9	0e		 DB	 14			; 0000000eH
  009fa	0f		 DB	 15			; 0000000fH
  009fb	43		 DB	 67			; 00000043H
  009fc	43		 DB	 67			; 00000043H
  009fd	10		 DB	 16			; 00000010H
  009fe	43		 DB	 67			; 00000043H
  009ff	11		 DB	 17			; 00000011H
  00a00	12		 DB	 18			; 00000012H
  00a01	13		 DB	 19			; 00000013H
  00a02	14		 DB	 20			; 00000014H
  00a03	13		 DB	 19			; 00000013H
  00a04	12		 DB	 18			; 00000012H
  00a05	43		 DB	 67			; 00000043H
  00a06	43		 DB	 67			; 00000043H
  00a07	43		 DB	 67			; 00000043H
  00a08	43		 DB	 67			; 00000043H
  00a09	43		 DB	 67			; 00000043H
  00a0a	43		 DB	 67			; 00000043H
  00a0b	43		 DB	 67			; 00000043H
  00a0c	43		 DB	 67			; 00000043H
  00a0d	15		 DB	 21			; 00000015H
  00a0e	16		 DB	 22			; 00000016H
  00a0f	43		 DB	 67			; 00000043H
  00a10	17		 DB	 23			; 00000017H
  00a11	43		 DB	 67			; 00000043H
  00a12	43		 DB	 67			; 00000043H
  00a13	43		 DB	 67			; 00000043H
  00a14	43		 DB	 67			; 00000043H
  00a15	18		 DB	 24			; 00000018H
  00a16	43		 DB	 67			; 00000043H
  00a17	19		 DB	 25			; 00000019H
  00a18	43		 DB	 67			; 00000043H
  00a19	43		 DB	 67			; 00000043H
  00a1a	43		 DB	 67			; 00000043H
  00a1b	1a		 DB	 26			; 0000001aH
  00a1c	43		 DB	 67			; 00000043H
  00a1d	43		 DB	 67			; 00000043H
  00a1e	1b		 DB	 27			; 0000001bH
  00a1f	43		 DB	 67			; 00000043H
  00a20	1c		 DB	 28			; 0000001cH
  00a21	1d		 DB	 29			; 0000001dH
  00a22	1e		 DB	 30			; 0000001eH
  00a23	1f		 DB	 31			; 0000001fH
  00a24	20		 DB	 32			; 00000020H
  00a25	1e		 DB	 30			; 0000001eH
  00a26	43		 DB	 67			; 00000043H
  00a27	20		 DB	 32			; 00000020H
  00a28	21		 DB	 33			; 00000021H
  00a29	18		 DB	 24			; 00000018H
  00a2a	22		 DB	 34			; 00000022H
  00a2b	21		 DB	 33			; 00000021H
  00a2c	1e		 DB	 30			; 0000001eH
  00a2d	43		 DB	 67			; 00000043H
  00a2e	43		 DB	 67			; 00000043H
  00a2f	43		 DB	 67			; 00000043H
  00a30	43		 DB	 67			; 00000043H
  00a31	43		 DB	 67			; 00000043H
  00a32	43		 DB	 67			; 00000043H
  00a33	23		 DB	 35			; 00000023H
  00a34	43		 DB	 67			; 00000043H
  00a35	43		 DB	 67			; 00000043H
  00a36	43		 DB	 67			; 00000043H
  00a37	43		 DB	 67			; 00000043H
  00a38	43		 DB	 67			; 00000043H
  00a39	43		 DB	 67			; 00000043H
  00a3a	43		 DB	 67			; 00000043H
  00a3b	43		 DB	 67			; 00000043H
  00a3c	43		 DB	 67			; 00000043H
  00a3d	43		 DB	 67			; 00000043H
  00a3e	43		 DB	 67			; 00000043H
  00a3f	43		 DB	 67			; 00000043H
  00a40	24		 DB	 36			; 00000024H
  00a41	25		 DB	 37			; 00000025H
  00a42	26		 DB	 38			; 00000026H
  00a43	43		 DB	 67			; 00000043H
  00a44	27		 DB	 39			; 00000027H
  00a45	28		 DB	 40			; 00000028H
  00a46	29		 DB	 41			; 00000029H
  00a47	2a		 DB	 42			; 0000002aH
  00a48	27		 DB	 39			; 00000027H
  00a49	2a		 DB	 42			; 0000002aH
  00a4a	43		 DB	 67			; 00000043H
  00a4b	43		 DB	 67			; 00000043H
  00a4c	43		 DB	 67			; 00000043H
  00a4d	43		 DB	 67			; 00000043H
  00a4e	43		 DB	 67			; 00000043H
  00a4f	2b		 DB	 43			; 0000002bH
  00a50	2c		 DB	 44			; 0000002cH
  00a51	43		 DB	 67			; 00000043H
  00a52	2d		 DB	 45			; 0000002dH
  00a53	43		 DB	 67			; 00000043H
  00a54	43		 DB	 67			; 00000043H
  00a55	43		 DB	 67			; 00000043H
  00a56	43		 DB	 67			; 00000043H
  00a57	43		 DB	 67			; 00000043H
  00a58	43		 DB	 67			; 00000043H
  00a59	2e		 DB	 46			; 0000002eH
  00a5a	0c		 DB	 12			; 0000000cH
  00a5b	04		 DB	 4
  00a5c	2f		 DB	 47			; 0000002fH
  00a5d	43		 DB	 67			; 00000043H
  00a5e	43		 DB	 67			; 00000043H
  00a5f	43		 DB	 67			; 00000043H
  00a60	43		 DB	 67			; 00000043H
  00a61	43		 DB	 67			; 00000043H
  00a62	43		 DB	 67			; 00000043H
  00a63	11		 DB	 17			; 00000011H
  00a64	43		 DB	 67			; 00000043H
  00a65	11		 DB	 17			; 00000011H
  00a66	30		 DB	 48			; 00000030H
  00a67	43		 DB	 67			; 00000043H
  00a68	30		 DB	 48			; 00000030H
  00a69	31		 DB	 49			; 00000031H
  00a6a	32		 DB	 50			; 00000032H
  00a6b	31		 DB	 49			; 00000031H
  00a6c	43		 DB	 67			; 00000043H
  00a6d	43		 DB	 67			; 00000043H
  00a6e	43		 DB	 67			; 00000043H
  00a6f	43		 DB	 67			; 00000043H
  00a70	43		 DB	 67			; 00000043H
  00a71	43		 DB	 67			; 00000043H
  00a72	43		 DB	 67			; 00000043H
  00a73	43		 DB	 67			; 00000043H
  00a74	43		 DB	 67			; 00000043H
  00a75	43		 DB	 67			; 00000043H
  00a76	33		 DB	 51			; 00000033H
  00a77	34		 DB	 52			; 00000034H
  00a78	43		 DB	 67			; 00000043H
  00a79	35		 DB	 53			; 00000035H
  00a7a	36		 DB	 54			; 00000036H
  00a7b	43		 DB	 67			; 00000043H
  00a7c	33		 DB	 51			; 00000033H
  00a7d	37		 DB	 55			; 00000037H
  00a7e	36		 DB	 54			; 00000036H
  00a7f	38		 DB	 56			; 00000038H
  00a80	43		 DB	 67			; 00000043H
  00a81	39		 DB	 57			; 00000039H
  00a82	43		 DB	 67			; 00000043H
  00a83	3a		 DB	 58			; 0000003aH
  00a84	3b		 DB	 59			; 0000003bH
  00a85	3c		 DB	 60			; 0000003cH
  00a86	3a		 DB	 58			; 0000003aH
  00a87	43		 DB	 67			; 00000043H
  00a88	43		 DB	 67			; 00000043H
  00a89	43		 DB	 67			; 00000043H
  00a8a	43		 DB	 67			; 00000043H
  00a8b	43		 DB	 67			; 00000043H
  00a8c	43		 DB	 67			; 00000043H
  00a8d	43		 DB	 67			; 00000043H
  00a8e	43		 DB	 67			; 00000043H
  00a8f	43		 DB	 67			; 00000043H
  00a90	43		 DB	 67			; 00000043H
  00a91	43		 DB	 67			; 00000043H
  00a92	43		 DB	 67			; 00000043H
  00a93	43		 DB	 67			; 00000043H
  00a94	43		 DB	 67			; 00000043H
  00a95	43		 DB	 67			; 00000043H
  00a96	43		 DB	 67			; 00000043H
  00a97	43		 DB	 67			; 00000043H
  00a98	43		 DB	 67			; 00000043H
  00a99	43		 DB	 67			; 00000043H
  00a9a	43		 DB	 67			; 00000043H
  00a9b	43		 DB	 67			; 00000043H
  00a9c	43		 DB	 67			; 00000043H
  00a9d	43		 DB	 67			; 00000043H
  00a9e	43		 DB	 67			; 00000043H
  00a9f	43		 DB	 67			; 00000043H
  00aa0	43		 DB	 67			; 00000043H
  00aa1	3d		 DB	 61			; 0000003dH
  00aa2	3d		 DB	 61			; 0000003dH
  00aa3	43		 DB	 67			; 00000043H
  00aa4	3e		 DB	 62			; 0000003eH
  00aa5	3e		 DB	 62			; 0000003eH
  00aa6	43		 DB	 67			; 00000043H
  00aa7	43		 DB	 67			; 00000043H
  00aa8	3d		 DB	 61			; 0000003dH
  00aa9	3f		 DB	 63			; 0000003fH
  00aaa	40		 DB	 64			; 00000040H
  00aab	40		 DB	 64			; 00000040H
  00aac	3d		 DB	 61			; 0000003dH
  00aad	3f		 DB	 63			; 0000003fH
  00aae	43		 DB	 67			; 00000043H
  00aaf	43		 DB	 67			; 00000043H
  00ab0	43		 DB	 67			; 00000043H
  00ab1	43		 DB	 67			; 00000043H
  00ab2	43		 DB	 67			; 00000043H
  00ab3	41		 DB	 65			; 00000041H
  00ab4	43		 DB	 67			; 00000043H
  00ab5	43		 DB	 67			; 00000043H
  00ab6	42		 DB	 66			; 00000042H
  00ab7	41		 DB	 65			; 00000041H
?RunningSkill_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@HEEEE@Z ENDP ; CMasterLevelSkillTreeSystem::RunningSkill_MLS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z
_TEXT	SEGMENT
tv323 = -40						; size = 4
tv311 = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill, COMDAT
; _this$ = ecx

; 1042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpMsg$[ebp]

; 1043 : 	if( !gObjIsConnected(aIndex) )

  0001b	56		 push	 esi
  0001c	89 5d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00024	83 c4 04	 add	 esp, 4
  00027	85 c0		 test	 eax, eax
  00029	75 1c		 jne	 SHORT $LN2@CGReqGetMa

; 1044 : 	{
; 1045 : 		CloseClient(aIndex);

  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00031	83 c4 04	 add	 esp, 4
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 1128 : }

  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@CGReqGetMa:

; 1046 : 		return;
; 1047 : 	}
; 1048 : 
; 1049 : 	LPOBJ lpObj = &gObj[aIndex];
; 1050 : 	int iResult;
; 1051 : 
; 1052 : 	PMSG_ANS_MASTERLEVEL_SKILL pMsg;
; 1053 : 	PHeadSubSetB((LPBYTE)&pMsg,0xF3,0x52,sizeof(pMsg));

  00047	6a 1c		 push	 28			; 0000001cH
  00049	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  0004f	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00052	6a 52		 push	 82			; 00000052H
  00054	68 f3 00 00 00	 push	 243			; 000000f3H
  00059	50		 push	 eax
  0005a	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00060	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1054 : 	pMsg.btResult = 0;

  00065	c6 45 e4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 1055 : 	pMsg.wLevelPoint = lpObj->MasterPoint;

  0006c	66 8b 86 c0 00
	00 00		 mov	 ax, WORD PTR [esi+192]
  00073	66 89 45 e6	 mov	 WORD PTR _pMsg$[ebp+6], ax

; 1056 : 	pMsg.dwSkillId = -1;

  00077	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+12], -1

; 1057 : 	pMsg.iLevel = 0;

  0007e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+16], 0

; 1058 : 
; 1059 : 	if( lpObj->m_IfState.use == TRUE &&

  00085	8b 8e b8 11 00
	00		 mov	 ecx, DWORD PTR [esi+4536]
  0008b	8b c1		 mov	 eax, ecx
  0008d	24 03		 and	 al, 3
  0008f	3c 01		 cmp	 al, 1
  00091	75 48		 jne	 SHORT $LN3@CGReqGetMa
  00093	81 e1 c0 ff 00
	00		 and	 ecx, 65472		; 0000ffc0H
  00099	83 f9 40	 cmp	 ecx, 64			; 00000040H
  0009c	75 3d		 jne	 SHORT $LN3@CGReqGetMa

; 1060 : 		lpObj->m_IfState.type == 1 )
; 1061 : 	{
; 1062 : 		iResult = 6;
; 1063 : 		LogAddTD("[MasterSkill] [%s][%s] Fail(Use Trade Interface) - Add Magic List",lpObj->AccountID,lpObj->Name);

  0009e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000a1	50		 push	 eax
  000a2	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000a5	50		 push	 eax
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@EOPMIEFL@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?$CIUse?5@
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1064 : 		pMsg.btResult = iResult;
; 1065 : 		DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000b1	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000b5	50		 push	 eax
  000b6	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000b9	c6 45 e4 06	 mov	 BYTE PTR _pMsg$[ebp+4], 6
  000bd	50		 push	 eax
  000be	ff 36		 push	 DWORD PTR [esi]
  000c0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000c5	83 c4 18	 add	 esp, 24			; 00000018H
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx

; 1128 : }

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN3@CGReqGetMa:

; 1066 : 		return;
; 1067 : 	}
; 1068 : 
; 1069 : 	int iSkillLevel = this->CheckSkillLevel(lpObj,lpMsg->AddSkill) + this->GetRequireMLPoint(lpObj->Class,lpMsg->AddSkill);

  000db	ff 77 04	 push	 DWORD PTR [edi+4]
  000de	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  000e5	8b cb		 mov	 ecx, ebx
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 ?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetRequireMLPoint
  000ed	ff 77 04	 push	 DWORD PTR [edi+4]
  000f0	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000f3	8b d8		 mov	 ebx, eax
  000f5	56		 push	 esi
  000f6	e8 00 00 00 00	 call	 ?CheckSkillLevel@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckSkillLevel

; 1070 : 
; 1071 : 	iResult = this->CheckSkillCondition(lpObj,lpMsg->AddSkill,iSkillLevel);

  000fb	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000fe	03 d8		 add	 ebx, eax
  00100	53		 push	 ebx
  00101	ff 77 04	 push	 DWORD PTR [edi+4]
  00104	56		 push	 esi
  00105	e8 00 00 00 00	 call	 ?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckSkillCondition

; 1072 : 
; 1073 : 	if( iResult == 1 )

  0010a	83 f8 01	 cmp	 eax, 1
  0010d	0f 85 58 01 00
	00		 jne	 $LN4@CGReqGetMa

; 1074 : 	{
; 1075 : 		if( this->gObjMagicAdd_MLS(lpObj,lpMsg->AddSkill,iSkillLevel) < 0 )

  00113	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00116	53		 push	 ebx
  00117	ff 77 04	 push	 DWORD PTR [edi+4]
  0011a	56		 push	 esi
  0011b	e8 00 00 00 00	 call	 ?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
  00120	85 c0		 test	 eax, eax
  00122	79 1f		 jns	 SHORT $LN6@CGReqGetMa

; 1076 : 		{
; 1077 : 			iResult = 5;
; 1078 : 			LogAddTD("[MasterSkill] [%s][%s] Fail - Add Magic List, Skill:%d Level:%d",

  00124	53		 push	 ebx
  00125	ff 77 04	 push	 DWORD PTR [edi+4]
  00128	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0012b	50		 push	 eax
  0012c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@MEFIMNOG@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Fail?5?9?5Ad@
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013b	83 c4 14	 add	 esp, 20			; 00000014H

; 1079 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel);
; 1080 : 		}
; 1081 : 		else

  0013e	e9 2b 01 00 00	 jmp	 $LN5@CGReqGetMa
$LN6@CGReqGetMa:

; 1082 : 		{
; 1083 : 			int iReqMLPoint = this->GetRequireMLPoint(lpObj->Class,lpMsg->AddSkill);

  00143	ff 77 04	 push	 DWORD PTR [edi+4]
  00146	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  0014d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetRequireMLPoint

; 1084 : 
; 1085 : 			if( iReqMLPoint < 0 )

  00156	85 c0		 test	 eax, eax
  00158	0f 88 23 01 00
	00		 js	 $LN1@CGReqGetMa

; 1086 : 				return;
; 1087 : 
; 1088 : 			lpObj->MasterPoint -= iReqMLPoint;

  0015e	29 86 c0 00 00
	00		 sub	 DWORD PTR [esi+192], eax

; 1089 : 			lpObj->MasterPointSpent += iReqMLPoint;

  00164	01 86 c4 00 00
	00		 add	 DWORD PTR [esi+196], eax

; 1090 : 
; 1091 : 			pMsg.btResult = iResult;
; 1092 : 			pMsg.wLevelPoint = lpObj->MasterPoint;
; 1093 : 			pMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpMsg->AddSkill);

  0016a	ff 77 04	 push	 DWORD PTR [edi+4]
  0016d	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00170	c6 45 e4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  00174	66 8b 86 c0 00
	00 00		 mov	 ax, WORD PTR [esi+192]
  0017b	66 89 45 e6	 mov	 WORD PTR _pMsg$[ebp+6], ax
  0017f	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex
  0018c	88 45 e8	 mov	 BYTE PTR _pMsg$[ebp+8], al

; 1094 : 			pMsg.dwSkillId = lpMsg->AddSkill;
; 1095 : 			pMsg.iLevel = iSkillLevel;
; 1096 : 
; 1097 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel) > 0.0f )

  0018f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00194	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00197	53		 push	 ebx
  00198	50		 push	 eax
  00199	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0019c	89 5d f0	 mov	 DWORD PTR _pMsg$[ebp+16], ebx
  0019f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001a4	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001ad	d9 5d d8	 fstp	 DWORD PTR tv323[ebp]
  001b0	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv323[ebp]
  001b5	0f 57 c9	 xorps	 xmm1, xmm1
  001b8	0f 2f c1	 comiss	 xmm0, xmm1
  001bb	76 1c		 jbe	 SHORT $LN9@CGReqGetMa

; 1098 : 			{
; 1099 : 				pMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel);

  001bd	53		 push	 ebx
  001be	ff 77 04	 push	 DWORD PTR [edi+4]
  001c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001c6	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001cb	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001d4	d9 5d f4	 fstp	 DWORD PTR _pMsg$[ebp+20]

; 1100 : 			}
; 1101 : 			else

  001d7	eb 07		 jmp	 SHORT $LN10@CGReqGetMa
$LN9@CGReqGetMa:

; 1102 : 			{
; 1103 : 				pMsg.value = -1.0f;

  001d9	c7 45 f4 00 00
	80 bf		 mov	 DWORD PTR _pMsg$[ebp+20], -1082130432 ; bf800000H
$LN10@CGReqGetMa:

; 1104 : 			}
; 1105 : 
; 1106 : 			if( iSkillLevel < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1) > 0.0f )

  001e0	83 fb 14	 cmp	 ebx, 20			; 00000014H
  001e3	7d 49		 jge	 SHORT $LN11@CGReqGetMa
  001e5	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  001e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001ed	50		 push	 eax
  001ee	ff 77 04	 push	 DWORD PTR [edi+4]
  001f1	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001f6	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001f9	50		 push	 eax
  001fa	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001ff	d9 5d d8	 fstp	 DWORD PTR tv311[ebp]
  00202	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv311[ebp]
  00207	0f 57 c9	 xorps	 xmm1, xmm1
  0020a	0f 2f c1	 comiss	 xmm0, xmm1
  0020d	76 1f		 jbe	 SHORT $LN11@CGReqGetMa

; 1107 : 			{
; 1108 : 				pMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpMsg->AddSkill),iSkillLevel+1);

  0020f	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00212	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00217	50		 push	 eax
  00218	ff 77 04	 push	 DWORD PTR [edi+4]
  0021b	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00220	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00229	d9 5d f8	 fstp	 DWORD PTR _pMsg$[ebp+24]

; 1109 : 			}
; 1110 : 			else

  0022c	eb 07		 jmp	 SHORT $LN12@CGReqGetMa
$LN11@CGReqGetMa:

; 1111 : 			{
; 1112 : 				pMsg.nextvalue = -1.0f;

  0022e	c7 45 f8 00 00
	80 bf		 mov	 DWORD PTR _pMsg$[ebp+24], -1082130432 ; bf800000H
$LN12@CGReqGetMa:

; 1113 : 			}
; 1114 : 
; 1115 : 			this->CalcPassiveSkillData(lpObj,lpMsg->AddSkill,iSkillLevel);

  00235	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00238	53		 push	 ebx
  00239	ff 77 04	 push	 DWORD PTR [edi+4]
  0023c	56		 push	 esi
  0023d	e8 00 00 00 00	 call	 ?CalcPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CalcPassiveSkillData

; 1116 : 			gObjCalCharacter(lpObj->m_Index);

  00242	ff 36		 push	 DWORD PTR [esi]
  00244	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter

; 1117 : 
; 1118 : 			LogAddTD("[MasterSkill] [%s][%s] Success - Add Magic List, Skill:%d Level:%d MLPoint:%d",

  00249	ff b6 c0 00 00
	00		 push	 DWORD PTR [esi+192]
  0024f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00252	53		 push	 ebx
  00253	ff 77 04	 push	 DWORD PTR [edi+4]
  00256	50		 push	 eax
  00257	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0025a	50		 push	 eax
  0025b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@COKPAFNE@?$FLMasterSkill?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Success?5?9@
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00266	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1119 : 				lpObj->AccountID,lpObj->Name,lpMsg->AddSkill,iSkillLevel,lpObj->MasterPoint);
; 1120 : 		}
; 1121 : 	}
; 1122 : 	else

  00269	eb 03		 jmp	 SHORT $LN5@CGReqGetMa
$LN4@CGReqGetMa:

; 1123 : 	{
; 1124 : 		pMsg.btResult = iResult;

  0026b	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+4], al
$LN5@CGReqGetMa:

; 1125 : 	}
; 1126 : 
; 1127 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0026e	0f b6 45 e1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00272	50		 push	 eax
  00273	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00276	50		 push	 eax
  00277	ff 36		 push	 DWORD PTR [esi]
  00279	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0027e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CGReqGetMa:

; 1128 : }

  00281	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00284	5f		 pop	 edi
  00285	5e		 pop	 esi
  00286	33 cd		 xor	 ecx, ebp
  00288	5b		 pop	 ebx
  00289	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0028e	8b e5		 mov	 esp, ebp
  00290	5d		 pop	 ebp
  00291	c2 08 00	 ret	 8
?CGReqGetMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEXPAUPMSG_REQ_MASTERLEVEL_SKILL@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -1072				; size = 4
_pElementMsg$ = -1068					; size = 12
tv445 = -1056						; size = 4
tv433 = -1056						; size = 4
_pCountMsg$1$ = -1052					; size = 4
_lOfs$1$ = -1048					; size = 4
_this$GSCopy$1$ = -1044					; size = 4
_pCountMsg$ = -1040					; size = 12
_sendbuf$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z PROC ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree, COMDAT
; _this$ = ecx

; 980  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 04 00
	00		 sub	 esp, 1072		; 00000430H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]

; 981  : 	if( !gObjIsConnected(aIndex) )

  00017	53		 push	 ebx
  00018	89 8d ec fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001e	89 9d d0 fb ff
	ff		 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], ebx
  00024	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00029	83 c4 04	 add	 esp, 4
  0002c	85 c0		 test	 eax, eax
  0002e	75 1a		 jne	 SHORT $LN5@CGReqGetMa

; 982  : 	{
; 983  : 		CloseClient(aIndex);

  00030	53		 push	 ebx
  00031	e8 00 00 00 00	 call	 ?CloseClient@@YAXH@Z	; CloseClient
  00036	83 c4 04	 add	 esp, 4
  00039	5b		 pop	 ebx

; 1039 : }

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003d	33 cd		 xor	 ecx, ebp
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN5@CGReqGetMa:
  0004a	56		 push	 esi
  0004b	57		 push	 edi

; 984  : 		return;
; 985  : 	}
; 986  : 
; 987  : 	LPOBJ lpObj = &gObj[aIndex];
; 988  : 
; 989  : 	PMSG_MASTERSKILL_COUNT pCountMsg;
; 990  : 	PHeadSubSetW((LPBYTE)&pCountMsg,0xF3,0x53,sizeof(pCountMsg));

  0004c	6a 0c		 push	 12			; 0000000cH
  0004e	69 fb 40 27 00
	00		 imul	 edi, ebx, 10048
  00054	8d 85 f0 fb ff
	ff		 lea	 eax, DWORD PTR _pCountMsg$[ebp]
  0005a	6a 53		 push	 83			; 00000053H
  0005c	68 f3 00 00 00	 push	 243			; 000000f3H
  00061	50		 push	 eax
  00062	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	e8 00 00 00 00	 call	 ?PHeadSubSetW@@YAXPAEEEH@Z ; PHeadSubSetW

; 991  : 	int nCount = 0;
; 992  : 
; 993  : 	BYTE sendbuf[1024];
; 994  : 	memset(&sendbuf[0],0,sizeof(sendbuf));

  0006d	68 00 04 00 00	 push	 1024			; 00000400H
  00072	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _sendbuf$[ebp]
  00078	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _pCountMsg$1$[ebp], 0
  00082	6a 00		 push	 0
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 _memset
  0008a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 995  : 
; 996  : 	int lOfs = sizeof(pCountMsg);

  0008d	c7 85 e8 fb ff
	ff 0c 00 00 00	 mov	 DWORD PTR _lOfs$1$[ebp], 12 ; 0000000cH
  00097	8d 9d 08 fc ff
	ff		 lea	 ebx, DWORD PTR _sendbuf$[ebp+12]
  0009d	33 f6		 xor	 esi, esi
  0009f	90		 npad	 1
$LL4@CGReqGetMa:

; 1001 : 	{
; 1002 : 		if( lpObj->Magic[i].IsMagic() == TRUE &&

  000a0	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  000a6	03 ce		 add	 ecx, esi
  000a8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000ad	83 f8 01	 cmp	 eax, 1
  000b0	0f 85 73 01 00
	00		 jne	 $LN17@CGReqGetMa
  000b6	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  000bc	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000c2	ff 74 06 08	 push	 DWORD PTR [esi+eax+8]
  000c6	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  000cb	83 f8 01	 cmp	 eax, 1
  000ce	0f 85 55 01 00
	00		 jne	 $LN17@CGReqGetMa

; 1003 : 			this->CheckMasterLevelSkill(lpObj->Magic[i].m_Skill) == TRUE )
; 1004 : 		{
; 1005 : 			pElementMsg.btMasterSkillId = this->GetMasterSkillUIIndex(lpObj->Class,lpObj->Magic[i].m_Skill);

  000d4	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  000da	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000e0	ff 74 06 08	 push	 DWORD PTR [esi+eax+8]
  000e4	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?GetMasterSkillUIIndex@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillUIIndex

; 1006 : 			pElementMsg.btLevel = lpObj->Magic[i].m_Level;

  000f1	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  000f7	88 85 d4 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp], al
  000fd	8a 44 0e 04	 mov	 al, BYTE PTR [esi+ecx+4]
  00101	88 85 d5 fb ff
	ff		 mov	 BYTE PTR _pElementMsg$[ebp+1], al

; 1007 : 
; 1008 : 			if( this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level) > 0.0f )

  00107	0f b6 c0	 movzx	 eax, al
  0010a	50		 push	 eax
  0010b	ff 74 0e 08	 push	 DWORD PTR [esi+ecx+8]
  0010f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00114	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00119	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00125	d9 9d e0 fb ff
	ff		 fstp	 DWORD PTR tv445[ebp]
  0012b	f3 0f 10 85 e0
	fb ff ff	 movss	 xmm0, DWORD PTR tv445[ebp]
  00133	0f 57 c9	 xorps	 xmm1, xmm1
  00136	0f 2f c1	 comiss	 xmm0, xmm1
  00139	76 2e		 jbe	 SHORT $LN7@CGReqGetMa

; 1009 : 			{
; 1010 : 				pElementMsg.value = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level);

  0013b	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00141	0f b6 44 0e 04	 movzx	 eax, BYTE PTR [esi+ecx+4]
  00146	50		 push	 eax
  00147	ff 74 0e 08	 push	 DWORD PTR [esi+ecx+8]
  0014b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00150	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00155	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00161	d9 9d d8 fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+4]

; 1011 : 			}
; 1012 : 			else

  00167	eb 0a		 jmp	 SHORT $LN8@CGReqGetMa
$LN7@CGReqGetMa:

; 1013 : 			{
; 1014 : 				pElementMsg.value = -1.0f;

  00169	c7 85 d8 fb ff
	ff 00 00 80 bf	 mov	 DWORD PTR _pElementMsg$[ebp+4], -1082130432 ; bf800000H
$LN8@CGReqGetMa:

; 1015 : 			}
; 1016 : 
; 1017 : 			if( lpObj->Magic[i].m_Level < MAX_SKILLTREE_LEVEL && this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1) != 0.0f )

  00173	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00179	8a 44 0e 04	 mov	 al, BYTE PTR [esi+ecx+4]
  0017d	3c 14		 cmp	 al, 20			; 00000014H
  0017f	73 68		 jae	 SHORT $LN9@CGReqGetMa
  00181	0f b6 c0	 movzx	 eax, al
  00184	40		 inc	 eax
  00185	50		 push	 eax
  00186	ff 74 0e 08	 push	 DWORD PTR [esi+ecx+8]
  0018a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0018f	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00194	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001a0	d9 9d e0 fb ff
	ff		 fstp	 DWORD PTR tv433[ebp]
  001a6	f3 0f 10 85 e0
	fb ff ff	 movss	 xmm0, DWORD PTR tv433[ebp]
  001ae	0f 57 c9	 xorps	 xmm1, xmm1
  001b1	0f 2e c1	 ucomiss xmm0, xmm1
  001b4	9f		 lahf
  001b5	f6 c4 44	 test	 ah, 68			; 00000044H
  001b8	7b 2f		 jnp	 SHORT $LN9@CGReqGetMa

; 1018 : 			{
; 1019 : 				pElementMsg.nextvalue = this->GetMasterSkillValue(MagicDamageC.SkillGet(lpObj->Magic[i].m_Skill),lpObj->Magic[i].m_Level+1);

  001ba	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  001c0	0f b6 44 0e 04	 movzx	 eax, BYTE PTR [esi+ecx+4]
  001c5	40		 inc	 eax
  001c6	50		 push	 eax
  001c7	ff 74 0e 08	 push	 DWORD PTR [esi+ecx+8]
  001cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001d0	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  001d5	8b 8d ec fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001db	50		 push	 eax
  001dc	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  001e1	d9 9d dc fb ff
	ff		 fstp	 DWORD PTR _pElementMsg$[ebp+8]

; 1020 : 			}
; 1021 : 			else

  001e7	eb 0a		 jmp	 SHORT $LN10@CGReqGetMa
$LN9@CGReqGetMa:

; 1022 : 			{
; 1023 : 				pElementMsg.nextvalue = -1.0f;

  001e9	c7 85 dc fb ff
	ff 00 00 80 bf	 mov	 DWORD PTR _pElementMsg$[ebp+8], -1082130432 ; bf800000H
$LN10@CGReqGetMa:

; 1024 : 			}
; 1025 : 
; 1026 : 			nCount++;

  001f3	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _pCountMsg$1$[ebp]

; 1027 : 			memcpy(&sendbuf[lOfs],&pElementMsg,sizeof(pElementMsg));
; 1028 : 			lOfs += sizeof(pElementMsg);

  001f9	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _lOfs$1$[ebp]
  001ff	42		 inc	 edx
  00200	f3 0f 7e 85 d4
	fb ff ff	 movq	 xmm0, QWORD PTR _pElementMsg$[ebp]
  00208	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0020b	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR _pElementMsg$[ebp+8]
  00211	66 0f d6 03	 movq	 QWORD PTR [ebx], xmm0
  00215	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00218	83 c3 0c	 add	 ebx, 12			; 0000000cH
  0021b	89 95 e4 fb ff
	ff		 mov	 DWORD PTR _pCountMsg$1$[ebp], edx
  00221	89 8d e8 fb ff
	ff		 mov	 DWORD PTR _lOfs$1$[ebp], ecx
  00227	eb 0c		 jmp	 SHORT $LN2@CGReqGetMa
$LN17@CGReqGetMa:
  00229	8b 95 e4 fb ff
	ff		 mov	 edx, DWORD PTR _pCountMsg$1$[ebp]
  0022f	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR _lOfs$1$[ebp]
$LN2@CGReqGetMa:

; 997  : 
; 998  : 	MASTERSKILL_STRUCT pElementMsg;
; 999  : 
; 1000 : 	for(int i = 0; i < MAX_MAGIC; i++)

  00235	83 c6 18	 add	 esi, 24			; 00000018H
  00238	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0023e	0f 8c 5c fe ff
	ff		 jl	 $LL4@CGReqGetMa

; 1029 : 		}
; 1030 : 	}
; 1031 : 
; 1032 : 	pCountMsg.count = nCount;
; 1033 : 	pCountMsg.h.sizeH = SET_NUMBERH(lOfs);

  00244	8b c1		 mov	 eax, ecx

; 1034 : 	pCountMsg.h.sizeL = SET_NUMBERL(lOfs);

  00246	88 8d f2 fb ff
	ff		 mov	 BYTE PTR _pCountMsg$[ebp+2], cl
  0024c	c1 e8 08	 shr	 eax, 8
  0024f	88 85 f1 fb ff
	ff		 mov	 BYTE PTR _pCountMsg$[ebp+1], al

; 1035 : 
; 1036 : 	memcpy(&sendbuf[0],&pCountMsg,sizeof(pCountMsg));
; 1037 : 
; 1038 : 	DataSend(aIndex,(LPBYTE)sendbuf,lOfs);

  00255	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _sendbuf$[ebp]
  0025b	f3 0f 7e 85 f0
	fb ff ff	 movq	 xmm0, QWORD PTR _pCountMsg$[ebp]
  00263	51		 push	 ecx
  00264	50		 push	 eax
  00265	ff b5 d0 fb ff
	ff		 push	 DWORD PTR _aIndex$GSCopy$1$[ebp]
  0026b	89 95 f8 fb ff
	ff		 mov	 DWORD PTR _pCountMsg$[ebp+8], edx
  00271	66 0f d6 85 fc
	fb ff ff	 movq	 QWORD PTR _sendbuf$[ebp], xmm0
  00279	89 95 04 fc ff
	ff		 mov	 DWORD PTR _sendbuf$[ebp+8], edx
  0027f	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1039 : }

  00284	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00287	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028a	33 cd		 xor	 ecx, ebp
  0028c	5f		 pop	 edi
  0028d	5e		 pop	 esi
  0028e	5b		 pop	 ebx
  0028f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00294	8b e5		 mov	 esp, ebp
  00296	5d		 pop	 ebp
  00297	c2 04 00	 ret	 4
?CGReqGetMasterLevelSkillTree@CMasterLevelSkillTreeSystem@@QAEXH@Z ENDP ; CMasterLevelSkillTreeSystem::CGReqGetMasterLevelSkillTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_iBrand$1$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_n$4$ = 12						; size = 4
_n$3$ = 12						; size = 4
_n$2$ = 12						; size = 4
_n$1$ = 12						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS, COMDAT
; _this$ = ecx

; 818  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 819  : 	int skill = -1;
; 820  : 	int n;
; 821  : 
; 822  : 	if( g_EnergyCheckOff == 1 )

  00003	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_EnergyCheckOff@@3HA, 1 ; g_EnergyCheckOff
  0000a	53		 push	 ebx
  0000b	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
  0000e	56		 push	 esi
  0000f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00012	75 66		 jne	 SHORT $LN19@gObjMagicA

; 823  : 	{
; 824  : 		int reqeng = MagicDamageC.SkillGetRequireEnergy(iMLSkill);

  00014	53		 push	 ebx
  00015	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0001a	e8 00 00 00 00	 call	 ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGetRequireEnergy
  0001f	8b d0		 mov	 edx, eax

; 825  : 
; 826  : 		if( reqeng < 0 )

  00021	85 d2		 test	 edx, edx
  00023	79 22		 jns	 SHORT $LN15@gObjMagicA
$LN63@gObjMagicA:

; 827  : 		{
; 828  : 			LogAdd(lMsg.Get(MSGGET(2,37)));

  00025	68 25 02 00 00	 push	 549			; 00000225H
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003b	83 c4 04	 add	 esp, 4

; 829  : 			return -1;

  0003e	83 c8 ff	 or	 eax, -1
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 945  : return -1;
; 946  : }

  00043	5d		 pop	 ebp
  00044	c2 0c 00	 ret	 12			; 0000000cH
$LN15@gObjMagicA:

; 830  : 		}
; 831  : 
; 832  : 		if( lpObj->Class == CLASS_KNIGHT )

  00047	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 03		 jne	 SHORT $LN16@gObjMagicA

; 833  : 		{
; 834  : 			reqeng -= 10;

  00053	83 ea 0a	 sub	 edx, 10			; 0000000aH
$LN16@gObjMagicA:

; 835  : 		}
; 836  : 		
; 837  : 		if( lpObj->Class == CLASS_ELF )

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 03		 jne	 SHORT $LN17@gObjMagicA

; 838  : 		{
; 839  : 			reqeng -= 5;

  0005b	83 ea 05	 sub	 edx, 5
$LN17@gObjMagicA:

; 840  : 		}
; 841  : 		
; 842  : 		if( lpObj->Class == CLASS_DARKLORD )

  0005e	83 f8 04	 cmp	 eax, 4
  00061	75 03		 jne	 SHORT $LN18@gObjMagicA

; 843  : 		{
; 844  : 			reqeng -= 5;

  00063	83 ea 05	 sub	 edx, 5
$LN18@gObjMagicA:

; 845  : 		}
; 846  : 
; 847  : 		if( (lpObj->Energy+lpObj->AddEnergy) < reqeng )

  00066	0f b7 8e 02 01
	00 00		 movzx	 ecx, WORD PTR [esi+258]
  0006d	0f b7 86 d6 00
	00 00		 movzx	 eax, WORD PTR [esi+214]
  00074	03 c8		 add	 ecx, eax
  00076	3b ca		 cmp	 ecx, edx
  00078	7c ab		 jl	 SHORT $LN63@gObjMagicA
$LN19@gObjMagicA:

; 848  : 		{
; 849  : 			LogAdd(lMsg.Get(MSGGET(2,37)));
; 850  : 			return -1;
; 851  : 		}
; 852  : 	}
; 853  : 
; 854  : 	if( MagicDamageC.SkillGetRequireClass(lpObj->Class,lpObj->ChangeUP,lpObj->ChangeUP2,iMLSkill) < 1 )

  0007a	0f b6 86 94 00
	00 00		 movzx	 eax, BYTE PTR [esi+148]
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00086	53		 push	 ebx
  00087	50		 push	 eax
  00088	0f b6 86 93 00
	00 00		 movzx	 eax, BYTE PTR [esi+147]
  0008f	50		 push	 eax
  00090	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ; CMagicDamage::SkillGetRequireClass
  0009d	83 f8 01	 cmp	 eax, 1
  000a0	7d 22		 jge	 SHORT $LN20@gObjMagicA

; 855  : 	{
; 856  : 		LogAdd(lMsg.Get(MSGGET(2,38)));

  000a2	68 26 02 00 00	 push	 550			; 00000226H
  000a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000ac	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000b1	50		 push	 eax
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000b8	83 c4 04	 add	 esp, 4

; 857  : 		return -1;

  000bb	83 c8 ff	 or	 eax, -1
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx

; 945  : return -1;
; 946  : }

  000c0	5d		 pop	 ebp
  000c1	c2 0c 00	 ret	 12			; 0000000cH
$LN20@gObjMagicA:

; 858  : 	}
; 859  : 
; 860  : 	for( n = 0; n < MAX_MAGIC; n++)

  000c4	33 c0		 xor	 eax, eax
  000c6	57		 push	 edi
  000c7	89 45 0c	 mov	 DWORD PTR _n$1$[ebp], eax
  000ca	33 ff		 xor	 edi, edi
  000cc	0f 1f 40 00	 npad	 4
$LL4@gObjMagicA:

; 861  : 	{
; 862  : 		if( lpObj->Magic[n].IsMagic() == TRUE &&
; 863  : 			lpObj->Magic[n].m_Skill == iMLSkill &&

  000d0	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  000d6	03 cf		 add	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000dd	83 f8 01	 cmp	 eax, 1
  000e0	75 1a		 jne	 SHORT $LN2@gObjMagicA
  000e2	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  000e8	39 5c 38 08	 cmp	 DWORD PTR [eax+edi+8], ebx
  000ec	75 0e		 jne	 SHORT $LN2@gObjMagicA
  000ee	0f b6 44 38 04	 movzx	 eax, BYTE PTR [eax+edi+4]
  000f3	3b 45 10	 cmp	 eax, DWORD PTR _iSkillLevel$[ebp]
  000f6	0f 84 c4 00 00
	00		 je	 $LN41@gObjMagicA
$LN2@gObjMagicA:

; 858  : 	}
; 859  : 
; 860  : 	for( n = 0; n < MAX_MAGIC; n++)

  000fc	ff 45 0c	 inc	 DWORD PTR _n$1$[ebp]
  000ff	83 c7 18	 add	 edi, 24			; 00000018H
  00102	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00108	7c c6		 jl	 SHORT $LL4@gObjMagicA

; 868  : 		}
; 869  : 	}
; 870  : 
; 871  : 	if( MagicDamageC.GetSkillUseType(iMLSkill) == 3 )

  0010a	53		 push	 ebx
  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00110	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  00115	83 f8 03	 cmp	 eax, 3
  00118	0f 85 c3 00 00
	00		 jne	 $LN22@gObjMagicA

; 872  : 	{
; 873  : 		if( iSkillLevel > 1 )

  0011e	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  00122	7e 47		 jle	 SHORT $LN59@gObjMagicA

; 874  : 		{
; 875  : 			for( n = 0; n < MAX_MAGIC; n++)

  00124	33 ff		 xor	 edi, edi
  00126	89 7d 0c	 mov	 DWORD PTR _n$2$[ebp], edi
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@gObjMagicA:

; 876  : 			{
; 877  : 				if( lpObj->Magic[n].IsMagic() == TRUE &&
; 878  : 					lpObj->Magic[n].m_Skill == iMLSkill &&

  00130	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00136	03 cf		 add	 ecx, edi
  00138	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0013d	83 f8 01	 cmp	 eax, 1
  00140	75 1b		 jne	 SHORT $LN5@gObjMagicA
  00142	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00148	39 5c 38 08	 cmp	 DWORD PTR [eax+edi+8], ebx
  0014c	75 0f		 jne	 SHORT $LN5@gObjMagicA
  0014e	8b 55 10	 mov	 edx, DWORD PTR _iSkillLevel$[ebp]
  00151	0f b6 4c 38 04	 movzx	 ecx, BYTE PTR [eax+edi+4]
  00156	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00159	3b c8		 cmp	 ecx, eax
  0015b	74 7b		 je	 SHORT $LN42@gObjMagicA
$LN5@gObjMagicA:

; 874  : 		{
; 875  : 			for( n = 0; n < MAX_MAGIC; n++)

  0015d	ff 45 0c	 inc	 DWORD PTR _n$2$[ebp]
  00160	83 c7 18	 add	 edi, 24			; 00000018H
  00163	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00169	7c c5		 jl	 SHORT $LL7@gObjMagicA
$LN59@gObjMagicA:

; 919  : 	}
; 920  : 
; 921  : 	for( n = 0; n < MAX_MAGIC; n++)

  0016b	33 ff		 xor	 edi, edi
  0016d	89 7d 0c	 mov	 DWORD PTR _n$4$[ebp], edi
$LL13@gObjMagicA:

; 922  : 	{
; 923  : 		if( lpObj->Magic[n].IsMagic() == FALSE )

  00170	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00176	03 cf		 add	 ecx, edi
  00178	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0017d	85 c0		 test	 eax, eax
  0017f	0f 84 f8 00 00
	00		 je	 $LN44@gObjMagicA

; 919  : 	}
; 920  : 
; 921  : 	for( n = 0; n < MAX_MAGIC; n++)

  00185	ff 45 0c	 inc	 DWORD PTR _n$4$[ebp]
  00188	83 c7 18	 add	 edi, 24			; 00000018H
  0018b	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00191	7c dd		 jl	 SHORT $LL13@gObjMagicA

; 941  : 		}
; 942  : 	}
; 943  : 
; 944  : 	LogAdd(lMsg.Get(MSGGET(2,42)),__FILE__,__LINE__);

  00193	68 b0 03 00 00	 push	 944			; 000003b0H
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@
  0019d	68 2a 02 00 00	 push	 554			; 0000022aH
$LN61@gObjMagicA:
  001a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001a7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001ac	50		 push	 eax
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN27@gObjMagicA:

; 909  : 						return -1;
; 910  : 
; 911  : 					return n;
; 912  : 				}
; 913  : 			}
; 914  : 		}
; 915  : 	}
; 916  : 	else
; 917  : 	{
; 918  : 		return -1;

  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	83 c8 ff	 or	 eax, -1
  001bb	5b		 pop	 ebx

; 945  : return -1;
; 946  : }

  001bc	5d		 pop	 ebp
  001bd	c2 0c 00	 ret	 12			; 0000000cH
$LN41@gObjMagicA:

; 864  : 			lpObj->Magic[n].m_Level == iSkillLevel )
; 865  : 		{
; 866  : 			LogAdd(lMsg.Get(MSGGET(2,43)),lpObj->Magic[n].m_Skill,iMLSkill);

  001c0	8b 45 0c	 mov	 eax, DWORD PTR _n$1$[ebp]
  001c3	53		 push	 ebx
  001c4	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001c7	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  001cd	ff 74 c8 08	 push	 DWORD PTR [eax+ecx*8+8]
  001d1	68 2b 02 00 00	 push	 555			; 0000022bH

; 867  : 			return -1;

  001d6	eb ca		 jmp	 SHORT $LN61@gObjMagicA
$LN42@gObjMagicA:

; 879  : 					lpObj->Magic[n].m_Level == iSkillLevel-1 )
; 880  : 				{
; 881  : 					skill = lpObj->Magic[n].UpdateMasterSkill(iMLSkill,iSkillLevel);

  001d8	52		 push	 edx
  001d9	8b 96 a8 06 00
	00		 mov	 edx, DWORD PTR [esi+1704]

; 882  : 
; 883  : 					if( skill < 0 )
; 884  : 						return -1;
; 885  : 
; 886  : 					return n;

  001df	eb 7c		 jmp	 SHORT $LN64@gObjMagicA
$LN22@gObjMagicA:

; 887  : 				}
; 888  : 			}
; 889  : 		}
; 890  : 	}
; 891  : 	else if( MagicDamageC.GetSkillUseType(iMLSkill) == 4 )

  001e1	53		 push	 ebx
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001e7	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  001ec	83 f8 04	 cmp	 eax, 4
  001ef	75 c5		 jne	 SHORT $LN27@gObjMagicA

; 892  : 	{
; 893  : 		WORD iBrand = MagicDamageC.GetBrandOfSkill(iMLSkill);

  001f1	53		 push	 ebx
  001f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001f7	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  001fc	0f b7 c0	 movzx	 eax, ax

; 894  : 
; 895  : 		for( n = 0; n < MAX_MAGIC; n++)

  001ff	33 ff		 xor	 edi, edi
  00201	89 45 08	 mov	 DWORD PTR _iBrand$1$[ebp], eax
  00204	89 7d 0c	 mov	 DWORD PTR _n$3$[ebp], edi
  00207	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@gObjMagicA:

; 896  : 		{
; 897  : 			if( lpObj->Magic[n].IsMagic() == TRUE )

  00210	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00216	03 cf		 add	 ecx, edi
  00218	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0021d	83 f8 01	 cmp	 eax, 1
  00220	75 23		 jne	 SHORT $LN8@gObjMagicA

; 898  : 			{
; 899  : 				if( lpObj->Magic[n].m_Skill == iBrand )

  00222	8b 8e a8 06 00
	00		 mov	 ecx, DWORD PTR [esi+1704]
  00228	8b 45 08	 mov	 eax, DWORD PTR _iBrand$1$[ebp]
  0022b	0f b7 c0	 movzx	 eax, ax
  0022e	39 44 39 08	 cmp	 DWORD PTR [ecx+edi+8], eax
  00232	75 05		 jne	 SHORT $LN30@gObjMagicA

; 900  : 				{
; 901  : 					lpObj->Magic[n].m_bBrand = TRUE;

  00234	c6 44 39 14 01	 mov	 BYTE PTR [ecx+edi+20], 1
$LN30@gObjMagicA:

; 902  : 				}
; 903  : 
; 904  : 				if( lpObj->Magic[n].m_Skill == iMLSkill )

  00239	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  0023f	39 5c 38 08	 cmp	 DWORD PTR [eax+edi+8], ebx
  00243	74 13		 je	 SHORT $LN43@gObjMagicA
$LN8@gObjMagicA:

; 894  : 
; 895  : 		for( n = 0; n < MAX_MAGIC; n++)

  00245	ff 45 0c	 inc	 DWORD PTR _n$3$[ebp]
  00248	83 c7 18	 add	 edi, 24			; 00000018H
  0024b	81 ff 10 0e 00
	00		 cmp	 edi, 3600		; 00000e10H
  00251	7c bd		 jl	 SHORT $LL10@gObjMagicA
  00253	e9 13 ff ff ff	 jmp	 $LN59@gObjMagicA
$LN43@gObjMagicA:

; 905  : 				{
; 906  : 					skill = lpObj->Magic[n].UpdateMasterSkill(iMLSkill,iSkillLevel);

  00258	ff 75 10	 push	 DWORD PTR _iSkillLevel$[ebp]
  0025b	8b d0		 mov	 edx, eax
$LN64@gObjMagicA:
  0025d	8b 7d 0c	 mov	 edi, DWORD PTR _n$3$[ebp]
  00260	53		 push	 ebx
  00261	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00264	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
  00267	e8 00 00 00 00	 call	 ?UpdateMasterSkill@CMagicInf@@QAEHHE@Z ; CMagicInf::UpdateMasterSkill

; 907  : 
; 908  : 					if( skill < 0 )

  0026c	83 c9 ff	 or	 ecx, -1
  0026f	85 c0		 test	 eax, eax
  00271	0f 48 f9	 cmovs	 edi, ecx
  00274	8b c7		 mov	 eax, edi
  00276	5f		 pop	 edi
  00277	5e		 pop	 esi
  00278	5b		 pop	 ebx

; 945  : return -1;
; 946  : }

  00279	5d		 pop	 ebp
  0027a	c2 0c 00	 ret	 12			; 0000000cH
$LN44@gObjMagicA:

; 924  : 		{
; 925  : 			skill = lpObj->Magic[n].Set(iMLSkill,iSkillLevel);

  0027d	8b 7d 0c	 mov	 edi, DWORD PTR _n$4$[ebp]
  00280	8b 86 a8 06 00
	00		 mov	 eax, DWORD PTR [esi+1704]
  00286	ff 75 10	 push	 DWORD PTR _iSkillLevel$[ebp]
  00289	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0028c	53		 push	 ebx
  0028d	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  00290	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set

; 926  : 
; 927  : 			if( skill < 0 )

  00295	85 c0		 test	 eax, eax
  00297	79 14		 jns	 SHORT $LN34@gObjMagicA

; 928  : 			{
; 929  : 				LogAdd(lMsg.Get(MSGGET(2,41)),__FILE__,__LINE__);

  00299	68 a1 03 00 00	 push	 929			; 000003a1H
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@
  002a3	68 29 02 00 00	 push	 553			; 00000229H

; 930  : 				return -1;

  002a8	e9 f5 fe ff ff	 jmp	 $LN61@gObjMagicA
$LN34@gObjMagicA:

; 931  : 			}
; 932  : 
; 933  : 			if( MagicDamageC.GetBrandOfSkill(iMLSkill) == 0 &&

  002ad	53		 push	 ebx
  002ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002b3	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  002b8	66 85 c0	 test	 ax, ax
  002bb	75 23		 jne	 SHORT $LN35@gObjMagicA
  002bd	53		 push	 ebx
  002be	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  002c3	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType
  002c8	83 f8 04	 cmp	 eax, 4
  002cb	75 13		 jne	 SHORT $LN35@gObjMagicA

; 934  : 				MagicDamageC.GetSkillUseType(iMLSkill) == 4 )
; 935  : 			{
; 936  : 				GCMagicListOneSend(lpObj->m_Index,n,iMLSkill,iSkillLevel,0,0);

  002cd	6a 00		 push	 0
  002cf	6a 00		 push	 0
  002d1	ff 75 10	 push	 DWORD PTR _iSkillLevel$[ebp]
  002d4	53		 push	 ebx
  002d5	57		 push	 edi
  002d6	ff 36		 push	 DWORD PTR [esi]
  002d8	e8 00 00 00 00	 call	 ?GCMagicListOneSend@@YAXHDGEEE@Z ; GCMagicListOneSend
  002dd	83 c4 18	 add	 esp, 24			; 00000018H
$LN35@gObjMagicA:

; 937  : 			}
; 938  : 
; 939  : 			lpObj->MagicCount++;

  002e0	fe 86 ac 06 00
	00		 inc	 BYTE PTR [esi+1708]

; 940  : 			return n;

  002e6	8b c7		 mov	 eax, edi
  002e8	5f		 pop	 edi
  002e9	5e		 pop	 esi
  002ea	5b		 pop	 ebx

; 945  : return -1;
; 946  : }

  002eb	5d		 pop	 ebp
  002ec	c2 0c 00	 ret	 12			; 0000000cH
?gObjMagicAdd_MLS@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::gObjMagicAdd_MLS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z
_TEXT	SEGMENT
_iMLSkill$ = 8						; size = 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill, COMDAT
; _this$ = ecx

; 811  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 812  : 	if( !this->CheckMasterLevelSkill(iMLSkill) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iMLSkill$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0000d	83 c9 ff	 or	 ecx, -1
  00010	85 c0		 test	 eax, eax
  00012	0f 44 f1	 cmove	 esi, ecx
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi

; 813  : 		return -1;
; 814  : 	return iMLSkill;
; 815  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?IsExistMLSBasedSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iSkill$ = 12						; size = 4
?IsExistMLSBasedSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::IsExistMLSBasedSkill, COMDAT
; _this$ = ecx

; 795  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 796  : 	int iBaseMLS = 0;
; 797  : 
; 798  : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0000b	33 f6		 xor	 esi, esi
  0000d	0f 1f 00	 npad	 3
$LL4@IsExistMLS:

; 799  : 	{
; 800  : 		if( lpObj->Magic[iCount].IsMagic() == TRUE &&
; 801  : 			this->CheckMasterLevelSkill(lpObj->Magic[iCount].m_Skill) &&

  00010	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00016	03 ce		 add	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 31		 jne	 SHORT $LN2@IsExistMLS
  00022	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00028	8b cb		 mov	 ecx, ebx
  0002a	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  0002e	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00033	85 c0		 test	 eax, eax
  00035	74 1c		 je	 SHORT $LN2@IsExistMLS
  00037	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00042	ff 74 30 08	 push	 DWORD PTR [eax+esi+8]
  00046	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  0004b	0f b7 c0	 movzx	 eax, ax
  0004e	39 45 0c	 cmp	 DWORD PTR _iSkill$[ebp], eax
  00051	74 14		 je	 SHORT $LN8@IsExistMLS
$LN2@IsExistMLS:

; 796  : 	int iBaseMLS = 0;
; 797  : 
; 798  : 	for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00053	83 c6 18	 add	 esi, 24			; 00000018H
  00056	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0005c	7c b2		 jl	 SHORT $LL4@IsExistMLS

; 805  : 		}
; 806  : 	}
; 807  : 	return false;

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	33 c0		 xor	 eax, eax
  00062	5b		 pop	 ebx

; 808  : }

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN8@IsExistMLS:
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 802  : 			iSkill == MagicDamageC.GetBrandOfSkill(lpObj->Magic[iCount].m_Skill))
; 803  : 		{
; 804  : 			return true;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	5b		 pop	 ebx

; 808  : }

  0006f	5d		 pop	 ebp
  00070	c2 08 00	 ret	 8
?IsExistMLSBasedSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::IsExistMLSBasedSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z
_TEXT	SEGMENT
_iMLSkill$ = 8						; size = 4
?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z PROC ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill, COMDAT
; _this$ = ecx

; 786  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 787  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  00003	ff 75 08	 push	 DWORD PTR _iMLSkill$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0000b	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 788  : 
; 789  : 	if( iSkillUseType == 3 || iSkillUseType == 4 )

  00010	83 f8 03	 cmp	 eax, 3
  00013	74 0b		 je	 SHORT $LN3@CheckMaste
  00015	83 f8 04	 cmp	 eax, 4
  00018	74 06		 je	 SHORT $LN3@CheckMaste

; 791  : 	return false;

  0001a	33 c0		 xor	 eax, eax

; 792  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@CheckMaste:

; 790  : 		return true;

  00020	b8 01 00 00 00	 mov	 eax, 1

; 792  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iCompleteSkill1$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_iBrandOfSkill1$1$ = 12					; size = 4
_iMLSkill$ = 12						; size = 4
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 697  : 	int iSkillUseType = MagicDamageC.GetSkillUseType(iMLSkill);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00012	53		 push	 ebx
  00013	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 698  : 
; 699  : 	if( iSkillUseType == 4 )

  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	83 f8 04	 cmp	 eax, 4
  0001e	75 57		 jne	 SHORT $LN15@CheckCompl

; 700  : 	{
; 701  : 		WORD iBrandOfSkill = MagicDamageC.GetBrandOfSkill(iMLSkill);

  00020	53		 push	 ebx
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00026	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  0002b	0f b7 d8	 movzx	 ebx, ax

; 702  : 		int iCompleteSkill = 0;
; 703  : 
; 704  : 		if( iBrandOfSkill > 0 )

  0002e	66 85 db	 test	 bx, bx
  00031	0f 84 3c 01 00
	00		 je	 $LN29@CheckCompl

; 705  : 		{
; 706  : 			for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00037	33 f6		 xor	 esi, esi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CheckCompl:

; 707  : 			{
; 708  : 				if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00040	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00046	03 ce		 add	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0004d	83 f8 01	 cmp	 eax, 1
  00050	75 0c		 jne	 SHORT $LN2@CheckCompl

; 709  : 				{
; 710  : 					if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill )

  00052	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00058	39 5c 31 08	 cmp	 DWORD PTR [ecx+esi+8], ebx
  0005c	74 16		 je	 SHORT $LN50@CheckCompl
$LN2@CheckCompl:

; 705  : 		{
; 706  : 			for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  0005e	83 c6 18	 add	 esi, 24			; 00000018H
  00061	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00067	7c d7		 jl	 SHORT $LL4@CheckCompl

; 778  : 	{
; 779  : 		return true;
; 780  : 	}
; 781  : 
; 782  : 	return 0;

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	33 c0		 xor	 eax, eax
  0006d	5b		 pop	 ebx

; 783  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
$LN50@CheckCompl:
  00074	8b 5d 0c	 mov	 ebx, DWORD PTR _iMLSkill$[ebp]
$LN15@CheckCompl:

; 711  : 					{
; 712  : 						iCompleteSkill = TRUE;
; 713  : 						break;
; 714  : 					}
; 715  : 				}
; 716  : 			}
; 717  : 		}
; 718  : 
; 719  : 		if( iCompleteSkill == 0 )
; 720  : 			return 0;
; 721  : 	}
; 722  : 
; 723  : 	int iBrandOfSkill1 = this->GetParentSkill1(lpObj->Class,iMLSkill);

  00077	0f b7 b7 90 00
	00 00		 movzx	 esi, WORD PTR [edi+144]
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00081	53		 push	 ebx
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?GetParentSkill1@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill1

; 724  : 	int iBrandOfSkill2 = this->GetParentSkill2(lpObj->Class,iMLSkill);

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0008b	53		 push	 ebx
  0008c	56		 push	 esi
  0008d	89 45 0c	 mov	 DWORD PTR _iBrandOfSkill1$1$[ebp], eax
  00090	e8 00 00 00 00	 call	 ?GetParentSkill2@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetParentSkill2
  00095	8b d8		 mov	 ebx, eax

; 725  : 
; 726  : 	if( iBrandOfSkill1 <= 0 && iBrandOfSkill2 <= 0 )

  00097	8b 45 0c	 mov	 eax, DWORD PTR _iBrandOfSkill1$1$[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	7f 08		 jg	 SHORT $LN16@CheckCompl
  0009e	85 db		 test	 ebx, ebx
  000a0	0f 8e 9c 00 00
	00		 jle	 $LN51@CheckCompl
$LN16@CheckCompl:

; 727  : 		return true;
; 728  : 
; 729  : 	int iCompleteSkill1 = 0;

  000a6	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iCompleteSkill1$1$[ebp], 0

; 730  : 
; 731  : 	if( iBrandOfSkill1 > 0 )

  000ad	85 c0		 test	 eax, eax
  000af	7e 3e		 jle	 SHORT $LN47@CheckCompl

; 732  : 	{
; 733  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  000b1	33 f6		 xor	 esi, esi
$LL7@CheckCompl:

; 734  : 		{
; 735  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  000b3	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  000b9	03 ce		 add	 ecx, esi
  000bb	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000c0	83 f8 01	 cmp	 eax, 1
  000c3	75 16		 jne	 SHORT $LN5@CheckCompl

; 736  : 			{
; 737  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill1 &&

  000c5	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR _iBrandOfSkill1$1$[ebp]
  000ce	39 4c 30 08	 cmp	 DWORD PTR [eax+esi+8], ecx
  000d2	75 07		 jne	 SHORT $LN5@CheckCompl
  000d4	80 7c 30 04 0a	 cmp	 BYTE PTR [eax+esi+4], 10 ; 0000000aH
  000d9	73 0d		 jae	 SHORT $LN35@CheckCompl
$LN5@CheckCompl:

; 732  : 	{
; 733  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  000db	83 c6 18	 add	 esi, 24			; 00000018H
  000de	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  000e4	7c cd		 jl	 SHORT $LL7@CheckCompl
  000e6	eb 07		 jmp	 SHORT $LN47@CheckCompl
$LN35@CheckCompl:

; 738  : 					lpObj->Magic[iCount].m_Level >= 10 )
; 739  : 				{
; 740  : 					iCompleteSkill1 = TRUE;

  000e8	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _iCompleteSkill1$1$[ebp], 1
$LN47@CheckCompl:

; 741  : 					break;
; 742  : 				}
; 743  : 			}
; 744  : 		}
; 745  : 	}
; 746  : 
; 747  : 	int iCompleteSkill2 = 0;

  000ef	33 c9		 xor	 ecx, ecx

; 748  : 
; 749  : 	if( iBrandOfSkill2 > 0 )

  000f1	85 db		 test	 ebx, ebx
  000f3	7e 3d		 jle	 SHORT $LN48@CheckCompl

; 750  : 	{
; 751  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  000f5	33 f6		 xor	 esi, esi
  000f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@CheckCompl:

; 752  : 		{
; 753  : 			if( lpObj->Magic[iCount].IsMagic() == TRUE )

  00100	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00106	03 ce		 add	 ecx, esi
  00108	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  0010d	83 f8 01	 cmp	 eax, 1
  00110	75 13		 jne	 SHORT $LN8@CheckCompl

; 754  : 			{
; 755  : 				if( lpObj->Magic[iCount].m_Skill == iBrandOfSkill2 &&

  00112	8b 87 a8 06 00
	00		 mov	 eax, DWORD PTR [edi+1704]
  00118	39 5c 30 08	 cmp	 DWORD PTR [eax+esi+8], ebx
  0011c	75 07		 jne	 SHORT $LN8@CheckCompl
  0011e	80 7c 30 04 0a	 cmp	 BYTE PTR [eax+esi+4], 10 ; 0000000aH
  00123	73 2b		 jae	 SHORT $LN36@CheckCompl
$LN8@CheckCompl:

; 750  : 	{
; 751  : 		for(int iCount = 0; iCount < MAX_MAGIC; iCount++)

  00125	83 c6 18	 add	 esi, 24			; 00000018H
  00128	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0012e	7c d0		 jl	 SHORT $LL10@CheckCompl
  00130	33 c9		 xor	 ecx, ecx
$LN48@CheckCompl:

; 759  : 					break;
; 760  : 				}
; 761  : 			}
; 762  : 		}
; 763  : 	}
; 764  : 
; 765  : 	int iSum = iBrandOfSkill1+iBrandOfSkill2;

  00132	8b 55 0c	 mov	 edx, DWORD PTR _iBrandOfSkill1$1$[ebp]
  00135	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]

; 766  : 
; 767  : 	if( iSum == iBrandOfSkill1 )

  00138	3b c2		 cmp	 eax, edx
  0013a	75 1b		 jne	 SHORT $LN23@CheckCompl

; 768  : 	{
; 769  : 		if( iCompleteSkill1 != 0 )

  0013c	83 7d 08 00	 cmp	 DWORD PTR _iCompleteSkill1$1$[ebp], 0
  00140	74 31		 je	 SHORT $LN29@CheckCompl
$LN51@CheckCompl:
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi

; 770  : 			return true;

  00144	b8 01 00 00 00	 mov	 eax, 1
  00149	5b		 pop	 ebx

; 783  : }

  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c2 08 00	 ret	 8
$LN36@CheckCompl:

; 756  : 					lpObj->Magic[iCount].m_Level >= 10 )
; 757  : 				{
; 758  : 					iCompleteSkill2 = TRUE;

  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	eb db		 jmp	 SHORT $LN48@CheckCompl
$LN23@CheckCompl:

; 771  : 	}
; 772  : 	else if( iSum == iBrandOfSkill2 )

  00157	3b c3		 cmp	 eax, ebx
  00159	75 12		 jne	 SHORT $LN26@CheckCompl
$LN52@CheckCompl:

; 773  : 	{
; 774  : 		if( iCompleteSkill2 != 0 )

  0015b	85 c9		 test	 ecx, ecx
  0015d	74 14		 je	 SHORT $LN29@CheckCompl

; 775  : 			return true;

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	b8 01 00 00 00	 mov	 eax, 1
  00166	5b		 pop	 ebx

; 783  : }

  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 08 00	 ret	 8
$LN26@CheckCompl:

; 776  : 	}
; 777  : 	else if( iCompleteSkill1 != 0 && iCompleteSkill2 != 0 )

  0016d	83 7d 08 00	 cmp	 DWORD PTR _iCompleteSkill1$1$[ebp], 0
  00171	75 e8		 jne	 SHORT $LN52@CheckCompl
$LN29@CheckCompl:
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi

; 778  : 	{
; 779  : 		return true;
; 780  : 	}
; 781  : 
; 782  : 	return 0;

  00175	33 c0		 xor	 eax, eax
  00177	5b		 pop	 ebx

; 783  : }

  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CheckSkillCondition, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 637  : 	if( !gObjIsConnected(lpObj) )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 19		 jne	 SHORT $LN2@CheckSkill

; 638  : 	{
; 639  : 		GCResultSend(lpObj->m_Index,0x51,3);

  00017	6a 03		 push	 3
  00019	6a 51		 push	 81			; 00000051H
  0001b	ff 36		 push	 DWORD PTR [esi]
  0001d	e8 00 00 00 00	 call	 ?GCResultSend@@YAXHEE@Z	; GCResultSend
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 640  : 		return 2;

  00025	b8 02 00 00 00	 mov	 eax, 2
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx

; 693  : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@CheckSkill:
  00030	57		 push	 edi

; 641  : 	}
; 642  : 
; 643  : 	if ( iMLSkill <0 || iMLSkill > MAX_SKILL -1 )

  00031	8b 7d 0c	 mov	 edi, DWORD PTR _iMLSkill$[ebp]
  00034	81 ff 89 02 00
	00		 cmp	 edi, 649		; 00000289H
  0003a	0f 87 99 00 00
	00		 ja	 $LN4@CheckSkill

; 647  : 	}
; 648  : 
; 649  : 	// g_MasterLevelSystem.IsMasterLevelUser
; 650  : 
; 651  : #if (__CUSTOM__ == 1)
; 652  : 	if( lpObj->bMasterInfoLoaded == FALSE || lpObj->ChangeUP2 != 1 )

  00040	83 be c8 00 00
	00 00		 cmp	 DWORD PTR [esi+200], 0
  00047	0f 84 80 00 00
	00		 je	 $LN6@CheckSkill
  0004d	80 be 94 00 00
	00 01		 cmp	 BYTE PTR [esi+148], 1
  00054	75 77		 jne	 SHORT $LN6@CheckSkill

; 655  : 	}
; 656  : #else
; 657  : 	if( !g_MasterExp.IsEnabled(lpObj) )
; 658  : 		return 2;
; 659  : #endif
; 660  : 
; 661  : 	if( !this->CheckMasterLevelSkill(iMLSkill) )

  00056	57		 push	 edi
  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0005e	85 c0		 test	 eax, eax
  00060	74 53		 je	 SHORT $LN16@CheckSkill

; 662  : 	{
; 663  : 		return 4;
; 664  : 	}
; 665  : 
; 666  : 	if( this->GetMaxPointOfMasterSkill(lpObj->Class,iMLSkill) < iSkillLevel )

  00062	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  00069	8b cb		 mov	 ecx, ebx
  0006b	57		 push	 edi
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ?GetMaxPointOfMasterSkill@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetMaxPointOfMasterSkill
  00072	3b 45 10	 cmp	 eax, DWORD PTR _iSkillLevel$[ebp]
  00075	7c 3e		 jl	 SHORT $LN16@CheckSkill

; 667  : 	{
; 668  : 		return 4;
; 669  : 	}
; 670  : 
; 671  : 	int iReqMLPoint = this->GetRequireMLPoint(lpObj->Class,iMLSkill);

  00077	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  0007e	8b cb		 mov	 ecx, ebx
  00080	57		 push	 edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?GetRequireMLPoint@CMasterLevelSkillTreeSystem@@QAEHHH@Z ; CMasterLevelSkillTreeSystem::GetRequireMLPoint

; 672  : 
; 673  : 	if( iReqMLPoint < 0 )

  00087	85 c0		 test	 eax, eax
  00089	78 2a		 js	 SHORT $LN16@CheckSkill

; 674  : 	{
; 675  : 		return 4;
; 676  : 	}
; 677  : 
; 678  : 	if( lpObj->MasterPoint < iReqMLPoint )

  0008b	39 86 c0 00 00
	00		 cmp	 DWORD PTR [esi+192], eax
  00091	7c 22		 jl	 SHORT $LN16@CheckSkill

; 679  : 	{
; 680  : 		return 4;
; 681  : 	}
; 682  : 
; 683  : 	if( iSkillLevel == 1 )

  00093	83 7d 10 01	 cmp	 DWORD PTR _iSkillLevel$[ebp], 1
  00097	75 28		 jne	 SHORT $LN13@CheckSkill

; 684  : 	{
; 685  : 		if( !this->CheckCompleteBrandOfSkill(lpObj,iMLSkill) )

  00099	57		 push	 edi
  0009a	56		 push	 esi
  0009b	8b cb		 mov	 ecx, ebx
  0009d	e8 00 00 00 00	 call	 ?CheckCompleteBrandOfSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::CheckCompleteBrandOfSkill
  000a2	85 c0		 test	 eax, eax
  000a4	74 0f		 je	 SHORT $LN16@CheckSkill

; 686  : 			return 4;
; 687  : 
; 688  : 		if( !this->CheckPreviousRankSkill(lpObj,iMLSkill,iSkillLevel) )

  000a6	6a 01		 push	 1
  000a8	57		 push	 edi
  000a9	56		 push	 esi
  000aa	8b cb		 mov	 ecx, ebx
  000ac	e8 00 00 00 00	 call	 ?CheckPreviousRankSkill@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::CheckPreviousRankSkill
  000b1	85 c0		 test	 eax, eax
  000b3	75 0c		 jne	 SHORT $LN13@CheckSkill
$LN16@CheckSkill:
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi

; 689  : 			return 4;

  000b7	b8 04 00 00 00	 mov	 eax, 4
  000bc	5b		 pop	 ebx

; 693  : }

  000bd	5d		 pop	 ebp
  000be	c2 0c 00	 ret	 12			; 0000000cH
$LN13@CheckSkill:
  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi

; 690  : 	}
; 691  : 
; 692  : return 1;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	5b		 pop	 ebx

; 693  : }

  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
$LN6@CheckSkill:
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi

; 653  : 	{
; 654  : 		return 2;

  000cf	b8 02 00 00 00	 mov	 eax, 2
  000d4	5b		 pop	 ebx

; 693  : }

  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
$LN4@CheckSkill:

; 644  : 	{
; 645  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  000d9	68 85 02 00 00	 push	 645			; 00000285H
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@
  000e3	68 c9 01 00 00	 push	 457			; 000001c9H
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000ed	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 646  : 		return 3;

  000fb	b8 03 00 00 00	 mov	 eax, 3
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx

; 693  : }

  00103	5d		 pop	 ebp
  00104	c2 0c 00	 ret	 12			; 0000000cH
?CheckSkillCondition@CMasterLevelSkillTreeSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CheckSkillCondition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?CalcPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iSkillValue$ = 12					; size = 4
_iMLSkill$ = 12						; size = 4
_iSkillLevel$ = 16					; size = 4
?CalcPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CMasterLevelSkillTreeSystem::CalcPassiveSkillData, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 285  : 	int iReqStr = MagicDamageC.GetRequireStrength(iMLSkill);

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _iMLSkill$[ebp]
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00011	57		 push	 edi
  00012	e8 00 00 00 00	 call	 ?GetRequireStrength@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetRequireStrength

; 286  : 
; 287  : 	if( lpObj->Strength < iReqStr )

  00017	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001a	0f b7 96 d0 00
	00 00		 movzx	 edx, WORD PTR [esi+208]
  00021	3b d0		 cmp	 edx, eax
  00023	0f 8c 59 08 00
	00		 jl	 $LN100@CalcPassiv

; 288  : 		return;
; 289  : 
; 290  : 	int iReqDex = MagicDamageC.GetRequireDexterity(iMLSkill);

  00029	57		 push	 edi
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0002f	e8 00 00 00 00	 call	 ?GetRequireDexterity@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetRequireDexterity

; 291  : 
; 292  : 	if( lpObj->Dexterity < iReqDex )

  00034	0f b7 96 d2 00
	00 00		 movzx	 edx, WORD PTR [esi+210]
  0003b	3b d0		 cmp	 edx, eax
  0003d	0f 8c 3f 08 00
	00		 jl	 $LN100@CalcPassiv

; 293  : 		return;
; 294  : 
; 295  : 	float iSkillValue = this->GetMasterSkillValue(MagicDamageC.SkillGet(iMLSkill), iSkillLevel);

  00043	53		 push	 ebx
  00044	8b 5d 10	 mov	 ebx, DWORD PTR _iSkillLevel$[ebp]
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004c	53		 push	 ebx
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 296  : 
; 297  : 	int iBaseMLS = this->GetBaseMasterLevelSkill(iMLSkill);

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005f	57		 push	 edi
  00060	d9 5d 0c	 fstp	 DWORD PTR _iSkillValue$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 298  : 
; 299  : 	switch( iBaseMLS )

  00068	05 d4 fe ff ff	 add	 eax, -300		; fffffed4H
  0006d	3d 34 01 00 00	 cmp	 eax, 308		; 00000134H
  00072	0f 87 09 08 00
	00		 ja	 $LN103@CalcPassiv
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN102@CalcPassiv[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN105@CalcPassiv[eax*4]
$LN6@CalcPassiv:

; 300  : 	{
; 301  : 	case 325:
; 302  : 	case 599:
; 303  : 		lpObj->m_MPSkillOpt.MpsAttackSuccessRate = iSkillValue;

  00086	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0008b	5b		 pop	 ebx
  0008c	5f		 pop	 edi
  0008d	f3 0f 11 86 b8
	06 00 00	 movss	 DWORD PTR [esi+1720], xmm0
  00095	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 0c 00	 ret	 12			; 0000000cH
$LN7@CalcPassiv:

; 304  : 		break;
; 305  : 	case 347:
; 306  : 	case 603:
; 307  : 		lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate = iSkillValue;

  0009c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  000a1	5b		 pop	 ebx
  000a2	5f		 pop	 edi
  000a3	f3 0f 11 86 c0
	06 00 00	 movss	 DWORD PTR [esi+1728], xmm0
  000ab	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 0c 00	 ret	 12			; 0000000cH
$LN8@CalcPassiv:

; 308  : 		break;
; 309  : 	case 301:
; 310  : 	case 579:
; 311  : 		lpObj->m_MPSkillOpt.MpsPVPBlockingRate = iSkillValue;

  000b2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  000b7	5b		 pop	 ebx
  000b8	5f		 pop	 edi
  000b9	f3 0f 11 86 c4
	06 00 00	 movss	 DWORD PTR [esi+1732], xmm0
  000c1	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 0c 00	 ret	 12			; 0000000cH
$LN9@CalcPassiv:

; 312  : 		break;
; 313  : 	case 300:
; 314  : 	case 578:
; 315  : 		lpObj->m_MPSkillOpt.MpsDownDur1 = iSkillValue;

  000c8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]

; 316  : 		lpObj->m_MPSkillOpt.btMpsDownDur1Level = iSkillLevel;

  000cd	88 9e cc 06 00
	00		 mov	 BYTE PTR [esi+1740], bl
  000d3	5b		 pop	 ebx
  000d4	5f		 pop	 edi
  000d5	f3 0f 11 86 c8
	06 00 00	 movss	 DWORD PTR [esi+1736], xmm0
  000dd	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 0c 00	 ret	 12			; 0000000cH
$LN10@CalcPassiv:

; 317  : 		break;
; 318  : 	case 305:
; 319  : 	case 583:
; 320  : 		lpObj->m_MPSkillOpt.MpsDownDur2 = iSkillValue;

  000e4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  000e9	5b		 pop	 ebx
  000ea	5f		 pop	 edi
  000eb	f3 0f 11 86 d0
	06 00 00	 movss	 DWORD PTR [esi+1744], xmm0
  000f3	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 0c 00	 ret	 12			; 0000000cH
$LN11@CalcPassiv:

; 321  : 		break;
; 322  : 	case 312:
; 323  : 	case 590:
; 324  : 		lpObj->m_MPSkillOpt.MpsDownDur3 = iSkillValue;

  000fa	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  000ff	5b		 pop	 ebx
  00100	5f		 pop	 edi
  00101	f3 0f 11 86 d4
	06 00 00	 movss	 DWORD PTR [esi+1748], xmm0
  00109	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 0c 00	 ret	 12			; 0000000cH
$LN12@CalcPassiv:

; 325  : 		break;
; 326  : 	case 304:
; 327  : 	case 582:
; 328  : 		lpObj->m_MPSkillOpt.MpsResistancePoison = iSkillValue;

  00110	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00115	5b		 pop	 ebx
  00116	5f		 pop	 edi
  00117	f3 0f 11 86 d8
	06 00 00	 movss	 DWORD PTR [esi+1752], xmm0
  0011f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 0c 00	 ret	 12			; 0000000cH
$LN13@CalcPassiv:

; 329  : 		break;
; 330  : 	case 308:
; 331  : 	case 586:
; 332  : 		lpObj->m_MPSkillOpt.MpsResistanceThunder = iSkillValue;

  00126	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0012b	5b		 pop	 ebx
  0012c	5f		 pop	 edi
  0012d	f3 0f 11 86 dc
	06 00 00	 movss	 DWORD PTR [esi+1756], xmm0
  00135	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 0c 00	 ret	 12			; 0000000cH
$LN14@CalcPassiv:

; 333  : 		break;
; 334  : 	case 311:
; 335  : 	case 589:
; 336  : 		lpObj->m_MPSkillOpt.MpsResistanceIce = iSkillValue;

  0013c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00141	5b		 pop	 ebx
  00142	5f		 pop	 edi
  00143	f3 0f 11 86 e0
	06 00 00	 movss	 DWORD PTR [esi+1760], xmm0
  0014b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 0c 00	 ret	 12			; 0000000cH
$LN15@CalcPassiv:

; 337  : 		break;
; 338  : 	case 307:
; 339  : 	case 585:
; 340  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverLife = iSkillValue;

  00152	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00157	5b		 pop	 ebx
  00158	5f		 pop	 edi
  00159	f3 0f 11 86 e4
	06 00 00	 movss	 DWORD PTR [esi+1764], xmm0
  00161	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 0c 00	 ret	 12			; 0000000cH
$LN16@CalcPassiv:

; 341  : 		break;
; 342  : 	case 313:
; 343  : 	case 591:
; 344  : 		lpObj->m_MPSkillOpt.MpsBlockingRate = iSkillValue;

  00168	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0016d	5b		 pop	 ebx
  0016e	5f		 pop	 edi
  0016f	f3 0f 11 86 bc
	06 00 00	 movss	 DWORD PTR [esi+1724], xmm0
  00177	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 0c 00	 ret	 12			; 0000000cH
$LN17@CalcPassiv:

; 345  : 		break;
; 346  : 	case 309:
; 347  : 	case 587:
; 348  : 		lpObj->m_MPSkillOpt.MpsDefence = iSkillValue;

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00183	5b		 pop	 ebx
  00184	5f		 pop	 edi
  00185	f3 0f 11 86 dc
	07 00 00	 movss	 DWORD PTR [esi+2012], xmm0
  0018d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 0c 00	 ret	 12			; 0000000cH
$LN18@CalcPassiv:

; 349  : 		break;
; 350  : 	case 334:
; 351  : 	case 600:
; 352  : 		lpObj->m_MPSkillOpt.MpsMaxHP = iSkillValue;

  00194	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00199	5b		 pop	 ebx
  0019a	5f		 pop	 edi
  0019b	f3 0f 11 86 e0
	07 00 00	 movss	 DWORD PTR [esi+2016], xmm0
  001a3	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 0c 00	 ret	 12			; 0000000cH
$LN19@CalcPassiv:

; 353  : 		break;
; 354  : 	case 338:
; 355  : 	case 601:
; 356  : 		lpObj->m_MPSkillOpt.MpsMaxMP = iSkillValue;

  001aa	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  001af	5b		 pop	 ebx
  001b0	5f		 pop	 edi
  001b1	f3 0f 11 86 e8
	07 00 00	 movss	 DWORD PTR [esi+2024], xmm0
  001b9	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c2 0c 00	 ret	 12			; 0000000cH
$LN20@CalcPassiv:

; 357  : 		break;
; 358  : 	case 341:
; 359  : 		lpObj->m_MPSkillOpt.MpsMaxBP = iSkillValue;

  001c0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  001c5	5b		 pop	 ebx
  001c6	5f		 pop	 edi
  001c7	f3 0f 11 86 e4
	07 00 00	 movss	 DWORD PTR [esi+2020], xmm0
  001cf	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c2 0c 00	 ret	 12			; 0000000cH
$LN21@CalcPassiv:

; 360  : 		break;
; 361  : 	case 362:
; 362  : 	case 608:
; 363  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetMana = iSkillValue;

  001d6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  001db	5b		 pop	 ebx
  001dc	5f		 pop	 edi
  001dd	f3 0f 11 86 ec
	07 00 00	 movss	 DWORD PTR [esi+2028], xmm0
  001e5	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 0c 00	 ret	 12			; 0000000cH
$LN22@CalcPassiv:

; 364  : 		break;
; 365  : 	case 359:
; 366  : 	case 606:
; 367  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetLife = iSkillValue;

  001ec	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  001f1	5b		 pop	 ebx
  001f2	5f		 pop	 edi
  001f3	f3 0f 11 86 f0
	07 00 00	 movss	 DWORD PTR [esi+2032], xmm0
  001fb	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 0c 00	 ret	 12			; 0000000cH
$LN23@CalcPassiv:

; 368  : 		break;
; 369  : 	case 358:
; 370  : 	case 605:
; 371  : 		lpObj->m_MPSkillOpt.MpsMonsterDieGetSD = iSkillValue;

  00202	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00207	5b		 pop	 ebx
  00208	5f		 pop	 edi
  00209	f3 0f 11 86 f4
	07 00 00	 movss	 DWORD PTR [esi+2036], xmm0
  00211	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c2 0c 00	 ret	 12			; 0000000cH
$LN24@CalcPassiv:

; 372  : 		break;
; 373  : 	case 303:
; 374  : 	case 581:
; 375  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverMana = iSkillValue;

  00218	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0021d	5b		 pop	 ebx
  0021e	5f		 pop	 edi
  0021f	f3 0f 11 86 e8
	06 00 00	 movss	 DWORD PTR [esi+1768], xmm0
  00227	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 0c 00	 ret	 12			; 0000000cH
$LN25@CalcPassiv:

; 376  : 		break;
; 377  : 	case 310:
; 378  : 	case 588:
; 379  : 		lpObj->m_MPSkillOpt.MpsAutoRecoverAG = iSkillValue;

  0022e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00233	5b		 pop	 ebx
  00234	5f		 pop	 edi
  00235	f3 0f 11 86 ec
	06 00 00	 movss	 DWORD PTR [esi+1772], xmm0
  0023d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0023e	8b e5		 mov	 esp, ebp
  00240	5d		 pop	 ebp
  00241	c2 0c 00	 ret	 12			; 0000000cH
$LN26@CalcPassiv:

; 380  : 		break;
; 381  : 	case 302:
; 382  : 	case 580:
; 383  : 		lpObj->m_MPSkillOpt.MpsMaxSD = iSkillValue;

  00244	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00249	5b		 pop	 ebx
  0024a	5f		 pop	 edi
  0024b	f3 0f 11 86 fc
	07 00 00	 movss	 DWORD PTR [esi+2044], xmm0
  00253	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00254	8b e5		 mov	 esp, ebp
  00256	5d		 pop	 ebp
  00257	c2 0c 00	 ret	 12			; 0000000cH
$LN27@CalcPassiv:

; 384  : 		break;
; 385  : 	case 306:
; 386  : 	case 584:
; 387  : 		lpObj->m_MPSkillOpt.MpsSDSpeed = iSkillValue;

  0025a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0025f	5b		 pop	 ebx
  00260	5f		 pop	 edi
  00261	f3 0f 11 86 00
	08 00 00	 movss	 DWORD PTR [esi+2048], xmm0
  00269	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 0c 00	 ret	 12			; 0000000cH
$LN28@CalcPassiv:

; 388  : 		break;
; 389  : 	/*case 364:
; 390  : 		lpObj->m_MPSkillOpt.MpsMaxAttackDamage = iSkillValue;
; 391  : 		break;
; 392  : 	case 361:
; 393  : 		lpObj->m_MPSkillOpt.MpsMinAttackDamage = iSkillValue;
; 394  : 		break;*/
; 395  : 	case 357:
; 396  : 	case 604:
; 397  : 		lpObj->m_MPSkillOpt.MpsDecreaseMana = iSkillValue;

  00270	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00275	5b		 pop	 ebx
  00276	5f		 pop	 edi
  00277	f3 0f 11 86 0c
	08 00 00	 movss	 DWORD PTR [esi+2060], xmm0
  0027f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00280	8b e5		 mov	 esp, ebp
  00282	5d		 pop	 ebp
  00283	c2 0c 00	 ret	 12			; 0000000cH
$LN29@CalcPassiv:

; 398  : 		break;
; 399  : 	case 407:
; 400  : 		lpObj->m_MPSkillOpt.MpsMaxMagicDamage = iSkillValue;

  00286	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0028b	5b		 pop	 ebx
  0028c	5f		 pop	 edi
  0028d	f3 0f 11 86 10
	08 00 00	 movss	 DWORD PTR [esi+2064], xmm0
  00295	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c2 0c 00	 ret	 12			; 0000000cH
$LN30@CalcPassiv:

; 401  : 		break;
; 402  : 	case 405:
; 403  : 		lpObj->m_MPSkillOpt.MpsMinMagicDamage = iSkillValue;

  0029c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  002a1	5b		 pop	 ebx
  002a2	5f		 pop	 edi
  002a3	f3 0f 11 86 14
	08 00 00	 movss	 DWORD PTR [esi+2068], xmm0
  002ab	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c2 0c 00	 ret	 12			; 0000000cH
$LN31@CalcPassiv:

; 404  : 		break;
; 405  : 	case 535:
; 406  : 		lpObj->m_MPSkillOpt.MpsPetDurDownSpeed = iSkillValue;

  002b2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  002b7	5b		 pop	 ebx
  002b8	5f		 pop	 edi
  002b9	f3 0f 11 86 18
	08 00 00	 movss	 DWORD PTR [esi+2072], xmm0
  002c1	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  002c2	8b e5		 mov	 esp, ebp
  002c4	5d		 pop	 ebp
  002c5	c2 0c 00	 ret	 12			; 0000000cH
$LN32@CalcPassiv:

; 407  : 		break;
; 408  : 	case 335:
; 409  : 	case 485:
; 410  : 	case 513:
; 411  : 	case 557:
; 412  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery = iSkillValue;

  002c8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  002cd	5b		 pop	 ebx
  002ce	5f		 pop	 edi
  002cf	f3 0f 11 86 f0
	06 00 00	 movss	 DWORD PTR [esi+1776], xmm0
  002d7	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  002d8	8b e5		 mov	 esp, ebp
  002da	5d		 pop	 ebp
  002db	c2 0c 00	 ret	 12			; 0000000cH
$LN33@CalcPassiv:

; 413  : 		break;
; 414  : 	case 348:
; 415  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength = iSkillValue;

  002de	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  002e3	5b		 pop	 ebx
  002e4	5f		 pop	 edi
  002e5	f3 0f 11 86 f8
	06 00 00	 movss	 DWORD PTR [esi+1784], xmm0
  002ed	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 0c 00	 ret	 12			; 0000000cH
$LN34@CalcPassiv:

; 416  : 		break;
; 417  : 	case 349:
; 418  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordStrength = iSkillValue;

  002f4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  002f9	5b		 pop	 ebx
  002fa	5f		 pop	 edi
  002fb	f3 0f 11 86 fc
	06 00 00	 movss	 DWORD PTR [esi+1788], xmm0
  00303	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00304	8b e5		 mov	 esp, ebp
  00306	5d		 pop	 ebp
  00307	c2 0c 00	 ret	 12			; 0000000cH
$LN35@CalcPassiv:

; 419  : 		break;
; 420  : 	case 350:
; 421  : 		lpObj->m_MPSkillOpt.MpsMaceStrength = iSkillValue;

  0030a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0030f	5b		 pop	 ebx
  00310	5f		 pop	 edi
  00311	f3 0f 11 86 00
	07 00 00	 movss	 DWORD PTR [esi+1792], xmm0
  00319	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0031a	8b e5		 mov	 esp, ebp
  0031c	5d		 pop	 ebp
  0031d	c2 0c 00	 ret	 12			; 0000000cH
$LN36@CalcPassiv:

; 422  : 		break;
; 423  : 	case 351:
; 424  : 		lpObj->m_MPSkillOpt.MpsSpearStrength = iSkillValue;

  00320	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00325	5b		 pop	 ebx
  00326	5f		 pop	 edi
  00327	f3 0f 11 86 04
	07 00 00	 movss	 DWORD PTR [esi+1796], xmm0
  0032f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00330	8b e5		 mov	 esp, ebp
  00332	5d		 pop	 ebp
  00333	c2 0c 00	 ret	 12			; 0000000cH
$LN37@CalcPassiv:

; 425  : 		break;
; 426  : 	case 352:
; 427  : 		lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery = iSkillValue;

  00336	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0033b	5b		 pop	 ebx
  0033c	5f		 pop	 edi
  0033d	f3 0f 11 86 08
	07 00 00	 movss	 DWORD PTR [esi+1800], xmm0
  00345	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00346	8b e5		 mov	 esp, ebp
  00348	5d		 pop	 ebp
  00349	c2 0c 00	 ret	 12			; 0000000cH
$LN38@CalcPassiv:

; 428  : 		break;
; 429  : 	case 353:
; 430  : 		lpObj->m_MPSkillOpt.MpsOneHandSwordMastery = iSkillValue;

  0034c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00351	5b		 pop	 ebx
  00352	5f		 pop	 edi
  00353	f3 0f 11 86 0c
	07 00 00	 movss	 DWORD PTR [esi+1804], xmm0
  0035b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 0c 00	 ret	 12			; 0000000cH
$LN39@CalcPassiv:

; 431  : 		break;
; 432  : 	case 354:
; 433  : 		lpObj->m_MPSkillOpt.MpsMaceMastery = iSkillValue;

  00362	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00367	5b		 pop	 ebx
  00368	5f		 pop	 edi
  00369	f3 0f 11 86 18
	07 00 00	 movss	 DWORD PTR [esi+1816], xmm0
  00371	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00372	8b e5		 mov	 esp, ebp
  00374	5d		 pop	 ebp
  00375	c2 0c 00	 ret	 12			; 0000000cH
$LN40@CalcPassiv:

; 434  : 		break;
; 435  : 	case 355:
; 436  : 		lpObj->m_MPSkillOpt.MpsSpearMastery = iSkillValue;

  00378	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0037d	5b		 pop	 ebx
  0037e	5f		 pop	 edi
  0037f	f3 0f 11 86 14
	07 00 00	 movss	 DWORD PTR [esi+1812], xmm0
  00387	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 0c 00	 ret	 12			; 0000000cH
$LN41@CalcPassiv:

; 437  : 		break;
; 438  : 	case 386:
; 439  : 	case 488:
; 440  : 		lpObj->m_MPSkillOpt.MpsMagicMastery = iSkillValue;

  0038e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00393	5b		 pop	 ebx
  00394	5f		 pop	 edi
  00395	f3 0f 11 86 20
	07 00 00	 movss	 DWORD PTR [esi+1824], xmm0
  0039d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0039e	8b e5		 mov	 esp, ebp
  003a0	5d		 pop	 ebp
  003a1	c2 0c 00	 ret	 12			; 0000000cH
$LN42@CalcPassiv:

; 441  : 		break;
; 442  : 	case 397:
; 443  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffStrength = iSkillValue;

  003a4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  003a9	5b		 pop	 ebx
  003aa	5f		 pop	 edi
  003ab	f3 0f 11 86 28
	07 00 00	 movss	 DWORD PTR [esi+1832], xmm0
  003b3	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  003b4	8b e5		 mov	 esp, ebp
  003b6	5d		 pop	 ebp
  003b7	c2 0c 00	 ret	 12			; 0000000cH
$LN43@CalcPassiv:

; 444  : 		break;
; 445  : 	case 398:
; 446  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffStrength = iSkillValue;

  003ba	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  003bf	5b		 pop	 ebx
  003c0	5f		 pop	 edi
  003c1	f3 0f 11 86 24
	07 00 00	 movss	 DWORD PTR [esi+1828], xmm0
  003c9	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  003ca	8b e5		 mov	 esp, ebp
  003cc	5d		 pop	 ebp
  003cd	c2 0c 00	 ret	 12			; 0000000cH
$LN44@CalcPassiv:

; 447  : 		break;
; 448  : 	case 399:
; 449  : 		lpObj->m_MPSkillOpt.MpsShieldStrength = iSkillValue;

  003d0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  003d5	5b		 pop	 ebx
  003d6	5f		 pop	 edi
  003d7	f3 0f 11 86 2c
	07 00 00	 movss	 DWORD PTR [esi+1836], xmm0
  003df	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  003e0	8b e5		 mov	 esp, ebp
  003e2	5d		 pop	 ebp
  003e3	c2 0c 00	 ret	 12			; 0000000cH
$LN45@CalcPassiv:

; 450  : 		break;
; 451  : 	case 400:
; 452  : 		lpObj->m_MPSkillOpt.MpsOneHandStaffMastery = iSkillValue;

  003e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  003eb	5b		 pop	 ebx
  003ec	5f		 pop	 edi
  003ed	f3 0f 11 86 30
	07 00 00	 movss	 DWORD PTR [esi+1840], xmm0
  003f5	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  003f6	8b e5		 mov	 esp, ebp
  003f8	5d		 pop	 ebp
  003f9	c2 0c 00	 ret	 12			; 0000000cH
$LN46@CalcPassiv:

; 453  : 		break;
; 454  : 	case 401:
; 455  : 		lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery = iSkillValue;

  003fc	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00401	5b		 pop	 ebx
  00402	5f		 pop	 edi
  00403	f3 0f 11 86 34
	07 00 00	 movss	 DWORD PTR [esi+1844], xmm0
  0040b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0040c	8b e5		 mov	 esp, ebp
  0040e	5d		 pop	 ebp
  0040f	c2 0c 00	 ret	 12			; 0000000cH
$LN47@CalcPassiv:

; 456  : 		break;
; 457  : 	case 402:
; 458  : 		lpObj->m_MPSkillOpt.MpsShieldMastery = iSkillValue;

  00412	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00417	5b		 pop	 ebx
  00418	5f		 pop	 edi
  00419	f3 0f 11 86 38
	07 00 00	 movss	 DWORD PTR [esi+1848], xmm0
  00421	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00422	8b e5		 mov	 esp, ebp
  00424	5d		 pop	 ebp
  00425	c2 0c 00	 ret	 12			; 0000000cH
$LN48@CalcPassiv:

; 459  : 		break;
; 460  : 	case 435:
; 461  : 		lpObj->m_MPSkillOpt.MpsBowStrength = iSkillValue;

  00428	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0042d	5b		 pop	 ebx
  0042e	5f		 pop	 edi
  0042f	f3 0f 11 86 3c
	07 00 00	 movss	 DWORD PTR [esi+1852], xmm0
  00437	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00438	8b e5		 mov	 esp, ebp
  0043a	5d		 pop	 ebp
  0043b	c2 0c 00	 ret	 12			; 0000000cH
$LN49@CalcPassiv:

; 462  : 		break;
; 463  : 	case 438:
; 464  : 		lpObj->m_MPSkillOpt.MpsBowMastery = iSkillValue;

  0043e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00443	5b		 pop	 ebx
  00444	5f		 pop	 edi
  00445	f3 0f 11 86 40
	07 00 00	 movss	 DWORD PTR [esi+1856], xmm0
  0044d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0044e	8b e5		 mov	 esp, ebp
  00450	5d		 pop	 ebp
  00451	c2 0c 00	 ret	 12			; 0000000cH
$LN50@CalcPassiv:

; 465  : 		break;
; 466  : 	case 436:
; 467  : 		lpObj->m_MPSkillOpt.MpsCrossbowStrength = iSkillValue;

  00454	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00459	5b		 pop	 ebx
  0045a	5f		 pop	 edi
  0045b	f3 0f 11 86 44
	07 00 00	 movss	 DWORD PTR [esi+1860], xmm0
  00463	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00464	8b e5		 mov	 esp, ebp
  00466	5d		 pop	 ebp
  00467	c2 0c 00	 ret	 12			; 0000000cH
$LN51@CalcPassiv:

; 468  : 		break;
; 469  : 	case 439:
; 470  : 		lpObj->m_MPSkillOpt.MpsCrossbowMastery = iSkillValue;

  0046a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0046f	5b		 pop	 ebx
  00470	5f		 pop	 edi
  00471	f3 0f 11 86 48
	07 00 00	 movss	 DWORD PTR [esi+1864], xmm0
  00479	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0047a	8b e5		 mov	 esp, ebp
  0047c	5d		 pop	 ebp
  0047d	c2 0c 00	 ret	 12			; 0000000cH
$LN52@CalcPassiv:

; 471  : 		break;
; 472  : 	case 421:
; 473  : 		lpObj->m_MPSkillOpt.MpsWeaponMastery2 = iSkillValue;

  00480	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00485	5b		 pop	 ebx
  00486	5f		 pop	 edi
  00487	f3 0f 11 86 54
	07 00 00	 movss	 DWORD PTR [esi+1876], xmm0
  0048f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00490	8b e5		 mov	 esp, ebp
  00492	5d		 pop	 ebp
  00493	c2 0c 00	 ret	 12			; 0000000cH
$LN53@CalcPassiv:

; 474  : 		break;
; 475  : 	case 415:
; 476  : 		lpObj->m_MPSkillOpt.MpsSummonMonster1 = iSkillValue;

  00496	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0049b	5b		 pop	 ebx
  0049c	5f		 pop	 edi
  0049d	f3 0f 11 86 58
	07 00 00	 movss	 DWORD PTR [esi+1880], xmm0
  004a5	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  004a6	8b e5		 mov	 esp, ebp
  004a8	5d		 pop	 ebp
  004a9	c2 0c 00	 ret	 12			; 0000000cH
$LN54@CalcPassiv:

; 477  : 		break;
; 478  : 	case 419:
; 479  : 		lpObj->m_MPSkillOpt.MpsSummonMonster2 = iSkillValue;

  004ac	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  004b1	5b		 pop	 ebx
  004b2	5f		 pop	 edi
  004b3	f3 0f 11 86 5c
	07 00 00	 movss	 DWORD PTR [esi+1884], xmm0
  004bb	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  004bc	8b e5		 mov	 esp, ebp
  004be	5d		 pop	 ebp
  004bf	c2 0c 00	 ret	 12			; 0000000cH
$LN55@CalcPassiv:

; 480  : 		break;
; 481  : 	case 428:
; 482  : 		lpObj->m_MPSkillOpt.MpsSummonMonster3 = iSkillValue;

  004c2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  004c7	5b		 pop	 ebx
  004c8	5f		 pop	 edi
  004c9	f3 0f 11 86 60
	07 00 00	 movss	 DWORD PTR [esi+1888], xmm0
  004d1	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  004d2	8b e5		 mov	 esp, ebp
  004d4	5d		 pop	 ebp
  004d5	c2 0c 00	 ret	 12			; 0000000cH
$LN56@CalcPassiv:

; 483  : 		break;
; 484  : 	case 361:
; 485  : 	case 442:
; 486  : 	case 607:
; 487  : 		lpObj->m_MPSkillOpt.MpsMinAttackInc = iSkillValue;

  004d8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  004dd	5b		 pop	 ebx
  004de	5f		 pop	 edi
  004df	f3 0f 11 86 cc
	07 00 00	 movss	 DWORD PTR [esi+1996], xmm0
  004e7	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  004e8	8b e5		 mov	 esp, ebp
  004ea	5d		 pop	 ebp
  004eb	c2 0c 00	 ret	 12			; 0000000cH
$LN57@CalcPassiv:

; 488  : 		break;
; 489  : 	case 364:
; 490  : 	case 443:
; 491  : 		lpObj->m_MPSkillOpt.MpsMaxAttackInc = iSkillValue;

  004ee	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  004f3	5b		 pop	 ebx
  004f4	5f		 pop	 edi
  004f5	f3 0f 11 86 d0
	07 00 00	 movss	 DWORD PTR [esi+2000], xmm0
  004fd	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  004fe	8b e5		 mov	 esp, ebp
  00500	5d		 pop	 ebp
  00501	c2 0c 00	 ret	 12			; 0000000cH
$LN58@CalcPassiv:

; 492  : 		break;
; 493  : 	case 448:
; 494  : 		lpObj->m_MPSkillOpt.MpsFireTomeStrength = iSkillValue;

  00504	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00509	5b		 pop	 ebx
  0050a	5f		 pop	 edi
  0050b	f3 0f 11 86 68
	07 00 00	 movss	 DWORD PTR [esi+1896], xmm0
  00513	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00514	8b e5		 mov	 esp, ebp
  00516	5d		 pop	 ebp
  00517	c2 0c 00	 ret	 12			; 0000000cH
$LN59@CalcPassiv:

; 495  : 		break;
; 496  : 	case 449:
; 497  : 		lpObj->m_MPSkillOpt.MpsWindTomeStrength = iSkillValue;

  0051a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0051f	5b		 pop	 ebx
  00520	5f		 pop	 edi
  00521	f3 0f 11 86 6c
	07 00 00	 movss	 DWORD PTR [esi+1900], xmm0
  00529	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0052a	8b e5		 mov	 esp, ebp
  0052c	5d		 pop	 ebp
  0052d	c2 0c 00	 ret	 12			; 0000000cH
$LN60@CalcPassiv:

; 498  : 		break;
; 499  : 	case 450:
; 500  : 		lpObj->m_MPSkillOpt.MpsLightTomeStrength = iSkillValue;

  00530	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00535	5b		 pop	 ebx
  00536	5f		 pop	 edi
  00537	f3 0f 11 86 70
	07 00 00	 movss	 DWORD PTR [esi+1904], xmm0
  0053f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00540	8b e5		 mov	 esp, ebp
  00542	5d		 pop	 ebp
  00543	c2 0c 00	 ret	 12			; 0000000cH
$LN61@CalcPassiv:

; 501  : 		break;
; 502  : 	case 451:
; 503  : 		lpObj->m_MPSkillOpt.MpsFireTomeMastery = iSkillValue;

  00546	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0054b	5b		 pop	 ebx
  0054c	5f		 pop	 edi
  0054d	f3 0f 11 86 74
	07 00 00	 movss	 DWORD PTR [esi+1908], xmm0
  00555	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00556	8b e5		 mov	 esp, ebp
  00558	5d		 pop	 ebp
  00559	c2 0c 00	 ret	 12			; 0000000cH
$LN62@CalcPassiv:

; 504  : 		break;
; 505  : 	case 452:
; 506  : 		lpObj->m_MPSkillOpt.MpsWindTomeMastery = iSkillValue;

  0055c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00561	5b		 pop	 ebx
  00562	5f		 pop	 edi
  00563	f3 0f 11 86 78
	07 00 00	 movss	 DWORD PTR [esi+1912], xmm0
  0056b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0056c	8b e5		 mov	 esp, ebp
  0056e	5d		 pop	 ebp
  0056f	c2 0c 00	 ret	 12			; 0000000cH
$LN63@CalcPassiv:

; 507  : 		break;
; 508  : 	case 453:
; 509  : 		lpObj->m_MPSkillOpt.MpsLightTomeMastery = iSkillValue;

  00572	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00577	5b		 pop	 ebx
  00578	5f		 pop	 edi
  00579	f3 0f 11 86 7c
	07 00 00	 movss	 DWORD PTR [esi+1916], xmm0
  00581	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00582	8b e5		 mov	 esp, ebp
  00584	5d		 pop	 ebp
  00585	c2 0c 00	 ret	 12			; 0000000cH
$LN64@CalcPassiv:

; 510  : 		break;
; 511  : 	case 457:
; 512  : 		lpObj->m_MPSkillOpt.MpsMagicMastery2 = iSkillValue;

  00588	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0058d	5b		 pop	 ebx
  0058e	5f		 pop	 edi
  0058f	f3 0f 11 86 64
	07 00 00	 movss	 DWORD PTR [esi+1892], xmm0
  00597	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00598	8b e5		 mov	 esp, ebp
  0059a	5d		 pop	 ebp
  0059b	c2 0c 00	 ret	 12			; 0000000cH
$LN65@CalcPassiv:

; 513  : 		break;
; 514  : 	case 465:
; 515  : 		lpObj->m_MPSkillOpt.MpsStickStrength = iSkillValue;

  0059e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  005a3	5b		 pop	 ebx
  005a4	5f		 pop	 edi
  005a5	f3 0f 11 86 80
	07 00 00	 movss	 DWORD PTR [esi+1920], xmm0
  005ad	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  005ae	8b e5		 mov	 esp, ebp
  005b0	5d		 pop	 ebp
  005b1	c2 0c 00	 ret	 12			; 0000000cH
$LN66@CalcPassiv:

; 516  : 		break;
; 517  : 	case 466:
; 518  : 		lpObj->m_MPSkillOpt.MpsTomeStrength = iSkillValue;

  005b4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  005b9	5b		 pop	 ebx
  005ba	5f		 pop	 edi
  005bb	f3 0f 11 86 84
	07 00 00	 movss	 DWORD PTR [esi+1924], xmm0
  005c3	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  005c4	8b e5		 mov	 esp, ebp
  005c6	5d		 pop	 ebp
  005c7	c2 0c 00	 ret	 12			; 0000000cH
$LN67@CalcPassiv:

; 519  : 		break;
; 520  : 	case 467:
; 521  : 		lpObj->m_MPSkillOpt.MpsStickMastery = iSkillValue;

  005ca	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  005cf	5b		 pop	 ebx
  005d0	5f		 pop	 edi
  005d1	f3 0f 11 86 88
	07 00 00	 movss	 DWORD PTR [esi+1928], xmm0
  005d9	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  005da	8b e5		 mov	 esp, ebp
  005dc	5d		 pop	 ebp
  005dd	c2 0c 00	 ret	 12			; 0000000cH
$LN68@CalcPassiv:

; 522  : 		break;
; 523  : 	case 468:
; 524  : 		lpObj->m_MPSkillOpt.MpsTomeMastery = iSkillValue;

  005e0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  005e5	5b		 pop	 ebx
  005e6	5f		 pop	 edi
  005e7	f3 0f 11 86 8c
	07 00 00	 movss	 DWORD PTR [esi+1932], xmm0
  005ef	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  005f0	8b e5		 mov	 esp, ebp
  005f2	5d		 pop	 ebp
  005f3	c2 0c 00	 ret	 12			; 0000000cH
$LN69@CalcPassiv:

; 525  : 		break;
; 526  : 	case 471:
; 527  : 		lpObj->m_MPSkillOpt.MpsMinWizCurseInc = iSkillValue;

  005f6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  005fb	5b		 pop	 ebx
  005fc	5f		 pop	 edi
  005fd	f3 0f 11 86 9c
	07 00 00	 movss	 DWORD PTR [esi+1948], xmm0
  00605	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00606	8b e5		 mov	 esp, ebp
  00608	5d		 pop	 ebp
  00609	c2 0c 00	 ret	 12			; 0000000cH
$LN70@CalcPassiv:

; 528  : 		break;
; 529  : 	case 526:
; 530  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr1 = iSkillValue;

  0060c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00611	5b		 pop	 ebx
  00612	5f		 pop	 edi
  00613	f3 0f 11 86 a8
	07 00 00	 movss	 DWORD PTR [esi+1960], xmm0
  0061b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0061c	8b e5		 mov	 esp, ebp
  0061e	5d		 pop	 ebp
  0061f	c2 0c 00	 ret	 12			; 0000000cH
$LN71@CalcPassiv:

; 531  : 		break;
; 532  : 	case 530:
; 533  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr2 = iSkillValue;

  00622	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00627	5b		 pop	 ebx
  00628	5f		 pop	 edi
  00629	f3 0f 11 86 ac
	07 00 00	 movss	 DWORD PTR [esi+1964], xmm0
  00631	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00632	8b e5		 mov	 esp, ebp
  00634	5d		 pop	 ebp
  00635	c2 0c 00	 ret	 12			; 0000000cH
$LN72@CalcPassiv:

; 534  : 		break;
; 535  : 	case 534:
; 536  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr3 = iSkillValue;

  00638	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0063d	5b		 pop	 ebx
  0063e	5f		 pop	 edi
  0063f	f3 0f 11 86 b0
	07 00 00	 movss	 DWORD PTR [esi+1968], xmm0
  00647	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00648	8b e5		 mov	 esp, ebp
  0064a	5d		 pop	 ebp
  0064b	c2 0c 00	 ret	 12			; 0000000cH
$LN73@CalcPassiv:

; 537  : 		break;
; 538  : 	case 527:
; 539  : 		lpObj->m_MPSkillOpt.MpsScepterStrength = iSkillValue;

  0064e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00653	5b		 pop	 ebx
  00654	5f		 pop	 edi
  00655	f3 0f 11 86 b4
	07 00 00	 movss	 DWORD PTR [esi+1972], xmm0
  0065d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0065e	8b e5		 mov	 esp, ebp
  00660	5d		 pop	 ebp
  00661	c2 0c 00	 ret	 12			; 0000000cH
$LN74@CalcPassiv:

; 540  : 		break;
; 541  : 	case 531:
; 542  : 		lpObj->m_MPSkillOpt.MpsScepterMastery = iSkillValue;

  00664	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00669	5b		 pop	 ebx
  0066a	5f		 pop	 edi
  0066b	f3 0f 11 86 b8
	07 00 00	 movss	 DWORD PTR [esi+1976], xmm0
  00673	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00674	8b e5		 mov	 esp, ebp
  00676	5d		 pop	 ebp
  00677	c2 0c 00	 ret	 12			; 0000000cH
$LN75@CalcPassiv:

; 543  : 		break;
; 544  : 	case 528:
; 545  : 		lpObj->m_MPSkillOpt.MpsShieldStrength3 = iSkillValue;

  0067a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0067f	5b		 pop	 ebx
  00680	5f		 pop	 edi
  00681	f3 0f 11 86 bc
	07 00 00	 movss	 DWORD PTR [esi+1980], xmm0
  00689	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0068a	8b e5		 mov	 esp, ebp
  0068c	5d		 pop	 ebp
  0068d	c2 0c 00	 ret	 12			; 0000000cH
$LN76@CalcPassiv:

; 546  : 		break;
; 547  : 	case 532:
; 548  : 		lpObj->m_MPSkillOpt.MpsShieldMastery3 = iSkillValue;

  00690	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00695	5b		 pop	 ebx
  00696	5f		 pop	 edi
  00697	f3 0f 11 86 c0
	07 00 00	 movss	 DWORD PTR [esi+1984], xmm0
  0069f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  006a0	8b e5		 mov	 esp, ebp
  006a2	5d		 pop	 ebp
  006a3	c2 0c 00	 ret	 12			; 0000000cH
$LN77@CalcPassiv:

; 549  : 		break;
; 550  : 	case 529:
; 551  : 		lpObj->m_MPSkillOpt.MpsUseScepterPetStr = iSkillValue;

  006a6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  006ab	5b		 pop	 ebx
  006ac	5f		 pop	 edi
  006ad	f3 0f 11 86 c4
	07 00 00	 movss	 DWORD PTR [esi+1988], xmm0
  006b5	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  006b6	8b e5		 mov	 esp, ebp
  006b8	5d		 pop	 ebp
  006b9	c2 0c 00	 ret	 12			; 0000000cH
$LN78@CalcPassiv:

; 552  : 		break;
; 553  : 	case 533:
; 554  : 		lpObj->m_MPSkillOpt.MpsCommandAttackInc = iSkillValue;

  006bc	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  006c1	5b		 pop	 ebx
  006c2	5f		 pop	 edi
  006c3	f3 0f 11 86 c8
	07 00 00	 movss	 DWORD PTR [esi+1992], xmm0
  006cb	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  006cc	8b e5		 mov	 esp, ebp
  006ce	5d		 pop	 ebp
  006cf	c2 0c 00	 ret	 12			; 0000000cH
$LN79@CalcPassiv:

; 555  : 		break;
; 556  : 	case 568:
; 557  : 		lpObj->m_MPSkillOpt.MpsFistStrength = iSkillValue;

  006d2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  006d7	5b		 pop	 ebx
  006d8	5f		 pop	 edi
  006d9	f3 0f 11 86 24
	08 00 00	 movss	 DWORD PTR [esi+2084], xmm0
  006e1	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  006e2	8b e5		 mov	 esp, ebp
  006e4	5d		 pop	 ebp
  006e5	c2 0c 00	 ret	 12			; 0000000cH
$LN80@CalcPassiv:

; 558  : 		break;
; 559  : 	case 571:
; 560  : 		lpObj->m_MPSkillOpt.MpsFistMastery = iSkillValue;

  006e8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  006ed	5b		 pop	 ebx
  006ee	5f		 pop	 edi
  006ef	f3 0f 11 86 28
	08 00 00	 movss	 DWORD PTR [esi+2088], xmm0
  006f7	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  006f8	8b e5		 mov	 esp, ebp
  006fa	5d		 pop	 ebp
  006fb	c2 0c 00	 ret	 12			; 0000000cH
$LN81@CalcPassiv:

; 561  : 		break;
; 562  : 
; 563  : 	case 315:
; 564  : 		lpObj->m_MPSkillOpt.MpsArmorSetBonusIncrease = iSkillValue;

  006fe	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00703	5b		 pop	 ebx
  00704	5f		 pop	 edi
  00705	f3 0f 11 86 2c
	08 00 00	 movss	 DWORD PTR [esi+2092], xmm0
  0070d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0070e	8b e5		 mov	 esp, ebp
  00710	5d		 pop	 ebp
  00711	c2 0c 00	 ret	 12			; 0000000cH
$LN82@CalcPassiv:

; 565  : 		break;
; 566  : 	case 316:
; 567  : 		lpObj->m_MPSkillOpt.MpsReflectDamage = iSkillValue;

  00714	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00719	5b		 pop	 ebx
  0071a	5f		 pop	 edi
  0071b	f3 0f 11 86 30
	08 00 00	 movss	 DWORD PTR [esi+2096], xmm0
  00723	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00724	8b e5		 mov	 esp, ebp
  00726	5d		 pop	 ebp
  00727	c2 0c 00	 ret	 12			; 0000000cH
$LN83@CalcPassiv:

; 568  : 		break;
; 569  : 	case 317:
; 570  : 		lpObj->m_MPSkillOpt.MpsEnergyIncrease = iSkillValue;

  0072a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0072f	5b		 pop	 ebx
  00730	5f		 pop	 edi
  00731	f3 0f 11 86 34
	08 00 00	 movss	 DWORD PTR [esi+2100], xmm0
  00739	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0073a	8b e5		 mov	 esp, ebp
  0073c	5d		 pop	 ebp
  0073d	c2 0c 00	 ret	 12			; 0000000cH
$LN84@CalcPassiv:

; 571  : 		break;
; 572  : 	case 318:
; 573  : 		lpObj->m_MPSkillOpt.MpsVitalityIncrease = iSkillValue;

  00740	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00745	5b		 pop	 ebx
  00746	5f		 pop	 edi
  00747	f3 0f 11 86 38
	08 00 00	 movss	 DWORD PTR [esi+2104], xmm0
  0074f	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00750	8b e5		 mov	 esp, ebp
  00752	5d		 pop	 ebp
  00753	c2 0c 00	 ret	 12			; 0000000cH
$LN85@CalcPassiv:

; 574  : 		break;
; 575  : 	case 319:
; 576  : 		lpObj->m_MPSkillOpt.MpsDexterityIncrease = iSkillValue;

  00756	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0075b	5b		 pop	 ebx
  0075c	5f		 pop	 edi
  0075d	f3 0f 11 86 3c
	08 00 00	 movss	 DWORD PTR [esi+2108], xmm0
  00765	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00766	8b e5		 mov	 esp, ebp
  00768	5d		 pop	 ebp
  00769	c2 0c 00	 ret	 12			; 0000000cH
$LN86@CalcPassiv:

; 577  : 		break;
; 578  : 	case 320:
; 579  : 		lpObj->m_MPSkillOpt.MpsStrengthIncrease = iSkillValue;

  0076c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00771	5b		 pop	 ebx
  00772	5f		 pop	 edi
  00773	f3 0f 11 86 40
	08 00 00	 movss	 DWORD PTR [esi+2112], xmm0
  0077b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c2 0c 00	 ret	 12			; 0000000cH
$LN87@CalcPassiv:

; 580  : 		break;
; 581  : 	case 506:
; 582  : 		lpObj->m_MPSkillOpt.MpsLeadershipIncrease = iSkillValue;

  00782	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00787	5b		 pop	 ebx
  00788	5f		 pop	 edi
  00789	f3 0f 11 86 44
	08 00 00	 movss	 DWORD PTR [esi+2116], xmm0
  00791	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00792	8b e5		 mov	 esp, ebp
  00794	5d		 pop	 ebp
  00795	c2 0c 00	 ret	 12			; 0000000cH
$LN88@CalcPassiv:

; 583  : 		break;
; 584  : 	case 322:
; 585  : 	case 375:
; 586  : 	case 410:
; 587  : 	case 446:
; 588  : 	case 476:
; 589  : 	case 505:
; 590  : 		lpObj->m_MPSkillOpt.MpsWingDefenseIncrease = iSkillValue;

  00798	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0079d	5b		 pop	 ebx
  0079e	5f		 pop	 edi
  0079f	f3 0f 11 86 48
	08 00 00	 movss	 DWORD PTR [esi+2120], xmm0
  007a7	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  007a8	8b e5		 mov	 esp, ebp
  007aa	5d		 pop	 ebp
  007ab	c2 0c 00	 ret	 12			; 0000000cH
$LN89@CalcPassiv:

; 591  : 		break;
; 592  : 	case 324:
; 593  : 	case 377:
; 594  : 	case 412:
; 595  : 	case 447:
; 596  : 	case 478:
; 597  : 	case 507:
; 598  : 		lpObj->m_MPSkillOpt.MpsWingAttackIncrease = iSkillValue;

  007ae	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  007b3	5b		 pop	 ebx
  007b4	5f		 pop	 edi
  007b5	f3 0f 11 86 4c
	08 00 00	 movss	 DWORD PTR [esi+2124], xmm0
  007bd	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  007be	8b e5		 mov	 esp, ebp
  007c0	5d		 pop	 ebp
  007c1	c2 0c 00	 ret	 12			; 0000000cH
$LN90@CalcPassiv:

; 599  : 		break;
; 600  : 	case 366:
; 601  : 		lpObj->m_MPSkillOpt.MpsCriticalRateIncrease = iSkillValue;

  007c4	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  007c9	5b		 pop	 ebx
  007ca	5f		 pop	 edi
  007cb	f3 0f 11 86 54
	08 00 00	 movss	 DWORD PTR [esi+2132], xmm0
  007d3	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  007d4	8b e5		 mov	 esp, ebp
  007d6	5d		 pop	 ebp
  007d7	c2 0c 00	 ret	 12			; 0000000cH
$LN91@CalcPassiv:

; 602  : 		break;
; 603  : 	case 367:
; 604  : 		lpObj->m_MPSkillOpt.MpsRestoreFullMP = iSkillValue;

  007da	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  007df	5b		 pop	 ebx
  007e0	5f		 pop	 edi
  007e1	f3 0f 11 86 60
	08 00 00	 movss	 DWORD PTR [esi+2144], xmm0
  007e9	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  007ea	8b e5		 mov	 esp, ebp
  007ec	5d		 pop	 ebp
  007ed	c2 0c 00	 ret	 12			; 0000000cH
$LN92@CalcPassiv:

; 605  : 		break;
; 606  : 	case 368:
; 607  : 		lpObj->m_MPSkillOpt.MpsRestoreFullHP = iSkillValue;

  007f0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  007f5	5b		 pop	 ebx
  007f6	5f		 pop	 edi
  007f7	f3 0f 11 86 5c
	08 00 00	 movss	 DWORD PTR [esi+2140], xmm0
  007ff	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00800	8b e5		 mov	 esp, ebp
  00802	5d		 pop	 ebp
  00803	c2 0c 00	 ret	 12			; 0000000cH
$LN93@CalcPassiv:

; 608  : 		break;
; 609  : 	case 369:
; 610  : 		lpObj->m_MPSkillOpt.MpsExcelentRateIncrease = iSkillValue;

  00806	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0080b	5b		 pop	 ebx
  0080c	5f		 pop	 edi
  0080d	f3 0f 11 86 58
	08 00 00	 movss	 DWORD PTR [esi+2136], xmm0
  00815	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00816	8b e5		 mov	 esp, ebp
  00818	5d		 pop	 ebp
  00819	c2 0c 00	 ret	 12			; 0000000cH
$LN94@CalcPassiv:

; 611  : 		break;
; 612  : 	case 372:
; 613  : 		lpObj->m_MPSkillOpt.MpsRestoreFullSD = iSkillValue;

  0081c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00821	5b		 pop	 ebx
  00822	5f		 pop	 edi
  00823	f3 0f 11 86 64
	08 00 00	 movss	 DWORD PTR [esi+2148], xmm0
  0082b	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0082c	8b e5		 mov	 esp, ebp
  0082e	5d		 pop	 ebp
  0082f	c2 0c 00	 ret	 12			; 0000000cH
$LN95@CalcPassiv:

; 614  : 		break;
; 615  : 	case 370:
; 616  : 		lpObj->m_MPSkillOpt.MpsDoubleDamageRate = iSkillValue;

  00832	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00837	5b		 pop	 ebx
  00838	5f		 pop	 edi
  00839	f3 0f 11 86 68
	08 00 00	 movss	 DWORD PTR [esi+2152], xmm0
  00841	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00842	8b e5		 mov	 esp, ebp
  00844	5d		 pop	 ebp
  00845	c2 0c 00	 ret	 12			; 0000000cH
$LN96@CalcPassiv:

; 617  : 		break;
; 618  : 	case 371:
; 619  : 		lpObj->m_MPSkillOpt.MpsIgnoreDef = iSkillValue;

  00848	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  0084d	5b		 pop	 ebx
  0084e	5f		 pop	 edi
  0084f	f3 0f 11 86 10
	07 00 00	 movss	 DWORD PTR [esi+1808], xmm0
  00857	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00858	8b e5		 mov	 esp, ebp
  0085a	5d		 pop	 ebp
  0085b	c2 0c 00	 ret	 12			; 0000000cH
$LN97@CalcPassiv:

; 620  : 		break;
; 621  : 	case 536:
; 622  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr4 = iSkillValue;

  0085e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00863	5b		 pop	 ebx
  00864	5f		 pop	 edi
  00865	f3 0f 11 86 78
	08 00 00	 movss	 DWORD PTR [esi+2168], xmm0
  0086d	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  0086e	8b e5		 mov	 esp, ebp
  00870	5d		 pop	 ebp
  00871	c2 0c 00	 ret	 12			; 0000000cH
$LN99@CalcPassiv:

; 623  : 		break;
; 624  : 	case 538:
; 625  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;
; 626  : 		break;
; 627  : 	case 539:
; 628  : 		lpObj->m_MPSkillOpt.MpsDarkSpiritStr5 = iSkillValue;

  00874	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _iSkillValue$[ebp]
  00879	f3 0f 11 86 7c
	08 00 00	 movss	 DWORD PTR [esi+2172], xmm0
$LN103@CalcPassiv:
  00881	5b		 pop	 ebx
$LN100@CalcPassiv:
  00882	5f		 pop	 edi
  00883	5e		 pop	 esi

; 629  : 		break;
; 630  : 	default:
; 631  : 		break;
; 632  : 	}
; 633  : }

  00884	8b e5		 mov	 esp, ebp
  00886	5d		 pop	 ebp
  00887	c2 0c 00	 ret	 12			; 0000000cH
  0088a	66 90		 npad	 2
$LN105@CalcPassiv:
  0088c	00 00 00 00	 DD	 $LN9@CalcPassiv
  00890	00 00 00 00	 DD	 $LN8@CalcPassiv
  00894	00 00 00 00	 DD	 $LN26@CalcPassiv
  00898	00 00 00 00	 DD	 $LN24@CalcPassiv
  0089c	00 00 00 00	 DD	 $LN12@CalcPassiv
  008a0	00 00 00 00	 DD	 $LN10@CalcPassiv
  008a4	00 00 00 00	 DD	 $LN27@CalcPassiv
  008a8	00 00 00 00	 DD	 $LN15@CalcPassiv
  008ac	00 00 00 00	 DD	 $LN13@CalcPassiv
  008b0	00 00 00 00	 DD	 $LN17@CalcPassiv
  008b4	00 00 00 00	 DD	 $LN25@CalcPassiv
  008b8	00 00 00 00	 DD	 $LN14@CalcPassiv
  008bc	00 00 00 00	 DD	 $LN11@CalcPassiv
  008c0	00 00 00 00	 DD	 $LN16@CalcPassiv
  008c4	00 00 00 00	 DD	 $LN81@CalcPassiv
  008c8	00 00 00 00	 DD	 $LN82@CalcPassiv
  008cc	00 00 00 00	 DD	 $LN83@CalcPassiv
  008d0	00 00 00 00	 DD	 $LN84@CalcPassiv
  008d4	00 00 00 00	 DD	 $LN85@CalcPassiv
  008d8	00 00 00 00	 DD	 $LN86@CalcPassiv
  008dc	00 00 00 00	 DD	 $LN88@CalcPassiv
  008e0	00 00 00 00	 DD	 $LN89@CalcPassiv
  008e4	00 00 00 00	 DD	 $LN6@CalcPassiv
  008e8	00 00 00 00	 DD	 $LN18@CalcPassiv
  008ec	00 00 00 00	 DD	 $LN32@CalcPassiv
  008f0	00 00 00 00	 DD	 $LN19@CalcPassiv
  008f4	00 00 00 00	 DD	 $LN20@CalcPassiv
  008f8	00 00 00 00	 DD	 $LN7@CalcPassiv
  008fc	00 00 00 00	 DD	 $LN33@CalcPassiv
  00900	00 00 00 00	 DD	 $LN34@CalcPassiv
  00904	00 00 00 00	 DD	 $LN35@CalcPassiv
  00908	00 00 00 00	 DD	 $LN36@CalcPassiv
  0090c	00 00 00 00	 DD	 $LN37@CalcPassiv
  00910	00 00 00 00	 DD	 $LN38@CalcPassiv
  00914	00 00 00 00	 DD	 $LN39@CalcPassiv
  00918	00 00 00 00	 DD	 $LN40@CalcPassiv
  0091c	00 00 00 00	 DD	 $LN28@CalcPassiv
  00920	00 00 00 00	 DD	 $LN23@CalcPassiv
  00924	00 00 00 00	 DD	 $LN22@CalcPassiv
  00928	00 00 00 00	 DD	 $LN56@CalcPassiv
  0092c	00 00 00 00	 DD	 $LN21@CalcPassiv
  00930	00 00 00 00	 DD	 $LN57@CalcPassiv
  00934	00 00 00 00	 DD	 $LN90@CalcPassiv
  00938	00 00 00 00	 DD	 $LN91@CalcPassiv
  0093c	00 00 00 00	 DD	 $LN92@CalcPassiv
  00940	00 00 00 00	 DD	 $LN93@CalcPassiv
  00944	00 00 00 00	 DD	 $LN95@CalcPassiv
  00948	00 00 00 00	 DD	 $LN96@CalcPassiv
  0094c	00 00 00 00	 DD	 $LN94@CalcPassiv
  00950	00 00 00 00	 DD	 $LN41@CalcPassiv
  00954	00 00 00 00	 DD	 $LN42@CalcPassiv
  00958	00 00 00 00	 DD	 $LN43@CalcPassiv
  0095c	00 00 00 00	 DD	 $LN44@CalcPassiv
  00960	00 00 00 00	 DD	 $LN45@CalcPassiv
  00964	00 00 00 00	 DD	 $LN46@CalcPassiv
  00968	00 00 00 00	 DD	 $LN47@CalcPassiv
  0096c	00 00 00 00	 DD	 $LN30@CalcPassiv
  00970	00 00 00 00	 DD	 $LN29@CalcPassiv
  00974	00 00 00 00	 DD	 $LN53@CalcPassiv
  00978	00 00 00 00	 DD	 $LN54@CalcPassiv
  0097c	00 00 00 00	 DD	 $LN52@CalcPassiv
  00980	00 00 00 00	 DD	 $LN55@CalcPassiv
  00984	00 00 00 00	 DD	 $LN48@CalcPassiv
  00988	00 00 00 00	 DD	 $LN50@CalcPassiv
  0098c	00 00 00 00	 DD	 $LN49@CalcPassiv
  00990	00 00 00 00	 DD	 $LN51@CalcPassiv
  00994	00 00 00 00	 DD	 $LN58@CalcPassiv
  00998	00 00 00 00	 DD	 $LN59@CalcPassiv
  0099c	00 00 00 00	 DD	 $LN60@CalcPassiv
  009a0	00 00 00 00	 DD	 $LN61@CalcPassiv
  009a4	00 00 00 00	 DD	 $LN62@CalcPassiv
  009a8	00 00 00 00	 DD	 $LN63@CalcPassiv
  009ac	00 00 00 00	 DD	 $LN64@CalcPassiv
  009b0	00 00 00 00	 DD	 $LN65@CalcPassiv
  009b4	00 00 00 00	 DD	 $LN66@CalcPassiv
  009b8	00 00 00 00	 DD	 $LN67@CalcPassiv
  009bc	00 00 00 00	 DD	 $LN68@CalcPassiv
  009c0	00 00 00 00	 DD	 $LN69@CalcPassiv
  009c4	00 00 00 00	 DD	 $LN87@CalcPassiv
  009c8	00 00 00 00	 DD	 $LN70@CalcPassiv
  009cc	00 00 00 00	 DD	 $LN73@CalcPassiv
  009d0	00 00 00 00	 DD	 $LN75@CalcPassiv
  009d4	00 00 00 00	 DD	 $LN77@CalcPassiv
  009d8	00 00 00 00	 DD	 $LN71@CalcPassiv
  009dc	00 00 00 00	 DD	 $LN74@CalcPassiv
  009e0	00 00 00 00	 DD	 $LN76@CalcPassiv
  009e4	00 00 00 00	 DD	 $LN78@CalcPassiv
  009e8	00 00 00 00	 DD	 $LN72@CalcPassiv
  009ec	00 00 00 00	 DD	 $LN31@CalcPassiv
  009f0	00 00 00 00	 DD	 $LN97@CalcPassiv
  009f4	00 00 00 00	 DD	 $LN99@CalcPassiv
  009f8	00 00 00 00	 DD	 $LN79@CalcPassiv
  009fc	00 00 00 00	 DD	 $LN80@CalcPassiv
  00a00	00 00 00 00	 DD	 $LN103@CalcPassiv
$LN102@CalcPassiv:
  00a04	00		 DB	 0
  00a05	01		 DB	 1
  00a06	02		 DB	 2
  00a07	03		 DB	 3
  00a08	04		 DB	 4
  00a09	05		 DB	 5
  00a0a	06		 DB	 6
  00a0b	07		 DB	 7
  00a0c	08		 DB	 8
  00a0d	09		 DB	 9
  00a0e	0a		 DB	 10			; 0000000aH
  00a0f	0b		 DB	 11			; 0000000bH
  00a10	0c		 DB	 12			; 0000000cH
  00a11	0d		 DB	 13			; 0000000dH
  00a12	5d		 DB	 93			; 0000005dH
  00a13	0e		 DB	 14			; 0000000eH
  00a14	0f		 DB	 15			; 0000000fH
  00a15	10		 DB	 16			; 00000010H
  00a16	11		 DB	 17			; 00000011H
  00a17	12		 DB	 18			; 00000012H
  00a18	13		 DB	 19			; 00000013H
  00a19	5d		 DB	 93			; 0000005dH
  00a1a	14		 DB	 20			; 00000014H
  00a1b	5d		 DB	 93			; 0000005dH
  00a1c	15		 DB	 21			; 00000015H
  00a1d	16		 DB	 22			; 00000016H
  00a1e	5d		 DB	 93			; 0000005dH
  00a1f	5d		 DB	 93			; 0000005dH
  00a20	5d		 DB	 93			; 0000005dH
  00a21	5d		 DB	 93			; 0000005dH
  00a22	5d		 DB	 93			; 0000005dH
  00a23	5d		 DB	 93			; 0000005dH
  00a24	5d		 DB	 93			; 0000005dH
  00a25	5d		 DB	 93			; 0000005dH
  00a26	17		 DB	 23			; 00000017H
  00a27	18		 DB	 24			; 00000018H
  00a28	5d		 DB	 93			; 0000005dH
  00a29	5d		 DB	 93			; 0000005dH
  00a2a	19		 DB	 25			; 00000019H
  00a2b	5d		 DB	 93			; 0000005dH
  00a2c	5d		 DB	 93			; 0000005dH
  00a2d	1a		 DB	 26			; 0000001aH
  00a2e	5d		 DB	 93			; 0000005dH
  00a2f	5d		 DB	 93			; 0000005dH
  00a30	5d		 DB	 93			; 0000005dH
  00a31	5d		 DB	 93			; 0000005dH
  00a32	5d		 DB	 93			; 0000005dH
  00a33	1b		 DB	 27			; 0000001bH
  00a34	1c		 DB	 28			; 0000001cH
  00a35	1d		 DB	 29			; 0000001dH
  00a36	1e		 DB	 30			; 0000001eH
  00a37	1f		 DB	 31			; 0000001fH
  00a38	20		 DB	 32			; 00000020H
  00a39	21		 DB	 33			; 00000021H
  00a3a	22		 DB	 34			; 00000022H
  00a3b	23		 DB	 35			; 00000023H
  00a3c	5d		 DB	 93			; 0000005dH
  00a3d	24		 DB	 36			; 00000024H
  00a3e	25		 DB	 37			; 00000025H
  00a3f	26		 DB	 38			; 00000026H
  00a40	5d		 DB	 93			; 0000005dH
  00a41	27		 DB	 39			; 00000027H
  00a42	28		 DB	 40			; 00000028H
  00a43	5d		 DB	 93			; 0000005dH
  00a44	29		 DB	 41			; 00000029H
  00a45	5d		 DB	 93			; 0000005dH
  00a46	2a		 DB	 42			; 0000002aH
  00a47	2b		 DB	 43			; 0000002bH
  00a48	2c		 DB	 44			; 0000002cH
  00a49	2d		 DB	 45			; 0000002dH
  00a4a	2e		 DB	 46			; 0000002eH
  00a4b	2f		 DB	 47			; 0000002fH
  00a4c	30		 DB	 48			; 00000030H
  00a4d	5d		 DB	 93			; 0000005dH
  00a4e	5d		 DB	 93			; 0000005dH
  00a4f	14		 DB	 20			; 00000014H
  00a50	5d		 DB	 93			; 0000005dH
  00a51	15		 DB	 21			; 00000015H
  00a52	5d		 DB	 93			; 0000005dH
  00a53	5d		 DB	 93			; 0000005dH
  00a54	5d		 DB	 93			; 0000005dH
  00a55	5d		 DB	 93			; 0000005dH
  00a56	5d		 DB	 93			; 0000005dH
  00a57	5d		 DB	 93			; 0000005dH
  00a58	5d		 DB	 93			; 0000005dH
  00a59	5d		 DB	 93			; 0000005dH
  00a5a	31		 DB	 49			; 00000031H
  00a5b	5d		 DB	 93			; 0000005dH
  00a5c	5d		 DB	 93			; 0000005dH
  00a5d	5d		 DB	 93			; 0000005dH
  00a5e	5d		 DB	 93			; 0000005dH
  00a5f	5d		 DB	 93			; 0000005dH
  00a60	5d		 DB	 93			; 0000005dH
  00a61	5d		 DB	 93			; 0000005dH
  00a62	5d		 DB	 93			; 0000005dH
  00a63	5d		 DB	 93			; 0000005dH
  00a64	5d		 DB	 93			; 0000005dH
  00a65	32		 DB	 50			; 00000032H
  00a66	33		 DB	 51			; 00000033H
  00a67	34		 DB	 52			; 00000034H
  00a68	35		 DB	 53			; 00000035H
  00a69	36		 DB	 54			; 00000036H
  00a6a	37		 DB	 55			; 00000037H
  00a6b	5d		 DB	 93			; 0000005dH
  00a6c	5d		 DB	 93			; 0000005dH
  00a6d	38		 DB	 56			; 00000038H
  00a6e	5d		 DB	 93			; 0000005dH
  00a6f	39		 DB	 57			; 00000039H
  00a70	5d		 DB	 93			; 0000005dH
  00a71	5d		 DB	 93			; 0000005dH
  00a72	14		 DB	 20			; 00000014H
  00a73	5d		 DB	 93			; 0000005dH
  00a74	15		 DB	 21			; 00000015H
  00a75	5d		 DB	 93			; 0000005dH
  00a76	5d		 DB	 93			; 0000005dH
  00a77	3a		 DB	 58			; 0000003aH
  00a78	5d		 DB	 93			; 0000005dH
  00a79	5d		 DB	 93			; 0000005dH
  00a7a	5d		 DB	 93			; 0000005dH
  00a7b	3b		 DB	 59			; 0000003bH
  00a7c	5d		 DB	 93			; 0000005dH
  00a7d	3c		 DB	 60			; 0000003cH
  00a7e	5d		 DB	 93			; 0000005dH
  00a7f	5d		 DB	 93			; 0000005dH
  00a80	5d		 DB	 93			; 0000005dH
  00a81	5d		 DB	 93			; 0000005dH
  00a82	5d		 DB	 93			; 0000005dH
  00a83	5d		 DB	 93			; 0000005dH
  00a84	3d		 DB	 61			; 0000003dH
  00a85	5d		 DB	 93			; 0000005dH
  00a86	5d		 DB	 93			; 0000005dH
  00a87	5d		 DB	 93			; 0000005dH
  00a88	5d		 DB	 93			; 0000005dH
  00a89	5d		 DB	 93			; 0000005dH
  00a8a	5d		 DB	 93			; 0000005dH
  00a8b	3e		 DB	 62			; 0000003eH
  00a8c	3f		 DB	 63			; 0000003fH
  00a8d	5d		 DB	 93			; 0000005dH
  00a8e	40		 DB	 64			; 00000040H
  00a8f	41		 DB	 65			; 00000041H
  00a90	5d		 DB	 93			; 0000005dH
  00a91	5d		 DB	 93			; 0000005dH
  00a92	27		 DB	 39			; 00000027H
  00a93	29		 DB	 41			; 00000029H
  00a94	5d		 DB	 93			; 0000005dH
  00a95	5d		 DB	 93			; 0000005dH
  00a96	14		 DB	 20			; 00000014H
  00a97	15		 DB	 21			; 00000015H
  00a98	42		 DB	 66			; 00000042H
  00a99	43		 DB	 67			; 00000043H
  00a9a	44		 DB	 68			; 00000044H
  00a9b	45		 DB	 69			; 00000045H
  00a9c	46		 DB	 70			; 00000046H
  00a9d	47		 DB	 71			; 00000047H
  00a9e	5d		 DB	 93			; 0000005dH
  00a9f	5d		 DB	 93			; 0000005dH
  00aa0	5d		 DB	 93			; 0000005dH
  00aa1	48		 DB	 72			; 00000048H
  00aa2	5d		 DB	 93			; 0000005dH
  00aa3	5d		 DB	 93			; 0000005dH
  00aa4	5d		 DB	 93			; 0000005dH
  00aa5	5d		 DB	 93			; 0000005dH
  00aa6	5d		 DB	 93			; 0000005dH
  00aa7	5d		 DB	 93			; 0000005dH
  00aa8	5d		 DB	 93			; 0000005dH
  00aa9	49		 DB	 73			; 00000049H
  00aaa	4a		 DB	 74			; 0000004aH
  00aab	4b		 DB	 75			; 0000004bH
  00aac	4c		 DB	 76			; 0000004cH
  00aad	5d		 DB	 93			; 0000005dH
  00aae	5d		 DB	 93			; 0000005dH
  00aaf	4d		 DB	 77			; 0000004dH
  00ab0	5d		 DB	 93			; 0000005dH
  00ab1	5d		 DB	 93			; 0000005dH
  00ab2	5d		 DB	 93			; 0000005dH
  00ab3	5d		 DB	 93			; 0000005dH
  00ab4	14		 DB	 20			; 00000014H
  00ab5	5d		 DB	 93			; 0000005dH
  00ab6	15		 DB	 21			; 00000015H
  00ab7	5d		 DB	 93			; 0000005dH
  00ab8	5d		 DB	 93			; 0000005dH
  00ab9	5d		 DB	 93			; 0000005dH
  00aba	5d		 DB	 93			; 0000005dH
  00abb	5d		 DB	 93			; 0000005dH
  00abc	5d		 DB	 93			; 0000005dH
  00abd	18		 DB	 24			; 00000018H
  00abe	5d		 DB	 93			; 0000005dH
  00abf	5d		 DB	 93			; 0000005dH
  00ac0	31		 DB	 49			; 00000031H
  00ac1	5d		 DB	 93			; 0000005dH
  00ac2	5d		 DB	 93			; 0000005dH
  00ac3	5d		 DB	 93			; 0000005dH
  00ac4	5d		 DB	 93			; 0000005dH
  00ac5	5d		 DB	 93			; 0000005dH
  00ac6	5d		 DB	 93			; 0000005dH
  00ac7	5d		 DB	 93			; 0000005dH
  00ac8	5d		 DB	 93			; 0000005dH
  00ac9	5d		 DB	 93			; 0000005dH
  00aca	5d		 DB	 93			; 0000005dH
  00acb	5d		 DB	 93			; 0000005dH
  00acc	5d		 DB	 93			; 0000005dH
  00acd	5d		 DB	 93			; 0000005dH
  00ace	5d		 DB	 93			; 0000005dH
  00acf	5d		 DB	 93			; 0000005dH
  00ad0	5d		 DB	 93			; 0000005dH
  00ad1	14		 DB	 20			; 00000014H
  00ad2	4e		 DB	 78			; 0000004eH
  00ad3	15		 DB	 21			; 00000015H
  00ad4	5d		 DB	 93			; 0000005dH
  00ad5	5d		 DB	 93			; 0000005dH
  00ad6	5d		 DB	 93			; 0000005dH
  00ad7	5d		 DB	 93			; 0000005dH
  00ad8	5d		 DB	 93			; 0000005dH
  00ad9	18		 DB	 24			; 00000018H
  00ada	5d		 DB	 93			; 0000005dH
  00adb	5d		 DB	 93			; 0000005dH
  00adc	5d		 DB	 93			; 0000005dH
  00add	5d		 DB	 93			; 0000005dH
  00ade	5d		 DB	 93			; 0000005dH
  00adf	5d		 DB	 93			; 0000005dH
  00ae0	5d		 DB	 93			; 0000005dH
  00ae1	5d		 DB	 93			; 0000005dH
  00ae2	5d		 DB	 93			; 0000005dH
  00ae3	5d		 DB	 93			; 0000005dH
  00ae4	5d		 DB	 93			; 0000005dH
  00ae5	5d		 DB	 93			; 0000005dH
  00ae6	4f		 DB	 79			; 0000004fH
  00ae7	50		 DB	 80			; 00000050H
  00ae8	51		 DB	 81			; 00000051H
  00ae9	52		 DB	 82			; 00000052H
  00aea	53		 DB	 83			; 00000053H
  00aeb	54		 DB	 84			; 00000054H
  00aec	55		 DB	 85			; 00000055H
  00aed	56		 DB	 86			; 00000056H
  00aee	57		 DB	 87			; 00000057H
  00aef	58		 DB	 88			; 00000058H
  00af0	59		 DB	 89			; 00000059H
  00af1	5d		 DB	 93			; 0000005dH
  00af2	5a		 DB	 90			; 0000005aH
  00af3	5a		 DB	 90			; 0000005aH
  00af4	5d		 DB	 93			; 0000005dH
  00af5	5d		 DB	 93			; 0000005dH
  00af6	5d		 DB	 93			; 0000005dH
  00af7	5d		 DB	 93			; 0000005dH
  00af8	5d		 DB	 93			; 0000005dH
  00af9	5d		 DB	 93			; 0000005dH
  00afa	5d		 DB	 93			; 0000005dH
  00afb	5d		 DB	 93			; 0000005dH
  00afc	5d		 DB	 93			; 0000005dH
  00afd	5d		 DB	 93			; 0000005dH
  00afe	5d		 DB	 93			; 0000005dH
  00aff	5d		 DB	 93			; 0000005dH
  00b00	5d		 DB	 93			; 0000005dH
  00b01	5d		 DB	 93			; 0000005dH
  00b02	5d		 DB	 93			; 0000005dH
  00b03	5d		 DB	 93			; 0000005dH
  00b04	5d		 DB	 93			; 0000005dH
  00b05	18		 DB	 24			; 00000018H
  00b06	5d		 DB	 93			; 0000005dH
  00b07	5d		 DB	 93			; 0000005dH
  00b08	5d		 DB	 93			; 0000005dH
  00b09	5d		 DB	 93			; 0000005dH
  00b0a	5d		 DB	 93			; 0000005dH
  00b0b	5d		 DB	 93			; 0000005dH
  00b0c	5d		 DB	 93			; 0000005dH
  00b0d	5d		 DB	 93			; 0000005dH
  00b0e	5d		 DB	 93			; 0000005dH
  00b0f	5d		 DB	 93			; 0000005dH
  00b10	5b		 DB	 91			; 0000005bH
  00b11	5d		 DB	 93			; 0000005dH
  00b12	5d		 DB	 93			; 0000005dH
  00b13	5c		 DB	 92			; 0000005cH
  00b14	5d		 DB	 93			; 0000005dH
  00b15	5d		 DB	 93			; 0000005dH
  00b16	5d		 DB	 93			; 0000005dH
  00b17	5d		 DB	 93			; 0000005dH
  00b18	5d		 DB	 93			; 0000005dH
  00b19	5d		 DB	 93			; 0000005dH
  00b1a	00		 DB	 0
  00b1b	01		 DB	 1
  00b1c	02		 DB	 2
  00b1d	03		 DB	 3
  00b1e	04		 DB	 4
  00b1f	05		 DB	 5
  00b20	06		 DB	 6
  00b21	07		 DB	 7
  00b22	08		 DB	 8
  00b23	09		 DB	 9
  00b24	0a		 DB	 10			; 0000000aH
  00b25	0b		 DB	 11			; 0000000bH
  00b26	0c		 DB	 12			; 0000000cH
  00b27	0d		 DB	 13			; 0000000dH
  00b28	5d		 DB	 93			; 0000005dH
  00b29	5d		 DB	 93			; 0000005dH
  00b2a	5d		 DB	 93			; 0000005dH
  00b2b	5d		 DB	 93			; 0000005dH
  00b2c	5d		 DB	 93			; 0000005dH
  00b2d	5d		 DB	 93			; 0000005dH
  00b2e	5d		 DB	 93			; 0000005dH
  00b2f	16		 DB	 22			; 00000016H
  00b30	17		 DB	 23			; 00000017H
  00b31	19		 DB	 25			; 00000019H
  00b32	5d		 DB	 93			; 0000005dH
  00b33	1b		 DB	 27			; 0000001bH
  00b34	24		 DB	 36			; 00000024H
  00b35	25		 DB	 37			; 00000025H
  00b36	26		 DB	 38			; 00000026H
  00b37	27		 DB	 39			; 00000027H
  00b38	28		 DB	 40			; 00000028H
?CalcPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CMasterLevelSkillTreeSystem::CalcPassiveSkillData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?InitPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?InitPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMasterLevelSkillTreeSystem::InitPassiveSkillData, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  : 	memset(&lpObj->m_MPSkillOpt,0,sizeof(lpObj->m_MPSkillOpt));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	68 cc 01 00 00	 push	 460			; 000001ccH
  0000b	05 b8 06 00 00	 add	 eax, 1720		; 000006b8H
  00010	6a 00		 push	 0
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memset
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 281  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?InitPassiveSkillData@CMasterLevelSkillTreeSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMasterLevelSkillTreeSystem::InitPassiveSkillData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
_TEXT	SEGMENT
_iSkillID$1$ = -48					; size = 4
_iParentSkill2$1$ = -44					; size = 4
_iParentSkill1$1$ = -40					; size = 4
_iMaxPoint$1$ = -36					; size = 4
_iPoint$1$ = -32					; size = 4
_iIndex$1$ = -28					; size = 4
_iRank$1$ = -24						; size = 4
_iPos$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z PROC	; CMasterLevelSkillTreeSystem::Load, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx

; 189  : 	if( lpszFileName == NULL || !strcmp(lpszFileName,"") )

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00030	85 db		 test	 ebx, ebx
  00032	0f 84 4d 06 00
	00		 je	 $LN10@Load
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0003d	8b c3		 mov	 eax, ebx
  0003f	90		 npad	 1
$LL47@Load:
  00040	8a 10		 mov	 dl, BYTE PTR [eax]
  00042	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00044	75 1a		 jne	 SHORT $LN48@Load
  00046	84 d2		 test	 dl, dl
  00048	74 12		 je	 SHORT $LN49@Load
  0004a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0004d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00050	75 0e		 jne	 SHORT $LN48@Load
  00052	83 c0 02	 add	 eax, 2
  00055	83 c1 02	 add	 ecx, 2
  00058	84 d2		 test	 dl, dl
  0005a	75 e4		 jne	 SHORT $LL47@Load
$LN49@Load:
  0005c	33 c0		 xor	 eax, eax
  0005e	eb 05		 jmp	 SHORT $LN50@Load
$LN48@Load:
  00060	1b c0		 sbb	 eax, eax
  00062	83 c8 01	 or	 eax, 1
$LN50@Load:
  00065	85 c0		 test	 eax, eax
  00067	0f 84 18 06 00
	00		 je	 $LN10@Load

; 192  : 		return;
; 193  : 	}
; 194  : 
; 195  : 	try
; 196  : 	{
; 197  : 		SMDFile = fopen(lpszFileName,"r");

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00072	53		 push	 ebx
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0007a	e8 00 00 00 00	 call	 _fopen
  0007f	83 c4 08	 add	 esp, 8
  00082	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 198  : 
; 199  : 		if( SMDFile == NULL )

  00087	85 c0		 test	 eax, eax
  00089	75 22		 jne	 SHORT $LN12@Load

; 200  : 		{
; 201  : 			MsgBox("[MasterLevelSkillTreeSystem] - Can't Open %s ",lpszFileName);

  0008b	53		 push	 ebx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@KEMAJKBC@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5C@
  00091	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00096	83 c4 08	 add	 esp, 8

; 276  : }

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
$LN12@Load:

; 202  : 			return;
; 203  : 		}
; 204  : 
; 205  : 		this->Init();

  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ; CMasterLevelSkillTreeSystem::Init
$LL2@Load:

; 206  : 		SMDToken Token;
; 207  : 		int iIndex = -1;
; 208  : 
; 209  : 		while( TRUE )
; 210  : 		{
; 211  : 			if( !strcmp("end",TokenString) )

  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000b9	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000be	66 90		 npad	 2
$LL51@Load:
  000c0	8a 10		 mov	 dl, BYTE PTR [eax]
  000c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000c4	75 1a		 jne	 SHORT $LN52@Load
  000c6	84 d2		 test	 dl, dl
  000c8	74 12		 je	 SHORT $LN53@Load
  000ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000d0	75 0e		 jne	 SHORT $LN52@Load
  000d2	83 c0 02	 add	 eax, 2
  000d5	83 c1 02	 add	 ecx, 2
  000d8	84 d2		 test	 dl, dl
  000da	75 e4		 jne	 SHORT $LL51@Load
$LN53@Load:
  000dc	33 c0		 xor	 eax, eax
  000de	eb 05		 jmp	 SHORT $LN54@Load
$LN52@Load:
  000e0	1b c0		 sbb	 eax, eax
  000e2	83 c8 01	 or	 eax, 1
$LN54@Load:
  000e5	85 c0		 test	 eax, eax
  000e7	75 2e		 jne	 SHORT $LN22@Load

; 263  : 					}
; 264  : 				}
; 265  : 			}
; 266  : 		}
; 267  : 
; 268  : 		fclose(SMDFile);

  000e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000ef	e8 00 00 00 00	 call	 _fclose

; 269  : 		LogAddTD("[MasterLevelSkillTreeSystem] - %s file is Loaded",lpszFileName);

  000f4	53		 push	 ebx
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JHFKLIFA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5?$CF@
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH

; 276  : }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 04 00	 ret	 4
$LN22@Load:

; 212  : 				break;
; 213  : 
; 214  : 			while( TRUE )
; 215  : 			{
; 216  : 				Token = GetToken();

  00117	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 217  : 
; 218  : 				if( !strcmp("end",TokenString) )

  0011c	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00121	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL55@Load:
  00126	8a 10		 mov	 dl, BYTE PTR [eax]
  00128	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0012a	75 1a		 jne	 SHORT $LN56@Load
  0012c	84 d2		 test	 dl, dl
  0012e	74 12		 je	 SHORT $LN57@Load
  00130	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00133	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00136	75 0e		 jne	 SHORT $LN56@Load
  00138	83 c0 02	 add	 eax, 2
  0013b	83 c1 02	 add	 ecx, 2
  0013e	84 d2		 test	 dl, dl
  00140	75 e4		 jne	 SHORT $LL55@Load
$LN57@Load:
  00142	33 c0		 xor	 eax, eax
  00144	eb 05		 jmp	 SHORT $LN58@Load
$LN56@Load:
  00146	1b c0		 sbb	 eax, eax
  00148	83 c8 01	 or	 eax, 1
$LN58@Load:
  0014b	85 c0		 test	 eax, eax
  0014d	0f 84 61 ff ff
	ff		 je	 $LL2@Load
$LL4@Load:

; 219  : 					break;
; 220  : 
; 221  : 				Token = GetToken();

  00153	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 222  : 
; 223  : 				iIndex = (int)TokenNumber;

  00158	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA

; 224  : 				int iTempIndex = iIndex%36-1;

  00160	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00165	f7 e9		 imul	 ecx
  00167	89 4d e4	 mov	 DWORD PTR _iIndex$1$[ebp], ecx
  0016a	c1 fa 03	 sar	 edx, 3
  0016d	8b c2		 mov	 eax, edx
  0016f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00172	03 c2		 add	 eax, edx
  00174	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00177	c1 e0 02	 shl	 eax, 2
  0017a	2b c8		 sub	 ecx, eax
  0017c	49		 dec	 ecx

; 225  : 				int iRank = iTempIndex/4;

  0017d	8b c1		 mov	 eax, ecx
  0017f	99		 cdq
  00180	83 e2 03	 and	 edx, 3
  00183	03 c2		 add	 eax, edx
  00185	c1 f8 02	 sar	 eax, 2
  00188	89 45 e8	 mov	 DWORD PTR _iRank$1$[ebp], eax

; 226  : 				int iPos = iTempIndex%4;

  0018b	81 e1 03 00 00
	80		 and	 ecx, -2147483645	; 80000003H
  00191	79 05		 jns	 SHORT $LN65@Load
  00193	49		 dec	 ecx
  00194	83 c9 fc	 or	 ecx, -4			; fffffffcH
  00197	41		 inc	 ecx
$LN65@Load:
  00198	89 4d ec	 mov	 DWORD PTR _iPos$1$[ebp], ecx

; 227  : 
; 228  : 				Token = GetToken();

  0019b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 229  : 				int iClassType = (WORD)TokenNumber;

  001a0	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  001a8	0f b7 d9	 movzx	 ebx, cx

; 230  : 
; 231  : 				Token = GetToken();

  001ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 232  : 				int iTreeKind = TokenNumber;

  001b0	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 233  : 
; 234  : 				Token = GetToken();

  001b8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 235  : 				int iPoint = TokenNumber;

  001bd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001c5	89 45 e0	 mov	 DWORD PTR _iPoint$1$[ebp], eax

; 236  : 
; 237  : 				Token = GetToken();

  001c8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 238  : 				int iMaxPoint = TokenNumber;

  001cd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001d5	89 45 dc	 mov	 DWORD PTR _iMaxPoint$1$[ebp], eax

; 239  : 
; 240  : 				Token = GetToken();

  001d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 241  : 
; 242  : 				Token = GetToken();

  001dd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 243  : 				int iParentSkill1 = TokenNumber;

  001e2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001ea	89 45 d8	 mov	 DWORD PTR _iParentSkill1$1$[ebp], eax

; 244  : 
; 245  : 				Token = GetToken();

  001ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 246  : 				int iParentSkill2 = TokenNumber;

  001f2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001fa	89 45 d4	 mov	 DWORD PTR _iParentSkill2$1$[ebp], eax

; 247  : 
; 248  : 				Token = GetToken();

  001fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 249  : 				int iSkillID = TokenNumber;

  00202	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0020a	89 45 d0	 mov	 DWORD PTR _iSkillID$1$[ebp], eax

; 250  : 
; 251  : 				Token = GetToken();

  0020d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  00212	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  00215	85 1d 00 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A, ebx
  0021b	0f 84 86 00 00
	00		 je	 $LN6@Load
  00221	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  00224	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00227	03 c7		 add	 eax, edi
  00229	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0022c	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  0022f	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00232	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  0023c	c1 e1 02	 shl	 ecx, 2
  0023f	03 c1		 add	 eax, ecx
  00241	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  00245	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  0024f	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  00252	03 c1		 add	 eax, ecx
  00254	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  00258	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  00262	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  00265	03 c1		 add	 eax, ecx
  00267	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  0026b	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  00275	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  00278	03 c1		 add	 eax, ecx
  0027a	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  0027e	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  00288	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  0028b	03 c1		 add	 eax, ecx
  0028d	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  00291	69 05 04 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+4, 2164
  0029b	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  0029e	03 c1		 add	 eax, ecx
  002a0	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  002a3	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN6@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  002a7	85 1d 08 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+8, ebx
  002ad	0f 84 86 00 00
	00		 je	 $LN34@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  002b3	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  002b6	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  002b9	03 c7		 add	 eax, edi
  002bb	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  002be	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  002c1	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  002c4	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  002ce	c1 e1 02	 shl	 ecx, 2
  002d1	03 c1		 add	 eax, ecx
  002d3	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  002d7	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  002e1	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  002e4	03 c1		 add	 eax, ecx
  002e6	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  002ea	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  002f4	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  002f7	03 c1		 add	 eax, ecx
  002f9	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  002fd	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  00307	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  0030a	03 c1		 add	 eax, ecx
  0030c	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  00310	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  0031a	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  0031d	03 c1		 add	 eax, ecx
  0031f	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  00323	69 05 0c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+12, 2164
  0032d	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  00330	03 c1		 add	 eax, ecx
  00332	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  00335	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN34@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  00339	85 1d 10 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+16, ebx
  0033f	0f 84 86 00 00
	00		 je	 $LN36@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  00345	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  00348	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0034b	03 c7		 add	 eax, edi
  0034d	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00350	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  00353	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00356	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  00360	c1 e1 02	 shl	 ecx, 2
  00363	03 c1		 add	 eax, ecx
  00365	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  00369	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  00373	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  00376	03 c1		 add	 eax, ecx
  00378	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  0037c	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  00386	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  00389	03 c1		 add	 eax, ecx
  0038b	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  0038f	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  00399	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  0039c	03 c1		 add	 eax, ecx
  0039e	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  003a2	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  003ac	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  003af	03 c1		 add	 eax, ecx
  003b1	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  003b5	69 05 14 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+20, 2164
  003bf	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  003c2	03 c1		 add	 eax, ecx
  003c4	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  003c7	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN36@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  003cb	85 1d 18 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+24, ebx
  003d1	0f 84 86 00 00
	00		 je	 $LN38@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  003d7	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  003da	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  003dd	03 c7		 add	 eax, edi
  003df	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  003e2	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  003e5	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  003e8	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  003f2	c1 e1 02	 shl	 ecx, 2
  003f5	03 c1		 add	 eax, ecx
  003f7	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  003fb	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  00405	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  00408	03 c1		 add	 eax, ecx
  0040a	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  0040e	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  00418	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  0041b	03 c1		 add	 eax, ecx
  0041d	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  00421	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  0042b	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  0042e	03 c1		 add	 eax, ecx
  00430	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  00434	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  0043e	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  00441	03 c1		 add	 eax, ecx
  00443	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  00447	69 05 1c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+28, 2164
  00451	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  00454	03 c1		 add	 eax, ecx
  00456	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  00459	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN38@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  0045d	85 1d 20 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+32, ebx
  00463	0f 84 86 00 00
	00		 je	 $LN40@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  00469	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  0046c	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  0046f	03 c7		 add	 eax, edi
  00471	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00474	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  00477	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0047a	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  00484	c1 e1 02	 shl	 ecx, 2
  00487	03 c1		 add	 eax, ecx
  00489	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  0048d	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  00497	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  0049a	03 c1		 add	 eax, ecx
  0049c	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  004a0	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  004aa	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  004ad	03 c1		 add	 eax, ecx
  004af	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  004b3	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  004bd	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  004c0	03 c1		 add	 eax, ecx
  004c2	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  004c6	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  004d0	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  004d3	03 c1		 add	 eax, ecx
  004d5	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  004d9	69 05 24 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+36, 2164
  004e3	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  004e6	03 c1		 add	 eax, ecx
  004e8	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  004eb	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN40@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  004ef	85 1d 28 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+40, ebx
  004f5	0f 84 86 00 00
	00		 je	 $LN42@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  004fb	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  004fe	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00501	03 c7		 add	 eax, edi
  00503	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00506	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  00509	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0050c	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  00516	c1 e1 02	 shl	 ecx, 2
  00519	03 c1		 add	 eax, ecx
  0051b	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  0051f	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  00529	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  0052c	03 c1		 add	 eax, ecx
  0052e	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  00532	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  0053c	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  0053f	03 c1		 add	 eax, ecx
  00541	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  00545	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  0054f	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  00552	03 c1		 add	 eax, ecx
  00554	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  00558	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  00562	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  00565	03 c1		 add	 eax, ecx
  00567	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  0056b	69 05 2c 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+44, 2164
  00575	8b 55 ec	 mov	 edx, DWORD PTR _iPos$1$[ebp]
  00578	03 c1		 add	 eax, ecx
  0057a	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  0057d	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN42@Load:

; 252  : 
; 253  : 				for(int i = 0; i < MAX_SKILLTREE_CLASS; i++)
; 254  : 				{
; 255  : 					if( CHARACTER_TABLE[i].ClassCode&iClassType )

  00581	85 1d 30 00 00
	00		 test	 DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+48, ebx
  00587	0f 84 83 00 00
	00		 je	 $LN44@Load

; 256  : 					{
; 257  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iIndex = iIndex;

  0058d	8b 45 e8	 mov	 eax, DWORD PTR _iRank$1$[ebp]
  00590	8d 04 f8	 lea	 eax, DWORD PTR [eax+edi*8]
  00593	03 c7		 add	 eax, edi
  00595	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00598	8b 55 e4	 mov	 edx, DWORD PTR _iIndex$1$[ebp]
  0059b	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0059e	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  005a8	c1 e1 02	 shl	 ecx, 2
  005ab	03 c1		 add	 eax, ecx
  005ad	89 54 30 08	 mov	 DWORD PTR [eax+esi+8], edx

; 258  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btPoint = iPoint;

  005b1	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  005bb	8b 55 e0	 mov	 edx, DWORD PTR _iPoint$1$[ebp]
  005be	03 c1		 add	 eax, ecx
  005c0	88 54 30 0c	 mov	 BYTE PTR [eax+esi+12], dl

; 259  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_btMaxPoint = iMaxPoint;

  005c4	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  005ce	8b 55 dc	 mov	 edx, DWORD PTR _iMaxPoint$1$[ebp]
  005d1	03 c1		 add	 eax, ecx
  005d3	88 54 30 0d	 mov	 BYTE PTR [eax+esi+13], dl

; 260  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill1 = iParentSkill1;

  005d7	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  005e1	8b 55 d8	 mov	 edx, DWORD PTR _iParentSkill1$1$[ebp]
  005e4	03 c1		 add	 eax, ecx
  005e6	89 54 30 10	 mov	 DWORD PTR [eax+esi+16], edx

; 261  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iParentSkill2 = iParentSkill2;

  005ea	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  005f4	8b 55 d4	 mov	 edx, DWORD PTR _iParentSkill2$1$[ebp]
  005f7	03 c1		 add	 eax, ecx
  005f9	89 54 30 14	 mov	 DWORD PTR [eax+esi+20], edx

; 262  : 						this->m_SkillTreeData[CHARACTER_TABLE[i].Class].m_SkillInfo[iTreeKind][iRank][iPos].m_iSkillID = iSkillID;

  005fd	69 05 34 00 00
	00 74 08 00 00	 imul	 eax, DWORD PTR ?CHARACTER_TABLE@@3PAU_stCharacterTable@@A+52, 2164
  00607	03 c1		 add	 eax, ecx
  00609	8b 4d d0	 mov	 ecx, DWORD PTR _iSkillID$1$[ebp]
  0060c	89 4c 30 18	 mov	 DWORD PTR [eax+esi+24], ecx
$LN44@Load:

; 217  : 
; 218  : 				if( !strcmp("end",TokenString) )

  00610	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00615	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0061a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0061f	90		 npad	 1
$LL59@Load:
  00620	8a 10		 mov	 dl, BYTE PTR [eax]
  00622	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00624	75 1a		 jne	 SHORT $LN60@Load
  00626	84 d2		 test	 dl, dl
  00628	74 12		 je	 SHORT $LN61@Load
  0062a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0062d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00630	75 0e		 jne	 SHORT $LN60@Load
  00632	83 c0 02	 add	 eax, 2
  00635	83 c1 02	 add	 ecx, 2
  00638	84 d2		 test	 dl, dl
  0063a	75 e4		 jne	 SHORT $LL59@Load
$LN61@Load:
  0063c	33 c0		 xor	 eax, eax
  0063e	eb 05		 jmp	 SHORT $LN62@Load
$LN60@Load:
  00640	1b c0		 sbb	 eax, eax
  00642	83 c8 01	 or	 eax, 1
$LN62@Load:
  00645	85 c0		 test	 eax, eax
  00647	0f 85 06 fb ff
	ff		 jne	 $LL4@Load

; 189  : 	if( lpszFileName == NULL || !strcmp(lpszFileName,"") )

  0064d	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00650	e9 5f fa ff ff	 jmp	 $LL2@Load
__catch$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z$0:

; 270  : 	}
; 271  : 	catch(int)
; 272  : 	{
; 273  : 		DWORD dwError = GetLastError();

  00655	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 274  : 		MsgBox("[MasterLevelSkillTreeSystem] - Loading Exception Error (%s) File. ",lpszFileName);

  0065b	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  0065e	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OHLDPICA@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5L@
  00663	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00668	83 c4 08	 add	 esp, 8

; 275  : 	}

  0066b	b8 00 00 00 00	 mov	 eax, $LN20@Load
  00670	c3		 ret	 0
$LN20@Load:

; 276  : }

  00671	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00674	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0067b	59		 pop	 ecx
  0067c	5f		 pop	 edi
  0067d	5e		 pop	 esi
  0067e	5b		 pop	 ebx
  0067f	8b e5		 mov	 esp, ebp
  00681	5d		 pop	 ebp
  00682	c2 04 00	 ret	 4
$LN10@Load:

; 190  : 	{
; 191  : 		MsgBox("[MasterLevelSkillTreeSystem] - File load error : File Name Error");

  00685	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@OOEJLKHO@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5F@
  0068a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0068f	83 c4 04	 add	 esp, 4

; 276  : }

  00692	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00695	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0069c	59		 pop	 ecx
  0069d	5f		 pop	 edi
  0069e	5e		 pop	 esi
  0069f	5b		 pop	 ebx
  006a0	8b e5		 mov	 esp, ebp
  006a2	5d		 pop	 ebp
  006a3	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CMasterLevelSkillTreeSystem@@QAEXPBD@Z ENDP	; CMasterLevelSkillTreeSystem::Load
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?Init@CMasterLevelSkillTreeSystem@@QAEXXZ
_TEXT	SEGMENT
_fValue$ = -12						; size = 8
_L$1$ = -4						; size = 4
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ PROC		; CMasterLevelSkillTreeSystem::Init, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 51   : 	if( this->m_LuaLoaded )

  00009	80 be c8 55 00
	00 00		 cmp	 BYTE PTR [esi+21960], 0
  00010	0f 85 2a 08 00
	00		 jne	 $LN1@Init

; 52   : 	{
; 53   : 		return;
; 54   : 	}
; 55   : 
; 56   : 	memset(this->m_SkillTreeData,0,sizeof(this->m_SkillTreeData));
; 57   : 	memset(this->m_fValue,0,sizeof(this->m_fValue));
; 58   : 
; 59   : 	lua_State* pLuaState = this->m_Lua.GetLua();

  00016	57		 push	 edi
  00017	68 c0 55 00 00	 push	 21952			; 000055c0H
  0001c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002a	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  00030	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua

; 60   : 
; 61   : 	if( pLuaState == NULL )

  00035	85 c0		 test	 eax, eax
  00037	75 1b		 jne	 SHORT $LN6@Init

; 62   : 	{
; 63   : 		LogAddTD("[MasterLevelSkillTreeSystem] - Error - [%s] [%d]",__FILE__,__LINE__);

  00039	6a 3f		 push	 63			; 0000003fH
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OPMJJLKL@MasterLevelSkillTreeSystem?4cpp?$AA@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LIFBGGBJ@?$FLMasterLevelSkillTreeSystem?$FN?5?9?5E@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 185  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
$LN6@Init:
  00054	53		 push	 ebx

; 64   : 		return;
; 65   : 	}
; 66   : 
; 67   : 	this->m_Lua.DoFile(gDirPath.GetNewPath(FILE_SKILL_MASTERTREE_EFFECT));

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@IBJJMKHM@Skill?2MasterSkillEffect?4lua?$AA@
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0005f	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00064	50		 push	 eax
  00065	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  0006b	e8 00 00 00 00	 call	 ?DoFile@MULua@@QAE_NPBD@Z ; MULua::DoFile

; 68   : 	lua_State* L = this->m_Lua.GetLua();

  00070	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  00076	e8 00 00 00 00	 call	 ?GetLua@MULua@@QAEPAUlua_State@@XZ ; MULua::GetLua
  0007b	89 45 fc	 mov	 DWORD PTR _L$1$[ebp], eax
  0007e	8d be dc 3b 00
	00		 lea	 edi, DWORD PTR [esi+15324]

; 69   : 
; 70   : 	double fValue;
; 71   : 
; 72   : 	for(int i = 1; i <= MAX_SKILLTREE_LEVEL; i++)

  00084	bb 01 00 00 00	 mov	 ebx, 1
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Init:

; 73   : 	{
; 74   : 		g_Generic_Call(L,"FN_LuaGetPercent","i>d",i,&fValue);

  00090	8d 4d f4	 lea	 ecx, DWORD PTR _fValue$[ebp]
  00093	51		 push	 ecx
  00094	53		 push	 ebx
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BDCPEPNH@FN_LuaGetPercent?$AA@
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 75   : 		this->m_fValue[1][i] = this->RoundValue(fValue,2);

  000a5	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
  000ad	8b ce		 mov	 ecx, esi
  000af	6a 02		 push	 2
  000b1	83 ec 08	 sub	 esp, 8
  000b4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b9	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 76   : 
; 77   : 		g_Generic_Call(L,"FN_LuaGetPercent2","i>d",i,&fValue);

  000be	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  000c1	50		 push	 eax
  000c2	53		 push	 ebx
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFNEDMEJ@FN_LuaGetPercent2?$AA@
  000cd	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  000d0	d9 5f ac	 fstp	 DWORD PTR [edi-84]
  000d3	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 78   : 		this->m_fValue[2][i] = this->RoundValue(fValue,2);

  000d8	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  000dd	83 c4 14	 add	 esp, 20			; 00000014H
  000e0	8b ce		 mov	 ecx, esi
  000e2	6a 02		 push	 2
  000e4	83 ec 08	 sub	 esp, 8
  000e7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 79   : 
; 80   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin","i>d",i,&fValue);

  000f1	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  000f4	50		 push	 eax
  000f5	53		 push	 ebx
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FIIENFAH@FN_LuaGetSkillDamageMin?$AA@
  00100	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00103	d9 1f		 fstp	 DWORD PTR [edi]
  00105	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 81   : 		this->m_fValue[3][i] = this->RoundValue(fValue,2);

  0010a	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0010f	83 c4 14	 add	 esp, 20			; 00000014H
  00112	8b ce		 mov	 ecx, esi
  00114	6a 02		 push	 2
  00116	83 ec 08	 sub	 esp, 8
  00119	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011e	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 82   : 
; 83   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMiddle","i>d",i,&fValue);

  00123	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00126	50		 push	 eax
  00127	53		 push	 ebx
  00128	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEGGLFON@FN_LuaGetSkillDamageMiddle?$AA@
  00132	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00135	d9 5f 54	 fstp	 DWORD PTR [edi+84]
  00138	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 84   : 		this->m_fValue[4][i] = this->RoundValue(fValue,2);

  0013d	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00142	83 c4 14	 add	 esp, 20			; 00000014H
  00145	8b ce		 mov	 ecx, esi
  00147	6a 02		 push	 2
  00149	83 ec 08	 sub	 esp, 8
  0014c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00151	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 85   : 
; 86   : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMax","i>d",i,&fValue);

  00156	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00159	50		 push	 eax
  0015a	53		 push	 ebx
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EKAPDBGI@FN_LuaGetSkillDamageMax?$AA@
  00165	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00168	d9 9f a8 00 00
	00		 fstp	 DWORD PTR [edi+168]
  0016e	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 87   : 		this->m_fValue[5][i] = this->RoundValue(fValue,2);

  00173	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00178	83 c4 14	 add	 esp, 20			; 00000014H
  0017b	8b ce		 mov	 ecx, esi
  0017d	6a 02		 push	 2
  0017f	83 ec 08	 sub	 esp, 8
  00182	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00187	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 88   : 
; 89   : 		g_Generic_Call(L,"FN_LuaGetMonsterKill","i>d",i,&fValue);

  0018c	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0018f	50		 push	 eax
  00190	53		 push	 ebx
  00191	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@DCGKOEID@FN_LuaGetMonsterKill?$AA@
  0019b	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0019e	d9 9f fc 00 00
	00		 fstp	 DWORD PTR [edi+252]
  001a4	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 90   : 		this->m_fValue[6][i] = this->RoundValue(fValue,2);

  001a9	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  001ae	83 c4 14	 add	 esp, 20			; 00000014H
  001b1	8b ce		 mov	 ecx, esi
  001b3	6a 02		 push	 2
  001b5	83 ec 08	 sub	 esp, 8
  001b8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001bd	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 91   : 
; 92   : 		g_Generic_Call(L,"FN_LuaGetPercent3","i>d",i,&fValue);

  001c2	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  001c5	50		 push	 eax
  001c6	53		 push	 ebx
  001c7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OMMPANAI@FN_LuaGetPercent3?$AA@
  001d1	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  001d4	d9 9f 50 01 00
	00		 fstp	 DWORD PTR [edi+336]
  001da	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 93   : 		this->m_fValue[7][i] = this->RoundValue(fValue,2);

  001df	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  001e4	83 c4 14	 add	 esp, 20			; 00000014H
  001e7	8b ce		 mov	 ecx, esi
  001e9	6a 02		 push	 2
  001eb	83 ec 08	 sub	 esp, 8
  001ee	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001f3	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 94   : 
; 95   : 		g_Generic_Call(L,"FN_LuaGetMaxAG","i>d",i,&fValue);

  001f8	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  001fb	50		 push	 eax
  001fc	53		 push	 ebx
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KNGMLNAM@FN_LuaGetMaxAG?$AA@
  00207	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0020a	d9 9f a4 01 00
	00		 fstp	 DWORD PTR [edi+420]
  00210	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 96   : 		this->m_fValue[8][i] = this->RoundValue(fValue,2);

  00215	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0021a	83 c4 14	 add	 esp, 20			; 00000014H
  0021d	8b ce		 mov	 ecx, esi
  0021f	6a 02		 push	 2
  00221	83 ec 08	 sub	 esp, 8
  00224	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00229	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 97   : 
; 98   : 		g_Generic_Call(L,"FN_LuaGetMaxLifeMana","i>d",i,&fValue);

  0022e	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00231	50		 push	 eax
  00232	53		 push	 ebx
  00233	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IPHPEKAB@FN_LuaGetMaxLifeMana?$AA@
  0023d	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00240	d9 9f f8 01 00
	00		 fstp	 DWORD PTR [edi+504]
  00246	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 99   : 		this->m_fValue[9][i] = this->RoundValue(fValue,2);

  0024b	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00250	83 c4 14	 add	 esp, 20			; 00000014H
  00253	8b ce		 mov	 ecx, esi
  00255	6a 02		 push	 2
  00257	83 ec 08	 sub	 esp, 8
  0025a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0025f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 100  : 
; 101  : 		g_Generic_Call(L,"FN_LuaGetAttack","i>d",i,&fValue);

  00264	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00267	50		 push	 eax
  00268	53		 push	 ebx
  00269	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0026e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EBCPMHKF@FN_LuaGetAttack?$AA@
  00273	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00276	d9 9f 4c 02 00
	00		 fstp	 DWORD PTR [edi+588]
  0027c	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 102  : 		this->m_fValue[10][i] = this->RoundValue(fValue,2);

  00281	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00286	83 c4 14	 add	 esp, 20			; 00000014H
  00289	8b ce		 mov	 ecx, esi
  0028b	6a 02		 push	 2
  0028d	83 ec 08	 sub	 esp, 8
  00290	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00295	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 103  : 
; 104  : 		g_Generic_Call(L,"FN_LuaGetSDMonsterKill","i>d",i,&fValue);

  0029a	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0029d	50		 push	 eax
  0029e	53		 push	 ebx
  0029f	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JGAEJLDA@FN_LuaGetSDMonsterKill?$AA@
  002a9	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  002ac	d9 9f a0 02 00
	00		 fstp	 DWORD PTR [edi+672]
  002b2	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 105  : 		this->m_fValue[11][i] = this->RoundValue(fValue,2);

  002b7	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  002bc	83 c4 14	 add	 esp, 20			; 00000014H
  002bf	6a 02		 push	 2
  002c1	83 ec 08	 sub	 esp, 8
  002c4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002c9	8b ce		 mov	 ecx, esi
  002cb	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 106  : 
; 107  : 		g_Generic_Call(L,"FN_LuaGetBlockingRate","i>d",i,&fValue);

  002d0	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  002d3	50		 push	 eax
  002d4	53		 push	 ebx
  002d5	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BIKPHGOL@FN_LuaGetBlockingRate?$AA@
  002df	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  002e2	d9 9f f4 02 00
	00		 fstp	 DWORD PTR [edi+756]
  002e8	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 108  : 		this->m_fValue[12][i] = this->RoundValue(fValue,2);

  002ed	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  002f2	83 c4 14	 add	 esp, 20			; 00000014H
  002f5	8b ce		 mov	 ecx, esi
  002f7	6a 02		 push	 2
  002f9	83 ec 08	 sub	 esp, 8
  002fc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00301	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 109  : 
; 110  : 		g_Generic_Call(L,"FN_LuaGetAttackSuccessRate","i>d",i,&fValue);

  00306	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00309	50		 push	 eax
  0030a	53		 push	 ebx
  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00310	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HLJOLACJ@FN_LuaGetAttackSuccessRate?$AA@
  00315	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00318	d9 9f 48 03 00
	00		 fstp	 DWORD PTR [edi+840]
  0031e	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 111  : 		this->m_fValue[13][i] = this->RoundValue(fValue,2);

  00323	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00328	83 c4 14	 add	 esp, 20			; 00000014H
  0032b	8b ce		 mov	 ecx, esi
  0032d	6a 02		 push	 2
  0032f	83 ec 08	 sub	 esp, 8
  00332	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00337	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 112  : 
; 113  : 		g_Generic_Call(L,"FN_LuaGetManAttackRate","i>d",i,&fValue);

  0033c	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0033f	50		 push	 eax
  00340	53		 push	 ebx
  00341	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00346	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GCDFBGLA@FN_LuaGetManAttackRate?$AA@
  0034b	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0034e	d9 9f 9c 03 00
	00		 fstp	 DWORD PTR [edi+924]
  00354	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 114  : 		this->m_fValue[14][i] = this->RoundValue(fValue,2);

  00359	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0035e	83 c4 14	 add	 esp, 20			; 00000014H
  00361	8b ce		 mov	 ecx, esi
  00363	6a 02		 push	 2
  00365	83 ec 08	 sub	 esp, 8
  00368	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0036d	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 115  : 
; 116  : 		g_Generic_Call(L,"FN_LuaGetPercent4","i>d",i,&fValue);

  00372	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00375	50		 push	 eax
  00376	53		 push	 ebx
  00377	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0037c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KDIOJLMP@FN_LuaGetPercent4?$AA@
  00381	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00384	d9 9f f0 03 00
	00		 fstp	 DWORD PTR [edi+1008]
  0038a	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 117  : 		this->m_fValue[15][i] = this->RoundValue(fValue,2);

  0038f	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00394	83 c4 14	 add	 esp, 20			; 00000014H
  00397	8b ce		 mov	 ecx, esi
  00399	6a 02		 push	 2
  0039b	83 ec 08	 sub	 esp, 8
  0039e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 118  : 
; 119  : 		g_Generic_Call(L,"FN_LuaGetIncreaseBlocking","i>d",i,&fValue);

  003a8	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  003ab	50		 push	 eax
  003ac	53		 push	 ebx
  003ad	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DOJCBFIF@FN_LuaGetIncreaseBlocking?$AA@
  003b7	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  003ba	d9 9f 44 04 00
	00		 fstp	 DWORD PTR [edi+1092]
  003c0	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 120  : 		this->m_fValue[16][i] = this->RoundValue(fValue,2);

  003c5	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  003ca	83 c4 14	 add	 esp, 20			; 00000014H
  003cd	8b ce		 mov	 ecx, esi
  003cf	6a 02		 push	 2
  003d1	83 ec 08	 sub	 esp, 8
  003d4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003d9	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 121  : 
; 122  : 		g_Generic_Call(L,"FN_LuaGetIncreaseStat","i>d",i,&fValue);

  003de	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  003e1	50		 push	 eax
  003e2	d9 9f 98 04 00
	00		 fstp	 DWORD PTR [edi+1176]
  003e8	53		 push	 ebx
  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JCFOHPHC@FN_LuaGetIncreaseStat?$AA@
  003f3	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  003f6	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 123  : 		this->m_fValue[17][i] = this->RoundValue(fValue,2);

  003fb	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00400	83 c4 14	 add	 esp, 20			; 00000014H
  00403	8b ce		 mov	 ecx, esi
  00405	6a 02		 push	 2
  00407	83 ec 08	 sub	 esp, 8
  0040a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0040f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 124  : 
; 125  : 		g_Generic_Call(L,"FN_LuaGetDecreaseMana","i>d",i,&fValue);

  00414	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00417	50		 push	 eax
  00418	53		 push	 ebx
  00419	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@CABOJEGF@FN_LuaGetDecreaseMana?$AA@
  00423	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00426	d9 9f ec 04 00
	00		 fstp	 DWORD PTR [edi+1260]
  0042c	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 126  : 		this->m_fValue[18][i] = this->RoundValue(fValue,2);

  00431	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00436	83 c4 14	 add	 esp, 20			; 00000014H
  00439	8b ce		 mov	 ecx, esi
  0043b	6a 02		 push	 2
  0043d	83 ec 08	 sub	 esp, 8
  00440	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00445	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 127  : 
; 128  : 		g_Generic_Call(L,"FN_LuaGetChangeBlocking","i>d",i,&fValue);

  0044a	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0044d	50		 push	 eax
  0044e	53		 push	 ebx
  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00454	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KNJEGBLM@FN_LuaGetChangeBlocking?$AA@
  00459	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0045c	d9 9f 40 05 00
	00		 fstp	 DWORD PTR [edi+1344]
  00462	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 129  : 		this->m_fValue[19][i] = this->RoundValue(fValue,2);

  00467	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0046c	83 c4 14	 add	 esp, 20			; 00000014H
  0046f	8b ce		 mov	 ecx, esi
  00471	6a 02		 push	 2
  00473	83 ec 08	 sub	 esp, 8
  00476	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0047b	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 130  : 
; 131  : 		g_Generic_Call(L,"FN_LuaGetControlAttack","i>d",i,&fValue);

  00480	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00483	50		 push	 eax
  00484	53		 push	 ebx
  00485	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NBDCMLMA@FN_LuaGetControlAttack?$AA@
  0048f	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00492	d9 9f 94 05 00
	00		 fstp	 DWORD PTR [edi+1428]
  00498	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 132  : 		this->m_fValue[20][i] = this->RoundValue(fValue,2);

  0049d	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  004a2	83 c4 14	 add	 esp, 20			; 00000014H
  004a5	8b ce		 mov	 ecx, esi
  004a7	6a 02		 push	 2
  004a9	83 ec 08	 sub	 esp, 8
  004ac	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004b1	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 133  : 
; 134  : 		g_Generic_Call(L,"FN_LuaGetManaIncRate","i>d",i,&fValue);

  004b6	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  004b9	50		 push	 eax
  004ba	53		 push	 ebx
  004bb	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FNNMPCIH@FN_LuaGetManaIncRate?$AA@
  004c5	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  004c8	d9 9f e8 05 00
	00		 fstp	 DWORD PTR [edi+1512]
  004ce	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 135  : 		this->m_fValue[21][i] = this->RoundValue(fValue,2);

  004d3	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  004d8	83 c4 14	 add	 esp, 20			; 00000014H
  004db	8b ce		 mov	 ecx, esi
  004dd	6a 02		 push	 2
  004df	83 ec 08	 sub	 esp, 8
  004e2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004e7	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 136  : 
; 137  : 		g_Generic_Call(L,"FN_LuaGetSkillDamageMin2","i>d",i,&fValue);

  004ec	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  004ef	50		 push	 eax
  004f0	53		 push	 ebx
  004f1	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  004f6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HDEMEFAH@FN_LuaGetSkillDamageMin2?$AA@
  004fb	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  004fe	d9 9f 3c 06 00
	00		 fstp	 DWORD PTR [edi+1596]
  00504	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call
  00509	83 c4 14	 add	 esp, 20			; 00000014H

; 138  : 		this->m_fValue[22][i] = this->RoundValue(fValue,2);

  0050c	6a 02		 push	 2
  0050e	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00513	83 ec 08	 sub	 esp, 8
  00516	8b ce		 mov	 ecx, esi
  00518	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0051d	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 139  : 
; 140  : 		g_Generic_Call(L,"FN_LuaGetAttackSpeed","i>d",i,&fValue);

  00522	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00525	50		 push	 eax
  00526	53		 push	 ebx
  00527	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0052c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LJJDIDAP@FN_LuaGetAttackSpeed?$AA@
  00531	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00534	d9 9f 90 06 00
	00		 fstp	 DWORD PTR [edi+1680]
  0053a	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 141  : 		this->m_fValue[23][i] = this->RoundValue(fValue,2);

  0053f	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00544	83 c4 14	 add	 esp, 20			; 00000014H
  00547	8b ce		 mov	 ecx, esi
  00549	6a 02		 push	 2
  0054b	83 ec 08	 sub	 esp, 8
  0054e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00553	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 142  : 
; 143  : 		g_Generic_Call(L,"FN_LuaBloodStorm","i>d",i,&fValue);

  00558	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0055b	50		 push	 eax
  0055c	53		 push	 ebx
  0055d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00562	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LFNDNAPP@FN_LuaBloodStorm?$AA@
  00567	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0056a	d9 9f e4 06 00
	00		 fstp	 DWORD PTR [edi+1764]
  00570	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 144  : 		this->m_fValue[25][i] = this->RoundValue(fValue,2);

  00575	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0057a	83 c4 14	 add	 esp, 20			; 00000014H
  0057d	8b ce		 mov	 ecx, esi
  0057f	6a 02		 push	 2
  00581	83 ec 08	 sub	 esp, 8
  00584	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00589	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 145  : 
; 146  : 		g_Generic_Call(L,"FN_LuaEarthPrison","i>d",i,&fValue);

  0058e	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00591	50		 push	 eax
  00592	53		 push	 ebx
  00593	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00598	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BBGGKCGM@FN_LuaEarthPrison?$AA@
  0059d	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  005a0	d9 9f 8c 07 00
	00		 fstp	 DWORD PTR [edi+1932]
  005a6	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 147  : 		this->m_fValue[26][i] = this->RoundValue(fValue,2);

  005ab	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  005b0	83 c4 14	 add	 esp, 20			; 00000014H
  005b3	8b ce		 mov	 ecx, esi
  005b5	6a 02		 push	 2
  005b7	83 ec 08	 sub	 esp, 8
  005ba	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005bf	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 148  : 
; 149  : 		g_Generic_Call(L,"FN_LuaPoisonArrow","i>d",i,&fValue);

  005c4	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  005c7	50		 push	 eax
  005c8	53		 push	 ebx
  005c9	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  005ce	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CIHPMOKL@FN_LuaPoisonArrow?$AA@
  005d3	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  005d6	d9 9f e0 07 00
	00		 fstp	 DWORD PTR [edi+2016]
  005dc	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 150  : 		this->m_fValue[27][i] = this->RoundValue(fValue,2);

  005e1	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  005e6	83 c4 14	 add	 esp, 20			; 00000014H
  005e9	8b ce		 mov	 ecx, esi
  005eb	6a 02		 push	 2
  005ed	83 ec 08	 sub	 esp, 8
  005f0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 151  : 
; 152  : 		g_Generic_Call(L,"FN_LuaIronDefense","i>d",i,&fValue);

  005fa	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  005fd	50		 push	 eax
  005fe	53		 push	 ebx
  005ff	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00604	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JFEINDGN@FN_LuaIronDefense?$AA@
  00609	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0060c	d9 9f 34 08 00
	00		 fstp	 DWORD PTR [edi+2100]
  00612	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 153  : 		this->m_fValue[28][i] = this->RoundValue(fValue,2);

  00617	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0061c	83 c4 14	 add	 esp, 20			; 00000014H
  0061f	8b ce		 mov	 ecx, esi
  00621	6a 02		 push	 2
  00623	83 ec 08	 sub	 esp, 8
  00626	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0062b	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00630	d9 9f 88 08 00
	00		 fstp	 DWORD PTR [edi+2184]

; 154  : 
; 155  : 		g_Generic_Call(L,"FN_LuaGetBlockingRateFighter","i>d",i,&fValue);

  00636	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00639	50		 push	 eax
  0063a	53		 push	 ebx
  0063b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00640	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EBCBIPEA@FN_LuaGetBlockingRateFighter?$AA@
  00645	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00648	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 156  : 		this->m_fValue[29][i] = this->RoundValue(fValue,2);

  0064d	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00652	83 c4 14	 add	 esp, 20			; 00000014H
  00655	8b ce		 mov	 ecx, esi
  00657	6a 02		 push	 2
  00659	83 ec 08	 sub	 esp, 8
  0065c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00661	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 157  : 
; 158  : 		g_Generic_Call(L,"FN_LuaGetAttackSuccessRateFighter","i>d",i,&fValue);

  00666	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00669	50		 push	 eax
  0066a	53		 push	 ebx
  0066b	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00670	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GIMADFJA@FN_LuaGetAttackSuccessRateFighte@
  00675	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00678	d9 9f dc 08 00
	00		 fstp	 DWORD PTR [edi+2268]
  0067e	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 159  : 		this->m_fValue[30][i] = this->RoundValue(fValue,2);

  00683	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00688	83 c4 14	 add	 esp, 20			; 00000014H
  0068b	8b ce		 mov	 ecx, esi
  0068d	6a 02		 push	 2
  0068f	83 ec 08	 sub	 esp, 8
  00692	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00697	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 160  : 
; 161  : 		g_Generic_Call(L,"FN_LuaGetManAttackRateFighter","i>d",i,&fValue);

  0069c	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0069f	50		 push	 eax
  006a0	53		 push	 ebx
  006a1	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  006a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PHDDECBO@FN_LuaGetManAttackRateFighter?$AA@
  006ab	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  006ae	d9 9f 30 09 00
	00		 fstp	 DWORD PTR [edi+2352]
  006b4	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 162  : 		this->m_fValue[31][i] = this->RoundValue(fValue,2);

  006b9	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  006be	83 c4 14	 add	 esp, 20			; 00000014H
  006c1	8b ce		 mov	 ecx, esi
  006c3	6a 02		 push	 2
  006c5	83 ec 08	 sub	 esp, 8
  006c8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006cd	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 163  : 
; 164  : 		g_Generic_Call(L,"FN_LuaGetMaxSDFighter","i>d",i,&fValue);

  006d2	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  006d5	50		 push	 eax
  006d6	53		 push	 ebx
  006d7	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  006dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GCMGLIBN@FN_LuaGetMaxSDFighter?$AA@
  006e1	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  006e4	d9 9f 84 09 00
	00		 fstp	 DWORD PTR [edi+2436]
  006ea	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 165  : 		this->m_fValue[33][i] = this->RoundValue(fValue,2);

  006ef	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  006f4	83 c4 14	 add	 esp, 20			; 00000014H
  006f7	8b ce		 mov	 ecx, esi
  006f9	6a 02		 push	 2
  006fb	83 ec 08	 sub	 esp, 8
  006fe	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00703	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 166  : 
; 167  : 		g_Generic_Call(L,"FN_LuaGetMaxLifeManaFighter","i>d",i,&fValue);

  00708	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  0070b	50		 push	 eax
  0070c	53		 push	 ebx
  0070d	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00712	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DMCLBHIL@FN_LuaGetMaxLifeManaFighter?$AA@
  00717	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  0071a	d9 9f 2c 0a 00
	00		 fstp	 DWORD PTR [edi+2604]
  00720	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 168  : 		this->m_fValue[34][i] = this->RoundValue(fValue,2);

  00725	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  0072a	83 c4 14	 add	 esp, 20			; 00000014H
  0072d	8b ce		 mov	 ecx, esi
  0072f	6a 02		 push	 2
  00731	83 ec 08	 sub	 esp, 8
  00734	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00739	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 169  : 
; 170  : 		g_Generic_Call(L,"FN_LuaGetIncreaseBlockingFighter","i>d",i,&fValue);

  0073e	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00741	50		 push	 eax
  00742	53		 push	 ebx
  00743	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  00748	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MICAEJNJ@FN_LuaGetIncreaseBlockingFighter@
  0074d	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00750	d9 9f 80 0a 00
	00		 fstp	 DWORD PTR [edi+2688]
  00756	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 171  : 		this->m_fValue[35][i] = this->RoundValue(fValue,2);

  0075b	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00760	83 c4 14	 add	 esp, 20			; 00000014H
  00763	8b ce		 mov	 ecx, esi
  00765	6a 02		 push	 2
  00767	83 ec 08	 sub	 esp, 8
  0076a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0076f	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 172  : 
; 173  : 		g_Generic_Call(L,"FN_LuaGetIncreaseStatFighter","i>d",i,&fValue);

  00774	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  00777	50		 push	 eax
  00778	53		 push	 ebx
  00779	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  0077e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@OLMOMCNF@FN_LuaGetIncreaseStatFighter?$AA@
  00783	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  00786	d9 9f d4 0a 00
	00		 fstp	 DWORD PTR [edi+2772]
  0078c	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 174  : 		this->m_fValue[36][i] = this->RoundValue(fValue,2);

  00791	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00796	83 c4 14	 add	 esp, 20			; 00000014H
  00799	8b ce		 mov	 ecx, esi
  0079b	6a 02		 push	 2
  0079d	83 ec 08	 sub	 esp, 8
  007a0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  007a5	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 175  : 
; 176  : 		g_Generic_Call(L,"FN_LuaGetMaxAGFighter","i>d",i,&fValue);

  007aa	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  007ad	50		 push	 eax
  007ae	53		 push	 ebx
  007af	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  007b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HIBANFAN@FN_LuaGetMaxAGFighter?$AA@
  007b9	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  007bc	d9 9f 28 0b 00
	00		 fstp	 DWORD PTR [edi+2856]
  007c2	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 177  : 		this->m_fValue[37][i] = this->RoundValue(fValue,2);

  007c7	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  007cc	83 c4 14	 add	 esp, 20			; 00000014H
  007cf	8b ce		 mov	 ecx, esi
  007d1	6a 02		 push	 2
  007d3	83 ec 08	 sub	 esp, 8
  007d6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  007db	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue

; 178  : 
; 179  : 		g_Generic_Call(L,"FN_LuaGetPercent5","i>d",i,&fValue);

  007e0	8d 45 f4	 lea	 eax, DWORD PTR _fValue$[ebp]
  007e3	50		 push	 eax
  007e4	53		 push	 ebx
  007e5	68 00 00 00 00	 push	 OFFSET ??_C@_03LHPBPOFD@i?$DOd?$AA@
  007ea	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LKJFKKIO@FN_LuaGetPercent5?$AA@
  007ef	ff 75 fc	 push	 DWORD PTR _L$1$[ebp]
  007f2	d9 9f 7c 0b 00
	00		 fstp	 DWORD PTR [edi+2940]
  007f8	e8 00 00 00 00	 call	 ?g_Generic_Call@@YA_NPAUlua_State@@PBD1ZZ ; g_Generic_Call

; 180  : 		this->m_fValue[38][i] = this->RoundValue(fValue,2);

  007fd	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR _fValue$[ebp]
  00802	83 c4 14	 add	 esp, 20			; 00000014H
  00805	8b ce		 mov	 ecx, esi
  00807	6a 02		 push	 2
  00809	83 ec 08	 sub	 esp, 8
  0080c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00811	e8 00 00 00 00	 call	 ?RoundValue@CMasterLevelSkillTreeSystem@@QAEMNH@Z ; CMasterLevelSkillTreeSystem::RoundValue
  00816	8b 45 fc	 mov	 eax, DWORD PTR _L$1$[ebp]
  00819	43		 inc	 ebx
  0081a	d9 9f d0 0b 00
	00		 fstp	 DWORD PTR [edi+3024]
  00820	83 c7 04	 add	 edi, 4
  00823	83 fb 14	 cmp	 ebx, 20			; 00000014H
  00826	0f 8e 64 f8 ff
	ff		 jle	 $LL4@Init

; 181  : 	}
; 182  : 
; 183  : 	this->m_Lua.Release();

  0082c	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  00832	e8 00 00 00 00	 call	 ?Release@MULua@@QAEXXZ	; MULua::Release
  00837	5b		 pop	 ebx

; 184  : 	this->m_LuaLoaded = true;

  00838	c6 86 c8 55 00
	00 01		 mov	 BYTE PTR [esi+21960], 1
  0083f	5f		 pop	 edi
$LN1@Init:
  00840	5e		 pop	 esi

; 185  : }

  00841	8b e5		 mov	 esp, ebp
  00843	5d		 pop	 ebp
  00844	c3		 ret	 0
?Init@CMasterLevelSkillTreeSystem@@QAEXXZ ENDP		; CMasterLevelSkillTreeSystem::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ??1CMasterLevelSkillTreeSystem@@UAE@XZ
_TEXT	SEGMENT
??1CMasterLevelSkillTreeSystem@@UAE@XZ PROC		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem, COMDAT
; _this$ = ecx

; 45   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@

; 46   : 
; 47   : }

  00006	81 c1 c4 55 00
	00		 add	 ecx, 21956		; 000055c4H
  0000c	e9 00 00 00 00	 jmp	 ??1MULua@@QAE@XZ	; MULua::~MULua
??1CMasterLevelSkillTreeSystem@@UAE@XZ ENDP		; CMasterLevelSkillTreeSystem::~CMasterLevelSkillTreeSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ??0CMasterLevelSkillTreeSystem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMasterLevelSkillTreeSystem@@QAE@XZ PROC		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 8e c4 55 00
	00		 lea	 ecx, DWORD PTR [esi+21956]
  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMasterLevelSkillTreeSystem@@6B@
  00016	e8 00 00 00 00	 call	 ??0MULua@@QAE@XZ	; MULua::MULua

; 40   : 	this->m_LuaLoaded = false;

  0001b	c6 86 c8 55 00
	00 00		 mov	 BYTE PTR [esi+21960], 0

; 41   : }

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CMasterLevelSkillTreeSystem@@QAE@XZ ENDP		; CMasterLevelSkillTreeSystem::CMasterLevelSkillTreeSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 316  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 317  : 	return (_CSTD sqrtf(_Xx));

  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv65[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv65[esp+8]

; 318  : 	}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 745  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 747  :     }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 7433 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\masterlevelskilltreesystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
