; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\SkillHitBox.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CSkillHitBox@@QAE@XZ				; CSkillHitBox::CSkillHitBox
PUBLIC	??1CSkillHitBox@@UAE@XZ				; CSkillHitBox::~CSkillHitBox
PUBLIC	?Init@CSkillHitBox@@QAEXXZ			; CSkillHitBox::Init
PUBLIC	?Check@CSkillHitBox@@QAEHHHH@Z			; CSkillHitBox::Check
PUBLIC	?HitCheck@CSkillHitBox@@QAEHHHHHH@Z		; CSkillHitBox::HitCheck
PUBLIC	?Load@CSkillHitBox@@QAEHPAD@Z			; CSkillHitBox::Load
PUBLIC	??_GCSkillHitBox@@UAEPAXI@Z			; CSkillHitBox::`scalar deleting destructor'
PUBLIC	??_7CSkillHitBox@@6B@				; CSkillHitBox::`vftable'
PUBLIC	?SkillSpearHitBox@@3VCSkillHitBox@@A		; SkillSpearHitBox
PUBLIC	?SkillElectricSparkHitBox@@3VCSkillHitBox@@A	; SkillElectricSparkHitBox
PUBLIC	??_R4CSkillHitBox@@6B@				; CSkillHitBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkillHitBox@@@8			; CSkillHitBox `RTTI Type Descriptor'
PUBLIC	??_R3CSkillHitBox@@8				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkillHitBox@@8				; CSkillHitBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkillHitBox@@8			; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__OpenFile@12:PROC
EXTRN	__imp___lclose@4:PROC
EXTRN	??_ECSkillHitBox@@UAEPAXI@Z:PROC		; CSkillHitBox::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?SkillSpearHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?)	; SkillSpearHitBox
?SkillElectricSparkHitBox@@3VCSkillHitBox@@A DB 03e08H DUP (?) ; SkillElectricSparkHitBox
_BSS	ENDS
CRT$XCU	SEGMENT
?SkillSpearHitBox$initializer$@@3P6AXXZA DD FLAT:??__ESkillSpearHitBox@@YAXXZ ; SkillSpearHitBox$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkillHitBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkillHitBox@@8 DD FLAT:??_R0?AVCSkillHitBox@@@8 ; CSkillHitBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkillHitBox@@8
rdata$r	SEGMENT
??_R2CSkillHitBox@@8 DD FLAT:??_R1A@?0A@EA@CSkillHitBox@@8 ; CSkillHitBox::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkillHitBox@@8
rdata$r	SEGMENT
??_R3CSkillHitBox@@8 DD 00H				; CSkillHitBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkillHitBox@@@8
data$r	SEGMENT
??_R0?AVCSkillHitBox@@@8 DD FLAT:??_7type_info@@6B@	; CSkillHitBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkillHitBox@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSkillHitBox@@6B@
rdata$r	SEGMENT
??_R4CSkillHitBox@@6B@ DD 00H				; CSkillHitBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkillHitBox@@@8
	DD	FLAT:??_R3CSkillHitBox@@8
rdata$r	ENDS
;	COMDAT ??_7CSkillHitBox@@6B@
CONST	SEGMENT
??_7CSkillHitBox@@6B@ DD FLAT:??_R4CSkillHitBox@@6B@	; CSkillHitBox::`vftable'
	DD	FLAT:??_ECSkillHitBox@@UAEPAXI@Z
CONST	ENDS
CRT$XCU	SEGMENT
?SkillElectricSparkHitBox$initializer$@@3P6AXXZA DD FLAT:??__ESkillElectricSparkHitBox@@YAXXZ ; SkillElectricSparkHitBox$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FSkillElectricSparkHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic atexit destructor for 'SkillElectricSparkHitBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  00005	e9 00 00 00 00	 jmp	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
??__FSkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ??__ESkillElectricSparkHitBox@@YAXXZ
text$di	SEGMENT
??__ESkillElectricSparkHitBox@@YAXXZ PROC		; `dynamic initializer for 'SkillElectricSparkHitBox'', COMDAT

; 12   : CSkillHitBox SkillElectricSparkHitBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillElectricSparkHitBox@@3VCSkillHitBox@@A ; SkillElectricSparkHitBox
  00005	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__FSkillElectricSparkHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillElectricSparkHitBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__ESkillElectricSparkHitBox@@YAXXZ ENDP		; `dynamic initializer for 'SkillElectricSparkHitBox''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FSkillSpearHitBox@@YAXXZ
text$yd	SEGMENT
??__FSkillSpearHitBox@@YAXXZ PROC			; `dynamic atexit destructor for 'SkillSpearHitBox'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  00005	e9 00 00 00 00	 jmp	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
??__FSkillSpearHitBox@@YAXXZ ENDP			; `dynamic atexit destructor for 'SkillSpearHitBox''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ??__ESkillSpearHitBox@@YAXXZ
text$di	SEGMENT
??__ESkillSpearHitBox@@YAXXZ PROC			; `dynamic initializer for 'SkillSpearHitBox'', COMDAT

; 11   : CSkillHitBox SkillSpearHitBox;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?SkillSpearHitBox@@3VCSkillHitBox@@A ; SkillSpearHitBox
  00005	e8 00 00 00 00	 call	 ??0CSkillHitBox@@QAE@XZ	; CSkillHitBox::CSkillHitBox
  0000a	68 00 00 00 00	 push	 OFFSET ??__FSkillSpearHitBox@@YAXXZ ; `dynamic atexit destructor for 'SkillSpearHitBox''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__ESkillSpearHitBox@@YAXXZ ENDP			; `dynamic initializer for 'SkillSpearHitBox''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSkillHitBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkillHitBox@@UAEPAXI@Z PROC			; CSkillHitBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkillHitBox@@UAE@XZ	; CSkillHitBox::~CSkillHitBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 08 3e 00 00	 push	 15880			; 00003e08H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSkillHitBox@@UAEPAXI@Z ENDP			; CSkillHitBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?Load@CSkillHitBox@@QAEHPAD@Z
_TEXT	SEGMENT
_readfilesize$ = -144					; size = 4
_ofst$ = -140						; size = 136
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?Load@CSkillHitBox@@QAEHPAD@Z PROC			; CSkillHitBox::Load, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 70   : 	OFSTRUCT ofst;
; 71   : 	HFILE hfile;
; 72   : 	int filesize;
; 73   : 	unsigned long readfilesize;
; 74   : 
; 75   : 	this->Init();

  0001a	e8 00 00 00 00	 call	 ?Init@CSkillHitBox@@QAEXXZ ; CSkillHitBox::Init

; 76   : 	
; 77   : 	hfile = OpenFile( filename, &ofst, OF_READ|OF_SHARE_COMPAT);

  0001f	6a 00		 push	 0
  00021	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _ofst$[ebp]
  00027	50		 push	 eax
  00028	56		 push	 esi
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenFile@12
  0002f	8b f0		 mov	 esi, eax

; 78   : 
; 79   : 	if ( hfile == NULL )

  00031	85 f6		 test	 esi, esi
  00033	74 17		 je	 SHORT $LN7@Load

; 80   : 	{
; 81   : 		return false;
; 82   : 	}
; 83   : 
; 84   : 	filesize = GetFileSize((HANDLE) hfile, NULL );

  00035	6a 00		 push	 0
  00037	56		 push	 esi
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8

; 85   : 
; 86   : 	if ( filesize != sizeof(this->m_Table) )

  0003e	3d 04 3e 00 00	 cmp	 eax, 15876		; 00003e04H
  00043	74 1b		 je	 SHORT $LN3@Load
$LN8@Load:

; 87   : 	{
; 88   : 		_lclose(hfile);

  00045	56		 push	 esi
$LN9@Load:
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4
$LN7@Load:
  0004c	5f		 pop	 edi

; 89   : 		return false;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 105  : 	return true;
; 106  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN3@Load:

; 90   : 	}
; 91   : 
; 92   : 	if (ReadFile( (HANDLE) hfile, this->m_Table, filesize, &readfilesize, NULL) == 0 )

  00060	6a 00		 push	 0
  00062	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _readfilesize$[ebp]
  00068	50		 push	 eax
  00069	68 04 3e 00 00	 push	 15876			; 00003e04H
  0006e	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00071	50		 push	 eax
  00072	56		 push	 esi
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00079	85 c0		 test	 eax, eax
  0007b	74 c8		 je	 SHORT $LN8@Load

; 93   : 	{
; 94   : 		_lclose(hfile);
; 95   : 		return false;
; 96   : 	}
; 97   : 
; 98   : 	if ( readfilesize != filesize )

  0007d	81 bd 70 ff ff
	ff 04 3e 00 00	 cmp	 DWORD PTR _readfilesize$[ebp], 15876 ; 00003e04H

; 99   : 	{
; 100  : 		_lclose( hfile);

  00087	56		 push	 esi
  00088	75 bc		 jne	 SHORT $LN9@Load

; 101  : 		return false;
; 102  : 	}
; 103  : 
; 104  : 	_lclose( hfile);

  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lclose@4

; 105  : 	return true;
; 106  : }

  00090	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	5f		 pop	 edi
  00099	33 cd		 xor	 ecx, ebp
  0009b	5e		 pop	 esi
  0009c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
?Load@CSkillHitBox@@QAEHPAD@Z ENDP			; CSkillHitBox::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?HitCheck@CSkillHitBox@@QAEHHHHHH@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_tx$ = 20						; size = 4
_ty$ = 24						; size = 4
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z PROC		; CSkillHitBox::HitCheck, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 	dir /= 10;

  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	f7 6d 08	 imul	 DWORD PTR _dir$[ebp]
  0000b	53		 push	 ebx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b fa		 mov	 edi, edx
  00014	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00017	03 fa		 add	 edi, edx

; 48   : 
; 49   : 	if ( dir < 0 || dir >= 36 )

  00019	83 ff 23	 cmp	 edi, 35			; 00000023H
  0001c	77 50		 ja	 SHORT $LN3@HitCheck

; 52   : 	}
; 53   : 
; 54   : 	int targetx = tx - x;
; 55   : 	int targety = ty - y;
; 56   : 
; 57   : 	targetx += 10;
; 58   : 	targety += 10;

  0001e	8b 4d 18	 mov	 ecx, DWORD PTR _ty$[ebp]
  00021	2b 4d 10	 sub	 ecx, DWORD PTR _y$[ebp]
  00024	56		 push	 esi
  00025	8b 75 14	 mov	 esi, DWORD PTR _tx$[ebp]
  00028	83 c1 0a	 add	 ecx, 10			; 0000000aH
  0002b	2b 75 0c	 sub	 esi, DWORD PTR _x$[ebp]
  0002e	83 c6 0a	 add	 esi, 10			; 0000000aH

; 59   : 
; 60   : 	if ( targetx <0 || abs(targetx) >= 21 || targety <0 || abs(targety) >= 21 )

  00031	78 32		 js	 SHORT $LN5@HitCheck
  00033	8b c6		 mov	 eax, esi
  00035	99		 cdq
  00036	33 c2		 xor	 eax, edx
  00038	2b c2		 sub	 eax, edx
  0003a	83 f8 15	 cmp	 eax, 21			; 00000015H
  0003d	7d 26		 jge	 SHORT $LN5@HitCheck
  0003f	85 c9		 test	 ecx, ecx
  00041	78 22		 js	 SHORT $LN5@HitCheck
  00043	8b c1		 mov	 eax, ecx
  00045	99		 cdq
  00046	33 c2		 xor	 eax, edx
  00048	2b c2		 sub	 eax, edx
  0004a	83 f8 15	 cmp	 eax, 21			; 00000015H
  0004d	7d 16		 jge	 SHORT $LN5@HitCheck

; 63   : 	}
; 64   : 
; 65   : 	return this->m_Table[dir][targety * 21 + targetx];

  0004f	6b c7 15	 imul	 eax, edi, 21
  00052	03 c1		 add	 eax, ecx
  00054	6b c0 15	 imul	 eax, eax, 21
  00057	03 c6		 add	 eax, esi
  00059	5e		 pop	 esi
  0005a	5f		 pop	 edi
  0005b	0f b6 44 18 04	 movzx	 eax, BYTE PTR [eax+ebx+4]
  00060	5b		 pop	 ebx

; 66   : }

  00061	5d		 pop	 ebp
  00062	c2 14 00	 ret	 20			; 00000014H
$LN5@HitCheck:
  00065	5e		 pop	 esi
  00066	5f		 pop	 edi

; 61   : 	{
; 62   : 		return 0;

  00067	33 c0		 xor	 eax, eax
  00069	5b		 pop	 ebx

; 66   : }

  0006a	5d		 pop	 ebp
  0006b	c2 14 00	 ret	 20			; 00000014H
$LN3@HitCheck:
  0006e	5f		 pop	 edi

; 50   : 	{
; 51   : 		return 0;

  0006f	33 c0		 xor	 eax, eax
  00071	5b		 pop	 ebx

; 66   : }

  00072	5d		 pop	 ebp
  00073	c2 14 00	 ret	 20			; 00000014H
?HitCheck@CSkillHitBox@@QAEHHHHHH@Z ENDP		; CSkillHitBox::HitCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?Check@CSkillHitBox@@QAEHHHH@Z
_TEXT	SEGMENT
_dir$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?Check@CSkillHitBox@@QAEHHHH@Z PROC			; CSkillHitBox::Check, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 	if ( x <0 || x >= 21 || y < 0 || y >= 21 || dir < 0 || dir >= 36 )

  00003	83 7d 0c 14	 cmp	 DWORD PTR _x$[ebp], 20	; 00000014H
  00007	77 24		 ja	 SHORT $LN3@Check
  00009	8b 55 10	 mov	 edx, DWORD PTR _y$[ebp]
  0000c	83 fa 14	 cmp	 edx, 20			; 00000014H
  0000f	77 1c		 ja	 SHORT $LN3@Check
  00011	8b 45 08	 mov	 eax, DWORD PTR _dir$[ebp]
  00014	83 f8 23	 cmp	 eax, 35			; 00000023H
  00017	77 14		 ja	 SHORT $LN3@Check

; 37   : 	}
; 38   : 
; 39   : 	return this->m_Table[dir][y * 21 + x];

  00019	6b c0 15	 imul	 eax, eax, 21
  0001c	03 c2		 add	 eax, edx
  0001e	6b c0 15	 imul	 eax, eax, 21
  00021	03 45 0c	 add	 eax, DWORD PTR _x$[ebp]
  00024	0f b6 44 08 04	 movzx	 eax, BYTE PTR [eax+ecx+4]

; 40   : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Check:

; 35   : 	{
; 36   : 		return 0;

  0002d	33 c0		 xor	 eax, eax

; 40   : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?Check@CSkillHitBox@@QAEHHHH@Z ENDP			; CSkillHitBox::Check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?Init@CSkillHitBox@@QAEXXZ
_TEXT	SEGMENT
?Init@CSkillHitBox@@QAEXXZ PROC				; CSkillHitBox::Init, COMDAT
; _this$ = ecx

; 27   : 	memset(this->m_Table, 0, sizeof(this->m_Table));

  00000	68 04 3e 00 00	 push	 15876			; 00003e04H
  00005	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 28   : }

  00013	c3		 ret	 0
?Init@CSkillHitBox@@QAEXXZ ENDP				; CSkillHitBox::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ??1CSkillHitBox@@UAE@XZ
_TEXT	SEGMENT
??1CSkillHitBox@@UAE@XZ PROC				; CSkillHitBox::~CSkillHitBox, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSkillHitBox@@6B@

; 22   : 	return;
; 23   : }

  00006	c3		 ret	 0
??1CSkillHitBox@@UAE@XZ ENDP				; CSkillHitBox::~CSkillHitBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ??0CSkillHitBox@@QAE@XZ
_TEXT	SEGMENT
??0CSkillHitBox@@QAE@XZ PROC				; CSkillHitBox::CSkillHitBox, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSkillHitBox@@6B@

; 16   : 	return;
; 17   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CSkillHitBox@@QAE@XZ ENDP				; CSkillHitBox::CSkillHitBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\skillhitbox.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 107  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
