; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\LogToFile.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	?Output@CLogToFile@@QAAXPADZZ			; CLogToFile::Output
PUBLIC	??0CLogToFile@@QAE@QAD0H@Z			; CLogToFile::CLogToFile
PUBLIC	??1CLogToFile@@QAE@XZ				; CLogToFile::~CLogToFile
PUBLIC	??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char *>
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_07EIPNPBIJ@LOGDATA?$AA@			; `string'
PUBLIC	??_C@_03MLIHNEFJ@LOG?$AA@			; `string'
PUBLIC	??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ ; `string'
PUBLIC	??_C@_02DPNLHKJD@a?$CL?$AA@			; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ ; `string'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_strcpy_s:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@ DB '%d:%d:%d  %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNLHKJD@a?$CL?$AA@
CONST	SEGMENT
??_C@_02DPNLHKJD@a?$CL?$AA@ DB 'a+', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
CONST	SEGMENT
??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@ DB '%'
	DB	's\%s %04d-%02d-%02d_%s.txt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MLIHNEFJ@LOG?$AA@
CONST	SEGMENT
??_C@_03MLIHNEFJ@LOG?$AA@ DB 'LOG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EIPNPBIJ@LOGDATA?$AA@
CONST	SEGMENT
??_C@_07EIPNPBIJ@LOGDATA?$AA@ DB 'LOGDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
;	COMDAT ??1CLogToFile@@QAE@XZ
_TEXT	SEGMENT
??1CLogToFile@@QAE@XZ PROC				; CLogToFile::~CLogToFile, COMDAT
; _this$ = ecx

; 47   : 	DeleteCriticalSection(&this->m_critLogToFile );

  00000	8d 81 10 02 01
	00		 lea	 eax, DWORD PTR [ecx+66064]
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 48   : }

  0000d	c3		 ret	 0
??1CLogToFile@@QAE@XZ ENDP				; CLogToFile::~CLogToFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
;	COMDAT ??0CLogToFile@@QAE@QAD0H@Z
_TEXT	SEGMENT
_LogFileName$ = 8					; size = 4
_LogDirectoryName$ = 12					; size = 4
_bWithDate$ = 16					; size = 4
??0CLogToFile@@QAE@QAD0H@Z PROC				; CLogToFile::CLogToFile, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 17   : 	if (strcmp(LogFileName, "") == 0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _LogFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0000f	8b c7		 mov	 eax, edi
  00011	53		 push	 ebx
$LL7@CLogToFile:
  00012	8a 18		 mov	 bl, BYTE PTR [eax]
  00014	3a 1a		 cmp	 bl, BYTE PTR [edx]
  00016	75 1a		 jne	 SHORT $LN8@CLogToFile
  00018	84 db		 test	 bl, bl
  0001a	74 12		 je	 SHORT $LN9@CLogToFile
  0001c	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0001f	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00022	75 0e		 jne	 SHORT $LN8@CLogToFile
  00024	83 c0 02	 add	 eax, 2
  00027	83 c2 02	 add	 edx, 2
  0002a	84 c9		 test	 cl, cl
  0002c	75 e4		 jne	 SHORT $LL7@CLogToFile
$LN9@CLogToFile:
  0002e	33 c0		 xor	 eax, eax
  00030	eb 05		 jmp	 SHORT $LN10@CLogToFile
$LN8@CLogToFile:
  00032	1b c0		 sbb	 eax, eax
  00034	83 c8 01	 or	 eax, 1
$LN10@CLogToFile:
  00037	85 c0		 test	 eax, eax

; 18   : 	{
; 19   : 		strcpy_s(this->m_szLogFileName, sizeof(this->m_szLogFileName), "LOGDATA");

  00039	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003c	5b		 pop	 ebx
  0003d	75 07		 jne	 SHORT $LN2@CLogToFile
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_07EIPNPBIJ@LOGDATA?$AA@

; 20   : 	}
; 21   : 	else

  00044	eb 01		 jmp	 SHORT $LN15@CLogToFile
$LN2@CLogToFile:

; 22   : 	{
; 23   : 		strcpy_s(this->m_szLogFileName, sizeof(this->m_szLogFileName), LogFileName);

  00046	57		 push	 edi
$LN15@CLogToFile:
  00047	68 04 01 00 00	 push	 260			; 00000104H
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _strcpy_s

; 24   : 	}
; 25   : 
; 26   : 	
; 27   : 	if (!strcmp(LogDirectoryName, ""))

  00052	8b 7d 0c	 mov	 edi, DWORD PTR _LogDirectoryName$[ebp]
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  0005d	8b c7		 mov	 eax, edi
  0005f	90		 npad	 1
$LL11@CLogToFile:
  00060	8a 10		 mov	 dl, BYTE PTR [eax]
  00062	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00064	75 1a		 jne	 SHORT $LN12@CLogToFile
  00066	84 d2		 test	 dl, dl
  00068	74 12		 je	 SHORT $LN13@CLogToFile
  0006a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00070	75 0e		 jne	 SHORT $LN12@CLogToFile
  00072	83 c0 02	 add	 eax, 2
  00075	83 c1 02	 add	 ecx, 2
  00078	84 d2		 test	 dl, dl
  0007a	75 e4		 jne	 SHORT $LL11@CLogToFile
$LN13@CLogToFile:
  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN14@CLogToFile
$LN12@CLogToFile:
  00080	1b c0		 sbb	 eax, eax
  00082	83 c8 01	 or	 eax, 1
$LN14@CLogToFile:
  00085	85 c0		 test	 eax, eax

; 28   : 	{
; 29   : 		strcpy_s(this->m_szLogDirectoryName, sizeof(this->m_szLogDirectoryName), "LOG");

  00087	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  0008d	75 07		 jne	 SHORT $LN4@CLogToFile
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_03MLIHNEFJ@LOG?$AA@

; 30   : 	}
; 31   : 	else

  00094	eb 01		 jmp	 SHORT $LN16@CLogToFile
$LN4@CLogToFile:

; 32   : 	{
; 33   : 		strcpy_s(this->m_szLogDirectoryName, sizeof(this->m_szLogDirectoryName), LogDirectoryName);

  00096	57		 push	 edi
$LN16@CLogToFile:
  00097	68 04 01 00 00	 push	 260			; 00000104H
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _strcpy_s

; 34   : 	}
; 35   : 	
; 36   : 	this->m_bWithDate  = bWithDate;	

  000a2	8b 45 10	 mov	 eax, DWORD PTR _bWithDate$[ebp]
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	89 86 0c 02 01
	00		 mov	 DWORD PTR [esi+66060], eax

; 37   : 
; 38   : 	CreateDirectory(LogDirectoryName, NULL);

  000ae	6a 00		 push	 0
  000b0	57		 push	 edi
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8

; 39   : 
; 40   : 	InitializeCriticalSection(&this->m_critLogToFile );

  000b7	8d 86 10 02 01
	00		 lea	 eax, DWORD PTR [esi+66064]
  000bd	50		 push	 eax
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
  000c4	5f		 pop	 edi

; 41   : 	
; 42   : }

  000c5	8b c6		 mov	 eax, esi
  000c7	5e		 pop	 esi
  000c8	5d		 pop	 ebp
  000c9	c2 0c 00	 ret	 12			; 0000000cH
??0CLogToFile@@QAE@QAD0H@Z ENDP				; CLogToFile::CLogToFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
;	COMDAT ?Output@CLogToFile@@QAAXPADZZ
_TEXT	SEGMENT
_strSystime$ = -280					; size = 16
_szLogFileName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?Output@CLogToFile@@QAAXPADZZ PROC			; CLogToFile::Output, COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00018	57		 push	 edi

; 53   : 	va_list argptr;
; 54   : 	int iChrWritten;
; 55   : 	char szLogFileName[260]; // Is StringZero Terminated
; 56   : 
; 57   : 	SYSTEMTIME strSystime;
; 58   : 	
; 59   : 	EnterCriticalSection(&this->m_critLogToFile );

  00019	8d be 10 02 01
	00		 lea	 edi, DWORD PTR [esi+66064]
  0001f	57		 push	 edi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00026	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00029	50		 push	 eax
  0002a	6a 00		 push	 0
  0002c	ff 75 0c	 push	 DWORD PTR _fmt$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp

; 62   : 	iChrWritten=vsprintf(this->m_cBUFFER , fmt, argptr);

  0002f	8d 9e 0c 02 00
	00		 lea	 ebx, DWORD PTR [esi+524]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00035	6a ff		 push	 -1
  00037	53		 push	 ebx
  00038	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	ff 70 04	 push	 DWORD PTR [eax+4]
  00042	83 c9 01	 or	 ecx, 1
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  0004b	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp

; 65   : 	GetLocalTime(&strSystime);

  0004e	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _strSystime$[ebp]
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4

; 66   : 
; 67   : 	wsprintf(szLogFileName, "%s\\%s %04d-%02d-%02d_%s.txt",

  0005b	0f b7 85 ee fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+6]
  00062	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00067	50		 push	 eax
  00068	0f b7 85 ea fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+2]
  0006f	50		 push	 eax
  00070	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp]
  00077	50		 push	 eax
  00078	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0007b	50		 push	 eax
  0007c	8d 86 08 01 00
	00		 lea	 eax, DWORD PTR [esi+264]
  00082	50		 push	 eax
  00083	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$[ebp]
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MEOFFIFO@?$CFs?2?$CFs?5?$CF04d?9?$CF02d?9?$CF02d_?$CFs?4txt?$AA@
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 68   : 		&this->m_szLogDirectoryName[0] , &this->m_szLogFileName [0],
; 69   : 		strSystime.wYear, strSystime.wMonth, strSystime.wDay,
; 70   : 		szServerName);
; 71   : 
; 72   : 	if ( (this->m_fLogFile = fopen(szLogFileName, "a+"))==0)	//flipe +'0

  00095	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _szLogFileName$[ebp]
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPNLHKJD@a?$CL?$AA@
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _fopen
  000a6	8b c8		 mov	 ecx, eax
  000a8	83 c4 28	 add	 esp, 40			; 00000028H
  000ab	89 0e		 mov	 DWORD PTR [esi], ecx
  000ad	85 c9		 test	 ecx, ecx
  000af	74 4a		 je	 SHORT $LN11@Output

; 73   : 	{
; 74   : 		LeaveCriticalSection(&this->m_critLogToFile );	
; 75   : 	}
; 76   : 	else
; 77   : 	{
; 78   : 		if (this->m_bWithDate ==0)

  000b1	83 be 0c 02 01
	00 00		 cmp	 DWORD PTR [esi+66060], 0

; 79   : 		{
; 80   : 			fprintf(this->m_fLogFile , "%s\n", this->m_cBUFFER);

  000b8	53		 push	 ebx
  000b9	75 10		 jne	 SHORT $LN4@Output
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _fprintf
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : 		}
; 82   : 		else

  000c9	eb 26		 jmp	 SHORT $LN5@Output
$LN4@Output:

; 83   : 		{
; 84   : 			fprintf(this->m_fLogFile , "%d:%d:%d  %s\n", strSystime.wHour, strSystime.wMinute, strSystime.wSecond, this->m_cBUFFER);

  000cb	0f b7 85 f4 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+12]
  000d2	50		 push	 eax
  000d3	0f b7 85 f2 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+10]
  000da	50		 push	 eax
  000db	0f b7 85 f0 fe
	ff ff		 movzx	 eax, WORD PTR _strSystime$[ebp+8]
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PALJHMIK@?$CFd?3?$CFd?3?$CFd?5?5?$CFs?6?$AA@
  000e8	51		 push	 ecx
  000e9	e8 00 00 00 00	 call	 _fprintf
  000ee	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@Output:

; 85   : 		}
; 86   : 		fclose(this->m_fLogFile );

  000f1	ff 36		 push	 DWORD PTR [esi]
  000f3	e8 00 00 00 00	 call	 _fclose
  000f8	83 c4 04	 add	 esp, 4
$LN11@Output:

; 87   : 
; 88   : 		LeaveCriticalSection(&this->m_critLogToFile );

  000fb	57		 push	 edi
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 89   : 	}
; 90   : }

  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	33 cd		 xor	 ecx, ebp
  00109	5b		 pop	 ebx
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
?Output@CLogToFile@@QAAXPADZZ ENDP			; CLogToFile::Output
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000b	6a ff		 push	 -1
  0000d	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 01	 or	 ecx, 1
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1474 :     #pragma warning(push)
; 1475 :     #pragma warning(disable: 4996) // Deprecation
; 1476 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);
; 1477 :     #pragma warning(pop)
; 1478 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);
; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logtofile.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
