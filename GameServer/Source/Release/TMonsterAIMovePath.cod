; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\TMonsterAIMovePath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0TMonsterAIMovePathInfo@@QAE@XZ		; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo
PUBLIC	??0TMonsterAIMovePath@@QAE@XZ			; TMonsterAIMovePath::TMonsterAIMovePath
PUBLIC	??1TMonsterAIMovePath@@UAE@XZ			; TMonsterAIMovePath::~TMonsterAIMovePath
PUBLIC	?LoadData@TMonsterAIMovePath@@QAEHPAD@Z		; TMonsterAIMovePath::LoadData
PUBLIC	?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath
PUBLIC	??_GTMonsterAIMovePath@@UAEPAXI@Z		; TMonsterAIMovePath::`scalar deleting destructor'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7TMonsterAIMovePath@@6B@			; TMonsterAIMovePath::`vftable'
PUBLIC	??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@ ; `string'
PUBLIC	??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@ ; `string'
PUBLIC	??_R4TMonsterAIMovePath@@6B@			; TMonsterAIMovePath::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIMovePath@@@8			; TMonsterAIMovePath `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIMovePath@@8			; TMonsterAIMovePath::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIMovePath@@8			; TMonsterAIMovePath::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIMovePath@@8		; TMonsterAIMovePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	??_ETMonsterAIMovePath@@UAEPAXI@Z:PROC		; TMonsterAIMovePath::`vector deleting destructor'
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@TMonsterAIMovePath@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIMovePath@@8 DD FLAT:??_R0?AVTMonsterAIMovePath@@@8 ; TMonsterAIMovePath::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIMovePath@@8
rdata$r	SEGMENT
??_R2TMonsterAIMovePath@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIMovePath@@8 ; TMonsterAIMovePath::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIMovePath@@8
rdata$r	SEGMENT
??_R3TMonsterAIMovePath@@8 DD 00H			; TMonsterAIMovePath::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIMovePath@@@8
data$r	SEGMENT
??_R0?AVTMonsterAIMovePath@@@8 DD FLAT:??_7type_info@@6B@ ; TMonsterAIMovePath `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIMovePath@@', 00H
data$r	ENDS
;	COMDAT ??_R4TMonsterAIMovePath@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIMovePath@@6B@ DD 00H			; TMonsterAIMovePath::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIMovePath@@@8
	DD	FLAT:??_R3TMonsterAIMovePath@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@
CONST	SEGMENT
??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@ DB '[Mon'
	DB	'ster AI MovePath] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@
CONST	SEGMENT
??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@ DB '['
	DB	'Monster AI MovePath ] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@
CONST	SEGMENT
??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@ DB '[Monst'
	DB	'er AI MovePath] Exceed Max Move Path-Spot ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@
CONST	SEGMENT
??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@ DB '[Mo'
	DB	'nster AI MovePath] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@
CONST	SEGMENT
??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@ DB '[Mon'
	DB	'ster AI MovePath] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7TMonsterAIMovePath@@6B@
CONST	SEGMENT
??_7TMonsterAIMovePath@@6B@ DD FLAT:??_R4TMonsterAIMovePath@@6B@ ; TMonsterAIMovePath::`vftable'
	DD	FLAT:??_ETMonsterAIMovePath@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIMovePath@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIMovePath@@UAEPAXI@Z PROC			; TMonsterAIMovePath::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIMovePath@@UAE@XZ ; TMonsterAIMovePath::~TMonsterAIMovePath
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 cc 12 00 00	 push	 4812			; 000012ccH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GTMonsterAIMovePath@@UAEPAXI@Z ENDP			; TMonsterAIMovePath::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ
_TEXT	SEGMENT
?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ PROC ; TMonsterAIMovePath::DelAllAIMonsterMovePath, COMDAT
; _this$ = ecx

; 126  : 	for ( int i=0;i<MAX_MONSTER_AI_MOVE_PATH;i++)

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00003	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@DelAllAIMo:
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h

; 36   : 		this->m_iType = -1;

  00010	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp

; 126  : 	for ( int i=0;i<MAX_MONSTER_AI_MOVE_PATH;i++)

  00017	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h

; 37   : 		this->m_iMapNumber = -1;

  0001a	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 38   : 		this->m_iPathX = -1;

  00021	c7 40 f0 ff ff
	ff ff		 mov	 DWORD PTR [eax-16], -1

; 39   : 		this->m_iPathY = -1;

  00028	c7 40 f4 ff ff
	ff ff		 mov	 DWORD PTR [eax-12], -1
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp

; 126  : 	for ( int i=0;i<MAX_MONSTER_AI_MOVE_PATH;i++)

  0002f	83 ea 01	 sub	 edx, 1
  00032	75 dc		 jne	 SHORT $LL4@DelAllAIMo

; 127  : 	{
; 128  : 		this->m_MovePathInfo[i].Reset();
; 129  : 	}
; 130  : 
; 131  : 	this->m_iMovePathSpotCount = 0;

  00034	89 91 c8 12 00
	00		 mov	 DWORD PTR [ecx+4808], edx

; 132  : 	this->m_bDataLoad = FALSE;
; 133  : 
; 134  : 	return FALSE;

  0003a	33 c0		 xor	 eax, eax
  0003c	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 135  : }

  0003f	c3		 ret	 0
?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ENDP ; TMonsterAIMovePath::DelAllAIMonsterMovePath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
_TEXT	SEGMENT
_iType$1$ = -24						; size = 4
_this$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIMovePath@@QAEHPAD@Z PROC		; TMonsterAIMovePath::LoadData, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi

; 34   : 	this->m_bDataLoad = FALSE;
; 35   : 
; 36   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  00030	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003a	85 db		 test	 ebx, ebx
  0003c	0f 84 a4 01 00
	00		 je	 $LN7@LoadData
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00047	8b c3		 mov	 eax, ebx
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL28@LoadData:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN29@LoadData
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN30@LoadData
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN29@LoadData
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL28@LoadData
$LN30@LoadData:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN31@LoadData
$LN29@LoadData:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN31@LoadData:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 69 01 00
	00		 je	 $LN7@LoadData

; 40   : 	}
; 41   : 
; 42   : 	try
; 43   : 	{
; 44   : 		SMDToken Token;
; 45   : 		SMDFile = fopen(lpszFileName, "r");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	53		 push	 ebx
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	e8 00 00 00 00	 call	 _fopen
  0008f	83 c4 08	 add	 esp, 8
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 46   : 
; 47   : 		if ( SMDFile == NULL )

  00097	85 c0		 test	 eax, eax
  00099	75 13		 jne	 SHORT $LN9@LoadData

; 48   : 		{
; 49   : 			MsgBox("[Monster AI MovePath] - Can't Open %s ", lpszFileName);

  0009b	53		 push	 ebx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NMMPFHPL@?$FLMonster?5AI?5MovePath?$FN?5?9?5Can?8t?5Op@
  000a1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a6	83 c4 08	 add	 esp, 8

; 50   : 			return FALSE;

  000a9	e9 45 01 00 00	 jmp	 $LN37@LoadData
$LN9@LoadData:

; 51   : 		}
; 52   : 
; 53   : 		this->DelAllAIMonsterMovePath();

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath
$LL2@LoadData:

; 54   : 		int iType = -1;
; 55   : 
; 56   : 		while ( true )
; 57   : 		{
; 58   : 			Token = GetToken();

  000b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 59   : 
; 60   : 			if ( Token == END )

  000ba	83 f8 02	 cmp	 eax, 2
  000bd	75 28		 jne	 SHORT $LN10@LoadData

; 103  : 					}
; 104  : 				}
; 105  : 			}
; 106  : 		}
; 107  : 
; 108  : 		fclose(SMDFile);

  000bf	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000c5	e8 00 00 00 00	 call	 _fclose

; 109  : 
; 110  : 		LogAddC(2, "[Monster AI MovePath ] - %s file is Loaded", lpszFileName);

  000ca	53		 push	 ebx
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MAJLAOIC@?$FLMonster?5AI?5MovePath?5?$FN?5?9?5?$CFs?5file@
  000d0	6a 02		 push	 2
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000d8	83 c4 10	 add	 esp, 16			; 00000010H

; 111  : 
; 112  : 		this->m_bDataLoad = TRUE;

  000db	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  000e2	e9 0c 01 00 00	 jmp	 $LN37@LoadData
$LN10@LoadData:

; 61   : 				break;
; 62   : 
; 63   : 			iType = (int)TokenNumber;

  000e7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000ef	89 45 e8	 mov	 DWORD PTR _iType$1$[ebp], eax
$LL4@LoadData:

; 64   : 
; 65   : 			while ( true )
; 66   : 			{
; 67   : 				if ( iType == 2 )

  000f2	83 f8 02	 cmp	 eax, 2
  000f5	75 fb		 jne	 SHORT $LL4@LoadData

; 68   : 				{
; 69   : 					int iSpotType = -1;
; 70   : 					int iMapNumber = -1;
; 71   : 					int iX = -1;
; 72   : 					int iY = -1;
; 73   : 
; 74   : 					Token = GetToken();

  000f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 
; 76   : 					if ( !strcmp("end", TokenString))

  000fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00101	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL32@LoadData:
  00106	8a 10		 mov	 dl, BYTE PTR [eax]
  00108	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0010a	75 1a		 jne	 SHORT $LN33@LoadData
  0010c	84 d2		 test	 dl, dl
  0010e	74 12		 je	 SHORT $LN34@LoadData
  00110	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00113	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00116	75 0e		 jne	 SHORT $LN33@LoadData
  00118	83 c0 02	 add	 eax, 2
  0011b	83 c1 02	 add	 ecx, 2
  0011e	84 d2		 test	 dl, dl
  00120	75 e4		 jne	 SHORT $LL32@LoadData
$LN34@LoadData:
  00122	33 c0		 xor	 eax, eax
  00124	eb 05		 jmp	 SHORT $LN35@LoadData
$LN33@LoadData:
  00126	1b c0		 sbb	 eax, eax
  00128	83 c8 01	 or	 eax, 1
$LN35@LoadData:
  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 a8 00 00
	00		 je	 $LN27@LoadData

; 77   : 						break;
; 78   : 
; 79   : 					iSpotType = (int)TokenNumber;

  00133	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 80   : 
; 81   : 					Token = GetToken();

  0013b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 					iMapNumber = (int)TokenNumber;

  00140	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 83   : 
; 84   : 					Token = GetToken();

  00148	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 					iX = (int)TokenNumber;

  0014d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 86   : 
; 87   : 					Token = GetToken();

  00155	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 					iY = (int)TokenNumber;
; 89   : 
; 90   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iType = iSpotType;

  0015a	8b 55 ec	 mov	 edx, DWORD PTR _this$1$[ebp]
  0015d	8b 82 c8 12 00
	00		 mov	 eax, DWORD PTR [edx+4808]
  00163	03 c0		 add	 eax, eax
  00165	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  0016d	89 74 c2 08	 mov	 DWORD PTR [edx+eax*8+8], esi

; 91   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iMapNumber = iMapNumber;

  00171	8b 82 c8 12 00
	00		 mov	 eax, DWORD PTR [edx+4808]
  00177	03 c0		 add	 eax, eax
  00179	89 7c c2 0c	 mov	 DWORD PTR [edx+eax*8+12], edi

; 92   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iPathX = iX;

  0017d	8b 82 c8 12 00
	00		 mov	 eax, DWORD PTR [edx+4808]
  00183	40		 inc	 eax
  00184	03 c0		 add	 eax, eax
  00186	89 1c c2	 mov	 DWORD PTR [edx+eax*8], ebx

; 93   : 					this->m_MovePathInfo[this->m_iMovePathSpotCount].m_iPathY = iY;

  00189	8b 82 c8 12 00
	00		 mov	 eax, DWORD PTR [edx+4808]
  0018f	03 c0		 add	 eax, eax
  00191	89 4c c2 14	 mov	 DWORD PTR [edx+eax*8+20], ecx

; 94   : 
; 95   : 					this->m_iMovePathSpotCount++;

  00195	ff 82 c8 12 00
	00		 inc	 DWORD PTR [edx+4808]

; 96   : 
; 97   : 					if ( this->m_iMovePathSpotCount > MAX_MONSTER_AI_MOVE_PATH )

  0019b	81 ba c8 12 00
	00 2c 01 00 00	 cmp	 DWORD PTR [edx+4808], 300 ; 0000012cH
  001a5	8b 45 e8	 mov	 eax, DWORD PTR _iType$1$[ebp]
  001a8	0f 8e 44 ff ff
	ff		 jle	 $LL4@LoadData

; 98   : 					{
; 99   : 						MsgBox("[Monster AI MovePath] Exceed Max Move Path-Spot ");

  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MNPFCJHE@?$FLMonster?5AI?5MovePath?$FN?5Exceed?5Max@
  001b3	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 100  : 						this->DelAllAIMonsterMovePath();

  001b8	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001bb	83 c4 04	 add	 esp, 4
  001be	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath

; 101  : 
; 102  : 						return FALSE;

  001c3	eb 2e		 jmp	 SHORT $LN37@LoadData
__catch$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z$0:

; 113  : 	}
; 114  : 	catch(DWORD)
; 115  : 	{
; 116  : 		MsgBox("[Monster AI MovePath] - Loading Exception Error (%s) File. ", lpszFileName);

  001c5	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@HJPPMNFP@?$FLMonster?5AI?5MovePath?$FN?5?9?5Loading?5@
  001cd	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001d2	83 c4 08	 add	 esp, 8

; 117  : 	}

  001d5	b8 00 00 00 00	 mov	 eax, $LN37@LoadData
  001da	c3		 ret	 0
$LN27@LoadData:

; 96   : 
; 97   : 					if ( this->m_iMovePathSpotCount > MAX_MONSTER_AI_MOVE_PATH )

  001db	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  001de	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  001e1	e9 cf fe ff ff	 jmp	 $LL2@LoadData
$LN7@LoadData:

; 37   : 	{
; 38   : 		MsgBox("[Monster AI MovePath] - File load error : File Name Error");

  001e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@EMCNCDEG@?$FLMonster?5AI?5MovePath?$FN?5?9?5File?5loa@
  001eb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001f0	83 c4 04	 add	 esp, 4
$LN37@LoadData:

; 39   : 		return FALSE;

  001f3	33 c0		 xor	 eax, eax

; 118  : 
; 119  : 	return FALSE;
; 120  : }

  001f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	5f		 pop	 edi
  00201	5e		 pop	 esi
  00202	5b		 pop	 ebx
  00203	8b e5		 mov	 esp, ebp
  00205	5d		 pop	 ebp
  00206	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIMovePath@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIMovePath@@QAEHPAD@Z ENDP		; TMonsterAIMovePath::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ??1TMonsterAIMovePath@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIMovePath@@UAE@XZ PROC			; TMonsterAIMovePath::~TMonsterAIMovePath, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIMovePath@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1TMonsterAIMovePath@@UAE@XZ ENDP			; TMonsterAIMovePath::~TMonsterAIMovePath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ??0TMonsterAIMovePath@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIMovePath@@QAE@XZ PROC			; TMonsterAIMovePath::TMonsterAIMovePath, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TMonsterAIMovePath@@6B@
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h

; 56   : 	BOOL m_bDataLoad;	// 4

  0000e	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00011	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL4@TMonsterAI:

; 36   : 		this->m_iType = -1;

  00020	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00026	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 37   : 		this->m_iMapNumber = -1;

  00029	c7 40 f4 ff ff
	ff ff		 mov	 DWORD PTR [eax-12], -1

; 38   : 		this->m_iPathX = -1;

  00030	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1

; 39   : 		this->m_iPathY = -1;

  00037	c7 40 fc ff ff
	ff ff		 mov	 DWORD PTR [eax-4], -1
  0003e	83 ea 01	 sub	 edx, 1
  00041	75 dd		 jne	 SHORT $LL4@TMonsterAI
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp

; 19   : 	this->DelAllAIMonsterMovePath();

  00043	e8 00 00 00 00	 call	 ?DelAllAIMonsterMovePath@TMonsterAIMovePath@@QAEHXZ ; TMonsterAIMovePath::DelAllAIMonsterMovePath

; 20   : }

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi
  0004b	c3		 ret	 0
??0TMonsterAIMovePath@@QAE@XZ ENDP			; TMonsterAIMovePath::TMonsterAIMovePath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h
;	COMDAT ?Reset@TMonsterAIMovePathInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterAIMovePathInfo@@QAEXXZ PROC		; TMonsterAIMovePathInfo::Reset, COMDAT
; _this$ = ecx

; 36   : 		this->m_iType = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 37   : 		this->m_iMapNumber = -1;

  00006	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 38   : 		this->m_iPathX = -1;

  0000d	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 39   : 		this->m_iPathY = -1;

  00014	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 40   : 	}

  0001b	c3		 ret	 0
?Reset@TMonsterAIMovePathInfo@@QAEXXZ ENDP		; TMonsterAIMovePathInfo::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.h
;	COMDAT ??0TMonsterAIMovePathInfo@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIMovePathInfo@@QAE@XZ PROC			; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo, COMDAT
; _this$ = ecx

; 33   : 
; 34   : 	void Reset()
; 35   : 	{
; 36   : 		this->m_iType = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 30   : 	{
; 31   : 		this->Reset();
; 32   : 	}

  00006	8b c1		 mov	 eax, ecx

; 37   : 		this->m_iMapNumber = -1;

  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 38   : 		this->m_iPathX = -1;

  0000f	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 39   : 		this->m_iPathY = -1;

  00016	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 30   : 	{
; 31   : 		this->Reset();
; 32   : 	}

  0001d	c3		 ret	 0
??0TMonsterAIMovePathInfo@@QAE@XZ ENDP			; TMonsterAIMovePathInfo::TMonsterAIMovePathInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 136  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraimovepath.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 136  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
