; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\PacketCheckSum.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CPacketCheckSum@@QAE@XZ			; CPacketCheckSum::CPacketCheckSum
PUBLIC	??1CPacketCheckSum@@UAE@XZ			; CPacketCheckSum::~CPacketCheckSum
PUBLIC	?Init@CPacketCheckSum@@QAEXXZ			; CPacketCheckSum::Init
PUBLIC	?Check@CPacketCheckSum@@QAEXH@Z			; CPacketCheckSum::Check
PUBLIC	?ClearCheckSum@CPacketCheckSum@@QAEXH@Z		; CPacketCheckSum::ClearCheckSum
PUBLIC	?Add@CPacketCheckSum@@QAEHHHK@Z			; CPacketCheckSum::Add
PUBLIC	?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z		; CPacketCheckSum::AddCheckSum
PUBLIC	?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z	; CPacketCheckSum::SetClearChecksumFunc
PUBLIC	??_GCPacketCheckSum@@UAEPAXI@Z			; CPacketCheckSum::`scalar deleting destructor'
PUBLIC	??_7CPacketCheckSum@@6B@			; CPacketCheckSum::`vftable'
PUBLIC	?gPacketCheckSum@@3VCPacketCheckSum@@A		; gPacketCheckSum
PUBLIC	??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ ; `string'
PUBLIC	??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ ; `string'
PUBLIC	??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ ; `string'
PUBLIC	??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@		; `string'
PUBLIC	??_R4CPacketCheckSum@@6B@			; CPacketCheckSum::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPacketCheckSum@@@8			; CPacketCheckSum `RTTI Type Descriptor'
PUBLIC	??_R3CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPacketCheckSum@@8				; CPacketCheckSum::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPacketCheckSum@@8		; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjCloseSet@@YAXHH@Z:PROC			; gObjCloseSet
EXTRN	??_ECPacketCheckSum@@UAEPAXI@Z:PROC		; CPacketCheckSum::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDisconnectHackUser@@3HA:DWORD			; gDisconnectHackUser
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?gPacketCheckSum@@3VCPacketCheckSum@@A DB 0f9490H DUP (?) ; gPacketCheckSum
_BSS	ENDS
CRT$XCU	SEGMENT
?gPacketCheckSum$initializer$@@3P6AXXZA DD FLAT:??__EgPacketCheckSum@@YAXXZ ; gPacketCheckSum$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CPacketCheckSum@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPacketCheckSum@@8 DD FLAT:??_R0?AVCPacketCheckSum@@@8 ; CPacketCheckSum::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R2CPacketCheckSum@@8
rdata$r	SEGMENT
??_R2CPacketCheckSum@@8 DD FLAT:??_R1A@?0A@EA@CPacketCheckSum@@8 ; CPacketCheckSum::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPacketCheckSum@@8
rdata$r	SEGMENT
??_R3CPacketCheckSum@@8 DD 00H				; CPacketCheckSum::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPacketCheckSum@@@8
data$r	SEGMENT
??_R0?AVCPacketCheckSum@@@8 DD FLAT:??_7type_info@@6B@	; CPacketCheckSum `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPacketCheckSum@@', 00H
data$r	ENDS
;	COMDAT ??_R4CPacketCheckSum@@6B@
rdata$r	SEGMENT
??_R4CPacketCheckSum@@6B@ DD 00H			; CPacketCheckSum::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPacketCheckSum@@@8
	DD	FLAT:??_R3CPacketCheckSum@@8
rdata$r	ENDS
;	COMDAT ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
CONST	SEGMENT
??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@ DB '%d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
CONST	SEGMENT
??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@ DB 'Complete Init Checks'
	DB	'um', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@ DB 'I'
	DB	'nsert PacketCheckSum %d, %d,%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
CONST	SEGMENT
??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@ DB 'PacketCheckS'
	DB	'um : Invalid FuncIndex : %d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
CONST	SEGMENT
??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@ DB 'PacketChe'
	DB	'ckSum : Compare Fail : [%d][%s][%s] (%d,%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'C'
	DB	'heck PacketCheckSum [%d][%s][%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
CONST	SEGMENT
??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@ DB 'P'
	DB	'acketCheckSum Error [%d][%s][%s] %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CPacketCheckSum@@6B@
CONST	SEGMENT
??_7CPacketCheckSum@@6B@ DD FLAT:??_R4CPacketCheckSum@@6B@ ; CPacketCheckSum::`vftable'
	DD	FLAT:??_ECPacketCheckSum@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgPacketCheckSum@@YAXXZ
text$yd	SEGMENT
??__FgPacketCheckSum@@YAXXZ PROC			; `dynamic atexit destructor for 'gPacketCheckSum'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e9 00 00 00 00	 jmp	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
??__FgPacketCheckSum@@YAXXZ ENDP			; `dynamic atexit destructor for 'gPacketCheckSum''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ??__EgPacketCheckSum@@YAXXZ
text$di	SEGMENT
??__EgPacketCheckSum@@YAXXZ PROC			; `dynamic initializer for 'gPacketCheckSum'', COMDAT

; 7    : CPacketCheckSum gPacketCheckSum;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gPacketCheckSum@@3VCPacketCheckSum@@A ; gPacketCheckSum
  00005	e8 00 00 00 00	 call	 ??0CPacketCheckSum@@QAE@XZ ; CPacketCheckSum::CPacketCheckSum
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgPacketCheckSum@@YAXXZ ; `dynamic atexit destructor for 'gPacketCheckSum''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgPacketCheckSum@@YAXXZ ENDP			; `dynamic initializer for 'gPacketCheckSum''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPacketCheckSum@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPacketCheckSum@@UAEPAXI@Z PROC			; CPacketCheckSum::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPacketCheckSum@@UAE@XZ ; CPacketCheckSum::~CPacketCheckSum
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 94 0f 00	 push	 1021072			; 000f9490H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPacketCheckSum@@UAEPAXI@Z ENDP			; CPacketCheckSum::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv907 = 8						; size = 4
_funcindex$ = 8						; size = 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z PROC	; CPacketCheckSum::SetClearChecksumFunc, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 147  : 	int iCount = 0;
; 148  : 	int Checksum = this->m_ChecksumTableAVG[funcindex][0];

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _funcindex$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	69 d3 90 01 00
	00		 imul	 edx, ebx, 400
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00015	8d 78 14	 lea	 edi, DWORD PTR [eax+20]
  00018	8b b4 0a d8 71
	0f 00		 mov	 esi, DWORD PTR [edx+ecx+1012184]
  0001f	81 c2 dc 71 0f
	00		 add	 edx, 1012188		; 000f71dcH
  00025	03 d1		 add	 edx, ecx
$LL4@SetClearCh:

; 152  : 	{
; 153  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00027	39 72 fc	 cmp	 DWORD PTR [edx-4], esi
  0002a	75 01		 jne	 SHORT $LN2@SetClearCh

; 154  : 		{
; 155  : 			iCount++;

  0002c	40		 inc	 eax
$LN2@SetClearCh:

; 152  : 	{
; 153  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0002d	39 32		 cmp	 DWORD PTR [edx], esi
  0002f	75 01		 jne	 SHORT $LN26@SetClearCh

; 154  : 		{
; 155  : 			iCount++;

  00031	40		 inc	 eax
$LN26@SetClearCh:

; 152  : 	{
; 153  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00032	39 72 04	 cmp	 DWORD PTR [edx+4], esi
  00035	75 01		 jne	 SHORT $LN27@SetClearCh

; 154  : 		{
; 155  : 			iCount++;

  00037	40		 inc	 eax
$LN27@SetClearCh:

; 152  : 	{
; 153  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  00038	39 72 08	 cmp	 DWORD PTR [edx+8], esi
  0003b	75 01		 jne	 SHORT $LN28@SetClearCh

; 154  : 		{
; 155  : 			iCount++;

  0003d	40		 inc	 eax
$LN28@SetClearCh:

; 152  : 	{
; 153  : 		if ( this->m_ChecksumTableAVG[funcindex][i] == Checksum )

  0003e	39 72 0c	 cmp	 DWORD PTR [edx+12], esi
  00041	75 01		 jne	 SHORT $LN29@SetClearCh

; 154  : 		{
; 155  : 			iCount++;

  00043	40		 inc	 eax
$LN29@SetClearCh:
  00044	83 c2 14	 add	 edx, 20			; 00000014H

; 149  : 
; 150  : 	int i;
; 151  : 	for ( i=0;i<MAX_CHECKSUM_TABLE_AVG;i++)

  00047	83 ef 01	 sub	 edi, 1
  0004a	75 db		 jne	 SHORT $LL4@SetClearCh

; 156  : 		}
; 157  : 	}
; 158  : 
; 159  : 	if ( iCount >= MAX_CHECKSUM_TABLE_AVG-1 )

  0004c	83 f8 63	 cmp	 eax, 99			; 00000063H
  0004f	0f 8c 91 00 00
	00		 jl	 $LN9@SetClearCh

; 160  : 	{
; 161  : 		this->m_ChecksumTableClearState[funcindex] = 1;

  00055	c7 84 99 28 71
	0f 00 01 00 00
	00		 mov	 DWORD PTR [ecx+ebx*4+1012008], 1
  00060	8d b9 38 94 0f
	00		 lea	 edi, DWORD PTR [ecx+1020984]

; 162  : 		this->m_ChecksumTableAllClearState = TRUE;

  00066	c7 81 24 71 0f
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1012004], 1
  00070	be 16 00 00 00	 mov	 esi, 22			; 00000016H
  00075	89 7d 08	 mov	 DWORD PTR tv907[ebp], edi
  00078	8b cf		 mov	 ecx, edi
  0007a	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  0007d	8d 9f d8 71 0f
	00		 lea	 ebx, DWORD PTR [edi+1012184]
  00083	8b d3		 mov	 edx, ebx
$LL7@SetClearCh:

; 163  : 
; 164  : 		for ( i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 165  : 		{
; 166  : 			if ( this->m_ChecksumTableClearState[i] == 0 )

  00085	83 b9 f0 dc ff
	ff 00		 cmp	 DWORD PTR [ecx-8976], 0
  0008c	75 0a		 jne	 SHORT $LN13@SetClearCh

; 167  : 			{
; 168  : 				this->m_ChecksumTableAllClearState = FALSE;

  0008e	c7 87 24 71 0f
	00 00 00 00 00	 mov	 DWORD PTR [edi+1012004], 0
$LN13@SetClearCh:

; 169  : 			}
; 170  : 
; 171  : 			this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  00098	8b 02		 mov	 eax, DWORD PTR [edx]
  0009a	81 c2 90 01 00
	00		 add	 edx, 400		; 00000190H
  000a0	89 01		 mov	 DWORD PTR [ecx], eax
  000a2	83 c1 04	 add	 ecx, 4
  000a5	83 ee 01	 sub	 esi, 1
  000a8	75 db		 jne	 SHORT $LL7@SetClearCh

; 172  : 		}
; 173  : 
; 174  : 		if ( this->m_ChecksumTableAllClearState != FALSE )

  000aa	39 b7 24 71 0f
	00		 cmp	 DWORD PTR [edi+1012004], esi
  000b0	8b 7d 08	 mov	 edi, DWORD PTR tv907[ebp]
  000b3	74 31		 je	 SHORT $LN9@SetClearCh

; 175  : 		{
; 176  : 			LogAddTD("Complete Init Checksum");

  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DJENININ@Complete?5Init?5Checksum?$AA@
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c0	83 c4 04	 add	 esp, 4
$LL10@SetClearCh:

; 177  : 
; 178  : 			for ( i=0;i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX;i++)
; 179  : 			{
; 180  : 				this->m_ChecksumTable[i] = this->m_ChecksumTableAVG[i][0];

  000c3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 181  : 				LogAddTD("%d, %d", i, this->m_ChecksumTable[i]);

  000c5	50		 push	 eax
  000c6	56		 push	 esi
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_06PHGHDMGF@?$CFd?0?5?$CFd?$AA@
  000cc	89 07		 mov	 DWORD PTR [edi], eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d4	46		 inc	 esi
  000d5	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000db	8d 9b 90 01 00
	00		 lea	 ebx, DWORD PTR [ebx+400]
  000e1	83 fe 16	 cmp	 esi, 22			; 00000016H
  000e4	7c dd		 jl	 SHORT $LL10@SetClearCh
$LN9@SetClearCh:
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx

; 182  : 			}
; 183  : 		}
; 184  : 	}
; 185  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 04 00	 ret	 4
?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ENDP	; CPacketCheckSum::SetClearChecksumFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z PROC		; CPacketCheckSum::AddCheckSum, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 113  : 	if ( funcindex < 0 || funcindex >= MAX_PACKET_CHECKSUM_FUNCTION_INDEX )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _funcindex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 fe 15	 cmp	 esi, 21			; 00000015H
  0000d	77 73		 ja	 SHORT $LN3@AddCheckSu

; 116  : 		return;
; 117  : 	}
; 118  : 
; 119  : 	this->Add(aIndex, funcindex, checksum);

  0000f	53		 push	 ebx
  00010	8b 5d 10	 mov	 ebx, DWORD PTR _checksum$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00018	e8 00 00 00 00	 call	 ?Add@CPacketCheckSum@@QAEHHHK@Z ; CPacketCheckSum::Add

; 120  : 
; 121  : 	if ( this->m_ChecksumTableAllClearState != 0 )

  0001d	83 bf 24 71 0f
	00 00		 cmp	 DWORD PTR [edi+1012004], 0
  00024	75 55		 jne	 SHORT $LN8@AddCheckSu

; 122  : 	{
; 123  : 		return;
; 124  : 	}
; 125  : 
; 126  : 	if ( this->m_ChecksumTableClearState[funcindex] != 0 )

  00026	83 bc b7 28 71
	0f 00 00	 cmp	 DWORD PTR [edi+esi*4+1012008], 0
  0002e	75 4b		 jne	 SHORT $LN8@AddCheckSu

; 127  : 	{
; 128  : 		return;
; 129  : 	}
; 130  : 
; 131  : 	this->m_ChecksumTableAVG[funcindex][this->m_ChecksumTableAVGCount[funcindex] % MAX_CHECKSUM_TABLE_AVG] = checksum;

  00030	8b 84 b7 80 71
	0f 00		 mov	 eax, DWORD PTR [edi+esi*4+1012096]
  00037	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0003c	99		 cdq
  0003d	f7 f9		 idiv	 ecx
  0003f	6b c6 64	 imul	 eax, esi, 100

; 132  : 	this->m_ChecksumTableAVGCount[funcindex]++;
; 133  : 
; 134  : 	LogAddTD("Insert PacketCheckSum %d, %d,%d", funcindex, this->m_ChecksumTableAVGCount[funcindex], checksum);

  00042	53		 push	 ebx
  00043	03 d0		 add	 edx, eax
  00045	89 9c 97 d8 71
	0f 00		 mov	 DWORD PTR [edi+edx*4+1012184], ebx
  0004c	ff 84 b7 80 71
	0f 00		 inc	 DWORD PTR [edi+esi*4+1012096]
  00053	ff b4 b7 80 71
	0f 00		 push	 DWORD PTR [edi+esi*4+1012096]
  0005a	56		 push	 esi
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@PECEGPGE@Insert?5PacketCheckSum?5?$CFd?0?5?$CFd?0?$CFd?$AA@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00066	83 c4 10	 add	 esp, 16			; 00000010H

; 135  : 
; 136  : 	if ( this->m_ChecksumTableAVGCount[funcindex] >= MAX_CHECKSUM_TABLE_AVG )

  00069	83 bc b7 80 71
	0f 00 64	 cmp	 DWORD PTR [edi+esi*4+1012096], 100 ; 00000064H
  00071	7c 08		 jl	 SHORT $LN8@AddCheckSu

; 137  : 	{
; 138  : 		this->SetClearChecksumFunc(funcindex);

  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ?SetClearChecksumFunc@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::SetClearChecksumFunc
$LN8@AddCheckSu:
  0007b	5b		 pop	 ebx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 139  : 	}
; 140  : }

  0007e	5d		 pop	 ebp
  0007f	c2 0c 00	 ret	 12			; 0000000cH
$LN3@AddCheckSu:

; 114  : 	{
; 115  : 		LogAddTD("PacketCheckSum : Invalid FuncIndex : %d, %d", aIndex, funcindex);

  00082	56		 push	 esi
  00083	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BHHAPHFK@PacketCheckSum?5?3?5Invalid?5FuncInd@
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00091	83 c4 0c	 add	 esp, 12			; 0000000cH
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 139  : 	}
; 140  : }

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
?AddCheckSum@CPacketCheckSum@@QAEXHHK@Z ENDP		; CPacketCheckSum::AddCheckSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?Add@CPacketCheckSum@@QAEHHHK@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_funcindex$ = 12					; size = 4
_checksum$ = 16						; size = 4
?Add@CPacketCheckSum@@QAEHHHK@Z PROC			; CPacketCheckSum::Add, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 78   : 	if ( gObj[aIndex].m_InWebzen != false )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	80 bb 75 14 00
	00 00		 cmp	 BYTE PTR [ebx+5237], 0
  0001e	75 73		 jne	 SHORT $LN6@Add

; 79   : 	{
; 80   : 		return true;
; 81   : 	}
; 82   : 
; 83   : 	if ( this->m_ChecksumTableAllClearState == 0 )

  00020	83 bf 24 71 0f
	00 00		 cmp	 DWORD PTR [edi+1012004], 0
  00027	75 19		 jne	 SHORT $LN3@Add

; 84   : 	{
; 85   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  00029	8b 45 10	 mov	 eax, DWORD PTR _checksum$[ebp]
  0002c	6b ce 16	 imul	 ecx, esi, 22
  0002f	03 4d 0c	 add	 ecx, DWORD PTR _funcindex$[ebp]
  00032	89 44 8f 04	 mov	 DWORD PTR [edi+ecx*4+4], eax

; 101  : 		}
; 102  : 	}
; 103  : 
; 104  : 	return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx

; 105  : }

  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Add:

; 86   : 		return TRUE;
; 87   : 	}
; 88   : 	
; 89   : 	if ( this->m_ChecksumTable[funcindex] == checksum )

  00042	8b 55 0c	 mov	 edx, DWORD PTR _funcindex$[ebp]
  00045	8b 4d 10	 mov	 ecx, DWORD PTR _checksum$[ebp]
  00048	39 8c 97 38 94
	0f 00		 cmp	 DWORD PTR [edi+edx*4+1020984], ecx
  0004f	75 15		 jne	 SHORT $LN4@Add

; 90   : 	{
; 91   : 		this->PaketChecksum[aIndex].Check[funcindex] = checksum;

  00051	6b c6 16	 imul	 eax, esi, 22
  00054	03 c2		 add	 eax, edx
  00056	89 4c 87 04	 mov	 DWORD PTR [edi+eax*4+4], ecx

; 101  : 		}
; 102  : 	}
; 103  : 
; 104  : 	return TRUE;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 105  : }

  00062	5d		 pop	 ebp
  00063	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Add:

; 92   : 	}
; 93   : 	else
; 94   : 	{
; 95   : 		LogAddTD("PacketCheckSum : Compare Fail : [%d][%s][%s] (%d,%d)", aIndex,

  00066	51		 push	 ecx
  00067	52		 push	 edx
  00068	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0006b	50		 push	 eax
  0006c	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0006f	50		 push	 eax
  00070	56		 push	 esi
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CAINCFEC@PacketCheckSum?5?3?5Compare?5Fail?5?3?5@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007c	83 c4 18	 add	 esp, 24			; 00000018H

; 96   : 			gObj[aIndex].AccountID, gObj[aIndex].Name, funcindex, checksum);
; 97   : 
; 98   : 		if ( gDisconnectHackUser != FALSE )

  0007f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  00086	74 0b		 je	 SHORT $LN6@Add

; 99   : 		{
; 100  : 			gObjCloseSet(aIndex, 0);

  00088	6a 00		 push	 0
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  00090	83 c4 08	 add	 esp, 8
$LN6@Add:

; 101  : 		}
; 102  : 	}
; 103  : 
; 104  : 	return TRUE;

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	5b		 pop	 ebx

; 105  : }

  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
?Add@CPacketCheckSum@@QAEHHHK@Z ENDP			; CPacketCheckSum::Add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z PROC		; CPacketCheckSum::ClearCheckSum, COMDAT
; _this$ = ecx

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 71   : 	memset(&this->PaketChecksum[aIndex], 0, sizeof(PAKETCHECKSUM) );

  00003	6b 45 08 58	 imul	 eax, DWORD PTR _aIndex$[ebp], 88
  00007	6a 58		 push	 88			; 00000058H
  00009	6a 00		 push	 0
  0000b	83 c0 04	 add	 eax, 4
  0000e	03 c1		 add	 eax, ecx
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _memset
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ENDP		; CPacketCheckSum::ClearCheckSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?Check@CPacketCheckSum@@QAEXH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?Check@CPacketCheckSum@@QAEXH@Z PROC			; CPacketCheckSum::Check, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 40   : 	if ( gObj[aIndex].m_InWebzen != false )	// Olny for Local Test and Test Mains

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  00011	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00017	80 bf 75 14 00
	00 00		 cmp	 BYTE PTR [edi+5237], 0
  0001e	75 78		 jne	 SHORT $LN1@Check

; 41   : 	{
; 42   : 		return;
; 43   : 	}
; 44   : 
; 45   : 	for ( int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  00020	6b c6 58	 imul	 eax, esi, 88
  00023	33 d2		 xor	 edx, edx
  00025	83 c0 04	 add	 eax, 4
  00028	03 c3		 add	 eax, ebx
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Check:

; 46   : 	{
; 47   : 		if ( this->PaketChecksum[aIndex].Check[i] == 0 )

  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	74 2f		 je	 SHORT $LN10@Check

; 41   : 	{
; 42   : 		return;
; 43   : 	}
; 44   : 
; 45   : 	for ( int i=0 ; i<MAX_PACKET_CHECKSUM_FUNCTION_INDEX ; i++)

  00035	42		 inc	 edx
  00036	83 c0 04	 add	 eax, 4
  00039	83 fa 16	 cmp	 edx, 22			; 00000016H
  0003c	7c f2		 jl	 SHORT $LL4@Check

; 57   : 			}
; 58   : 
; 59   : 			return;
; 60   : 		}
; 61   : 	}
; 62   : 
; 63   : 	LogAddTD("Check PacketCheckSum [%d][%s][%s]", aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name);

  0003e	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00041	50		 push	 eax
  00042	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00045	50		 push	 eax
  00046	56		 push	 esi
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPIDCKHF@Check?5PacketCheckSum?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00052	83 c4 10	 add	 esp, 16			; 00000010H

; 64   : 	this->ClearCheckSum(aIndex);

  00055	8b cb		 mov	 ecx, ebx
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 65   : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN10@Check:

; 48   : 		{
; 49   : 			LogAddTD("PacketCheckSum Error [%d][%s][%s] %d",

  00064	52		 push	 edx
  00065	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00068	50		 push	 eax
  00069	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0006c	50		 push	 eax
  0006d	56		 push	 esi
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IAFFJAHO@PacketCheckSum?5Error?5?$FL?$CFd?$FN?$FL?$CFs?$FN?$FL?$CFs@
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00079	83 c4 14	 add	 esp, 20			; 00000014H

; 50   : 				aIndex, gObj[aIndex].AccountID, gObj[aIndex].Name, i);
; 51   : 			
; 52   : 			this->ClearCheckSum(aIndex);

  0007c	8b cb		 mov	 ecx, ebx
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 ?ClearCheckSum@CPacketCheckSum@@QAEXH@Z ; CPacketCheckSum::ClearCheckSum

; 53   : 
; 54   : 			if ( gDisconnectHackUser != FALSE )

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDisconnectHackUser@@3HA, 0 ; gDisconnectHackUser
  0008b	74 0b		 je	 SHORT $LN1@Check

; 55   : 			{
; 56   : 				gObjCloseSet(aIndex, 0);

  0008d	6a 00		 push	 0
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ?gObjCloseSet@@YAXHH@Z	; gObjCloseSet
  00095	83 c4 08	 add	 esp, 8
$LN1@Check:
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx

; 65   : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?Check@CPacketCheckSum@@QAEXH@Z ENDP			; CPacketCheckSum::Check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?Init@CPacketCheckSum@@QAEXXZ
_TEXT	SEGMENT
?Init@CPacketCheckSum@@QAEXXZ PROC			; CPacketCheckSum::Init, COMDAT
; _this$ = ecx

; 27   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	68 10 23 00 00	 push	 8976			; 00002310H
  00008	6a 00		 push	 0
  0000a	8d 86 28 71 0f
	00		 lea	 eax, DWORD PTR [esi+1012008]

; 28   : 	this->m_ChecksumTableAllClearState = 0;

  00010	c7 86 24 71 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1012004], 0
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _memset

; 29   : 	memset(this->m_ChecksumTableClearState, 0, sizeof(this->m_ChecksumTableClearState));
; 30   : 	memset(this->m_ChecksumTableAVGCount, 0, sizeof(this->m_ChecksumTableAVGCount));
; 31   : 	memset(this->m_ChecksumTableAVG, 0, sizeof(this->m_ChecksumTableAVG));
; 32   : 	memset(this->PaketChecksum, 0, sizeof(this->PaketChecksum));

  00020	68 20 71 0f 00	 push	 1012000			; 000f7120H
  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	6a 00		 push	 0
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 18	 add	 esp, 24			; 00000018H
  00033	5e		 pop	 esi

; 33   : }

  00034	c3		 ret	 0
?Init@CPacketCheckSum@@QAEXXZ ENDP			; CPacketCheckSum::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ??1CPacketCheckSum@@UAE@XZ
_TEXT	SEGMENT
??1CPacketCheckSum@@UAE@XZ PROC				; CPacketCheckSum::~CPacketCheckSum, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CPacketCheckSum@@6B@

; 21   : 	return;
; 22   : }

  00006	c3		 ret	 0
??1CPacketCheckSum@@UAE@XZ ENDP				; CPacketCheckSum::~CPacketCheckSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ??0CPacketCheckSum@@QAE@XZ
_TEXT	SEGMENT
??0CPacketCheckSum@@QAE@XZ PROC				; CPacketCheckSum::CPacketCheckSum, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPacketCheckSum@@6B@

; 13   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CPacketCheckSum@@QAEXXZ ; CPacketCheckSum::Init

; 14   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CPacketCheckSum@@QAE@XZ ENDP				; CPacketCheckSum::CPacketCheckSum
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 186  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\packetchecksum.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 186  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
