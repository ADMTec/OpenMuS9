; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\BuffScriptLoader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CBuffScriptLoader@@QAE@XZ			; CBuffScriptLoader::CBuffScriptLoader
PUBLIC	??1CBuffScriptLoader@@UAE@XZ			; CBuffScriptLoader::~CBuffScriptLoader
PUBLIC	?Initialize@CBuffScriptLoader@@QAEXXZ		; CBuffScriptLoader::Initialize
PUBLIC	?Load@CBuffScriptLoader@@QAE_NPAD@Z		; CBuffScriptLoader::Load
PUBLIC	?AddBuffEffectData@CBuffScriptLoader@@QAE_NEEEEPADEEE0@Z ; CBuffScriptLoader::AddBuffEffectData
PUBLIC	?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
PUBLIC	?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData
PUBLIC	?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z ; CBuffScriptLoader::GetBuffDataFromItemCode
PUBLIC	??_GCBuffScriptLoader@@UAEPAXI@Z		; CBuffScriptLoader::`scalar deleting destructor'
PUBLIC	??_7CBuffScriptLoader@@6B@			; CBuffScriptLoader::`vftable'
PUBLIC	?g_BuffScript@@3VCBuffScriptLoader@@A		; g_BuffScript
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_R4CBuffScriptLoader@@6B@			; CBuffScriptLoader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBuffScriptLoader@@@8			; CBuffScriptLoader `RTTI Type Descriptor'
PUBLIC	??_R3CBuffScriptLoader@@8			; CBuffScriptLoader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBuffScriptLoader@@8			; CBuffScriptLoader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBuffScriptLoader@@8		; CBuffScriptLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	??_ECBuffScriptLoader@@UAEPAXI@Z:PROC		; CBuffScriptLoader::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_BuffScript@@3VCBuffScriptLoader@@A DB 07e8cH DUP (?)	; g_BuffScript
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_BuffScript$initializer$@@3P6AXXZA DD FLAT:??__Eg_BuffScript@@YAXXZ ; g_BuffScript$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CBuffScriptLoader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBuffScriptLoader@@8 DD FLAT:??_R0?AVCBuffScriptLoader@@@8 ; CBuffScriptLoader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBuffScriptLoader@@8
rdata$r	ENDS
;	COMDAT ??_R2CBuffScriptLoader@@8
rdata$r	SEGMENT
??_R2CBuffScriptLoader@@8 DD FLAT:??_R1A@?0A@EA@CBuffScriptLoader@@8 ; CBuffScriptLoader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBuffScriptLoader@@8
rdata$r	SEGMENT
??_R3CBuffScriptLoader@@8 DD 00H			; CBuffScriptLoader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBuffScriptLoader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBuffScriptLoader@@@8
data$r	SEGMENT
??_R0?AVCBuffScriptLoader@@@8 DD FLAT:??_7type_info@@6B@ ; CBuffScriptLoader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBuffScriptLoader@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBuffScriptLoader@@6B@
rdata$r	SEGMENT
??_R4CBuffScriptLoader@@6B@ DD 00H			; CBuffScriptLoader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBuffScriptLoader@@@8
	DD	FLAT:??_R3CBuffScriptLoader@@8
rdata$r	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CBuffScriptLoader@@6B@
CONST	SEGMENT
??_7CBuffScriptLoader@@6B@ DD FLAT:??_R4CBuffScriptLoader@@6B@ ; CBuffScriptLoader::`vftable'
	DD	FLAT:??_ECBuffScriptLoader@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_BuffScript@@YAXXZ
text$yd	SEGMENT
??__Fg_BuffScript@@YAXXZ PROC				; `dynamic atexit destructor for 'g_BuffScript'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  00005	e9 00 00 00 00	 jmp	 ??1CBuffScriptLoader@@UAE@XZ ; CBuffScriptLoader::~CBuffScriptLoader
??__Fg_BuffScript@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_BuffScript''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ??__Eg_BuffScript@@YAXXZ
text$di	SEGMENT
??__Eg_BuffScript@@YAXXZ PROC				; `dynamic initializer for 'g_BuffScript'', COMDAT

; 6    : CBuffScriptLoader g_BuffScript;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  00005	e8 00 00 00 00	 call	 ??0CBuffScriptLoader@@QAE@XZ ; CBuffScriptLoader::CBuffScriptLoader
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_BuffScript@@YAXXZ ; `dynamic atexit destructor for 'g_BuffScript''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_BuffScript@@YAXXZ ENDP				; `dynamic initializer for 'g_BuffScript''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBuffScriptLoader@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBuffScriptLoader@@UAEPAXI@Z PROC			; CBuffScriptLoader::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBuffScriptLoader@@UAE@XZ ; CBuffScriptLoader::~CBuffScriptLoader
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 8c 7e 00 00	 push	 32396			; 00007e8cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCBuffScriptLoader@@UAEPAXI@Z ENDP			; CBuffScriptLoader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z
_TEXT	SEGMENT
_wItemCode$ = 8						; size = 2
?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z PROC ; CBuffScriptLoader::GetBuffDataFromItemCode, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	0f b7 7d 08	 movzx	 edi, WORD PTR _wItemCode$[ebp]

; 146  : 	LPBUFF_EFFECT_DATE lpBuffData = 0;
; 147  : 
; 148  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  0000c	33 f6		 xor	 esi, esi
  0000e	8d 43 0b	 lea	 eax, DWORD PTR [ebx+11]
$LL4@GetBuffDat:

; 149  : 	{
; 150  : 		if( ITEMGET(this->m_EffectData[i].btItemType,this->m_EffectData[i].btItemIndex) == wItemCode )

  00011	0f b6 50 ff	 movzx	 edx, BYTE PTR [eax-1]
  00015	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00018	c1 e2 09	 shl	 edx, 9
  0001b	03 d1		 add	 edx, ecx
  0001d	3b d7		 cmp	 edx, edi
  0001f	74 15		 je	 SHORT $LN8@GetBuffDat

; 146  : 	LPBUFF_EFFECT_DATE lpBuffData = 0;
; 147  : 
; 148  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00021	46		 inc	 esi
  00022	83 c0 7f	 add	 eax, 127		; 0000007fH
  00025	81 fe fe 00 00
	00		 cmp	 esi, 254		; 000000feH
  0002b	7c e4		 jl	 SHORT $LL4@GetBuffDat

; 153  : 		}
; 154  : 	}
; 155  : return NULL;

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	33 c0		 xor	 eax, eax
  00031	5b		 pop	 ebx

; 156  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN8@GetBuffDat:

; 151  : 		{
; 152  : 			return &this->m_EffectData[i];

  00036	6b c6 7f	 imul	 eax, esi, 127
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	83 c0 08	 add	 eax, 8
  0003e	03 c3		 add	 eax, ebx
  00040	5b		 pop	 ebx

; 156  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z ENDP ; CBuffScriptLoader::GetBuffDataFromItemCode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z
_TEXT	SEGMENT
_btBuffIndex$ = 8					; size = 1
?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z PROC ; CBuffScriptLoader::GetBuffData, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 129  : 	LPBUFF_EFFECT_DATE lpBuffData = 0;
; 130  : 
; 131  : 	if ( this->CheckVaildBuffEffect(btBuffIndex) == false )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _btBuffIndex$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00010	84 c0		 test	 al, al
  00012	74 1b		 je	 SHORT $LN13@GetBuffDat

; 132  : 		return NULL;
; 133  : 
; 134  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00014	33 c0		 xor	 eax, eax
  00016	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@GetBuffDat:

; 135  : 	{
; 136  : 		if ( this->m_EffectData[i].btIndex == btBuffIndex )

  00020	38 19		 cmp	 BYTE PTR [ecx], bl
  00022	74 13		 je	 SHORT $LN9@GetBuffDat

; 132  : 		return NULL;
; 133  : 
; 134  : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )

  00024	40		 inc	 eax
  00025	83 c1 7f	 add	 ecx, 127		; 0000007fH
  00028	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0002d	7c f1		 jl	 SHORT $LL4@GetBuffDat
$LN13@GetBuffDat:
  0002f	5e		 pop	 esi

; 139  : 		}
; 140  : 	}
; 141  : 	return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	5b		 pop	 ebx

; 142  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN9@GetBuffDat:

; 137  : 		{
; 138  : 			return &this->m_EffectData[i];

  00037	6b c0 7f	 imul	 eax, eax, 127
  0003a	83 c0 08	 add	 eax, 8
  0003d	03 c6		 add	 eax, esi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 142  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ENDP ; CBuffScriptLoader::GetBuffData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z
_TEXT	SEGMENT
_btBuffIndex$ = 8					; size = 1
?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z PROC	; CBuffScriptLoader::CheckVaildBuffEffect, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 119  : 	if ( btBuffIndex < 0 || btBuffIndex > MAX_BUFF_EFFECT-1 )

  00003	80 7d 08 fe	 cmp	 BYTE PTR _btBuffIndex$[ebp], 254 ; 000000feH
  00007	0f 96 c0	 setbe	 al

; 120  : 	{
; 121  : 		return false;
; 122  : 	}
; 123  : 
; 124  : 	return true;
; 125  : }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ENDP	; CBuffScriptLoader::CheckVaildBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?AddBuffEffectData@CBuffScriptLoader@@QAE_NEEEEPADEEE0@Z
_TEXT	SEGMENT
_btBuffIndex$ = 8					; size = 1
_btBuffEffectType$ = 12					; size = 1
_btItemType$ = 16					; size = 1
_btItemIndex$ = 20					; size = 1
_pchName$ = 24						; size = 4
_btBuffType$ = 28					; size = 1
_btNoticeType$ = 32					; size = 1
_btClearType$ = 36					; size = 1
_pchDescript$ = 40					; size = 4
?AddBuffEffectData@CBuffScriptLoader@@QAE_NEEEEPADEEE0@Z PROC ; CBuffScriptLoader::AddBuffEffectData, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  : 	this->m_EffectData[this->iLoadCount].btIndex = btBuffIndex;

  00003	8a 45 08	 mov	 al, BYTE PTR _btBuffIndex$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 104  : 	this->m_EffectData[this->iLoadCount].btViewPortIndex = btBuffEffectType;
; 105  : 	this->m_EffectData[this->iLoadCount].btItemType = btItemType;
; 106  : 	this->m_EffectData[this->iLoadCount].btItemIndex = btItemIndex;
; 107  : 	this->m_EffectData[this->iLoadCount].btType = btBuffType;
; 108  : 	this->m_EffectData[this->iLoadCount].btNotification = btNoticeType;
; 109  : 	this->m_EffectData[this->iLoadCount].btClearType = btClearType;
; 110  : 
; 111  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffName,	pchName, sizeof(this->m_EffectData[this->iLoadCount].szBuffName));
; 112  : 	memcpy(this->m_EffectData[this->iLoadCount].szBuffInfo,	pchDescript, sizeof(this->m_EffectData[this->iLoadCount].szBuffInfo));

  0000a	8b 75 28	 mov	 esi, DWORD PTR _pchDescript$[ebp]
  0000d	57		 push	 edi
  0000e	6b 53 04 7f	 imul	 edx, DWORD PTR [ebx+4], 127
  00012	8d 7b 23	 lea	 edi, DWORD PTR [ebx+35]
  00015	88 44 1a 08	 mov	 BYTE PTR [edx+ebx+8], al
  00019	6b 53 04 7f	 imul	 edx, DWORD PTR [ebx+4], 127
  0001d	8a 45 0c	 mov	 al, BYTE PTR _btBuffEffectType$[ebp]
  00020	88 44 1a 09	 mov	 BYTE PTR [edx+ebx+9], al
  00024	6b 53 04 7f	 imul	 edx, DWORD PTR [ebx+4], 127
  00028	8a 45 10	 mov	 al, BYTE PTR _btItemType$[ebp]
  0002b	88 44 1a 0a	 mov	 BYTE PTR [edx+ebx+10], al
  0002f	6b 4b 04 7f	 imul	 ecx, DWORD PTR [ebx+4], 127
  00033	8a 45 14	 mov	 al, BYTE PTR _btItemIndex$[ebp]
  00036	88 44 19 0b	 mov	 BYTE PTR [ecx+ebx+11], al
  0003a	6b 4b 04 7f	 imul	 ecx, DWORD PTR [ebx+4], 127
  0003e	8a 45 1c	 mov	 al, BYTE PTR _btBuffType$[ebp]
  00041	88 44 19 20	 mov	 BYTE PTR [ecx+ebx+32], al
  00045	6b 4b 04 7f	 imul	 ecx, DWORD PTR [ebx+4], 127
  00049	8a 45 20	 mov	 al, BYTE PTR _btNoticeType$[ebp]
  0004c	88 44 19 21	 mov	 BYTE PTR [ecx+ebx+33], al
  00050	6b 4b 04 7f	 imul	 ecx, DWORD PTR [ebx+4], 127
  00054	8a 45 24	 mov	 al, BYTE PTR _btClearType$[ebp]
  00057	88 44 19 22	 mov	 BYTE PTR [ecx+ebx+34], al
  0005b	6b 4b 04 7f	 imul	 ecx, DWORD PTR [ebx+4], 127
  0005f	8b 45 18	 mov	 eax, DWORD PTR _pchName$[ebp]
  00062	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00065	0f 11 44 19 0c	 movups	 XMMWORD PTR [ecx+ebx+12], xmm0
  0006a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0006d	89 44 19 1c	 mov	 DWORD PTR [ecx+ebx+28], eax
  00071	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00076	6b 43 04 7f	 imul	 eax, DWORD PTR [ebx+4], 127
  0007a	03 f8		 add	 edi, eax

; 113  : 	this->iLoadCount++;
; 114  : 	return true;

  0007c	b0 01		 mov	 al, 1
  0007e	f3 a5		 rep movsd
  00080	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx

; 115  : }

  00086	5d		 pop	 ebp
  00087	c2 24 00	 ret	 36			; 00000024H
?AddBuffEffectData@CBuffScriptLoader@@QAE_NEEEEPADEEE0@Z ENDP ; CBuffScriptLoader::AddBuffEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?Load@CBuffScriptLoader@@QAE_NPAD@Z
_TEXT	SEGMENT
_chBuffDescript$ = -144					; size = 100
_chBuffName$ = -44					; size = 20
_btBuffIndex$ = -24					; size = 1
_btBuffEffectType$ = -20				; size = 1
_ItemType$ = -16					; size = 1
_ItemIndex$ = -12					; size = 1
_btBuffType$ = -8					; size = 1
_btNoticeType$ = -4					; size = 1
_btClearType$ = 8					; size = 1
_pchFileName$ = 8					; size = 4
?Load@CBuffScriptLoader@@QAE_NPAD@Z PROC		; CBuffScriptLoader::Load, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx

; 36   : 	this->Initialize();

  0000c	e8 00 00 00 00	 call	 ?Initialize@CBuffScriptLoader@@QAEXXZ ; CBuffScriptLoader::Initialize

; 37   : 
; 38   : 	if ( (SMDFile = fopen(pchFileName, "r")) == NULL )

  00011	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00016	ff 75 08	 push	 DWORD PTR _pchFileName$[ebp]
  00019	e8 00 00 00 00	 call	 _fopen
  0001e	83 c4 08	 add	 esp, 8
  00021	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax
  00026	85 c0		 test	 eax, eax
  00028	75 09		 jne	 SHORT $LN6@Load

; 39   : 	{
; 40   : 		return false;

  0002a	32 c0		 xor	 al, al
  0002c	5b		 pop	 ebx

; 99   : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN6@Load:

; 41   : 	}
; 42   : 
; 43   : 	SMDToken Token;
; 44   : 	int iType = 0;
; 45   : 	BYTE btBuffIndex = 0;
; 46   : 	BYTE btBuffEffectType = 0;
; 47   : 	BYTE ItemType = 0;
; 48   : 	BYTE ItemIndex = 0;
; 49   : 	BYTE btBuffType = 0;
; 50   : 	BYTE btNoticeType = 0;
; 51   : 	BYTE btClearType = 0;
; 52   : 	char chBuffName[20];
; 53   : 	char chBuffDescript[100];
; 54   : 
; 55   : 	while ( TRUE )
; 56   : 	{
; 57   : 		Token = GetToken();

  00033	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 58   : 
; 59   : 		if ( Token == END )

  00038	83 f8 02	 cmp	 eax, 2
  0003b	0f 84 5c 01 00
	00		 je	 $LN15@Load
  00041	56		 push	 esi
  00042	57		 push	 edi
$LL2@Load:

; 60   : 		{
; 61   : 			break;
; 62   : 		}
; 63   : 		
; 64   : 		if ( Token == NUMBER )

  00043	83 f8 01	 cmp	 eax, 1
  00046	0f 85 41 01 00
	00		 jne	 $LN14@Load

; 65   : 		{
; 66   : 			iType = TokenNumber;
; 67   : 
; 68   : 			while ( TRUE )
; 69   : 			{
; 70   : 				Token = GetToken();

  0004c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 71   : 
; 72   : 				if ( strcmp("end", TokenString) == 0 )

  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00056	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0005b	0f 1f 44 00 00	 npad	 5
$LL21@Load:
  00060	8a 10		 mov	 dl, BYTE PTR [eax]
  00062	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00064	75 1a		 jne	 SHORT $LN22@Load
  00066	84 d2		 test	 dl, dl
  00068	74 12		 je	 SHORT $LN23@Load
  0006a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0006d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00070	75 0e		 jne	 SHORT $LN22@Load
  00072	83 c0 02	 add	 eax, 2
  00075	83 c1 02	 add	 ecx, 2
  00078	84 d2		 test	 dl, dl
  0007a	75 e4		 jne	 SHORT $LL21@Load
$LN23@Load:
  0007c	33 c0		 xor	 eax, eax
  0007e	eb 05		 jmp	 SHORT $LN24@Load
$LN22@Load:
  00080	1b c0		 sbb	 eax, eax
  00082	83 c8 01	 or	 eax, 1
$LN24@Load:
  00085	85 c0		 test	 eax, eax
  00087	0f 84 00 01 00
	00		 je	 $LN14@Load
  0008d	0f 1f 00	 npad	 3
$LL4@Load:

; 73   : 				{
; 74   : 					break;
; 75   : 				}
; 76   : 
; 77   : 				btBuffIndex			= (int)TokenNumber; Token = GetToken();

  00090	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00098	88 45 e8	 mov	 BYTE PTR _btBuffIndex$[ebp], al
  0009b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 78   : 				btBuffEffectType	= (int)TokenNumber; Token = GetToken();

  000a0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000a8	88 45 ec	 mov	 BYTE PTR _btBuffEffectType$[ebp], al
  000ab	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 				ItemType			= (int)TokenNumber; Token = GetToken();

  000b0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000b8	88 45 f0	 mov	 BYTE PTR _ItemType$[ebp], al
  000bb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 				ItemIndex			= (int)TokenNumber; Token = GetToken();

  000c0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c8	88 45 f4	 mov	 BYTE PTR _ItemIndex$[ebp], al
  000cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 
; 82   : 				memcpy(chBuffName, TokenString, sizeof(chBuffName));

  000d0	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?TokenString@@3PADA
  000d7	a1 10 00 00 00	 mov	 eax, DWORD PTR ?TokenString@@3PADA+16
  000dc	89 45 e4	 mov	 DWORD PTR _chBuffName$[ebp+16], eax
  000df	0f 11 45 d4	 movups	 XMMWORD PTR _chBuffName$[ebp], xmm0

; 83   : 
; 84   : 				Token = GetToken();

  000e3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 
; 86   : 				btBuffType		= (int)TokenNumber; Token = GetToken();

  000e8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000f0	88 45 f8	 mov	 BYTE PTR _btBuffType$[ebp], al
  000f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 87   : 				btNoticeType	= (int)TokenNumber; Token = GetToken();

  000f8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00100	88 45 fc	 mov	 BYTE PTR _btNoticeType$[ebp], al
  00103	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 				btClearType		= (int)TokenNumber; Token = GetToken();

  00108	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00110	88 45 08	 mov	 BYTE PTR _btClearType$[ebp], al
  00113	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 
; 90   : 				memcpy(chBuffDescript, TokenString, sizeof(chBuffDescript));
; 91   : 
; 92   : 				this->AddBuffEffectData(btBuffIndex, btBuffEffectType, ItemType, ItemIndex, chBuffName, btBuffType, btNoticeType, btClearType, chBuffDescript);

  00118	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _chBuffDescript$[ebp]
  0011e	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00123	50		 push	 eax
  00124	ff 75 08	 push	 DWORD PTR _btClearType$[ebp]
  00127	8d 45 d4	 lea	 eax, DWORD PTR _chBuffName$[ebp]
  0012a	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  0012f	ff 75 fc	 push	 DWORD PTR _btNoticeType$[ebp]
  00132	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR _chBuffDescript$[ebp]
  00138	ff 75 f8	 push	 DWORD PTR _btBuffType$[ebp]
  0013b	f3 a5		 rep movsd
  0013d	50		 push	 eax
  0013e	ff 75 f4	 push	 DWORD PTR _ItemIndex$[ebp]
  00141	8b cb		 mov	 ecx, ebx
  00143	ff 75 f0	 push	 DWORD PTR _ItemType$[ebp]
  00146	ff 75 ec	 push	 DWORD PTR _btBuffEffectType$[ebp]
  00149	ff 75 e8	 push	 DWORD PTR _btBuffIndex$[ebp]
  0014c	e8 00 00 00 00	 call	 ?AddBuffEffectData@CBuffScriptLoader@@QAE_NEEEEPADEEE0@Z ; CBuffScriptLoader::AddBuffEffectData
  00151	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0015b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL25@Load:

; 71   : 
; 72   : 				if ( strcmp("end", TokenString) == 0 )

  00160	8a 10		 mov	 dl, BYTE PTR [eax]
  00162	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00164	75 1a		 jne	 SHORT $LN26@Load
  00166	84 d2		 test	 dl, dl
  00168	74 12		 je	 SHORT $LN27@Load
  0016a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0016d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00170	75 0e		 jne	 SHORT $LN26@Load
  00172	83 c0 02	 add	 eax, 2
  00175	83 c1 02	 add	 ecx, 2
  00178	84 d2		 test	 dl, dl
  0017a	75 e4		 jne	 SHORT $LL25@Load
$LN27@Load:
  0017c	33 c0		 xor	 eax, eax
  0017e	eb 05		 jmp	 SHORT $LN28@Load
$LN26@Load:
  00180	1b c0		 sbb	 eax, eax
  00182	83 c8 01	 or	 eax, 1
$LN28@Load:
  00185	85 c0		 test	 eax, eax
  00187	0f 85 03 ff ff
	ff		 jne	 $LL4@Load
$LN14@Load:

; 41   : 	}
; 42   : 
; 43   : 	SMDToken Token;
; 44   : 	int iType = 0;
; 45   : 	BYTE btBuffIndex = 0;
; 46   : 	BYTE btBuffEffectType = 0;
; 47   : 	BYTE ItemType = 0;
; 48   : 	BYTE ItemIndex = 0;
; 49   : 	BYTE btBuffType = 0;
; 50   : 	BYTE btNoticeType = 0;
; 51   : 	BYTE btClearType = 0;
; 52   : 	char chBuffName[20];
; 53   : 	char chBuffDescript[100];
; 54   : 
; 55   : 	while ( TRUE )
; 56   : 	{
; 57   : 		Token = GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 58   : 
; 59   : 		if ( Token == END )

  00192	83 f8 02	 cmp	 eax, 2
  00195	0f 85 a8 fe ff
	ff		 jne	 $LL2@Load
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
$LN15@Load:

; 93   : 			}
; 94   : 		}
; 95   : 	}
; 96   : 
; 97   : 	fclose(SMDFile);

  0019d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001a3	e8 00 00 00 00	 call	 _fclose
  001a8	83 c4 04	 add	 esp, 4

; 98   : 	return true;

  001ab	b0 01		 mov	 al, 1
  001ad	5b		 pop	 ebx

; 99   : }

  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 04 00	 ret	 4
?Load@CBuffScriptLoader@@QAE_NPAD@Z ENDP		; CBuffScriptLoader::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?Initialize@CBuffScriptLoader@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CBuffScriptLoader@@QAEXXZ PROC		; CBuffScriptLoader::Initialize, COMDAT
; _this$ = ecx

; 22   : 	this->iLoadCount = 0;	

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00007	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  0000a	b9 fe 00 00 00	 mov	 ecx, 254		; 000000feH
  0000f	90		 npad	 1
$LL4@Initialize:

; 23   : 
; 24   : 	for ( int i = 0; i < MAX_BUFF_EFFECT-1; i++ )
; 25   : 	{
; 26   : 		this->m_EffectData[i].btIndex			= 0xFF;

  00010	c6 40 e8 ff	 mov	 BYTE PTR [eax-24], 255	; 000000ffH
  00014	8d 40 7f	 lea	 eax, DWORD PTR [eax+127]

; 27   : 		this->m_EffectData[i].btType			= 0;

  00017	c7 40 81 00 00
	00 00		 mov	 DWORD PTR [eax-127], 0
  0001e	83 e9 01	 sub	 ecx, 1
  00021	75 ed		 jne	 SHORT $LL4@Initialize

; 28   : 		this->m_EffectData[i].btClearType		= 0;
; 29   : 		this->m_EffectData[i].btNotification	= 0;
; 30   : 		this->m_EffectData[i].szBuffInfo[0]		= 0;
; 31   : 	}
; 32   : }

  00023	c3		 ret	 0
?Initialize@CBuffScriptLoader@@QAEXXZ ENDP		; CBuffScriptLoader::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ??1CBuffScriptLoader@@UAE@XZ
_TEXT	SEGMENT
??1CBuffScriptLoader@@UAE@XZ PROC			; CBuffScriptLoader::~CBuffScriptLoader, COMDAT
; _this$ = ecx

; 16   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffScriptLoader@@6B@

; 17   : 
; 18   : }

  00006	c3		 ret	 0
??1CBuffScriptLoader@@UAE@XZ ENDP			; CBuffScriptLoader::~CBuffScriptLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ??0CBuffScriptLoader@@QAE@XZ
_TEXT	SEGMENT
??0CBuffScriptLoader@@QAE@XZ PROC			; CBuffScriptLoader::CBuffScriptLoader, COMDAT
; _this$ = ecx

; 11   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffScriptLoader@@6B@

; 12   : 
; 13   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CBuffScriptLoader@@QAE@XZ ENDP			; CBuffScriptLoader::CBuffScriptLoader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffscriptloader.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 157  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
