; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CastleCrown.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CCastleCrown@@QAE@XZ				; CCastleCrown::CCastleCrown
PUBLIC	??1CCastleCrown@@UAE@XZ				; CCastleCrown::~CCastleCrown
PUBLIC	?CastleCrownAct@CCastleCrown@@QAEXH@Z		; CCastleCrown::CastleCrownAct
PUBLIC	??_GCCastleCrown@@UAEPAXI@Z			; CCastleCrown::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CCastleCrown@@6B@				; CCastleCrown::`vftable'
PUBLIC	?g_CsNPC_CastleCrown@@3VCCastleCrown@@A		; g_CsNPC_CastleCrown
PUBLIC	??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ ; `string'
PUBLIC	??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ ; `string'
PUBLIC	??_R4CCastleCrown@@6B@				; CCastleCrown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCastleCrown@@@8			; CCastleCrown `RTTI Type Descriptor'
PUBLIC	??_R3CCastleCrown@@8				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCastleCrown@@8				; CCastleCrown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCastleCrown@@8			; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECCastleCrown@@UAEPAXI@Z:PROC		; CCastleCrown::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?GCAnsCsAccessCrownState@@YAXHE@Z:PROC		; GCAnsCsAccessCrownState
EXTRN	?GetCrownUserIndex@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownUserIndex
EXTRN	?ResetCrownUserIndex@CCastleSiege@@QAEXXZ:PROC	; CCastleSiege::ResetCrownUserIndex
EXTRN	?GetCrownAccessUserX@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownAccessUserX
EXTRN	?GetCrownAccessUserY@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCrownAccessUserY
EXTRN	?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::SetCrownAccessUserX
EXTRN	?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z:PROC	; CCastleSiege::SetCrownAccessUserY
EXTRN	?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z:PROC ; CCastleSiege::GetCrownSwitchUserIndex
EXTRN	?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ:PROC ; CCastleSiege::ResetCrownAccessTickCount
EXTRN	?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ:PROC ; CCastleSiege::GetCrownAccessTickCount
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_CsNPC_CastleCrown@@3VCCastleCrown@@A DD 01H DUP (?)	; g_CsNPC_CastleCrown
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CsNPC_CastleCrown$initializer$@@3P6AXXZA DD FLAT:??__Eg_CsNPC_CastleCrown@@YAXXZ ; g_CsNPC_CastleCrown$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CCastleCrown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCastleCrown@@8 DD FLAT:??_R0?AVCCastleCrown@@@8 ; CCastleCrown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R2CCastleCrown@@8
rdata$r	SEGMENT
??_R2CCastleCrown@@8 DD FLAT:??_R1A@?0A@EA@CCastleCrown@@8 ; CCastleCrown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCastleCrown@@8
rdata$r	SEGMENT
??_R3CCastleCrown@@8 DD 00H				; CCastleCrown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCastleCrown@@@8
data$r	SEGMENT
??_R0?AVCCastleCrown@@@8 DD FLAT:??_7type_info@@6B@	; CCastleCrown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCastleCrown@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCastleCrown@@6B@
rdata$r	SEGMENT
??_R4CCastleCrown@@6B@ DD 00H				; CCastleCrown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCastleCrown@@@8
	DD	FLAT:??_R3CCastleCrown@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
CONST	SEGMENT
??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@ DB '['
	DB	'CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%'
	DB	's)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
CONST	SEGMENT
??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@ DB '[Cas'
	DB	'tleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : '
	DB	'acc(%d) + %d [%s](%s)(%s)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CCastleCrown@@6B@
CONST	SEGMENT
??_7CCastleCrown@@6B@ DD FLAT:??_R4CCastleCrown@@6B@	; CCastleCrown::`vftable'
	DD	FLAT:??_ECCastleCrown@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CsNPC_CastleCrown@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e9 00 00 00 00	 jmp	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
??__Fg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ??__Eg_CsNPC_CastleCrown@@YAXXZ
text$di	SEGMENT
??__Eg_CsNPC_CastleCrown@@YAXXZ PROC			; `dynamic initializer for 'g_CsNPC_CastleCrown'', COMDAT

; 14   : CCastleCrown g_CsNPC_CastleCrown;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_CastleCrown@@3VCCastleCrown@@A ; g_CsNPC_CastleCrown
  00005	e8 00 00 00 00	 call	 ??0CCastleCrown@@QAE@XZ	; CCastleCrown::CCastleCrown
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_CastleCrown@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_CastleCrown''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_CastleCrown@@YAXXZ ENDP			; `dynamic initializer for 'g_CsNPC_CastleCrown''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCastleCrown@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCastleCrown@@UAEPAXI@Z PROC			; CCastleCrown::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCastleCrown@@UAE@XZ	; CCastleCrown::~CCastleCrown
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCCastleCrown@@UAEPAXI@Z ENDP			; CCastleCrown::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ?CastleCrownAct@CCastleCrown@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z PROC		; CCastleCrown::CastleCrownAct, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 32   : 	if ( !gObjIsConnected(iIndex))

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 87 02 00
	00		 je	 $LN4@CastleCrow

; 33   : 		return;
; 34   : 
; 35   : 	if ( gObj[iIndex].Type != OBJ_NPC ||

  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001d	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00023	80 7c 01 50 03	 cmp	 BYTE PTR [ecx+eax+80], 3
  00028	0f 85 71 02 00
	00		 jne	 $LN4@CastleCrow
  0002e	ba d8 00 00 00	 mov	 edx, 216		; 000000d8H
  00033	66 39 94 01 90
	00 00 00	 cmp	 WORD PTR [ecx+eax+144], dx
  0003b	0f 85 5e 02 00
	00		 jne	 $LN4@CastleCrow

; 36   : 		 gObj[iIndex].Class != 216 )
; 37   : 		 return;
; 38   : 
; 39   : 	if ( !gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) )

  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00046	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00051	83 c4 04	 add	 esp, 4

; 40   : 	{
; 41   : 		g_CastleSiege.ResetCrownUserIndex();

  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00059	85 c0		 test	 eax, eax
  0005b	75 2c		 jne	 SHORT $LN5@CastleCrow
  0005d	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 42   : 		g_CastleSiege.SetCrownAccessUserX(0);

  00062	6a 00		 push	 0
  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00069	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 43   : 		g_CastleSiege.SetCrownAccessUserY(0);

  0006e	6a 00		 push	 0
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00075	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 44   : 		g_CastleSiege.ResetCrownAccessTickCount();

  0007a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0007f	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  00084	5e		 pop	 esi

; 110  : 	}
; 111  : }

  00085	5d		 pop	 ebp
  00086	c2 04 00	 ret	 4
$LN5@CastleCrow:
  00089	57		 push	 edi

; 45   : 
; 46   : 		return;
; 47   : 	}
; 48   : 
; 49   : 	LPOBJ lpObj = &gObj[iIndex];
; 50   : 	LPOBJ lpUserObj = &gObj[g_CastleSiege.GetCrownUserIndex()];

  0008a	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  0008f	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  00095	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 51   : 
; 52   : 	if ( lpUserObj->MapNumber == MAP_INDEX_CASTLESIEGE &&
; 53   : 		 lpUserObj->m_btCsJoinSide >= 2 &&

  0009b	80 bf 23 01 00
	00 1e		 cmp	 BYTE PTR [edi+291], 30	; 0000001eH
  000a2	0f 85 be 01 00
	00		 jne	 $LN6@CastleCrow
  000a8	80 bf 5a 20 00
	00 02		 cmp	 BYTE PTR [edi+8282], 2
  000af	0f 82 b1 01 00
	00		 jb	 $LN6@CastleCrow
  000b5	80 bf 5b 20 00
	00 01		 cmp	 BYTE PTR [edi+8283], 1
  000bc	0f 85 a4 01 00
	00		 jne	 $LN6@CastleCrow

; 54   : 		 lpUserObj->m_bCsGuildInvolved == 1 )
; 55   : 	{
; 56   : 		if ( lpUserObj->Y == g_CastleSiege.GetCrownAccessUserY() &&

  000c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000c7	e8 00 00 00 00	 call	 ?GetCrownAccessUserY@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserY
  000cc	0f b6 8f 21 01
	00 00		 movzx	 ecx, BYTE PTR [edi+289]
  000d3	3b c8		 cmp	 ecx, eax
  000d5	0f 85 8b 01 00
	00		 jne	 $LN6@CastleCrow
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000e0	e8 00 00 00 00	 call	 ?GetCrownAccessUserX@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessUserX
  000e5	0f b6 8f 20 01
	00 00		 movzx	 ecx, BYTE PTR [edi+288]
  000ec	3b c8		 cmp	 ecx, eax
  000ee	0f 85 72 01 00
	00		 jne	 $LN6@CastleCrow

; 57   : 			 lpUserObj->X == g_CastleSiege.GetCrownAccessUserX() )
; 58   : 		{
; 59   : 			if ( gObjIsConnected(g_CastleSiege.GetCrownUserIndex()) &&
; 60   : 				 gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(217)) &&

  000f4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  000f9	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00104	83 c4 04	 add	 esp, 4
  00107	85 c0		 test	 eax, eax
  00109	0f 84 57 01 00
	00		 je	 $LN6@CastleCrow
  0010f	68 d9 00 00 00	 push	 217			; 000000d9H
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00119	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00124	83 c4 04	 add	 esp, 4
  00127	85 c0		 test	 eax, eax
  00129	0f 84 37 01 00
	00		 je	 $LN6@CastleCrow
  0012f	68 da 00 00 00	 push	 218			; 000000daH
  00134	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00139	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00144	83 c4 04	 add	 esp, 4
  00147	85 c0		 test	 eax, eax
  00149	0f 84 17 01 00
	00		 je	 $LN6@CastleCrow

; 61   : 				 gObjIsConnected(g_CastleSiege.GetCrownSwitchUserIndex(218)) )
; 62   : 			{
; 63   : 				if ( gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(217)].m_btCsJoinSide &&

  0014f	68 d9 00 00 00	 push	 217			; 000000d9H
  00154	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00159	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0015e	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  00164	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00169	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016f	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  00174	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  0017a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017f	8a 84 01 5a 20
	00 00		 mov	 al, BYTE PTR [ecx+eax+8282]
  00186	3a 86 5a 20 00
	00		 cmp	 al, BYTE PTR [esi+8282]
  0018c	75 7d		 jne	 SHORT $LN12@CastleCrow
  0018e	68 da 00 00 00	 push	 218			; 000000daH
  00193	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00198	e8 00 00 00 00	 call	 ?GetCrownSwitchUserIndex@CCastleSiege@@QAEHH@Z ; CCastleSiege::GetCrownSwitchUserIndex
  0019d	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  001a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001a8	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ae	e8 00 00 00 00	 call	 ?GetCrownUserIndex@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownUserIndex
  001b3	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001be	8a 84 01 5a 20
	00 00		 mov	 al, BYTE PTR [ecx+eax+8282]
  001c5	3a 86 5a 20 00
	00		 cmp	 al, BYTE PTR [esi+8282]
  001cb	75 3e		 jne	 SHORT $LN12@CastleCrow

; 64   : 					 gObj[g_CastleSiege.GetCrownUserIndex()].m_btCsJoinSide == gObj[g_CastleSiege.GetCrownSwitchUserIndex(218)].m_btCsJoinSide )
; 65   : 				{
; 66   : 					DWORD dwTime = GetTickCount() - g_CastleSiege.GetCrownAccessTickCount();

  001cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  001d2	e8 00 00 00 00	 call	 ?GetCrownAccessTickCount@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCrownAccessTickCount
  001d7	8b f0		 mov	 esi, eax
  001d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 67   : 		
; 68   : 					LogAddTD("[CastleSiege] [Reg. Accumulating] Accumulated Crown AccessTime : acc(%d) + %d [%s](%s)(%s)",

  001df	8d 4f 5d	 lea	 ecx, DWORD PTR [edi+93]
  001e2	2b c6		 sub	 eax, esi
  001e4	51		 push	 ecx
  001e5	8d 4f 52	 lea	 ecx, DWORD PTR [edi+82]
  001e8	51		 push	 ecx
  001e9	8d 8f 1c 06 00
	00		 lea	 ecx, DWORD PTR [edi+1564]
  001ef	51		 push	 ecx
  001f0	50		 push	 eax
  001f1	ff b7 74 20 00
	00		 push	 DWORD PTR [edi+8308]
  001f7	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@NIHAAGNE@?$FLCastleSiege?$FN?5?$FLReg?4?5Accumulating@
  001fc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00202	83 c4 18	 add	 esp, 24			; 00000018H
  00205	5f		 pop	 edi
  00206	5e		 pop	 esi

; 110  : 	}
; 111  : }

  00207	5d		 pop	 ebp
  00208	c2 04 00	 ret	 4
$LN12@CastleCrow:

; 69   : 						lpUserObj->m_iAccumulatedCrownAccessTime, dwTime,
; 70   : 						lpUserObj->GuildName, lpUserObj->AccountID, lpUserObj->Name);
; 71   : 
; 72   : 				}
; 73   : 				else
; 74   : 				{
; 75   : 					GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  0020b	6a 02		 push	 2
  0020d	ff 37		 push	 DWORD PTR [edi]
  0020f	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  00214	83 c4 08	 add	 esp, 8

; 76   : 					g_CastleSiege.ResetCrownUserIndex();

  00217	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0021c	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 77   : 					g_CastleSiege.SetCrownAccessUserX(0);

  00221	6a 00		 push	 0
  00223	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00228	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 78   : 					g_CastleSiege.SetCrownAccessUserY(0);

  0022d	6a 00		 push	 0
  0022f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00234	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 79   : 					g_CastleSiege.ResetCrownAccessTickCount();

  00239	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0023e	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount

; 80   : 
; 81   : 					LogAddTD("[CastleSiege] [%s][%s] Register Castle Crown Canceled (GUILD:%s)",

  00243	8d 87 1c 06 00
	00		 lea	 eax, DWORD PTR [edi+1564]
  00249	50		 push	 eax
  0024a	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0024d	50		 push	 eax
  0024e	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00251	50		 push	 eax
  00252	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NIANKKFA@?$FLCastleSiege?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Register?5@
  00257	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0025d	83 c4 10	 add	 esp, 16			; 00000010H
  00260	5f		 pop	 edi
  00261	5e		 pop	 esi

; 110  : 	}
; 111  : }

  00262	5d		 pop	 ebp
  00263	c2 04 00	 ret	 4
$LN6@CastleCrow:

; 82   : 						lpUserObj->AccountID, lpUserObj->Name, lpUserObj->GuildName);
; 83   : 				}
; 84   : 			}
; 85   : 			else
; 86   : 			{
; 87   : 				GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);
; 88   : 				g_CastleSiege.ResetCrownUserIndex();
; 89   : 				g_CastleSiege.SetCrownAccessUserX(0);
; 90   : 				g_CastleSiege.SetCrownAccessUserY(0);
; 91   : 				g_CastleSiege.ResetCrownAccessTickCount();
; 92   : 			}
; 93   : 		}
; 94   : 		else
; 95   : 		{
; 96   : 			GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);
; 97   : 			g_CastleSiege.ResetCrownUserIndex();
; 98   : 			g_CastleSiege.SetCrownAccessUserX(0);
; 99   : 			g_CastleSiege.SetCrownAccessUserY(0);
; 100  : 			g_CastleSiege.ResetCrownAccessTickCount();
; 101  : 		}
; 102  : 	}
; 103  : 	else
; 104  : 	{
; 105  : 		GCAnsCsAccessCrownState(lpUserObj->m_Index, 2);

  00266	6a 02		 push	 2
  00268	ff 37		 push	 DWORD PTR [edi]
  0026a	e8 00 00 00 00	 call	 ?GCAnsCsAccessCrownState@@YAXHE@Z ; GCAnsCsAccessCrownState
  0026f	83 c4 08	 add	 esp, 8

; 106  : 		g_CastleSiege.ResetCrownUserIndex();

  00272	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00277	e8 00 00 00 00	 call	 ?ResetCrownUserIndex@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownUserIndex

; 107  : 		g_CastleSiege.SetCrownAccessUserX(0);

  0027c	6a 00		 push	 0
  0027e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00283	e8 00 00 00 00	 call	 ?SetCrownAccessUserX@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserX

; 108  : 		g_CastleSiege.SetCrownAccessUserY(0);

  00288	6a 00		 push	 0
  0028a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  0028f	e8 00 00 00 00	 call	 ?SetCrownAccessUserY@CCastleSiege@@QAEXE@Z ; CCastleSiege::SetCrownAccessUserY

; 109  : 		g_CastleSiege.ResetCrownAccessTickCount();

  00294	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  00299	e8 00 00 00 00	 call	 ?ResetCrownAccessTickCount@CCastleSiege@@QAEXXZ ; CCastleSiege::ResetCrownAccessTickCount
  0029e	5f		 pop	 edi
$LN4@CastleCrow:
  0029f	5e		 pop	 esi

; 110  : 	}
; 111  : }

  002a0	5d		 pop	 ebp
  002a1	c2 04 00	 ret	 4
?CastleCrownAct@CCastleCrown@@QAEXH@Z ENDP		; CCastleCrown::CastleCrownAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ??1CCastleCrown@@UAE@XZ
_TEXT	SEGMENT
??1CCastleCrown@@UAE@XZ PROC				; CCastleCrown::~CCastleCrown, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrown@@6B@

; 26   : 	return;
; 27   : }

  00006	c3		 ret	 0
??1CCastleCrown@@UAE@XZ ENDP				; CCastleCrown::~CCastleCrown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ??0CCastleCrown@@QAE@XZ
_TEXT	SEGMENT
??0CCastleCrown@@QAE@XZ PROC				; CCastleCrown::CCastleCrown, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCastleCrown@@6B@

; 21   : 	return;
; 22   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CCastleCrown@@QAE@XZ ENDP				; CCastleCrown::CCastleCrown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 114  : #endif

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\castlecrown.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 114  : #endif

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
