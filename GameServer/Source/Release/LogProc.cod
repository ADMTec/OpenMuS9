; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\LogProc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_cline@@3HA					; m_cline
PUBLIC	?LogText@@3PAY0FA@DA				; LogText
PUBLIC	?LogTextLength@@3PAFA				; LogTextLength
PUBLIC	?LogTextViewType@@3PAEA				; LogTextViewType
PUBLIC	?LogCritical@@3U_RTL_CRITICAL_SECTION@@A	; LogCritical
PUBLIC	?LogMDay@@3HA					; LogMDay
PUBLIC	?LogMonth@@3HA					; LogMonth
PUBLIC	?LogMYear@@3HA					; LogMYear
PUBLIC	?gLogOutType@@3HA				; gLogOutType
PUBLIC	?LogAdd@@3P6AXPADZZA				; LogAdd
PUBLIC	?LogAddC@@3P6AXEPADZZA				; LogAddC
PUBLIC	?LogAddTD@@3P6AXPADZZA				; LogAddTD
PUBLIC	?LogAddHeadHex@@3P6AXPAD0H@ZA			; LogAddHeadHex
PUBLIC	?LogTextPaint@@3P6AXPAUHWND__@@@ZA		; LogTextPaint
PUBLIC	?LogAddL@@3P6AXPADZZA				; LogAddL
_BSS	SEGMENT
?m_cline@@3HA DD 01H DUP (?)				; m_cline
?LogText@@3PAY0FA@DA DB 0960H DUP (?)			; LogText
?LogTextLength@@3PAFA DW 01eH DUP (?)			; LogTextLength
?LogTextViewType@@3PAEA DB 01eH DUP (?)			; LogTextViewType
	ALIGN	4

?LogCritical@@3U_RTL_CRITICAL_SECTION@@A DB 018H DUP (?) ; LogCritical
?LogMDay@@3HA DD 01H DUP (?)				; LogMDay
?LogMonth@@3HA DD 01H DUP (?)				; LogMonth
?LogMYear@@3HA DD 01H DUP (?)				; LogMYear
?LogAdd@@3P6AXPADZZA DD 01H DUP (?)			; LogAdd
?LogAddC@@3P6AXEPADZZA DD 01H DUP (?)			; LogAddC
?LogAddTD@@3P6AXPADZZA DD 01H DUP (?)			; LogAddTD
?LogAddHeadHex@@3P6AXPAD0H@ZA DD 01H DUP (?)		; LogAddHeadHex
?LogTextPaint@@3P6AXPAUHWND__@@@ZA DD 01H DUP (?)	; LogTextPaint
?LogAddL@@3P6AXPADZZA DD 01H DUP (?)			; LogAddL
_BSS	ENDS
_DATA	SEGMENT
?gLogOutType@@3HA DD 01H				; gLogOutType
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	?LogInit@@YAXH@Z				; LogInit
PUBLIC	?LogDataSet@@YAXXZ				; LogDataSet
PUBLIC	?LogDateChange@@YAHXZ				; LogDateChange
PUBLIC	?LogTextAdd@@YAXEPADH@Z				; LogTextAdd
PUBLIC	?LogAddFuncVoid@@YAXPADZZ			; LogAddFuncVoid
PUBLIC	?LogAddTimeDateVoid@@YAXPADZZ			; LogAddTimeDateVoid
PUBLIC	?LogAddFunc@@YAXPADZZ				; LogAddFunc
PUBLIC	?LogAddDebug@@YAXPADZZ				; LogAddDebug
PUBLIC	?LogAddFuncColor@@YAXEPADZZ			; LogAddFuncColor
PUBLIC	?LogAddLocalFunc@@YAXPADZZ			; LogAddLocalFunc
PUBLIC	?LogAddLocalFuncVoid@@YAXPADZZ			; LogAddLocalFuncVoid
PUBLIC	?LogAddTimeDateFunc@@YAXPADZZ			; LogAddTimeDateFunc
PUBLIC	?LogAddHeadHexFuncVoid@@YAXPAD0H@Z		; LogAddHeadHexFuncVoid
PUBLIC	?LogAddHeadHexFunc@@YAXHPADH@Z			; LogAddHeadHexFunc
PUBLIC	?LogAddStrHexFunc@@YAXPAD0H@Z			; LogAddStrHexFunc
PUBLIC	?LogTextClear@@YAXXZ				; LogTextClear
PUBLIC	?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z		; LogTextPaintProcVoid
PUBLIC	?LogTextPaintProc@@YAXPAUHWND__@@@Z		; LogTextPaintProc
PUBLIC	?LogGetFileName@@YAHXZ				; LogGetFileName
PUBLIC	?LogClose@@YAXXZ				; LogClose
PUBLIC	?MsgBox@@YAXPADZZ				; MsgBox
PUBLIC	??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char *>
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04JMANJFAC@Log?2?$AA@			; `string'
PUBLIC	??_C@_0BG@KPDOJDPF@?$CFs?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ ; `string'
PUBLIC	??_C@_03CCGKKFHG@a?$CLt?$AA@			; `string'
PUBLIC	??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_07CLIJNIAP@?$FL?$CF?48s?$FN?5?$AA@	; `string'
PUBLIC	??_C@_0M@CEBPAFL@LogProc?4cpp?$AA@		; `string'
PUBLIC	??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ ; `string'
PUBLIC	??_C@_05LJMBFGND@?$CF02X?0?$AA@			; `string'
PUBLIC	??_C@_05LJOMDNAA@?$CF?408s?$AA@			; `string'
PUBLIC	??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ ; `string'
PUBLIC	??_C@_07KDJDOMME@0x?$CF02x?5?$AA@		; `string'
PUBLIC	??_C@_02MNMNLDAI@?$CJ?6?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_strcpy_s:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_asctime:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?szServerName@@3PADA:BYTE			; szServerName
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?logfp@@3PAU_iobuf@@A DD 01H DUP (?)			; logfp
?m_szLogFileName@@3PADA DB 064H DUP (?)			; m_szLogFileName
_BSS	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNMNLDAI@?$CJ?6?$AA@
CONST	SEGMENT
??_C@_02MNMNLDAI@?$CJ?6?$AA@ DB ')', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
CONST	SEGMENT
??_C@_07KDJDOMME@0x?$CF02x?5?$AA@ DB '0x%02x ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
CONST	SEGMENT
??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@ DB '[%s][%d] : '
	DB	'(', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJOMDNAA@?$CF?408s?$AA@
CONST	SEGMENT
??_C@_05LJOMDNAA@?$CF?408s?$AA@ DB '%.08s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJMBFGND@?$CF02X?0?$AA@
CONST	SEGMENT
??_C@_05LJMBFGND@?$CF02X?0?$AA@ DB '%02X,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
CONST	SEGMENT
??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@ DB 'error'
	DB	'-L2 : file create error %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEBPAFL@LogProc?4cpp?$AA@
CONST	SEGMENT
??_C@_0M@CEBPAFL@LogProc?4cpp?$AA@ DB 'LogProc.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLIJNIAP@?$FL?$CF?48s?$FN?5?$AA@
CONST	SEGMENT
??_C@_07CLIJNIAP@?$FL?$CF?48s?$FN?5?$AA@ DB '[%.8s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
CONST	SEGMENT
??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@ DB 'Log file create erro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCGKKFHG@a?$CLt?$AA@
CONST	SEGMENT
??_C@_03CCGKKFHG@a?$CLt?$AA@ DB 'a+t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KPDOJDPF@?$CFs?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
CONST	SEGMENT
??_C@_0BG@KPDOJDPF@?$CFs?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@ DB '%s%02d%'
	DB	'02d%02d_%s.log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMANJFAC@Log?2?$AA@
CONST	SEGMENT
??_C@_04JMANJFAC@Log?2?$AA@ DB 'Log\', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LogAddHeadHexFunc@@YAXHPADH@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LogAddHeadHexFunc@@YAXHPADH@Z$0
__unwindtable$?LogAddHeadHexFunc@@YAXHPADH@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LogAddHeadHexFunc@@YAXHPADH@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LogAddHeadHexFunc@@YAXHPADH@Z$2
__ehfuncinfo$?LogAddHeadHexFunc@@YAXHPADH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LogAddHeadHexFunc@@YAXHPADH@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LogAddHeadHexFunc@@YAXHPADH@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LogAddTimeDateFunc@@YAXPADZZ$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LogAddTimeDateFunc@@YAXPADZZ$0
__unwindtable$?LogAddTimeDateFunc@@YAXPADZZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LogAddTimeDateFunc@@YAXPADZZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LogAddTimeDateFunc@@YAXPADZZ$2
__ehfuncinfo$?LogAddTimeDateFunc@@YAXPADZZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LogAddTimeDateFunc@@YAXPADZZ
	DD	01H
	DD	FLAT:__tryblocktable$?LogAddTimeDateFunc@@YAXPADZZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?MsgBox@@YAXPADZZ
_TEXT	SEGMENT
_szBuffer$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_szlog$ = 8						; size = 4
?MsgBox@@YAXPADZZ PROC					; MsgBox, COMDAT

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	68 00 02 00 00	 push	 512			; 00000200H
  00018	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00029	8d 45 0c	 lea	 eax, DWORD PTR _szlog$[ebp+4]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	ff 75 08	 push	 DWORD PTR _szlog$[ebp]
  00032	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00038	6a ff		 push	 -1
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	ff 70 04	 push	 DWORD PTR [eax+4]
  00045	83 c9 01	 or	 ecx, 1
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  0004e	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 576  : 	MessageBox(NULL, szBuffer, "error", MB_OK|MB_APPLMODAL);

  00051	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00057	6a 00		 push	 0
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_05KKCIMGE@error?$AA@
  0005e	50		 push	 eax
  0005f	6a 00		 push	 0
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16

; 577  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?MsgBox@@YAXPADZZ ENDP					; MsgBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogClose@@YAXXZ
_TEXT	SEGMENT
?LogClose@@YAXXZ PROC					; LogClose, COMDAT

; 560  : 	if (logfp!=0)

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?logfp@@3PAU_iobuf@@A
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN2@LogClose

; 561  : 	{
; 562  : 		fclose(logfp);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _fclose
  0000f	83 c4 04	 add	 esp, 4
$LN2@LogClose:

; 563  : 	}
; 564  : 	DeleteCriticalSection(&LogCritical);

  00012	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 565  : }

  0001d	c3		 ret	 0
?LogClose@@YAXXZ ENDP					; LogClose
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogGetFileName@@YAHXZ
_TEXT	SEGMENT
?LogGetFileName@@YAHXZ PROC				; LogGetFileName, COMDAT

; 555  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 556  : }

  00002	c3		 ret	 0
?LogGetFileName@@YAHXZ ENDP				; LogGetFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogTextPaintProc@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
tv206 = -4						; size = 4
_hWnd$ = 8						; size = 4
?LogTextPaintProc@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProc, COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 504  : 	HDC hdc;
; 505  : 	int total;
; 506  : 	int n;
; 507  : 	
; 508  : 	
; 509  : 	hdc=GetDC(hWnd);

  00007	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 510  : 	total= LOG_TEXT_LINE;
; 511  : 
; 512  : 	n=m_cline;

  00010	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_cline@@3HA ; m_cline
  00016	8b f8		 mov	 edi, eax
  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__SetTextColor@8
  0001e	bb 12 02 00 00	 mov	 ebx, 530		; 00000212H
$LL2@LogTextPai:

; 513  : 
; 514  : 	while(total-- != 0)
; 515  : 	{
; 516  : 		switch (LogTextViewType[n] )

  00023	0f b6 86 00 00
	00 00		 movzx	 eax, BYTE PTR ?LogTextViewType@@3PAEA[esi]
  0002a	83 eb 0f	 sub	 ebx, 15			; 0000000fH
  0002d	83 c0 fe	 add	 eax, -2			; fffffffeH
  00030	83 f8 05	 cmp	 eax, 5
  00033	77 31		 ja	 SHORT $LN12@LogTextPai
  00035	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@LogTextPai[eax*4]
$LN6@LogTextPai:

; 517  : 		{
; 518  : 		case 2:
; 519  : 			SetTextColor(hdc, RGB(255, 0, 0) );	

  0003c	68 ff 00 00 00	 push	 255			; 000000ffH

; 520  : 			break;

  00041	eb 25		 jmp	 SHORT $LN21@LogTextPai
$LN7@LogTextPai:

; 521  : 		case 3:
; 522  : 			SetTextColor(hdc, RGB(0, 100, 0));

  00043	68 00 64 00 00	 push	 25600			; 00006400H

; 523  : 			break;

  00048	eb 1e		 jmp	 SHORT $LN21@LogTextPai
$LN8@LogTextPai:

; 524  : 		case 4:
; 525  : 			SetTextColor(hdc, RGB(0, 0, 255));

  0004a	68 00 00 ff 00	 push	 16711680		; 00ff0000H

; 526  : 			break;

  0004f	eb 17		 jmp	 SHORT $LN21@LogTextPai
$LN9@LogTextPai:

; 527  : 		case 5:
; 528  : 			SetTextColor(hdc, RGB(155, 0, 0));

  00051	68 9b 00 00 00	 push	 155			; 0000009bH

; 529  : 			break;

  00056	eb 10		 jmp	 SHORT $LN21@LogTextPai
$LN10@LogTextPai:

; 530  : 		case 6:
; 531  : 			SetTextColor(hdc, RGB(0, 0, 100));

  00058	68 00 00 64 00	 push	 6553600			; 00640000H

; 532  : 			break;

  0005d	eb 09		 jmp	 SHORT $LN21@LogTextPai
$LN11@LogTextPai:

; 533  : 		case 7:
; 534  : 			SetTextColor(hdc, RGB(210, 30, 150));

  0005f	68 d2 1e 96 00	 push	 9838290			; 00961ed2H

; 535  : 			break;

  00064	eb 02		 jmp	 SHORT $LN21@LogTextPai
$LN12@LogTextPai:

; 536  : 		default:
; 537  : 			SetTextColor(hdc, RGB(0, 0, 0));

  00066	6a 00		 push	 0
$LN21@LogTextPai:
  00068	57		 push	 edi
  00069	ff d1		 call	 ecx

; 538  : 			break;
; 539  : 		}
; 540  : 		if (strlen(LogText[n])>1)

  0006b	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0006e	c1 e0 04	 shl	 eax, 4
  00071	8d 90 00 00 00
	00		 lea	 edx, DWORD PTR ?LogText@@3PAY0FA@DA[eax]
  00077	8b c2		 mov	 eax, edx
  00079	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0007c	89 4d fc	 mov	 DWORD PTR tv206[ebp], ecx
  0007f	90		 npad	 1
$LL20@LogTextPai:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 c9		 test	 cl, cl
  00085	75 f9		 jne	 SHORT $LL20@LogTextPai
  00087	2b 45 fc	 sub	 eax, DWORD PTR tv206[ebp]
  0008a	83 f8 01	 cmp	 eax, 1
  0008d	76 0c		 jbe	 SHORT $LN13@LogTextPai

; 541  : 		{
; 542  : 			TextOut( hdc, 0, total*15 + 80, LogText[n], strlen(LogText[n])); 

  0008f	50		 push	 eax
  00090	52		 push	 edx
  00091	53		 push	 ebx
  00092	6a 00		 push	 0
  00094	57		 push	 edi
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
$LN13@LogTextPai:

; 543  : 		}
; 544  : 		n--;

  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__SetTextColor@8
  000a1	83 ee 01	 sub	 esi, 1

; 545  : 		if (n<0)

  000a4	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  000a9	0f 48 f0	 cmovs	 esi, eax
  000ac	83 fb 50	 cmp	 ebx, 80			; 00000050H
  000af	0f 85 6e ff ff
	ff		 jne	 $LL2@LogTextPai

; 546  : 		{
; 547  : 			n=LOG_TEXT_LINE-1;
; 548  : 		}
; 549  : 	}
; 550  : 	ReleaseDC(hWnd, hdc);

  000b5	57		 push	 edi
  000b6	ff 75 08	 push	 DWORD PTR _hWnd$[ebp]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	5b		 pop	 ebx

; 551  : }

  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
  000c6	66 90		 npad	 2
$LN23@LogTextPai:
  000c8	00 00 00 00	 DD	 $LN6@LogTextPai
  000cc	00 00 00 00	 DD	 $LN7@LogTextPai
  000d0	00 00 00 00	 DD	 $LN8@LogTextPai
  000d4	00 00 00 00	 DD	 $LN9@LogTextPai
  000d8	00 00 00 00	 DD	 $LN10@LogTextPai
  000dc	00 00 00 00	 DD	 $LN11@LogTextPai
?LogTextPaintProc@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_hWnd$ = 8						; size = 4
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z PROC		; LogTextPaintProcVoid, COMDAT

; 498  : 	// Log Disabled
; 499  : }

  00000	c3		 ret	 0
?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ENDP		; LogTextPaintProcVoid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogTextClear@@YAXXZ
_TEXT	SEGMENT
?LogTextClear@@YAXXZ PROC				; LogTextClear, COMDAT

; 485  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 486  : 	int n;
; 487  : 	for ( n=0; n<LOG_TEXT_LINE; n++)

  00003	33 f6		 xor	 esi, esi
  00005	bf 00 00 00 00	 mov	 edi, OFFSET ?LogText@@3PAY0FA@DA ; LogText
  0000a	33 db		 xor	 ebx, ebx
  0000c	0f 1f 40 00	 npad	 4
$LL4@LogTextCle:

; 488  : 	{
; 489  : 		memset(&LogText[n], 0, LOG_TEXT_LENGTH);

  00010	6a 50		 push	 80			; 00000050H
  00012	6a 00		 push	 0
  00014	57		 push	 edi
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 490  : 		LogTextLength[n]=0;	// WORD

  0001d	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  00020	73 2b		 jae	 SHORT $LN15@LogTextCle
  00022	33 c0		 xor	 eax, eax
  00024	66 89 04 75 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[esi*2], ax

; 491  : 		LogTextViewType[n]=0;	// BYTE

  0002c	81 fb 60 09 00
	00		 cmp	 ebx, 2400		; 00000960H
  00032	73 19		 jae	 SHORT $LN15@LogTextCle
  00034	88 86 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[esi], al
  0003a	83 c7 50	 add	 edi, 80			; 00000050H
  0003d	46		 inc	 esi
  0003e	83 c3 50	 add	 ebx, 80			; 00000050H
  00041	81 ff 60 09 00
	00		 cmp	 edi, OFFSET ?LogText@@3PAY0FA@DA+2400
  00047	7c c7		 jl	 SHORT $LL4@LogTextCle

; 492  : 	}
; 493  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	c3		 ret	 0
$LN15@LogTextCle:

; 491  : 		LogTextViewType[n]=0;	// BYTE

  0004d	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN16@LogTextCle:
$LN14@LogTextCle:
  00052	cc		 int	 3
?LogTextClear@@YAXXZ ENDP				; LogTextClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddStrHexFunc@@YAXPAD0H@Z
_TEXT	SEGMENT
_ltime$1 = -8						; size = 8
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddStrHexFunc@@YAXPAD0H@Z PROC			; LogAddStrHexFunc, COMDAT

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _ltime$1[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  00010	8d 45 f8	 lea	 eax, DWORD PTR _ltime$1[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 __localtime64
  00019	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 452  : 	today=localtime(&ltime);

  0001c	8b f0		 mov	 esi, eax

; 453  : 
; 454  : 	if (gLogOutType==0)

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00025	0f 84 94 00 00
	00		 je	 $LN11@LogAddStrH

; 455  : 	{
; 456  : 		return;
; 457  : 	}
; 458  : 	else
; 459  : 	{
; 460  : 		if (logfp==0)

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?logfp@@3PAU_iobuf@@A, 0
  00032	0f 84 87 00 00
	00		 je	 $LN11@LogAddStrH

; 461  : 		{
; 462  : 			return;
; 463  : 		}
; 464  : 		else
; 465  : 		{
; 466  : 			EnterCriticalSection(&LogCritical);

  00038	57		 push	 edi
  00039	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 467  : 			fprintf(logfp, "%.08s", asctime(today)+11);

  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 _asctime
  0004a	83 c0 0b	 add	 eax, 11			; 0000000bH
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_05LJOMDNAA@?$CF?408s?$AA@
  00053	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  00059	e8 00 00 00 00	 call	 _fprintf

; 468  : 			fprintf(logfp, "[%s][%d] : (", str,len);

  0005e	8b 7d 10	 mov	 edi, DWORD PTR _len$[ebp]
  00061	57		 push	 edi
  00062	ff 75 08	 push	 DWORD PTR _str$[ebp]
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EPLLIA@?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5?$CI?$AA@
  0006a	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  00070	e8 00 00 00 00	 call	 _fprintf
  00075	83 c4 20	 add	 esp, 32			; 00000020H

; 469  : 
; 470  : 			for (n=0; n<len; n++ )

  00078	33 f6		 xor	 esi, esi
  0007a	85 ff		 test	 edi, edi
  0007c	7e 22		 jle	 SHORT $LN3@LogAddStrH
  0007e	53		 push	 ebx
  0007f	8b 5d 0c	 mov	 ebx, DWORD PTR _data$[ebp]
$LL4@LogAddStrH:

; 471  : 			{
; 472  : 				fprintf(logfp, "0x%02x ", *(BYTE *)(data+n));

  00082	0f b6 04 1e	 movzx	 eax, BYTE PTR [esi+ebx]
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_07KDJDOMME@0x?$CF02x?5?$AA@
  0008c	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  00092	e8 00 00 00 00	 call	 _fprintf
  00097	46		 inc	 esi
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	3b f7		 cmp	 esi, edi
  0009d	7c e3		 jl	 SHORT $LL4@LogAddStrH
  0009f	5b		 pop	 ebx
$LN3@LogAddStrH:

; 473  : 			}
; 474  : 			fprintf(logfp, ")\n");

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_02MNMNLDAI@?$CJ?6?$AA@
  000a5	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  000ab	e8 00 00 00 00	 call	 _fprintf
  000b0	83 c4 08	 add	 esp, 8

; 475  : 
; 476  : 			LeaveCriticalSection(&LogCritical);

  000b3	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000be	5f		 pop	 edi
$LN11@LogAddStrH:
  000bf	5e		 pop	 esi

; 477  : 		}
; 478  : 	}
; 479  : 	} catch (DWORD) {
; 480  : 		
; 481  : 	}
; 482  : }

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
?LogAddStrHexFunc@@YAXPAD0H@Z ENDP			; LogAddStrHexFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddHeadHexFunc@@YAXHPADH@Z
_TEXT	SEGMENT
_szTmp$1$ = -40						; size = 4
_len$GSCopy$1$ = -36					; size = 4
_data$GSCopy$1$ = -32					; size = 4
_tmpstr$2 = -28						; size = 8
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_Type$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddHeadHexFunc@@YAXHPADH@Z PROC			; LogAddHeadHexFunc, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LogAddHeadHexFunc@@YAXHPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00031	89 45 e0	 mov	 DWORD PTR _data$GSCopy$1$[ebp], eax
  00034	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00037	89 45 dc	 mov	 DWORD PTR _len$GSCopy$1$[ebp], eax

; 405  : 	try {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 406  : 	signed int n;
; 407  : 
; 408  : 	char* szTmp = new char[len*4+1];

  00041	8d 34 85 01 00
	00 00		 lea	 esi, DWORD PTR [eax*4+1]
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004e	83 c4 04	 add	 esp, 4
  00051	8b f8		 mov	 edi, eax
  00053	89 7d d8	 mov	 DWORD PTR _szTmp$1$[ebp], edi

; 409  : 	memset(szTmp,0,len*4+1);

  00056	56		 push	 esi
  00057	6a 00		 push	 0
  00059	57		 push	 edi
  0005a	e8 00 00 00 00	 call	 _memset
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 410  : 	
; 411  : 	if ( gLogOutType==0)

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00069	0f 84 b1 00 00
	00		 je	 $LN14@LogAddHead

; 412  : 	{
; 413  : 		return;
; 414  : 	}
; 415  : 	else
; 416  : 	{
; 417  : 		if (logfp==0)

  0006f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?logfp@@3PAU_iobuf@@A, 0
  00076	0f 84 a4 00 00
	00		 je	 $LN14@LogAddHead

; 418  : 		{
; 419  : 			return;
; 420  : 		}
; 421  : 		else
; 422  : 		{
; 423  : 			EnterCriticalSection(&LogCritical);

  0007c	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 424  : 
; 425  : 			for (n=0; n<len; n++) 

  00087	33 db		 xor	 ebx, ebx
  00089	39 5d dc	 cmp	 DWORD PTR _len$GSCopy$1$[ebp], ebx
  0008c	7e 6c		 jle	 SHORT $LN3@LogAddHead
  0008e	66 90		 npad	 2
$LL4@LogAddHead:

; 426  : 			{
; 427  : 				char tmpstr[8];
; 428  : 				sprintf(tmpstr,"%02X,",(BYTE)data[n]&0xFF);

  00090	8b 45 e0	 mov	 eax, DWORD PTR _data$GSCopy$1$[ebp]
  00093	0f b6 04 18	 movzx	 eax, BYTE PTR [eax+ebx]
  00097	50		 push	 eax
  00098	8d 45 e4	 lea	 eax, DWORD PTR _tmpstr$2[ebp]
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_05LJMBFGND@?$CF02X?0?$AA@
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _sprintf

; 429  : 				strcat(szTmp,tmpstr);

  000a6	8d 45 e4	 lea	 eax, DWORD PTR _tmpstr$2[ebp]
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ac	8b f0		 mov	 esi, eax
  000ae	66 90		 npad	 2
$LL19@LogAddHead:
  000b0	8a 08		 mov	 cl, BYTE PTR [eax]
  000b2	40		 inc	 eax
  000b3	84 c9		 test	 cl, cl
  000b5	75 f9		 jne	 SHORT $LL19@LogAddHead
  000b7	2b c6		 sub	 eax, esi
  000b9	4f		 dec	 edi
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL20@LogAddHead:
  000c0	8a 4f 01	 mov	 cl, BYTE PTR [edi+1]
  000c3	47		 inc	 edi
  000c4	84 c9		 test	 cl, cl
  000c6	75 f8		 jne	 SHORT $LL20@LogAddHead
  000c8	8b c8		 mov	 ecx, eax
  000ca	c1 e9 02	 shr	 ecx, 2
  000cd	f3 a5		 rep movsd
  000cf	8b c8		 mov	 ecx, eax

; 430  : 				fprintf(logfp,"%02X,",(BYTE)data[n]&0xFF);

  000d1	8b 45 e0	 mov	 eax, DWORD PTR _data$GSCopy$1$[ebp]
  000d4	83 e1 03	 and	 ecx, 3
  000d7	f3 a4		 rep movsb
  000d9	0f b6 04 18	 movzx	 eax, BYTE PTR [eax+ebx]
  000dd	50		 push	 eax
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_05LJMBFGND@?$CF02X?0?$AA@
  000e3	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  000e9	e8 00 00 00 00	 call	 _fprintf
  000ee	8b 7d d8	 mov	 edi, DWORD PTR _szTmp$1$[ebp]
  000f1	43		 inc	 ebx
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	3b 5d dc	 cmp	 ebx, DWORD PTR _len$GSCopy$1$[ebp]
  000f8	7c 96		 jl	 SHORT $LL4@LogAddHead
$LN3@LogAddHead:

; 431  : 			}
; 432  : 
; 433  : 			LogTextAdd(2,szTmp,strlen(szTmp));

  000fa	8b cf		 mov	 ecx, edi
  000fc	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  000ff	90		 npad	 1
$LL21@LogAddHead:
  00100	8a 01		 mov	 al, BYTE PTR [ecx]
  00102	41		 inc	 ecx
  00103	84 c0		 test	 al, al
  00105	75 f9		 jne	 SHORT $LL21@LogAddHead
  00107	2b ca		 sub	 ecx, edx
  00109	51		 push	 ecx
  0010a	57		 push	 edi
  0010b	6a 02		 push	 2
  0010d	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00112	83 c4 0c	 add	 esp, 12			; 0000000cH

; 434  : 
; 435  : 			LeaveCriticalSection(&LogCritical);

  00115	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN14@LogAddHead:

; 441  : }

  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00131	33 cd		 xor	 ecx, ebp
  00133	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
__catch$?LogAddHeadHexFunc@@YAXHPADH@Z$0:

; 436  : 		}
; 437  : 	}
; 438  : 	} catch (DWORD) {
; 439  : 		
; 440  : 	}

  0013c	b8 00 00 00 00	 mov	 eax, $LN14@LogAddHead
  00141	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LogAddHeadHexFunc@@YAXHPADH@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00014	33 c8		 xor	 ecx, eax
  00016	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogAddHeadHexFunc@@YAXHPADH@Z
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogAddHeadHexFunc@@YAXHPADH@Z ENDP			; LogAddHeadHexFunc
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddHeadHexFuncVoid@@YAXPAD0H@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z PROC			; LogAddHeadHexFuncVoid, COMDAT

; 399  : 	// Log Disabled
; 400  : }

  00000	c3		 ret	 0
?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ENDP			; LogAddHeadHexFuncVoid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddTimeDateFunc@@YAXPADZZ
_TEXT	SEGMENT
_ltime$2 = -1564					; size = 8
_szBuffer$3 = -1556					; size = 1024
_tmpbuf$4 = -532					; size = 512
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_szLog$ = 8						; size = 4
?LogAddTimeDateFunc@@YAXPADZZ PROC			; LogAddTimeDateFunc, COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LogAddTimeDateFunc@@YAXPADZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 06 00
	00		 sub	 esp, 1552		; 00000610H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	68 00 04 00 00	 push	 1024			; 00000400H
  00036	8d 85 ec f9 ff
	ff		 lea	 eax, DWORD PTR _szBuffer$3[ebp]

; 349  : 	try {

  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0004b	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _ltime$2[ebp]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  00057	8d 85 e4 f9 ff
	ff		 lea	 eax, DWORD PTR _ltime$2[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 __localtime64
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 361  : 	wsprintf(tmpbuf, "[%.8s] ", asctime(today)+11 );

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _asctime
  00069	83 c0 0b	 add	 eax, 11			; 0000000bH
  0006c	50		 push	 eax
  0006d	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$4[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_07CLIJNIAP@?$FL?$CF?48s?$FN?5?$AA@
  00078	50		 push	 eax
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  0007f	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00082	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	ff 75 08	 push	 DWORD PTR _szLog$[ebp]
  0008b	8d 85 ec f9 ff
	ff		 lea	 eax, DWORD PTR _szBuffer$3[ebp]
  00091	6a ff		 push	 -1
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	ff 70 04	 push	 DWORD PTR [eax+4]
  0009e	83 c9 01	 or	 ecx, 1
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 370  : 	strcat(tmpbuf, szBuffer);

  000a7	8d 95 ec f9 ff
	ff		 lea	 edx, DWORD PTR _szBuffer$3[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  000ad	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 370  : 	strcat(tmpbuf, szBuffer);

  000b0	8b f2		 mov	 esi, edx
$LL20@LogAddTime:
  000b2	8a 02		 mov	 al, BYTE PTR [edx]
  000b4	42		 inc	 edx
  000b5	84 c0		 test	 al, al
  000b7	75 f9		 jne	 SHORT $LL20@LogAddTime
  000b9	8d bd ec fd ff
	ff		 lea	 edi, DWORD PTR _tmpbuf$4[ebp]
  000bf	2b d6		 sub	 edx, esi
  000c1	4f		 dec	 edi
$LL21@LogAddTime:
  000c2	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  000c5	47		 inc	 edi
  000c6	84 c0		 test	 al, al
  000c8	75 f8		 jne	 SHORT $LL21@LogAddTime
  000ca	8b ca		 mov	 ecx, edx
  000cc	c1 e9 02	 shr	 ecx, 2
  000cf	f3 a5		 rep movsd
  000d1	8b ca		 mov	 ecx, edx
  000d3	83 e1 03	 and	 ecx, 3
  000d6	f3 a4		 rep movsb

; 371  : 
; 372  : 	LogTextAdd(0, tmpbuf, strlen(tmpbuf));

  000d8	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR _tmpbuf$4[ebp]
  000de	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL22@LogAddTime:
  000e1	8a 01		 mov	 al, BYTE PTR [ecx]
  000e3	41		 inc	 ecx
  000e4	84 c0		 test	 al, al
  000e6	75 f9		 jne	 SHORT $LL22@LogAddTime
  000e8	2b ca		 sub	 ecx, edx
  000ea	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$4[ebp]
  000f0	51		 push	 ecx
  000f1	50		 push	 eax
  000f2	6a 00		 push	 0
  000f4	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 373  : 
; 374  : 	if (gLogOutType==0)

  000fc	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00103	74 5b		 je	 SHORT $LN6@LogAddTime

; 375  : 	{
; 376  : 		return;
; 377  : 	}
; 378  : 	else
; 379  : 	{
; 380  : 		if (logfp==0)

  00105	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?logfp@@3PAU_iobuf@@A, 0
  0010c	75 22		 jne	 SHORT $LN5@LogAddTime

; 381  : 		{
; 382  : 			LogAdd("error-L2 : file create error %s %d", __FILE__, __LINE__);

  0010e	68 7e 01 00 00	 push	 382			; 0000017eH
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CEBPAFL@LogProc?4cpp?$AA@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@PBOPMGJL@error?9L2?5?3?5file?5create?5error?5?$CFs?5@
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH

; 383  : 		}
; 384  : 		else

  00126	eb 38		 jmp	 SHORT $LN6@LogAddTime
__catch$?LogAddTimeDateFunc@@YAXPADZZ$0:

; 389  : 		}
; 390  : 	}
; 391  : 	} catch (DWORD) {
; 392  : 		
; 393  : 	}

  00128	b8 00 00 00 00	 mov	 eax, $LN11@LogAddTime
  0012d	c3		 ret	 0
$LN11@LogAddTime:
  0012e	eb 30		 jmp	 SHORT $LN6@LogAddTime
$LN5@LogAddTime:

; 385  : 		{
; 386  : 			EnterCriticalSection(&LogCritical);

  00130	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 387  : 			fprintf(logfp, "%s\n", &tmpbuf);

  0013b	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _tmpbuf$4[ebp]
  00141	50		 push	 eax
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00147	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  0014d	e8 00 00 00 00	 call	 _fprintf
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 388  : 			LeaveCriticalSection(&LogCritical);

  00155	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0015a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN6@LogAddTime:

; 394  : }

  00160	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00163	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016a	59		 pop	 ecx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LogAddTimeDateFunc@@YAXPADZZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a e0 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1568]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00017	33 c8		 xor	 ecx, eax
  00019	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogAddTimeDateFunc@@YAXPADZZ
  00023	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogAddTimeDateFunc@@YAXPADZZ ENDP			; LogAddTimeDateFunc
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddLocalFuncVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddLocalFuncVoid@@YAXPADZZ PROC			; LogAddLocalFuncVoid, COMDAT

; 343  : 
; 344  : }

  00000	c3		 ret	 0
?LogAddLocalFuncVoid@@YAXPADZZ ENDP			; LogAddLocalFuncVoid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddLocalFunc@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddLocalFunc@@YAXPADZZ PROC				; LogAddLocalFunc, COMDAT

; 315  : 	char szBuffer[512];
; 316  : 	va_list pArguments;
; 317  : 
; 318  : #if (LOCAL_LOG==1)	
; 319  : 	va_start(pArguments, szLog);
; 320  : 	vsprintf(szBuffer, szLog, pArguments);
; 321  : 	va_end(pArguments);
; 322  : 
; 323  : 	LogTextAdd(5, szBuffer, strlen(szBuffer));
; 324  : 
; 325  : 
; 326  : 	if (!gLogOutType)
; 327  : 	{
; 328  : 		return;
; 329  : 	}
; 330  : 	else
; 331  : 	{
; 332  : 		EnterCriticalSection(&LogCritical);
; 333  : 		fprintf(logfp, "[LOCAL] %s\n", szBuffer);
; 334  : 		LeaveCriticalSection(&LogCritical);
; 335  : 	}
; 336  : 
; 337  : #endif
; 338  : }

  00000	c3		 ret	 0
?LogAddLocalFunc@@YAXPADZZ ENDP				; LogAddLocalFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddFuncColor@@YAXEPADZZ
_TEXT	SEGMENT
_szBuffer$1 = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_Color$ = 8						; size = 1
_szLog$ = 12						; size = 4
?LogAddFuncColor@@YAXEPADZZ PROC			; LogAddFuncColor, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	68 00 04 00 00	 push	 1024			; 00000400H
  00018	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00029	8d 45 10	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	ff 75 0c	 push	 DWORD PTR _szLog$[ebp]
  00032	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00038	6a ff		 push	 -1
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	ff 70 04	 push	 DWORD PTR [eax+4]
  00045	83 c9 01	 or	 ecx, 1
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 295  : 	LogTextAdd(Color, szBuffer, strlen(szBuffer));

  0004e	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00054	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 295  : 	LogTextAdd(Color, szBuffer, strlen(szBuffer));

  00057	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL14@LogAddFunc:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL14@LogAddFunc
  00067	2b c2		 sub	 eax, edx
  00069	50		 push	 eax
  0006a	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00070	50		 push	 eax
  00071	ff 75 08	 push	 DWORD PTR _Color$[ebp]
  00074	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH

; 296  : 
; 297  : 	if (!gLogOutType)

  0007c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00083	74 30		 je	 SHORT $LN6@LogAddFunc

; 298  : 	{
; 299  : 		return;
; 300  : 	}
; 301  : 	else
; 302  : 	{
; 303  : 		EnterCriticalSection(&LogCritical);

  00085	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 304  : 		fprintf(logfp, "%s\n", szBuffer);

  00090	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  0009c	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  000a2	e8 00 00 00 00	 call	 _fprintf
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : 		LeaveCriticalSection(&LogCritical);

  000aa	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN6@LogAddFunc:

; 306  : 	}
; 307  : 	} catch (DWORD) {
; 308  : 		
; 309  : 	}
; 310  : }

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	33 cd		 xor	 ecx, ebp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?LogAddFuncColor@@YAXEPADZZ ENDP			; LogAddFuncColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddDebug@@YAXPADZZ
_TEXT	SEGMENT
_szBuffer$1 = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_szLog$ = 8						; size = 4
?LogAddDebug@@YAXPADZZ PROC				; LogAddDebug, COMDAT

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	68 00 02 00 00	 push	 512			; 00000200H
  00019	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  0001f	6a 00		 push	 0
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 _memset
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0002a	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  0002d	50		 push	 eax
  0002e	6a 00		 push	 0
  00030	ff 75 08	 push	 DWORD PTR _szLog$[ebp]
  00033	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00039	6a ff		 push	 -1
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	ff 70 04	 push	 DWORD PTR [eax+4]
  00046	83 c9 01	 or	 ecx, 1
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 274  : 	strcat(szBuffer, "\n");

  0004f	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR _szBuffer$1[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00055	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 274  : 	strcat(szBuffer, "\n");

  00058	4f		 dec	 edi
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@LogAddDebu:
  00060	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00063	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00066	84 c0		 test	 al, al
  00068	75 f6		 jne	 SHORT $LL12@LogAddDebu
  0006a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01EEMJAFIK@?6?$AA@
  00070	66 89 07	 mov	 WORD PTR [edi], ax

; 275  : 	OutputDebugString(szBuffer);

  00073	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00079	50		 push	 eax
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4

; 276  : 
; 277  : 	EnterCriticalSection(&LogCritical);

  00080	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 278  : 	fprintf(logfp, "%s\n", szBuffer);

  0008b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  00097	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  0009d	e8 00 00 00 00	 call	 _fprintf
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  : 	LeaveCriticalSection(&LogCritical);

  000a5	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 280  : 	} catch (DWORD) {
; 281  : 		
; 282  : 	}
; 283  : }

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	33 cd		 xor	 ecx, ebp
  000b5	5f		 pop	 edi
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
?LogAddDebug@@YAXPADZZ ENDP				; LogAddDebug
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddFunc@@YAXPADZZ
_TEXT	SEGMENT
_szBuffer$1 = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_szLog$ = 8						; size = 4
?LogAddFunc@@YAXPADZZ PROC				; LogAddFunc, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	68 00 02 00 00	 push	 512			; 00000200H
  00018	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00029	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	ff 75 08	 push	 DWORD PTR _szLog$[ebp]
  00032	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00038	6a ff		 push	 -1
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	ff 70 04	 push	 DWORD PTR [eax+4]
  00045	83 c9 01	 or	 ecx, 1
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 247  : 	LogTextAdd(0,szBuffer, strlen(szBuffer));

  0004e	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00054	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 247  : 	LogTextAdd(0,szBuffer, strlen(szBuffer));

  00057	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL14@LogAddFunc:
  00060	8a 08		 mov	 cl, BYTE PTR [eax]
  00062	40		 inc	 eax
  00063	84 c9		 test	 cl, cl
  00065	75 f9		 jne	 SHORT $LL14@LogAddFunc
  00067	2b c2		 sub	 eax, edx
  00069	50		 push	 eax
  0006a	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00070	50		 push	 eax
  00071	6a 00		 push	 0
  00073	e8 00 00 00 00	 call	 ?LogTextAdd@@YAXEPADH@Z	; LogTextAdd
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 248  : 
; 249  : 	if (gLogOutType==0)

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gLogOutType@@3HA, 0 ; gLogOutType
  00082	74 30		 je	 SHORT $LN6@LogAddFunc

; 250  : 	{
; 251  : 		return;
; 252  : 	}
; 253  : 	else
; 254  : 	{
; 255  : 		EnterCriticalSection(&LogCritical);

  00084	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 256  : 		fprintf(logfp, "%s\n", szBuffer);

  0008f	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$1[ebp]
  00095	50		 push	 eax
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
  0009b	ff 35 00 00 00
	00		 push	 DWORD PTR ?logfp@@3PAU_iobuf@@A
  000a1	e8 00 00 00 00	 call	 _fprintf
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 257  : 		LeaveCriticalSection(&LogCritical);

  000a9	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
$LN6@LogAddFunc:

; 258  : 	}
; 259  : 	} catch (DWORD) {
; 260  : 		
; 261  : 	}
; 262  : }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
?LogAddFunc@@YAXPADZZ ENDP				; LogAddFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddTimeDateVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddTimeDateVoid@@YAXPADZZ PROC			; LogAddTimeDateVoid, COMDAT

; 232  : 	// Log Disabled
; 233  : }

  00000	c3		 ret	 0
?LogAddTimeDateVoid@@YAXPADZZ ENDP			; LogAddTimeDateVoid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogAddFuncVoid@@YAXPADZZ
_TEXT	SEGMENT
_szLog$ = 8						; size = 4
?LogAddFuncVoid@@YAXPADZZ PROC				; LogAddFuncVoid, COMDAT

; 226  : 	// Nothing to Add
; 227  : }

  00000	c3		 ret	 0
?LogAddFuncVoid@@YAXPADZZ ENDP				; LogAddFuncVoid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogTextAdd@@YAXEPADH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 1
_msg$ = 12						; size = 4
_len$ = 16						; size = 4
?LogTextAdd@@YAXEPADH@Z PROC				; LogTextAdd, COMDAT

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  : 	try {
; 182  : 		if (len>LOG_TEXT_LENGTH-1)

  00003	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00006	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  0000b	53		 push	 ebx

; 183  : 		{
; 184  : 			len=LOG_TEXT_LENGTH-1;
; 185  : 		}
; 186  : 		m_cline++;

  0000c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?m_cline@@3HA ; m_cline
  00012	3b c1		 cmp	 eax, ecx
  00014	56		 push	 esi
  00015	0f 4f c1	 cmovg	 eax, ecx
  00018	43		 inc	 ebx

; 187  : 		if (m_cline>LOG_TEXT_LINE-1)

  00019	33 c9		 xor	 ecx, ecx
  0001b	89 45 10	 mov	 DWORD PTR _len$[ebp], eax
  0001e	83 fb 1d	 cmp	 ebx, 29			; 0000001dH
  00021	57		 push	 edi
  00022	0f 4f d9	 cmovg	 ebx, ecx

; 188  : 		{
; 189  : 			m_cline=0;
; 190  : 		}
; 191  : 		LogText[m_cline][0]=0;
; 192  : 		memcpy(&LogText[m_cline], msg, len);

  00025	50		 push	 eax
  00026	ff 75 0c	 push	 DWORD PTR _msg$[ebp]
  00029	89 1d 00 00 00
	00		 mov	 DWORD PTR ?m_cline@@3HA, ebx ; m_cline
  0002f	8d 3c 9b	 lea	 edi, DWORD PTR [ebx+ebx*4]
  00032	c1 e7 04	 shl	 edi, 4
  00035	8d b7 00 00 00
	00		 lea	 esi, DWORD PTR ?LogText@@3PAY0FA@DA[edi]
  0003b	88 0e		 mov	 BYTE PTR [esi], cl
  0003d	56		 push	 esi
  0003e	e8 00 00 00 00	 call	 _memcpy

; 193  : 		LogText[m_cline][1+len]=0;

  00043	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  : 		LogText[m_cline][len]=0;
; 195  : 		LogTextLength[m_cline]=len;

  00049	66 89 04 5d 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[ebx*2], ax
  00051	c6 84 07 01 00
	00 00 00	 mov	 BYTE PTR ?LogText@@3PAY0FA@DA[edi+eax+1], 0
  00059	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 196  : 		LogTextViewType[m_cline]=type;	// Phew, 

  0005d	8a 45 08	 mov	 al, BYTE PTR _type$[ebp]
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	88 83 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[ebx], al
  00068	5b		 pop	 ebx

; 197  : 
; 198  : #if (LOG_INMEDIATLY==1)
; 199  : 		RECT rect;
; 200  : 		HDC hdc = GetDC(ghWnd);
; 201  : 		GetClientRect(ghWnd, &rect);
; 202  : 		FillRect(hdc, &rect, (HBRUSH)GetStockObject(0));
; 203  : 		ReleaseDC(ghWnd, hdc);
; 204  : 
; 205  : 		if ( gCurPaintType == 0)
; 206  : 		{
; 207  : 			if ( LogTextPaint != NULL )
; 208  : 			{
; 209  : 				LogTextPaint(ghWnd);
; 210  : 			}
; 211  : 		}
; 212  : 
; 213  : 		gObjViewportPaint(ghWnd, gCurPaintPlayer);
; 214  : 		//g_ServerInfoDisplayer.Run(ghWnd);
; 215  : 		//GJNotifyMaxUserCount();
; 216  : #endif
; 217  : 	} catch (DWORD) {
; 218  : 		
; 219  : 	}
; 220  : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?LogTextAdd@@YAXEPADH@Z ENDP				; LogTextAdd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogDateChange@@YAHXZ
_TEXT	SEGMENT
_ltime$ = -264						; size = 8
_szTemp$ = -256						; size = 250
__$ArrayPad$ = -4					; size = 4
?LogDateChange@@YAHXZ PROC				; LogDateChange, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00013	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$[ebp]
  00019	56		 push	 esi
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  00020	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __localtime64
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 136  : 	today=localtime(&ltime);

  0002c	8b d0		 mov	 edx, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  0002e	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 137  : 	today->tm_year =today->tm_year+1900;

  00031	81 42 14 6c 07
	00 00		 add	 DWORD PTR [edx+20], 1900 ; 0000076cH

; 138  : 	today->tm_mon = today->tm_mon +1;

  00038	ff 42 10	 inc	 DWORD PTR [edx+16]
  0003b	8b 72 14	 mov	 esi, DWORD PTR [edx+20]
  0003e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]

; 139  : 
; 140  : 	if (today->tm_year <= LogMYear)

  00041	3b 35 00 00 00
	00		 cmp	 esi, DWORD PTR ?LogMYear@@3HA ; LogMYear
  00047	7f 24		 jg	 SHORT $LN4@LogDateCha

; 141  : 	{
; 142  : 		if (today->tm_mon <= LogMonth)

  00049	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?LogMonth@@3HA ; LogMonth
  0004f	7f 1c		 jg	 SHORT $LN4@LogDateCha

; 143  : 		{
; 144  : 			if (today->tm_mday <= LogMDay)

  00051	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00054	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?LogMDay@@3HA ; LogMDay
  0005a	7f 11		 jg	 SHORT $LN4@LogDateCha

; 145  : 			{
; 146  : 				return 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	5e		 pop	 esi

; 168  : 	return 1;
; 169  : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	33 cd		 xor	 ecx, ebp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN4@LogDateCha:

; 147  : 			}
; 148  : 		}
; 149  : 	}
; 150  : 
; 151  : 
; 152  : 	LogMYear = today->tm_year ;
; 153  : 	LogMonth = today->tm_mon ;
; 154  : 	LogMDay = today->tm_mday ;
; 155  : 
; 156  : 	wsprintf(szTemp, "%s%02d%02d%02d_%s.log", LOG_PATH_MAIN, LogMYear, LogMonth, LogMDay, &szServerName);

  0006d	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00072	89 35 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, esi ; LogMYear
  00078	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0007b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, ecx ; LogMonth
  00081	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00084	50		 push	 eax
  00085	51		 push	 ecx
  00086	56		 push	 esi
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_04JMANJFAC@Log?2?$AA@
  0008c	a3 00 00 00 00	 mov	 DWORD PTR ?LogMDay@@3HA, eax ; LogMDay
  00091	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KPDOJDPF@?$CFs?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 157  : 
; 158  : 	EnterCriticalSection(&LogCritical);

  000a6	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 159  : 	
; 160  : 	if (logfp!=0)

  000b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?logfp@@3PAU_iobuf@@A
  000b6	85 c0		 test	 eax, eax
  000b8	74 13		 je	 SHORT $LN5@LogDateCha

; 161  : 	{
; 162  : 		fclose(logfp);

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 _fclose
  000c0	83 c4 04	 add	 esp, 4

; 163  : 		logfp=0;

  000c3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?logfp@@3PAU_iobuf@@A, 0
$LN5@LogDateCha:

; 164  : 	}
; 165  : 	logfp=fopen(szTemp, "a+t");

  000cd	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_03CCGKKFHG@a?$CLt?$AA@
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _fopen
  000de	a3 00 00 00 00	 mov	 DWORD PTR ?logfp@@3PAU_iobuf@@A, eax

; 166  : 	strcpy_s(m_szLogFileName, sizeof(m_szLogFileName), szTemp);

  000e3	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000e9	50		 push	 eax
  000ea	6a 64		 push	 100			; 00000064H
  000ec	68 00 00 00 00	 push	 OFFSET ?m_szLogFileName@@3PADA
  000f1	e8 00 00 00 00	 call	 _strcpy_s
  000f6	83 c4 14	 add	 esp, 20			; 00000014H

; 167  : 	LeaveCriticalSection(&LogCritical);

  000f9	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 168  : 	return 1;
; 169  : }

  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	b8 01 00 00 00	 mov	 eax, 1
  0010c	33 cd		 xor	 ecx, ebp
  0010e	5e		 pop	 esi
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
?LogDateChange@@YAHXZ ENDP				; LogDateChange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogDataSet@@YAXXZ
_TEXT	SEGMENT
_ltime$ = -264						; size = 8
_szTemp$ = -256						; size = 250
__$ArrayPad$ = -4					; size = 4
?LogDataSet@@YAXXZ PROC					; LogDataSet, COMDAT

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00013	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  0001f	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _ltime$[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __localtime64
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp

; 108  : 	wsprintf(szTemp,"%s%02d%02d%02d_%s.log", LOG_PATH_MAIN, LogMYear, LogMonth, LogMDay,&szServerName);

  0002b	68 00 00 00 00	 push	 OFFSET ?szServerName@@3PADA ; szServerName
  00030	81 40 14 6c 07
	00 00		 add	 DWORD PTR [eax+20], 1900 ; 0000076cH
  00037	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0003a	89 15 00 00 00
	00		 mov	 DWORD PTR ?LogMYear@@3HA, edx ; LogMYear
  00040	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00043	41		 inc	 ecx
  00044	89 0d 00 00 00
	00		 mov	 DWORD PTR ?LogMonth@@3HA, ecx ; LogMonth
  0004a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	52		 push	 edx
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_04JMANJFAC@Log?2?$AA@
  00055	a3 00 00 00 00	 mov	 DWORD PTR ?LogMDay@@3HA, eax ; LogMDay
  0005a	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KPDOJDPF@?$CFs?$CF02d?$CF02d?$CF02d_?$CFs?4log?$AA@
  00065	50		 push	 eax
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 109  : 
; 110  : 	if (logfp != 0)

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?logfp@@3PAU_iobuf@@A
  00071	83 c4 24	 add	 esp, 36			; 00000024H
  00074	85 c0		 test	 eax, eax
  00076	74 13		 je	 SHORT $LN2@LogDataSet

; 111  : 	{
; 112  : 		fclose(logfp);

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _fclose
  0007e	83 c4 04	 add	 esp, 4

; 113  : 		logfp=0;

  00081	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?logfp@@3PAU_iobuf@@A, 0
$LN2@LogDataSet:

; 114  : 	}
; 115  : 
; 116  : 	logfp=fopen(szTemp,"a+t");

  0008b	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_03CCGKKFHG@a?$CLt?$AA@
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 _fopen
  0009c	83 c4 08	 add	 esp, 8
  0009f	a3 00 00 00 00	 mov	 DWORD PTR ?logfp@@3PAU_iobuf@@A, eax

; 117  : 	if (logfp==0)

  000a4	85 c0		 test	 eax, eax
  000a6	75 0e		 jne	 SHORT $LN3@LogDataSet

; 118  : 	{
; 119  : 		LogAdd("Log file create error");

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LMFAEONB@Log?5file?5create?5error?$AA@
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000b3	83 c4 04	 add	 esp, 4
$LN3@LogDataSet:

; 120  : 	}
; 121  : 	strcpy_s(m_szLogFileName, sizeof(m_szLogFileName), szTemp);

  000b6	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  000bc	50		 push	 eax
  000bd	6a 64		 push	 100			; 00000064H
  000bf	68 00 00 00 00	 push	 OFFSET ?m_szLogFileName@@3PADA
  000c4	e8 00 00 00 00	 call	 _strcpy_s

; 122  : }

  000c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	33 cd		 xor	 ecx, ebp
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?LogDataSet@@YAXXZ ENDP					; LogDataSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?LogInit@@YAXH@Z
_TEXT	SEGMENT
_logprint$ = 8						; size = 4
?LogInit@@YAXH@Z PROC					; LogInit, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 48   : 	int n;
; 49   : 	InitializeCriticalSection(&LogCritical);

  00003	68 00 00 00 00	 push	 OFFSET ?LogCritical@@3U_RTL_CRITICAL_SECTION@@A ; LogCritical
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 50   : 
; 51   : 	// Create yes no Log
; 52   : 	if (logprint!=0)		

  0000e	83 7d 08 00	 cmp	 DWORD PTR _logprint$[ebp], 0
  00012	0f 84 92 00 00
	00		 je	 $LN5@LogInit

; 53   : 	{
; 54   : 
; 55   : 		LogAdd=LogAddFunc;
; 56   : 		LogAddC=LogAddFuncColor;
; 57   : 		LogAddTD=LogAddTimeDateFunc;
; 58   : 		LogAddHeadHex=LogAddStrHexFunc;
; 59   : 		LogTextPaint=LogTextPaintProc;
; 60   : 		LogAddL=LogAddLocalFunc;
; 61   : 
; 62   : 		for (n=0;n<LOG_TEXT_LINE;n++)

  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	33 f6		 xor	 esi, esi
  0001d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFunc@@YAXPADZZ ; LogAdd, LogAddFunc
  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddC@@3P6AXEPADZZA, OFFSET ?LogAddFuncColor@@YAXEPADZZ ; LogAddC, LogAddFuncColor
  00031	bf 00 00 00 00	 mov	 edi, OFFSET ?LogText@@3PAY0FA@DA ; LogText
  00036	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateFunc@@YAXPADZZ ; LogAddTD, LogAddTimeDateFunc
  00040	33 db		 xor	 ebx, ebx
  00042	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddStrHexFunc@@YAXPAD0H@Z ; LogAddHeadHex, LogAddStrHexFunc
  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProc@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProc
  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFunc@@YAXPADZZ ; LogAddL, LogAddLocalFunc
$LL4@LogInit:

; 63   : 		{
; 64   : 			memset(&LogText[n],0, sizeof(LogText[0]));

  00060	6a 50		 push	 80			; 00000050H
  00062	6a 00		 push	 0
  00064	57		 push	 edi
  00065	e8 00 00 00 00	 call	 _memset
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 65   : 			LogTextLength[n]=0;

  0006d	83 fe 1e	 cmp	 esi, 30			; 0000001eH
  00070	73 6c		 jae	 SHORT $LN20@LogInit
  00072	33 c0		 xor	 eax, eax
  00074	66 89 04 75 00
	00 00 00	 mov	 WORD PTR ?LogTextLength@@3PAFA[esi*2], ax

; 66   : 			LogTextViewType[n]=0;

  0007c	81 fb 60 09 00
	00		 cmp	 ebx, 2400		; 00000960H
  00082	73 5a		 jae	 SHORT $LN20@LogInit
  00084	88 86 00 00 00
	00		 mov	 BYTE PTR ?LogTextViewType@@3PAEA[esi], al
  0008a	83 c7 50	 add	 edi, 80			; 00000050H
  0008d	46		 inc	 esi
  0008e	83 c3 50	 add	 ebx, 80			; 00000050H
  00091	81 ff 60 09 00
	00		 cmp	 edi, OFFSET ?LogText@@3PAY0FA@DA+2400
  00097	7c c7		 jl	 SHORT $LL4@LogInit

; 67   : 		}
; 68   : 		if (gLogOutType==0)

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gLogOutType@@3HA, eax ; gLogOutType
  000a2	74 38		 je	 SHORT $LN6@LogInit

; 85   : 		
; 86   : 	}
; 87   : }

  000a4	5d		 pop	 ebp

; 69   : 		{
; 70   : 			return;
; 71   : 		}
; 72   : 		else
; 73   : 		{
; 74   : 			LogDataSet();

  000a5	e9 00 00 00 00	 jmp	 ?LogDataSet@@YAXXZ	; LogDataSet
$LN5@LogInit:

; 75   : 		}
; 76   : 	}
; 77   : 	else
; 78   : 	{
; 79   : 
; 80   : 		LogAdd=LogAddFuncVoid;

  000aa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAdd@@3P6AXPADZZA, OFFSET ?LogAddFuncVoid@@YAXPADZZ ; LogAdd, LogAddFuncVoid

; 81   : 		LogAddHeadHex=LogAddHeadHexFuncVoid;

  000b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddHeadHex@@3P6AXPAD0H@ZA, OFFSET ?LogAddHeadHexFuncVoid@@YAXPAD0H@Z ; LogAddHeadHex, LogAddHeadHexFuncVoid

; 82   : 		LogTextPaint=LogTextPaintProcVoid;

  000be	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogTextPaint@@3P6AXPAUHWND__@@@ZA, OFFSET ?LogTextPaintProcVoid@@YAXPAUHWND__@@@Z ; LogTextPaint, LogTextPaintProcVoid

; 83   : 		LogAddTD=LogAddTimeDateVoid;

  000c8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddTD@@3P6AXPADZZA, OFFSET ?LogAddTimeDateVoid@@YAXPADZZ ; LogAddTD, LogAddTimeDateVoid

; 84   : 		LogAddL=LogAddLocalFuncVoid;

  000d2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?LogAddL@@3P6AXPADZZA, OFFSET ?LogAddLocalFuncVoid@@YAXPADZZ ; LogAddL, LogAddLocalFuncVoid
$LN6@LogInit:

; 85   : 		
; 86   : 	}
; 87   : }

  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
$LN20@LogInit:

; 66   : 			LogTextViewType[n]=0;

  000de	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN21@LogInit:
$LN19@LogInit:
  000e3	cc		 int	 3
?LogInit@@YAXH@Z ENDP					; LogInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT

; 508  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  :             #pragma warning(pop)
; 513  :         }

  00003	5d		 pop	 ebp

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

  00004	e9 00 00 00 00	 jmp	 __localtime64
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000b	6a ff		 push	 -1
  0000d	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 01	 or	 ecx, 1
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1474 :     #pragma warning(push)
; 1475 :     #pragma warning(disable: 4996) // Deprecation
; 1476 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);
; 1477 :     #pragma warning(pop)
; 1478 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 832  :     int _Result;
; 833  :     va_list _ArgList;
; 834  :     __crt_va_start(_ArgList, _Format);
; 835  :     _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 836  :     __crt_va_end(_ArgList);
; 837  :     return _Result;
; 838  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\logproc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
