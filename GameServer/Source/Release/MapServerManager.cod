; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MapServerManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0_MAPSVR_DATA@@QAE@XZ				; _MAPSVR_DATA::_MAPSVR_DATA
PUBLIC	??1_MAPSVR_DATA@@UAE@XZ				; _MAPSVR_DATA::~_MAPSVR_DATA
PUBLIC	?Clear@_MAPSVR_DATA@@QAEXH@Z			; _MAPSVR_DATA::Clear
PUBLIC	??_G_MAPSVR_DATA@@UAEPAXI@Z			; _MAPSVR_DATA::`scalar deleting destructor'
PUBLIC	??0CMapServerManager@@QAE@XZ			; CMapServerManager::CMapServerManager
PUBLIC	??1CMapServerManager@@UAE@XZ			; CMapServerManager::~CMapServerManager
PUBLIC	?Clear@CMapServerManager@@QAEXXZ		; CMapServerManager::Clear
PUBLIC	?LoadData@CMapServerManager@@QAEHPAD@Z		; CMapServerManager::LoadData
PUBLIC	?CheckMapCanMove@CMapServerManager@@QAEHH@Z	; CMapServerManager::CheckMapCanMove
PUBLIC	?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z	; CMapServerManager::CheckMoveMapSvr
PUBLIC	?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z ; CMapServerManager::GetSvrCodeData
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate
PUBLIC	??_GCMapServerManager@@UAEPAXI@Z		; CMapServerManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--
PUBLIC	?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z ; std::allocator<_MAPSVR_DATA *>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate
PUBLIC	??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >
PUBLIC	?push_back@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXABQAU_MAPSVR_DATA@@@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::push_back
PUBLIC	?_Reallocate@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reserve
PUBLIC	??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode<std::pair<int,_MAPSVR_DATA *> >
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_nohint<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_at<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7_MAPSVR_DATA@@6B@				; _MAPSVR_DATA::`vftable'
PUBLIC	??_7CMapServerManager@@6B@			; CMapServerManager::`vftable'
PUBLIC	?g_MapServerManager@@3VCMapServerManager@@A	; g_MapServerManager
PUBLIC	??_C@_0CF@ILOFHFHM@?$FLMapServerManager?$FN?5Loading?5fail?5@ ; `string'
PUBLIC	??_C@_09MEMOBGDB@mapserver?$AA@			; `string'
PUBLIC	??_C@_0L@OIHAEBCH@serverlist?$AA@		; `string'
PUBLIC	??_C@_08GNJIAMHD@movelist?$AA@			; `string'
PUBLIC	??_C@_06HJHJCKIO@server?$AA@			; `string'
PUBLIC	??_C@_0L@FPLBPMP@servercode?$AA@		; `string'
PUBLIC	??_C@_05MGJOOGAJ@group?$AA@			; `string'
PUBLIC	??_C@_04HKFDNBLD@init?$AA@			; `string'
PUBLIC	??_C@_04LPGMAPLE@port?$AA@			; `string'
PUBLIC	??_C@_0FM@FPCKBNHE@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GE@MEENNMEP@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GB@OFMELGHA@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GD@GJEAEGDB@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_02GIIHKPLE@ip?$AA@			; `string'
PUBLIC	??_C@_04HDMMNHEL@move?$AA@			; `string'
PUBLIC	??_C@_09EBALFLAB@movestate?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_0P@FJOBMGMB@destservercode?$AA@		; `string'
PUBLIC	??_C@_0FM@HEAHEOLH@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GP@JAAIOOFD@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GG@ONBCFDCN@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0FP@BNNDCEBC@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GL@LAJNEJB@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0HB@PMNAKCMJ@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0HJ@HNGNAGOE@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0GN@OFPCNONA@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0IC@BIPGFAJD@?$FLMapServerMng?$FN?5CMapServerManager@ ; `string'
PUBLIC	??_C@_0EJ@EFCOMEEG@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0EM@BGAAFCHD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0FC@MPBANOIK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0GK@EEMBMNOK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0FE@HMFMELGB@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4_MAPSVR_DATA@@6B@				; _MAPSVR_DATA::`RTTI Complete Object Locator'
PUBLIC	??_R0?AU_MAPSVR_DATA@@@8			; _MAPSVR_DATA `RTTI Type Descriptor'
PUBLIC	??_R3_MAPSVR_DATA@@8				; _MAPSVR_DATA::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_MAPSVR_DATA@@8				; _MAPSVR_DATA::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_MAPSVR_DATA@@8			; _MAPSVR_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CMapServerManager@@6B@			; CMapServerManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMapServerManager@@@8			; CMapServerManager `RTTI Type Descriptor'
PUBLIC	??_R3CMapServerManager@@8			; CMapServerManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMapServerManager@@8			; CMapServerManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMapServerManager@@8		; CMapServerManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	__time64:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?MapNumberCheck@@YAHH@Z:PROC			; MapNumberCheck
EXTRN	??_E_MAPSVR_DATA@@UAEPAXI@Z:PROC		; _MAPSVR_DATA::`vector deleting destructor'
EXTRN	??_ECMapServerManager@@UAEPAXI@Z:PROC		; CMapServerManager::`vector deleting destructor'
EXTRN	?as_string@xml_attribute@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_attribute::as_string
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??0xml_node@pugi@@QAE@XZ:PROC			; pugi::xml_node::xml_node
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_MapServerManager@@3VCMapServerManager@@A DB 016afcH DUP (?) ; g_MapServerManager
_BSS	ENDS
CRT$XCU	SEGMENT
?g_MapServerManager$initializer$@@3P6AXXZA DD FLAT:??__Eg_MapServerManager@@YAXXZ ; g_MapServerManager$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMapServerManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMapServerManager@@8 DD FLAT:??_R0?AVCMapServerManager@@@8 ; CMapServerManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMapServerManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CMapServerManager@@8
rdata$r	SEGMENT
??_R2CMapServerManager@@8 DD FLAT:??_R1A@?0A@EA@CMapServerManager@@8 ; CMapServerManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMapServerManager@@8
rdata$r	SEGMENT
??_R3CMapServerManager@@8 DD 00H			; CMapServerManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMapServerManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMapServerManager@@@8
data$r	SEGMENT
??_R0?AVCMapServerManager@@@8 DD FLAT:??_7type_info@@6B@ ; CMapServerManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMapServerManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMapServerManager@@6B@
rdata$r	SEGMENT
??_R4CMapServerManager@@6B@ DD 00H			; CMapServerManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMapServerManager@@@8
	DD	FLAT:??_R3CMapServerManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_MAPSVR_DATA@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_MAPSVR_DATA@@8 DD FLAT:??_R0?AU_MAPSVR_DATA@@@8 ; _MAPSVR_DATA::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_MAPSVR_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R2_MAPSVR_DATA@@8
rdata$r	SEGMENT
??_R2_MAPSVR_DATA@@8 DD FLAT:??_R1A@?0A@EA@_MAPSVR_DATA@@8 ; _MAPSVR_DATA::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_MAPSVR_DATA@@8
rdata$r	SEGMENT
??_R3_MAPSVR_DATA@@8 DD 00H				; _MAPSVR_DATA::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_MAPSVR_DATA@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_MAPSVR_DATA@@@8
data$r	SEGMENT
??_R0?AU_MAPSVR_DATA@@@8 DD FLAT:??_7type_info@@6B@	; _MAPSVR_DATA `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_MAPSVR_DATA@@', 00H
data$r	ENDS
;	COMDAT ??_R4_MAPSVR_DATA@@6B@
rdata$r	SEGMENT
??_R4_MAPSVR_DATA@@6B@ DD 00H				; _MAPSVR_DATA::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU_MAPSVR_DATA@@@8
	DD	FLAT:??_R3_MAPSVR_DATA@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@HMFMELGB@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0FE@HMFMELGB@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - Unknown MapMove Info [%s][%s]'
	DB	' : MAP-%d / INFO-%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@EEMBMNOK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0GK@EEMBMNOK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] :'
	DB	' MAP-%d / SVR-%d (State Map:%d X:%d Y:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] :'
	DB	' MAP-%d / SVR-%d(State Map:%d X:%d Y:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@MPBANOIK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0FC@MPBANOIK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - lpMapSvrData->m_bIN_USE == FA'
	DB	'LSE [%s][%s] : %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@BGAAFCHD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0EM@BGAAFCHD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - m_lpThisMapSvrData == NULL [%'
	DB	's][%s] : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@EFCOMEEG@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
CONST	SEGMENT
??_C@_0EJ@EFCOMEEG@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@ DB '[Ma'
	DB	'pServerMng] CheckMoveMapSvr() - Map Index doesn''t exist [%s]'
	DB	'[%s] : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IC@BIPGFAJD@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0IC@BIPGFAJD@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : This '
	DB	'GameServerCode (%d) doesn''t Exist at file ''%s'' != sSVR_COD'
	DB	'E', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GN@OFPCNONA@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GN@OFPCNONA@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : Map N'
	DB	'umber is out of bound (SVR:%d, MAP:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HJ@HNGNAGOE@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0HJ@HNGNAGOE@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : lpMap'
	DB	'SvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d, OPT:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@PMNAKCMJ@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0HB@PMNAKCMJ@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : lpMap'
	DB	'SvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@LAJNEJB@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GL@LAJNEJB@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServer'
	DB	'Mng] CMapServerManager::LoadData() - file load error : lpMapS'
	DB	'vrData->m_bIN_USE == FALSE (SVR:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FP@BNNDCEBC@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0FP@BNNDCEBC@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : lpMap'
	DB	'SvrData == NULL (SVR:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@ONBCFDCN@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GG@ONBCFDCN@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : sSVR_'
	DB	'CODE wasn''t registered (SVR:%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GP@JAAIOOFD@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GP@JAAIOOFD@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : sDEST'
	DB	'_SVR_CODE < -1 (SVR:%d, DEST_SVR:%d) - 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@HEAHEOLH@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0FM@HEAHEOLH@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : sSVR_'
	DB	'CODE < 0 (SVR:%d) - 2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FJOBMGMB@destservercode?$AA@
CONST	SEGMENT
??_C@_0P@FJOBMGMB@destservercode?$AA@ DB 'destservercode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBALFLAB@movestate?$AA@
CONST	SEGMENT
??_C@_09EBALFLAB@movestate?$AA@ DB 'movestate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDMMNHEL@move?$AA@
CONST	SEGMENT
??_C@_04HDMMNHEL@move?$AA@ DB 'move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIIHKPLE@ip?$AA@
CONST	SEGMENT
??_C@_02GIIHKPLE@ip?$AA@ DB 'ip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@GJEAEGDB@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GD@GJEAEGDB@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : No Sp'
	DB	'ace to Save SvrInfo (SVR:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@OFMELGHA@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GB@OFMELGHA@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : Map S'
	DB	'erver Group Index (IDX:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GE@MEENNMEP@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0GE@MEENNMEP@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : iInit'
	DB	'Setting Value:%d (SVR:%d) - 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@FPCKBNHE@?$FLMapServerMng?$FN?5CMapServerManager@
CONST	SEGMENT
??_C@_0FM@FPCKBNHE@?$FLMapServerMng?$FN?5CMapServerManager@ DB '[MapServe'
	DB	'rMng] CMapServerManager::LoadData() - file load error : sSVR_'
	DB	'CODE < 0 (SVR:%d) - 1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGMAPLE@port?$AA@
CONST	SEGMENT
??_C@_04LPGMAPLE@port?$AA@ DB 'port', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HKFDNBLD@init?$AA@
CONST	SEGMENT
??_C@_04HKFDNBLD@init?$AA@ DB 'init', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MGJOOGAJ@group?$AA@
CONST	SEGMENT
??_C@_05MGJOOGAJ@group?$AA@ DB 'group', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPLBPMP@servercode?$AA@
CONST	SEGMENT
??_C@_0L@FPLBPMP@servercode?$AA@ DB 'servercode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJHJCKIO@server?$AA@
CONST	SEGMENT
??_C@_06HJHJCKIO@server?$AA@ DB 'server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNJIAMHD@movelist?$AA@
CONST	SEGMENT
??_C@_08GNJIAMHD@movelist?$AA@ DB 'movelist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIHAEBCH@serverlist?$AA@
CONST	SEGMENT
??_C@_0L@OIHAEBCH@serverlist?$AA@ DB 'serverlist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MEMOBGDB@mapserver?$AA@
CONST	SEGMENT
??_C@_09MEMOBGDB@mapserver?$AA@ DB 'mapserver', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@ILOFHFHM@?$FLMapServerManager?$FN?5Loading?5fail?5@
CONST	SEGMENT
??_C@_0CF@ILOFHFHM@?$FLMapServerManager?$FN?5Loading?5fail?5@ DB '[MapSer'
	DB	'verManager] Loading fail [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CMapServerManager@@6B@
CONST	SEGMENT
??_7CMapServerManager@@6B@ DD FLAT:??_R4CMapServerManager@@6B@ ; CMapServerManager::`vftable'
	DD	FLAT:??_ECMapServerManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7_MAPSVR_DATA@@6B@
CONST	SEGMENT
??_7_MAPSVR_DATA@@6B@ DD FLAT:??_R4_MAPSVR_DATA@@6B@	; _MAPSVR_DATA::`vftable'
	DD	FLAT:??_E_MAPSVR_DATA@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z$58 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z$58
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z$0
__ehfuncinfo$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadData@CMapServerManager@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadData@CMapServerManager@@QAEHPAD@Z$0
__ehfuncinfo$?LoadData@CMapServerManager@@QAEHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadData@CMapServerManager@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clear@CMapServerManager@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clear@CMapServerManager@@QAEXXZ$0
__ehfuncinfo$?Clear@CMapServerManager@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clear@CMapServerManager@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CMapServerManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMapServerManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMapServerManager@@QAE@XZ$0
__ehfuncinfo$??0CMapServerManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CMapServerManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PAU_MAPSVR_DATA@@@std@@YA$$QAPAU_MAPSVR_DATA@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_MAPSVR_DATA@@@std@@YA$$QAPAU_MAPSVR_DATA@@AAPAU1@@Z PROC ; std::forward<_MAPSVR_DATA *>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAU_MAPSVR_DATA@@@std@@YA$$QAPAU_MAPSVR_DATA@@AAPAU1@@Z ENDP ; std::forward<_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_MAPSVR_DATA@@PAU1@PAU1@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_MAPSVR_DATA@@PAU1@PAU1@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_MAPSVR_DATA *,_MAPSVR_DATA *,_MAPSVR_DATA *>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAU_MAPSVR_DATA@@PAU1@PAU1@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_MAPSVR_DATA *,_MAPSVR_DATA *,_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z PROC ; std::_Val_type<_MAPSVR_DATA * *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z ENDP ; std::_Val_type<_MAPSVR_DATA * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode_if_nil<std::pair<int const ,_MAPSVR_DATA *> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1658 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode_if_nil<std::pair<int const ,_MAPSVR_DATA *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> ><std::pair<int const ,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> ><std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > ><std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > ><std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAU_MAPSVR_DATA@@PAPAU1@@std@@YAAAPAPAU_MAPSVR_DATA@@AAPAPAU1@PAPAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAU_MAPSVR_DATA@@PAPAU1@@std@@YAAAPAPAU_MAPSVR_DATA@@AAPAPAU1@PAPAU1@@Z PROC ; std::_Rechecked<_MAPSVR_DATA * *,_MAPSVR_DATA * *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAU_MAPSVR_DATA@@PAPAU1@@std@@YAAAPAPAU_MAPSVR_DATA@@AAPAPAU1@PAPAU1@@Z ENDP ; std::_Rechecked<_MAPSVR_DATA * *,_MAPSVR_DATA * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z PROC ; std::_Uninit_move<_MAPSVR_DATA * *,_MAPSVR_DATA * *,std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z ENDP ; std::_Uninit_move<_MAPSVR_DATA * *,_MAPSVR_DATA * *,std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z PROC ; std::_Unchecked<_MAPSVR_DATA * *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAU_MAPSVR_DATA@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@@Z ENDP ; std::_Unchecked<_MAPSVR_DATA * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::destroy<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::destroy<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z PROC ; std::allocator<_MAPSVR_DATA *>::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z ENDP ; std::allocator<_MAPSVR_DATA *>::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z PROC ; std::allocator<_MAPSVR_DATA *>::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z ENDP ; std::allocator<_MAPSVR_DATA *>::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_at<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d a9 aa aa 0a	 cmp	 eax, 178956969		; 0aaaaaa9H
  00010	0f 83 6e 01 00
	00		 jae	 $LN730@Insert_at

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00023	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 0e		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  00029	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  0002e	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00035	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003b	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0003f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00041	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00043	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00045	89 19		 mov	 DWORD PTR [ecx], ebx

; 1878 : 			}
; 1879 : 		else

  00047	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  00049	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004c	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  0004e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00051	75 03		 jne	 SHORT $LN11@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  00053	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	8b f3		 mov	 esi, ebx
  0005b	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0005f	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00071	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  00074	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00078	74 71		 je	 SHORT $LN729@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007d	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  0007f	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00096	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 03		 jne	 SHORT $LN376@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN376@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000bb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000be	75 0b		 jne	 SHORT $LN377@Insert_at

; 2148 : 			_Root() = _Pnode;

  000c0	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000c3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000c6	e9 94 00 00 00	 jmp	 $LN728@Insert_at
$LN377@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	75 0b		 jne	 SHORT $LN379@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000d3	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000d6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000d9	e9 81 00 00 00	 jmp	 $LN728@Insert_at
$LN379@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000de	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000e0	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000e3	eb 7a		 jmp	 SHORT $LN728@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000e9	75 1a		 jne	 SHORT $LN17@Insert_at
$LN729@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000eb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  000ef	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000fd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00100	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00103	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00105	3b 30		 cmp	 esi, DWORD PTR [eax]
  00107	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  00109	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0010b	8b cf		 mov	 ecx, edi
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00124	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00132	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00134	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00138	75 03		 jne	 SHORT $LN575@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN575@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0013d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00140	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00143	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00145	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00148	75 05		 jne	 SHORT $LN576@Insert_at

; 2118 : 			_Root() = _Pnode;

  0014a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0014d	eb 0e		 jmp	 SHORT $LN579@Insert_at
$LN576@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0014f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	75 04		 jne	 SHORT $LN578@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00156	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  00158	eb 03		 jmp	 SHORT $LN579@Insert_at
$LN578@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0015a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN579@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0015d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN728@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0015f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00169	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00176	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  0017a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx
  0017f	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  00180	5d		 pop	 ebp
  00181	c2 14 00	 ret	 20			; 00000014H
$LN730@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00184	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00187	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1859 : 			_Xlength_error("map/set<T> too long");

  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00194	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN732@Insert_at:
$LN727@Insert_at:
  00199	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_at<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z PROC ; std::forward<std::pair<int const ,_MAPSVR_DATA *> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int const ,_MAPSVR_DATA *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@U?$pair@HPAU_MAPSVR_DATA@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::pair<int const ,_MAPSVR_DATA *>,std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1><std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1><std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z PROC ; std::forward<std::less<int> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z ENDP ; std::forward<std::less<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >, COMDAT

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAU_MAPSVR_DATA@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU_MAPSVR_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAU_MAPSVR_DATA@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU_MAPSVR_DATA@@0@Z PROC ; std::_Ptr_cat<_MAPSVR_DATA *,_MAPSVR_DATA *>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAU_MAPSVR_DATA@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU_MAPSVR_DATA@@0@Z ENDP ; std::_Ptr_cat<_MAPSVR_DATA *,_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_MAPSVR_DATA * *,_MAPSVR_DATA * *,std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAU_MAPSVR_DATA@@PAPAU1@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAPAPAU_MAPSVR_DATA@@PAPAU1@00AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_MAPSVR_DATA * *,_MAPSVR_DATA * *,std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@1@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@YAABV?$allocator@PAU_MAPSVR_DATA@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@YAABV?$allocator@PAU_MAPSVR_DATA@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_MAPSVR_DATA *> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@YAABV?$allocator@PAU_MAPSVR_DATA@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_MAPSVR_DATA *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@ABQAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@ABQAU3@@Z PROC ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@ABQAU3@@Z ENDP ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAU_MAPSVR_DATA@@@std@@YAABQAU_MAPSVR_DATA@@ABQAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU_MAPSVR_DATA@@@std@@YAABQAU_MAPSVR_DATA@@ABQAU1@@Z PROC ; std::forward<_MAPSVR_DATA * const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAU_MAPSVR_DATA@@@std@@YAABQAU_MAPSVR_DATA@@ABQAU1@@Z ENDP ; std::forward<_MAPSVR_DATA * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@AAPAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@AAPAU3@@Z PROC ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAXAAV?$allocator@PAU_MAPSVR_DATA@@@1@PAPAU_MAPSVR_DATA@@AAPAU3@@Z ENDP ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_MAPSVR_DATA * const>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_MAPSVR_DATA * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv735 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_nohint<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b2 01		 mov	 dl, 1
  00034	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00037	8b f9		 mov	 edi, ecx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00040	89 4d e4	 mov	 DWORD PTR tv735[ebp], ecx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00046	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 30		 jne	 SHORT $LN3@Insert_noh
  0004f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00051	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
$LL2@Insert_noh:

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  00054	8b f8		 mov	 edi, eax

; 1808 : 			if (_Leftish)

  00056	84 f6		 test	 dh, dh
  00058	74 08		 je	 SHORT $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0005a	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  0005d	0f 9d c2	 setge	 dl

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  00060	eb 06		 jmp	 SHORT $LN336@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	0f 9c c2	 setl	 dl
$LN336@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00068	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  0006b	84 d2		 test	 dl, dl
  0006d	74 04		 je	 SHORT $LN16@Insert_noh
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00073	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	74 d8		 je	 SHORT $LL2@Insert_noh
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv735[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  0007f	8b f7		 mov	 esi, edi
  00081	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  00084	84 d2		 test	 dl, dl
  00086	74 41		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00088	3b 39		 cmp	 edi, DWORD PTR [ecx]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  0008a	75 32		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	6a 01		 push	 1
$LN337@Insert_noh:
  00093	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_at<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000a6	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000be	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000c1	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--
  000c6	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000c9	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cc	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000cf	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000d1	7d 1b		 jge	 SHORT $LN13@Insert_noh

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000d3	53		 push	 ebx
  000d4	57		 push	 edi
  000d5	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d8	eb b9		 jmp	 SHORT $LN337@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000da	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1847 : 		_RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN338@Insert_noh:
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000ee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000f6	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f9	89 30		 mov	 DWORD PTR [eax], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 10 00	 ret	 16			; 00000010H
$LN335@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_nohint<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode<std::pair<int,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode0
  00009	8b d0		 mov	 edx, eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000b	8d 72 10	 lea	 esi, DWORD PTR [edx+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000e	66 c7 42 0c 00
	00		 mov	 WORD PTR [edx+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00014	85 f6		 test	 esi, esi
  00016	74 0f		 je	 SHORT $LN50@Buynode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00018	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 0e		 mov	 DWORD PTR [esi], ecx

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0001f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00022	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 902  : 		return (_Pnode);

  00025	8b c2		 mov	 eax, edx
$LN50@Buynode:
  00027	5e		 pop	 esi

; 903  : 		}

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode<std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@HPAU_MAPSVR_DATA@@@std@@@std@@YA$$QAU?$pair@HPAU_MAPSVR_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HPAU_MAPSVR_DATA@@@std@@@std@@YA$$QAU?$pair@HPAU_MAPSVR_DATA@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_MAPSVR_DATA *> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HPAU_MAPSVR_DATA@@@std@@@std@@YA$$QAU?$pair@HPAU_MAPSVR_DATA@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU_MAPSVR_DATA@@@std@@YAAAPAU_MAPSVR_DATA@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU_MAPSVR_DATA@@@std@@YAAAPAU_MAPSVR_DATA@@AAPAU1@@Z PROC ; std::forward<_MAPSVR_DATA * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU_MAPSVR_DATA@@@std@@YAAAPAU_MAPSVR_DATA@@AAPAU1@@Z ENDP ; std::forward<_MAPSVR_DATA * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAF@std@@YAAAFAAF@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAF@std@@YAAAFAAF@Z PROC			; std::forward<short &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAF@std@@YAAAFAAF@Z ENDP			; std::forward<short &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHPAU_MAPSVR_DATA@@@?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHPAU_MAPSVR_DATA@@@?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0>::_Kfn<int const ,_MAPSVR_DATA *>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHPAU_MAPSVR_DATA@@@?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0>::_Kfn<int const ,_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@YAXPAPAU_MAPSVR_DATA@@0AAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAU_MAPSVR_DATA@@@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEPAPAU_MAPSVR_DATA@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAU_MAPSVR_DATA@@@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEPAPAU_MAPSVR_DATA@@PAPAU2@00@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Umove<_MAPSVR_DATA * *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAU_MAPSVR_DATA@@@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEPAPAU_MAPSVR_DATA@@PAPAU2@00@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Umove<_MAPSVR_DATA * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lbound<int>, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN72@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL2@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN4@Lbound

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Lbound:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL2@Lbound
$LN72@Lbound:

; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2101 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lbound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::destroy<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAU_MAPSVR_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAU_MAPSVR_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1><std::allocator<_MAPSVR_DATA *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAU_MAPSVR_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1><std::allocator<_MAPSVR_DATA *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@YAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@SAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@SAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<int const ,_MAPSVR_DATA *> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@SAPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<int const ,_MAPSVR_DATA *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU_MAPSVR_DATA@@ABQAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@ABQAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU_MAPSVR_DATA@@AAPAU1@@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@AAPAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::construct<_MAPSVR_DATA *,_MAPSVR_DATA * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@@Z PROC ; std::addressof<_MAPSVR_DATA * const>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@QAU_MAPSVR_DATA@@@std@@YAPBQAU_MAPSVR_DATA@@ABQAU1@@Z ENDP ; std::addressof<_MAPSVR_DATA * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_MapServerManager@@YAXXZ
text$yd	SEGMENT
??__Fg_MapServerManager@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MapServerManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  00005	e9 00 00 00 00	 jmp	 ??1CMapServerManager@@UAE@XZ ; CMapServerManager::~CMapServerManager
??__Fg_MapServerManager@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MapServerManager''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ??__Eg_MapServerManager@@YAXXZ
text$di	SEGMENT
??__Eg_MapServerManager@@YAXXZ PROC			; `dynamic initializer for 'g_MapServerManager'', COMDAT

; 801  : CMapServerManager g_MapServerManager;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapServerManager@@3VCMapServerManager@@A ; g_MapServerManager
  00005	e8 00 00 00 00	 call	 ??0CMapServerManager@@QAE@XZ ; CMapServerManager::CMapServerManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MapServerManager@@YAXXZ ; `dynamic atexit destructor for 'g_MapServerManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MapServerManager@@YAXXZ ENDP			; `dynamic initializer for 'g_MapServerManager''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXPAPAU_MAPSVR_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXPAPAU_MAPSVR_DATA@@0@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXPAPAU_MAPSVR_DATA@@0@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0000b	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z ; std::allocator<_MAPSVR_DATA *>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00014	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00017	2b d6		 sub	 edx, esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00019	83 e2 fc	 and	 edx, -4			; fffffffcH
  0001c	52		 push	 edx
  0001d	56		 push	 esi
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002c	2b f1		 sub	 esi, ecx
  0002e	c1 fe 02	 sar	 esi, 2

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	2b c1		 sub	 eax, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0004c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004f	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00055	89 1f		 mov	 DWORD PTR [edi], ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1642 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Reallocate@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBE_NPBQAU_MAPSVR_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBE_NPBQAU_MAPSVR_DATA@@@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBE_NPBQAU_MAPSVR_DATA@@@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXPAPAU_MAPSVR_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXPAPAU_MAPSVR_DATA@@0@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXPAPAU_MAPSVR_DATA@@0@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXABQAU_MAPSVR_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXABQAU_MAPSVR_DATA@@@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN205@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@IAEXI@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN205@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXABQAU_MAPSVR_DATA@@@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEAAPAU_MAPSVR_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEAAPAU_MAPSVR_DATA@@I@Z PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEAAPAU_MAPSVR_DATA@@I@Z ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBE_NXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >,std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >::_Vector_val<std::_Simple_types<_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABQAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAPAPAU_MAPSVR_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >::_Vector_alloc<std::_Vec_base_types<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z ; std::allocator<_MAPSVR_DATA *>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@ABV?$allocator@PAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >::_Wrap_alloc<std::allocator<_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAIABV?$allocator@PAU_MAPSVR_DATA@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAIABV?$allocator@PAU_MAPSVR_DATA@@@2@@Z PROC ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@SAIABV?$allocator@PAU_MAPSVR_DATA@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_MAPSVR_DATA *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAU_MAPSVR_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAU_MAPSVR_DATA@@@std@@QBEIXZ PROC ; std::allocator<_MAPSVR_DATA *>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAU_MAPSVR_DATA@@@std@@QBEIXZ ENDP ; std::allocator<_MAPSVR_DATA *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z PROC ; std::allocator<_MAPSVR_DATA *>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEPAPAU_MAPSVR_DATA@@I@Z ENDP ; std::allocator<_MAPSVR_DATA *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z PROC ; std::allocator<_MAPSVR_DATA *>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@PAU_MAPSVR_DATA@@@std@@QAEXPAPAU_MAPSVR_DATA@@I@Z ENDP ; std::allocator<_MAPSVR_DATA *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@ABV01@@Z PROC	; std::allocator<_MAPSVR_DATA *>::allocator<_MAPSVR_DATA *>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<_MAPSVR_DATA *>::allocator<_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@XZ PROC	; std::allocator<_MAPSVR_DATA *>::allocator<_MAPSVR_DATA *>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAU_MAPSVR_DATA@@@std@@QAE@XZ ENDP	; std::allocator<_MAPSVR_DATA *>::allocator<_MAPSVR_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--

; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 425  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++, COMDAT
; _this$ = ecx

; 415  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 417  : 		++*this;
; 418  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 419  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++, COMDAT
; _this$ = ecx

; 409  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 412  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator->, COMDAT
; _this$ = ecx

; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator*, COMDAT
; _this$ = ecx

; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >, COMDAT
; _this$ = ecx

; 382  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 383  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::insert<std::pair<int,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 1092 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00004	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode<std::pair<int,_MAPSVR_DATA *> >

; 1094 : 		return (_Insert_nohint(false,

  0000e	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000f	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_nohint<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	5f		 pop	 edi

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$insert@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::insert<std::pair<int,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0HPAU_MAPSVR_DATA@@X@?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@QAE@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HPAU_MAPSVR_DATA@@X@?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@QAE@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z PROC ; std::pair<int const ,_MAPSVR_DATA *>::pair<int const ,_MAPSVR_DATA *><int,_MAPSVR_DATA *,void>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 159  : 		}

  00010	8b c1		 mov	 eax, ecx
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??$?0HPAU_MAPSVR_DATA@@X@?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@QAE@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ENDP ; std::pair<int const ,_MAPSVR_DATA *>::pair<int const ,_MAPSVR_DATA *><int,_MAPSVR_DATA *,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAFAAPAU_MAPSVR_DATA@@X@?$pair@HPAU_MAPSVR_DATA@@@std@@QAE@AAFAAPAU_MAPSVR_DATA@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAFAAPAU_MAPSVR_DATA@@X@?$pair@HPAU_MAPSVR_DATA@@@std@@QAE@AAFAAPAU_MAPSVR_DATA@@@Z PROC ; std::pair<int,_MAPSVR_DATA *>::pair<int,_MAPSVR_DATA *><short &,_MAPSVR_DATA * &,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	0f bf 00	 movsx	 eax, WORD PTR [eax]
  00009	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 146  : 		}

  00013	8b c1		 mov	 eax, ecx
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
??$?0AAFAAPAU_MAPSVR_DATA@@X@?$pair@HPAU_MAPSVR_DATA@@@std@@QAE@AAFAAPAU_MAPSVR_DATA@@@Z ENDP ; std::pair<int,_MAPSVR_DATA *>::pair<int,_MAPSVR_DATA *><short &,_MAPSVR_DATA * &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMapServerManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMapServerManager@@UAEPAXI@Z PROC			; CMapServerManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMapServerManager@@UAE@XZ ; CMapServerManager::~CMapServerManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 fc 6a 01 00	 push	 92924			; 00016afcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMapServerManager@@UAEPAXI@Z ENDP			; CMapServerManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >::~map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >::~map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >::map<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2076 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Newnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1673 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN91@lower_boun
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL13@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN15@lower_boun

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN16@lower_boun
$LN15@lower_boun:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@lower_boun:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL13@lower_boun
$LN91@lower_boun:

; 43   : 		: _Ptr(_Pnode)

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find, COMDAT
; _this$ = ecx

; 1485 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00005	8b d0		 mov	 edx, eax
  00007	57		 push	 edi

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	75 18		 jne	 SHORT $LN18@find
  00014	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL17@find:
  00017	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0001a	7d 05		 jge	 SHORT $LN19@find

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2094 : 			else

  0001f	eb 04		 jmp	 SHORT $LN20@find
$LN19@find:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  00021	8b d1		 mov	 edx, ecx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN20@find:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 ec		 je	 SHORT $LL17@find
  0002b	5e		 pop	 esi
$LN18@find:

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002c	3b d0		 cmp	 edx, eax

; 1487 : 		return (_Where == end()

  0002e	74 11		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  00035	7c 0a		 jl	 SHORT $LN3@find
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN3@find:

; 1487 : 		return (_Where == end()

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5f		 pop	 edi
  00045	89 01		 mov	 DWORD PTR [ecx], eax
  00047	8b c1		 mov	 eax, ecx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  0002c	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0002e	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00032	75 1d		 jne	 SHORT $LN23@clear
$LL24@clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00049	8b de		 mov	 ebx, esi
  0004b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004f	74 e3		 je	 SHORT $LL24@clear
$LN23@clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00051	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0005a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0005c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0005f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1482 : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1449 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1449 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN176@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1449 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN176@erase

; 1450 : 			{	// erase all
; 1451 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::clear

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 43   : 		: _Ptr(_Pnode)

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN176@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN133@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN178@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN188@erase
  0004b	0f 1f 44 00 00	 npad	 5
$LL144@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL144@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN188@erase
$LN178@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN188@erase
$LL128@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN188@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL128@erase
$LN188@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN133@erase:

; 1457 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  00096	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1162 = -8						; size = 4
tv1141 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN694@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN694@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN694@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN697@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN698@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN699@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN697@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN698@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN699@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN698@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN697@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Rrotate
$LN697@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1440 : 		if (0 < this->_Mysize())

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN696@erase

; 1441 : 			--this->_Mysize();

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN696@erase:

; 43   : 		: _Ptr(_Pnode)

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::~_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::~_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 913  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 914  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 18		 push	 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@2@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_MAPSVR_DATA *> >::allocator<std::pair<int const ,_MAPSVR_DATA *> >, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_MAPSVR_DATA *> >::allocator<std::pair<int const ,_MAPSVR_DATA *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z
_TEXT	SEGMENT
tv275 = -4						; size = 4
$T1 = 8							; size = 4
_wServerCode$ = 8					; size = 2
_it$ = 12						; size = 4
_lpszIpAddress$ = 12					; size = 4
_lpwPort$ = 16						; size = 4
?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z PROC	; CMapServerManager::GetSvrCodeData, COMDAT
; _this$ = ecx

; 771  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 772  : 	if ( !lpszIpAddress || !lpwPort )

  00006	8b 7d 0c	 mov	 edi, DWORD PTR _lpszIpAddress$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	85 ff		 test	 edi, edi
  0000d	0f 84 87 00 00
	00		 je	 $LN3@GetSvrCode
  00013	83 7d 10 00	 cmp	 DWORD PTR _lpwPort$[ebp], 0
  00017	0f 84 7d 00 00
	00		 je	 $LN3@GetSvrCode

; 774  : 
; 775  : 	_MAPSVR_DATA * lpMapSvrData = NULL;
; 776  : 
; 777  : 	EnterCriticalSection(&this->m_critSVRCODE_MAP);

  0001d	53		 push	 ebx
  0001e	8d 86 e0 6a 01
	00		 lea	 eax, DWORD PTR [esi+92896]
  00024	33 db		 xor	 ebx, ebx
  00026	50		 push	 eax
  00027	89 45 fc	 mov	 DWORD PTR tv275[ebp], eax
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 778  : 
; 779  : 	std::map<int, _MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(wServerCode);

  00030	0f b7 45 08	 movzx	 eax, WORD PTR _wServerCode$[ebp]
  00034	8d 8e d8 6a 01
	00		 lea	 ecx, DWORD PTR [esi+92888]
  0003a	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  0003d	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00040	50		 push	 eax
  00041	8d 45 0c	 lea	 eax, DWORD PTR _it$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _it$[ebp]
  0004d	3b 86 d8 6a 01
	00		 cmp	 eax, DWORD PTR [esi+92888]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 781  : 	if ( it != this->m_mapSVRCODE_MAP.end() )

  00053	74 03		 je	 SHORT $LN4@GetSvrCode

; 782  : 	{
; 783  : 		lpMapSvrData = it->second;

  00055	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
$LN4@GetSvrCode:

; 784  : 	}
; 785  : 
; 786  : 	LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  00058	ff 75 fc	 push	 DWORD PTR tv275[ebp]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 787  : 
; 788  : 	if ( lpMapSvrData == NULL )

  00061	85 db		 test	 ebx, ebx
  00063	75 0b		 jne	 SHORT $LN5@GetSvrCode

; 789  : 		return FALSE;

  00065	5b		 pop	 ebx
  00066	5f		 pop	 edi
  00067	33 c0		 xor	 eax, eax
  00069	5e		 pop	 esi

; 795  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetSvrCode:

; 790  : 
; 791  : 	strcpy(lpszIpAddress, lpMapSvrData->m_cIPADDR);

  00070	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00073	2b f8		 sub	 edi, eax
$LL7@GetSvrCode:
  00075	8a 08		 mov	 cl, BYTE PTR [eax]
  00077	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0007a	88 4c 07 ff	 mov	 BYTE PTR [edi+eax-1], cl
  0007e	84 c9		 test	 cl, cl
  00080	75 f3		 jne	 SHORT $LL7@GetSvrCode

; 792  : 	*lpwPort = lpMapSvrData->m_wPORT;

  00082	66 8b 43 1c	 mov	 ax, WORD PTR [ebx+28]
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _lpwPort$[ebp]
  00089	5b		 pop	 ebx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	66 89 01	 mov	 WORD PTR [ecx], ax

; 793  : 
; 794  : 	return TRUE;

  0008f	b8 01 00 00 00	 mov	 eax, 1

; 795  : }

  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetSvrCode:
  0009a	5f		 pop	 edi

; 773  : 		return FALSE;

  0009b	33 c0		 xor	 eax, eax
  0009d	5e		 pop	 esi

; 795  : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 0c 00	 ret	 12			; 0000000cH
?GetSvrCodeData@CMapServerManager@@QAEHGPADPAG@Z ENDP	; CMapServerManager::GetSvrCodeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z
_TEXT	SEGMENT
_vtMapSvrData$2 = -36					; size = 12
_sMAP_MOVE_INFO$1$ = -24				; size = 4
tv1651 = -24						; size = 4
$T3 = -24						; size = 4
_it$4 = -24						; size = 4
$T5 = -20						; size = 4
_it$6 = -20						; size = 4
tv1653 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iIndex$ = 8						; size = 4
_iMAP_NUM$ = 12						; size = 4
_it$7 = 16						; size = 4
_it$8 = 16						; size = 4
_it$9 = 16						; size = 4
$T10 = 16						; size = 4
_sSVR_CODE_BEFORE$ = 16					; size = 2
?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z PROC	; CMapServerManager::CheckMoveMapSvr, COMDAT
; _this$ = ecx

; 543  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 544  : 	if ( this->m_bMapDataLoadOk == FALSE )

  0002a	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0002e	0f 84 0b 05 00
	00		 je	 $LN587@CheckMoveM

; 545  : 		return gGameServerCode;
; 546  : 
; 547  : 	if ( !gObjIsConnected(iIndex))

  00034	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	0f 84 f7 04 00
	00		 je	 $LN587@CheckMoveM

; 548  : 		return gGameServerCode;
; 549  : 
; 550  : 	if ( !MapNumberCheck(iMAP_NUM))

  00048	8b 5d 0c	 mov	 ebx, DWORD PTR _iMAP_NUM$[ebp]
  0004b	53		 push	 ebx
  0004c	e8 00 00 00 00	 call	 ?MapNumberCheck@@YAHH@Z	; MapNumberCheck
  00051	83 c4 04	 add	 esp, 4
  00054	85 c0		 test	 eax, eax
  00056	75 2a		 jne	 SHORT $LN15@CheckMoveM

; 551  : 	{
; 552  : 		LogAddC(2, "[MapServerMng] CheckMoveMapSvr() - Map Index doesn't exist [%s][%s] : %d",

  00058	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  0005e	53		 push	 ebx
  0005f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00065	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00068	50		 push	 eax
  00069	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@EFCOMEEG@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  00072	6a 02		 push	 2
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0007a	83 c4 14	 add	 esp, 20			; 00000014H

; 553  : 			gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM);
; 554  : 
; 555  : 		return gGameServerCode;

  0007d	e9 bd 04 00 00	 jmp	 $LN587@CheckMoveM
$LN15@CheckMoveM:

; 556  : 	}
; 557  : 
; 558  : 	_MAPSVR_DATA * lpMapSvrData = this->m_lpThisMapSvrData;

  00082	8b 87 f8 6a 01
	00		 mov	 eax, DWORD PTR [edi+92920]

; 559  : 
; 560  : 	if ( lpMapSvrData == NULL )

  00088	85 c0		 test	 eax, eax
  0008a	75 2a		 jne	 SHORT $LN16@CheckMoveM

; 561  : 	{
; 562  : 		LogAddC(2, "[MapServerMng] CheckMoveMapSvr() - m_lpThisMapSvrData == NULL [%s][%s] : %d",

  0008c	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00092	53		 push	 ebx
  00093	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0009c	50		 push	 eax
  0009d	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000a0	50		 push	 eax
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@BGAAFCHD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  000a6	6a 02		 push	 2
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000ae	83 c4 14	 add	 esp, 20			; 00000014H

; 563  : 			gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM);
; 564  : 
; 565  : 		return gGameServerCode;

  000b1	e9 89 04 00 00	 jmp	 $LN587@CheckMoveM
$LN16@CheckMoveM:

; 566  : 	}
; 567  : 
; 568  : 	if ( lpMapSvrData->m_bIN_USE == FALSE )

  000b6	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000ba	75 2a		 jne	 SHORT $LN17@CheckMoveM

; 569  : 	{
; 570  : 		LogAddC(2, "[MapServerMng] CheckMoveMapSvr() - lpMapSvrData->m_bIN_USE == FALSE [%s][%s] : %d",

  000bc	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  000c2	53		 push	 ebx
  000c3	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c9	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000cc	50		 push	 eax
  000cd	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000d0	50		 push	 eax
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@MPBANOIK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  000d6	6a 02		 push	 2
  000d8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000de	83 c4 14	 add	 esp, 20			; 00000014H

; 571  : 			gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM);
; 572  : 
; 573  : 		return gGameServerCode;

  000e1	e9 59 04 00 00	 jmp	 $LN587@CheckMoveM
$LN17@CheckMoveM:

; 574  : 	}
; 575  : 
; 576  : 	short sMAP_MOVE_INFO = lpMapSvrData->m_sMAP_MOVE[iMAP_NUM];

  000e6	0f b7 44 58 1e	 movzx	 eax, WORD PTR [eax+ebx*2+30]

; 577  : 
; 578  : 	switch ( sMAP_MOVE_INFO )

  000eb	0f bf f0	 movsx	 esi, ax
  000ee	89 45 e8	 mov	 DWORD PTR _sMAP_MOVE_INFO$1$[ebp], eax
  000f1	83 fe fd	 cmp	 esi, -3			; fffffffdH
  000f4	0f 84 01 04 00
	00		 je	 $LN33@CheckMoveM
  000fa	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000fd	0f 84 c5 02 00
	00		 je	 $LN26@CheckMoveM
  00103	83 fe ff	 cmp	 esi, -1
  00106	0f 84 54 01 00
	00		 je	 $LN18@CheckMoveM

; 703  : 			break;
; 704  : 
; 705  : 		default:
; 706  : 			if ( sMAP_MOVE_INFO > -1 )

  0010c	66 83 f8 ff	 cmp	 ax, -1
  00110	0f 8e 1e 01 00
	00		 jle	 $LN35@CheckMoveM

; 707  : 			{
; 708  : 				_MAPSVR_DATA * lpDestMapSvrData = NULL;
; 709  : 
; 710  : 				EnterCriticalSection(&this->m_critSVRCODE_MAP);

  00116	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  0011c	33 db		 xor	 ebx, ebx
  0011e	50		 push	 eax
  0011f	89 45 f0	 mov	 DWORD PTR tv1653[ebp], eax
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 711  : 
; 712  : 				std::map<int, _MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(sMAP_MOVE_INFO);

  00128	8d 45 ec	 lea	 eax, DWORD PTR $T5[ebp]
  0012b	89 75 ec	 mov	 DWORD PTR $T5[ebp], esi
  0012e	50		 push	 eax
  0012f	8d 45 10	 lea	 eax, DWORD PTR _it$7[ebp]
  00132	8d b7 d8 6a 01
	00		 lea	 esi, DWORD PTR [edi+92888]
  00138	50		 push	 eax
  00139	8b ce		 mov	 ecx, esi
  0013b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00140	8b 45 10	 mov	 eax, DWORD PTR _it$7[ebp]
  00143	3b 06		 cmp	 eax, DWORD PTR [esi]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 714  : 				if ( it != this->m_mapSVRCODE_MAP.end() )

  00145	74 03		 je	 SHORT $LN37@CheckMoveM

; 715  : 				{
; 716  : 					lpDestMapSvrData = it->second;

  00147	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
$LN37@CheckMoveM:

; 717  : 				}
; 718  : 
; 719  : 				LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0014a	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00150	50		 push	 eax
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 720  : 
; 721  : 				if ( lpDestMapSvrData != NULL &&
; 722  : 					 lpDestMapSvrData->m_bIN_USE == TRUE &&

  00157	85 db		 test	 ebx, ebx
  00159	74 29		 je	 SHORT $LN38@CheckMoveM
  0015b	83 7b 04 01	 cmp	 DWORD PTR [ebx+4], 1
  0015f	75 23		 jne	 SHORT $LN38@CheckMoveM
  00161	8b 45 0c	 mov	 eax, DWORD PTR _iMAP_NUM$[ebp]
  00164	66 83 7c 43 1e
	fd		 cmp	 WORD PTR [ebx+eax*2+30], -3 ; fffffffdH
  0016a	75 18		 jne	 SHORT $LN38@CheckMoveM

; 723  : 					 lpDestMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3)
; 724  : 				{
; 725  : 					return sMAP_MOVE_INFO;

  0016c	66 8b 45 e8	 mov	 ax, WORD PTR _sMAP_MOVE_INFO$1$[ebp]

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  00170	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00173	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017a	59		 pop	 ecx
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 0c 00	 ret	 12			; 0000000cH
$LN38@CheckMoveM:

; 726  : 				}
; 727  : 
; 728  : 				short sDestServerCode = -1;
; 729  : 
; 730  : 				EnterCriticalSection(&this->m_critSVRCODE_MAP);

  00184	ff 75 f0	 push	 DWORD PTR tv1653[ebp]
  00187	83 cf ff	 or	 edi, -1
  0018a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00190	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 732  : 				for ( it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  00192	8b 06		 mov	 eax, DWORD PTR [esi]
  00194	89 45 10	 mov	 DWORD PTR _it$7[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00197	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 732  : 				for ( it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  00199	74 2d		 je	 SHORT $LN11@CheckMoveM
  0019b	8b 5d 0c	 mov	 ebx, DWORD PTR _iMAP_NUM$[ebp]
  0019e	66 90		 npad	 2
$LL12@CheckMoveM:

; 733  : 				{
; 734  : 					_MAPSVR_DATA * lpTempMapSvrData = it->second;

  001a0	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 735  : 
; 736  : 					if ( lpTempMapSvrData != NULL &&
; 737  : 						 lpTempMapSvrData->m_bIN_USE == TRUE &&

  001a3	85 c0		 test	 eax, eax
  001a5	74 12		 je	 SHORT $LN10@CheckMoveM
  001a7	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  001ab	75 0c		 jne	 SHORT $LN10@CheckMoveM
  001ad	66 83 7c 58 1e
	fd		 cmp	 WORD PTR [eax+ebx*2+30], -3 ; fffffffdH
  001b3	75 04		 jne	 SHORT $LN10@CheckMoveM

; 738  : 						 lpTempMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3)
; 739  : 					{
; 740  : 						sDestServerCode = lpTempMapSvrData->m_sSVR_CODE;

  001b5	0f b7 78 0a	 movzx	 edi, WORD PTR [eax+10]
$LN10@CheckMoveM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 271  : 		++(*(_Mybase *)this);

  001b9	8d 4d 10	 lea	 ecx, DWORD PTR _it$7[ebp]
  001bc	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 334  : 		return (this->_Ptr == _Right._Ptr);

  001c1	8b 45 10	 mov	 eax, DWORD PTR _it$7[ebp]
  001c4	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 732  : 				for ( it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  001c6	75 d8		 jne	 SHORT $LL12@CheckMoveM
$LN11@CheckMoveM:

; 741  : 					}
; 742  : 				}
; 743  : 				
; 744  : 				LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  001c8	ff 75 f0	 push	 DWORD PTR tv1653[ebp]
  001cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 745  : 
; 746  : 				if ( sDestServerCode != -1 )

  001d1	66 83 ff ff	 cmp	 di, -1
  001d5	0f 84 64 03 00
	00		 je	 $LN587@CheckMoveM

; 747  : 				{
; 748  : 					LogAddTD("[MapServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] : MAP-%d / SVR-%d(State Map:%d X:%d Y:%d)",

  001db	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _iIndex$[ebp], 10048
  001e2	0f bf cf	 movsx	 ecx, di
  001e5	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001eb	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  001f2	50		 push	 eax
  001f3	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  001fa	50		 push	 eax
  001fb	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00202	50		 push	 eax
  00203	51		 push	 ecx
  00204	ff 75 0c	 push	 DWORD PTR _iMAP_NUM$[ebp]
  00207	8d 4a 5d	 lea	 ecx, DWORD PTR [edx+93]
  0020a	51		 push	 ecx
  0020b	8d 4a 52	 lea	 ecx, DWORD PTR [edx+82]
  0020e	51		 push	 ecx
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0021a	83 c4 20	 add	 esp, 32			; 00000020H

; 749  : 						gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM, sDestServerCode,
; 750  : 						gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);
; 751  : 
; 752  : 					return sDestServerCode;

  0021d	66 8b c7	 mov	 ax, di

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  00220	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00223	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022a	59		 pop	 ecx
  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi
  0022d	5b		 pop	 ebx
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 0c 00	 ret	 12			; 0000000cH
$LN35@CheckMoveM:

; 753  : 				}
; 754  : 			}
; 755  : 			else
; 756  : 			{
; 757  : 				LogAddC(2, "[MapServerMng] CheckMoveMapSvr() - Unknown MapMove Info [%s][%s] : MAP-%d / INFO-%d",

  00234	69 4d 08 40 27
	00 00		 imul	 ecx, DWORD PTR _iIndex$[ebp], 10048
  0023b	56		 push	 esi
  0023c	53		 push	 ebx
  0023d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00243	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00246	50		 push	 eax
  00247	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0024a	50		 push	 eax
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@HMFMELGB@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  00250	6a 02		 push	 2
  00252	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00258	83 c4 18	 add	 esp, 24			; 00000018H

; 758  : 					gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM, sMAP_MOVE_INFO);
; 759  : 
; 760  : 				return gGameServerCode;

  0025b	e9 df 02 00 00	 jmp	 $LN587@CheckMoveM
$LN18@CheckMoveM:

; 579  : 	{
; 580  : 		case -1:
; 581  : 			{
; 582  : 				_MAPSVR_DATA * lpDestMapSvrData = NULL;
; 583  : 
; 584  : 				if ( sSVR_CODE_BEFORE != -1 )

  00260	66 8b 5d 10	 mov	 bx, WORD PTR _sSVR_CODE_BEFORE$[ebp]
  00264	66 83 fb ff	 cmp	 bx, -1
  00268	74 58		 je	 SHORT $LN22@CheckMoveM

; 585  : 				{
; 586  : 					EnterCriticalSection(&this->m_critSVRCODE_MAP);

  0026a	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00270	50		 push	 eax
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 587  : 
; 588  : 					std::map<int, _MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(sSVR_CODE_BEFORE);

  00277	0f bf c3	 movsx	 eax, bx
  0027a	8d 8f d8 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92888]
  00280	89 45 10	 mov	 DWORD PTR $T10[ebp], eax
  00283	8d 45 10	 lea	 eax, DWORD PTR $T10[ebp]
  00286	50		 push	 eax
  00287	8d 45 e8	 lea	 eax, DWORD PTR _it$4[ebp]
  0028a	50		 push	 eax
  0028b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00290	8b 45 e8	 mov	 eax, DWORD PTR _it$4[ebp]
  00293	3b 87 d8 6a 01
	00		 cmp	 eax, DWORD PTR [edi+92888]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 590  : 					if ( it != this->m_mapSVRCODE_MAP.end() )

  00299	74 05		 je	 SHORT $LN583@CheckMoveM

; 591  : 					{
; 592  : 						lpDestMapSvrData = it->second;

  0029b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0029e	eb 02		 jmp	 SHORT $LN20@CheckMoveM
$LN583@CheckMoveM:
  002a0	33 f6		 xor	 esi, esi
$LN20@CheckMoveM:

; 593  : 					}
; 594  : 
; 595  : 					LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  002a2	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  002a8	50		 push	 eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 596  : 
; 597  : 					if ( lpDestMapSvrData != NULL )

  002af	85 f6		 test	 esi, esi
  002b1	74 0f		 je	 SHORT $LN22@CheckMoveM

; 598  : 					{
; 599  : 						if ( lpDestMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3 )

  002b3	8b 45 0c	 mov	 eax, DWORD PTR _iMAP_NUM$[ebp]
  002b6	66 83 7c 46 1e
	fd		 cmp	 WORD PTR [esi+eax*2+30], -3 ; fffffffdH
  002bc	0f 84 22 02 00
	00		 je	 $LN588@CheckMoveM
$LN22@CheckMoveM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  002c2	33 db		 xor	 ebx, ebx

; 481  : 		_Mylast = pointer();

  002c4	33 f6		 xor	 esi, esi
  002c6	89 5d dc	 mov	 DWORD PTR _vtMapSvrData$2[ebp], ebx
  002c9	89 75 e0	 mov	 DWORD PTR _vtMapSvrData$2[ebp+4], esi

; 482  : 		_Myend = pointer();

  002cc	89 5d e4	 mov	 DWORD PTR _vtMapSvrData$2[ebp+8], ebx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 608  : 				EnterCriticalSection(&this->m_critSVRCODE_MAP);

  002cf	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  002d5	89 75 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], esi
  002d8	50		 push	 eax
  002d9	89 45 e8	 mov	 DWORD PTR tv1651[ebp], eax
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  002e2	8b 87 d8 6a 01
	00		 mov	 eax, DWORD PTR [edi+92888]

; 43   : 		: _Ptr(_Pnode)

  002e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ea	89 4d 10	 mov	 DWORD PTR _it$9[ebp], ecx

; 334  : 		return (this->_Ptr == _Right._Ptr);

  002ed	3b c8		 cmp	 ecx, eax
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 610  : 				for ( std::map<int ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  002ef	74 3d		 je	 SHORT $LN5@CheckMoveM
  002f1	8b 5d 0c	 mov	 ebx, DWORD PTR _iMAP_NUM$[ebp]
$LL6@CheckMoveM:

; 611  : 				{
; 612  : 					_MAPSVR_DATA * lpTempMapSvrData = it->second;

  002f4	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  002f7	83 c1 14	 add	 ecx, 20			; 00000014H

; 613  : 
; 614  : 					if ( lpTempMapSvrData != NULL &&
; 615  : 						 lpTempMapSvrData->m_bIN_USE == TRUE &&

  002fa	85 c0		 test	 eax, eax
  002fc	74 17		 je	 SHORT $LN4@CheckMoveM
  002fe	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00302	75 11		 jne	 SHORT $LN4@CheckMoveM
  00304	66 83 7c 58 1e
	fd		 cmp	 WORD PTR [eax+ebx*2+30], -3 ; fffffffdH
  0030a	75 09		 jne	 SHORT $LN4@CheckMoveM

; 616  : 						 lpTempMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3)
; 617  : 					{
; 618  : 						vtMapSvrData.push_back(it->second);

  0030c	51		 push	 ecx
  0030d	8d 4d dc	 lea	 ecx, DWORD PTR _vtMapSvrData$2[ebp]
  00310	e8 00 00 00 00	 call	 ?push_back@?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAEXABQAU_MAPSVR_DATA@@@Z ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::push_back
$LN4@CheckMoveM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 271  : 		++(*(_Mybase *)this);

  00315	8d 4d 10	 lea	 ecx, DWORD PTR _it$9[ebp]
  00318	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0031d	8b 4d 10	 mov	 ecx, DWORD PTR _it$9[ebp]
  00320	3b 8f d8 6a 01
	00		 cmp	 ecx, DWORD PTR [edi+92888]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 610  : 				for ( std::map<int ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  00326	75 cc		 jne	 SHORT $LL6@CheckMoveM
  00328	8b 75 e0	 mov	 esi, DWORD PTR _vtMapSvrData$2[ebp+4]
  0032b	8b 5d dc	 mov	 ebx, DWORD PTR _vtMapSvrData$2[ebp]
$LN5@CheckMoveM:

; 619  : 					}
; 620  : 				}
; 621  : 
; 622  : 				LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0032e	ff 75 e8	 push	 DWORD PTR tv1651[ebp]
  00331	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00337	3b de		 cmp	 ebx, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 626  : 				if ( vtMapSvrData.empty() == 0 )

  00339	0f 84 7c 00 00
	00		 je	 $LN25@CheckMoveM

; 628  : 					sDestServerCode = vtMapSvrData[rand()%vtMapSvrData.size()]->m_sSVR_CODE;

  0033f	e8 00 00 00 00	 call	 _rand
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00344	2b f3		 sub	 esi, ebx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 628  : 					sDestServerCode = vtMapSvrData[rand()%vtMapSvrData.size()]->m_sSVR_CODE;

  00346	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00348	c1 fe 02	 sar	 esi, 2
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 628  : 					sDestServerCode = vtMapSvrData[rand()%vtMapSvrData.size()]->m_sSVR_CODE;

  0034b	f7 f6		 div	 esi
  0034d	8b 04 93	 mov	 eax, DWORD PTR [ebx+edx*4]
  00350	0f b7 70 0a	 movzx	 esi, WORD PTR [eax+10]

; 629  : 				}
; 630  : 
; 631  : 				if ( sDestServerCode != -1 )

  00354	66 83 fe ff	 cmp	 si, -1
  00358	74 61		 je	 SHORT $LN25@CheckMoveM

; 632  : 				{
; 633  : 					LogAddTD("[MapServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] : MAP-%d / SVR-%d(State Map:%d X:%d Y:%d)",

  0035a	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _iIndex$[ebp], 10048
  00361	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00367	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  0036e	8d 4a 5d	 lea	 ecx, DWORD PTR [edx+93]
  00371	50		 push	 eax
  00372	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  00379	50		 push	 eax
  0037a	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00381	50		 push	 eax
  00382	0f bf c6	 movsx	 eax, si
  00385	50		 push	 eax
  00386	ff 75 0c	 push	 DWORD PTR _iMAP_NUM$[ebp]
  00389	51		 push	 ecx
  0038a	8d 4a 52	 lea	 ecx, DWORD PTR [edx+82]
  0038d	51		 push	 ecx
  0038e	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  00393	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00399	83 c4 20	 add	 esp, 32			; 00000020H

; 634  : 						gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM, sDestServerCode,
; 635  : 						gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);
; 636  : 
; 637  : 					return sDestServerCode;

  0039c	8d 4d dc	 lea	 ecx, DWORD PTR _vtMapSvrData$2[ebp]
  0039f	e8 00 00 00 00	 call	 ??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >
  003a4	66 8b c6	 mov	 ax, si

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  003a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003b1	59		 pop	 ecx
  003b2	5f		 pop	 edi
  003b3	5e		 pop	 esi
  003b4	5b		 pop	 ebx
  003b5	8b e5		 mov	 esp, ebp
  003b7	5d		 pop	 ebp
  003b8	c2 0c 00	 ret	 12			; 0000000cH
$LN25@CheckMoveM:

; 638  : 				}
; 639  : 			}

  003bb	8d 4d dc	 lea	 ecx, DWORD PTR _vtMapSvrData$2[ebp]
  003be	e8 00 00 00 00	 call	 ??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >

; 640  : 			break;

  003c3	e9 77 01 00 00	 jmp	 $LN587@CheckMoveM
$LN26@CheckMoveM:

; 641  : 
; 642  : 		case -2:
; 643  : 			{
; 644  : 				_MAPSVR_DATA * lpDestMapSvrData = NULL;
; 645  : 
; 646  : 				if ( sSVR_CODE_BEFORE != -1 )

  003c8	66 8b 75 10	 mov	 si, WORD PTR _sSVR_CODE_BEFORE$[ebp]
  003cc	33 db		 xor	 ebx, ebx
  003ce	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__EnterCriticalSection@4
  003d3	66 83 fe ff	 cmp	 si, -1
  003d7	74 69		 je	 SHORT $LN30@CheckMoveM

; 647  : 				{
; 648  : 					EnterCriticalSection(&this->m_critSVRCODE_MAP);

  003d9	8d 8f e0 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92896]
  003df	51		 push	 ecx
  003e0	ff d0		 call	 eax

; 649  : 
; 650  : 					std::map<int, _MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(sSVR_CODE_BEFORE);

  003e2	0f bf c6	 movsx	 eax, si
  003e5	8d 8f d8 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92888]
  003eb	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
  003ee	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  003f1	50		 push	 eax
  003f2	8d 45 ec	 lea	 eax, DWORD PTR _it$6[ebp]
  003f5	50		 push	 eax
  003f6	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  003fb	8b 45 ec	 mov	 eax, DWORD PTR _it$6[ebp]
  003fe	3b 87 d8 6a 01
	00		 cmp	 eax, DWORD PTR [edi+92888]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 652  : 					if ( it != this->m_mapSVRCODE_MAP.end() )

  00404	74 03		 je	 SHORT $LN28@CheckMoveM

; 653  : 					{
; 654  : 						lpDestMapSvrData = it->second;

  00406	8b 58 14	 mov	 ebx, DWORD PTR [eax+20]
$LN28@CheckMoveM:

; 655  : 					}
; 656  : 
; 657  : 					LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  00409	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  0040f	50		 push	 eax
  00410	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 658  : 
; 659  : 					if ( lpDestMapSvrData != NULL )

  00416	85 db		 test	 ebx, ebx
  00418	74 23		 je	 SHORT $LN585@CheckMoveM

; 660  : 					{
; 661  : 						if ( lpDestMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3 )

  0041a	8b 45 0c	 mov	 eax, DWORD PTR _iMAP_NUM$[ebp]
  0041d	66 83 7c 43 1e
	fd		 cmp	 WORD PTR [ebx+eax*2+30], -3 ; fffffffdH
  00423	75 18		 jne	 SHORT $LN585@CheckMoveM

; 662  : 						{
; 663  : 							return sSVR_CODE_BEFORE;

  00425	66 8b 45 10	 mov	 ax, WORD PTR _sSVR_CODE_BEFORE$[ebp]

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  00429	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0042c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00433	59		 pop	 ecx
  00434	5f		 pop	 edi
  00435	5e		 pop	 esi
  00436	5b		 pop	 ebx
  00437	8b e5		 mov	 esp, ebp
  00439	5d		 pop	 ebp
  0043a	c2 0c 00	 ret	 12			; 0000000cH
$LN585@CheckMoveM:
  0043d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__EnterCriticalSection@4
$LN30@CheckMoveM:

; 664  : 						}
; 665  : 					}
; 666  : 				}
; 667  : 				
; 668  : 				short sDestServerCode = -1;
; 669  : 
; 670  : 				EnterCriticalSection(&this->m_critSVRCODE_MAP);

  00442	8d 8f e0 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92896]
  00448	83 cb ff	 or	 ebx, -1
  0044b	51		 push	 ecx
  0044c	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0044e	8b b7 d8 6a 01
	00		 mov	 esi, DWORD PTR [edi+92888]

; 43   : 		: _Ptr(_Pnode)

  00454	8b 06		 mov	 eax, DWORD PTR [esi]
  00456	89 45 10	 mov	 DWORD PTR _it$8[ebp], eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00459	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 672  : 				for ( std::map<int ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  0045b	74 2e		 je	 SHORT $LN8@CheckMoveM
  0045d	0f 1f 00	 npad	 3
$LL9@CheckMoveM:

; 673  : 				{
; 674  : 					_MAPSVR_DATA * lpTempMapSvrData = it->second;

  00460	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 675  : 
; 676  : 					if ( lpTempMapSvrData != NULL &&
; 677  : 						 lpTempMapSvrData->m_bIN_USE == TRUE &&

  00463	85 c0		 test	 eax, eax
  00465	74 15		 je	 SHORT $LN7@CheckMoveM
  00467	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  0046b	75 0f		 jne	 SHORT $LN7@CheckMoveM
  0046d	8b 4d 0c	 mov	 ecx, DWORD PTR _iMAP_NUM$[ebp]
  00470	66 83 7c 48 1e
	fd		 cmp	 WORD PTR [eax+ecx*2+30], -3 ; fffffffdH
  00476	75 04		 jne	 SHORT $LN7@CheckMoveM

; 678  : 						 lpTempMapSvrData->m_sMAP_MOVE[iMAP_NUM] == -3)
; 679  : 					{
; 680  : 						sDestServerCode = lpTempMapSvrData->m_sSVR_CODE;

  00478	0f b7 58 0a	 movzx	 ebx, WORD PTR [eax+10]
$LN7@CheckMoveM:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 271  : 		++(*(_Mybase *)this);

  0047c	8d 4d 10	 lea	 ecx, DWORD PTR _it$8[ebp]
  0047f	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_MAPSVR_DATA *> > >,std::_Iterator_base0>::operator++

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00484	8b 45 10	 mov	 eax, DWORD PTR _it$8[ebp]
  00487	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 672  : 				for ( std::map<int ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.begin() ; it != this->m_mapSVRCODE_MAP.end() ;it++)

  00489	75 d5		 jne	 SHORT $LL9@CheckMoveM
$LN8@CheckMoveM:

; 681  : 					}
; 682  : 				}
; 683  : 
; 684  : 				LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0048b	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00491	50		 push	 eax
  00492	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 685  : 
; 686  : 				if ( sDestServerCode != -1 )

  00498	66 83 fb ff	 cmp	 bx, -1
  0049c	0f 84 9d 00 00
	00		 je	 $LN587@CheckMoveM

; 687  : 				{
; 688  : 					LogAddTD("[MapServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] : MAP-%d / SVR-%d(State Map:%d X:%d Y:%d)",

  004a2	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _iIndex$[ebp], 10048
  004a9	0f bf cb	 movsx	 ecx, bx
  004ac	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004b2	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  004b9	50		 push	 eax
  004ba	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  004c1	50		 push	 eax
  004c2	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  004c9	50		 push	 eax
  004ca	51		 push	 ecx
  004cb	ff 75 0c	 push	 DWORD PTR _iMAP_NUM$[ebp]
  004ce	8d 4a 5d	 lea	 ecx, DWORD PTR [edx+93]
  004d1	51		 push	 ecx
  004d2	8d 4a 52	 lea	 ecx, DWORD PTR [edx+82]
  004d5	51		 push	 ecx
  004d6	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@HAGGDALD@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  004db	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  004e1	83 c4 20	 add	 esp, 32			; 00000020H
$LN588@CheckMoveM:

; 689  : 						gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM, sDestServerCode,
; 690  : 						gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);
; 691  : 
; 692  : 					return sDestServerCode;

  004e4	66 8b c3	 mov	 ax, bx

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  004e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004f1	59		 pop	 ecx
  004f2	5f		 pop	 edi
  004f3	5e		 pop	 esi
  004f4	5b		 pop	 ebx
  004f5	8b e5		 mov	 esp, ebp
  004f7	5d		 pop	 ebp
  004f8	c2 0c 00	 ret	 12			; 0000000cH
$LN33@CheckMoveM:

; 693  : 				}
; 694  : 			}
; 695  : 			break;
; 696  : 
; 697  : 		case -3:
; 698  : 			LogAddTD("[MapServerMng] CheckMoveMapSvr() - MapServer Check OK [%s][%s] : MAP-%d / SVR-%d (State Map:%d X:%d Y:%d)",

  004fb	69 4d 08 40 27
	00 00		 imul	 ecx, DWORD PTR _iIndex$[ebp], 10048
  00502	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00508	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0050f	50		 push	 eax
  00510	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00517	50		 push	 eax
  00518	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0051f	50		 push	 eax
  00520	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00527	50		 push	 eax
  00528	53		 push	 ebx
  00529	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0052c	50		 push	 eax
  0052d	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00530	50		 push	 eax
  00531	68 00 00 00 00	 push	 OFFSET ??_C@_0GK@EEMBMNOK@?$FLMapServerMng?$FN?5CheckMoveMapSvr?$CI?$CJ@
  00536	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0053c	83 c4 20	 add	 esp, 32			; 00000020H
$LN587@CheckMoveM:

; 699  : 				gObj[iIndex].AccountID, gObj[iIndex].Name, iMAP_NUM, gGameServerCode,
; 700  : 				gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);
; 701  : 
; 702  : 			return gGameServerCode;

  0053f	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode

; 761  : 			}
; 762  : 	}
; 763  : 
; 764  : 	return gGameServerCode;
; 765  : }

  00545	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00548	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0054f	59		 pop	 ecx
  00550	5f		 pop	 edi
  00551	5e		 pop	 esi
  00552	5b		 pop	 ebx
  00553	8b e5		 mov	 esp, ebp
  00555	5d		 pop	 ebp
  00556	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _vtMapSvrData$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAU_MAPSVR_DATA@@V?$allocator@PAU_MAPSVR_DATA@@@std@@@std@@QAE@XZ ; std::vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >::~vector<_MAPSVR_DATA *,std::allocator<_MAPSVR_DATA *> >
__ehhandler$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckMoveMapSvr@CMapServerManager@@QAEFHHF@Z ENDP	; CMapServerManager::CheckMoveMapSvr
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?CheckMapCanMove@CMapServerManager@@QAEHH@Z
_TEXT	SEGMENT
_iMAP_NUM$ = 8						; size = 4
?CheckMapCanMove@CMapServerManager@@QAEHH@Z PROC	; CMapServerManager::CheckMapCanMove, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 511  : 	if ( MapNumberCheck(iMAP_NUM) == 0 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iMAP_NUM$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?MapNumberCheck@@YAHH@Z	; MapNumberCheck
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 08		 jne	 SHORT $LN2@CheckMapCa
$LN7@CheckMapCa:
  00017	5f		 pop	 edi

; 512  : 	{
; 513  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax
  0001a	5e		 pop	 esi

; 531  : 	{
; 532  : 		return FALSE;
; 533  : 	}
; 534  : 
; 535  : 	return TRUE;
; 536  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@CheckMapCa:

; 514  : 	}
; 515  : 
; 516  : 	_MAPSVR_DATA * lpMapSvrData = this->m_lpThisMapSvrData;

  0001f	8b 8f f8 6a 01
	00		 mov	 ecx, DWORD PTR [edi+92920]

; 517  : 
; 518  : 	if ( lpMapSvrData == NULL )

  00025	85 c9		 test	 ecx, ecx
  00027	74 ee		 je	 SHORT $LN7@CheckMapCa

; 519  : 	{
; 520  : 		return FALSE;
; 521  : 	}
; 522  : 
; 523  : 	if ( lpMapSvrData->m_bIN_USE == FALSE )
; 524  : 	{
; 525  : 		return FALSE;

  00029	33 c0		 xor	 eax, eax
  0002b	39 41 04	 cmp	 DWORD PTR [ecx+4], eax
  0002e	74 09		 je	 SHORT $LN5@CheckMapCa

; 526  : 	}
; 527  : 
; 528  : 	short sMAP_MOVE_INFO = lpMapSvrData->m_sMAP_MOVE[iMAP_NUM];
; 529  : 
; 530  : 	if ( sMAP_MOVE_INFO != -3 )

  00030	66 83 7c 71 1e
	fd		 cmp	 WORD PTR [ecx+esi*2+30], -3 ; fffffffdH
  00036	0f 94 c0	 sete	 al
$LN5@CheckMapCa:
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 531  : 	{
; 532  : 		return FALSE;
; 533  : 	}
; 534  : 
; 535  : 	return TRUE;
; 536  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?CheckMapCanMove@CMapServerManager@@QAEHH@Z ENDP	; CMapServerManager::CheckMapCanMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?LoadData@CMapServerManager@@QAEHPAD@Z
_TEXT	SEGMENT
$T2 = -308						; size = 8
_Result$ = -300						; size = 12
$T3 = -288						; size = 4
$T4 = -284						; size = 8
$T5 = -276						; size = 4
$T6 = -276						; size = 4
$T7 = -272						; size = 4
$T8 = -272						; size = 4
$T9 = -268						; size = 4
$T10 = -268						; size = 4
$T11 = -264						; size = 4
$T12 = -264						; size = 4
_lpszFileName$GSCopy$1$ = -260				; size = 4
_MoveList$ = -256					; size = 4
_ServerPort$1$ = -252					; size = 4
_ServerCode$1$ = -248					; size = 4
_ServerList$ = -244					; size = 4
$T13 = -240						; size = 4
$T14 = -240						; size = 4
$T15 = -240						; size = 4
_MapServer$ = -236					; size = 4
_DestServerCode$1$ = -232				; size = 4
tv1476 = -232						; size = 4
$T16 = -232						; size = 4
_MapNumber$1$ = -228					; size = 4
_ServerGroup$1$ = -228					; size = 4
_MoveState$1$ = -221					; size = 1
_Node$ = -220						; size = 4
_Document$ = -216					; size = 200
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpszFileName$ = 8					; size = 4
?LoadData@CMapServerManager@@QAEHPAD@Z PROC		; CMapServerManager::LoadData, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CMapServerManager@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f9		 mov	 edi, ecx
  00030	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00033	89 9d fc fe ff
	ff		 mov	 DWORD PTR _lpszFileName$GSCopy$1$[ebp], ebx

; 84   : 	this->Clear();

  00039	e8 00 00 00 00	 call	 ?Clear@CMapServerManager@@QAEXXZ ; CMapServerManager::Clear

; 85   : 	xml_document Document;

  0003e	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00044	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 86   : 	xml_parse_result Result = Document.load_file(lpszFileName);

  00049	6a 00		 push	 0
  0004b	6a 74		 push	 116			; 00000074H
  0004d	53		 push	 ebx
  0004e	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	50		 push	 eax
  0005c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00062	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 87   : 	// ----
; 88   : 	if( Result.status != status_ok )

  00067	83 bd d4 fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  0006e	74 15		 je	 SHORT $LN10@LoadData

; 89   : 	{
; 90   : 		MsgBox("[MapServerManager] Loading fail [%s]", lpszFileName);

  00070	53		 push	 ebx
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@ILOFHFHM@?$FLMapServerManager?$FN?5Loading?5fail?5@
  00076	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0007b	83 c4 08	 add	 esp, 8
  0007e	33 f6		 xor	 esi, esi
  00080	e9 3f 06 00 00	 jmp	 $LN48@LoadData
$LN10@LoadData:

; 91   : 		return FALSE;
; 92   : 	}
; 93   : 	// ----
; 94   : 	xml_node MapServer	= Document.child("mapserver");

  00085	68 00 00 00 00	 push	 OFFSET ??_C@_09MEMOBGDB@mapserver?$AA@
  0008a	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _MapServer$[ebp]
  00090	50		 push	 eax
  00091	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00097	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 95   : 	xml_node ServerList	= MapServer.child("serverlist");

  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OIHAEBCH@serverlist?$AA@
  000a1	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _ServerList$[ebp]
  000a7	50		 push	 eax
  000a8	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _MapServer$[ebp]
  000ae	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 96   : 	xml_node MoveList	= MapServer.child("movelist");

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_08GNJIAMHD@movelist?$AA@
  000b8	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _MoveList$[ebp]
  000be	50		 push	 eax
  000bf	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _MapServer$[ebp]
  000c5	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 97   : 	xml_node Node;

  000ca	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  000d0	e8 00 00 00 00	 call	 ??0xml_node@pugi@@QAE@XZ ; pugi::xml_node::xml_node

; 98   : 	// ----
; 99   : 	for( Node = ServerList.child("server"); Node; Node = Node.next_sibling())

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_06HJHJCKIO@server?$AA@
  000da	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  000e0	50		 push	 eax
  000e1	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _ServerList$[ebp]
  000e7	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000ec	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  000f2	8b 00		 mov	 eax, DWORD PTR [eax]
  000f4	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Node$[ebp], eax
  000fa	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000ff	85 c0		 test	 eax, eax
  00101	0f 84 d8 01 00
	00		 je	 $LN3@LoadData
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@LoadData:

; 100  : 	{
; 101  : 		short ServerCode = Node.attribute("servercode").as_int(-1);

  00110	6a ff		 push	 -1
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FPLBPMP@servercode?$AA@
  00117	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0011d	50		 push	 eax
  0011e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00124	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00129	8b c8		 mov	 ecx, eax
  0012b	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 102  : 		short ServerGroup = Node.attribute("group").as_int();

  00130	6a 00		 push	 0
  00132	0f b7 f0	 movzx	 esi, ax
  00135	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_05MGJOOGAJ@group?$AA@
  00140	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00146	89 b5 08 ff ff
	ff		 mov	 DWORD PTR _ServerCode$1$[ebp], esi
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00152	8b c8		 mov	 ecx, eax
  00154	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  00159	0f b7 c0	 movzx	 eax, ax

; 103  : 		int InitSet = Node.attribute("init").as_int();

  0015c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00162	6a 00		 push	 0
  00164	89 85 1c ff ff
	ff		 mov	 DWORD PTR _ServerGroup$1$[ebp], eax
  0016a	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00170	68 00 00 00 00	 push	 OFFSET ??_C@_04HKFDNBLD@init?$AA@
  00175	50		 push	 eax
  00176	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0017b	8b c8		 mov	 ecx, eax
  0017d	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 104  : 		WORD ServerPort = Node.attribute("port").as_int();

  00182	6a 00		 push	 0
  00184	8b d8		 mov	 ebx, eax
  00186	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_04LPGMAPLE@port?$AA@
  00191	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0019d	8b c8		 mov	 ecx, eax
  0019f	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  001a4	0f b7 c0	 movzx	 eax, ax
  001a7	89 85 04 ff ff
	ff		 mov	 DWORD PTR _ServerPort$1$[ebp], eax

; 105  : 		// ----
; 106  : 		if( ServerCode < 0 )

  001ad	66 85 f6	 test	 si, si
  001b0	0f 88 8b 02 00
	00		 js	 $LN527@LoadData

; 109  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 110  : 			return FALSE;
; 111  : 		}
; 112  : 		// ----
; 113  : 		if( InitSet != -1 && InitSet != 0 && InitSet != 1 )

  001b6	83 fb ff	 cmp	 ebx, -1
  001b9	74 0d		 je	 SHORT $LN12@LoadData
  001bb	85 db		 test	 ebx, ebx
  001bd	74 09		 je	 SHORT $LN12@LoadData
  001bf	83 fb 01	 cmp	 ebx, 1
  001c2	0f 85 20 02 00
	00		 jne	 $LN528@LoadData
$LN12@LoadData:

; 116  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 117  : 			return FALSE;
; 118  : 		}
; 119  : 		// ----
; 120  : 		if( CHECK_LIMIT(ServerGroup, MAX_MAP_GROUPS) == FALSE )

  001c8	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _ServerGroup$1$[ebp]
  001ce	66 85 c9	 test	 cx, cx
  001d1	0f 88 45 02 00
	00		 js	 $LN529@LoadData
  001d7	33 c0		 xor	 eax, eax
  001d9	66 83 f9 13	 cmp	 cx, 19			; 00000013H
  001dd	0f 9e c0	 setle	 al
  001e0	85 c0		 test	 eax, eax
  001e2	0f 84 34 02 00
	00		 je	 $LN529@LoadData

; 123  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 124  : 			return FALSE;
; 125  : 		}
; 126  : 		// ----
; 127  : 		if( this->m_iMAPSVR_GROUP_COUNT[ServerGroup] >= MAX_MAP_SUBGROUPS )

  001e8	0f bf c1	 movsx	 eax, cx
  001eb	8d 88 a2 5a 00
	00		 lea	 ecx, DWORD PTR [eax+23202]
  001f1	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  001f4	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv1476[ebp], ecx
  001fa	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001fc	83 f9 14	 cmp	 ecx, 20			; 00000014H
  001ff	0f 8d f2 01 00
	00		 jge	 $LN530@LoadData

; 130  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 131  : 			return FALSE;
; 132  : 		}
; 133  : 		// ----
; 134  : 		_MAPSVR_DATA* lpMapSvrData = NULL;
; 135  : 		lpMapSvrData = &this->m_MAPSVR_DATA[ServerGroup][this->m_iMAPSVR_GROUP_COUNT[ServerGroup]];

  00205	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00208	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0020b	69 c0 e8 00 00
	00		 imul	 eax, eax, 232
  00211	8d 77 08	 lea	 esi, DWORD PTR [edi+8]

; 136  : 		lpMapSvrData->Clear(InitSet);

  00214	53		 push	 ebx
  00215	03 f0		 add	 esi, eax
  00217	8b ce		 mov	 ecx, esi
  00219	e8 00 00 00 00	 call	 ?Clear@_MAPSVR_DATA@@QAEXH@Z ; _MAPSVR_DATA::Clear

; 137  : 		lpMapSvrData->m_bIN_USE = TRUE;
; 138  : 		lpMapSvrData->m_sSVR_CODE = ServerCode;

  0021e	8b 9d 08 ff ff
	ff		 mov	 ebx, DWORD PTR _ServerCode$1$[ebp]

; 141  : 		memcpy(lpMapSvrData->m_cIPADDR, Node.attribute("ip").as_string(), 16);

  00224	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  0022a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _ServerGroup$1$[ebp]
  00230	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  00237	66 89 5e 0a	 mov	 WORD PTR [esi+10], bx
  0023b	88 46 08	 mov	 BYTE PTR [esi+8], al
  0023e	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _ServerPort$1$[ebp]
  00244	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00249	66 89 46 1c	 mov	 WORD PTR [esi+28], ax
  0024d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_02GIIHKPLE@ip?$AA@
  00258	50		 push	 eax
  00259	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0025e	8b c8		 mov	 ecx, eax
  00260	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00265	8d 8f d8 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92888]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0026b	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR $T4[ebp+4], esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 141  : 		memcpy(lpMapSvrData->m_cIPADDR, Node.attribute("ip").as_string(), 16);

  00271	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00274	0f bf c3	 movsx	 eax, bx
  00277	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0027d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 141  : 		memcpy(lpMapSvrData->m_cIPADDR, Node.attribute("ip").as_string(), 16);

  00283	0f 11 46 0c	 movups	 XMMWORD PTR [esi+12], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00287	50		 push	 eax
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 142  : 		lpMapSvrData->m_cIPADDR[15] = 0;

  00288	c6 46 1b 00	 mov	 BYTE PTR [esi+27], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0028c	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HPAU_MAPSVR_DATA@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@$$QAU?$pair@HPAU_MAPSVR_DATA@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buynode<std::pair<int,_MAPSVR_DATA *> >

; 1094 : 		return (_Insert_nohint(false,

  00291	50		 push	 eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00292	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00295	8d 8f d8 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92888]
  0029b	50		 push	 eax
  0029c	6a 00		 push	 0
  0029e	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHPAU_MAPSVR_DATA@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Insert_nohint<std::pair<int const ,_MAPSVR_DATA *> &,std::_Tree_node<std::pair<int const ,_MAPSVR_DATA *>,void *> *>
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 144  : 		this->m_iMAPSVR_GROUP_COUNT[ServerGroup]++;

  002aa	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv1476[ebp]
  002b0	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  002b6	ff 00		 inc	 DWORD PTR [eax]
  002b8	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  002c4	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  002ca	8b 00		 mov	 eax, DWORD PTR [eax]
  002cc	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Node$[ebp], eax
  002d2	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  002d7	85 c0		 test	 eax, eax
  002d9	0f 85 31 fe ff
	ff		 jne	 $LL4@LoadData
$LN3@LoadData:

; 145  : 	}
; 146  : 	// ----
; 147  : 	for( Node = MoveList.child("move"); Node; Node = Node.next_sibling())

  002df	68 00 00 00 00	 push	 OFFSET ??_C@_04HDMMNHEL@move?$AA@
  002e4	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  002ea	50		 push	 eax
  002eb	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _MoveList$[ebp]
  002f1	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  002f6	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  002fc	8b 00		 mov	 eax, DWORD PTR [eax]
  002fe	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Node$[ebp], eax
  00304	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00309	85 c0		 test	 eax, eax
  0030b	0f 84 26 02 00
	00		 je	 $LN6@LoadData
$LL7@LoadData:

; 148  : 	{
; 149  : 		short ServerCode = Node.attribute("servercode").as_int(-1);

  00311	6a ff		 push	 -1
  00313	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FPLBPMP@servercode?$AA@
  00318	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0031e	50		 push	 eax
  0031f	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00325	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 150  : 		BYTE MoveState = Node.attribute("movestate").as_int(0);

  00331	6a 00		 push	 0
  00333	0f b7 d8	 movzx	 ebx, ax
  00336	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_09EBALFLAB@movestate?$AA@
  00341	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00347	50		 push	 eax
  00348	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0034d	8b c8		 mov	 ecx, eax
  0034f	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 151  : 		WORD MapNumber = Node.attribute("map").as_int(-1);

  00354	6a ff		 push	 -1
  00356	88 85 23 ff ff
	ff		 mov	 BYTE PTR _MoveState$1$[ebp], al
  0035c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00362	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map?$AA@
  00367	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  0037a	0f b7 c0	 movzx	 eax, ax

; 152  : 		short DestServerCode = Node.attribute("destservercode").as_int(-1);

  0037d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00383	6a ff		 push	 -1
  00385	89 85 1c ff ff
	ff		 mov	 DWORD PTR _MapNumber$1$[ebp], eax
  0038b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00391	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FJOBMGMB@destservercode?$AA@
  00396	50		 push	 eax
  00397	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0039c	8b c8		 mov	 ecx, eax
  0039e	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  003a3	0f b7 c0	 movzx	 eax, ax
  003a6	89 85 18 ff ff
	ff		 mov	 DWORD PTR _DestServerCode$1$[ebp], eax

; 153  : 		_MAPSVR_DATA* lpMapSvrData = NULL;
; 154  : 		// ----
; 155  : 		if( ServerCode < 0 )

  003ac	66 85 db	 test	 bx, bx
  003af	0f 88 7a 02 00
	00		 js	 $LN531@LoadData

; 158  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 159  : 			return FALSE;
; 160  : 		}
; 161  : 		// ----
; 162  : 		if( DestServerCode < -2 )

  003b5	66 83 f8 fe	 cmp	 ax, -2			; fffffffeH
  003b9	0f 8c 63 02 00
	00		 jl	 $LN532@LoadData
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  003bf	8b 8f d8 6a 01
	00		 mov	 ecx, DWORD PTR [edi+92888]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  003c5	8b c1		 mov	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 169  : 		std::map<int, _MAPSVR_DATA*>::iterator it = this->m_mapSVRCODE_MAP.find(ServerCode);

  003c7	0f bf f3	 movsx	 esi, bx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2088 : 		_Nodeptr _Pnode = _Root();

  003ca	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  003cd	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  003d1	0f 85 9d 00 00
	00		 jne	 $LN84@LoadData
$LL83@LoadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  003d7	39 72 10	 cmp	 DWORD PTR [edx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  003da	0f 8d 86 00 00
	00		 jge	 $LN85@LoadData

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  003e0	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 2094 : 			else

  003e3	e9 82 00 00 00	 jmp	 $LN86@LoadData
$LN528@LoadData:
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 115  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : iInitSetting Value:%d (SVR:%d) - 1", InitSet, ServerCode);

  003e8	0f bf c6	 movsx	 eax, si
  003eb	50		 push	 eax
  003ec	53		 push	 ebx
  003ed	68 00 00 00 00	 push	 OFFSET ??_C@_0GE@MEENNMEP@?$FLMapServerMng?$FN?5CMapServerManager@
  003f2	e9 a8 02 00 00	 jmp	 $LN553@LoadData
$LN530@LoadData:

; 128  : 		{
; 129  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : No Space to Save SvrInfo (SVR:%d)", ServerCode);

  003f7	0f bf c6	 movsx	 eax, si
  003fa	50		 push	 eax
  003fb	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@GJEAEGDB@?$FLMapServerMng?$FN?5CMapServerManager@
  00400	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00405	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  00408	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  0040e	50		 push	 eax
  0040f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00415	33 f6		 xor	 esi, esi
  00417	e9 a8 02 00 00	 jmp	 $LN48@LoadData
$LN529@LoadData:

; 121  : 		{
; 122  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : Map Server Group Index (IDX:%d)", ServerGroup);

  0041c	0f bf c1	 movsx	 eax, cx
  0041f	50		 push	 eax
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@OFMELGHA@?$FLMapServerMng?$FN?5CMapServerManager@
  00425	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0042a	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0042d	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00433	50		 push	 eax
  00434	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0043a	33 f6		 xor	 esi, esi
  0043c	e9 83 02 00 00	 jmp	 $LN48@LoadData
$LN527@LoadData:

; 107  : 		{
; 108  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE < 0 (SVR:%d) - 1", ServerCode);

  00441	0f bf c6	 movsx	 eax, si
  00444	50		 push	 eax
  00445	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@FPCKBNHE@?$FLMapServerMng?$FN?5CMapServerManager@
  0044a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0044f	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  00452	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00458	50		 push	 eax
  00459	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0045f	33 f6		 xor	 esi, esi
  00461	e9 5e 02 00 00	 jmp	 $LN48@LoadData
$LN85@LoadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2096 : 				_Wherenode = _Pnode;

  00466	8b c2		 mov	 eax, edx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00468	8b 12		 mov	 edx, DWORD PTR [edx]
$LN86@LoadData:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  0046a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0046e	0f 84 63 ff ff
	ff		 je	 $LL83@LoadData
$LN84@LoadData:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00474	3b c1		 cmp	 eax, ecx

; 1487 : 		return (_Where == end()

  00476	74 05		 je	 SHORT $LN69@LoadData
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00478	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  0047b	7d 02		 jge	 SHORT $LN213@LoadData
$LN69@LoadData:

; 43   : 		: _Ptr(_Pnode)

  0047d	8b c1		 mov	 eax, ecx
$LN213@LoadData:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0047f	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 171  : 		if( it == this->m_mapSVRCODE_MAP.end() )

  00481	0f 84 76 01 00
	00		 je	 $LN533@LoadData

; 174  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 175  : 			return FALSE;
; 176  : 		}
; 177  : 		// ----
; 178  : 		lpMapSvrData = it->second;

  00487	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]

; 179  : 		// ----
; 180  : 		if( lpMapSvrData == NULL )

  0048a	85 c9		 test	 ecx, ecx
  0048c	0f 84 46 01 00
	00		 je	 $LN534@LoadData

; 183  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 184  : 			return FALSE;
; 185  : 		}
; 186  : 		// ----
; 187  : 		if( lpMapSvrData->m_bIN_USE == FALSE )

  00492	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00496	0f 84 17 01 00
	00		 je	 $LN535@LoadData

; 190  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 191  : 			return FALSE;
; 192  : 		}
; 193  : 		// ----
; 194  : 		if( lpMapSvrData->m_sSVR_CODE != ServerCode )

  0049c	66 39 59 0a	 cmp	 WORD PTR [ecx+10], bx
  004a0	0f 85 e8 00 00
	00		 jne	 $LN536@LoadData

; 197  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 198  : 			return FALSE;
; 199  : 		}
; 200  : 		// ----
; 201  : 		if( MoveState != 0 && MoveState != 1 )

  004a6	8a 95 23 ff ff
	ff		 mov	 dl, BYTE PTR _MoveState$1$[ebp]
  004ac	84 d2		 test	 dl, dl
  004ae	74 09		 je	 SHORT $LN21@LoadData
  004b0	80 fa 01	 cmp	 dl, 1
  004b3	0f 85 ab 00 00
	00		 jne	 $LN537@LoadData
$LN21@LoadData:

; 204  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 205  : 			return FALSE;
; 206  : 		}
; 207  : 		// ----
; 208  : 		if( CHECK_LIMIT(MapNumber, MAX_NUMBER_MAP) == FALSE )

  004b9	66 b8 63 00	 mov	 ax, 99			; 00000063H
  004bd	66 3b 85 1c ff
	ff ff		 cmp	 ax, WORD PTR _MapNumber$1$[ebp]
  004c4	1b c0		 sbb	 eax, eax
  004c6	83 c0 01	 add	 eax, 1
  004c9	0f 84 a7 00 00
	00		 je	 $LN538@LoadData

; 211  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 212  : 			return FALSE;
; 213  : 		}
; 214  : 		// ----			
; 215  : 		switch( MoveState )

  004cf	0f b6 d2	 movzx	 edx, dl
  004d2	8b c2		 mov	 eax, edx
  004d4	83 e8 00	 sub	 eax, 0
  004d7	74 1d		 je	 SHORT $LN23@LoadData
  004d9	83 e8 01	 sub	 eax, 1
  004dc	74 11		 je	 SHORT $LN24@LoadData

; 223  : 			default:
; 224  : 				MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d, OPT:%d)", ServerCode, MoveState);

  004de	52		 push	 edx
  004df	56		 push	 esi
  004e0	68 00 00 00 00	 push	 OFFSET ??_C@_0HJ@HNGNAGOE@?$FLMapServerMng?$FN?5CMapServerManager@
  004e5	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  004ea	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ed	eb 1b		 jmp	 SHORT $LN5@LoadData
$LN24@LoadData:

; 219  : 				break;
; 220  : 			case 1:
; 221  : 				lpMapSvrData->m_sMAP_MOVE[MapNumber] = -3;

  004ef	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH

; 222  : 				break;

  004f4	eb 06		 jmp	 SHORT $LN555@LoadData
$LN23@LoadData:

; 216  : 		{
; 217  : 			case 0:
; 218  : 				lpMapSvrData->m_sMAP_MOVE[MapNumber] = DestServerCode;

  004f6	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR _DestServerCode$1$[ebp]
$LN555@LoadData:
  004fc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _MapNumber$1$[ebp]
  00502	0f b7 c0	 movzx	 eax, ax
  00505	66 89 54 41 1e	 mov	 WORD PTR [ecx+eax*2+30], dx
$LN5@LoadData:

; 145  : 	}
; 146  : 	// ----
; 147  : 	for( Node = MoveList.child("move"); Node; Node = Node.next_sibling())

  0050a	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00510	50		 push	 eax
  00511	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00517	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  0051c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$[ebp]
  00522	8b 00		 mov	 eax, DWORD PTR [eax]
  00524	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Node$[ebp], eax
  0052a	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  0052f	85 c0		 test	 eax, eax
  00531	0f 85 da fd ff
	ff		 jne	 $LL7@LoadData
$LN6@LoadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00537	8b 8f d8 6a 01
	00		 mov	 ecx, DWORD PTR [edi+92888]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  0053d	8b c1		 mov	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 229  : 	std::map<int, _MAPSVR_DATA*>::iterator it = this->m_mapSVRCODE_MAP.find(gGameServerCode);

  0053f	0f bf 35 00 00
	00 00		 movsx	 esi, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2088 : 		_Nodeptr _Pnode = _Root();

  00546	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00549	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0054d	0f 85 0c 01 00
	00		 jne	 $LN311@LoadData
$LL310@LoadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00553	39 72 10	 cmp	 DWORD PTR [edx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00556	0f 8d f5 00 00
	00		 jge	 $LN312@LoadData

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0055c	8b 52 08	 mov	 edx, DWORD PTR [edx+8]

; 2094 : 			else

  0055f	e9 f1 00 00 00	 jmp	 $LN313@LoadData
$LN537@LoadData:
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 203  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d, OPT:%d)", ServerCode, MoveState);

  00564	0f b6 c2	 movzx	 eax, dl
  00567	50		 push	 eax
  00568	0f bf cb	 movsx	 ecx, bx
  0056b	51		 push	 ecx
  0056c	68 00 00 00 00	 push	 OFFSET ??_C@_0HJ@HNGNAGOE@?$FLMapServerMng?$FN?5CMapServerManager@
  00571	e9 29 01 00 00	 jmp	 $LN553@LoadData
$LN538@LoadData:

; 209  : 		{
; 210  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : Map Number is out of bound (SVR:%d, MAP:%d)", ServerCode, MapNumber);

  00576	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _MapNumber$1$[ebp]
  0057c	0f b7 c0	 movzx	 eax, ax
  0057f	50		 push	 eax
  00580	0f bf cb	 movsx	 ecx, bx
  00583	51		 push	 ecx
  00584	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@OFPCNONA@?$FLMapServerMng?$FN?5CMapServerManager@
  00589	e9 11 01 00 00	 jmp	 $LN553@LoadData
$LN536@LoadData:

; 195  : 		{
; 196  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d)", ServerCode);

  0058e	0f bf c3	 movsx	 eax, bx
  00591	50		 push	 eax
  00592	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@PMNAKCMJ@?$FLMapServerMng?$FN?5CMapServerManager@
  00597	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0059c	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0059f	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  005a5	50		 push	 eax
  005a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  005ac	33 f6		 xor	 esi, esi
  005ae	e9 11 01 00 00	 jmp	 $LN48@LoadData
$LN535@LoadData:

; 188  : 		{
; 189  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_bIN_USE == FALSE (SVR:%d)", ServerCode);

  005b3	0f bf c3	 movsx	 eax, bx
  005b6	50		 push	 eax
  005b7	68 00 00 00 00	 push	 OFFSET ??_C@_0GL@LAJNEJB@?$FLMapServerMng?$FN?5CMapServerManager@
  005bc	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  005c1	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  005c4	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  005ca	50		 push	 eax
  005cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  005d1	33 f6		 xor	 esi, esi
  005d3	e9 ec 00 00 00	 jmp	 $LN48@LoadData
$LN534@LoadData:

; 181  : 		{
; 182  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData == NULL (SVR:%d)", ServerCode);

  005d8	0f bf c3	 movsx	 eax, bx
  005db	50		 push	 eax
  005dc	68 00 00 00 00	 push	 OFFSET ??_C@_0FP@BNNDCEBC@?$FLMapServerMng?$FN?5CMapServerManager@
  005e1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  005e6	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  005e9	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  005ef	50		 push	 eax
  005f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  005f6	33 f6		 xor	 esi, esi
  005f8	e9 c7 00 00 00	 jmp	 $LN48@LoadData
$LN533@LoadData:

; 172  : 		{
; 173  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE wasn't registered (SVR:%d)", ServerCode);

  005fd	0f bf c3	 movsx	 eax, bx
  00600	50		 push	 eax
  00601	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@ONBCFDCN@?$FLMapServerMng?$FN?5CMapServerManager@
  00606	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0060b	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  0060e	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00614	50		 push	 eax
  00615	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0061b	33 f6		 xor	 esi, esi
  0061d	e9 a2 00 00 00	 jmp	 $LN48@LoadData
$LN532@LoadData:

; 163  : 		{
; 164  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sDEST_SVR_CODE < -1 (SVR:%d, DEST_SVR:%d) - 2", ServerCode, DestServerCode);

  00622	98		 cwde
  00623	50		 push	 eax
  00624	0f bf cb	 movsx	 ecx, bx
  00627	51		 push	 ecx
  00628	68 00 00 00 00	 push	 OFFSET ??_C@_0GP@JAAIOOFD@?$FLMapServerMng?$FN?5CMapServerManager@
  0062d	eb 70		 jmp	 SHORT $LN553@LoadData
$LN531@LoadData:

; 156  : 		{
; 157  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE < 0 (SVR:%d) - 2", ServerCode);

  0062f	0f bf c3	 movsx	 eax, bx
  00632	50		 push	 eax
  00633	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@HEAHEOLH@?$FLMapServerMng?$FN?5CMapServerManager@
  00638	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0063d	83 c4 08	 add	 esp, 8

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  00640	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00646	50		 push	 eax
  00647	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0064d	33 f6		 xor	 esi, esi
  0064f	eb 73		 jmp	 SHORT $LN48@LoadData
$LN312@LoadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2096 : 				_Wherenode = _Pnode;

  00651	8b c2		 mov	 eax, edx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00653	8b 12		 mov	 edx, DWORD PTR [edx]
$LN313@LoadData:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00655	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00659	0f 84 f4 fe ff
	ff		 je	 $LL310@LoadData
$LN311@LoadData:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0065f	3b c1		 cmp	 eax, ecx

; 1487 : 		return (_Where == end()

  00661	74 05		 je	 SHORT $LN296@LoadData
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00663	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  00666	7d 02		 jge	 SHORT $LN440@LoadData
$LN296@LoadData:

; 43   : 		: _Ptr(_Pnode)

  00668	8b c1		 mov	 eax, ecx
$LN440@LoadData:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0066a	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 231  : 	if( it != this->m_mapSVRCODE_MAP.end() )

  0066c	74 0b		 je	 SHORT $LN26@LoadData

; 232  : 	{
; 233  : 		this->m_lpThisMapSvrData = it->second;

  0066e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00671	89 87 f8 6a 01
	00		 mov	 DWORD PTR [edi+92920], eax

; 234  : 	}
; 235  : 	else

  00677	eb 0a		 jmp	 SHORT $LN27@LoadData
$LN26@LoadData:

; 236  : 	{
; 237  : 		this->m_lpThisMapSvrData = NULL;

  00679	c7 87 f8 6a 01
	00 00 00 00 00	 mov	 DWORD PTR [edi+92920], 0
$LN27@LoadData:

; 238  : 	}
; 239  : 	// ----
; 240  : 	if( this->m_lpThisMapSvrData == NULL )

  00683	83 bf f8 6a 01
	00 00		 cmp	 DWORD PTR [edi+92920], 0
  0068a	75 2c		 jne	 SHORT $LN28@LoadData

; 241  : 	{
; 242  : 		MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : This GameServerCode (%d) doesn't Exist at file '%s' != sSVR_CODE", gGameServerCode, lpszFileName);

  0068c	ff b5 fc fe ff
	ff		 push	 DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  00692	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode
  00699	50		 push	 eax
  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_0IC@BIPGFAJD@?$FLMapServerMng?$FN?5CMapServerManager@
$LN553@LoadData:
  0069f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  006a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);

  006a7	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  006ad	50		 push	 eax
  006ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  006b4	33 f6		 xor	 esi, esi
  006b6	eb 0c		 jmp	 SHORT $LN48@LoadData
$LN28@LoadData:

; 244  : 		return FALSE;
; 245  : 	}
; 246  : 	// ----
; 247  : 	this->m_bMapDataLoadOk = TRUE;

  006b8	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1

; 248  : 	return TRUE;

  006bf	be 01 00 00 00	 mov	 esi, 1
$LN48@LoadData:
  006c4	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  006ca	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  006cf	8b c6		 mov	 eax, esi

; 249  : 
; 250  : 	/*if ( (lpszFileName == NULL) || ( strcmp(lpszFileName, "")== 0 ) ) 
; 251  : 	{
; 252  : 		MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : File Name Error");
; 253  : 		return FALSE;
; 254  : 	}
; 255  : 
; 256  : 	EnterCriticalSection(&this->m_critSVRCODE_MAP);
; 257  : 
; 258  : 	try
; 259  : 	{
; 260  : 		this->Clear();
; 261  : 
; 262  : 		SMDFile = fopen(lpszFileName, "r");
; 263  : 
; 264  : 		if ( SMDFile == NULL )
; 265  : 		{
; 266  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : fopen() : %s",
; 267  : 				lpszFileName);
; 268  : 
; 269  : 			return FALSE;
; 270  : 		}
; 271  : 
; 272  : 		int type = -1;
; 273  : 		SMDToken Token;
; 274  : 		
; 275  : 		while ( true )
; 276  : 		{
; 277  : 			Token = GetToken();
; 278  : 
; 279  : 			if ( Token == END )
; 280  : 				break;
; 281  : 
; 282  : 			type = (int)TokenNumber;
; 283  : 
; 284  : 			while ( true )
; 285  : 			{
; 286  : 				if ( type == 0 )
; 287  : 				{
; 288  : 					short sSVR_CODE = -1;
; 289  : 					short sMAPSVR_GROUP = -1;
; 290  : 					int iInitSetVal = 1;
; 291  : 					char szIpAddr[16]={0};
; 292  : 					WORD wPortNum = 0;
; 293  : 					
; 294  : 					Token = GetToken();
; 295  : 
; 296  : 					if ( !strcmp("end", TokenString))
; 297  : 						break;
; 298  : 
; 299  : 					sSVR_CODE = (short)TokenNumber;
; 300  : 
; 301  : 					Token = GetToken();
; 302  : 					sMAPSVR_GROUP = (short)TokenNumber;
; 303  : 
; 304  : 					Token = GetToken();
; 305  : 					iInitSetVal = (int)TokenNumber;
; 306  : 
; 307  : 					Token = GetToken();
; 308  : 					memcpy(szIpAddr, &TokenString[1], 16);
; 309  : 					szIpAddr[15] =0;
; 310  : 
; 311  : 					Token = GetToken();
; 312  : 					wPortNum = (WORD)TokenNumber;
; 313  : 
; 314  : 					if ( sSVR_CODE < 0 )
; 315  : 					{
; 316  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE < 0 (SVR:%d) - 1",
; 317  : 							sSVR_CODE);
; 318  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 319  : 						return FALSE;
; 320  : 					}
; 321  : 
; 322  : 					if ( iInitSetVal != -1 && iInitSetVal != 0 && iInitSetVal != 1 )
; 323  : 					{
; 324  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : iInitSetting Value:%d (SVR:%d) - 1",
; 325  : 							iInitSetVal, sSVR_CODE);
; 326  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 327  : 						return FALSE;
; 328  : 					}
; 329  : 
; 330  : 					if ( !strcmp(szIpAddr, ""))
; 331  : 					{
; 332  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : No IpAddress (SVR:%d)",
; 333  : 							sSVR_CODE);
; 334  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 335  : 						return FALSE;
; 336  : 					}
; 337  : 
; 338  : 					if ( CHECK_LIMIT(sMAPSVR_GROUP, MAX_MAP_GROUPS) == FALSE )
; 339  : 					{
; 340  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : Map Server Group Index (IDX:%d)",
; 341  : 							sMAPSVR_GROUP);
; 342  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 343  : 						return FALSE;
; 344  : 					}
; 345  : 
; 346  : 					if ( this->m_iMAPSVR_GROUP_COUNT[sMAPSVR_GROUP] >= MAX_MAP_SUBGROUPS )
; 347  : 					{
; 348  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : No Space to Save SvrInfo (SVR:%d)",
; 349  : 							sSVR_CODE);
; 350  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 351  : 						return FALSE;
; 352  : 					}
; 353  : 
; 354  : 					_MAPSVR_DATA * lpMapSvrData = NULL;
; 355  : 					lpMapSvrData= &this->m_MAPSVR_DATA[sMAPSVR_GROUP][this->m_iMAPSVR_GROUP_COUNT[sMAPSVR_GROUP]];
; 356  : 
; 357  : 					lpMapSvrData->Clear(iInitSetVal);
; 358  : 					lpMapSvrData->m_bIN_USE = TRUE;
; 359  : 					lpMapSvrData->m_sSVR_CODE = sSVR_CODE;
; 360  : 					lpMapSvrData->m_btMAPSVR_GROUP = (BYTE)sMAPSVR_GROUP;
; 361  : 					lpMapSvrData->m_wPORT = wPortNum;
; 362  : 					memcpy(lpMapSvrData->m_cIPADDR, szIpAddr, 16);
; 363  : 					lpMapSvrData->m_cIPADDR[15] = 0;
; 364  : 					
; 365  : 					this->m_mapSVRCODE_MAP.insert(std::pair<int,_MAPSVR_DATA *>(sSVR_CODE, lpMapSvrData));
; 366  : 					this->m_iMAPSVR_GROUP_COUNT[sMAPSVR_GROUP]++;
; 367  : 				}
; 368  : 				else if ( type == 1 )
; 369  : 				{
; 370  : 					short sSVR_CODE = -1;
; 371  : 					BYTE btNotMoveOption = 0;
; 372  : 					WORD wMapNum = 0;
; 373  : 					short sDEST_SVR_CODE = -1;
; 374  : 					_MAPSVR_DATA * lpMapSvrData = NULL;
; 375  : 
; 376  : 					Token = GetToken();
; 377  : 
; 378  : 					if ( !strcmp("end", TokenString))
; 379  : 						break;
; 380  : 
; 381  : 					sSVR_CODE = (short)TokenNumber;
; 382  : 
; 383  : 					Token = GetToken();
; 384  : 					btNotMoveOption = (BYTE)TokenNumber;
; 385  : 
; 386  : 					Token = GetToken();
; 387  : 					wMapNum = (WORD)TokenNumber;
; 388  : 
; 389  : 					Token = GetToken();
; 390  : 					sDEST_SVR_CODE = (short)TokenNumber;
; 391  : 					
; 392  : 					if ( sSVR_CODE < 0 )
; 393  : 					{
; 394  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE < 0 (SVR:%d) - 2",
; 395  : 							sSVR_CODE);
; 396  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 397  : 						return FALSE;
; 398  : 					}
; 399  : 
; 400  : 					if ( sDEST_SVR_CODE < -2 )
; 401  : 					{
; 402  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sDEST_SVR_CODE < -1 (SVR:%d, DEST_SVR:%d) - 2",
; 403  : 							sSVR_CODE, sDEST_SVR_CODE);
; 404  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 405  : 						return FALSE;
; 406  : 					}
; 407  : 
; 408  : 					std::map<int  ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(sSVR_CODE);
; 409  : 
; 410  : 					if ( it == this->m_mapSVRCODE_MAP.end() )
; 411  : 					{
; 412  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : sSVR_CODE wasn't registered (SVR:%d)",
; 413  : 							sSVR_CODE);
; 414  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 415  : 						return FALSE;
; 416  : 					}
; 417  : 
; 418  : 					lpMapSvrData = it->second;
; 419  : 	
; 420  : 					if ( lpMapSvrData == NULL )
; 421  : 					{
; 422  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData == NULL (SVR:%d)",
; 423  : 							sSVR_CODE);
; 424  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 425  : 						return FALSE;
; 426  : 					}
; 427  : 
; 428  : 					if ( lpMapSvrData->m_bIN_USE == FALSE )
; 429  : 					{
; 430  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_bIN_USE == FALSE (SVR:%d)",
; 431  : 							sSVR_CODE);
; 432  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 433  : 						return FALSE;
; 434  : 					}
; 435  : 
; 436  : 					if ( lpMapSvrData->m_sSVR_CODE != sSVR_CODE )
; 437  : 					{
; 438  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d)",
; 439  : 							sSVR_CODE);
; 440  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 441  : 						return FALSE;
; 442  : 					}
; 443  : 
; 444  : 					if ( btNotMoveOption != 0 && btNotMoveOption != 1 )
; 445  : 					{
; 446  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d, OPT:%d)",
; 447  : 							sSVR_CODE, btNotMoveOption);
; 448  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 449  : 						return FALSE;
; 450  : 					}
; 451  : 
; 452  : 					if ( CHECK_LIMIT(wMapNum, MAX_NUMBER_MAP) == FALSE )
; 453  : 					{
; 454  : 						MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : Map Number is out of bound (SVR:%d, MAP:%d)",
; 455  : 							sSVR_CODE, wMapNum);
; 456  : 						LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 457  : 						return FALSE;
; 458  : 					}
; 459  : 
; 460  : 					
; 461  : 					switch ( btNotMoveOption )
; 462  : 					{
; 463  : 						case 0:
; 464  : 							lpMapSvrData->m_sMAP_MOVE[wMapNum] = sDEST_SVR_CODE;
; 465  : 							break;
; 466  : 						case 1:
; 467  : 							lpMapSvrData->m_sMAP_MOVE[wMapNum] = -3;
; 468  : 							break;
; 469  : 						default:
; 470  : 							MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : lpMapSvrData->m_sSVR_CODE != sSVR_CODE (SVR:%d, OPT:%d)",
; 471  : 								sSVR_CODE, btNotMoveOption);
; 472  : 							break;
; 473  : 					}
; 474  : 				}	// if type
; 475  : 			}	// while ( true )
; 476  : 		}	// while ( true )
; 477  : 		
; 478  : 		fclose(SMDFile);
; 479  : 
; 480  : 		std::map<int  ,_MAPSVR_DATA *>::iterator it = this->m_mapSVRCODE_MAP.find(gGameServerCode);
; 481  : 
; 482  : 		if ( it != this->m_mapSVRCODE_MAP.end() )
; 483  : 		{
; 484  : 			this->m_lpThisMapSvrData = it->second;
; 485  : 		}
; 486  : 		else
; 487  : 		{
; 488  : 			this->m_lpThisMapSvrData = NULL;
; 489  : 		}
; 490  : 
; 491  : 		if ( this->m_lpThisMapSvrData == NULL )
; 492  : 		{
; 493  : 			MsgBox("[MapServerMng] CMapServerManager::LoadData() - file load error : This GameServerCode (%d) doesn't Exist at file '%s' != sSVR_CODE",
; 494  : 				gGameServerCode, lpszFileName);
; 495  : 			LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 496  : 			return FALSE;
; 497  : 		}
; 498  : 		this->m_bMapDataLoadOk = TRUE;
; 499  : 	}
; 500  : 	catch(...)
; 501  : 	{
; 502  : 		LeaveCriticalSection(&this->m_critSVRCODE_MAP);
; 503  : 	}
; 504  : 	return TRUE;*/
; 505  : }

  006d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006db	59		 pop	 ecx
  006dc	5f		 pop	 edi
  006dd	5e		 pop	 esi
  006de	5b		 pop	 ebx
  006df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006e2	33 cd		 xor	 ecx, ebp
  006e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006e9	8b e5		 mov	 esp, ebp
  006eb	5d		 pop	 ebp
  006ec	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadData@CMapServerManager@@QAEHPAD@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?LoadData@CMapServerManager@@QAEHPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CMapServerManager@@QAEHPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CMapServerManager@@QAEHPAD@Z ENDP		; CMapServerManager::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?Clear@CMapServerManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
tv522 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clear@CMapServerManager@@QAEXXZ PROC			; CMapServerManager::Clear, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clear@CMapServerManager@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 ec	 mov	 DWORD PTR _this$1$[ebp], eax

; 67   : 	this->m_bMapDataLoadOk = FALSE;

  0002d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00034	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
  00037	8d 98 88 6a 01
	00		 lea	 ebx, DWORD PTR [eax+92808]
  0003d	c7 45 f0 14 00
	00 00		 mov	 DWORD PTR tv522[ebp], 20 ; 00000014H
  00044	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Clear:

; 70   : 	{
; 71   : 		this->m_iMAPSVR_GROUP_COUNT[iGROUP_COUNT] = 0;

  00050	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00056	bf 14 00 00 00	 mov	 edi, 20			; 00000014H
  0005b	0f 1f 44 00 00	 npad	 5
$LL7@Clear:

; 72   : 
; 73   : 		for ( int iSUB_GROUP_COUNT=0;iSUB_GROUP_COUNT<MAX_MAP_SUBGROUPS;iSUB_GROUP_COUNT++)
; 74   : 		{
; 75   : 			this->m_MAPSVR_DATA[iGROUP_COUNT][iSUB_GROUP_COUNT].Clear(1);

  00060	6a 01		 push	 1
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?Clear@_MAPSVR_DATA@@QAEXH@Z ; _MAPSVR_DATA::Clear
  00069	81 c6 e8 00 00
	00		 add	 esi, 232		; 000000e8H
  0006f	83 ef 01	 sub	 edi, 1
  00072	75 ec		 jne	 SHORT $LL7@Clear

; 68   : 
; 69   : 	for ( int iGROUP_COUNT=0;iGROUP_COUNT<MAX_MAP_GROUPS;iGROUP_COUNT++)

  00074	83 c3 04	 add	 ebx, 4
  00077	83 6d f0 01	 sub	 DWORD PTR tv522[ebp], 1
  0007b	75 d3		 jne	 SHORT $LL4@Clear

; 76   : 		}
; 77   : 	}
; 78   : 
; 79   : 	this->m_mapSVRCODE_MAP.clear();

  0007d	8b 7d ec	 mov	 edi, DWORD PTR _this$1$[ebp]
  00080	81 c7 d8 6a 01
	00		 add	 edi, 92888		; 00016ad8H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1477 : 		_Erase(_Root());

  00086	8b 07		 mov	 eax, DWORD PTR [edi]
  00088	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008f	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00092	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00094	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00098	75 23		 jne	 SHORT $LN32@Clear
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL33@Clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  000a0	ff 76 08	 push	 DWORD PTR [esi+8]
  000a3	8b cf		 mov	 ecx, edi
  000a5	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  000aa	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000ac	53		 push	 ebx
  000ad	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000b2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  000b5	8b de		 mov	 ebx, esi
  000b7	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000bb	74 e3		 je	 SHORT $LL33@Clear
$LN32@Clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000bd	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  000bf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  000c2	8b 07		 mov	 eax, DWORD PTR [edi]
  000c4	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000c6	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  000c8	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  000cb	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 80   : }

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clear@CMapServerManager@@QAEXXZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?Clear@CMapServerManager@@QAEXXZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clear@CMapServerManager@@QAEXXZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clear@CMapServerManager@@QAEXXZ ENDP			; CMapServerManager::Clear
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ??1CMapServerManager@@UAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CMapServerManager@@UAE@XZ PROC			; CMapServerManager::~CMapServerManager, COMDAT
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMapServerManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 61   : 	DeleteCriticalSection(&this->m_critSVRCODE_MAP);

  00027	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  0002d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CMapServerManager@@6B@
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0003a	8b 87 d8 6a 01
	00		 mov	 eax, DWORD PTR [edi+92888]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00040	8d 8f d8 6a 01
	00		 lea	 ecx, DWORD PTR [edi+92888]
  00046	50		 push	 eax
  00047	ff 30		 push	 DWORD PTR [eax]
  00049	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00052	ff b7 d8 6a 01
	00		 push	 DWORD PTR [edi+92888]
  00058	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005d	83 c4 04	 add	 esp, 4
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 62   : }

  00060	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00063	68 00 00 00 00	 push	 OFFSET ??1_MAPSVR_DATA@@UAE@XZ ; _MAPSVR_DATA::~_MAPSVR_DATA
  00068	68 90 01 00 00	 push	 400			; 00000190H
  0006d	68 e8 00 00 00	 push	 232			; 000000e8H
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CMapServerManager@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CMapServerManager@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CMapServerManager@@UAE@XZ ENDP			; CMapServerManager::~CMapServerManager
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ??0CMapServerManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CMapServerManager@@QAE@XZ PROC			; CMapServerManager::CMapServerManager, COMDAT
; _this$ = ecx

; 50   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CMapServerManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	68 00 00 00 00	 push	 OFFSET ??1_MAPSVR_DATA@@UAE@XZ ; _MAPSVR_DATA::~_MAPSVR_DATA
  00031	68 00 00 00 00	 push	 OFFSET ??0_MAPSVR_DATA@@QAE@XZ ; _MAPSVR_DATA::_MAPSVR_DATA
  00036	68 90 01 00 00	 push	 400			; 00000190H
  0003b	68 e8 00 00 00	 push	 232			; 000000e8H
  00040	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00043	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CMapServerManager@@6B@
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0004f	8d b7 d8 6a 01
	00		 lea	 esi, DWORD PTR [edi+92888]
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  0005c	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 50   : {

  0005e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00061	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00067	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 717  : 		_Myhead() = _Buyheadnode();

  0006e	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HPAU_MAPSVR_DATA@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAU_MAPSVR_DATA@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_MAPSVR_DATA *,std::less<int>,std::allocator<std::pair<int const ,_MAPSVR_DATA *> >,0> >::_Buyheadnode
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00073	6a 00		 push	 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  00075	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00077	e8 00 00 00 00	 call	 __time64
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp

; 51   : 	srand((DWORD)time(NULL)); 

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _srand
  00082	83 c4 08	 add	 esp, 8

; 52   : 	this->m_bMapDataLoadOk=FALSE;

  00085	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 53   : 	this->m_lpThisMapSvrData = NULL;
; 54   : 
; 55   : 	InitializeCriticalSection(&this->m_critSVRCODE_MAP);

  0008c	8d 87 e0 6a 01
	00		 lea	 eax, DWORD PTR [edi+92896]
  00092	c7 87 f8 6a 01
	00 00 00 00 00	 mov	 DWORD PTR [edi+92920], 0
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 56   : }

  000a3	8b c7		 mov	 eax, edi
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMapServerManager@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1_MAPSVR_DATA@@UAE@XZ ; _MAPSVR_DATA::~_MAPSVR_DATA
  00005	68 90 01 00 00	 push	 400			; 00000190H
  0000a	68 e8 00 00 00	 push	 232			; 000000e8H
  0000f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 08	 add	 eax, 8
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0001b	c3		 ret	 0
__ehhandler$??0CMapServerManager@@QAE@XZ:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CMapServerManager@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CMapServerManager@@QAE@XZ ENDP			; CMapServerManager::CMapServerManager
; Function compile flags: /Ogtp
;	COMDAT ??_G_MAPSVR_DATA@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_MAPSVR_DATA@@UAEPAXI@Z PROC			; _MAPSVR_DATA::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1_MAPSVR_DATA@@UAE@XZ	; _MAPSVR_DATA::~_MAPSVR_DATA
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 e8 00 00 00	 push	 232			; 000000e8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_G_MAPSVR_DATA@@UAEPAXI@Z ENDP			; _MAPSVR_DATA::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?Clear@_MAPSVR_DATA@@QAEXH@Z
_TEXT	SEGMENT
_iInitSetVal$ = 8					; size = 4
?Clear@_MAPSVR_DATA@@QAEXH@Z PROC			; _MAPSVR_DATA::Clear, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 24   : 	this->m_bIN_USE = FALSE;
; 25   : 	this->m_btMAPSVR_GROUP = -1;
; 26   : 	this->m_sSVR_CODE = -1;

  00005	83 ce ff	 or	 esi, -1
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c6 41 08 ff	 mov	 BYTE PTR [ecx+8], 255	; 000000ffH
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	66 89 71 0a	 mov	 WORD PTR [ecx+10], si

; 27   : 	memset(this->m_cIPADDR, 0, sizeof(this->m_cIPADDR));
; 28   : 	this->m_wPORT = 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	0f 11 41 0c	 movups	 XMMWORD PTR [ecx+12], xmm0
  00020	66 89 41 1c	 mov	 WORD PTR [ecx+28], ax
  00024	8d 56 65	 lea	 edx, DWORD PTR [esi+101]
  00027	57		 push	 edi
  00028	8d 41 1e	 lea	 eax, DWORD PTR [ecx+30]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _iInitSetVal$[ebp]
  0002e	8d 7e fe	 lea	 edi, DWORD PTR [esi-2]
  00031	8d 5e ff	 lea	 ebx, DWORD PTR [esi-1]
$LL4@Clear:

; 31   : 	{
; 32   : 		switch ( iInitSetVal )

  00034	83 f9 ff	 cmp	 ecx, -1
  00037	74 0e		 je	 SHORT $LN7@Clear
  00039	85 c9		 test	 ecx, ecx
  0003b	74 05		 je	 SHORT $LN8@Clear

; 40   : 			default:
; 41   : 				this->m_sMAP_MOVE[iMAP_COUNT] = -3;

  0003d	66 89 38	 mov	 WORD PTR [eax], di
  00040	eb 08		 jmp	 SHORT $LN2@Clear
$LN8@Clear:

; 36   : 				break;
; 37   : 			case 0:
; 38   : 				this->m_sMAP_MOVE[iMAP_COUNT] = -1;

  00042	66 89 30	 mov	 WORD PTR [eax], si

; 39   : 				break;

  00045	eb 03		 jmp	 SHORT $LN2@Clear
$LN7@Clear:

; 33   : 		{
; 34   : 			case -1:
; 35   : 				this->m_sMAP_MOVE[iMAP_COUNT] = -2;

  00047	66 89 18	 mov	 WORD PTR [eax], bx
$LN2@Clear:

; 29   : 
; 30   : 	for ( int iMAP_COUNT =0;iMAP_COUNT<MAX_NUMBER_MAP;iMAP_COUNT++)

  0004a	83 c0 02	 add	 eax, 2
  0004d	83 ea 01	 sub	 edx, 1
  00050	75 e2		 jne	 SHORT $LL4@Clear
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx

; 42   : 		}
; 43   : 	}
; 44   : }

  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?Clear@_MAPSVR_DATA@@QAEXH@Z ENDP			; _MAPSVR_DATA::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ??1_MAPSVR_DATA@@UAE@XZ
_TEXT	SEGMENT
??1_MAPSVR_DATA@@UAE@XZ PROC				; _MAPSVR_DATA::~_MAPSVR_DATA, COMDAT
; _this$ = ecx

; 18   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_MAPSVR_DATA@@6B@

; 19   : 	return;
; 20   : }

  00006	c3		 ret	 0
??1_MAPSVR_DATA@@UAE@XZ ENDP				; _MAPSVR_DATA::~_MAPSVR_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ??0_MAPSVR_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_MAPSVR_DATA@@QAE@XZ PROC				; _MAPSVR_DATA::_MAPSVR_DATA, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 14   : 	this->Clear(1);

  00003	6a 01		 push	 1
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_MAPSVR_DATA@@6B@
  0000b	e8 00 00 00 00	 call	 ?Clear@_MAPSVR_DATA@@QAEXH@Z ; _MAPSVR_DATA::Clear

; 15   : }

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi
  00013	c3		 ret	 0
??0_MAPSVR_DATA@@QAE@XZ ENDP				; _MAPSVR_DATA::_MAPSVR_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 239  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al

; 241  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 802  : CMapServerManager g_MapServerManager;

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 802  : CMapServerManager g_MapServerManager;

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
