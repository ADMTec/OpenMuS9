; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\XMasAttackEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?PlaySeconds@@3HA				; PlaySeconds
_DATA	SEGMENT
?PlaySeconds@@3HA DD 0ffffffffH				; PlaySeconds
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CXMasMonsterHerd@@QAE@XZ			; CXMasMonsterHerd::CXMasMonsterHerd
PUBLIC	??1CXMasMonsterHerd@@UAE@XZ			; CXMasMonsterHerd::~CXMasMonsterHerd
PUBLIC	?Start@CXMasMonsterHerd@@UAEHXZ			; CXMasMonsterHerd::Start
PUBLIC	?MonsterHerdItemDrop@CXMasMonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ; CXMasMonsterHerd::MonsterHerdItemDrop
PUBLIC	??_GCXMasMonsterHerd@@UAEPAXI@Z			; CXMasMonsterHerd::`scalar deleting destructor'
PUBLIC	??0MonsterAttackEvent@@QAE@XZ			; MonsterAttackEvent::MonsterAttackEvent
PUBLIC	??1MonsterAttackEvent@@UAE@XZ			; MonsterAttackEvent::~MonsterAttackEvent
PUBLIC	?Clear@MonsterAttackEvent@@QAEXXZ		; MonsterAttackEvent::Clear
PUBLIC	?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z ; std::allocator<MONSTER_EVENT_TIME>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate
PUBLIC	?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
PUBLIC	?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
PUBLIC	?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::allocate
PUBLIC	?push_back@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXABUMONSTER_EVENT_DATA@@@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::push_back
PUBLIC	?erase@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@0@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::erase
PUBLIC	?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reserve
PUBLIC	?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z ; std::allocator<CXMasMonsterHerd *>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate
PUBLIC	?_Reallocate@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
PUBLIC	??_GMonsterAttackEvent@@UAEPAXI@Z		; MonsterAttackEvent::`scalar deleting destructor'
PUBLIC	??0CXMasAttackEvent@@QAE@XZ			; CXMasAttackEvent::CXMasAttackEvent
PUBLIC	??1CXMasAttackEvent@@UAE@XZ			; CXMasAttackEvent::~CXMasAttackEvent
PUBLIC	?Load@CXMasAttackEvent@@UAEHPAD@Z		; CXMasAttackEvent::Load
PUBLIC	?StartEvent@CXMasAttackEvent@@UAEXXZ		; CXMasAttackEvent::StartEvent
PUBLIC	?StopEvent@CXMasAttackEvent@@UAEXXZ		; CXMasAttackEvent::StopEvent
PUBLIC	?SetEnable@CXMasAttackEvent@@UAEXH@Z		; CXMasAttackEvent::SetEnable
PUBLIC	?SetManualStart@CXMasAttackEvent@@UAEXH@Z	; CXMasAttackEvent::SetManualStart
PUBLIC	?SetState@CXMasAttackEvent@@QAEXH@Z		; CXMasAttackEvent::SetState
PUBLIC	?SetState_NONE@CXMasAttackEvent@@QAEXXZ		; CXMasAttackEvent::SetState_NONE
PUBLIC	?SetState_CLOSED@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::SetState_CLOSED
PUBLIC	?SetState_PLAYING@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::SetState_PLAYING
PUBLIC	?Move@CXMasAttackEvent@@QAEXXZ			; CXMasAttackEvent::Move
PUBLIC	?Notify@CXMasAttackEvent@@QAEXPADHEE@Z		; CXMasAttackEvent::Notify
PUBLIC	?RemoveMonsterHerd@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::RemoveMonsterHerd
PUBLIC	?AddMonsters@CXMasAttackEvent@@QAEXPAVCXMasMonsterHerd@@@Z ; CXMasAttackEvent::AddMonsters
PUBLIC	?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::CreateMonsterHerd
PUBLIC	?CheckLocation@CXMasAttackEvent@@QAEHPAVCXMasMonsterHerd@@PAUXMASMONSTER_MAP_DATA@@@Z ; CXMasAttackEvent::CheckLocation
PUBLIC	?Run@CXMasAttackEvent@@QAEXXZ			; CXMasAttackEvent::Run
PUBLIC	?ProcState_NONE@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::ProcState_NONE
PUBLIC	?ProcState_CLOSED@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::ProcState_CLOSED
PUBLIC	?ProcState_PLAYING@CXMasAttackEvent@@QAEXXZ	; CXMasAttackEvent::ProcState_PLAYING
PUBLIC	?SendEffect@CXMasAttackEvent@@QAEXPADH@Z	; CXMasAttackEvent::SendEffect
PUBLIC	?CheckSync@CXMasAttackEvent@@QAEXXZ		; CXMasAttackEvent::CheckSync
PUBLIC	?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
PUBLIC	?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::allocate
PUBLIC	?push_back@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXABUXMASMONSTER_MAP_DATA@@@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::push_back
PUBLIC	?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reserve
PUBLIC	??_GCXMasAttackEvent@@UAEPAXI@Z			; CXMasAttackEvent::`scalar deleting destructor'
PUBLIC	??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
PUBLIC	??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
PUBLIC	??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CXMasMonsterHerd@@6B@			; CXMasMonsterHerd::`vftable'
PUBLIC	??_7MonsterAttackEvent@@6B@			; MonsterAttackEvent::`vftable'
PUBLIC	??_7CXMasAttackEvent@@6B@			; CXMasAttackEvent::`vftable'
PUBLIC	??_C@_0DE@HBJLJHOD@?$FLXMasAttackEvent?$FN?5White?5Wizard?5K@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CL@CKPDAKHI@?$FLXMasAttackEvent?$FN?5Info?5file?5Load@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CC@PEGBMCF@?$FLXMasAttackEvent?$FN?5?9?5?$CFs?5file?5load@ ; `string'
PUBLIC	??_C@_0DC@KONBBJGO@?$FLXMasAttackEvent?$FN?5?9?5Error?5?3?5No?5M@ ; `string'
PUBLIC	??_C@_0EE@INOOIIFJ@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Star@ ; `string'
PUBLIC	??_C@_0BE@PJEFBOCC@XMasAttackEvent?4cpp?$AA@	; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0FK@CCACGPIP@?$CIm_nEventState?5?$DO?$DN?5ATTACKEVENT_ST@ ; `string'
PUBLIC	??_C@_0CB@GNAONFCI@SetState?$CIATTACKEVENT_STATE_NONE?$CJ@ ; `string'
PUBLIC	??_C@_0L@MJHOMCIJ@m_bDoEvent?$AA@		; `string'
PUBLIC	??_C@_0DC@FLOKLKPF@?$FLXMasAttackEvent?$FN?5?9?5Before?5?$CFd?5mi@ ; `string'
PUBLIC	??_C@_0CC@DNJMFKJI@?$FLXMasAttackEvent?$FN?5?9?5Event?5Starte@ ; `string'
PUBLIC	??_C@_0EL@CAFMAFGG@?$FLXMasAttackEvent?$FN?5?9?5per?530?8S?5Inf@ ; `string'
PUBLIC	??_C@_0CC@NCANOPGD@?$FLXMasAttackEvent?$FN?5?9?5NotifySec?3?5?$CF@ ; `string'
PUBLIC	??_C@_0DP@COOJAPLA@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Herd@ ; `string'
PUBLIC	??_C@_0CA@GNBALKOM@?$FLXMasAttackEvent?$FN?5?9?5Event?5Ended?$AA@ ; `string'
PUBLIC	??_C@_0CI@LHGLLEGN@?$FLXMasAttackEvent?$FN?5No?5Schedule?5Ti@ ; `string'
PUBLIC	??_C@_0EL@EFNIAOHC@?$FLXMasAttackEvent?$FN?5Sync?5Start?5Tim@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CXMasMonsterHerd@@6B@			; CXMasMonsterHerd::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCXMasMonsterHerd@@@8			; CXMasMonsterHerd `RTTI Type Descriptor'
PUBLIC	??_R3CXMasMonsterHerd@@8			; CXMasMonsterHerd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CXMasMonsterHerd@@8			; CXMasMonsterHerd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CXMasMonsterHerd@@8		; CXMasMonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@MonsterHerd@@8			; MonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVMonsterHerd@@@8				; MonsterHerd `RTTI Type Descriptor'
PUBLIC	??_R3MonsterHerd@@8				; MonsterHerd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MonsterHerd@@8				; MonsterHerd::`RTTI Base Class Array'
PUBLIC	??_R4MonsterAttackEvent@@6B@			; MonsterAttackEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMonsterAttackEvent@@@8			; MonsterAttackEvent `RTTI Type Descriptor'
PUBLIC	??_R3MonsterAttackEvent@@8			; MonsterAttackEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MonsterAttackEvent@@8			; MonsterAttackEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MonsterAttackEvent@@8		; MonsterAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CXMasAttackEvent@@6B@			; CXMasAttackEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCXMasAttackEvent@@@8			; CXMasAttackEvent `RTTI Type Descriptor'
PUBLIC	??_R3CXMasAttackEvent@@8			; CXMasAttackEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CXMasAttackEvent@@8			; CXMasAttackEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CXMasAttackEvent@@8		; CXMasAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_memmove:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?MoneyItemDrop@MapClass@@QAEHHHH@Z:PROC		; MapClass::MoneyItemDrop
EXTRN	?AllSendServerMsg@@YAXPAD@Z:PROC		; AllSendServerMsg
EXTRN	?DataSendAll@@YAXPAEH@Z:PROC			; DataSendAll
EXTRN	??0MonsterHerd@@QAE@XZ:PROC			; MonsterHerd::MonsterHerd
EXTRN	??1MonsterHerd@@UAE@XZ:PROC			; MonsterHerd::~MonsterHerd
EXTRN	?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z:PROC	; MonsterHerd::SetTotalInfo
EXTRN	?AddMonster@MonsterHerd@@UAEHHHH@Z:PROC		; MonsterHerd::AddMonster
EXTRN	?SetRadius@MonsterHerd@@UAEXH@Z:PROC		; MonsterHerd::SetRadius
EXTRN	?SetPosition@MonsterHerd@@UAEXEE@Z:PROC		; MonsterHerd::SetPosition
EXTRN	?Start@MonsterHerd@@UAEHXZ:PROC			; MonsterHerd::Start
EXTRN	?Stop@MonsterHerd@@UAEXXZ:PROC			; MonsterHerd::Stop
EXTRN	?CheckInRadius@MonsterHerd@@UAEHH@Z:PROC	; MonsterHerd::CheckInRadius
EXTRN	?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z:PROC ; MonsterHerd::GetCurrentLocation
EXTRN	?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z:PROC	; MonsterHerd::GetRandomLocation
EXTRN	?CheckLocation@MonsterHerd@@UAEHAAE0@Z:PROC	; MonsterHerd::CheckLocation
EXTRN	?MoveHerd@MonsterHerd@@UAEHEE@Z:PROC		; MonsterHerd::MoveHerd
EXTRN	?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z:PROC ; MonsterHerd::GetMonsterData
EXTRN	?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z:PROC ; MonsterHerd::BeenAttacked
EXTRN	?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z:PROC ; MonsterHerd::OrderAttack
EXTRN	?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z:PROC ; MonsterHerd::MonsterBaseAct
EXTRN	?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z:PROC ; MonsterHerd::MonsterMoveAction
EXTRN	?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z:PROC ; MonsterHerd::MonsterAttackAction
EXTRN	?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z:PROC ; MonsterHerd::MonsterDieAction
EXTRN	?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z:PROC ; MonsterHerd::MonsterRegenAction
EXTRN	??_ECXMasMonsterHerd@@UAEPAXI@Z:PROC		; CXMasMonsterHerd::`vector deleting destructor'
EXTRN	??_EMonsterAttackEvent@@UAEPAXI@Z:PROC		; MonsterAttackEvent::`vector deleting destructor'
EXTRN	??_ECXMasAttackEvent@@UAEPAXI@Z:PROC		; CXMasAttackEvent::`vector deleting destructor'
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z:PROC ; gObjAddBuffEffectWideArea
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_iXMasItemDropRate@@3HA:DWORD			; g_iXMasItemDropRate
EXTRN	?g_iXMasZenDrop@@3HA:DWORD			; g_iXMasZenDrop
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CXMasAttackEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CXMasAttackEvent@@8 DD FLAT:??_R0?AVCXMasAttackEvent@@@8 ; CXMasAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CXMasAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2CXMasAttackEvent@@8
rdata$r	SEGMENT
??_R2CXMasAttackEvent@@8 DD FLAT:??_R1A@?0A@EA@CXMasAttackEvent@@8 ; CXMasAttackEvent::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MonsterAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R3CXMasAttackEvent@@8
rdata$r	SEGMENT
??_R3CXMasAttackEvent@@8 DD 00H				; CXMasAttackEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CXMasAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCXMasAttackEvent@@@8
data$r	SEGMENT
??_R0?AVCXMasAttackEvent@@@8 DD FLAT:??_7type_info@@6B@	; CXMasAttackEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCXMasAttackEvent@@', 00H
data$r	ENDS
;	COMDAT ??_R4CXMasAttackEvent@@6B@
rdata$r	SEGMENT
??_R4CXMasAttackEvent@@6B@ DD 00H			; CXMasAttackEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCXMasAttackEvent@@@8
	DD	FLAT:??_R3CXMasAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MonsterAttackEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MonsterAttackEvent@@8 DD FLAT:??_R0?AVMonsterAttackEvent@@@8 ; MonsterAttackEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MonsterAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2MonsterAttackEvent@@8
rdata$r	SEGMENT
??_R2MonsterAttackEvent@@8 DD FLAT:??_R1A@?0A@EA@MonsterAttackEvent@@8 ; MonsterAttackEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MonsterAttackEvent@@8
rdata$r	SEGMENT
??_R3MonsterAttackEvent@@8 DD 00H			; MonsterAttackEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MonsterAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMonsterAttackEvent@@@8
data$r	SEGMENT
??_R0?AVMonsterAttackEvent@@@8 DD FLAT:??_7type_info@@6B@ ; MonsterAttackEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMonsterAttackEvent@@', 00H
data$r	ENDS
;	COMDAT ??_R4MonsterAttackEvent@@6B@
rdata$r	SEGMENT
??_R4MonsterAttackEvent@@6B@ DD 00H			; MonsterAttackEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMonsterAttackEvent@@@8
	DD	FLAT:??_R3MonsterAttackEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2MonsterHerd@@8
rdata$r	SEGMENT
??_R2MonsterHerd@@8 DD FLAT:??_R1A@?0A@EA@MonsterHerd@@8 ; MonsterHerd::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MonsterHerd@@8
rdata$r	SEGMENT
??_R3MonsterHerd@@8 DD 00H				; MonsterHerd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMonsterHerd@@@8
data$r	SEGMENT
??_R0?AVMonsterHerd@@@8 DD FLAT:??_7type_info@@6B@	; MonsterHerd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMonsterHerd@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MonsterHerd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MonsterHerd@@8 DD FLAT:??_R0?AVMonsterHerd@@@8 ; MonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CXMasMonsterHerd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CXMasMonsterHerd@@8 DD FLAT:??_R0?AVCXMasMonsterHerd@@@8 ; CXMasMonsterHerd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CXMasMonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R2CXMasMonsterHerd@@8
rdata$r	SEGMENT
??_R2CXMasMonsterHerd@@8 DD FLAT:??_R1A@?0A@EA@CXMasMonsterHerd@@8 ; CXMasMonsterHerd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R3CXMasMonsterHerd@@8
rdata$r	SEGMENT
??_R3CXMasMonsterHerd@@8 DD 00H				; CXMasMonsterHerd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CXMasMonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCXMasMonsterHerd@@@8
data$r	SEGMENT
??_R0?AVCXMasMonsterHerd@@@8 DD FLAT:??_7type_info@@6B@	; CXMasMonsterHerd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCXMasMonsterHerd@@', 00H
data$r	ENDS
;	COMDAT ??_R4CXMasMonsterHerd@@6B@
rdata$r	SEGMENT
??_R4CXMasMonsterHerd@@6B@ DD 00H			; CXMasMonsterHerd::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCXMasMonsterHerd@@@8
	DD	FLAT:??_R3CXMasMonsterHerd@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@EFNIAOHC@?$FLXMasAttackEvent?$FN?5Sync?5Start?5Tim@
CONST	SEGMENT
??_C@_0EL@EFNIAOHC@?$FLXMasAttackEvent?$FN?5Sync?5Start?5Tim@ DB '[XMasAt'
	DB	'tackEvent] Sync Start Time. [%d] min remain (START HOUR:%d, M'
	DB	'IN:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LHGLLEGN@?$FLXMasAttackEvent?$FN?5No?5Schedule?5Ti@
CONST	SEGMENT
??_C@_0CI@LHGLLEGN@?$FLXMasAttackEvent?$FN?5No?5Schedule?5Ti@ DB '[XMasAt'
	DB	'tackEvent] No Schedule Time Data', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GNBALKOM@?$FLXMasAttackEvent?$FN?5?9?5Event?5Ended?$AA@
CONST	SEGMENT
??_C@_0CA@GNBALKOM@?$FLXMasAttackEvent?$FN?5?9?5Event?5Ended?$AA@ DB '[XM'
	DB	'asAttackEvent] - Event Ended', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@COOJAPLA@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Herd@
CONST	SEGMENT
??_C@_0DP@COOJAPLA@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Herd@ DB '[XMasA'
	DB	'ttackEvent] - Monster Herd Move MapNumber:%d, X:%d, Y:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NCANOPGD@?$FLXMasAttackEvent?$FN?5?9?5NotifySec?3?5?$CF@
CONST	SEGMENT
??_C@_0CC@NCANOPGD@?$FLXMasAttackEvent?$FN?5?9?5NotifySec?3?5?$CF@ DB '[X'
	DB	'MasAttackEvent] - NotifySec: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@CAFMAFGG@?$FLXMasAttackEvent?$FN?5?9?5per?530?8S?5Inf@
CONST	SEGMENT
??_C@_0EL@CAFMAFGG@?$FLXMasAttackEvent?$FN?5?9?5per?530?8S?5Inf@ DB '[XMa'
	DB	'sAttackEvent] - per 30''S Inform MapNumber:%d, X:%d, Y:%d, Bo'
	DB	'ss Live:%d', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?g_XMasMapDestPosition@@3PAY07HA DD 085H		; g_XMasMapDestPosition
	DD	04fH
	DD	057H
	DD	07eH
	DD	085H
	DD	0b2H
	DD	0b4H
	DD	07eH
	DD	0a4H
	DD	02aH
	DD	0ddH
	DD	055H
	DD	0a4H
	DD	02aH
	DD	0ddH
	DD	055H
	DD	0a0H
	DD	02dH
	DD	0a0H
	DD	02dH
	DD	098H
	DD	075H
	DD	0d1H
	DD	085H
_DATA	ENDS
;	COMDAT ??_C@_0CC@DNJMFKJI@?$FLXMasAttackEvent?$FN?5?9?5Event?5Starte@
CONST	SEGMENT
??_C@_0CC@DNJMFKJI@?$FLXMasAttackEvent?$FN?5?9?5Event?5Starte@ DB '[XMasA'
	DB	'ttackEvent] - Event Started', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FLOKLKPF@?$FLXMasAttackEvent?$FN?5?9?5Before?5?$CFd?5mi@
CONST	SEGMENT
??_C@_0DC@FLOKLKPF@?$FLXMasAttackEvent?$FN?5?9?5Before?5?$CFd?5mi@ DB '[X'
	DB	'MasAttackEvent] - Before %d minutes - Advertise', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MJHOMCIJ@m_bDoEvent?$AA@
CONST	SEGMENT
??_C@_0L@MJHOMCIJ@m_bDoEvent?$AA@ DB 'm_bDoEvent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GNAONFCI@SetState?$CIATTACKEVENT_STATE_NONE?$CJ@
CONST	SEGMENT
??_C@_0CB@GNAONFCI@SetState?$CIATTACKEVENT_STATE_NONE?$CJ@ DB 'SetState(A'
	DB	'TTACKEVENT_STATE_NONE)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@CCACGPIP@?$CIm_nEventState?5?$DO?$DN?5ATTACKEVENT_ST@
CONST	SEGMENT
??_C@_0FK@CCACGPIP@?$CIm_nEventState?5?$DO?$DN?5ATTACKEVENT_ST@ DB '(m_nE'
	DB	'ventState >= ATTACKEVENT_STATE_NONE) || (m_nEventState <= ATT'
	DB	'ACKEVENT_STATE_PLAYING)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@ DB '%s', 09H, '%'
	DB	's', 09H, '%s', 09H, '%s', 09H, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PJEFBOCC@XMasAttackEvent?4cpp?$AA@
CONST	SEGMENT
??_C@_0BE@PJEFBOCC@XMasAttackEvent?4cpp?$AA@ DB 'XMasAttackEvent.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@INOOIIFJ@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Star@
CONST	SEGMENT
??_C@_0EE@INOOIIFJ@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Star@ DB '[XMasA'
	DB	'ttackEvent] - Monster Start Position MapNumber:%d, X:%d, Y:%d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KONBBJGO@?$FLXMasAttackEvent?$FN?5?9?5Error?5?3?5No?5M@
CONST	SEGMENT
??_C@_0DC@KONBBJGO@?$FLXMasAttackEvent?$FN?5?9?5Error?5?3?5No?5M@ DB '[XM'
	DB	'asAttackEvent] - Error : No Monster Data Exist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PEGBMCF@?$FLXMasAttackEvent?$FN?5?9?5?$CFs?5file?5load@
CONST	SEGMENT
??_C@_0CC@PEGBMCF@?$FLXMasAttackEvent?$FN?5?9?5?$CFs?5file?5load@ DB '[XM'
	DB	'asAttackEvent] - %s file load!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CKPDAKHI@?$FLXMasAttackEvent?$FN?5Info?5file?5Load@
CONST	SEGMENT
??_C@_0CL@CKPDAKHI@?$FLXMasAttackEvent?$FN?5Info?5file?5Load@ DB '[XMasAt'
	DB	'tackEvent] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HBJLJHOD@?$FLXMasAttackEvent?$FN?5White?5Wizard?5K@
CONST	SEGMENT
??_C@_0DE@HBJLJHOD@?$FLXMasAttackEvent?$FN?5White?5Wizard?5K@ DB '[XMasAt'
	DB	'tackEvent] White Wizard Killed, MapNumber:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CXMasAttackEvent@@6B@
CONST	SEGMENT
??_7CXMasAttackEvent@@6B@ DD FLAT:??_R4CXMasAttackEvent@@6B@ ; CXMasAttackEvent::`vftable'
	DD	FLAT:??_ECXMasAttackEvent@@UAEPAXI@Z
	DD	FLAT:?Load@CXMasAttackEvent@@UAEHPAD@Z
	DD	FLAT:?StartEvent@CXMasAttackEvent@@UAEXXZ
	DD	FLAT:?StopEvent@CXMasAttackEvent@@UAEXXZ
	DD	FLAT:?SetEnable@CXMasAttackEvent@@UAEXH@Z
	DD	FLAT:?SetManualStart@CXMasAttackEvent@@UAEXH@Z
CONST	ENDS
;	COMDAT ??_7MonsterAttackEvent@@6B@
CONST	SEGMENT
??_7MonsterAttackEvent@@6B@ DD FLAT:??_R4MonsterAttackEvent@@6B@ ; MonsterAttackEvent::`vftable'
	DD	FLAT:??_EMonsterAttackEvent@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CXMasMonsterHerd@@6B@
CONST	SEGMENT
??_7CXMasMonsterHerd@@6B@ DD FLAT:??_R4CXMasMonsterHerd@@6B@ ; CXMasMonsterHerd::`vftable'
	DD	FLAT:??_ECXMasMonsterHerd@@UAEPAXI@Z
	DD	FLAT:?SetTotalInfo@MonsterHerd@@UAEHHHHH@Z
	DD	FLAT:?AddMonster@MonsterHerd@@UAEHHHH@Z
	DD	FLAT:?SetRadius@MonsterHerd@@UAEXH@Z
	DD	FLAT:?SetPosition@MonsterHerd@@UAEXEE@Z
	DD	FLAT:?Start@CXMasMonsterHerd@@UAEHXZ
	DD	FLAT:?Stop@MonsterHerd@@UAEXXZ
	DD	FLAT:?CheckInRadius@MonsterHerd@@UAEHH@Z
	DD	FLAT:?GetCurrentLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?GetRandomLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?CheckLocation@MonsterHerd@@UAEHAAE0@Z
	DD	FLAT:?MoveHerd@MonsterHerd@@UAEHEE@Z
	DD	FLAT:?MonsterHerdItemDrop@CXMasMonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?GetMonsterData@MonsterHerd@@UAEPAU_MONSTER_HERD_DATA@@H@Z
	DD	FLAT:?BeenAttacked@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
	DD	FLAT:?OrderAttack@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0H@Z
	DD	FLAT:?MonsterBaseAct@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterMoveAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterAttackAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@0@Z
	DD	FLAT:?MonsterDieAction@MonsterHerd@@UAEXPAUOBJECTSTRUCT@@@Z
	DD	FLAT:?MonsterRegenAction@MonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ$0
__ehfuncinfo$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UMONSTER_EVENT_TIME@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z PROC ; std::forward<MONSTER_EVENT_TIME>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z ENDP ; std::forward<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@UMONSTER_EVENT_DATA@@U1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z PROC ; std::forward<MONSTER_EVENT_DATA>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z ENDP ; std::forward<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UXMASMONSTER_MAP_DATA@@@std@@YA$$QAUXMASMONSTER_MAP_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UXMASMONSTER_MAP_DATA@@@std@@YA$$QAUXMASMONSTER_MAP_DATA@@AAU1@@Z PROC ; std::forward<XMASMONSTER_MAP_DATA>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UXMASMONSTER_MAP_DATA@@@std@@YA$$QAUXMASMONSTER_MAP_DATA@@AAU1@@Z ENDP ; std::forward<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::destroy<XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::destroy<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@U1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_TIME@@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMONSTER_EVENT_TIME@@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::destroy<MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMONSTER_EVENT_TIME@@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::destroy<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_DATA@@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMONSTER_EVENT_DATA@@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::destroy<MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMONSTER_EVENT_DATA@@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::destroy<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_mov
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 450  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z PROC ; std::_Val_type<MONSTER_EVENT_TIME *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z ENDP ; std::_Val_type<MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 1c		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 c0		 test	 eax, eax
  00013	74 0e		 je	 SHORT $LN2@Uninit_mov
  00015	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00019	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00020	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00023	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00026	83 c0 0c	 add	 eax, 12			; 0000000cH
  00029	3b ce		 cmp	 ecx, esi
  0002b	75 e4		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  0002d	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z PROC ; std::_Val_type<MONSTER_EVENT_DATA *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z ENDP ; std::_Val_type<MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCXMasMonsterHerd@@PAV1@PAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCXMasMonsterHerd@@PAV1@PAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CXMasMonsterHerd *,CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT

; 468  : 	{	// move [_First, _Last) to raw _Dest, scalar type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 469  : 	_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 472  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move
; 473  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAVCXMasMonsterHerd@@PAV1@PAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CXMasMonsterHerd *,CXMasMonsterHerd *,CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z PROC ; std::_Val_type<CXMasMonsterHerd * *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z ENDP ; std::_Val_type<CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@@Z PROC ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::destroy<XMASMONSTER_MAP_DATA>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UXMASMONSTER_MAP_DATA@@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@@Z ENDP ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::destroy<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<XMASMONSTER_MAP_DATA>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 1a		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 c0		 test	 eax, eax
  00013	74 0c		 je	 SHORT $LN2@Uninit_mov
  00015	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00018	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001e	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	83 c0 14	 add	 eax, 20			; 00000014H
  00027	3b ce		 cmp	 ecx, esi
  00029	75 e6		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  0002b	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z PROC ; std::_Val_type<XMASMONSTER_MAP_DATA *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z ENDP ; std::_Val_type<XMASMONSTER_MAP_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_TIME@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UMONSTER_EVENT_TIME@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::destroy<MONSTER_EVENT_TIME>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UMONSTER_EVENT_TIME@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::destroy<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MONSTER_EVENT_TIME>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_DATA@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UMONSTER_EVENT_DATA@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::destroy<MONSTER_EVENT_DATA>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UMONSTER_EVENT_DATA@@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::destroy<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MONSTER_EVENT_DATA>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAAAPAUMONSTER_EVENT_TIME@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAAAPAUMONSTER_EVENT_TIME@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAAAPAUMONSTER_EVENT_TIME@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z PROC ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z ENDP ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z PROC ; std::_Unchecked<MONSTER_EVENT_TIME *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@@Z ENDP ; std::_Unchecked<MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAAAPAUMONSTER_EVENT_DATA@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAAAPAUMONSTER_EVENT_DATA@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAAAPAUMONSTER_EVENT_DATA@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z PROC ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z ENDP ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z PROC ; std::_Unchecked<MONSTER_EVENT_DATA *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@@Z ENDP ; std::_Unchecked<MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAAAPAPAVCXMasMonsterHerd@@AAPAPAV1@PAPAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAAAPAPAVCXMasMonsterHerd@@AAPAPAV1@PAPAV1@@Z PROC ; std::_Rechecked<CXMasMonsterHerd * *,CXMasMonsterHerd * *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAAAPAPAVCXMasMonsterHerd@@AAPAPAV1@PAPAV1@@Z ENDP ; std::_Rechecked<CXMasMonsterHerd * *,CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z PROC ; std::_Uninit_move<CXMasMonsterHerd * *,CXMasMonsterHerd * *,std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninit_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z ENDP ; std::_Uninit_move<CXMasMonsterHerd * *,CXMasMonsterHerd * *,std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z PROC ; std::_Unchecked<CXMasMonsterHerd * *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAPAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@@Z ENDP ; std::_Unchecked<CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UXMASMONSTER_MAP_DATA@@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UXMASMONSTER_MAP_DATA@@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::destroy<XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UXMASMONSTER_MAP_DATA@@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::destroy<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@@Z PROC ; std::addressof<XMASMONSTER_MAP_DATA>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@AAU1@@Z ENDP ; std::addressof<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUXMASMONSTER_MAP_DATA@@PAU1@@std@@YAAAPAUXMASMONSTER_MAP_DATA@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUXMASMONSTER_MAP_DATA@@PAU1@@std@@YAAAPAUXMASMONSTER_MAP_DATA@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUXMASMONSTER_MAP_DATA@@PAU1@@std@@YAAAPAUXMASMONSTER_MAP_DATA@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z PROC ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z ENDP ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z PROC ; std::_Unchecked<XMASMONSTER_MAP_DATA *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUXMASMONSTER_MAP_DATA@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@@Z ENDP ; std::_Unchecked<XMASMONSTER_MAP_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_TIME@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMONSTER_EVENT_TIME@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::destroy<MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMONSTER_EVENT_TIME@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::destroy<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@@Z PROC ; std::addressof<MONSTER_EVENT_TIME>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UMONSTER_EVENT_TIME@@@std@@YAPAUMONSTER_EVENT_TIME@@AAU1@@Z ENDP ; std::addressof<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMONSTER_EVENT_DATA@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMONSTER_EVENT_DATA@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::destroy<MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMONSTER_EVENT_DATA@@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::destroy<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@@Z PROC ; std::addressof<MONSTER_EVENT_DATA>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UMONSTER_EVENT_DATA@@@std@@YAPAUMONSTER_EVENT_DATA@@AAU1@@Z ENDP ; std::addressof<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAUMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z PROC ; std::move<MONSTER_EVENT_TIME &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUMONSTER_EVENT_TIME@@@std@@YA$$QAUMONSTER_EVENT_TIME@@AAU1@@Z ENDP ; std::move<MONSTER_EVENT_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAUMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z PROC ; std::move<MONSTER_EVENT_DATA &>, COMDAT

; 1249 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1250 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1251 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAUMONSTER_EVENT_DATA@@@std@@YA$$QAUMONSTER_EVENT_DATA@@AAU1@@Z ENDP ; std::move<MONSTER_EVENT_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z PROC ; std::allocator<CXMasMonsterHerd *>::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z ENDP ; std::allocator<CXMasMonsterHerd *>::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z PROC ; std::_Uninitialized_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUMONSTER_EVENT_TIME@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z PROC ; std::_Uninitialized_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUMONSTER_EVENT_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CXMasMonsterHerd * *,CXMasMonsterHerd * *,std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Uninitialized_move@PAPAVCXMasMonsterHerd@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CXMasMonsterHerd * *,CXMasMonsterHerd * *,std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UXMASMONSTER_MAP_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_MAP_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UXMASMONSTER_MAP_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_MAP_DATA@@0@Z PROC ; std::_Ptr_cat<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UXMASMONSTER_MAP_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUXMASMONSTER_MAP_DATA@@0@Z ENDP ; std::_Ptr_cat<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z PROC ; std::_Uninitialized_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUXMASMONSTER_MAP_DATA@@PAU1@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_TIME@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_TIME@@@0@ABV10@@Z PROC ; std::forward<std::allocator<MONSTER_EVENT_TIME> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_TIME@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<MONSTER_EVENT_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_DATA@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_DATA@@@0@ABV10@@Z PROC ; std::forward<std::allocator<MONSTER_EVENT_DATA> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@YAABV?$allocator@UMONSTER_EVENT_DATA@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<MONSTER_EVENT_DATA> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >, COMDAT

; 180  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAABV?$allocator@PAVCXMasMonsterHerd@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAABV?$allocator@PAVCXMasMonsterHerd@@@0@ABV10@@Z PROC ; std::forward<std::allocator<CXMasMonsterHerd *> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@YAABV?$allocator@PAVCXMasMonsterHerd@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<CXMasMonsterHerd *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@YAABV?$allocator@UXMASMONSTER_MAP_DATA@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@YAABV?$allocator@UXMASMONSTER_MAP_DATA@@@0@ABV10@@Z PROC ; std::forward<std::allocator<XMASMONSTER_MAP_DATA> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@YAABV?$allocator@UXMASMONSTER_MAP_DATA@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<XMASMONSTER_MAP_DATA> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUMONSTER_EVENT_TIME@@@std@@YAABUMONSTER_EVENT_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMONSTER_EVENT_TIME@@@std@@YAABUMONSTER_EVENT_TIME@@ABU1@@Z PROC ; std::forward<MONSTER_EVENT_TIME const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMONSTER_EVENT_TIME@@@std@@YAABUMONSTER_EVENT_TIME@@ABU1@@Z ENDP ; std::forward<MONSTER_EVENT_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_TIME@@@1@PAUMONSTER_EVENT_TIME@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUMONSTER_EVENT_TIME@@@std@@YAAAUMONSTER_EVENT_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMONSTER_EVENT_TIME@@@std@@YAAAUMONSTER_EVENT_TIME@@AAU1@@Z PROC ; std::forward<MONSTER_EVENT_TIME &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMONSTER_EVENT_TIME@@@std@@YAAAUMONSTER_EVENT_TIME@@AAU1@@Z ENDP ; std::forward<MONSTER_EVENT_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MONSTER_EVENT_TIME const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MONSTER_EVENT_TIME const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>, COMDAT

; 2516 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN3@Move
$LL4@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	83 c1 08	 add	 ecx, 8
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL4@Move
$LN3@Move:
  00025	5e		 pop	 esi

; 2519 : 	return (_Dest);
; 2520 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_TIME@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_TIME@@0@Z PROC ; std::_Ptr_cat<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMONSTER_EVENT_TIME@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_TIME@@0@Z ENDP ; std::_Ptr_cat<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUMONSTER_EVENT_DATA@@@std@@YAABUMONSTER_EVENT_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMONSTER_EVENT_DATA@@@std@@YAABUMONSTER_EVENT_DATA@@ABU1@@Z PROC ; std::forward<MONSTER_EVENT_DATA const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMONSTER_EVENT_DATA@@@std@@YAABUMONSTER_EVENT_DATA@@ABU1@@Z ENDP ; std::forward<MONSTER_EVENT_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAXAAV?$allocator@UMONSTER_EVENT_DATA@@@1@PAUMONSTER_EVENT_DATA@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUMONSTER_EVENT_DATA@@@std@@YAAAUMONSTER_EVENT_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMONSTER_EVENT_DATA@@@std@@YAAAUMONSTER_EVENT_DATA@@AAU1@@Z PROC ; std::forward<MONSTER_EVENT_DATA &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMONSTER_EVENT_DATA@@@std@@YAAAUMONSTER_EVENT_DATA@@AAU1@@Z ENDP ; std::forward<MONSTER_EVENT_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MONSTER_EVENT_DATA const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MONSTER_EVENT_DATA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>, COMDAT

; 2516 : 	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 18		 je	 SHORT $LN3@Move
$LL4@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00022	83 c0 0c	 add	 eax, 12			; 0000000cH
  00025	3b ce		 cmp	 ecx, esi
  00027	75 e8		 jne	 SHORT $LL4@Move
$LN3@Move:
  00029	5e		 pop	 esi

; 2519 : 	return (_Dest);
; 2520 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMONSTER_EVENT_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_DATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMONSTER_EVENT_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_DATA@@0@Z PROC ; std::_Ptr_cat<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMONSTER_EVENT_DATA@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMONSTER_EVENT_DATA@@0@Z ENDP ; std::_Ptr_cat<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAXAAV?$allocator@PAVCXMasMonsterHerd@@@1@PAPAVCXMasMonsterHerd@@$$QAPAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAXAAV?$allocator@PAVCXMasMonsterHerd@@@1@PAPAVCXMasMonsterHerd@@$$QAPAV3@@Z PROC ; std::allocator_traits<std::allocator<CXMasMonsterHerd *> >::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAXAAV?$allocator@PAVCXMasMonsterHerd@@@1@PAPAVCXMasMonsterHerd@@$$QAPAV3@@Z ENDP ; std::allocator_traits<std::allocator<CXMasMonsterHerd *> >::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CXMasMonsterHerd *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Move<CXMasMonsterHerd * *,CXMasMonsterHerd * *>, COMDAT

; 2526 : 	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2531 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Move<CXMasMonsterHerd * *,CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z PROC ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@PAVCXMasMonsterHerd@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCXMasMonsterHerd@@0@Z ENDP ; std::_Ptr_cat<CXMasMonsterHerd *,CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUXMASMONSTER_MAP_DATA@@@std@@YAABUXMASMONSTER_MAP_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUXMASMONSTER_MAP_DATA@@@std@@YAABUXMASMONSTER_MAP_DATA@@ABU1@@Z PROC ; std::forward<XMASMONSTER_MAP_DATA const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUXMASMONSTER_MAP_DATA@@@std@@YAABUXMASMONSTER_MAP_DATA@@ABU1@@Z ENDP ; std::forward<XMASMONSTER_MAP_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAXAAV?$allocator@UXMASMONSTER_MAP_DATA@@@1@PAUXMASMONSTER_MAP_DATA@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUXMASMONSTER_MAP_DATA@@@std@@YAAAUXMASMONSTER_MAP_DATA@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUXMASMONSTER_MAP_DATA@@@std@@YAAAUXMASMONSTER_MAP_DATA@@AAU1@@Z PROC ; std::forward<XMASMONSTER_MAP_DATA &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUXMASMONSTER_MAP_DATA@@@std@@YAAAUXMASMONSTER_MAP_DATA@@AAU1@@Z ENDP ; std::forward<XMASMONSTER_MAP_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<XMASMONSTER_MAP_DATA const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<XMASMONSTER_MAP_DATA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMONSTER_EVENT_TIME@@@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEPAUMONSTER_EVENT_TIME@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMONSTER_EVENT_TIME@@@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEPAUMONSTER_EVENT_TIME@@PAU2@00@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Umove<MONSTER_EVENT_TIME *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMONSTER_EVENT_TIME@@@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEPAUMONSTER_EVENT_TIME@@PAU2@00@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Umove<MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMONSTER_EVENT_DATA@@@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEPAUMONSTER_EVENT_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMONSTER_EVENT_DATA@@@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEPAUMONSTER_EVENT_DATA@@PAU2@00@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Umove<MONSTER_EVENT_DATA *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMONSTER_EVENT_DATA@@@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEPAUMONSTER_EVENT_DATA@@PAU2@00@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Umove<MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCXMasMonsterHerd@@@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEPAPAVCXMasMonsterHerd@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCXMasMonsterHerd@@@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEPAPAVCXMasMonsterHerd@@PAPAV2@00@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Umove<CXMasMonsterHerd * *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	56		 push	 esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  0000f	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00016	56		 push	 esi
  00017	51		 push	 ecx
  00018	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0001b	e8 00 00 00 00	 call	 _memmove
  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
  00023	03 c6		 add	 eax, esi
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAPAVCXMasMonsterHerd@@@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEPAPAVCXMasMonsterHerd@@PAPAV2@00@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Umove<CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@YAXPAUXMASMONSTER_MAP_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUXMASMONSTER_MAP_DATA@@@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEPAUXMASMONSTER_MAP_DATA@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUXMASMONSTER_MAP_DATA@@@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEPAUXMASMONSTER_MAP_DATA@@PAU2@00@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Umove<XMASMONSTER_MAP_DATA *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUXMASMONSTER_MAP_DATA@@@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEPAUXMASMONSTER_MAP_DATA@@PAU2@00@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Umove<XMASMONSTER_MAP_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_TIME@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1><std::allocator<MONSTER_EVENT_TIME> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UMONSTER_EVENT_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1><std::allocator<MONSTER_EVENT_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@YAXPAUMONSTER_EVENT_DATA@@0AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1><std::allocator<MONSTER_EVENT_DATA> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UMONSTER_EVENT_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1><std::allocator<MONSTER_EVENT_DATA> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@YAXPAPAVCXMasMonsterHerd@@0AAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAVCXMasMonsterHerd@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAVCXMasMonsterHerd@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1><std::allocator<CXMasMonsterHerd *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAVCXMasMonsterHerd@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1><std::allocator<CXMasMonsterHerd *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1><std::allocator<XMASMONSTER_MAP_DATA> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UXMASMONSTER_MAP_DATA@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1><std::allocator<XMASMONSTER_MAP_DATA> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_TIME@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::construct<MONSTER_EVENT_TIME,MONSTER_EVENT_TIME &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@@Z PROC ; std::addressof<MONSTER_EVENT_TIME const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMONSTER_EVENT_TIME@@@std@@YAPBUMONSTER_EVENT_TIME@@ABU1@@Z ENDP ; std::addressof<MONSTER_EVENT_TIME const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00@Z PROC ; std::_Move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>, COMDAT

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2538 : 	return (_Move(_First, _Last,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 14		 je	 SHORT $LN7@Move
$LL8@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	89 10		 mov	 DWORD PTR [eax], edx
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	83 c1 08	 add	 ecx, 8
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	83 c0 08	 add	 eax, 8
  00021	3b ce		 cmp	 ecx, esi
  00023	75 ec		 jne	 SHORT $LL8@Move
$LN7@Move:
  00025	5e		 pop	 esi

; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move@PAUMONSTER_EVENT_TIME@@PAU1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00@Z ENDP ; std::_Move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00011	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@UMONSTER_EVENT_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::construct<MONSTER_EVENT_DATA,MONSTER_EVENT_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@@Z PROC ; std::addressof<MONSTER_EVENT_DATA const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMONSTER_EVENT_DATA@@@std@@YAPBUMONSTER_EVENT_DATA@@ABU1@@Z ENDP ; std::addressof<MONSTER_EVENT_DATA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00@Z PROC ; std::_Move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>, COMDAT

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2538 : 	return (_Move(_First, _Last,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 18		 je	 SHORT $LN7@Move
$LL8@Move:

; 2518 : 		*_Dest = _STD move(*_First);

  00011	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0001f	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00022	83 c0 0c	 add	 eax, 12			; 0000000cH
  00025	3b ce		 cmp	 ecx, esi
  00027	75 e8		 jne	 SHORT $LL8@Move
$LN7@Move:
  00029	5e		 pop	 esi

; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAUMONSTER_EVENT_DATA@@PAU1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00@Z ENDP ; std::_Move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAVCXMasMonsterHerd@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAVCXMasMonsterHerd@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@$$QAPAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::construct<CXMasMonsterHerd *,CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PAVCXMasMonsterHerd@@@std@@YA$$QAPAVCXMasMonsterHerd@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAVCXMasMonsterHerd@@@std@@YA$$QAPAVCXMasMonsterHerd@@AAPAV1@@Z PROC ; std::forward<CXMasMonsterHerd *>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAVCXMasMonsterHerd@@@std@@YA$$QAPAVCXMasMonsterHerd@@AAPAV1@@Z ENDP ; std::forward<CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@@Z PROC ; std::addressof<CXMasMonsterHerd *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAVCXMasMonsterHerd@@@std@@YAPAPAVCXMasMonsterHerd@@AAPAV1@@Z ENDP ; std::addressof<CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00@Z PROC ; std::_Move<CXMasMonsterHerd * *,CXMasMonsterHerd * *>, COMDAT

; 2537 : 	{	// move [_First, _Last) to [_Dest, ...), unchecked

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b c1		 sub	 eax, ecx
  0000b	56		 push	 esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  0000c	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000f	c1 f8 02	 sar	 eax, 2
  00012	57		 push	 edi
  00013	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2529 : 		_Count * sizeof (*_First));
; 2530 : 	return (_Dest + _Count);

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2538 : 	return (_Move(_First, _Last,
; 2539 : 		_Dest, _Ptr_cat(_First, _Dest)));
; 2540 : 	}

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Move@PAPAVCXMasMonsterHerd@@PAPAV1@@std@@YAPAPAVCXMasMonsterHerd@@PAPAV1@00@Z ENDP ; std::_Move<CXMasMonsterHerd * *,CXMasMonsterHerd * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@ABU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UXMASMONSTER_MAP_DATA@@AAU1@@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::construct<XMASMONSTER_MAP_DATA,XMASMONSTER_MAP_DATA &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@@Z PROC ; std::addressof<XMASMONSTER_MAP_DATA const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUXMASMONSTER_MAP_DATA@@@std@@YAPBUXMASMONSTER_MAP_DATA@@ABU1@@Z ENDP ; std::addressof<XMASMONSTER_MAP_DATA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 14	 add	 edx, 20			; 00000014H
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 14	 add	 DWORD PTR [ecx], 20	; 00000014H

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 14	 add	 DWORD PTR [ecx], 20	; 00000014H

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@PAUXMASMONSTER_MAP_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 04	 add	 edx, 4
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEAAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEAAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEAAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 04	 add	 DWORD PTR [ecx], 4

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@PAPAVCXMasMonsterHerd@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCXMasAttackEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCXMasAttackEvent@@UAEPAXI@Z PROC			; CXMasAttackEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CXMasAttackEvent@@UAE@XZ ; CXMasAttackEvent::~CXMasAttackEvent
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 84 00 00 00	 push	 132			; 00000084H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCXMasAttackEvent@@UAEPAXI@Z ENDP			; CXMasAttackEvent::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXPAUXMASMONSTER_MAP_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXPAUXMASMONSTER_MAP_DATA@@0@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXPAUXMASMONSTER_MAP_DATA@@0@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 03	 sar	 edx, 3
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 03	 sar	 edx, 3
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 03	 sar	 edx, 3
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUXMASMONSTER_MAP_DATA@@PAU1@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@U1@@std@@YAPAUXMASMONSTER_MAP_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<XMASMONSTER_MAP_DATA *,XMASMONSTER_MAP_DATA *,std::allocator<XMASMONSTER_MAP_DATA>,XMASMONSTER_MAP_DATA>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 03	 sar	 edx, 3
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0007e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00080	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00082	c1 fa 03	 sar	 edx, 3
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0009a	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000a0	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000a3	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBE_NPBUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBE_NPBUXMASMONSTER_MAP_DATA@@@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBE_NPBUXMASMONSTER_MAP_DATA@@@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 cc cc cc 0c	 mov	 ecx, 214748364		; 0cccccccH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_MAP_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_MAP_DATA@@0@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXPAUXMASMONSTER_MAP_DATA@@0@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXABUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXABUXMASMONSTER_MAP_DATA@@@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4b		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 45		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 03	 sar	 edx, 3
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003b	85 d2		 test	 edx, edx
  0003d	74 3e		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00044	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 04 88	 movups	 xmm0, XMMWORD PTR [eax+ecx*4]
  00049	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0004c	8b 44 88 10	 mov	 eax, DWORD PTR [eax+ecx*4+16]
  00050	89 42 10	 mov	 DWORD PTR [edx+16], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00053	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00057	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0005c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005f	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00061	6a 01		 push	 1
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@IAEXI@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 0c		 je	 SHORT $LN205@push_back
  00071	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00074	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00077	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0007a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0007d	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?push_back@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXABUXMASMONSTER_MAP_DATA@@@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEAAUXMASMONSTER_MAP_DATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEAAUXMASMONSTER_MAP_DATA@@I@Z PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 1241 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEAAUXMASMONSTER_MAP_DATA@@I@Z ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::~vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::~vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >,std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >::_Vector_val<std::_Simple_types<XMASMONSTER_MAP_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABQAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAPAUXMASMONSTER_MAP_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >::_Vector_alloc<std::_Vec_base_types<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAE@ABV?$allocator@UXMASMONSTER_MAP_DATA@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >::_Wrap_alloc<std::allocator<XMASMONSTER_MAP_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAIABV?$allocator@UXMASMONSTER_MAP_DATA@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAIABV?$allocator@UXMASMONSTER_MAP_DATA@@@2@@Z PROC ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@SAIABV?$allocator@UXMASMONSTER_MAP_DATA@@@2@@Z ENDP ; std::allocator_traits<std::allocator<XMASMONSTER_MAP_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QBEIXZ PROC ; std::allocator<XMASMONSTER_MAP_DATA>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QBEIXZ ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEPAUXMASMONSTER_MAP_DATA@@I@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<XMASMONSTER_MAP_DATA>::allocator<XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<XMASMONSTER_MAP_DATA>::allocator<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@XZ PROC	; std::allocator<XMASMONSTER_MAP_DATA>::allocator<XMASMONSTER_MAP_DATA>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAE@XZ ENDP	; std::allocator<XMASMONSTER_MAP_DATA>::allocator<XMASMONSTER_MAP_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?CheckSync@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
tv712 = -48						; size = 4
tv715 = -44						; size = 4
$T1 = -44						; size = 4
tv711 = -40						; size = 4
_it$2$ = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
_bTIME_CHANGED$1$ = -32					; size = 4
tv726 = -28						; size = 4
_iMIN_MINUTE$1$ = -28					; size = 4
tv716 = -24						; size = 4
_iMIN_HOUR$1$ = -24					; size = 4
_sysTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?CheckSync@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::CheckSync, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	89 75 dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00016	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00019	3b 46 2c	 cmp	 eax, DWORD PTR [esi+44]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 661  : 	if( m_EventTime.empty() )

  0001c	75 28		 jne	 SHORT $LN10@CheckSync

; 662  : 	{
; 663  : 		LogAddC(2,"[XMasAttackEvent] No Schedule Time Data");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LHGLLEGN@?$FLXMasAttackEvent?$FN?5No?5Schedule?5Ti@
  00023	6a 02		 push	 2
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002b	83 c4 08	 add	 esp, 8

; 664  : 		SetState(ATTACKEVENT_STATE_NONE);

  0002e	8b ce		 mov	 ecx, esi
  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState
  00037	5e		 pop	 esi

; 735  : }

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN10@CheckSync:
  00046	53		 push	 ebx
  00047	57		 push	 edi

; 665  : 		return;
; 666  : 	}
; 667  : 
; 668  : 	BOOL bTIME_CHANGED = FALSE;
; 669  : 	int iMIN_HOUR = 24;
; 670  : 	int iMIN_MINUTE = 60;
; 671  : 
; 672  : 	SYSTEMTIME sysTime;
; 673  : 	GetLocalTime(&sysTime);

  00048	8d 45 ec	 lea	 eax, DWORD PTR _sysTime$[ebp]
  0004b	33 d2		 xor	 edx, edx
  0004d	50		 push	 eax
  0004e	89 55 e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], edx
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00057	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0005a	8b c8		 mov	 ecx, eax
  0005c	8b 76 2c	 mov	 esi, DWORD PTR [esi+44]
  0005f	89 45 d8	 mov	 DWORD PTR _it$2$[ebp], eax
  00062	89 75 d4	 mov	 DWORD PTR $T1[ebp], esi

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00065	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 677  : 	for ( ; it != this->m_EventTime.end() ; it++ )

  00067	74 70		 je	 SHORT $LN193@CheckSync
  00069	0f b7 7d f4	 movzx	 edi, WORD PTR _sysTime$[ebp+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  0006d	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00070	8b df		 mov	 ebx, edi
  00072	c1 e3 04	 shl	 ebx, 4
  00075	2b df		 sub	 ebx, edi
  00077	0f b7 7d f6	 movzx	 edi, WORD PTR _sysTime$[ebp+10]
  0007b	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  0007e	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  00081	89 45 e4	 mov	 DWORD PTR tv726[ebp], eax
  00084	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00089	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  0008c	0f 1f 40 00	 npad	 4
$LL4@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 681  : 		if ( (sysTime.wHour * 60 + sysTime.wMinute) < (pRET.m_iHour * 60 + pRET.m_iMinute ))

  00090	8b 39		 mov	 edi, DWORD PTR [ecx]
  00092	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00095	c1 e7 04	 shl	 edi, 4
  00098	2b 39		 sub	 edi, DWORD PTR [ecx]
  0009a	8d 1c bb	 lea	 ebx, DWORD PTR [ebx+edi*4]
  0009d	39 5d e4	 cmp	 DWORD PTR tv726[ebp], ebx
  000a0	7d 1d		 jge	 SHORT $LN196@CheckSync

; 682  : 		{
; 683  : 			if ( (iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET.m_iHour * 60 + pRET.m_iMinute) )

  000a2	8b f8		 mov	 edi, eax
  000a4	c1 e7 04	 shl	 edi, 4
  000a7	2b f8		 sub	 edi, eax
  000a9	8d 3c be	 lea	 edi, DWORD PTR [esi+edi*4]
  000ac	3b fb		 cmp	 edi, ebx
  000ae	7e 0f		 jle	 SHORT $LN196@CheckSync

; 684  : 			{
; 685  : 				bTIME_CHANGED = TRUE;
; 686  : 				iMIN_HOUR = pRET.m_iHour;

  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	bb 01 00 00 00	 mov	 ebx, 1

; 687  : 				iMIN_MINUTE = pRET.m_iMinute;

  000b7	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  000ba	89 5d e0	 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], ebx
  000bd	eb 03		 jmp	 SHORT $LN2@CheckSync
$LN196@CheckSync:
  000bf	8b 5d e0	 mov	 ebx, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN2@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000c2	83 c1 08	 add	 ecx, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000c5	3b ca		 cmp	 ecx, edx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 677  : 	for ( ; it != this->m_EventTime.end() ; it++ )

  000c7	75 c7		 jne	 SHORT $LL4@CheckSync

; 688  : 			}
; 689  : 		}
; 690  : 	}
; 691  : 
; 692  : 	if ( bTIME_CHANGED == FALSE )

  000c9	89 75 e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], esi
  000cc	8b 75 d4	 mov	 esi, DWORD PTR $T1[ebp]
  000cf	89 45 e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], eax
  000d2	8b 45 d8	 mov	 eax, DWORD PTR _it$2$[ebp]
  000d5	85 db		 test	 ebx, ebx
  000d7	75 51		 jne	 SHORT $LN6@CheckSync
$LN193@CheckSync:

; 693  : 	{
; 694  : 		iMIN_HOUR = 24;

  000d9	bb 18 00 00 00	 mov	 ebx, 24			; 00000018H

; 695  : 		iMIN_MINUTE = 60;

  000de	bf 3c 00 00 00	 mov	 edi, 60			; 0000003cH
  000e3	89 5d e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], ebx
  000e6	89 7d e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000e9	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 698  : 		for ( ; it != this->m_EventTime.end() ; it++ )

  000eb	74 3a		 je	 SHORT $LN194@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  000ed	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000f0	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
$LL7@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 702  : 			if ( (iMIN_HOUR * 60 + iMIN_MINUTE) > (pRET.m_iHour * 60 + pRET.m_iMinute) )

  000f3	8b 10		 mov	 edx, DWORD PTR [eax]
  000f5	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  000f8	c1 e2 04	 shl	 edx, 4
  000fb	2b 10		 sub	 edx, DWORD PTR [eax]
  000fd	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  00100	8b d3		 mov	 edx, ebx
  00102	c1 e2 04	 shl	 edx, 4
  00105	2b d3		 sub	 edx, ebx
  00107	8d 14 97	 lea	 edx, DWORD PTR [edi+edx*4]
  0010a	3b d6		 cmp	 edx, esi
  0010c	7e 0c		 jle	 SHORT $LN5@CheckSync

; 703  : 			{
; 704  : 				bTIME_CHANGED = 2;
; 705  : 				iMIN_HOUR = pRET.m_iHour;

  0010e	8b 18		 mov	 ebx, DWORD PTR [eax]

; 706  : 				iMIN_MINUTE = pRET.m_iMinute;

  00110	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00113	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _bTIME_CHANGED$1$[ebp], 2
$LN5@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  0011a	83 c0 08	 add	 eax, 8

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0011d	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 698  : 		for ( ; it != this->m_EventTime.end() ; it++ )

  0011f	75 d2		 jne	 SHORT $LL7@CheckSync
  00121	89 7d e4	 mov	 DWORD PTR _iMIN_MINUTE$1$[ebp], edi
  00124	89 5d e8	 mov	 DWORD PTR _iMIN_HOUR$1$[ebp], ebx
$LN194@CheckSync:
  00127	8b 5d e0	 mov	 ebx, DWORD PTR _bTIME_CHANGED$1$[ebp]
$LN6@CheckSync:

; 707  : 			}
; 708  : 		}
; 709  : 	}
; 710  : 
; 711  : 	switch( bTIME_CHANGED )

  0012a	83 eb 01	 sub	 ebx, 1
  0012d	74 40		 je	 SHORT $LN15@CheckSync
  0012f	83 eb 01	 sub	 ebx, 1
  00132	74 2b		 je	 SHORT $LN16@CheckSync

; 725  : 	default:
; 726  : 		LogAddC(2,"[XMasAttackEvent] No Schedule Time Data");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LHGLLEGN@?$FLXMasAttackEvent?$FN?5No?5Schedule?5Ti@
  00139	6a 02		 push	 2
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 727  : 		SetState(ATTACKEVENT_STATE_NONE);

  00141	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00144	83 c4 08	 add	 esp, 8
  00147	6a 00		 push	 0
  00149	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState
  0014e	5f		 pop	 edi
  0014f	5b		 pop	 ebx
  00150	5e		 pop	 esi

; 735  : }

  00151	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00154	33 cd		 xor	 ecx, ebp
  00156	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
$LN16@CheckSync:

; 716  : 			this->m_TimeCounter.SetSeconds(bTmpSec);
; 717  : 		}
; 718  : 		break;
; 719  : 	case 2:
; 720  : 		{
; 721  : 			int bTmpSec = ((24+iMIN_HOUR) * 60 * 60 + iMIN_MINUTE * 60) - (sysTime.wHour * 60 * 60 + sysTime.wMinute * 60 + sysTime.wSecond);

  0015f	8b 7d e8	 mov	 edi, DWORD PTR _iMIN_HOUR$1$[ebp]
  00162	8b cf		 mov	 ecx, edi
  00164	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  00168	2b c8		 sub	 ecx, eax
  0016a	83 c1 18	 add	 ecx, 24			; 00000018H

; 722  : 			this->m_TimeCounter.SetSeconds(bTmpSec);
; 723  : 		}
; 724  : 		break;

  0016d	eb 0b		 jmp	 SHORT $LN199@CheckSync
$LN15@CheckSync:

; 712  : 	{
; 713  : 	case 1:
; 714  : 		{
; 715  : 			int bTmpSec = (iMIN_HOUR * 60 * 60 + iMIN_MINUTE * 60) - (sysTime.wHour * 60 * 60 + sysTime.wMinute * 60 + sysTime.wSecond);

  0016f	8b 7d e8	 mov	 edi, DWORD PTR _iMIN_HOUR$1$[ebp]
  00172	8b cf		 mov	 ecx, edi
  00174	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTime$[ebp+8]
  00178	2b c8		 sub	 ecx, eax
$LN199@CheckSync:
  0017a	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTime$[ebp+10]
  0017e	8b d1		 mov	 edx, ecx
  00180	8b 5d e4	 mov	 ebx, DWORD PTR _iMIN_MINUTE$1$[ebp]
  00183	c1 e2 04	 shl	 edx, 4
  00186	2b d1		 sub	 edx, ecx
  00188	c1 e2 02	 shl	 edx, 2
  0018b	2b d0		 sub	 edx, eax
  0018d	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTime$[ebp+12]
  00191	03 d3		 add	 edx, ebx
  00193	8b f2		 mov	 esi, edx
  00195	c1 e6 04	 shl	 esi, 4
  00198	2b f2		 sub	 esi, edx
  0019a	c1 e6 02	 shl	 esi, 2
  0019d	2b f0		 sub	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 60   : 		TICK_COUNT = GetTickCount() + Seconds*1000;

  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001a5	69 ce e8 03 00
	00		 imul	 ecx, esi, 1000
  001ab	8b 75 dc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  001ae	03 c1		 add	 eax, ecx
  001b0	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 61   : 	}
; 62   : 
; 63   : 	int GetSeconds()
; 64   : 	{
; 65   : 		int TICK_CURENT = GetTickCount();
; 66   : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;
; 67   : 
; 68   : 		if( TICK_LEFT < 0 )
; 69   : 		{
; 70   : 			TICK_COUNT = TICK_CURENT;
; 71   : 			return false;
; 72   : 		}
; 73   : 	return (TICK_LEFT+999)/1000;
; 74   : 	}
; 75   : 
; 76   : 	void SetMinutes(int Minutes)
; 77   : 	{
; 78   : 		TICK_COUNT = GetTickCount()+Minutes*60000;
; 79   : 	}
; 80   : 
; 81   : 	int GetMinutes()
; 82   : 	{
; 83   : 		int TICK_CURENT = GetTickCount();

  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 84   : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;

  001b9	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  001bc	2b c8		 sub	 ecx, eax

; 85   : 
; 86   : 		if( TICK_LEFT < 0 )

  001be	79 07		 jns	 SHORT $LN183@CheckSync

; 87   : 		{
; 88   : 			TICK_COUNT = TICK_CURENT;

  001c0	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 89   : 			return false;

  001c3	33 c0		 xor	 eax, eax
  001c5	eb 17		 jmp	 SHORT $LN182@CheckSync
$LN183@CheckSync:

; 90   : 		}
; 91   : 	return (TICK_LEFT+59999)/60000;

  001c7	81 c1 5f ea 00
	00		 add	 ecx, 59999		; 0000ea5fH
  001cd	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  001d2	f7 e9		 imul	 ecx
  001d4	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  001d7	8b c2		 mov	 eax, edx
  001d9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001dc	03 c2		 add	 eax, edx
$LN182@CheckSync:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 731  : 	LogAddTD("[XMasAttackEvent] Sync Start Time. [%d] min remain (START HOUR:%d, MIN:%d)",

  001de	53		 push	 ebx
  001df	57		 push	 edi
  001e0	50		 push	 eax
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@EFNIAOHC@?$FLXMasAttackEvent?$FN?5Sync?5Start?5Tim@
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 732  : 		m_TimeCounter.GetMinutes(),iMIN_HOUR,iMIN_MINUTE);
; 733  : 
; 734  : 	m_iLEFT_MIN = m_iTIME_OPEN;

  001ec	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  001ef	83 c4 10	 add	 esp, 16			; 00000010H

; 735  : }

  001f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f5	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  001f8	33 cd		 xor	 ecx, ebp
  001fa	5f		 pop	 edi
  001fb	5b		 pop	 ebx
  001fc	5e		 pop	 esi
  001fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c3		 ret	 0
?CheckSync@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::CheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SendEffect@CXMasAttackEvent@@QAEXPADH@Z
_TEXT	SEGMENT
_pMsg$ = -268						; size = 6
_szBuff$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_szMsg$ = 8						; size = 4
_Effect$ = 12						; size = 4
?SendEffect@CXMasAttackEvent@@QAEXPADH@Z PROC		; CXMasAttackEvent::SendEffect, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _szMsg$[ebp]

; 393  : 	char szBuff[256];
; 394  : 	wsprintf(szBuff,szMsg);

  00016	50		 push	 eax
  00017	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 395  : 	AllSendServerMsg(szBuff);

  00024	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szBuff$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?AllSendServerMsg@@YAXPAD@Z ; AllSendServerMsg

; 396  : 
; 397  : 	PMSG_ANS_CL_EFFECT pMsg;
; 398  : 	PHeadSetB((LPBYTE)&pMsg,0x9E, sizeof(pMsg));

  00030	6a 06		 push	 6
  00032	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00038	68 9e 00 00 00	 push	 158			; 0000009eH
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 399  : 
; 400  : 	pMsg.wEffectNum = Effect;

  00043	66 8b 45 0c	 mov	 ax, WORD PTR _Effect$[ebp]
  00047	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+4], ax

; 401  : 
; 402  : 	DataSendAll((LPBYTE)&pMsg,pMsg.h.size);

  0004e	0f b6 85 f5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00055	50		 push	 eax
  00056	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?DataSendAll@@YAXPAEH@Z	; DataSendAll

; 403  : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	83 c4 20	 add	 esp, 32			; 00000020H
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?SendEffect@CXMasAttackEvent@@QAEXPADH@Z ENDP		; CXMasAttackEvent::SendEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?ProcState_PLAYING@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_lpMonsterHerd$1$ = -16					; size = 4
_bLive$1$ = -12						; size = 4
_iRandX$1 = -12						; size = 1
_iRandY$2 = -8						; size = 1
_TICK_COUNT$1$ = -4					; size = 4
?ProcState_PLAYING@CXMasAttackEvent@@QAEXXZ PROC	; CXMasAttackEvent::ProcState_PLAYING, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 101  : 		int TICK_CURENT = GetTickCount();

  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 102  : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;

  00011	8b 5f 4c	 mov	 ebx, DWORD PTR [edi+76]
  00014	2b d8		 sub	 ebx, eax
  00016	89 5d fc	 mov	 DWORD PTR _TICK_COUNT$1$[ebp], ebx

; 103  : 
; 104  : 		if( TICK_LEFT < 0 )

  00019	79 0e		 jns	 SHORT $LN22@ProcState_

; 105  : 		{
; 106  : 			TICK_COUNT = TICK_CURENT;

  0001b	89 47 4c	 mov	 DWORD PTR [edi+76], eax
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 417  : 	int Seconds = TICK_COUNT / 1000;

  0001e	33 f6		 xor	 esi, esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 107  : 			return false;

  00020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _TICK_COUNT$1$[ebp], 0
  00027	eb 31		 jmp	 SHORT $LN11@ProcState_
$LN22@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 417  : 	int Seconds = TICK_COUNT / 1000;

  00029	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0002e	f7 eb		 imul	 ebx
  00030	c1 fa 06	 sar	 edx, 6
  00033	8b f2		 mov	 esi, edx
  00035	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00038	03 f2		 add	 esi, edx

; 418  : 
; 419  : 	if( TICK_COUNT >= 1000 && rand()%20 == 0)

  0003a	81 fb e8 03 00
	00		 cmp	 ebx, 1000		; 000003e8H
  00040	7c 18		 jl	 SHORT $LN11@ProcState_
  00042	e8 00 00 00 00	 call	 _rand
  00047	99		 cdq
  00048	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0004d	f7 f9		 idiv	 ecx
  0004f	85 d2		 test	 edx, edx
  00051	75 07		 jne	 SHORT $LN11@ProcState_

; 420  : 	{
; 421  : 		Move();

  00053	8b cf		 mov	 ecx, edi
  00055	e8 00 00 00 00	 call	 ?Move@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::Move
$LN11@ProcState_:

; 422  : 	}
; 423  : 
; 424  : 	if( Seconds / 30 != PlaySeconds && Seconds % 30 == 0)

  0005a	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0005f	f7 ee		 imul	 esi
  00061	03 d6		 add	 edx, esi
  00063	c1 fa 04	 sar	 edx, 4
  00066	8b ca		 mov	 ecx, edx
  00068	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006b	03 ca		 add	 ecx, edx
  0006d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?PlaySeconds@@3HA ; PlaySeconds
  00073	0f 84 dc 00 00
	00		 je	 $LN12@ProcState_
  00079	8b c1		 mov	 eax, ecx
  0007b	c1 e0 04	 shl	 eax, 4
  0007e	2b c1		 sub	 eax, ecx
  00080	03 c0		 add	 eax, eax
  00082	2b f0		 sub	 esi, eax
  00084	0f 85 cb 00 00
	00		 jne	 $LN12@ProcState_

; 425  : 	{
; 426  : 		PlaySeconds = Seconds / 30;

  0008a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?PlaySeconds@@3HA, ecx ; PlaySeconds

; 428  : 		for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00090	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00092	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00095	2b 47 40	 sub	 eax, DWORD PTR [edi+64]
  00098	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 428  : 		for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  0009b	85 c0		 test	 eax, eax
  0009d	0f 84 a3 00 00
	00		 je	 $LN3@ProcState_
  000a3	b9 dc 01 00 00	 mov	 ecx, 476		; 000001dcH
  000a8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@ProcState_:

; 429  : 		{
; 430  : 			CXMasMonsterHerd* lpMonsterHerd = m_MonsterHerdData[n];

  000b0	8b 47 40	 mov	 eax, DWORD PTR [edi+64]

; 431  : 			int bLive = FALSE;
; 432  : 	
; 433  : 			for(int i = 0; i < OBJ_MAXMONSTER; i++)

  000b3	33 d2		 xor	 edx, edx
  000b5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _bLive$1$[ebp], 0
  000bc	8b 34 98	 mov	 esi, DWORD PTR [eax+ebx*4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  000bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c4	05 78 14 00 00	 add	 eax, 5240		; 00001478H
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 437  : 					gObj[i].Live != 0 &&

  000d0	66 39 88 18 ec
	ff ff		 cmp	 WORD PTR [eax-5096], cx
  000d7	75 23		 jne	 SHORT $LN5@ProcState_
  000d9	83 38 00	 cmp	 DWORD PTR [eax], 0
  000dc	74 1e		 je	 SHORT $LN5@ProcState_
  000de	80 b8 d9 eb ff
	ff 00		 cmp	 BYTE PTR [eax-5159], 0
  000e5	74 15		 je	 SHORT $LN5@ProcState_
  000e7	0f b6 88 ab ec
	ff ff		 movzx	 ecx, BYTE PTR [eax-4949]
  000ee	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  000f1	0f 84 19 01 00
	00		 je	 $LN109@ProcState_
  000f7	b9 dc 01 00 00	 mov	 ecx, 476		; 000001dcH
$LN5@ProcState_:

; 431  : 			int bLive = FALSE;
; 432  : 	
; 433  : 			for(int i = 0; i < OBJ_MAXMONSTER; i++)

  000fc	42		 inc	 edx
  000fd	05 40 27 00 00	 add	 eax, 10048		; 00002740H
  00102	81 fa 04 29 00
	00		 cmp	 edx, 10500		; 00002904H
  00108	7c c6		 jl	 SHORT $LL7@ProcState_
  0010a	8b 45 f4	 mov	 eax, DWORD PTR _bLive$1$[ebp]
$LN119@ProcState_:

; 445  : 			LogAdd("[XMasAttackEvent] - per 30'S Inform MapNumber:%d, X:%d, Y:%d, Boss Live:%d",

  0010d	50		 push	 eax
  0010e	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00112	50		 push	 eax
  00113	0f b6 46 0c	 movzx	 eax, BYTE PTR [esi+12]
  00117	50		 push	 eax
  00118	ff 76 08	 push	 DWORD PTR [esi+8]
  0011b	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@CAFMAFGG@?$FLXMasAttackEvent?$FN?5?9?5per?530?8S?5Inf@
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00126	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 428  : 		for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00129	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0012a	2b 47 40	 sub	 eax, DWORD PTR [edi+64]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 445  : 			LogAdd("[XMasAttackEvent] - per 30'S Inform MapNumber:%d, X:%d, Y:%d, Boss Live:%d",

  0012d	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00130	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 428  : 		for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00133	b9 dc 01 00 00	 mov	 ecx, 476		; 000001dcH
  00138	3b d8		 cmp	 ebx, eax
  0013a	0f 82 70 ff ff
	ff		 jb	 $LL4@ProcState_
  00140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?PlaySeconds@@3HA ; PlaySeconds
$LN3@ProcState_:

; 446  : 				lpMonsterHerd->GetMap(),lpMonsterHerd->GetX(),lpMonsterHerd->GetY(),bLive);
; 447  : 			Notify("",lpMonsterHerd->GetMap(),lpMonsterHerd->GetX(),lpMonsterHerd->GetY());
; 448  : 		}
; 449  : 
; 450  : 		LogAdd("[XMasAttackEvent] - NotifySec: %d",PlaySeconds);

  00146	51		 push	 ecx
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NCANOPGD@?$FLXMasAttackEvent?$FN?5?9?5NotifySec?3?5?$CF@
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00152	83 c4 08	 add	 esp, 8
$LN12@ProcState_:

; 451  : 	}
; 452  : 
; 453  : 	if( m_bMonsterMove == FALSE )

  00155	83 7f 60 00	 cmp	 DWORD PTR [edi+96], 0
  00159	0f 85 9f 00 00
	00		 jne	 $LN15@ProcState_

; 454  : 	{
; 455  : 		if( TICK_COUNT <= m_iTIME_CLOSE )

  0015f	8b 45 fc	 mov	 eax, DWORD PTR _TICK_COUNT$1$[ebp]
  00162	3b 47 78	 cmp	 eax, DWORD PTR [edi+120]
  00165	0f 8f 93 00 00
	00		 jg	 $LN15@ProcState_
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0016b	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 457  : 			for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  0016e	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00170	2b 47 40	 sub	 eax, DWORD PTR [edi+64]
  00173	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 457  : 			for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00176	85 c0		 test	 eax, eax
  00178	74 7d		 je	 SHORT $LN9@ProcState_
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL10@ProcState_:

; 458  : 			{
; 459  : 				CXMasMonsterHerd* lpMonsterHerd = m_MonsterHerdData[n];

  00180	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00183	8d 34 9d 00 00
	00 00		 lea	 esi, DWORD PTR [ebx*4]
  0018a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0018d	89 45 f0	 mov	 DWORD PTR _lpMonsterHerd$1$[ebp], eax

; 460  : 
; 461  : 				BYTE ucRAND;
; 462  : 				BYTE iRandX;
; 463  : 				BYTE iRandY;
; 464  : 
; 465  : 				ucRAND = rand()%4;

  00190	e8 00 00 00 00	 call	 _rand
  00195	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0019a	79 05		 jns	 SHORT $LN121@ProcState_
  0019c	48		 dec	 eax
  0019d	83 c8 fc	 or	 eax, -4			; fffffffcH
  001a0	40		 inc	 eax
$LN121@ProcState_:

; 466  : 				iRandX = g_XMasMapDestPosition[n][ucRAND*2];

  001a1	0f b6 c0	 movzx	 eax, al
  001a4	03 c6		 add	 eax, esi

; 467  : 				iRandY = g_XMasMapDestPosition[n][ucRAND*2+1];
; 468  : 
; 469  : 				if( lpMonsterHerd->MoveHerd(iRandX,iRandY) )

  001a6	8b 75 f0	 mov	 esi, DWORD PTR _lpMonsterHerd$1$[ebp]
  001a9	8a 0c c5 00 00
	00 00		 mov	 cl, BYTE PTR ?g_XMasMapDestPosition@@3PAY07HA[eax*8]
  001b0	8a 04 c5 04 00
	00 00		 mov	 al, BYTE PTR ?g_XMasMapDestPosition@@3PAY07HA[eax*8+4]
  001b7	88 45 f8	 mov	 BYTE PTR _iRandY$2[ebp], al
  001ba	ff 75 f8	 push	 DWORD PTR _iRandY$2[ebp]
  001bd	8b 06		 mov	 eax, DWORD PTR [esi]
  001bf	88 4d f4	 mov	 BYTE PTR _iRandX$1[ebp], cl
  001c2	8b ce		 mov	 ecx, esi
  001c4	ff 75 f4	 push	 DWORD PTR _iRandX$1[ebp]
  001c7	ff 50 2c	 call	 DWORD PTR [eax+44]
  001ca	85 c0		 test	 eax, eax
  001cc	74 1b		 je	 SHORT $LN8@ProcState_

; 470  : 				{
; 471  : 					LogAdd("[XMasAttackEvent] - Monster Herd Move MapNumber:%d, X:%d, Y:%d",

  001ce	0f b6 45 f8	 movzx	 eax, BYTE PTR _iRandY$2[ebp]
  001d2	50		 push	 eax
  001d3	0f b6 45 f4	 movzx	 eax, BYTE PTR _iRandX$1[ebp]
  001d7	50		 push	 eax
  001d8	ff 76 08	 push	 DWORD PTR [esi+8]
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@COOJAPLA@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Herd@
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@ProcState_:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001e9	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 457  : 			for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  001ec	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  001ed	2b 47 40	 sub	 eax, DWORD PTR [edi+64]
  001f0	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 457  : 			for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  001f3	3b d8		 cmp	 ebx, eax
  001f5	72 89		 jb	 SHORT $LL10@ProcState_
$LN9@ProcState_:

; 472  : 						lpMonsterHerd->GetMap(),iRandX,iRandY);
; 473  : 					Notify("",lpMonsterHerd->GetMap(),iRandX,iRandY);
; 474  : 
; 475  : 					
; 476  : 				}
; 477  : 			}
; 478  : 
; 479  : 			m_bMonsterMove = TRUE;

  001f7	c7 47 60 01 00
	00 00		 mov	 DWORD PTR [edi+96], 1
$LN15@ProcState_:

; 480  : 		}
; 481  : 	}
; 482  : 
; 483  : 	if( TICK_COUNT == 0 )

  001fe	83 7d fc 00	 cmp	 DWORD PTR _TICK_COUNT$1$[ebp], 0
  00202	75 2b		 jne	 SHORT $LN17@ProcState_

; 484  : 	{
; 485  : 		if( m_bDoEvent != 0 )

  00204	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0

; 486  : 		{
; 487  : 			SetState(ATTACKEVENT_STATE_CLOSED);

  00208	8b cf		 mov	 ecx, edi
  0020a	74 0e		 je	 SHORT $LN18@ProcState_
  0020c	6a 01		 push	 1

; 488  : 		}
; 489  : 		else

  0020e	eb 0c		 jmp	 SHORT $LN122@ProcState_
$LN109@ProcState_:

; 438  : 					gObj[i].MapNumber == lpMonsterHerd->GetMap() )
; 439  : 				{
; 440  : 					bLive = TRUE;

  00210	b8 01 00 00 00	 mov	 eax, 1
  00215	e9 f3 fe ff ff	 jmp	 $LN119@ProcState_
$LN18@ProcState_:

; 490  : 		{
; 491  : 			SetState(ATTACKEVENT_STATE_NONE);

  0021a	6a 00		 push	 0
$LN122@ProcState_:
  0021c	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState

; 492  : 		}
; 493  : 
; 494  : 		LogAdd("[XMasAttackEvent] - Event Ended");

  00221	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@GNBALKOM@?$FLXMasAttackEvent?$FN?5?9?5Event?5Ended?$AA@
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0022c	83 c4 04	 add	 esp, 4
$LN17@ProcState_:
  0022f	5f		 pop	 edi
  00230	5e		 pop	 esi
  00231	5b		 pop	 ebx

; 495  : 	}
; 496  : }

  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
?ProcState_PLAYING@CXMasAttackEvent@@QAEXXZ ENDP	; CXMasAttackEvent::ProcState_PLAYING
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?ProcState_CLOSED@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcState_CLOSED@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::ProcState_CLOSED, COMDAT
; _this$ = ecx

; 344  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 345  : 	if( m_bDoEvent == FALSE )

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	75 30		 jne	 SHORT $LN2@ProcState_

; 346  : 	{
; 347  : 		SetState(ATTACKEVENT_STATE_NONE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState

; 348  : 		LogAdd("%s	%s	%s	%s	%d",

  00010	68 5d 01 00 00	 push	 349			; 0000015dH
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PJEFBOCC@XMasAttackEvent?4cpp?$AA@
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GNAONFCI@SetState?$CIATTACKEVENT_STATE_NONE?$CJ@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MJHOMCIJ@m_bDoEvent?$AA@
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00034	83 c4 18	 add	 esp, 24			; 00000018H
  00037	5e		 pop	 esi

; 382  : 	}
; 383  : }

  00038	c3		 ret	 0
$LN2@ProcState_:
  00039	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 101  : 		int TICK_CURENT = GetTickCount();

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 102  : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;

  00040	8b 7e 4c	 mov	 edi, DWORD PTR [esi+76]
  00043	2b f8		 sub	 edi, eax

; 103  : 
; 104  : 		if( TICK_LEFT < 0 )

  00045	79 05		 jns	 SHORT $LN11@ProcState_

; 105  : 		{
; 106  : 			TICK_COUNT = TICK_CURENT;

  00047	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 107  : 			return false;

  0004a	eb 4b		 jmp	 SHORT $LN13@ProcState_
$LN11@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 355  : 	if( TICK_COUNT >= 1000 )

  0004c	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00052	7c 3f		 jl	 SHORT $LN5@ProcState_

; 356  : 	{
; 357  : 		if( TICK_COUNT/60000 != m_iLEFT_MIN )

  00054	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00059	f7 ef		 imul	 edi
  0005b	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx
  00065	3b 4e 7c	 cmp	 ecx, DWORD PTR [esi+124]
  00068	74 29		 je	 SHORT $LN5@ProcState_

; 358  : 		{
; 359  : 			m_iLEFT_MIN = TICK_COUNT/60000;
; 360  : 
; 361  : 			if( m_iLEFT_MIN+1 == m_iTIME_OPEN / 60000 )

  0006a	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  0006f	89 4e 7c	 mov	 DWORD PTR [esi+124], ecx
  00072	f7 6e 70	 imul	 DWORD PTR [esi+112]
  00075	41		 inc	 ecx
  00076	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00079	8b c2		 mov	 eax, edx
  0007b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007e	03 c2		 add	 eax, edx
  00080	3b c8		 cmp	 ecx, eax
  00082	75 0f		 jne	 SHORT $LN5@ProcState_

; 362  : 			{
; 363  : 				LogAdd("[XMasAttackEvent] - Before %d minutes - Advertise",m_iLEFT_MIN+1);

  00084	51		 push	 ecx
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@FLOKLKPF@?$FLXMasAttackEvent?$FN?5?9?5Before?5?$CFd?5mi@
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00090	83 c4 08	 add	 esp, 8
$LN5@ProcState_:

; 364  : 			}
; 365  : 		}
; 366  : 	}
; 367  : 
; 368  : 	if( TICK_COUNT == 0 )

  00093	85 ff		 test	 edi, edi
  00095	75 3a		 jne	 SHORT $LN14@ProcState_
$LN13@ProcState_:

; 369  : 	{
; 370  : 		SendEffect(lMsg.Get(MSGGET(10,23)),1);

  00097	6a 01		 push	 1
  00099	68 17 0a 00 00	 push	 2583			; 00000a17H
  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a3	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a8	50		 push	 eax
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?SendEffect@CXMasAttackEvent@@QAEXPADH@Z ; CXMasAttackEvent::SendEffect

; 371  : 
; 372  : 		if( m_bDoEvent != 0 )

  000b0	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0

; 373  : 		{
; 374  : 			SetState(ATTACKEVENT_STATE_PLAYING);

  000b4	8b ce		 mov	 ecx, esi
  000b6	74 04		 je	 SHORT $LN7@ProcState_
  000b8	6a 02		 push	 2

; 375  : 		}
; 376  : 		else

  000ba	eb 02		 jmp	 SHORT $LN15@ProcState_
$LN7@ProcState_:

; 377  : 		{
; 378  : 			SetState(ATTACKEVENT_STATE_NONE);

  000bc	6a 00		 push	 0
$LN15@ProcState_:
  000be	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState

; 379  : 		}
; 380  : 
; 381  : 		LogAdd("[XMasAttackEvent] - Event Started");

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DNJMFKJI@?$FLXMasAttackEvent?$FN?5?9?5Event?5Starte@
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000ce	83 c4 04	 add	 esp, 4
$LN14@ProcState_:

; 382  : 	}
; 383  : }

  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	c3		 ret	 0
?ProcState_CLOSED@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::ProcState_CLOSED
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?ProcState_NONE@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NONE@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::ProcState_NONE, COMDAT
; _this$ = ecx

; 340  : 
; 341  : }

  00000	c3		 ret	 0
?ProcState_NONE@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::ProcState_NONE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?Run@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?Run@CXMasAttackEvent@@QAEXXZ PROC			; CXMasAttackEvent::Run, COMDAT
; _this$ = ecx

; 639  : 	if( m_bManualStart != FALSE )

  00000	83 b9 80 00 00
	00 00		 cmp	 DWORD PTR [ecx+128], 0
  00007	75 22		 jne	 SHORT $LN6@Run

; 640  : 		return;
; 641  : 
; 642  : 	if( m_bDoEvent == FALSE )

  00009	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  0000d	74 1c		 je	 SHORT $LN6@Run

; 643  : 		return;
; 644  : 
; 645  : 	switch( m_nEventState )

  0000f	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00012	83 e8 00	 sub	 eax, 0
  00015	74 14		 je	 SHORT $LN6@Run
  00017	83 e8 01	 sub	 eax, 1
  0001a	74 0a		 je	 SHORT $LN7@Run
  0001c	83 e8 01	 sub	 eax, 1
  0001f	75 0a		 jne	 SHORT $LN6@Run

; 652  : 		break;
; 653  : 	case ATTACKEVENT_STATE_PLAYING:
; 654  : 		ProcState_PLAYING();

  00021	e9 00 00 00 00	 jmp	 ?ProcState_PLAYING@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::ProcState_PLAYING
$LN7@Run:

; 646  : 	{
; 647  : 	case ATTACKEVENT_STATE_NONE:
; 648  : 		ProcState_NONE();
; 649  : 		break;
; 650  : 	case ATTACKEVENT_STATE_CLOSED:
; 651  : 		ProcState_CLOSED();

  00026	e9 00 00 00 00	 jmp	 ?ProcState_CLOSED@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::ProcState_CLOSED
$LN6@Run:

; 655  : 		break;
; 656  : 	}
; 657  : }

  0002b	c3		 ret	 0
?Run@CXMasAttackEvent@@QAEXXZ ENDP			; CXMasAttackEvent::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?CheckLocation@CXMasAttackEvent@@QAEHPAVCXMasMonsterHerd@@PAUXMASMONSTER_MAP_DATA@@@Z
_TEXT	SEGMENT
_Y$ = -16						; size = 1
_this$1$ = -12						; size = 4
_X$ = -5						; size = 1
_cY$ = -1						; size = 1
_lpMonsterHerd$ = 8					; size = 4
_cX$ = 11						; size = 1
_iCount$1$ = 12						; size = 4
_MapInfo$ = 12						; size = 4
?CheckLocation@CXMasAttackEvent@@QAEHPAVCXMasMonsterHerd@@PAUXMASMONSTER_MAP_DATA@@@Z PROC ; CXMasAttackEvent::CheckLocation, COMDAT
; _this$ = ecx

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 609  : 	int iCount = 1000;
; 610  : 	BYTE X;
; 611  : 	BYTE Y;
; 612  : 	BYTE cX;
; 613  : 	BYTE cY;
; 614  : 
; 615  : 	if( lpMonsterHerd->GetCurrentLocation(cX,cY) == FALSE )

  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpMonsterHerd$[ebp]
  0000b	bb e8 03 00 00	 mov	 ebx, 1000		; 000003e8H
  00010	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
  00013	8d 4d ff	 lea	 ecx, DWORD PTR _cY$[ebp]
  00016	51		 push	 ecx
  00017	8d 4d 0b	 lea	 ecx, DWORD PTR _cX$[ebp]
  0001a	8b 07		 mov	 eax, DWORD PTR [edi]
  0001c	51		 push	 ecx
  0001d	8b cf		 mov	 ecx, edi
  0001f	ff 50 20	 call	 DWORD PTR [eax+32]
  00022	85 c0		 test	 eax, eax
  00024	75 08		 jne	 SHORT $LN19@CheckLocat
  00026	5f		 pop	 edi
  00027	5b		 pop	 ebx

; 635  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN19@CheckLocat:
  0002e	56		 push	 esi
  0002f	8b 75 0c	 mov	 esi, DWORD PTR _MapInfo$[ebp]
$LL2@CheckLocat:

; 616  : 		return false;
; 617  : 
; 618  : 	while( iCount -- )

  00032	4b		 dec	 ebx
  00033	89 5d 0c	 mov	 DWORD PTR _iCount$1$[ebp], ebx

; 619  : 	{
; 620  : 		X = (rand()%m_iMOVE_RAND_SIZE * (((rand()%3)-1)*-1)) + cX;

  00036	e8 00 00 00 00	 call	 _rand
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0003e	99		 cdq
  0003f	f7 79 64	 idiv	 DWORD PTR [ecx+100]
  00042	8b da		 mov	 ebx, edx
  00044	e8 00 00 00 00	 call	 _rand
  00049	99		 cdq
  0004a	b9 03 00 00 00	 mov	 ecx, 3
  0004f	f7 f9		 idiv	 ecx
  00051	0f b6 c3	 movzx	 eax, bl
  00054	fe ca		 dec	 dl
  00056	0f b6 ca	 movzx	 ecx, dl
  00059	0f af c8	 imul	 ecx, eax
  0005c	0f b6 45 0b	 movzx	 eax, BYTE PTR _cX$[ebp]
  00060	2a c1		 sub	 al, cl
  00062	88 45 fb	 mov	 BYTE PTR _X$[ebp], al

; 621  : 		Y = (rand()%m_iMOVE_RAND_SIZE * (((rand()%3)-1)*-1)) + cY;

  00065	e8 00 00 00 00	 call	 _rand
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006d	99		 cdq
  0006e	f7 79 64	 idiv	 DWORD PTR [ecx+100]
  00071	8b da		 mov	 ebx, edx
  00073	e8 00 00 00 00	 call	 _rand
  00078	99		 cdq
  00079	b9 03 00 00 00	 mov	 ecx, 3
  0007e	f7 f9		 idiv	 ecx
  00080	0f b6 c3	 movzx	 eax, bl
  00083	fe ca		 dec	 dl
  00085	0f b6 ca	 movzx	 ecx, dl
  00088	0f af c8	 imul	 ecx, eax
  0008b	8a 45 ff	 mov	 al, BYTE PTR _cY$[ebp]
  0008e	2a c1		 sub	 al, cl

; 622  : 
; 623  : 		if( X < MapInfo->X1 || X > MapInfo->X2 )

  00090	0f b6 4d fb	 movzx	 ecx, BYTE PTR _X$[ebp]
  00094	88 45 f0	 mov	 BYTE PTR _Y$[ebp], al
  00097	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0009a	7c 25		 jl	 SHORT $LN8@CheckLocat
  0009c	3b 4e 0c	 cmp	 ecx, DWORD PTR [esi+12]
  0009f	7f 20		 jg	 SHORT $LN8@CheckLocat

; 624  : 			continue;
; 625  : 
; 626  : 		if( Y < MapInfo->Y1 || Y > MapInfo->Y2 )

  000a1	0f b6 c0	 movzx	 eax, al
  000a4	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000a7	7c 18		 jl	 SHORT $LN8@CheckLocat
  000a9	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  000ac	7f 13		 jg	 SHORT $LN8@CheckLocat

; 627  : 			continue;
; 628  : 
; 629  : 		if( lpMonsterHerd->CheckLocation(X,Y) )

  000ae	8b 07		 mov	 eax, DWORD PTR [edi]
  000b0	8d 4d f0	 lea	 ecx, DWORD PTR _Y$[ebp]
  000b3	51		 push	 ecx
  000b4	8d 4d fb	 lea	 ecx, DWORD PTR _X$[ebp]
  000b7	51		 push	 ecx
  000b8	8b cf		 mov	 ecx, edi
  000ba	ff 50 28	 call	 DWORD PTR [eax+40]
  000bd	85 c0		 test	 eax, eax
  000bf	75 0b		 jne	 SHORT $LN14@CheckLocat
$LN8@CheckLocat:

; 616  : 		return false;
; 617  : 
; 618  : 	while( iCount -- )

  000c1	8b 5d 0c	 mov	 ebx, DWORD PTR _iCount$1$[ebp]
  000c4	85 db		 test	 ebx, ebx
  000c6	0f 85 66 ff ff
	ff		 jne	 $LL2@CheckLocat
$LN14@CheckLocat:

; 630  : 			break;
; 631  : 	}
; 632  : 
; 633  : 	lpMonsterHerd->MoveHerd(X,Y);

  000cc	ff 75 f0	 push	 DWORD PTR _Y$[ebp]
  000cf	8b 07		 mov	 eax, DWORD PTR [edi]
  000d1	8b cf		 mov	 ecx, edi
  000d3	ff 75 fb	 push	 DWORD PTR _X$[ebp]
  000d6	ff 50 2c	 call	 DWORD PTR [eax+44]
  000d9	5e		 pop	 esi
  000da	5f		 pop	 edi

; 634  : 	return true;

  000db	b8 01 00 00 00	 mov	 eax, 1
  000e0	5b		 pop	 ebx

; 635  : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?CheckLocation@CXMasAttackEvent@@QAEHPAVCXMasMonsterHerd@@PAUXMASMONSTER_MAP_DATA@@@Z ENDP ; CXMasAttackEvent::CheckLocation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
$T2 = -28						; size = 4
tv699 = -24						; size = 4
_this$1$ = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ PROC	; CXMasAttackEvent::CreateMonsterHerd, COMDAT
; _this$ = ecx

; 559  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 560  : 	EnterCriticalSection(&m_critsec);

  0002d	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  00030	50		 push	 eax
  00031	89 45 e8	 mov	 DWORD PTR tv699[ebp], eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0003a	8b 73 50	 mov	 esi, DWORD PTR [ebx+80]

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0003d	3b 73 54	 cmp	 esi, DWORD PTR [ebx+84]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 562  : 	for(std::vector<XMASMONSTER_MAP_DATA>::iterator _It = m_EventMapData.begin(); _It != m_EventMapData.end(); _It++)

  00040	0f 84 9b 00 00
	00		 je	 $LN3@CreateMons
  00046	8d 7b 40	 lea	 edi, DWORD PTR [ebx+64]
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CreateMons:

; 564  : 		m_MonsterHerdData.push_back(new CXMasMonsterHerd);

  00050	6a 40		 push	 64			; 00000040H
  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00057	83 c4 04	 add	 esp, 4
  0005a	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	85 c0		 test	 eax, eax
  00066	74 0b		 je	 SHORT $LN6@CreateMons
  00068	8b c8		 mov	 ecx, eax
  0006a	e8 00 00 00 00	 call	 ??0CXMasMonsterHerd@@QAE@XZ ; CXMasMonsterHerd::CXMasMonsterHerd
  0006f	8b d8		 mov	 ebx, eax
  00071	eb 02		 jmp	 SHORT $LN7@CreateMons
$LN6@CreateMons:
  00073	33 db		 xor	 ebx, ebx
$LN7@CreateMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8d 4d f0	 lea	 ecx, DWORD PTR $T3[ebp]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 564  : 		m_MonsterHerdData.push_back(new CXMasMonsterHerd);

  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00085	3b c8		 cmp	 ecx, eax
  00087	73 2e		 jae	 SHORT $LN75@CreateMons
  00089	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0008b	8d 55 f0	 lea	 edx, DWORD PTR $T3[ebp]
  0008e	3b ca		 cmp	 ecx, edx
  00090	77 25		 ja	 SHORT $LN75@CreateMons

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00092	8b da		 mov	 ebx, edx
  00094	2b d9		 sub	 ebx, ecx
  00096	c1 fb 02	 sar	 ebx, 2

; 899  : 			if (this->_Mylast() == this->_Myend())

  00099	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0009c	75 09		 jne	 SHORT $LN77@CreateMons

; 900  : 				_Reserve(1);

  0009e	6a 01		 push	 1
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
$LN77@CreateMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000a7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000aa	85 c9		 test	 ecx, ecx
  000ac	74 20		 je	 SHORT $LN284@CreateMons
  000ae	8b 07		 mov	 eax, DWORD PTR [edi]
  000b0	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 906  : 		else

  000b5	eb 17		 jmp	 SHORT $LN284@CreateMons
$LN75@CreateMons:

; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

  000b7	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  000ba	75 09		 jne	 SHORT $LN78@CreateMons

; 909  : 				_Reserve(1);

  000bc	6a 01		 push	 1
  000be	8b cf		 mov	 ecx, edi
  000c0	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
$LN78@CreateMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000c5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c8	85 c0		 test	 eax, eax
  000ca	74 02		 je	 SHORT $LN284@CreateMons
  000cc	89 18		 mov	 DWORD PTR [eax], ebx
$LN284@CreateMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000ce	8b 45 ec	 mov	 eax, DWORD PTR _this$1$[ebp]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  000d1	83 c6 14	 add	 esi, 20			; 00000014H

; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();

  000d4	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 206  : 		return (this->_Ptr == _Right._Ptr);

  000d8	3b 70 54	 cmp	 esi, DWORD PTR [eax+84]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 562  : 	for(std::vector<XMASMONSTER_MAP_DATA>::iterator _It = m_EventMapData.begin(); _It != m_EventMapData.end(); _It++)

  000db	0f 85 6f ff ff
	ff		 jne	 $LL4@CreateMons
$LN3@CreateMons:

; 565  : 	}
; 566  : 
; 567  : 	LeaveCriticalSection(&m_critsec);

  000e1	ff 75 e8	 push	 DWORD PTR tv699[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 568  : }

  000ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ$0:
  00000	6a 40		 push	 64			; 00000040H
  00002	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ ENDP	; CXMasAttackEvent::CreateMonsterHerd
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?AddMonsters@CXMasAttackEvent@@QAEXPAVCXMasMonsterHerd@@@Z
_TEXT	SEGMENT
tv349 = -8						; size = 4
_this$1$ = -4						; size = 4
_lpMonsterHerd$ = 8					; size = 4
?AddMonsters@CXMasAttackEvent@@QAEXPAVCXMasMonsterHerd@@@Z PROC ; CXMasAttackEvent::AddMonsters, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 572  : 	EnterCriticalSection(&m_critsec);

  0000d	8d 43 10	 lea	 eax, DWORD PTR [ebx+16]
  00010	50		 push	 eax
  00011	89 45 f8	 mov	 DWORD PTR tv349[ebp], eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001a	8b 73 34	 mov	 esi, DWORD PTR [ebx+52]

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0001d	3b 73 38	 cmp	 esi, DWORD PTR [ebx+56]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 574  : 	for(std::vector<MONSTER_EVENT_DATA>::iterator _It = m_EventMonster.begin(); _It != m_EventMonster.end(); _It++)

  00020	74 32		 je	 SHORT $LN3@AddMonster
  00022	8b 5d 08	 mov	 ebx, DWORD PTR _lpMonsterHerd$[ebp]
  00025	57		 push	 edi
$LL4@AddMonster:

; 575  : 	{
; 576  : 		MONSTER_EVENT_DATA* lpMonster = &(*_It);
; 577  : 		int iCount = 100;

  00026	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  0002b	0f 1f 44 00 00	 npad	 5
$LL5@AddMonster:

; 580  : 		{
; 581  : 			if( lpMonsterHerd->AddMonster(lpMonster->m_iType,lpMonster->m_bDoRegen,lpMonster->m_bDoAttackFirst) )

  00030	ff 76 08	 push	 DWORD PTR [esi+8]
  00033	8b 03		 mov	 eax, DWORD PTR [ebx]
  00035	8b cb		 mov	 ecx, ebx
  00037	ff 76 04	 push	 DWORD PTR [esi+4]
  0003a	4f		 dec	 edi
  0003b	ff 36		 push	 DWORD PTR [esi]
  0003d	ff 50 08	 call	 DWORD PTR [eax+8]
  00040	85 c0		 test	 eax, eax
  00042	75 04		 jne	 SHORT $LN2@AddMonster

; 578  : 
; 579  : 		while( iCount-- != 0 )

  00044	85 ff		 test	 edi, edi
  00046	75 e8		 jne	 SHORT $LL5@AddMonster
$LN2@AddMonster:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  0004b	83 c6 0c	 add	 esi, 12			; 0000000cH

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004e	3b 70 38	 cmp	 esi, DWORD PTR [eax+56]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 574  : 	for(std::vector<MONSTER_EVENT_DATA>::iterator _It = m_EventMonster.begin(); _It != m_EventMonster.end(); _It++)

  00051	75 d3		 jne	 SHORT $LL4@AddMonster
  00053	5f		 pop	 edi
$LN3@AddMonster:

; 582  : 			{
; 583  : 				break;
; 584  : 			}
; 585  : 		}
; 586  : 	}
; 587  : 
; 588  : 	LeaveCriticalSection(&m_critsec);

  00054	ff 75 f8	 push	 DWORD PTR tv349[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 589  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?AddMonsters@CXMasAttackEvent@@QAEXPAVCXMasMonsterHerd@@@Z ENDP ; CXMasAttackEvent::AddMonsters
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?RemoveMonsterHerd@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
tv445 = -4						; size = 4
?RemoveMonsterHerd@CXMasAttackEvent@@QAEXXZ PROC	; CXMasAttackEvent::RemoveMonsterHerd, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 593  : 	EnterCriticalSection(&m_critsec);

  00008	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0000b	50		 push	 eax
  0000c	89 45 fc	 mov	 DWORD PTR tv445[ebp], eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00015	8b 77 40	 mov	 esi, DWORD PTR [edi+64]

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00018	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 597  : 	while( _It != m_MonsterHerdData.end() )

  0001b	74 46		 je	 SHORT $LN3@RemoveMons
  0001d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00020	53		 push	 ebx
$LL2@RemoveMons:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00021	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 599  : 		CXMasMonsterHerd* lpMonster = *_It;

  00024	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  00026	2b c1		 sub	 eax, ecx

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00028	83 e0 fc	 and	 eax, -4			; fffffffcH
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00033	83 47 44 fc	 add	 DWORD PTR [edi+68], -4	; fffffffcH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 600  : 		m_MonsterHerdData.erase(_It);

  0003a	85 db		 test	 ebx, ebx
  0003c	74 1c		 je	 SHORT $LN6@RemoveMons
  0003e	83 7b fc 00	 cmp	 DWORD PTR [ebx-4], 0
  00042	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00045	74 0a		 je	 SHORT $LN5@RemoveMons
  00047	8b 03		 mov	 eax, DWORD PTR [ebx]
  00049	8b cb		 mov	 ecx, ebx
  0004b	6a 03		 push	 3
  0004d	ff 10		 call	 DWORD PTR [eax]
  0004f	eb 09		 jmp	 SHORT $LN6@RemoveMons
$LN5@RemoveMons:
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00057	83 c4 04	 add	 esp, 4
$LN6@RemoveMons:

; 597  : 	while( _It != m_MonsterHerdData.end() )

  0005a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0005d	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 597  : 	while( _It != m_MonsterHerdData.end() )

  00060	75 bf		 jne	 SHORT $LL2@RemoveMons
  00062	5b		 pop	 ebx
$LN3@RemoveMons:

; 601  : 		delete [] lpMonster;
; 602  : 	}
; 603  : 
; 604  : 	LeaveCriticalSection(&m_critsec);

  00063	ff 75 fc	 push	 DWORD PTR tv445[ebp]
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 605  : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?RemoveMonsterHerd@CXMasAttackEvent@@QAEXXZ ENDP	; CXMasAttackEvent::RemoveMonsterHerd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?Notify@CXMasAttackEvent@@QAEXPADHEE@Z
_TEXT	SEGMENT
_szFormat$ = 8						; size = 4
_Map$ = 12						; size = 4
_X$ = 16						; size = 1
_Y$ = 20						; size = 1
?Notify@CXMasAttackEvent@@QAEXPADHEE@Z PROC		; CXMasAttackEvent::Notify, COMDAT
; _this$ = ecx

; 555  : 
; 556  : }

  00000	c2 10 00	 ret	 16			; 00000010H
?Notify@CXMasAttackEvent@@QAEXPADHEE@Z ENDP		; CXMasAttackEvent::Notify
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?Move@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
_tmpMapData$1 = -36					; size = 20
tv280 = -16						; size = 4
_lpMonsterHerd$1$ = -12					; size = 4
tv276 = -8						; size = 4
_n$1$ = -4						; size = 4
?Move@CXMasAttackEvent@@QAEXXZ PROC			; CXMasAttackEvent::Move, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 525  : 	if( m_bDoEvent == 0 )

  00009	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000d	0f 84 9a 00 00
	00		 je	 $LN59@Move

; 526  : 		return;
; 527  : 
; 528  : 	if( m_bMonsterMove != 0 )

  00013	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  00017	0f 85 90 00 00
	00		 jne	 $LN59@Move
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 531  : 	for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00020	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00022	2b 46 40	 sub	 eax, DWORD PTR [esi+64]
  00025	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 531  : 	for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00028	89 4d fc	 mov	 DWORD PTR _n$1$[ebp], ecx
  0002b	85 c0		 test	 eax, eax
  0002d	74 7e		 je	 SHORT $LN59@Move
  0002f	33 d2		 xor	 edx, edx
  00031	53		 push	 ebx
  00032	89 55 f8	 mov	 DWORD PTR tv276[ebp], edx
  00035	57		 push	 edi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@Move:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00040	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 533  : 		XMASMONSTER_MAP_DATA tmpMapData = m_EventMapData[n];

  00043	0f 10 04 10	 movups	 xmm0, XMMWORD PTR [eax+edx]
  00047	8b 44 10 10	 mov	 eax, DWORD PTR [eax+edx+16]
  0004b	89 45 ec	 mov	 DWORD PTR _tmpMapData$1[ebp+16], eax

; 534  : 		CXMasMonsterHerd* lpMonsterHerd = m_MonsterHerdData[n];

  0004e	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00051	0f 11 45 dc	 movups	 XMMWORD PTR _tmpMapData$1[ebp], xmm0
  00055	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]

; 535  : 
; 536  : 		if( CheckLocation(lpMonsterHerd,&tmpMapData) == FALSE )

  00058	8d 45 dc	 lea	 eax, DWORD PTR _tmpMapData$1[ebp]
  0005b	50		 push	 eax
  0005c	53		 push	 ebx
  0005d	8b ce		 mov	 ecx, esi
  0005f	89 5d f4	 mov	 DWORD PTR _lpMonsterHerd$1$[ebp], ebx
  00062	e8 00 00 00 00	 call	 ?CheckLocation@CXMasAttackEvent@@QAEHPAVCXMasMonsterHerd@@PAUXMASMONSTER_MAP_DATA@@@Z ; CXMasAttackEvent::CheckLocation
  00067	85 c0		 test	 eax, eax
  00069	74 40		 je	 SHORT $LN60@Move

; 537  : 			break;
; 538  : 
; 539  : 		int DiffRadius = m_iRADIUS_MAX - m_iRADIUS_MIN;
; 540  : 
; 541  : 		if( DiffRadius <= 0 )
; 542  : 			DiffRadius = 1;
; 543  : 
; 544  : 		int MaxRadius = DiffRadius + m_iRADIUS_MIN;
; 545  : 
; 546  : 		if( MaxRadius <= 3 )
; 547  : 			MaxRadius = 3;
; 548  : 
; 549  : 		lpMonsterHerd->SetRadius(rand()%(m_iRADIUS_MAX - m_iRADIUS_MIN) + m_iRADIUS_MIN);

  0006b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0006d	8b 5e 68	 mov	 ebx, DWORD PTR [esi+104]
  00070	83 c0 0c	 add	 eax, 12			; 0000000cH
  00073	89 45 f0	 mov	 DWORD PTR tv280[ebp], eax
  00076	e8 00 00 00 00	 call	 _rand
  0007b	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  0007e	99		 cdq
  0007f	2b fb		 sub	 edi, ebx
  00081	f7 ff		 idiv	 edi
  00083	8b 45 f0	 mov	 eax, DWORD PTR tv280[ebp]
  00086	8b 4d f4	 mov	 ecx, DWORD PTR _lpMonsterHerd$1$[ebp]
  00089	03 d3		 add	 edx, ebx
  0008b	52		 push	 edx
  0008c	ff 10		 call	 DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0008e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 531  : 	for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00091	8b 4d fc	 mov	 ecx, DWORD PTR _n$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00094	2b 46 40	 sub	 eax, DWORD PTR [esi+64]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 531  : 	for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  00097	41		 inc	 ecx
  00098	8b 55 f8	 mov	 edx, DWORD PTR tv276[ebp]
  0009b	83 c2 14	 add	 edx, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0009e	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 531  : 	for(DWORD n = 0; n < m_MonsterHerdData.size(); n++)

  000a1	89 4d fc	 mov	 DWORD PTR _n$1$[ebp], ecx
  000a4	89 55 f8	 mov	 DWORD PTR tv276[ebp], edx
  000a7	3b c8		 cmp	 ecx, eax
  000a9	72 95		 jb	 SHORT $LL4@Move
$LN60@Move:
  000ab	5f		 pop	 edi
  000ac	5b		 pop	 ebx
$LN59@Move:
  000ad	5e		 pop	 esi

; 550  : 	}
; 551  : }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
?Move@CXMasAttackEvent@@QAEXXZ ENDP			; CXMasAttackEvent::Move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SetState_PLAYING@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_PLAYING@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::SetState_PLAYING, COMDAT
; _this$ = ecx

; 518  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 519  : 	m_TimeCounter.SetMiliSeconds(m_iTIME_PLAY);

  00004	8b 77 74	 mov	 esi, DWORD PTR [edi+116]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 96   : 		TICK_COUNT = GetTickCount() + MSec;

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000d	03 c6		 add	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 520  : 	StartEvent();

  0000f	8b cf		 mov	 ecx, edi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 96   : 		TICK_COUNT = GetTickCount() + MSec;

  00011	89 47 4c	 mov	 DWORD PTR [edi+76], eax
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 520  : 	StartEvent();

  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	5f		 pop	 edi
  00017	5e		 pop	 esi
  00018	ff 60 08	 jmp	 DWORD PTR [eax+8]
?SetState_PLAYING@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::SetState_PLAYING
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SetState_CLOSED@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_CLOSED@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::SetState_CLOSED, COMDAT
; _this$ = ecx

; 504  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 505  : 	StopEvent();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 0c	 call	 DWORD PTR [eax+12]

; 506  : 
; 507  : 	if( m_bDoEvent != 0 )

  00008	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0

; 508  : 	{
; 509  : 		CheckSync();

  0000c	8b ce		 mov	 ecx, esi
  0000e	74 06		 je	 SHORT $LN2@SetState_C
  00010	5e		 pop	 esi
  00011	e9 00 00 00 00	 jmp	 ?CheckSync@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::CheckSync
$LN2@SetState_C:

; 510  : 	}
; 511  : 	else
; 512  : 	{
; 513  : 		SetState(ATTACKEVENT_STATE_NONE);

  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState
  0001d	5e		 pop	 esi

; 514  : 	}
; 515  : }

  0001e	c3		 ret	 0
?SetState_CLOSED@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::SetState_CLOSED
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SetState_NONE@CXMasAttackEvent@@QAEXXZ
_TEXT	SEGMENT
?SetState_NONE@CXMasAttackEvent@@QAEXXZ PROC		; CXMasAttackEvent::SetState_NONE, COMDAT
; _this$ = ecx

; 500  : 	StopEvent();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 0c	 jmp	 DWORD PTR [eax+12]
?SetState_NONE@CXMasAttackEvent@@QAEXXZ ENDP		; CXMasAttackEvent::SetState_NONE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SetState@CXMasAttackEvent@@QAEXH@Z
_TEXT	SEGMENT
_nState$ = 8						; size = 4
?SetState@CXMasAttackEvent@@QAEXH@Z PROC		; CXMasAttackEvent::SetState, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	if( nState < ATTACKEVENT_STATE_NONE && nState > ATTACKEVENT_STATE_PLAYING )
; 308  : 	{
; 309  : 		LogAdd("%s	%s	%s	%s	%d",
; 310  : 			"(nSate >= ATTACKEVENT_STATE_NONE) || (nSate <= ATTACKEVENT_STATE_PLAYING)","","NULL",__FILE__,__LINE__);
; 311  : 		return;
; 312  : 	}
; 313  : 
; 314  : 	if( m_nEventState < ATTACKEVENT_STATE_NONE && m_nEventState > ATTACKEVENT_STATE_PLAYING )

  00003	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00006	85 c0		 test	 eax, eax
  00008	79 30		 jns	 SHORT $LN5@SetState
  0000a	83 f8 02	 cmp	 eax, 2
  0000d	7e 2b		 jle	 SHORT $LN5@SetState

; 315  : 	{
; 316  : 		LogAdd("%s	%s	%s	%s	%d",

  0000f	68 3d 01 00 00	 push	 317			; 0000013dH
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PJEFBOCC@XMasAttackEvent?4cpp?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@CCACGPIP@?$CIm_nEventState?5?$DO?$DN?5ATTACKEVENT_ST@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00033	83 c4 18	 add	 esp, 24			; 00000018H

; 333  : 		break;
; 334  : 	}
; 335  : 
; 336  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN5@SetState:

; 317  : 			"(m_nEventState >= ATTACKEVENT_STATE_NONE) || (m_nEventState <= ATTACKEVENT_STATE_PLAYING)","","NULL",__FILE__,__LINE__);
; 318  : 		return;
; 319  : 	}
; 320  : 
; 321  : 	m_nEventState = nState;

  0003a	8b 45 08	 mov	 eax, DWORD PTR _nState$[ebp]
  0003d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 322  : 
; 323  : 	switch( m_nEventState )

  00040	83 e8 00	 sub	 eax, 0
  00043	74 1c		 je	 SHORT $LN6@SetState
  00045	83 e8 01	 sub	 eax, 1
  00048	74 0e		 je	 SHORT $LN7@SetState
  0004a	83 e8 01	 sub	 eax, 1
  0004d	75 17		 jne	 SHORT $LN2@SetState

; 330  : 		break;
; 331  : 	case ATTACKEVENT_STATE_PLAYING:
; 332  : 		SetState_PLAYING();

  0004f	e8 00 00 00 00	 call	 ?SetState_PLAYING@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::SetState_PLAYING

; 333  : 		break;
; 334  : 	}
; 335  : 
; 336  : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN7@SetState:

; 327  : 		break;
; 328  : 	case ATTACKEVENT_STATE_CLOSED:
; 329  : 		SetState_CLOSED();

  00058	e8 00 00 00 00	 call	 ?SetState_CLOSED@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::SetState_CLOSED

; 333  : 		break;
; 334  : 	}
; 335  : 
; 336  : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN6@SetState:

; 324  : 	{
; 325  : 	case ATTACKEVENT_STATE_NONE:
; 326  : 		SetState_NONE();

  00061	e8 00 00 00 00	 call	 ?SetState_NONE@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::SetState_NONE
$LN2@SetState:

; 333  : 		break;
; 334  : 	}
; 335  : 
; 336  : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?SetState@CXMasAttackEvent@@QAEXH@Z ENDP		; CXMasAttackEvent::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?SetManualStart@CXMasAttackEvent@@UAEXH@Z
_TEXT	SEGMENT
_bValue$ = 8						; size = 4
?SetManualStart@CXMasAttackEvent@@UAEXH@Z PROC		; CXMasAttackEvent::SetManualStart, COMDAT
; _this$ = ecx

; 160  : 	virtual void SetManualStart(int bValue) { m_bManualStart = bValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bValue$[ebp]
  00006	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetManualStart@CXMasAttackEvent@@UAEXH@Z ENDP		; CXMasAttackEvent::SetManualStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?SetEnable@CXMasAttackEvent@@UAEXH@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 4
?SetEnable@CXMasAttackEvent@@UAEXH@Z PROC		; CXMasAttackEvent::SetEnable, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 293  : 	this->m_bDoEvent = bEnable;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bEnable$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 294  : 
; 295  : 	if( m_bDoEvent != 0 )

  00009	85 c0		 test	 eax, eax
  0000b	74 0d		 je	 SHORT $LN2@SetEnable

; 296  : 	{
; 297  : 		SetState(ATTACKEVENT_STATE_CLOSED);

  0000d	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _bEnable$[ebp], 1

; 302  : 	}
; 303  : }

  00014	5d		 pop	 ebp

; 296  : 	{
; 297  : 		SetState(ATTACKEVENT_STATE_CLOSED);

  00015	e9 00 00 00 00	 jmp	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState
$LN2@SetEnable:

; 298  : 	}
; 299  : 	else
; 300  : 	{
; 301  : 		SetState(ATTACKEVENT_STATE_PLAYING);

  0001a	c7 45 08 02 00
	00 00		 mov	 DWORD PTR _bEnable$[ebp], 2

; 302  : 	}
; 303  : }

  00021	5d		 pop	 ebp

; 298  : 	}
; 299  : 	else
; 300  : 	{
; 301  : 		SetState(ATTACKEVENT_STATE_PLAYING);

  00022	e9 00 00 00 00	 jmp	 ?SetState@CXMasAttackEvent@@QAEXH@Z ; CXMasAttackEvent::SetState
?SetEnable@CXMasAttackEvent@@UAEXH@Z ENDP		; CXMasAttackEvent::SetEnable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?StopEvent@CXMasAttackEvent@@UAEXXZ
_TEXT	SEGMENT
?StopEvent@CXMasAttackEvent@@UAEXXZ PROC		; CXMasAttackEvent::StopEvent, COMDAT
; _this$ = ecx

; 281  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00004	8b 77 40	 mov	 esi, DWORD PTR [edi+64]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 282  : 	for(std::vector<CXMasMonsterHerd*>::iterator _It = m_MonsterHerdData.begin(); _It != m_MonsterHerdData.end(); _It++)

  0000a	74 13		 je	 SHORT $LN79@StopEvent
  0000c	0f 1f 40 00	 npad	 4
$LL4@StopEvent:

; 283  : 	{
; 284  : 		CXMasMonsterHerd* lpMonsterHerd = *_It;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 285  : 		lpMonsterHerd->Stop();

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 50 18	 call	 DWORD PTR [eax+24]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00017	83 c6 04	 add	 esi, 4

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0001a	3b 77 44	 cmp	 esi, DWORD PTR [edi+68]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 282  : 	for(std::vector<CXMasMonsterHerd*>::iterator _It = m_MonsterHerdData.begin(); _It != m_MonsterHerdData.end(); _It++)

  0001d	75 f1		 jne	 SHORT $LL4@StopEvent
$LN79@StopEvent:

; 286  : 	}
; 287  : 
; 288  : 	m_bMonsterMove = FALSE;

  0001f	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 289  : }

  00028	c3		 ret	 0
?StopEvent@CXMasAttackEvent@@UAEXXZ ENDP		; CXMasAttackEvent::StopEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?StartEvent@CXMasAttackEvent@@UAEXXZ
_TEXT	SEGMENT
_Y$1$ = -36						; size = 4
_tmpMapData$4$ = -32					; size = 4
_tmpMapData$3$ = -28					; size = 4
_tmpMapData$2$ = -24					; size = 4
_tmpMapData$1$ = -20					; size = 4
tv387 = -16						; size = 4
_n$1$ = -12						; size = 4
tv389 = -8						; size = 4
_X$1$ = -4						; size = 4
?StartEvent@CXMasAttackEvent@@UAEXXZ PROC		; CXMasAttackEvent::StartEvent, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 230  : 	if( m_bDoEvent == FALSE )

  00009	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0000d	0f 84 50 01 00
	00		 je	 $LN3@StartEvent

; 231  : 		return;
; 232  : 
; 233  : 	if( m_bDoHasData == FALSE )

  00013	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00017	0f 84 46 01 00
	00		 je	 $LN3@StartEvent
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0001d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00020	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 236  : 	if( m_EventMonster.empty() )

  00023	0f 84 3a 01 00
	00		 je	 $LN3@StartEvent

; 237  : 		return;
; 238  : 
; 239  : 	RemoveMonsterHerd();

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ?RemoveMonsterHerd@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::RemoveMonsterHerd

; 240  : 	CreateMonsterHerd();

  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?CreateMonsterHerd@CXMasAttackEvent@@QAEXXZ ; CXMasAttackEvent::CreateMonsterHerd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00036	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00039	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0003e	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00041	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00043	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00045	89 5d f4	 mov	 DWORD PTR _n$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00048	c1 fa 03	 sar	 edx, 3
  0004b	8b c2		 mov	 eax, edx
  0004d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00050	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00052	0f 84 0a 01 00
	00		 je	 $LN111@StartEvent

; 237  : 		return;
; 238  : 
; 239  : 	RemoveMonsterHerd();

  00058	57		 push	 edi
  00059	33 ff		 xor	 edi, edi
  0005b	89 7d f0	 mov	 DWORD PTR tv387[ebp], edi
  0005e	66 90		 npad	 2
$LL4@StartEvent:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00060	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 244  : 		XMASMONSTER_MAP_DATA tmpMapData = m_EventMapData[n];

  00063	0f 10 0c 38	 movups	 xmm1, XMMWORD PTR [eax+edi]
  00067	8b 4c 38 10	 mov	 ecx, DWORD PTR [eax+edi+16]

; 245  : 		CXMasMonsterHerd* lpMonsterHerd = m_MonsterHerdData[n];
; 246  : 		int loop = 1000;

  0006b	bf e8 03 00 00	 mov	 edi, 1000		; 000003e8H
  00070	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00073	0f 28 c1	 movaps	 xmm0, xmm1
  00076	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  0007b	8b 1c 98	 mov	 ebx, DWORD PTR [eax+ebx*4]
  0007e	66 0f 7e c0	 movd	 eax, xmm0
  00082	0f 28 c1	 movaps	 xmm0, xmm1
  00085	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0008a	66 0f 7e c2	 movd	 edx, xmm0
  0008e	0f 28 c1	 movaps	 xmm0, xmm1
  00091	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00096	2b c2		 sub	 eax, edx
  00098	89 55 e8	 mov	 DWORD PTR _tmpMapData$2$[ebp], edx
  0009b	89 45 ec	 mov	 DWORD PTR _tmpMapData$1$[ebp], eax
  0009e	66 0f 7e c0	 movd	 eax, xmm0
  000a2	2b c8		 sub	 ecx, eax
  000a4	89 45 e0	 mov	 DWORD PTR _tmpMapData$4$[ebp], eax
  000a7	66 0f 7e c8	 movd	 eax, xmm1
  000ab	89 4d e4	 mov	 DWORD PTR _tmpMapData$3$[ebp], ecx
  000ae	0f b6 c0	 movzx	 eax, al
  000b1	89 45 f8	 mov	 DWORD PTR tv389[ebp], eax
$LL5@StartEvent:

; 247  : 		int X = 0;
; 248  : 		int Y = 0;
; 249  : 
; 250  : 		while( loop-- != 0 )

  000b4	4f		 dec	 edi

; 251  : 		{
; 252  : 			X = rand()%(tmpMapData.X2-tmpMapData.X1)+tmpMapData.X1;

  000b5	e8 00 00 00 00	 call	 _rand
  000ba	99		 cdq
  000bb	f7 7d ec	 idiv	 DWORD PTR _tmpMapData$1$[ebp]
  000be	03 55 e8	 add	 edx, DWORD PTR _tmpMapData$2$[ebp]
  000c1	89 55 fc	 mov	 DWORD PTR _X$1$[ebp], edx

; 253  : 			Y = rand()%(tmpMapData.Y2-tmpMapData.Y1)+tmpMapData.Y1;

  000c4	e8 00 00 00 00	 call	 _rand
  000c9	99		 cdq
  000ca	f7 7d e4	 idiv	 DWORD PTR _tmpMapData$3$[ebp]

; 254  : 
; 255  : 			if( lpMonsterHerd->SetTotalInfo(tmpMapData.MapNumber,3,X,Y) == TRUE )

  000cd	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cf	8b ca		 mov	 ecx, edx
  000d1	03 4d e0	 add	 ecx, DWORD PTR _tmpMapData$4$[ebp]
  000d4	51		 push	 ecx
  000d5	ff 75 fc	 push	 DWORD PTR _X$1$[ebp]
  000d8	89 4d dc	 mov	 DWORD PTR _Y$1$[ebp], ecx
  000db	8b cb		 mov	 ecx, ebx
  000dd	6a 03		 push	 3
  000df	ff 75 f8	 push	 DWORD PTR tv389[ebp]
  000e2	ff 50 04	 call	 DWORD PTR [eax+4]
  000e5	83 f8 01	 cmp	 eax, 1
  000e8	74 06		 je	 SHORT $LN6@StartEvent

; 247  : 		int X = 0;
; 248  : 		int Y = 0;
; 249  : 
; 250  : 		while( loop-- != 0 )

  000ea	85 ff		 test	 edi, edi
  000ec	75 c6		 jne	 SHORT $LL5@StartEvent

; 254  : 
; 255  : 			if( lpMonsterHerd->SetTotalInfo(tmpMapData.MapNumber,3,X,Y) == TRUE )

  000ee	eb 04		 jmp	 SHORT $LN110@StartEvent
$LN6@StartEvent:

; 256  : 				break;
; 257  : 		}
; 258  : 
; 259  : 		if( loop == 0 )

  000f0	85 ff		 test	 edi, edi
  000f2	74 2f		 je	 SHORT $LN14@StartEvent
$LN110@StartEvent:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  000f4	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000f7	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 263  : 		else if( m_EventMonster.empty() )

  000fa	75 10		 jne	 SHORT $LN13@StartEvent

; 264  : 		{
; 265  : 			LogAdd("[XMasAttackEvent] - Error : No Monster Data Exist");

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KONBBJGO@?$FLXMasAttackEvent?$FN?5?9?5Error?5?3?5No?5M@
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00107	83 c4 04	 add	 esp, 4

; 266  : 			continue;

  0010a	eb 26		 jmp	 SHORT $LN2@StartEvent
$LN13@StartEvent:

; 267  : 		}
; 268  : 		else
; 269  : 		{
; 270  : 			LogAdd("[XMasAttackEvent] - Monster Start Position MapNumber:%d, X:%d, Y:%d",

  0010c	ff 75 dc	 push	 DWORD PTR _Y$1$[ebp]
  0010f	ff 75 fc	 push	 DWORD PTR _X$1$[ebp]
  00112	ff 75 f8	 push	 DWORD PTR tv389[ebp]
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@INOOIIFJ@?$FLXMasAttackEvent?$FN?5?9?5Monster?5Star@
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00120	83 c4 10	 add	 esp, 16			; 00000010H
$LN14@StartEvent:

; 271  : 				tmpMapData.MapNumber,X,Y);
; 272  : 		}
; 273  : 
; 274  : 		AddMonsters(lpMonsterHerd);

  00123	53		 push	 ebx
  00124	8b ce		 mov	 ecx, esi
  00126	e8 00 00 00 00	 call	 ?AddMonsters@CXMasAttackEvent@@QAEXPAVCXMasMonsterHerd@@@Z ; CXMasAttackEvent::AddMonsters

; 275  : 		lpMonsterHerd->Start();

  0012b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0012d	8b cb		 mov	 ecx, ebx
  0012f	ff 50 14	 call	 DWORD PTR [eax+20]
$LN2@StartEvent:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00132	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00135	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0013a	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  0013d	8b 5d f4	 mov	 ebx, DWORD PTR _n$1$[ebp]
  00140	8b 7d f0	 mov	 edi, DWORD PTR tv387[ebp]
  00143	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00144	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00146	83 c7 14	 add	 edi, 20			; 00000014H
  00149	89 5d f4	 mov	 DWORD PTR _n$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0014c	c1 fa 03	 sar	 edx, 3
  0014f	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00151	89 7d f0	 mov	 DWORD PTR tv387[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00154	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00157	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 242  : 	for(DWORD n = 0; n < m_EventMapData.size(); n++)

  00159	3b d8		 cmp	 ebx, eax
  0015b	0f 82 ff fe ff
	ff		 jb	 $LL4@StartEvent
  00161	5f		 pop	 edi
$LN111@StartEvent:
  00162	5b		 pop	 ebx
$LN3@StartEvent:
  00163	5e		 pop	 esi

; 276  : 	}
; 277  : 
; 278  : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c3		 ret	 0
?StartEvent@CXMasAttackEvent@@UAEXXZ ENDP		; CXMasAttackEvent::StartEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?Load@CXMasAttackEvent@@UAEHPAD@Z
_TEXT	SEGMENT
_lpszFileName$GSCopy$1$ = -56				; size = 4
_tmp$1 = -52						; size = 8
_this$GSCopy$1$ = -44					; size = 4
_Index$1$ = -40						; size = 4
_tmp$2 = -36						; size = 20
_tmp$3 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpszFileName$ = 8					; size = 4
?Load@CXMasAttackEvent@@UAEHPAD@Z PROC			; CXMasAttackEvent::Load, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 106  : 
; 107  : 	SMDFile = fopen(lpszFileName,"r");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001c	56		 push	 esi
  0001d	89 5d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00020	89 75 c8	 mov	 DWORD PTR _lpszFileName$GSCopy$1$[ebp], esi
  00023	e8 00 00 00 00	 call	 _fopen
  00028	83 c4 08	 add	 esp, 8
  0002b	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 108  : 
; 109  : 	if(SMDFile == NULL )

  00030	85 c0		 test	 eax, eax
  00032	75 22		 jne	 SHORT $LN6@Load

; 110  : 	{
; 111  : 		MsgBox("[XMasAttackEvent] Info file Load Fail [%s]",lpszFileName);

  00034	56		 push	 esi
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@CKPDAKHI@?$FLXMasAttackEvent?$FN?5Info?5file?5Load@
  0003a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003f	83 c4 08	 add	 esp, 8

; 112  : 		return false;

  00042	33 c0		 xor	 eax, eax
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 224  : 	this->m_bDoHasData = TRUE;
; 225  : 	return true;
; 226  : }

  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN6@Load:

; 113  : 	}
; 114  : 
; 115  : 	Clear();

  00056	8b cb		 mov	 ecx, ebx
  00058	e8 00 00 00 00	 call	 ?Clear@MonsterAttackEvent@@QAEXXZ ; MonsterAttackEvent::Clear

; 116  : 
; 117  : 	int Token,Index = -1;
; 118  : 
; 119  : 	while( TRUE )
; 120  : 	{
; 121  : 		Token = GetToken();

  0005d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 
; 123  : 		if( Token == END )

  00062	83 f8 02	 cmp	 eax, 2
  00065	0f 84 3f 03 00
	00		 je	 $LN252@Load
  0006b	57		 push	 edi
  0006c	0f 1f 40 00	 npad	 4
$LL2@Load:

; 124  : 			break;
; 125  : 
; 126  : 		Index = (int)TokenNumber;

  00070	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00078	89 45 d8	 mov	 DWORD PTR _Index$1$[ebp], eax
  0007b	0f 1f 44 00 00	 npad	 5
$LL4@Load:

; 127  : 
; 128  : 		while( TRUE )
; 129  : 		{
; 130  : 			if( Index == 0 )

  00080	85 c0		 test	 eax, eax
  00082	0f 85 81 00 00
	00		 jne	 $LN8@Load

; 131  : 			{
; 132  : 				Token = GetToken();

  00088	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 133  : 				if( strcmp("end",TokenString) == NULL )

  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00092	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL258@Load:
  00097	8a 10		 mov	 dl, BYTE PTR [eax]
  00099	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0009b	75 1a		 jne	 SHORT $LN259@Load
  0009d	84 d2		 test	 dl, dl
  0009f	74 12		 je	 SHORT $LN260@Load
  000a1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a7	75 0e		 jne	 SHORT $LN259@Load
  000a9	83 c0 02	 add	 eax, 2
  000ac	83 c1 02	 add	 ecx, 2
  000af	84 d2		 test	 dl, dl
  000b1	75 e4		 jne	 SHORT $LL258@Load
$LN260@Load:
  000b3	33 c0		 xor	 eax, eax
  000b5	eb 05		 jmp	 SHORT $LN261@Load
$LN259@Load:
  000b7	1b c0		 sbb	 eax, eax
  000b9	83 c8 01	 or	 eax, 1
$LN261@Load:
  000bc	85 c0		 test	 eax, eax
  000be	0f 84 d4 02 00
	00		 je	 $LN247@Load

; 134  : 					break;
; 135  : 
; 136  : 				m_iTIME_OPEN = (int)TokenNumber*60000;

  000c4	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000cc	69 c0 60 ea 00
	00		 imul	 eax, eax, 60000
  000d2	89 43 70	 mov	 DWORD PTR [ebx+112], eax

; 137  : 
; 138  : 				Token = GetToken();

  000d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 139  : 				m_iTIME_PLAY = (int)TokenNumber*60000;

  000da	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000e2	69 c0 60 ea 00
	00		 imul	 eax, eax, 60000
  000e8	89 43 74	 mov	 DWORD PTR [ebx+116], eax

; 140  : 
; 141  : 				Token = GetToken();

  000eb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 142  : 				m_iTIME_CLOSE = (int)TokenNumber*60000;

  000f0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000f8	69 c0 60 ea 00
	00		 imul	 eax, eax, 60000
  000fe	89 43 78	 mov	 DWORD PTR [ebx+120], eax
  00101	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  00104	e9 77 ff ff ff	 jmp	 $LL4@Load
$LN8@Load:

; 143  : 			}
; 144  : 			else if( Index == 1 )

  00109	83 f8 01	 cmp	 eax, 1
  0010c	75 72		 jne	 SHORT $LN11@Load

; 145  : 			{
; 146  : 				Token = GetToken();

  0010e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 147  : 				if( strcmp("end",TokenString) == NULL )

  00113	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00118	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0011d	0f 1f 00	 npad	 3
$LL262@Load:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN263@Load
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN264@Load
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN263@Load
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL262@Load
$LN264@Load:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN265@Load
$LN263@Load:
  00140	1b c0		 sbb	 eax, eax
  00142	83 c8 01	 or	 eax, 1
$LN265@Load:
  00145	85 c0		 test	 eax, eax
  00147	0f 84 4b 02 00
	00		 je	 $LN247@Load

; 148  : 					break;
; 149  : 
; 150  : 				this->m_iMOVE_RAND_SIZE = (int)TokenNumber;

  0014d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00155	89 43 64	 mov	 DWORD PTR [ebx+100], eax

; 151  : 
; 152  : 				Token = GetToken();

  00158	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 153  : 				this->m_iRADIUS_MIN = (int)TokenNumber;

  0015d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00165	89 43 68	 mov	 DWORD PTR [ebx+104], eax

; 154  : 
; 155  : 				Token = GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 156  : 				this->m_iRADIUS_MAX = (int)TokenNumber;

  0016d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00175	89 43 6c	 mov	 DWORD PTR [ebx+108], eax
  00178	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  0017b	e9 00 ff ff ff	 jmp	 $LL4@Load
$LN11@Load:

; 157  : 			}
; 158  : 			else if( Index == 2 )

  00180	83 f8 02	 cmp	 eax, 2
  00183	0f 85 8c 00 00
	00		 jne	 $LN14@Load

; 159  : 			{
; 160  : 				Token = GetToken();

  00189	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 				if( strcmp("end",TokenString) == NULL )

  0018e	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00193	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL266@Load:
  00198	8a 10		 mov	 dl, BYTE PTR [eax]
  0019a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0019c	75 1a		 jne	 SHORT $LN267@Load
  0019e	84 d2		 test	 dl, dl
  001a0	74 12		 je	 SHORT $LN268@Load
  001a2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001a5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001a8	75 0e		 jne	 SHORT $LN267@Load
  001aa	83 c0 02	 add	 eax, 2
  001ad	83 c1 02	 add	 ecx, 2
  001b0	84 d2		 test	 dl, dl
  001b2	75 e4		 jne	 SHORT $LL266@Load
$LN268@Load:
  001b4	33 c0		 xor	 eax, eax
  001b6	eb 05		 jmp	 SHORT $LN269@Load
$LN267@Load:
  001b8	1b c0		 sbb	 eax, eax
  001ba	83 c8 01	 or	 eax, 1
$LN269@Load:
  001bd	85 c0		 test	 eax, eax
  001bf	0f 84 d3 01 00
	00		 je	 $LN247@Load

; 162  : 					break;
; 163  : 
; 164  : 				MONSTER_EVENT_DATA tmp;
; 165  : 
; 166  : 				tmp.m_iType = (int)TokenNumber;

  001c5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001cd	89 45 f0	 mov	 DWORD PTR _tmp$3[ebp], eax

; 167  : 
; 168  : 				Token = GetToken();

  001d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 169  : 				tmp.m_bDoRegen = (int)TokenNumber;

  001d5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001dd	89 45 f4	 mov	 DWORD PTR _tmp$3[ebp+4], eax

; 170  : 
; 171  : 				Token = GetToken();

  001e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 172  : 				tmp.m_bDoAttackFirst = (int)TokenNumber;

  001e5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 173  : 
; 174  : 				EnterCriticalSection(&m_critsec);

  001ed	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  001f0	56		 push	 esi
  001f1	89 45 f8	 mov	 DWORD PTR _tmp$3[ebp+8], eax
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 175  : 
; 176  : 				m_EventMonster.push_back(tmp);

  001fa	8d 45 f0	 lea	 eax, DWORD PTR _tmp$3[ebp]
  001fd	50		 push	 eax
  001fe	8d 4b 34	 lea	 ecx, DWORD PTR [ebx+52]
  00201	e8 00 00 00 00	 call	 ?push_back@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXABUMONSTER_EVENT_DATA@@@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::push_back

; 177  : 
; 178  : 				LeaveCriticalSection(&m_critsec);

  00206	56		 push	 esi
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0020d	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  00210	e9 6b fe ff ff	 jmp	 $LL4@Load
$LN14@Load:

; 179  : 			}
; 180  : 			else if( Index == 3 )

  00215	83 f8 03	 cmp	 eax, 3
  00218	0f 85 d4 00 00
	00		 jne	 $LN17@Load

; 181  : 			{
; 182  : 				Token = GetToken();

  0021e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 183  : 				if( strcmp("end",TokenString) == NULL )

  00223	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00228	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0022d	0f 1f 00	 npad	 3
$LL270@Load:
  00230	8a 10		 mov	 dl, BYTE PTR [eax]
  00232	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00234	75 1a		 jne	 SHORT $LN271@Load
  00236	84 d2		 test	 dl, dl
  00238	74 12		 je	 SHORT $LN272@Load
  0023a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0023d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00240	75 0e		 jne	 SHORT $LN271@Load
  00242	83 c0 02	 add	 eax, 2
  00245	83 c1 02	 add	 ecx, 2
  00248	84 d2		 test	 dl, dl
  0024a	75 e4		 jne	 SHORT $LL270@Load
$LN272@Load:
  0024c	33 c0		 xor	 eax, eax
  0024e	eb 05		 jmp	 SHORT $LN273@Load
$LN271@Load:
  00250	1b c0		 sbb	 eax, eax
  00252	83 c8 01	 or	 eax, 1
$LN273@Load:
  00255	85 c0		 test	 eax, eax
  00257	0f 84 3b 01 00
	00		 je	 $LN247@Load

; 184  : 					break;
; 185  : 
; 186  : 				MONSTER_EVENT_TIME tmp;
; 187  : 
; 188  : 				tmp.m_iHour = (int)TokenNumber;

  0025d	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA
  00265	89 7d cc	 mov	 DWORD PTR _tmp$1[ebp], edi

; 189  : 
; 190  : 				Token = GetToken();

  00268	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 191  : 				tmp.m_iMinute = (int)TokenNumber;

  0026d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 192  : 
; 193  : 				m_EventTime.push_back( tmp );

  00275	8b 75 d4	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00278	8d 4d cc	 lea	 ecx, DWORD PTR _tmp$1[ebp]
  0027b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 191  : 				tmp.m_iMinute = (int)TokenNumber;

  0027e	89 5d d0	 mov	 DWORD PTR _tmp$1[ebp+4], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00281	3b c8		 cmp	 ecx, eax
  00283	73 44		 jae	 SHORT $LN24@Load
  00285	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00288	8d 55 cc	 lea	 edx, DWORD PTR _tmp$1[ebp]
  0028b	3b ca		 cmp	 ecx, edx
  0028d	77 3a		 ja	 SHORT $LN24@Load

; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  0028f	8b fa		 mov	 edi, edx
  00291	2b f9		 sub	 edi, ecx
  00293	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00296	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  00299	75 0a		 jne	 SHORT $LN26@Load

; 1279 : 				_Reserve(1);

  0029b	6a 01		 push	 1
  0029d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  002a0	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
$LN26@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  002a5	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  002a8	85 d2		 test	 edx, edx
  002aa	74 0f		 je	 SHORT $LN146@Load
  002ac	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  002af	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  002b2	89 02		 mov	 DWORD PTR [edx], eax
  002b4	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  002b8	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN146@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			++this->_Mylast();

  002bb	83 46 2c 08	 add	 DWORD PTR [esi+44], 8

; 1284 : 			}
; 1285 : 		else

  002bf	8b de		 mov	 ebx, esi
  002c1	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  002c4	e9 b7 fd ff ff	 jmp	 $LL4@Load
$LN24@Load:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  002c9	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  002cc	75 0a		 jne	 SHORT $LN27@Load

; 1288 : 				_Reserve(1);

  002ce	6a 01		 push	 1
  002d0	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  002d3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
$LN27@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  002d8	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  002db	85 c0		 test	 eax, eax
  002dd	74 05		 je	 SHORT $LN227@Load
  002df	89 38		 mov	 DWORD PTR [eax], edi
  002e1	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN227@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  002e4	83 46 2c 08	 add	 DWORD PTR [esi+44], 8

; 1293 : 			}
; 1294 : 		}

  002e8	8b de		 mov	 ebx, esi
  002ea	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  002ed	e9 8e fd ff ff	 jmp	 $LL4@Load
$LN17@Load:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 195  : 			else if( Index == 4 )

  002f2	83 f8 04	 cmp	 eax, 4
  002f5	0f 85 85 fd ff
	ff		 jne	 $LL4@Load

; 196  : 			{
; 197  : 				Token = GetToken();

  002fb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 198  : 				if( strcmp("end",TokenString) == NULL )

  00300	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00305	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0030a	66 0f 1f 44 00
	00		 npad	 6
$LL274@Load:
  00310	8a 10		 mov	 dl, BYTE PTR [eax]
  00312	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00314	75 1a		 jne	 SHORT $LN275@Load
  00316	84 d2		 test	 dl, dl
  00318	74 12		 je	 SHORT $LN276@Load
  0031a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0031d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00320	75 0e		 jne	 SHORT $LN275@Load
  00322	83 c0 02	 add	 eax, 2
  00325	83 c1 02	 add	 ecx, 2
  00328	84 d2		 test	 dl, dl
  0032a	75 e4		 jne	 SHORT $LL274@Load
$LN276@Load:
  0032c	33 c0		 xor	 eax, eax
  0032e	eb 05		 jmp	 SHORT $LN277@Load
$LN275@Load:
  00330	1b c0		 sbb	 eax, eax
  00332	83 c8 01	 or	 eax, 1
$LN277@Load:
  00335	85 c0		 test	 eax, eax
  00337	74 5f		 je	 SHORT $LN247@Load

; 199  : 					break;
; 200  : 
; 201  : 				XMASMONSTER_MAP_DATA tmp;
; 202  : 
; 203  : 				tmp.MapNumber = (int)TokenNumber;

  00339	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00341	88 45 dc	 mov	 BYTE PTR _tmp$2[ebp], al

; 204  : 
; 205  : 				Token = GetToken();

  00344	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 206  : 				tmp.X1 = (int)TokenNumber;

  00349	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00351	89 45 e0	 mov	 DWORD PTR _tmp$2[ebp+4], eax

; 207  : 
; 208  : 				Token = GetToken();

  00354	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 209  : 				tmp.Y1 = (int)TokenNumber;

  00359	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00361	89 45 e4	 mov	 DWORD PTR _tmp$2[ebp+8], eax

; 210  : 
; 211  : 				Token = GetToken();

  00364	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 212  : 				tmp.X2 = (int)TokenNumber;

  00369	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00371	89 45 e8	 mov	 DWORD PTR _tmp$2[ebp+12], eax

; 213  : 
; 214  : 				Token = GetToken();

  00374	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 215  : 				tmp.Y2 = (int)TokenNumber;

  00379	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 216  : 
; 217  : 				m_EventMapData.push_back( tmp );

  00381	8d 4b 50	 lea	 ecx, DWORD PTR [ebx+80]
  00384	89 45 ec	 mov	 DWORD PTR _tmp$2[ebp+16], eax
  00387	8d 45 dc	 lea	 eax, DWORD PTR _tmp$2[ebp]
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 ?push_back@?$vector@UXMASMONSTER_MAP_DATA@@V?$allocator@UXMASMONSTER_MAP_DATA@@@std@@@std@@QAEXABUXMASMONSTER_MAP_DATA@@@Z ; std::vector<XMASMONSTER_MAP_DATA,std::allocator<XMASMONSTER_MAP_DATA> >::push_back

; 218  : 			}
; 219  : 		}

  00390	8b 45 d8	 mov	 eax, DWORD PTR _Index$1$[ebp]
  00393	e9 e8 fc ff ff	 jmp	 $LL4@Load
$LN247@Load:

; 116  : 
; 117  : 	int Token,Index = -1;
; 118  : 
; 119  : 	while( TRUE )
; 120  : 	{
; 121  : 		Token = GetToken();

  00398	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 
; 123  : 		if( Token == END )

  0039d	83 f8 02	 cmp	 eax, 2
  003a0	0f 85 ca fc ff
	ff		 jne	 $LL2@Load
  003a6	8b 75 c8	 mov	 esi, DWORD PTR _lpszFileName$GSCopy$1$[ebp]
  003a9	5f		 pop	 edi
$LN252@Load:

; 220  : 	}
; 221  : 
; 222  : 	fclose(SMDFile);

  003aa	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  003b0	e8 00 00 00 00	 call	 _fclose

; 223  : 	LogAdd("[XMasAttackEvent] - %s file load!",lpszFileName);

  003b5	56		 push	 esi
  003b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PEGBMCF@?$FLXMasAttackEvent?$FN?5?9?5?$CFs?5file?5load@
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 224  : 	this->m_bDoHasData = TRUE;
; 225  : 	return true;
; 226  : }

  003c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c7	c7 43 08 01 00
	00 00		 mov	 DWORD PTR [ebx+8], 1
  003ce	33 cd		 xor	 ecx, ebp
  003d0	b8 01 00 00 00	 mov	 eax, 1
  003d5	5e		 pop	 esi
  003d6	5b		 pop	 ebx
  003d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003dc	8b e5		 mov	 esp, ebp
  003de	5d		 pop	 ebp
  003df	c2 04 00	 ret	 4
?Load@CXMasAttackEvent@@UAEHPAD@Z ENDP			; CXMasAttackEvent::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ??1CXMasAttackEvent@@UAE@XZ
_TEXT	SEGMENT
??1CXMasAttackEvent@@UAE@XZ PROC			; CXMasAttackEvent::~CXMasAttackEvent, COMDAT
; _this$ = ecx

; 100  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi
  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CXMasAttackEvent@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 5e 50	 mov	 ebx, DWORD PTR [esi+80]
  0000e	85 db		 test	 ebx, ebx
  00010	74 35		 je	 SHORT $LN7@CXMasAttac

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00012	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00015	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001a	2b cb		 sub	 ecx, ebx
  0001c	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	8d 4e 50	 lea	 ecx, DWORD PTR [esi+80]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00021	c1 fa 03	 sar	 edx, 3
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0002b	50		 push	 eax
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UXMASMONSTER_MAP_DATA@@@std@@QAEXPAUXMASMONSTER_MAP_DATA@@I@Z ; std::allocator<XMASMONSTER_MAP_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00032	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 1663 : 			this->_Mylast() = pointer();

  00039	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 1664 : 			this->_Myend() = pointer();

  00040	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN7@CXMasAttac:
  00047	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 102  : }

  00048	8b ce		 mov	 ecx, esi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	e9 00 00 00 00	 jmp	 ??1MonsterAttackEvent@@UAE@XZ ; MonsterAttackEvent::~MonsterAttackEvent
??1CXMasAttackEvent@@UAE@XZ ENDP			; CXMasAttackEvent::~CXMasAttackEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ??0CXMasAttackEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CXMasAttackEvent@@QAE@XZ PROC			; CXMasAttackEvent::CXMasAttackEvent, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0MonsterAttackEvent@@QAE@XZ ; MonsterAttackEvent::MonsterAttackEvent
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CXMasAttackEvent@@6B@

; 97   : }

  00015	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00017	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 481  : 		_Mylast = pointer();

  0001e	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 482  : 		_Myend = pointer();

  00025	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0002c	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp

; 97   : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CXMasAttackEvent@@QAE@XZ ENDP			; CXMasAttackEvent::CXMasAttackEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 08	 add	 edx, 8
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 08	 add	 DWORD PTR [ecx], 8

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_TIME@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 0c	 add	 edx, 12			; 0000000cH
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 0c	 add	 DWORD PTR [ecx], 12	; 0000000cH

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEAAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 0c	 add	 DWORD PTR [ecx], 12	; 0000000cH

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@PAUMONSTER_EVENT_DATA@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GMonsterAttackEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMonsterAttackEvent@@UAEPAXI@Z PROC			; MonsterAttackEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1MonsterAttackEvent@@UAE@XZ ; MonsterAttackEvent::~MonsterAttackEvent
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 50		 push	 80			; 00000050H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GMonsterAttackEvent@@UAEPAXI@Z ENDP			; MonsterAttackEvent::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXPAPAVCXMasMonsterHerd@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXPAPAVCXMasMonsterHerd@@0@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXPAPAVCXMasMonsterHerd@@0@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEXXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00006	ff 75 08	 push	 DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		{	// move to array of exactly _Count elements

  00009	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  0000b	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z ; std::allocator<CXMasMonsterHerd *>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00010	8b 37		 mov	 esi, DWORD PTR [edi]
  00012	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 470  : 	size_t _Count = (size_t)(_Last - _First);

  00014	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00017	2b d6		 sub	 edx, esi

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00019	83 e2 fc	 and	 edx, -4			; fffffffcH
  0001c	52		 push	 edx
  0001d	56		 push	 esi
  0001e	53		 push	 ebx
  0001f	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 471  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00029	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0002c	2b f1		 sub	 esi, ecx
  0002e	c1 fe 02	 sar	 esi, 2

; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00031	85 c9		 test	 ecx, ecx
  00033	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00035	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00038	2b c1		 sub	 eax, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	8b cf		 mov	 ecx, edi
  00041	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00046	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00049	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  0004c	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0004f	8d 04 b3	 lea	 eax, DWORD PTR [ebx+esi*4]
  00052	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00055	89 1f		 mov	 DWORD PTR [edi], ebx
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1642 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?_Reallocate@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBE_NPBQAVCXMasMonsterHerd@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBE_NPBQAVCXMasMonsterHerd@@@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBE_NPBQAVCXMasMonsterHerd@@@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEII@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IBEII@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXPAPAVCXMasMonsterHerd@@0@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::erase, COMDAT
; _this$ = ecx

; 1484 : 		{	// erase element at where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2527 : 	ptrdiff_t _Count = _Last - _First;

  0000d	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00010	2b d6		 sub	 edx, esi

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00012	83 e2 fc	 and	 edx, -4			; fffffffcH
  00015	52		 push	 edx
  00016	56		 push	 esi
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0001d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2528 : 	_CSTD memmove(&*_Dest, &*_First,

  00020	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1488 : 		--this->_Mylast();

  00023	83 47 04 fc	 add	 DWORD PTR [edi+4], -4	; fffffffcH

; 46   : 		: _Ptr(_Parg)

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0002a	5f		 pop	 edi
  0002b	89 08		 mov	 DWORD PTR [eax], ecx
  0002d	5e		 pop	 esi

; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?erase@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEAAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEAAPAVCXMasMonsterHerd@@I@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEAAPAVCXMasMonsterHerd@@I@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Make_iter, COMDAT
; _this$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@@2@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIXZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::~vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEX$$QAPAVCXMasMonsterHerd@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEX$$QAPAVCXMasMonsterHerd@@@Z PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::push_back, COMDAT
; _this$ = ecx

; 895  : 		{	// insert by moving into element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 899  : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 900  : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN211@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 913  : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 914  : 			}
; 915  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 909  : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@IAEXI@Z ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN211@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN211@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 913  : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 914  : 			}
; 915  : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEX$$QAPAVCXMasMonsterHerd@@@Z ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >::vector<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >,std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >::_Vector_val<std::_Simple_types<CXMasMonsterHerd *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABQAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAPAPAVCXMasMonsterHerd@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@PAVCXMasMonsterHerd@@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >::_Vector_alloc<std::_Vec_base_types<CXMasMonsterHerd *,std::allocator<CXMasMonsterHerd *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z ; std::allocator<CXMasMonsterHerd *>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAE@ABV?$allocator@PAVCXMasMonsterHerd@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAIABV?$allocator@PAVCXMasMonsterHerd@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAIABV?$allocator@PAVCXMasMonsterHerd@@@2@@Z PROC ; std::allocator_traits<std::allocator<CXMasMonsterHerd *> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@SAIABV?$allocator@PAVCXMasMonsterHerd@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CXMasMonsterHerd *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PAVCXMasMonsterHerd@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCXMasMonsterHerd@@@std@@QBEIXZ PROC ; std::allocator<CXMasMonsterHerd *>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCXMasMonsterHerd@@@std@@QBEIXZ ENDP ; std::allocator<CXMasMonsterHerd *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z PROC ; std::allocator<CXMasMonsterHerd *>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEPAPAVCXMasMonsterHerd@@I@Z ENDP ; std::allocator<CXMasMonsterHerd *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z PROC ; std::allocator<CXMasMonsterHerd *>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@PAVCXMasMonsterHerd@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ENDP ; std::allocator<CXMasMonsterHerd *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ PROC	; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCXMasMonsterHerd@@@std@@QAE@XZ ENDP	; std::allocator<CXMasMonsterHerd *>::allocator<CXMasMonsterHerd *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXPAUMONSTER_EVENT_DATA@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXPAUMONSTER_EVENT_DATA@@0@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXPAUMONSTER_EVENT_DATA@@0@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 32		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	d1 fa		 sar	 edx, 1
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00034	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003b	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003c	c3		 ret	 0
?_Tidy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	d1 fa		 sar	 edx, 1
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00023	3b c7		 cmp	 eax, edi
  00025	73 5f		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00027	8b 03		 mov	 eax, DWORD PTR [ebx]
  00029	2b f0		 sub	 esi, eax
  0002b	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00033	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00035	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003a	d1 fa		 sar	 edx, 1
  0003c	8b ca		 mov	 ecx, edx
  0003e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00041	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00043	2b c1		 sub	 eax, ecx
  00045	3b c7		 cmp	 eax, edi
  00047	72 44		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00049	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00050	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00053	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00056	f7 e9		 imul	 ecx
  00058	d1 fa		 sar	 edx, 1
  0005a	8b f2		 mov	 esi, edx
  0005c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0005f	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00061	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00066	8b c6		 mov	 eax, esi
  00068	d1 e8		 shr	 eax, 1
  0006a	2b d0		 sub	 edx, eax
  0006c	3b d6		 cmp	 edx, esi
  0006e	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00071	b8 00 00 00 00	 mov	 eax, 0
  00076	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00079	3b cf		 cmp	 ecx, edi
  0007b	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0007e	51		 push	 ecx
  0007f	8b cb		 mov	 ecx, ebx
  00081	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reallocate
$LN2@Reserve:
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00092	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00097	cc		 int	 3
?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_DATA@@PAU1@V?$allocator@UMONSTER_EVENT_DATA@@@std@@U1@@std@@YAPAUMONSTER_EVENT_DATA@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_DATA *,MONSTER_EVENT_DATA *,std::allocator<MONSTER_EVENT_DATA>,MONSTER_EVENT_DATA>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	d1 fa		 sar	 edx, 1
  00068	8b da		 mov	 ebx, edx
  0006a	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006d	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  0006f	85 c0		 test	 eax, eax
  00071	74 1f		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00073	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00076	2b c8		 sub	 ecx, eax
  00078	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007d	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0007f	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00081	d1 fa		 sar	 edx, 1
  00083	8b c2		 mov	 eax, edx
  00085	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00088	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008a	50		 push	 eax
  0008b	ff 36		 push	 DWORD PTR [esi]
  0008d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00095	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00098	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  0009b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  0009e	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000a1	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a4	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a7	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bd	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBE_NPBUMONSTER_EVENT_DATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBE_NPBUMONSTER_EVENT_DATA@@@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBE_NPBUMONSTER_EVENT_DATA@@@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEII@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 55 55 55 15	 mov	 ecx, 357913941		; 15555555H

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	d1 fa		 sar	 edx, 1
  00017	8b f2		 mov	 esi, edx
  00019	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001c	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001e	8b c6		 mov	 eax, esi
  00020	d1 e8		 shr	 eax, 1
  00022	57		 push	 edi
  00023	2b c8		 sub	 ecx, eax
  00025	33 ff		 xor	 edi, edi
  00027	3b ce		 cmp	 ecx, esi
  00029	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002c	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0002f	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00032	5f		 pop	 edi
  00033	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00037	8b c2		 mov	 eax, edx
  00039	5e		 pop	 esi

; 1612 : 		}

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IBEII@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXPAUMONSTER_EVENT_DATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXPAUMONSTER_EVENT_DATA@@0@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXPAUMONSTER_EVENT_DATA@@0@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@0@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::erase, COMDAT
; _this$ = ecx

; 1495 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx

; 1495 : 		{	// erase [_First, _Last)

  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last_arg$[ebp]

; 46   : 		: _Ptr(_Parg)

  0000d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0000f	3b d0		 cmp	 edx, eax

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00011	75 13		 jne	 SHORT $LN2@erase

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00013	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00016	75 0e		 jne	 SHORT $LN2@erase

; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00018	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 46   : 		: _Ptr(_Parg)

  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN2@erase:

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00026	3b d6		 cmp	 edx, esi

; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)

  00028	74 29		 je	 SHORT $LN219@erase

; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),

  0002a	57		 push	 edi
  0002b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2538 : 	return (_Move(_First, _Last,

  0002e	8b ca		 mov	 ecx, edx

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00030	3b f7		 cmp	 esi, edi
  00032	74 1b		 je	 SHORT $LN177@erase
$LL178@erase:

; 2518 : 		*_Dest = _STD move(*_First);

  00034	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00038	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0003c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003f	83 c6 0c	 add	 esi, 12			; 0000000cH
  00042	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00045	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00048	3b f7		 cmp	 esi, edi
  0004a	75 e8		 jne	 SHORT $LL178@erase

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0004c	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
$LN177@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1520 : 				this->_Mylast() = _Ptr;

  0004f	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00052	5f		 pop	 edi
$LN219@erase:

; 46   : 		: _Ptr(_Parg)

  00053	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@0@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXABUMONSTER_EVENT_DATA@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXABUMONSTER_EVENT_DATA@@@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4c		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 46		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	d1 fa		 sar	 edx, 1
  00022	8b fa		 mov	 edi, edx
  00024	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00027	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  00029	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002c	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002e	6a 01		 push	 1
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00037	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003a	85 d2		 test	 edx, edx
  0003c	74 42		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
  00040	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00043	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00044	f3 0f 7e 04 88	 movq	 xmm0, QWORD PTR [eax+ecx*4]
  00049	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0004d	8b 44 88 08	 mov	 eax, DWORD PTR [eax+ecx*4+8]
  00051	89 42 08	 mov	 DWORD PTR [edx+8], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00054	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00058	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0005d	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00060	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00062	6a 01		 push	 1
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0e		 je	 SHORT $LN205@push_back
  00072	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00076	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0007a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00080	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?push_back@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXABUMONSTER_EVENT_DATA@@@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE_NXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1180 : 		}

  00015	c3		 ret	 0
?size@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@@Z PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Make_iter, COMDAT
; _this$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@@Z ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@XZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	d1 fa		 sar	 edx, 1
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1048 : 		}

  00016	c3		 ret	 0
?_Unused_capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1043 : 		}

  00015	c3		 ret	 0
?capacity@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::~vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 32		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	d1 fa		 sar	 edx, 1
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001e	50		 push	 eax
  0001f	51		 push	 ecx
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00034	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003b	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003c	c3		 ret	 0
??1?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::~vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ PROC ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >::_Vector_val<std::_Simple_types<MONSTER_EVENT_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_DATA@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_DATA@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >::_Wrap_alloc<std::allocator<MONSTER_EVENT_DATA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_DATA@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_DATA@@@2@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_DATA@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_DATA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UMONSTER_EVENT_DATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMONSTER_EVENT_DATA@@@std@@QBEIXZ PROC ; std::allocator<MONSTER_EVENT_DATA>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMONSTER_EVENT_DATA@@@std@@QBEIXZ ENDP ; std::allocator<MONSTER_EVENT_DATA>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEPAUMONSTER_EVENT_DATA@@I@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MONSTER_EVENT_DATA>::allocator<MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MONSTER_EVENT_DATA>::allocator<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@XZ PROC	; std::allocator<MONSTER_EVENT_DATA>::allocator<MONSTER_EVENT_DATA>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UMONSTER_EVENT_DATA@@@std@@QAE@XZ ENDP	; std::allocator<MONSTER_EVENT_DATA>::allocator<MONSTER_EVENT_DATA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXPAUMONSTER_EVENT_TIME@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXPAUMONSTER_EVENT_TIME@@0@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXPAUMONSTER_EVENT_TIME@@0@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEXXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 03	 sar	 eax, 3

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 03	 sar	 edx, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z ; std::allocator<MONSTER_EVENT_TIME>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMONSTER_EVENT_TIME@@PAU1@V?$allocator@UMONSTER_EVENT_TIME@@@std@@U1@@std@@YAPAUMONSTER_EVENT_TIME@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MONSTER_EVENT_TIME *,MONSTER_EVENT_TIME *,std::allocator<MONSTER_EVENT_TIME>,MONSTER_EVENT_TIME>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 03	 sar	 ebx, 3

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBE_NPBUMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBE_NPBUMONSTER_EVENT_TIME@@@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBE_NPBUMONSTER_EVENT_TIME@@@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEII@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 03	 sar	 esi, 3

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IBEII@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUMONSTER_EVENT_TIME@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUMONSTER_EVENT_TIME@@0@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXPAUMONSTER_EVENT_TIME@@0@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::erase, COMDAT
; _this$ = ecx

; 1495 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
  00006	53		 push	 ebx

; 1495 : 		{	// erase [_First, _Last)

  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Last_arg$[ebp]

; 46   : 		: _Ptr(_Parg)

  0000d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0000f	3b d0		 cmp	 edx, eax

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00011	75 13		 jne	 SHORT $LN2@erase

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00013	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]

; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00016	75 0e		 jne	 SHORT $LN2@erase

; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00018	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 46   : 		: _Ptr(_Parg)

  0001b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	5e		 pop	 esi
  0001f	5b		 pop	 ebx
  00020	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN2@erase:

; 47   : 		{	// construct with pointer _Parg
; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}
; 50   : 
; 51   : 	typedef pointer _Unchecked_type;
; 52   : 
; 53   : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 54   : 		{	// reset from unchecked iterator
; 55   : 		this->_Ptr = (_Tptr)_Right;
; 56   : 		return (*this);
; 57   : 		}
; 58   : 
; 59   : 	_Unchecked_type _Unchecked() const
; 60   : 		{	// make an unchecked iterator
; 61   : 		return (_Unchecked_type(this->_Ptr));
; 62   : 		}
; 63   : 
; 64   : 	reference operator*() const
; 65   : 		{	// return designated object
; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);
; 87   : 		}
; 88   : 
; 89   : 	pointer operator->() const
; 90   : 		{	// return pointer to class object
; 91   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 92   : 		}
; 93   : 
; 94   : 	_Myiter& operator++()
; 95   : 		{	// preincrement
; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;
; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00026	3b d6		 cmp	 edx, esi

; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)

  00028	74 25		 je	 SHORT $LN219@erase

; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),

  0002a	57		 push	 edi
  0002b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2538 : 	return (_Move(_First, _Last,

  0002e	8b ca		 mov	 ecx, edx

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00030	3b f7		 cmp	 esi, edi
  00032	74 17		 je	 SHORT $LN177@erase
$LL178@erase:

; 2518 : 		*_Dest = _STD move(*_First);

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
  00038	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003b	83 c6 08	 add	 esi, 8
  0003e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00041	83 c1 08	 add	 ecx, 8
  00044	3b f7		 cmp	 esi, edi
  00046	75 ec		 jne	 SHORT $LL178@erase

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00048	8b 55 0c	 mov	 edx, DWORD PTR __First_arg$[ebp]
$LN177@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1520 : 				this->_Mylast() = _Ptr;

  0004b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0004e	5f		 pop	 edi
$LN219@erase:

; 46   : 		: _Ptr(_Parg)

  0004f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	89 10		 mov	 DWORD PTR [eax], edx

; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@0@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXABUMONSTER_EVENT_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXABUMONSTER_EVENT_TIME@@@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 38		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 32		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002d	85 d2		 test	 edx, edx
  0002f	74 37		 je	 SHORT $LN205@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  00036	89 02		 mov	 DWORD PTR [edx], eax
  00038	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  0003c	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0003f	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00049	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@IAEXI@Z ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0a		 je	 SHORT $LN205@push_back
  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	89 01		 mov	 DWORD PTR [ecx], eax
  00062	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00068	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?push_back@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXABUMONSTER_EVENT_TIME@@@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE_NXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE_NXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Make_iter, COMDAT
; _this$ = ecx

; 1076 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
?_Make_iter@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@@Z ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@@2@XZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 03	 sar	 eax, 3

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIXZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::~vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::~vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >::vector<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >,std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >::_Vector_val<std::_Simple_types<MONSTER_EVENT_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABQAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAPAUMONSTER_EVENT_TIME@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMONSTER_EVENT_TIME@@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >::_Vector_alloc<std::_Vec_base_types<MONSTER_EVENT_TIME,std::allocator<MONSTER_EVENT_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z ; std::allocator<MONSTER_EVENT_TIME>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAE@ABV?$allocator@UMONSTER_EVENT_TIME@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_TIME@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_TIME@@@2@@Z PROC ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@SAIABV?$allocator@UMONSTER_EVENT_TIME@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MONSTER_EVENT_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UMONSTER_EVENT_TIME@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMONSTER_EVENT_TIME@@@std@@QBEIXZ PROC ; std::allocator<MONSTER_EVENT_TIME>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMONSTER_EVENT_TIME@@@std@@QBEIXZ ENDP ; std::allocator<MONSTER_EVENT_TIME>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEPAUMONSTER_EVENT_TIME@@I@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@UMONSTER_EVENT_TIME@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MONSTER_EVENT_TIME>::allocator<MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MONSTER_EVENT_TIME>::allocator<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@XZ PROC	; std::allocator<MONSTER_EVENT_TIME>::allocator<MONSTER_EVENT_TIME>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UMONSTER_EVENT_TIME@@@std@@QAE@XZ ENDP	; std::allocator<MONSTER_EVENT_TIME>::allocator<MONSTER_EVENT_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?Clear@MonsterAttackEvent@@QAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Clear@MonsterAttackEvent@@QAEXXZ PROC			; MonsterAttackEvent::Clear, COMDAT
; _this$ = ecx

; 125  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 126  : 		EnterCriticalSection(&m_critsec);

  00008	8d 5e 10	 lea	 ebx, DWORD PTR [esi+16]
  0000b	53		 push	 ebx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 127  : 
; 128  : 		m_EventMonster.erase( m_EventMonster.begin(), m_EventMonster.end() );

  00012	ff 76 38	 push	 DWORD PTR [esi+56]
  00015	8d 4e 34	 lea	 ecx, DWORD PTR [esi+52]
  00018	ff 31		 push	 DWORD PTR [ecx]
  0001a	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?erase@?$vector@UMONSTER_EVENT_DATA@@V?$allocator@UMONSTER_EVENT_DATA@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UMONSTER_EVENT_DATA@@@std@@@std@@@2@0@Z ; std::vector<MONSTER_EVENT_DATA,std::allocator<MONSTER_EVENT_DATA> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00023	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  00026	8b c2		 mov	 eax, edx
  00028	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0002b	3b d0		 cmp	 edx, eax

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  0002d	75 1b		 jne	 SHORT $LN100@Clear

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0002f	3b c9		 cmp	 ecx, ecx

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())

  00031	75 17		 jne	 SHORT $LN100@Clear
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 131  : 		LeaveCriticalSection(&m_critsec);

  00033	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00034	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 131  : 		LeaveCriticalSection(&m_critsec);

  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 132  : 
; 133  : 		m_bDoHasData = FALSE;

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 134  : 	};

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN100@Clear:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004a	3b d1		 cmp	 edx, ecx

; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)

  0004c	74 1f		 je	 SHORT $LN103@Clear
  0004e	57		 push	 edi

; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),

  0004f	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2517 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00051	3b cf		 cmp	 ecx, edi
  00053	74 14		 je	 SHORT $LN275@Clear
$LL276@Clear:

; 2518 : 		*_Dest = _STD move(*_First);

  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	89 02		 mov	 DWORD PTR [edx], eax
  00059	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0005c	83 c1 08	 add	 ecx, 8
  0005f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00062	83 c2 08	 add	 edx, 8
  00065	3b cf		 cmp	 ecx, edi
  00067	75 ec		 jne	 SHORT $LL276@Clear
$LN275@Clear:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1520 : 				this->_Mylast() = _Ptr;

  00069	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  0006c	5f		 pop	 edi
$LN103@Clear:
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 131  : 		LeaveCriticalSection(&m_critsec);

  0006d	53		 push	 ebx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 132  : 
; 133  : 		m_bDoHasData = FALSE;

  00074	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx

; 134  : 	};

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?Clear@MonsterAttackEvent@@QAEXXZ ENDP			; MonsterAttackEvent::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ??1MonsterAttackEvent@@UAE@XZ
_TEXT	SEGMENT
??1MonsterAttackEvent@@UAE@XZ PROC			; MonsterAttackEvent::~MonsterAttackEvent, COMDAT
; _this$ = ecx

; 122  : 	virtual ~MonsterAttackEvent() { DeleteCriticalSection(&m_critsec);};

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  00007	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7MonsterAttackEvent@@6B@
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00014	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00017	85 c9		 test	 ecx, ecx
  00019	74 27		 je	 SHORT $LN10@MonsterAtt

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0001b	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  0001e	2b c1		 sub	 eax, ecx
  00020	c1 f8 02	 sar	 eax, 2
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00028	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVCXMasMonsterHerd@@@std@@@std@@QAEXPAPAVCXMasMonsterHerd@@I@Z ; std::_Wrap_alloc<std::allocator<CXMasMonsterHerd *> >::deallocate

; 1662 : 			this->_Myfirst() = pointer();

  0002d	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0

; 1663 : 			this->_Mylast() = pointer();

  00034	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0

; 1664 : 			this->_Myend() = pointer();

  0003b	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0
$LN10@MonsterAtt:
  00042	53		 push	 ebx

; 1656 : 		if (this->_Myfirst() != pointer())

  00043	8b 5f 34	 mov	 ebx, DWORD PTR [edi+52]
  00046	85 db		 test	 ebx, ebx
  00048	74 34		 je	 SHORT $LN103@MonsterAtt

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004a	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00052	2b cb		 sub	 ecx, ebx
  00054	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00056	8d 4f 34	 lea	 ecx, DWORD PTR [edi+52]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00059	d1 fa		 sar	 edx, 1
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00062	50		 push	 eax
  00063	53		 push	 ebx
  00064	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMONSTER_EVENT_DATA@@@std@@QAEXPAUMONSTER_EVENT_DATA@@I@Z ; std::allocator<MONSTER_EVENT_DATA>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00069	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 1663 : 			this->_Mylast() = pointer();

  00070	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0

; 1664 : 			this->_Myend() = pointer();

  00077	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
$LN103@MonsterAtt:

; 1656 : 		if (this->_Myfirst() != pointer())

  0007e	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00081	5b		 pop	 ebx
  00082	85 c9		 test	 ecx, ecx
  00084	74 27		 je	 SHORT $LN198@MonsterAtt

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00086	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00089	2b c1		 sub	 eax, ecx
  0008b	c1 f8 03	 sar	 eax, 3
  0008e	50		 push	 eax
  0008f	51		 push	 ecx
  00090	8d 4f 28	 lea	 ecx, DWORD PTR [edi+40]
  00093	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UMONSTER_EVENT_TIME@@@std@@@std@@QAEXPAUMONSTER_EVENT_TIME@@I@Z ; std::_Wrap_alloc<std::allocator<MONSTER_EVENT_TIME> >::deallocate

; 1662 : 			this->_Myfirst() = pointer();

  00098	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 1663 : 			this->_Mylast() = pointer();

  0009f	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 1664 : 			this->_Myend() = pointer();

  000a6	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN198@MonsterAtt:
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 122  : 	virtual ~MonsterAttackEvent() { DeleteCriticalSection(&m_critsec);};

  000af	c3		 ret	 0
??1MonsterAttackEvent@@UAE@XZ ENDP			; MonsterAttackEvent::~MonsterAttackEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ??0MonsterAttackEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MonsterAttackEvent@@QAE@XZ PROC			; MonsterAttackEvent::MonsterAttackEvent, COMDAT
; _this$ = ecx

; 119  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7MonsterAttackEvent@@6B@
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00025	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 481  : 		_Mylast = pointer();

  0002c	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 482  : 		_Myend = pointer();

  00033	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 480  : 		_Myfirst = pointer();

  0003a	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 481  : 		_Mylast = pointer();

  00041	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 482  : 		_Myend = pointer();

  00048	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 480  : 		_Myfirst = pointer();

  0004f	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 481  : 		_Mylast = pointer();

  00056	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 482  : 		_Myend = pointer();

  0005d	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h

; 55   : 	MonsterAttackTime() {TICK_COUNT = GetTickCount();};

  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0006a	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 120  : 		InitializeCriticalSection(&m_critsec);

  0006d	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00070	50		 push	 eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 121  : 	};

  00077	8b c6		 mov	 eax, esi
  00079	5e		 pop	 esi
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??0MonsterAttackEvent@@QAE@XZ ENDP			; MonsterAttackEvent::MonsterAttackEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?GetMiliSeconds@MonsterAttackTime@@QAEHXZ
_TEXT	SEGMENT
?GetMiliSeconds@MonsterAttackTime@@QAEHXZ PROC		; MonsterAttackTime::GetMiliSeconds, COMDAT
; _this$ = ecx

; 100  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 101  : 		int TICK_CURENT = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	8b c8		 mov	 ecx, eax

; 102  : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	2b c1		 sub	 eax, ecx

; 103  : 
; 104  : 		if( TICK_LEFT < 0 )

  0000f	79 04		 jns	 SHORT $LN1@GetMiliSec

; 105  : 		{
; 106  : 			TICK_COUNT = TICK_CURENT;

  00011	89 0e		 mov	 DWORD PTR [esi], ecx

; 107  : 			return false;

  00013	33 c0		 xor	 eax, eax
$LN1@GetMiliSec:
  00015	5e		 pop	 esi

; 108  : 		}
; 109  : 	return TICK_LEFT;
; 110  : 	}

  00016	c3		 ret	 0
?GetMiliSeconds@MonsterAttackTime@@QAEHXZ ENDP		; MonsterAttackTime::GetMiliSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?SetMiliSeconds@MonsterAttackTime@@QAEXH@Z
_TEXT	SEGMENT
_MSec$ = 8						; size = 4
?SetMiliSeconds@MonsterAttackTime@@QAEXH@Z PROC		; MonsterAttackTime::SetMiliSeconds, COMDAT
; _this$ = ecx

; 95   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 96   : 		TICK_COUNT = GetTickCount() + MSec;

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000c	03 45 08	 add	 eax, DWORD PTR _MSec$[ebp]
  0000f	89 06		 mov	 DWORD PTR [esi], eax
  00011	5e		 pop	 esi

; 97   : 	}

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetMiliSeconds@MonsterAttackTime@@QAEXH@Z ENDP		; MonsterAttackTime::SetMiliSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?GetMinutes@MonsterAttackTime@@QAEHXZ
_TEXT	SEGMENT
?GetMinutes@MonsterAttackTime@@QAEHXZ PROC		; MonsterAttackTime::GetMinutes, COMDAT
; _this$ = ecx

; 82   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 83   : 		int TICK_CURENT = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 84   : 		int TICK_LEFT = TICK_COUNT - TICK_CURENT;

  00009	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0000b	2b c8		 sub	 ecx, eax

; 85   : 
; 86   : 		if( TICK_LEFT < 0 )

  0000d	79 06		 jns	 SHORT $LN2@GetMinutes

; 87   : 		{
; 88   : 			TICK_COUNT = TICK_CURENT;

  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 89   : 			return false;

  00011	33 c0		 xor	 eax, eax
  00013	5e		 pop	 esi

; 92   : 	}

  00014	c3		 ret	 0
$LN2@GetMinutes:

; 90   : 		}
; 91   : 	return (TICK_LEFT+59999)/60000;

  00015	81 c1 5f ea 00
	00		 add	 ecx, 59999		; 0000ea5fH
  0001b	b8 73 b2 e7 45	 mov	 eax, 1172812403		; 45e7b273H
  00020	f7 e9		 imul	 ecx
  00022	5e		 pop	 esi
  00023	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00026	8b c2		 mov	 eax, edx
  00028	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002b	03 c2		 add	 eax, edx

; 92   : 	}

  0002d	c3		 ret	 0
?GetMinutes@MonsterAttackTime@@QAEHXZ ENDP		; MonsterAttackTime::GetMinutes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?SetSeconds@MonsterAttackTime@@QAEXH@Z
_TEXT	SEGMENT
_Seconds$ = 8						; size = 4
?SetSeconds@MonsterAttackTime@@QAEXH@Z PROC		; MonsterAttackTime::SetSeconds, COMDAT
; _this$ = ecx

; 59   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 60   : 		TICK_COUNT = GetTickCount() + Seconds*1000;

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0000c	69 55 08 e8 03
	00 00		 imul	 edx, DWORD PTR _Seconds$[ebp], 1000
  00013	03 c2		 add	 eax, edx
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	5e		 pop	 esi

; 61   : 	}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetSeconds@MonsterAttackTime@@QAEXH@Z ENDP		; MonsterAttackTime::SetSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ??1MonsterAttackTime@@QAE@XZ
_TEXT	SEGMENT
??1MonsterAttackTime@@QAE@XZ PROC			; MonsterAttackTime::~MonsterAttackTime, COMDAT
; _this$ = ecx

; 56   : 	~MonsterAttackTime() {};

  00000	c3		 ret	 0
??1MonsterAttackTime@@QAE@XZ ENDP			; MonsterAttackTime::~MonsterAttackTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ??0MonsterAttackTime@@QAE@XZ
_TEXT	SEGMENT
??0MonsterAttackTime@@QAE@XZ PROC			; MonsterAttackTime::MonsterAttackTime, COMDAT
; _this$ = ecx

; 55   : 	MonsterAttackTime() {TICK_COUNT = GetTickCount();};

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 06		 mov	 DWORD PTR [esi], eax
  0000b	8b c6		 mov	 eax, esi
  0000d	5e		 pop	 esi
  0000e	c3		 ret	 0
??0MonsterAttackTime@@QAE@XZ ENDP			; MonsterAttackTime::MonsterAttackTime
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCXMasMonsterHerd@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCXMasMonsterHerd@@UAEPAXI@Z PROC			; CXMasMonsterHerd::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CXMasMonsterHerd@@UAE@XZ ; CXMasMonsterHerd::~CXMasMonsterHerd
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 40		 push	 64			; 00000040H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCXMasMonsterHerd@@UAEPAXI@Z ENDP			; CXMasMonsterHerd::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?MonsterHerdItemDrop@CXMasMonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Count$1 = 8						; size = 4
_lpObj$ = 8						; size = 4
?MonsterHerdItemDrop@CXMasMonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z PROC ; CXMasMonsterHerd::MonsterHerdItemDrop, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 33   : 	if( lpObj->Class != 476 && lpObj->Class != 466 )

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	ba dc 01 00 00	 mov	 edx, 476		; 000001dcH
  0000c	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00013	8d 4a f6	 lea	 ecx, DWORD PTR [edx-10]
  00016	66 3b c2	 cmp	 ax, dx
  00019	74 0c		 je	 SHORT $LN4@MonsterHer
  0001b	66 3b c1	 cmp	 ax, cx
  0001e	74 07		 je	 SHORT $LN4@MonsterHer

; 34   : 	{
; 35   : 		return false;

  00020	33 c0		 xor	 eax, eax
  00022	5f		 pop	 edi

; 92   : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN4@MonsterHer:
  00027	56		 push	 esi

; 36   : 	}
; 37   : 
; 38   : 	if( lpObj->Class == 476 )

  00028	66 3b c2	 cmp	 ax, dx
  0002b	0f 85 ce 00 00
	00		 jne	 $LN5@MonsterHer

; 39   : 	{
; 40   : 		int Count = 0;

  00031	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _Count$1[ebp], 0

; 41   : 		int _Type = rand()%3;

  00038	e8 00 00 00 00	 call	 _rand
  0003d	99		 cdq
  0003e	b9 03 00 00 00	 mov	 ecx, 3
  00043	f7 f9		 idiv	 ecx

; 42   : 
; 43   : 		switch( _Type )

  00045	83 ea 00	 sub	 edx, 0
  00048	74 34		 je	 SHORT $LN7@MonsterHer
  0004a	83 ea 01	 sub	 edx, 1
  0004d	74 1b		 je	 SHORT $LN10@MonsterHer
  0004f	83 ea 01	 sub	 edx, 1
  00052	0f 85 86 00 00
	00		 jne	 $LN2@MonsterHer

; 67   : 		case 2:
; 68   : 			gObjAddBuffEffectWideArea(lpObj,10,Count,0x5D,5,500,0,0,1800);

  00058	68 08 07 00 00	 push	 1800			; 00000708H
  0005d	52		 push	 edx
  0005e	52		 push	 edx
  0005f	68 f4 01 00 00	 push	 500			; 000001f4H
  00064	6a 05		 push	 5
  00066	6a 5d		 push	 93			; 0000005dH
  00068	eb 65		 jmp	 SHORT $LN17@MonsterHer
$LN10@MonsterHer:

; 62   : 			}
; 63   : 			break;
; 64   : 		case 1:
; 65   : 			gObjAddBuffEffectWideArea(lpObj,10,Count,0x5C,4,500,0,0,1800);

  0006a	68 08 07 00 00	 push	 1800			; 00000708H
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	68 f4 01 00 00	 push	 500			; 000001f4H
  00078	6a 04		 push	 4
  0007a	6a 5c		 push	 92			; 0000005cH

; 66   : 			break;

  0007c	eb 51		 jmp	 SHORT $LN17@MonsterHer
$LN7@MonsterHer:

; 44   : 		{
; 45   : 		case 0:
; 46   : 			{
; 47   : 			int AddDmg = 0;
; 48   : 			int AddDef = 0;
; 49   : 
; 50   : 			if( lpObj->Level <= 180 )

  0007e	0f b7 87 96 00
	00 00		 movzx	 eax, WORD PTR [edi+150]
  00085	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  0008a	66 3b c1	 cmp	 ax, cx
  0008d	7f 29		 jg	 SHORT $LN8@MonsterHer

; 51   : 			{
; 52   : 				AddDmg = lpObj->Level / 3 + 45;

  0008f	0f bf c8	 movsx	 ecx, ax
  00092	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00097	f7 e9		 imul	 ecx

; 53   : 				AddDef = lpObj->Level / 5 + 50;

  00099	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0009e	8b f2		 mov	 esi, edx
  000a0	83 c2 2d	 add	 edx, 45			; 0000002dH
  000a3	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000a6	03 f2		 add	 esi, edx
  000a8	f7 e9		 imul	 ecx
  000aa	d1 fa		 sar	 edx, 1
  000ac	8b c2		 mov	 eax, edx
  000ae	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b1	83 c0 32	 add	 eax, 50			; 00000032H
  000b4	03 c2		 add	 eax, edx

; 54   : 			}
; 55   : 			else

  000b6	eb 0a		 jmp	 SHORT $LN9@MonsterHer
$LN8@MonsterHer:

; 56   : 			{
; 57   : 				AddDmg = 105;

  000b8	be 69 00 00 00	 mov	 esi, 105		; 00000069H

; 58   : 				AddDef = 86;

  000bd	b8 56 00 00 00	 mov	 eax, 86			; 00000056H
$LN9@MonsterHer:

; 59   : 			}
; 60   : 
; 61   : 			gObjAddBuffEffectWideArea(lpObj,10,Count,0x5B,2,AddDmg,3,AddDef,1800);

  000c2	68 08 07 00 00	 push	 1800			; 00000708H
  000c7	50		 push	 eax
  000c8	6a 03		 push	 3
  000ca	56		 push	 esi
  000cb	6a 02		 push	 2
  000cd	6a 5b		 push	 91			; 0000005bH
$LN17@MonsterHer:
  000cf	8d 45 08	 lea	 eax, DWORD PTR _Count$1[ebp]
  000d2	50		 push	 eax
  000d3	6a 0a		 push	 10			; 0000000aH
  000d5	57		 push	 edi
  000d6	e8 00 00 00 00	 call	 ?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z ; gObjAddBuffEffectWideArea
  000db	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@MonsterHer:

; 69   : 			break;
; 70   : 		}
; 71   : 
; 72   : 		LogAddTD("[XMasAttackEvent] White Wizard Killed, MapNumber:%d",lpObj->MapNumber);

  000de	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@HBJLJHOD@?$FLXMasAttackEvent?$FN?5White?5Wizard?5K@
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f1	83 c4 08	 add	 esp, 8

; 73   : 		return true;

  000f4	b8 01 00 00 00	 mov	 eax, 1
  000f9	5e		 pop	 esi
  000fa	5f		 pop	 edi

; 92   : }

  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN5@MonsterHer:

; 74   : 	}
; 75   : 	else if(lpObj->Class == 466 )

  000ff	66 3b c1	 cmp	 ax, cx
  00102	0f 85 a0 00 00
	00		 jne	 $LN14@MonsterHer

; 76   : 	{
; 77   : 		if( rand()%100 < g_iXMasItemDropRate )

  00108	e8 00 00 00 00	 call	 _rand
  0010d	99		 cdq
  0010e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00113	f7 f9		 idiv	 ecx
  00115	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?g_iXMasItemDropRate@@3HA ; g_iXMasItemDropRate
  0011b	7d 52		 jge	 SHORT $LN13@MonsterHer

; 78   : 		{
; 79   : 			int iMaxHitUser = gObjMonsterTopHitDamageUser(lpObj);

  0011d	57		 push	 edi
  0011e	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser

; 80   : 			int ItemType = ItemGetNumberMake(13,66);

  00123	6a 42		 push	 66			; 00000042H
  00125	6a 0d		 push	 13			; 0000000dH
  00127	8b f0		 mov	 esi, eax
  00129	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 81   : 
; 82   : 			ItemSerialCreateSend(lpObj->m_Index,lpObj->MapNumber,lpObj->X,lpObj->Y,ItemType,0,10,0,0,0,iMaxHitUser,0,0);

  0012e	6a 00		 push	 0
  00130	6a 00		 push	 0
  00132	6a 00		 push	 0
  00134	6a 00		 push	 0
  00136	56		 push	 esi
  00137	6a 00		 push	 0
  00139	6a 00		 push	 0
  0013b	6a 00		 push	 0
  0013d	6a 0a		 push	 10			; 0000000aH
  0013f	6a 00		 push	 0
  00141	50		 push	 eax
  00142	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00149	50		 push	 eax
  0014a	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  00151	50		 push	 eax
  00152	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  00159	50		 push	 eax
  0015a	ff 37		 push	 DWORD PTR [edi]
  0015c	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend
  00161	83 c4 48	 add	 esp, 72			; 00000048H

; 83   : 			return true;

  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	5e		 pop	 esi
  0016a	5f		 pop	 edi

; 92   : }

  0016b	5d		 pop	 ebp
  0016c	c2 04 00	 ret	 4
$LN13@MonsterHer:

; 84   : 		}
; 85   : 		else
; 86   : 		{
; 87   : 			MapC[lpObj->MapNumber].MoneyItemDrop(g_iXMasZenDrop,(BYTE)lpObj->X,(BYTE)lpObj->Y);

  0016f	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00176	50		 push	 eax
  00177	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  0017e	50		 push	 eax
  0017f	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  00186	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_iXMasZenDrop@@3HA ; g_iXMasZenDrop
  0018c	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00192	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00198	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop
  0019d	5e		 pop	 esi

; 88   : 			return true;

  0019e	b8 01 00 00 00	 mov	 eax, 1
  001a3	5f		 pop	 edi

; 92   : }

  001a4	5d		 pop	 ebp
  001a5	c2 04 00	 ret	 4
$LN14@MonsterHer:
  001a8	5e		 pop	 esi

; 89   : 		}
; 90   : 	}
; 91   : return false;

  001a9	33 c0		 xor	 eax, eax
  001ab	5f		 pop	 edi

; 92   : }

  001ac	5d		 pop	 ebp
  001ad	c2 04 00	 ret	 4
?MonsterHerdItemDrop@CXMasMonsterHerd@@UAEHPAUOBJECTSTRUCT@@@Z ENDP ; CXMasMonsterHerd::MonsterHerdItemDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?Start@CXMasMonsterHerd@@UAEHXZ
_TEXT	SEGMENT
?Start@CXMasMonsterHerd@@UAEHXZ PROC			; CXMasMonsterHerd::Start, COMDAT
; _this$ = ecx

; 27   : 	return this->MonsterHerd::Start();

  00000	e9 00 00 00 00	 jmp	 ?Start@MonsterHerd@@UAEHXZ ; MonsterHerd::Start
?Start@CXMasMonsterHerd@@UAEHXZ ENDP			; CXMasMonsterHerd::Start
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?GetMap@CXMasMonsterHerd@@QAEHXZ
_TEXT	SEGMENT
?GetMap@CXMasMonsterHerd@@QAEHXZ PROC			; CXMasMonsterHerd::GetMap, COMDAT
; _this$ = ecx

; 20   : 	int GetMap(){return this->m_iMapNumber;}

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetMap@CXMasMonsterHerd@@QAEHXZ ENDP			; CXMasMonsterHerd::GetMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?GetY@CXMasMonsterHerd@@QAEEXZ
_TEXT	SEGMENT
?GetY@CXMasMonsterHerd@@QAEEXZ PROC			; CXMasMonsterHerd::GetY, COMDAT
; _this$ = ecx

; 19   : 	BYTE GetY(){return this->m_iCUR_Y;}

  00000	8a 41 10	 mov	 al, BYTE PTR [ecx+16]
  00003	c3		 ret	 0
?GetY@CXMasMonsterHerd@@QAEEXZ ENDP			; CXMasMonsterHerd::GetY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.h
;	COMDAT ?GetX@CXMasMonsterHerd@@QAEEXZ
_TEXT	SEGMENT
?GetX@CXMasMonsterHerd@@QAEEXZ PROC			; CXMasMonsterHerd::GetX, COMDAT
; _this$ = ecx

; 18   : 	BYTE GetX(){return this->m_iCUR_X;}

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00003	c3		 ret	 0
?GetX@CXMasMonsterHerd@@QAEEXZ ENDP			; CXMasMonsterHerd::GetX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ??1CXMasMonsterHerd@@UAE@XZ
_TEXT	SEGMENT
??1CXMasMonsterHerd@@UAE@XZ PROC			; CXMasMonsterHerd::~CXMasMonsterHerd, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CXMasMonsterHerd@@6B@

; 22   : 	return;
; 23   : }

  00006	e9 00 00 00 00	 jmp	 ??1MonsterHerd@@UAE@XZ	; MonsterHerd::~MonsterHerd
??1CXMasMonsterHerd@@UAE@XZ ENDP			; CXMasMonsterHerd::~CXMasMonsterHerd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ??0CXMasMonsterHerd@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CXMasMonsterHerd@@QAE@XZ PROC			; CXMasMonsterHerd::CXMasMonsterHerd, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0MonsterHerd@@QAE@XZ	; MonsterHerd::MonsterHerd
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CXMasMonsterHerd@@6B@

; 15   : 	return;
; 16   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??0CXMasMonsterHerd@@QAE@XZ ENDP			; CXMasMonsterHerd::CXMasMonsterHerd
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\xmasattackevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
