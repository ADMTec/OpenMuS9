; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MagicInf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CMagicInf@@QAE@XZ				; CMagicInf::CMagicInf
PUBLIC	??1CMagicInf@@UAE@XZ				; CMagicInf::~CMagicInf
PUBLIC	?IsMagic@CMagicInf@@QAEHXZ			; CMagicInf::IsMagic
PUBLIC	?Clear@CMagicInf@@QAEXXZ			; CMagicInf::Clear
PUBLIC	?Set@CMagicInf@@QAEHHE@Z			; CMagicInf::Set
PUBLIC	?Set@CMagicInf@@QAEHEEE@Z			; CMagicInf::Set
PUBLIC	?GetDamage@CMagicInf@@QAEHXZ			; CMagicInf::GetDamage
PUBLIC	?SetMasterSkill@CMagicInf@@QAEHHE@Z		; CMagicInf::SetMasterSkill
PUBLIC	?UpdateMasterSkill@CMagicInf@@QAEHHE@Z		; CMagicInf::UpdateMasterSkill
PUBLIC	??_GCMagicInf@@UAEPAXI@Z			; CMagicInf::`scalar deleting destructor'
PUBLIC	?GetSkillNumberInex@@YAHHHH@Z			; GetSkillNumberInex
PUBLIC	?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z	; MagicByteConvert
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CMagicInf@@6B@				; CMagicInf::`vftable'
PUBLIC	?DefMagicInf@@3PAVCMagicInf@@A			; DefMagicInf
PUBLIC	??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@		; `string'
PUBLIC	??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ ; `string'
PUBLIC	??_R4CMagicInf@@6B@				; CMagicInf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicInf@@@8				; CMagicInf `RTTI Type Descriptor'
PUBLIC	??_R3CMagicInf@@8				; CMagicInf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicInf@@8				; CMagicInf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicInf@@8			; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z:PROC ; CMagicDamage::GetNormalBrandOfSkill
EXTRN	?GetSkillUseType@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillUseType
EXTRN	??_ECMagicInf@@UAEPAXI@Z:PROC			; CMagicInf::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?DefMagicInf@@3PAVCMagicInf@@A DB 03cd8H DUP (?)	; DefMagicInf
_BSS	ENDS
CRT$XCU	SEGMENT
?DefMagicInf$initializer$@@3P6AXXZA DD FLAT:??__EDefMagicInf@@YAXXZ ; DefMagicInf$initializer$
CRT$XCU	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CMagicInf@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicInf@@8 DD FLAT:??_R0?AVCMagicInf@@@8 ; CMagicInf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicInf@@8
rdata$r	SEGMENT
??_R2CMagicInf@@8 DD FLAT:??_R1A@?0A@EA@CMagicInf@@8	; CMagicInf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicInf@@8
rdata$r	SEGMENT
??_R3CMagicInf@@8 DD 00H				; CMagicInf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicInf@@@8
data$r	SEGMENT
??_R0?AVCMagicInf@@@8 DD FLAT:??_7type_info@@6B@	; CMagicInf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicInf@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMagicInf@@6B@
rdata$r	SEGMENT
??_R4CMagicInf@@6B@ DD 00H				; CMagicInf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicInf@@@8
	DD	FLAT:??_R3CMagicInf@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
CONST	SEGMENT
??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@ DB '['
	DB	'MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
CONST	SEGMENT
??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@ DB 'MagicInf.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CMagicInf@@6B@
CONST	SEGMENT
??_7CMagicInf@@6B@ DD FLAT:??_R4CMagicInf@@6B@		; CMagicInf::`vftable'
	DD	FLAT:??_ECMagicInf@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetDamage@CMagicInf@@QAEHXZ DD 0fffffffeH
	DD	00H
	DD	0ffffffd0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN11@GetDamage
	DD	FLAT:$LN7@GetDamage
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FDefMagicInf@@YAXXZ
text$yd	SEGMENT
??__FDefMagicInf@@YAXXZ PROC				; `dynamic atexit destructor for 'DefMagicInf'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  00005	68 89 02 00 00	 push	 649			; 00000289H
  0000a	6a 18		 push	 24			; 00000018H
  0000c	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00016	c3		 ret	 0
??__FDefMagicInf@@YAXXZ ENDP				; `dynamic atexit destructor for 'DefMagicInf''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ??__EDefMagicInf@@YAXXZ
text$di	SEGMENT
??__EDefMagicInf@@YAXXZ PROC				; `dynamic initializer for 'DefMagicInf'', COMDAT

; 9    : CMagicInf DefMagicInf[MAX_SKILL-1];

  00000	68 00 00 00 00	 push	 OFFSET ??1CMagicInf@@UAE@XZ ; CMagicInf::~CMagicInf
  00005	68 00 00 00 00	 push	 OFFSET ??0CMagicInf@@QAE@XZ ; CMagicInf::CMagicInf
  0000a	68 89 02 00 00	 push	 649			; 00000289H
  0000f	6a 18		 push	 24			; 00000018H
  00011	68 00 00 00 00	 push	 OFFSET ?DefMagicInf@@3PAVCMagicInf@@A ; DefMagicInf
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__FDefMagicInf@@YAXXZ ; `dynamic atexit destructor for 'DefMagicInf''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__EDefMagicInf@@YAXXZ ENDP				; `dynamic initializer for 'DefMagicInf''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_Magici$ = 12						; size = 4
_subtype$1$ = 16					; size = 4
_maxmagic$ = 16						; size = 4
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z PROC		; MagicByteConvert, COMDAT

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 378  : 	int level;
; 379  : 	int skill;
; 380  : 	int subtype;
; 381  : 
; 382  : 	for (int index = 0;index < maxmagic;index++)

  00004	8b 7d 10	 mov	 edi, DWORD PTR _maxmagic$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	7e 76		 jle	 SHORT $LN3@MagicByteC

; 377  : 	int n=0;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 0c	 mov	 esi, DWORD PTR _Magici$[ebp]
  00013	83 c6 08	 add	 esi, 8
$LL4@MagicByteC:

; 383  : 	{
; 384  : 		skill = Magici[index].m_Skill;

  00016	8b 06		 mov	 eax, DWORD PTR [esi]

; 385  : 		level = 0;

  00018	33 d2		 xor	 edx, edx

; 386  : 		subtype = 0;

  0001a	89 55 10	 mov	 DWORD PTR _subtype$1$[ebp], edx
  0001d	8b d8		 mov	 ebx, eax

; 387  : 
; 388  : 		if( Magici[index].m_Skill > 765 )

  0001f	3d fd 02 00 00	 cmp	 eax, 765		; 000002fdH
  00024	7e 0c		 jle	 SHORT $LN5@MagicByteC

; 389  : 		{
; 390  : 			skill = 0xFF;
; 391  : 			level = 3;

  00026	ba 03 00 00 00	 mov	 edx, 3

; 392  : 			subtype = Magici[index].m_Skill - skill*3;

  0002b	05 03 fd ff ff	 add	 eax, -765		; fffffd03H
  00030	eb 24		 jmp	 SHORT $LN15@MagicByteC
$LN5@MagicByteC:

; 393  : 		}
; 394  : 		else if( Magici[index].m_Skill > 510 )

  00032	3d fe 01 00 00	 cmp	 eax, 510		; 000001feH
  00037	7e 0c		 jle	 SHORT $LN7@MagicByteC

; 395  : 		{
; 396  : 			skill = 0xFF;
; 397  : 			level = 2;

  00039	ba 02 00 00 00	 mov	 edx, 2

; 398  : 			subtype = Magici[index].m_Skill - skill*2;

  0003e	05 02 fe ff ff	 add	 eax, -510		; fffffe02H
  00043	eb 11		 jmp	 SHORT $LN15@MagicByteC
$LN7@MagicByteC:

; 399  : 		}
; 400  : 		else if( Magici[index].m_Skill > 255 )

  00045	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0004a	7e 12		 jle	 SHORT $LN9@MagicByteC

; 401  : 		{
; 402  : 			skill = 0xFF;
; 403  : 			level = 1;

  0004c	ba 01 00 00 00	 mov	 edx, 1

; 404  : 			subtype = Magici[index].m_Skill - skill;

  00051	05 01 ff ff ff	 add	 eax, -255		; ffffff01H
$LN15@MagicByteC:
  00056	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0005b	89 45 10	 mov	 DWORD PTR _subtype$1$[ebp], eax
$LN9@MagicByteC:

; 405  : 		}
; 406  : 
; 407  : 		buf[n] = skill;

  0005e	88 19		 mov	 BYTE PTR [ecx], bl

; 408  : 		n++;
; 409  : 		buf[n] = Magici[index].m_Level << 3;
; 410  : 		buf[n] |= level & 0x07;

  00060	80 e2 07	 and	 dl, 7
  00063	8a 46 fc	 mov	 al, BYTE PTR [esi-4]
  00066	83 c6 18	 add	 esi, 24			; 00000018H
  00069	c0 e0 03	 shl	 al, 3
  0006c	0a c2		 or	 al, dl
  0006e	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 411  : 		n++;
; 412  : 		buf[n] = subtype;

  00071	8b 45 10	 mov	 eax, DWORD PTR _subtype$1$[ebp]
  00074	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 413  : 		n++;

  00077	83 c1 03	 add	 ecx, 3
  0007a	83 ef 01	 sub	 edi, 1
  0007d	75 97		 jne	 SHORT $LL4@MagicByteC
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN3@MagicByteC:
  00081	5f		 pop	 edi

; 414  : 	}
; 415  : }

  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?MagicByteConvert@@YAXPAEQAVCMagicInf@@H@Z ENDP		; MagicByteConvert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?GetSkillNumberInex@@YAHHHH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_Index$ = 12						; size = 4
_level$ = 16						; size = 4
?GetSkillNumberInex@@YAHHHH@Z PROC			; GetSkillNumberInex, COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	int skillnumber = -1;
; 56   : 
; 57   : 	if ( type == 15 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00006	83 c9 ff	 or	 ecx, -1
  00009	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0000c	0f 85 39 01 00
	00		 jne	 $LN4@GetSkillNu

; 58   : 	{
; 59   : 		if ( Index >= 0 && Index < 16 )

  00012	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  00015	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00018	77 07		 ja	 SHORT $LN6@GetSkillNu

; 60   : 		{
; 61   : 			skillnumber = Index + 1;

  0001a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0001d	8b c1		 mov	 eax, ecx

; 179  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN6@GetSkillNu:

; 62   : 		}
; 63   : 		else if( Index == 16 )

  00021	83 f8 10	 cmp	 eax, 16			; 00000010H
  00024	75 09		 jne	 SHORT $LN8@GetSkillNu

; 64   : 		{
; 65   : 			skillnumber = AT_SKILL_EXPPOISON;

  00026	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0002b	8b c1		 mov	 eax, ecx

; 179  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN8@GetSkillNu:

; 66   : 		}
; 67   : 		else if( Index == 17 )

  0002f	83 f8 11	 cmp	 eax, 17			; 00000011H
  00032	75 09		 jne	 SHORT $LN10@GetSkillNu

; 68   : 		{
; 69   : 			skillnumber = AT_SKILL_EXPICE;

  00034	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00039	8b c1		 mov	 eax, ecx

; 179  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN10@GetSkillNu:

; 70   : 		}
; 71   : 		else if( Index == 18 )

  0003d	83 f8 12	 cmp	 eax, 18			; 00000012H
  00040	75 09		 jne	 SHORT $LN12@GetSkillNu

; 72   : 		{
; 73   : 			skillnumber = AT_SKILL_EXPHELL;

  00042	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00047	8b c1		 mov	 eax, ecx

; 179  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN12@GetSkillNu:

; 74   : 		}
; 75   : 		else if( Index == 19)

  0004b	83 f8 13	 cmp	 eax, 19			; 00000013H
  0004e	75 09		 jne	 SHORT $LN14@GetSkillNu

; 76   : 		{
; 77   : 			skillnumber = AT_SKILL_CHAINLIGHTING;

  00050	b9 d7 00 00 00	 mov	 ecx, 215		; 000000d7H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00055	8b c1		 mov	 eax, ecx

; 179  : }

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN14@GetSkillNu:

; 78   : 		}
; 79   : 		else if( Index == 20)

  00059	83 f8 14	 cmp	 eax, 20			; 00000014H
  0005c	75 09		 jne	 SHORT $LN16@GetSkillNu

; 80   : 		{
; 81   : 			skillnumber = AT_SKILL_DRAINLIFE;

  0005e	b9 d6 00 00 00	 mov	 ecx, 214		; 000000d6H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00063	8b c1		 mov	 eax, ecx

; 179  : }

  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
$LN16@GetSkillNu:

; 82   : 		}
; 83   : 		else if( Index == 21)

  00067	83 f8 15	 cmp	 eax, 21			; 00000015H
  0006a	75 09		 jne	 SHORT $LN18@GetSkillNu

; 84   : 		{
; 85   : 			skillnumber = AT_SKILL_LIGHTSHOCK;

  0006c	b9 e6 00 00 00	 mov	 ecx, 230		; 000000e6H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00071	8b c1		 mov	 eax, ecx

; 179  : }

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN18@GetSkillNu:

; 86   : 		}
; 87   : 		else if( Index == 22)

  00075	83 f8 16	 cmp	 eax, 22			; 00000016H
  00078	75 09		 jne	 SHORT $LN20@GetSkillNu

; 88   : 		{
; 89   : 			skillnumber = AT_SKILL_DAMAGEREFLECT;

  0007a	b9 d9 00 00 00	 mov	 ecx, 217		; 000000d9H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0007f	8b c1		 mov	 eax, ecx

; 179  : }

  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN20@GetSkillNu:

; 90   : 		}
; 91   : 		else if( Index == 23)

  00083	83 f8 17	 cmp	 eax, 23			; 00000017H
  00086	75 09		 jne	 SHORT $LN22@GetSkillNu

; 92   : 		{
; 93   : 			skillnumber = AT_SKILL_BERSERKER;

  00088	b9 da 00 00 00	 mov	 ecx, 218		; 000000daH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0008d	8b c1		 mov	 eax, ecx

; 179  : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN22@GetSkillNu:

; 94   : 		}
; 95   : 		else if( Index == 24)

  00091	83 f8 18	 cmp	 eax, 24			; 00000018H
  00094	75 09		 jne	 SHORT $LN24@GetSkillNu

; 96   : 		{
; 97   : 			skillnumber = AT_SKILL_SLEEP;

  00096	b9 db 00 00 00	 mov	 ecx, 219		; 000000dbH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0009b	8b c1		 mov	 eax, ecx

; 179  : }

  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN24@GetSkillNu:

; 98   : 		}
; 99   : 		else if( Index == 25)

  0009f	83 f8 19	 cmp	 eax, 25			; 00000019H
  000a2	75 09		 jne	 SHORT $LN26@GetSkillNu

; 100  : 		{
; 101  : 			skillnumber = 0xDC;

  000a4	b9 dc 00 00 00	 mov	 ecx, 220		; 000000dcH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000a9	8b c1		 mov	 eax, ecx

; 179  : }

  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN26@GetSkillNu:

; 102  : 		}
; 103  : 		else if( Index == 26)

  000ad	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  000b0	75 09		 jne	 SHORT $LN28@GetSkillNu

; 104  : 		{
; 105  : 			skillnumber = AT_SKILL_WEAKNESS;

  000b2	b9 dd 00 00 00	 mov	 ecx, 221		; 000000ddH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000b7	8b c1		 mov	 eax, ecx

; 179  : }

  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN28@GetSkillNu:

; 106  : 		}
; 107  : 		else if( Index == 27)

  000bb	83 f8 1b	 cmp	 eax, 27			; 0000001bH
  000be	75 09		 jne	 SHORT $LN30@GetSkillNu

; 108  : 		{
; 109  : 			skillnumber = AT_SKILL_INNOVATION;

  000c0	b9 de 00 00 00	 mov	 ecx, 222		; 000000deH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000c5	8b c1		 mov	 eax, ecx

; 179  : }

  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN30@GetSkillNu:

; 110  : 		}
; 111  : 		else if( Index == 28 )

  000c9	83 f8 1c	 cmp	 eax, 28			; 0000001cH
  000cc	75 09		 jne	 SHORT $LN32@GetSkillNu

; 112  : 		{
; 113  : 			skillnumber = AT_SKILL_EXPWIZARDRY;

  000ce	b9 e9 00 00 00	 mov	 ecx, 233		; 000000e9H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000d3	8b c1		 mov	 eax, ecx

; 179  : }

  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN32@GetSkillNu:

; 114  : 		}
; 115  : 		else if( Index == 29 )

  000d7	83 f8 1d	 cmp	 eax, 29			; 0000001dH
  000da	75 09		 jne	 SHORT $LN34@GetSkillNu

; 116  : 		{
; 117  : 			skillnumber = AT_SKILL_GIGANTICSTORM;

  000dc	b9 ed 00 00 00	 mov	 ecx, 237		; 000000edH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000e1	8b c1		 mov	 eax, ecx

; 179  : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN34@GetSkillNu:

; 118  : 		}
; 119  : 		else if( Index == 30 )

  000e5	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000e8	75 09		 jne	 SHORT $LN36@GetSkillNu

; 120  : 		{
; 121  : 			skillnumber = AT_SKILL_RAGEFIGHTER_CHAINDRIVE;

  000ea	b9 06 01 00 00	 mov	 ecx, 262		; 00000106H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000ef	8b c1		 mov	 eax, ecx

; 179  : }

  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
$LN36@GetSkillNu:

; 122  : 		}
; 123  : 		else if( Index == 31 )

  000f3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f6	75 09		 jne	 SHORT $LN38@GetSkillNu

; 124  : 		{
; 125  : 			skillnumber = AT_SKILL_RAGEFIGHTER_DARKSIDE;

  000f8	b9 07 01 00 00	 mov	 ecx, 263		; 00000107H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  000fd	8b c1		 mov	 eax, ecx

; 179  : }

  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
$LN38@GetSkillNu:

; 126  : 		}
; 127  : 		else if( Index == 32 )

  00101	83 f8 20	 cmp	 eax, 32			; 00000020H
  00104	75 09		 jne	 SHORT $LN40@GetSkillNu

; 128  : 		{
; 129  : 			skillnumber = AT_SKILL_RAGEFIGHTER_DRAGONLORE;

  00106	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0010b	8b c1		 mov	 eax, ecx

; 179  : }

  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
$LN40@GetSkillNu:

; 130  : 		}
; 131  : 		else if( Index == 33 )

  0010f	83 f8 21	 cmp	 eax, 33			; 00000021H
  00112	75 09		 jne	 SHORT $LN42@GetSkillNu

; 132  : 		{
; 133  : 			skillnumber = AT_SKILL_RAGEFIGHTER_DRAGONSLAYER;

  00114	b9 09 01 00 00	 mov	 ecx, 265		; 00000109H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00119	8b c1		 mov	 eax, ecx

; 179  : }

  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN42@GetSkillNu:

; 134  : 		}
; 135  : 		else if( Index == 34 )

  0011d	83 f8 22	 cmp	 eax, 34			; 00000022H
  00120	75 09		 jne	 SHORT $LN44@GetSkillNu

; 136  : 		{
; 137  : 			skillnumber = AT_SKILL_RAGEFIGHTER_REDARMOR;

  00122	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00127	8b c1		 mov	 eax, ecx

; 179  : }

  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
$LN44@GetSkillNu:

; 138  : 		}
; 139  : 		else if( Index == 35 )

  0012b	83 f8 23	 cmp	 eax, 35			; 00000023H
  0012e	75 09		 jne	 SHORT $LN46@GetSkillNu

; 140  : 		{
; 141  : 			skillnumber = AT_SKILL_RAGEFIGHTER_FITNESS;

  00130	b9 0b 01 00 00	 mov	 ecx, 267		; 0000010bH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00135	8b c1		 mov	 eax, ecx

; 179  : }

  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
$LN46@GetSkillNu:

; 142  : 		}
; 143  : 		else if( Index == 36 )

  00139	83 f8 24	 cmp	 eax, 36			; 00000024H
  0013c	0f 85 f2 00 00
	00		 jne	 $LN2@GetSkillNu

; 144  : 		{
; 145  : 			skillnumber = AT_SKILL_RAGEFIGHTER_DEFRATE;

  00142	b9 0c 01 00 00	 mov	 ecx, 268		; 0000010cH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00147	8b c1		 mov	 eax, ecx

; 179  : }

  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
$LN4@GetSkillNu:

; 146  : 		}
; 147  : 	}
; 148  : 
; 149  : 	else if ( type == 12 )

  0014b	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  0014e	0f 85 e0 00 00
	00		 jne	 $LN2@GetSkillNu

; 150  : 	{
; 151  : 		switch ( Index )

  00154	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]
  00157	83 c0 f9	 add	 eax, -7			; fffffff9H
  0015a	83 f8 29	 cmp	 eax, 41			; 00000029H
  0015d	0f 87 d1 00 00
	00		 ja	 $LN2@GetSkillNu
  00163	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN73@GetSkillNu[eax]
  0016a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN75@GetSkillNu[eax*4]
$LN50@GetSkillNu:

; 152  : 		{
; 153  : 			case 7:		skillnumber = AT_SKILL_WHEEL;	break;

  00171	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00176	8b c1		 mov	 eax, ecx

; 179  : }

  00178	5d		 pop	 ebp
  00179	c3		 ret	 0
$LN51@GetSkillNu:

; 154  : 			case 8:		skillnumber = AT_SKILL_HEALING;	break;

  0017a	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0017f	8b c1		 mov	 eax, ecx

; 179  : }

  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN52@GetSkillNu:

; 155  : 			case 9:		skillnumber = AT_SKILL_DEFENSE;	break;

  00183	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00188	8b c1		 mov	 eax, ecx

; 179  : }

  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN53@GetSkillNu:

; 156  : 			case 10:	skillnumber = AT_SKILL_ATTACK;	break;

  0018c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00191	8b c1		 mov	 eax, ecx

; 179  : }

  00193	5d		 pop	 ebp
  00194	c3		 ret	 0
$LN54@GetSkillNu:

; 157  : 			case 12:	skillnumber = AT_SKILL_BLOWOFFURY;	break;

  00195	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0019a	8b c1		 mov	 eax, ecx

; 179  : }

  0019c	5d		 pop	 ebp
  0019d	c3		 ret	 0
$LN55@GetSkillNu:

; 158  : 			case 13:	skillnumber = AT_SKILL_KNIGHTSPEAR;	break;

  0019e	b9 2f 00 00 00	 mov	 ecx, 47			; 0000002fH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001a3	8b c1		 mov	 eax, ecx

; 179  : }

  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
$LN56@GetSkillNu:

; 159  : 			case 14:	skillnumber = AT_SKILL_KNIGHTADDLIFE;	break;

  001a7	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001ac	8b c1		 mov	 eax, ecx

; 179  : }

  001ae	5d		 pop	 ebp
  001af	c3		 ret	 0
$LN57@GetSkillNu:

; 160  : 			case 19:	skillnumber = AT_SKILL_STRIKE;	break;

  001b0	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001b5	8b c1		 mov	 eax, ecx

; 179  : }

  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
$LN58@GetSkillNu:

; 161  : 			case 17:	skillnumber = AT_SKILL_PENETRATION;	break;

  001b9	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001be	8b c1		 mov	 eax, ecx

; 179  : }

  001c0	5d		 pop	 ebp
  001c1	c3		 ret	 0
$LN59@GetSkillNu:

; 162  : 			case 18:	skillnumber = AT_SKILL_ELFHARDEN;	break;

  001c2	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001c7	8b c1		 mov	 eax, ecx

; 179  : }

  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
$LN60@GetSkillNu:

; 163  : 			case 16:	skillnumber = AT_SKILL_DEFENSEDOWN;	break;

  001cb	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001d0	8b c1		 mov	 eax, ecx

; 179  : }

  001d2	5d		 pop	 ebp
  001d3	c3		 ret	 0
$LN61@GetSkillNu:

; 164  : 			case 21:	skillnumber = AT_SKILL_FIREBURST;	break;

  001d4	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001d9	8b c1		 mov	 eax, ecx

; 179  : }

  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
$LN62@GetSkillNu:

; 165  : 			case 22:	skillnumber = AT_SKILL_RECALL_PARTY;	break;

  001dd	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001e2	8b c1		 mov	 eax, ecx

; 179  : }

  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
$LN63@GetSkillNu:

; 166  : 			case 23:	skillnumber = AT_SKILL_ADD_CRITICALDAMAGE;	break;

  001e6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001eb	8b c1		 mov	 eax, ecx

; 179  : }

  001ed	5d		 pop	 ebp
  001ee	c3		 ret	 0
$LN64@GetSkillNu:

; 167  : 			case 24:	skillnumber = AT_SKILL_ELECTRICSPARK;	break;

  001ef	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001f4	8b c1		 mov	 eax, ecx

; 179  : }

  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
$LN65@GetSkillNu:

; 168  : 			case 11:	skillnumber = level + AT_SKILL_CALLMON1;	break;

  001f8	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]
  001fb	83 c1 1e	 add	 ecx, 30			; 0000001eH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  001fe	8b c1		 mov	 eax, ecx

; 179  : }

  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
$LN66@GetSkillNu:

; 169  : 			case 35:	skillnumber = AT_SKILL_FIRESCREAM;	break;

  00202	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00207	8b c1		 mov	 eax, ecx

; 179  : }

  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
$LN67@GetSkillNu:

; 170  : 			case 44:	skillnumber = AT_SKILL_DESTRUCT; break;

  0020b	b9 e8 00 00 00	 mov	 ecx, 232		; 000000e8H

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00210	8b c1		 mov	 eax, ecx

; 179  : }

  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN68@GetSkillNu:

; 171  : 			case 45:	skillnumber = AT_SKILL_MULTISHOT;	break;

  00214	b9 eb 00 00 00	 mov	 ecx, 235		; 000000ebH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00219	8b c1		 mov	 eax, ecx

; 179  : }

  0021b	5d		 pop	 ebp
  0021c	c3		 ret	 0
$LN69@GetSkillNu:

; 172  : 			case 46:	skillnumber = AT_SKILL_RECOVERY;	break;

  0021d	b9 ea 00 00 00	 mov	 ecx, 234		; 000000eaH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00222	8b c1		 mov	 eax, ecx

; 179  : }

  00224	5d		 pop	 ebp
  00225	c3		 ret	 0
$LN70@GetSkillNu:

; 173  : 			case 47:	skillnumber = AT_SKILL_FLAMESTRIKE;	break;

  00226	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  0022b	8b c1		 mov	 eax, ecx

; 179  : }

  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
$LN71@GetSkillNu:

; 174  : 			case 48:	skillnumber = AT_SKILL_CHAOTICDISEIER; break;

  0022f	b9 ee 00 00 00	 mov	 ecx, 238		; 000000eeH
$LN2@GetSkillNu:

; 175  : 		}
; 176  : 	}
; 177  : 		
; 178  : 	return skillnumber;

  00234	8b c1		 mov	 eax, ecx

; 179  : }

  00236	5d		 pop	 ebp
  00237	c3		 ret	 0
$LN75@GetSkillNu:
  00238	00 00 00 00	 DD	 $LN50@GetSkillNu
  0023c	00 00 00 00	 DD	 $LN51@GetSkillNu
  00240	00 00 00 00	 DD	 $LN52@GetSkillNu
  00244	00 00 00 00	 DD	 $LN53@GetSkillNu
  00248	00 00 00 00	 DD	 $LN65@GetSkillNu
  0024c	00 00 00 00	 DD	 $LN54@GetSkillNu
  00250	00 00 00 00	 DD	 $LN55@GetSkillNu
  00254	00 00 00 00	 DD	 $LN56@GetSkillNu
  00258	00 00 00 00	 DD	 $LN60@GetSkillNu
  0025c	00 00 00 00	 DD	 $LN58@GetSkillNu
  00260	00 00 00 00	 DD	 $LN59@GetSkillNu
  00264	00 00 00 00	 DD	 $LN57@GetSkillNu
  00268	00 00 00 00	 DD	 $LN61@GetSkillNu
  0026c	00 00 00 00	 DD	 $LN62@GetSkillNu
  00270	00 00 00 00	 DD	 $LN63@GetSkillNu
  00274	00 00 00 00	 DD	 $LN64@GetSkillNu
  00278	00 00 00 00	 DD	 $LN66@GetSkillNu
  0027c	00 00 00 00	 DD	 $LN67@GetSkillNu
  00280	00 00 00 00	 DD	 $LN68@GetSkillNu
  00284	00 00 00 00	 DD	 $LN69@GetSkillNu
  00288	00 00 00 00	 DD	 $LN70@GetSkillNu
  0028c	00 00 00 00	 DD	 $LN71@GetSkillNu
  00290	00 00 00 00	 DD	 $LN2@GetSkillNu
$LN73@GetSkillNu:
  00294	00		 DB	 0
  00295	01		 DB	 1
  00296	02		 DB	 2
  00297	03		 DB	 3
  00298	04		 DB	 4
  00299	05		 DB	 5
  0029a	06		 DB	 6
  0029b	07		 DB	 7
  0029c	16		 DB	 22			; 00000016H
  0029d	08		 DB	 8
  0029e	09		 DB	 9
  0029f	0a		 DB	 10			; 0000000aH
  002a0	0b		 DB	 11			; 0000000bH
  002a1	16		 DB	 22			; 00000016H
  002a2	0c		 DB	 12			; 0000000cH
  002a3	0d		 DB	 13			; 0000000dH
  002a4	0e		 DB	 14			; 0000000eH
  002a5	0f		 DB	 15			; 0000000fH
  002a6	16		 DB	 22			; 00000016H
  002a7	16		 DB	 22			; 00000016H
  002a8	16		 DB	 22			; 00000016H
  002a9	16		 DB	 22			; 00000016H
  002aa	16		 DB	 22			; 00000016H
  002ab	16		 DB	 22			; 00000016H
  002ac	16		 DB	 22			; 00000016H
  002ad	16		 DB	 22			; 00000016H
  002ae	16		 DB	 22			; 00000016H
  002af	16		 DB	 22			; 00000016H
  002b0	10		 DB	 16			; 00000010H
  002b1	16		 DB	 22			; 00000016H
  002b2	16		 DB	 22			; 00000016H
  002b3	16		 DB	 22			; 00000016H
  002b4	16		 DB	 22			; 00000016H
  002b5	16		 DB	 22			; 00000016H
  002b6	16		 DB	 22			; 00000016H
  002b7	16		 DB	 22			; 00000016H
  002b8	16		 DB	 22			; 00000016H
  002b9	11		 DB	 17			; 00000011H
  002ba	12		 DB	 18			; 00000012H
  002bb	13		 DB	 19			; 00000013H
  002bc	14		 DB	 20			; 00000014H
  002bd	15		 DB	 21			; 00000015H
?GetSkillNumberInex@@YAHHHH@Z ENDP			; GetSkillNumberInex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMagicInf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMagicInf@@UAEPAXI@Z PROC				; CMagicInf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMagicInf@@UAE@XZ	; CMagicInf::~CMagicInf
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 18		 push	 24			; 00000018H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMagicInf@@UAEPAXI@Z ENDP				; CMagicInf::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?UpdateMasterSkill@CMagicInf@@QAEHHE@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_fValue$1 = 12						; size = 4
_btLevel$ = 12						; size = 1
?UpdateMasterSkill@CMagicInf@@QAEHHE@Z PROC		; CMagicInf::UpdateMasterSkill, COMDAT
; _this$ = ecx

; 320  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 321  : 	int damage = 1;
; 322  : 
; 323  : 	if( this->m_Skill != (BYTE)-1 )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	0f 84 96 00 00
	00		 je	 $LN2@UpdateMast

; 324  : 	{
; 325  : 		this->m_Skill = iSkill;

  00013	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]

; 326  : 		this->m_Level = btLevel;
; 327  : 		if( MagicDamageC.GetSkillUseType(this->m_Skill) == 4 )

  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0001b	8a 45 0c	 mov	 al, BYTE PTR _btLevel$[ebp]
  0001e	52		 push	 edx
  0001f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00022	88 46 04	 mov	 BYTE PTR [esi+4], al
  00025	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 328  : 		{
; 329  : 			int nBrandSkill = MagicDamageC.GetNormalBrandOfSkill(this->m_Skill);

  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0002f	83 f8 04	 cmp	 eax, 4
  00032	75 28		 jne	 SHORT $LN4@UpdateMast
  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	e8 00 00 00 00	 call	 ?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetNormalBrandOfSkill
  0003c	0f b7 c0	 movzx	 eax, ax

; 330  : 
; 331  : 			if( nBrandSkill > 0 && this->m_Skill != nBrandSkill )

  0003f	85 c0		 test	 eax, eax
  00041	7e 14		 jle	 SHORT $LN6@UpdateMast
  00043	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00046	74 0f		 je	 SHORT $LN6@UpdateMast

; 332  : 			{
; 333  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  00048	50		 push	 eax
  00049	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0004e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00053	8b c8		 mov	 ecx, eax

; 334  : 			}
; 335  : 			else

  00055	eb 3b		 jmp	 SHORT $LN11@UpdateMast
$LN6@UpdateMast:

; 336  : 			{
; 337  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill),this->m_Level);

  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
$LN4@UpdateMast:

; 338  : 
; 339  : 				if( fValue == 0.0f )
; 340  : 				{
; 341  : 					damage = 1;
; 342  : 				}
; 343  : 				else
; 344  : 				{
; 345  : 					damage = fValue;
; 346  : 				}
; 347  : 			}
; 348  : 		}
; 349  : 		else
; 350  : 		{
; 351  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill),this->m_Level);

  0005c	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00060	50		 push	 eax
  00061	ff 76 08	 push	 DWORD PTR [esi+8]
  00064	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00069	50		 push	 eax
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0006f	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  00074	d9 5d 0c	 fstp	 DWORD PTR _fValue$1[ebp]

; 352  : 
; 353  : 			if( fValue == 0.0f )

  00077	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fValue$1[ebp]

; 354  : 			{
; 355  : 				damage = 1;

  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00088	9f		 lahf
  00089	f6 c4 44	 test	 ah, 68			; 00000044H
  0008c	7b 04		 jnp	 SHORT $LN11@UpdateMast

; 356  : 			}
; 357  : 			else
; 358  : 			{
; 359  : 				damage = fValue;

  0008e	f3 0f 2c c8	 cvttss2si ecx, xmm0
$LN11@UpdateMast:

; 360  : 			}
; 361  : 		}
; 362  : 
; 363  : 		this->m_DamageMin = damage;
; 364  : 		this->m_DamageMax = damage + damage/2;

  00092	8b c1		 mov	 eax, ecx
  00094	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00097	99		 cdq
  00098	2b c2		 sub	 eax, edx
  0009a	d1 f8		 sar	 eax, 1
  0009c	03 c1		 add	 eax, ecx
  0009e	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 365  : 		return this->m_Skill;

  000a1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a4	5e		 pop	 esi

; 371  : 	}
; 372  : }

  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
$LN2@UpdateMast:

; 366  : 	}
; 367  : 	else
; 368  : 	{
; 369  : 		LogAdd("[MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%d",iSkill,btLevel);

  000a9	0f b6 45 0c	 movzx	 eax, BYTE PTR _btLevel$[ebp]
  000ad	50		 push	 eax
  000ae	ff 75 08	 push	 DWORD PTR _iSkill$[ebp]
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 370  : 		return -1;

  000bf	83 c8 ff	 or	 eax, -1
  000c2	5e		 pop	 esi

; 371  : 	}
; 372  : }

  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
?UpdateMasterSkill@CMagicInf@@QAEHHE@Z ENDP		; CMagicInf::UpdateMasterSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?SetMasterSkill@CMagicInf@@QAEHHE@Z
_TEXT	SEGMENT
_aSkill$ = 8						; size = 4
_aLevel$ = 12						; size = 1
?SetMasterSkill@CMagicInf@@QAEHHE@Z PROC		; CMagicInf::SetMasterSkill, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 238  : 	if( m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	74 2e		 je	 SHORT $LN2@SetMasterS

; 239  : 	{
; 240  : 		m_Skill = aSkill;

  0000f	8b 55 08	 mov	 edx, DWORD PTR _aSkill$[ebp]

; 241  : 		m_Level = aLevel;
; 242  : 
; 243  : 		int damage = MagicDamageC.SkillGet(m_Skill);

  00012	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00017	8a 45 0c	 mov	 al, BYTE PTR _aLevel$[ebp]
  0001a	52		 push	 edx
  0001b	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0001e	88 46 04	 mov	 BYTE PTR [esi+4], al
  00021	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00026	8b c8		 mov	 ecx, eax

; 244  : 		m_DamageMin = damage;
; 245  : 		m_DamageMax = damage + damage/2;

  00028	99		 cdq
  00029	2b c2		 sub	 eax, edx
  0002b	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0002e	d1 f8		 sar	 eax, 1
  00030	03 c1		 add	 eax, ecx
  00032	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 246  : 		return m_Skill;

  00035	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00038	5e		 pop	 esi

; 252  : 	}
; 253  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN2@SetMasterS:

; 247  : 	}
; 248  : 	else
; 249  : 	{
; 250  : 		LogAdd("[MasterSkill] [ERROR!!] Fail - Update Master Skill:%d, Level:%d",aSkill,aLevel);

  0003d	0f b6 45 0c	 movzx	 eax, BYTE PTR _aLevel$[ebp]
  00041	50		 push	 eax
  00042	ff 75 08	 push	 DWORD PTR _aSkill$[ebp]
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@BIOIIPHI@?$FLMasterSkill?$FN?5?$FLERROR?$CB?$CB?$FN?5Fail?5?9?5U@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH

; 251  : 		return -1;

  00053	83 c8 ff	 or	 eax, -1
  00056	5e		 pop	 esi

; 252  : 	}
; 253  : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?SetMasterSkill@CMagicInf@@QAEHHE@Z ENDP		; CMagicInf::SetMasterSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?GetDamage@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
_subd$ = -32						; size = 4
_damage$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
?GetDamage@CMagicInf@@QAEHXZ PROC			; CMagicInf::GetDamage, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetDamage@CMagicInf@@QAEHXZ
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	8b f1		 mov	 esi, ecx

; 214  : 	int damage = 0;

  00035	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _damage$[ebp], 0

; 215  : 
; 216  : 	if ( m_Skill == 0xFF )

  0003c	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  00043	75 37		 jne	 SHORT $LN2@GetDamage

; 217  : 	{
; 218  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00045	68 da 00 00 00	 push	 218			; 000000daH
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  0004f	68 ca 01 00 00	 push	 458			; 000001caH
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00059	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : 		return 0;

  00068	33 c0		 xor	 eax, eax

; 231  : 	}
; 232  : 
; 233  : 	return damage;
; 234  : }

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN2@GetDamage:

; 220  : 	}
; 221  : 
; 222  : 	int subd = m_DamageMax - m_DamageMin;

  0007c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0007f	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  00082	89 45 e0	 mov	 DWORD PTR _subd$[ebp], eax

; 223  : 
; 224  : 	__try

  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 225  : 	{
; 226  : 		damage = m_DamageMin + (rand() % 1);

  0008c	e8 00 00 00 00	 call	 _rand
  00091	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00094	89 45 e4	 mov	 DWORD PTR _damage$[ebp], eax

; 227  : 	}

  00097	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 231  : 	}
; 232  : 
; 233  : 	return damage;
; 234  : }

  0009e	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN6@GetDamage:
$LN11@GetDamage:

; 228  : 	__except(subd=1,1)

  000b0	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _subd$[ebp], 1
  000b7	b8 01 00 00 00	 mov	 eax, 1
$LN10@GetDamage:
$LN8@GetDamage:
  000bc	c3		 ret	 0
$LN7@GetDamage:
  000bd	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 229  : 	{
; 230  : 		LogAdd(lMsg.Get(MSGGET(0, 111)), __FILE__, __LINE__);

  000c0	68 e6 00 00 00	 push	 230			; 000000e6H
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  000ca	6a 6f		 push	 111			; 0000006fH
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000d1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000d6	50		 push	 eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000dd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 227  : 	}

  000e0	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  000e7	8b 45 e4	 mov	 eax, DWORD PTR _damage$[ebp]

; 231  : 	}
; 232  : 
; 233  : 	return damage;
; 234  : }

  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  000ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f4	59		 pop	 ecx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
?GetDamage@CMagicInf@@QAEHXZ ENDP			; CMagicInf::GetDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?Set@CMagicInf@@QAEHEEE@Z
_TEXT	SEGMENT
_aType$ = 8						; size = 1
_aIndex$ = 12						; size = 1
_aLevel$ = 16						; size = 1
?Set@CMagicInf@@QAEHEEE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 187  : 	if ( m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	74 2b		 je	 SHORT $LN2@Set

; 188  : 	{
; 189  : 		LogAdd(lMsg.Get(MSGGET(1, 203)), __FILE__, __LINE__);

  0000f	68 bd 00 00 00	 push	 189			; 000000bdH
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0N@JHHEKDLI@MagicInf?4cpp?$AA@
  00019	68 cb 01 00 00	 push	 459			; 000001cbH
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00023	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00028	50		 push	 eax
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 190  : 		return -1;

  00032	83 c8 ff	 or	 eax, -1
  00035	5e		 pop	 esi

; 206  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Set:

; 191  : 	}
; 192  : 
; 193  : 	m_Level = aLevel;

  0003a	8a 45 10	 mov	 al, BYTE PTR _aLevel$[ebp]
  0003d	88 46 04	 mov	 BYTE PTR [esi+4], al

; 194  : 	m_Skill = GetSkillNumberInex(aType, aIndex, aLevel);

  00040	0f b6 c0	 movzx	 eax, al
  00043	50		 push	 eax
  00044	0f b6 45 0c	 movzx	 eax, BYTE PTR _aIndex$[ebp]
  00048	50		 push	 eax
  00049	0f b6 45 08	 movzx	 eax, BYTE PTR _aType$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?GetSkillNumberInex@@YAHHHH@Z ; GetSkillNumberInex
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 195  : 	
; 196  : 	if ( m_Skill < 0 )

  00056	b9 01 00 00 00	 mov	 ecx, 1
  0005b	85 c0		 test	 eax, eax
  0005d	0f 48 c1	 cmovs	 eax, ecx

; 197  : 	{
; 198  : 		m_Skill = 1;
; 199  : 	}
; 200  : 
; 201  : 	int damage = MagicDamageC.SkillGet(m_Skill);

  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00065	50		 push	 eax
  00066	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00069	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0006e	8b c8		 mov	 ecx, eax

; 202  : 	m_DamageMin = damage;
; 203  : 	m_DamageMax = damage + damage/2;

  00070	99		 cdq
  00071	2b c2		 sub	 eax, edx
  00073	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00076	d1 f8		 sar	 eax, 1
  00078	03 c1		 add	 eax, ecx
  0007a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 204  : 
; 205  : 	return m_Skill;

  0007d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00080	5e		 pop	 esi

; 206  : }

  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?Set@CMagicInf@@QAEHEEE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?Set@CMagicInf@@QAEHHE@Z
_TEXT	SEGMENT
_aSkill$ = 8						; size = 4
_fValue$1 = 12						; size = 4
_aLevel$ = 12						; size = 1
?Set@CMagicInf@@QAEHHE@Z PROC				; CMagicInf::Set, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 259  : 	int damage = 1;
; 260  : 
; 261  : 	if ( m_Skill != 0xFF )

  00006	81 7e 08 ff 00
	00 00		 cmp	 DWORD PTR [esi+8], 255	; 000000ffH
  0000d	74 08		 je	 SHORT $LN2@Set

; 262  : 	{
; 263  : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	5e		 pop	 esi

; 317  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
$LN2@Set:

; 264  : 	}
; 265  : 
; 266  : 	m_Skill = aSkill;
; 267  : 	m_Level = aLevel;

  00017	8a 45 0c	 mov	 al, BYTE PTR _aLevel$[ebp]

; 268  : 	
; 269  : 	if( g_MasterSkillSystem.CheckMasterLevelSkill(aSkill) )

  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _aSkill$[ebp]
  00023	57		 push	 edi
  00024	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00027	88 46 04	 mov	 BYTE PTR [esi+4], al
  0002a	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill

; 270  : 	{
; 271  : 		if( MagicDamageC.GetSkillUseType(aSkill) == 4 )

  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00034	85 c0		 test	 eax, eax
  00036	74 68		 je	 SHORT $LN3@Set
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 ?GetSkillUseType@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillUseType

; 272  : 		{
; 273  : 			int nBrandSkill = MagicDamageC.GetNormalBrandOfSkill(aSkill);

  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00043	83 f8 04	 cmp	 eax, 4
  00046	75 1e		 jne	 SHORT $LN5@Set
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetNormalBrandOfSkill
  0004e	0f b7 c0	 movzx	 eax, ax

; 274  : 
; 275  : 			if( nBrandSkill > 0 && aSkill != nBrandSkill )

  00051	85 c0		 test	 eax, eax
  00053	7e 0c		 jle	 SHORT $LN7@Set
  00055	3b f8		 cmp	 edi, eax
  00057	74 08		 je	 SHORT $LN7@Set

; 276  : 			{
; 277  : 				damage = MagicDamageC.SkillGet(nBrandSkill);

  00059	50		 push	 eax
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC

; 278  : 			}
; 279  : 			else

  0005f	eb 42		 jmp	 SHORT $LN14@Set
$LN7@Set:

; 280  : 			{
; 281  : 				float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill),this->m_Level);

  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
$LN5@Set:

; 282  : 
; 283  : 				if( fValue == 0.0f )
; 284  : 				{
; 285  : 					damage = 1;
; 286  : 				}
; 287  : 				else
; 288  : 				{
; 289  : 					damage = fValue;
; 290  : 				}
; 291  : 			}
; 292  : 		}
; 293  : 		else
; 294  : 		{
; 295  : 			float fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(this->m_Skill),this->m_Level);

  00066	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  0006a	50		 push	 eax
  0006b	ff 76 08	 push	 DWORD PTR [esi+8]
  0006e	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00073	50		 push	 eax
  00074	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00079	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0007e	d9 5d 0c	 fstp	 DWORD PTR _fValue$1[ebp]

; 296  : 
; 297  : 			if( fValue == 0.0f )

  00081	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fValue$1[ebp]
  00086	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0008d	9f		 lahf
  0008e	f6 c4 44	 test	 ah, 68			; 00000044H
  00091	7a 07		 jp	 SHORT $LN11@Set

; 298  : 			{
; 299  : 				damage = 1;

  00093	b9 01 00 00 00	 mov	 ecx, 1

; 300  : 			}
; 301  : 			else

  00098	eb 10		 jmp	 SHORT $LN4@Set
$LN11@Set:

; 302  : 			{
; 303  : 				damage = fValue;

  0009a	f3 0f 2c c8	 cvttss2si ecx, xmm0

; 304  : 			}
; 305  : 		}
; 306  : 	}
; 307  : 	else

  0009e	eb 0a		 jmp	 SHORT $LN4@Set
$LN3@Set:

; 308  : 	{
; 309  : 		damage = MagicDamageC.SkillGet(m_Skill);

  000a0	ff 76 08	 push	 DWORD PTR [esi+8]
$LN14@Set:
  000a3	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  000a8	8b c8		 mov	 ecx, eax
$LN4@Set:

; 310  : 	}
; 311  : 
; 312  : 	
; 313  : 	m_DamageMin = damage;
; 314  : 	m_DamageMax = damage + damage/2;

  000aa	8b c1		 mov	 eax, ecx
  000ac	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  000af	99		 cdq
  000b0	2b c2		 sub	 eax, edx
  000b2	d1 f8		 sar	 eax, 1
  000b4	03 c1		 add	 eax, ecx
  000b6	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 315  : 
; 316  : 	return m_Skill;

  000b9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 317  : }

  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
?Set@CMagicInf@@QAEHHE@Z ENDP				; CMagicInf::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?Clear@CMagicInf@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMagicInf@@QAEXXZ PROC				; CMagicInf::Clear, COMDAT
; _this$ = ecx

; 33   : 	m_Skill  = 0xFF;

  00000	c7 41 08 ff 00
	00 00		 mov	 DWORD PTR [ecx+8], 255	; 000000ffH

; 34   : 	m_Level  = 0;

  00007	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 35   : 	m_bBrand = 0;

  0000b	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0

; 36   : }

  0000f	c3		 ret	 0
?Clear@CMagicInf@@QAEXXZ ENDP				; CMagicInf::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?IsMagic@CMagicInf@@QAEHXZ
_TEXT	SEGMENT
?IsMagic@CMagicInf@@QAEHXZ PROC				; CMagicInf::IsMagic, COMDAT
; _this$ = ecx

; 43   : 	if ( m_Skill == 0xFF )

  00000	33 c0		 xor	 eax, eax
  00002	81 79 08 ff 00
	00 00		 cmp	 DWORD PTR [ecx+8], 255	; 000000ffH
  00009	0f 95 c0	 setne	 al

; 44   : 	{
; 45   : 		return false;
; 46   : 	}
; 47   : 	return true;
; 48   : }

  0000c	c3		 ret	 0
?IsMagic@CMagicInf@@QAEHXZ ENDP				; CMagicInf::IsMagic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ??1CMagicInf@@UAE@XZ
_TEXT	SEGMENT
??1CMagicInf@@UAE@XZ PROC				; CMagicInf::~CMagicInf, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicInf@@6B@

; 24   : 	m_DamageMin  = 0;

  00006	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 25   : 	m_DamageMax  = 0;

  0000d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 26   : }

  00014	c3		 ret	 0
??1CMagicInf@@UAE@XZ ENDP				; CMagicInf::~CMagicInf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ??0CMagicInf@@QAE@XZ
_TEXT	SEGMENT
??0CMagicInf@@QAE@XZ PROC				; CMagicInf::CMagicInf, COMDAT
; _this$ = ecx

; 15   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMagicInf@@6B@

; 16   : 	this->Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear

; 17   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CMagicInf@@QAE@XZ ENDP				; CMagicInf::CMagicInf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicinf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
