; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ShopPointEx.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0ShopPointEx@@QAE@XZ				; ShopPointEx::ShopPointEx
PUBLIC	??1ShopPointEx@@QAE@XZ				; ShopPointEx::~ShopPointEx
PUBLIC	?Init@ShopPointEx@@QAEXXZ			; ShopPointEx::Init
PUBLIC	?Load@ShopPointEx@@QAEXXZ			; ShopPointEx::Load
PUBLIC	?ReadData@ShopPointEx@@QAEXPAD@Z		; ShopPointEx::ReadData
PUBLIC	?GetMonsterSlot@ShopPointEx@@QAEHHH@Z		; ShopPointEx::GetMonsterSlot
PUBLIC	?AddTimeBonus@ShopPointEx@@QAEXH@Z		; ShopPointEx::AddTimeBonus
PUBLIC	?AddEventBonus@ShopPointEx@@QAEXHW4T@ShopPointExEvent@@@Z ; ShopPointEx::AddEventBonus
PUBLIC	?AddMonsterBonus@ShopPointEx@@QAEXHH@Z		; ShopPointEx::AddMonsterBonus
PUBLIC	?SendNotify@ShopPointEx@@QAEXHHHH@Z		; ShopPointEx::SendNotify
PUBLIC	?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate
PUBLIC	?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reallocate
PUBLIC	?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
PUBLIC	?g_ShopPointEx@@3VShopPointEx@@A		; g_ShopPointEx
PUBLIC	??_C@_0BH@HHIFLGJO@Custom?2ShopPointEx?4txt?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CA@OOGNLOOF@?$FLShopPointEx?$FN?5?$CFs?5file?5not?5found?$AA@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DB@LKIBCCDC@?$FLShopPointEx?$FN?5?$FL?$CFs?$FN?5File?5is?5loade@ ; `string'
PUBLIC	??_C@_0BD@HOJGFEKP@Obtained?5?$CFd?5WCoinC?$AA@	; `string'
PUBLIC	??_C@_0BD@BPHJBFDN@Obtained?5?$CFd?5WCoinP?$AA@	; `string'
PUBLIC	??_C@_0BI@DNLKGFOE@Obtained?5?$CFd?5GoblinPoint?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?DataSend@wsShopServerCli@@QAEHPADH@Z:PROC	; wsShopServerCli::DataSend
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memset:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?g_ShopServerClient@@3VwsShopServerCli@@A:BYTE	; g_ShopServerClient
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_ShopPointEx@@3VShopPointEx@@A DB 0507cH DUP (?)	; g_ShopPointEx
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ShopPointEx$initializer$@@3P6AXXZA DD FLAT:??__Eg_ShopPointEx@@YAXXZ ; g_ShopPointEx$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DNLKGFOE@Obtained?5?$CFd?5GoblinPoint?$AA@
CONST	SEGMENT
??_C@_0BI@DNLKGFOE@Obtained?5?$CFd?5GoblinPoint?$AA@ DB 'Obtained %d Gobl'
	DB	'inPoint', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BPHJBFDN@Obtained?5?$CFd?5WCoinP?$AA@
CONST	SEGMENT
??_C@_0BD@BPHJBFDN@Obtained?5?$CFd?5WCoinP?$AA@ DB 'Obtained %d WCoinP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HOJGFEKP@Obtained?5?$CFd?5WCoinC?$AA@
CONST	SEGMENT
??_C@_0BD@HOJGFEKP@Obtained?5?$CFd?5WCoinC?$AA@ DB 'Obtained %d WCoinC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@LKIBCCDC@?$FLShopPointEx?$FN?5?$FL?$CFs?$FN?5File?5is?5loade@
CONST	SEGMENT
??_C@_0DB@LKIBCCDC@?$FLShopPointEx?$FN?5?$FL?$CFs?$FN?5File?5is?5loade@ DB '['
	DB	'ShopPointEx] [%s] File is loaded (Monsters: %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OOGNLOOF@?$FLShopPointEx?$FN?5?$CFs?5file?5not?5found?$AA@
CONST	SEGMENT
??_C@_0CA@OOGNLOOF@?$FLShopPointEx?$FN?5?$CFs?5file?5not?5found?$AA@ DB '['
	DB	'ShopPointEx] %s file not found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HHIFLGJO@Custom?2ShopPointEx?4txt?$AA@
CONST	SEGMENT
??_C@_0BH@HHIFLGJO@Custom?2ShopPointEx?4txt?$AA@ DB 'Custom\ShopPointEx.t'
	DB	'xt', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@USHOPPOINTEX_TIMEBONUS@@@std@@YA$$QAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USHOPPOINTEX_TIMEBONUS@@@std@@YA$$QAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z PROC ; std::forward<SHOPPOINTEX_TIMEBONUS>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@USHOPPOINTEX_TIMEBONUS@@@std@@YA$$QAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z ENDP ; std::forward<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@U1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::destroy<SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::destroy<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 22		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0a		 je	 SHORT $LN2@Uninit_mov
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	89 06		 mov	 DWORD PTR [esi], eax
  0001a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001d	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00020	83 c1 08	 add	 ecx, 8
  00023	83 c6 08	 add	 esi, 8
  00026	3b cf		 cmp	 ecx, edi
  00028	75 e8		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5f		 pop	 edi

; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00030	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00033	5f		 pop	 edi

; 450  : 	}

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z PROC ; std::_Val_type<SHOPPOINTEX_TIMEBONUS *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z ENDP ; std::_Val_type<SHOPPOINTEX_TIMEBONUS *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@@Z PROC ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::destroy<SHOPPOINTEX_TIMEBONUS>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@@Z ENDP ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::destroy<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<SHOPPOINTEX_TIMEBONUS>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@@std@@YAAAPAUSHOPPOINTEX_TIMEBONUS@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@@std@@YAAAPAUSHOPPOINTEX_TIMEBONUS@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@@std@@YAAAPAUSHOPPOINTEX_TIMEBONUS@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z PROC ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z ENDP ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z PROC ; std::_Unchecked<SHOPPOINTEX_TIMEBONUS *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUSHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@@Z ENDP ; std::_Unchecked<SHOPPOINTEX_TIMEBONUS *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::destroy<SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USHOPPOINTEX_TIMEBONUS@@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::destroy<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z PROC ; std::addressof<SHOPPOINTEX_TIMEBONUS>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@USHOPPOINTEX_TIMEBONUS@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z ENDP ; std::addressof<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z PROC ; std::_Uninitialized_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@USHOPPOINTEX_TIMEBONUS@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSHOPPOINTEX_TIMEBONUS@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@USHOPPOINTEX_TIMEBONUS@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSHOPPOINTEX_TIMEBONUS@@0@Z PROC ; std::_Ptr_cat<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@USHOPPOINTEX_TIMEBONUS@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSHOPPOINTEX_TIMEBONUS@@0@Z ENDP ; std::_Ptr_cat<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@YAABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@YAABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@0@ABV10@@Z PROC ; std::forward<std::allocator<SHOPPOINTEX_TIMEBONUS> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@YAABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<SHOPPOINTEX_TIMEBONUS> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUSHOPPOINTEX_TIMEBONUS@@@std@@YAABUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSHOPPOINTEX_TIMEBONUS@@@std@@YAABUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z PROC ; std::forward<SHOPPOINTEX_TIMEBONUS const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSHOPPOINTEX_TIMEBONUS@@@std@@YAABUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z ENDP ; std::forward<SHOPPOINTEX_TIMEBONUS const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAXAAV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@PAUSHOPPOINTEX_TIMEBONUS@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUSHOPPOINTEX_TIMEBONUS@@@std@@YAAAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUSHOPPOINTEX_TIMEBONUS@@@std@@YAAAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z PROC ; std::forward<SHOPPOINTEX_TIMEBONUS &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUSHOPPOINTEX_TIMEBONUS@@@std@@YAAAUSHOPPOINTEX_TIMEBONUS@@AAU1@@Z ENDP ; std::forward<SHOPPOINTEX_TIMEBONUS &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<SHOPPOINTEX_TIMEBONUS const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<SHOPPOINTEX_TIMEBONUS const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUSHOPPOINTEX_TIMEBONUS@@@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEPAUSHOPPOINTEX_TIMEBONUS@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUSHOPPOINTEX_TIMEBONUS@@@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEPAUSHOPPOINTEX_TIMEBONUS@@PAU2@00@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Umove<SHOPPOINTEX_TIMEBONUS *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUSHOPPOINTEX_TIMEBONUS@@@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEPAUSHOPPOINTEX_TIMEBONUS@@PAU2@00@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Umove<SHOPPOINTEX_TIMEBONUS *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@YAXPAUSHOPPOINTEX_TIMEBONUS@@0AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1><std::allocator<SHOPPOINTEX_TIMEBONUS> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1><std::allocator<SHOPPOINTEX_TIMEBONUS> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@ABU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@USHOPPOINTEX_TIMEBONUS@@AAU1@@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::construct<SHOPPOINTEX_TIMEBONUS,SHOPPOINTEX_TIMEBONUS &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z PROC ; std::addressof<SHOPPOINTEX_TIMEBONUS const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUSHOPPOINTEX_TIMEBONUS@@@std@@YAPBUSHOPPOINTEX_TIMEBONUS@@ABU1@@Z ENDP ; std::addressof<SHOPPOINTEX_TIMEBONUS const >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ShopPointEx@@YAXXZ
text$yd	SEGMENT
??__Fg_ShopPointEx@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ShopPointEx'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopPointEx@@3VShopPointEx@@A ; g_ShopPointEx
  00005	e9 00 00 00 00	 jmp	 ??1ShopPointEx@@QAE@XZ	; ShopPointEx::~ShopPointEx
??__Fg_ShopPointEx@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ShopPointEx''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ??__Eg_ShopPointEx@@YAXXZ
text$di	SEGMENT
??__Eg_ShopPointEx@@YAXXZ PROC				; `dynamic initializer for 'g_ShopPointEx'', COMDAT

; 11   : ShopPointEx g_ShopPointEx;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopPointEx@@3VShopPointEx@@A ; g_ShopPointEx
  00005	e8 00 00 00 00	 call	 ??0ShopPointEx@@QAE@XZ	; ShopPointEx::ShopPointEx
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ShopPointEx@@YAXXZ ; `dynamic atexit destructor for 'g_ShopPointEx''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ShopPointEx@@YAXXZ ENDP				; `dynamic initializer for 'g_ShopPointEx''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pcsprotocol.h
;	COMDAT ??1MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ
_TEXT	SEGMENT
??1MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ PROC	; protocol::MSG_GTOS_UPDATE_POINT_EX::~MSG_GTOS_UPDATE_POINT_EX, COMDAT
; _this$ = ecx

; 638  : 		};

  00000	c3		 ret	 0
??1MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ ENDP	; protocol::MSG_GTOS_UPDATE_POINT_EX::~MSG_GTOS_UPDATE_POINT_EX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pcsprotocol.h
;	COMDAT ??0MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ
_TEXT	SEGMENT
??0MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ PROC	; protocol::MSG_GTOS_UPDATE_POINT_EX::MSG_GTOS_UPDATE_POINT_EX, COMDAT
; _this$ = ecx

; 630  : 		{
; 631  : 			this->size = sizeof(MSG_GTOS_UPDATE_POINT_EX);

  00000	c7 01 18 00 00
	00		 mov	 DWORD PTR [ecx], 24	; 00000018H

; 632  : 			this->hdrid.category = 0xF00;
; 633  : 			this->hdrid.messageID = 1;
; 634  : 		};

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 0f
	01 00		 mov	 DWORD PTR [ecx+4], 69376 ; 00010f00H
  0000f	c3		 ret	 0
??0MSG_GTOS_UPDATE_POINT_EX@protocol@@QAE@XZ ENDP	; protocol::MSG_GTOS_UPDATE_POINT_EX::MSG_GTOS_UPDATE_POINT_EX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEXXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 03	 sar	 eax, 3

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 03	 sar	 edx, 3

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 03	 sar	 edi, 3

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSHOPPOINTEX_TIMEBONUS@@PAU1@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@U1@@std@@YAPAUSHOPPOINTEX_TIMEBONUS@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SHOPPOINTEX_TIMEBONUS *,SHOPPOINTEX_TIMEBONUS *,std::allocator<SHOPPOINTEX_TIMEBONUS>,SHOPPOINTEX_TIMEBONUS>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 03	 sar	 ebx, 3

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 03	 sar	 eax, 3
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 df	 lea	 eax, DWORD PTR [edi+ebx*8]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBE_NPBUSHOPPOINTEX_TIMEBONUS@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBE_NPBUSHOPPOINTEX_TIMEBONUS@@@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBE_NPBUSHOPPOINTEX_TIMEBONUS@@@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEII@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 1f	 mov	 ecx, 536870911		; 1fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 03	 sar	 esi, 3

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IBEII@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXPAUSHOPPOINTEX_TIMEBONUS@@0@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXABUSHOPPOINTEX_TIMEBONUS@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXABUSHOPPOINTEX_TIMEBONUS@@@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 38		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 32		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0002d	85 d2		 test	 edx, edx
  0002f	74 37		 je	 SHORT $LN205@push_back
  00031	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00033	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  00036	89 02		 mov	 DWORD PTR [edx], eax
  00038	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  0003c	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0003f	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00049	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0004c	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0004e	6a 01		 push	 1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00057	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0a		 je	 SHORT $LN205@push_back
  0005e	8b 07		 mov	 eax, DWORD PTR [edi]
  00060	89 01		 mov	 DWORD PTR [ecx], eax
  00062	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00068	83 46 04 08	 add	 DWORD PTR [esi+4], 8
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?push_back@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXABUSHOPPOINTEX_TIMEBONUS@@@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEAAUSHOPPOINTEX_TIMEBONUS@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEAAUSHOPPOINTEX_TIMEBONUS@@I@Z PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEAAUSHOPPOINTEX_TIMEBONUS@@I@Z ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 03	 sar	 eax, 3

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIXZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::~vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 03	 sar	 eax, 3
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::~vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ PROC ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ ENDP ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >,std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >::_Vector_val<std::_Simple_types<SHOPPOINTEX_TIMEBONUS> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABQAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAPAUSHOPPOINTEX_TIMEBONUS@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >::_Vector_alloc<std::_Vec_base_types<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAE@ABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAIABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAIABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@2@@Z PROC ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@SAIABV?$allocator@USHOPPOINTEX_TIMEBONUS@@@2@@Z ENDP ; std::allocator_traits<std::allocator<SHOPPOINTEX_TIMEBONUS> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QBEIXZ PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QBEIXZ ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEPAUSHOPPOINTEX_TIMEBONUS@@I@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@ABV01@@Z PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocator<SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocator<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@XZ PROC ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocator<SHOPPOINTEX_TIMEBONUS>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@QAE@XZ ENDP ; std::allocator<SHOPPOINTEX_TIMEBONUS>::allocator<SHOPPOINTEX_TIMEBONUS>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\users\michel\desktop\source\gameserver\source\pcsprotocol.h
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?SendNotify@ShopPointEx@@QAEXHHHH@Z
_TEXT	SEGMENT
_pMsg$ = -284						; size = 24
_Text$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_UserIndex$ = 8						; size = 4
_CoinC$ = 12						; size = 4
_CoinP$ = 16						; size = 4
_CoinG$ = 20						; size = 4
?SendNotify@ShopPointEx@@QAEXHHHH@Z PROC		; ShopPointEx::SendNotify, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 269  : 	//gGameShop.GDSavePoint(UserIndex);
; 270  : 	protocol::MSG_GTOS_UPDATE_POINT_EX pMsg;
; 271  : 	pMsg.dwUserGuid = gObj[UserIndex].DBNumber;

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	53		 push	 ebx

; 273  : 	pMsg.dwAddPoint[1] = CoinP;
; 274  : 	pMsg.dwAddPoint[2] = CoinG;

  00019	8b 5d 14	 mov	 ebx, DWORD PTR _CoinG$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 08	 mov	 esi, DWORD PTR _UserIndex$[ebp]
  00020	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
; File c:\users\michel\desktop\source\gameserver\source\pcsprotocol.h

; 631  : 			this->size = sizeof(MSG_GTOS_UPDATE_POINT_EX);

  00026	c7 85 e4 fe ff
	ff 18 00 00 00	 mov	 DWORD PTR _pMsg$[ebp], 24 ; 00000018H

; 632  : 			this->hdrid.category = 0xF00;

  00030	c7 85 e8 fe ff
	ff 00 0f 01 00	 mov	 DWORD PTR _pMsg$[ebp+4], 69376 ; 00010f00H
  0003a	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 272  : 	pMsg.dwAddPoint[0] = CoinC;

  0003b	8b 7d 0c	 mov	 edi, DWORD PTR _CoinC$[ebp]

; 275  : 	g_ShopServerClient.DataSend((PCHAR)&pMsg,sizeof(pMsg));

  0003e	6a 18		 push	 24			; 00000018H
  00040	8b 44 01 30	 mov	 eax, DWORD PTR [ecx+eax+48]
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopServerClient@@3VwsShopServerCli@@A ; g_ShopServerClient
  00049	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0004f	8b 45 10	 mov	 eax, DWORD PTR _CoinP$[ebp]
  00052	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00058	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005e	50		 push	 eax
  0005f	89 bd f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+12], edi
  00065	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+20], ebx
  0006b	e8 00 00 00 00	 call	 ?DataSend@wsShopServerCli@@QAEHPADH@Z ; wsShopServerCli::DataSend

; 276  : 	// ----
; 277  : 	char Text[256];
; 278  : 	// ----
; 279  : 	if( CoinC > 0 )

  00070	85 ff		 test	 edi, edi
  00072	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__wsprintfA
  00078	7e 36		 jle	 SHORT $LN2@SendNotify

; 280  : 	{
; 281  : 		ZeroMemory(Text, 255);

  0007a	68 ff 00 00 00	 push	 255			; 000000ffH
  0007f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  00085	6a 00		 push	 0
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 _memset

; 282  : 		wsprintf(Text, "Obtained %d WCoinC", CoinC);

  0008d	ff 75 0c	 push	 DWORD PTR _CoinC$[ebp]
  00090	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HOJGFEKP@Obtained?5?$CFd?5WCoinC?$AA@
  0009b	50		 push	 eax
  0009c	ff d7		 call	 edi

; 283  : 		GCServerMsgStringSend(Text, UserIndex, 1);

  0009e	6a 01		 push	 1
  000a0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  000a6	56		 push	 esi
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000ad	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@SendNotify:

; 284  : 	}
; 285  : 	// ----
; 286  : 	if( CoinP > 0 )

  000b0	83 7d 10 00	 cmp	 DWORD PTR _CoinP$[ebp], 0
  000b4	7e 36		 jle	 SHORT $LN3@SendNotify

; 287  : 	{
; 288  : 		ZeroMemory(Text, 255);

  000b6	68 ff 00 00 00	 push	 255			; 000000ffH
  000bb	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memset

; 289  : 		wsprintf(Text, "Obtained %d WCoinP", CoinP);

  000c9	ff 75 10	 push	 DWORD PTR _CoinP$[ebp]
  000cc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BPHJBFDN@Obtained?5?$CFd?5WCoinP?$AA@
  000d7	50		 push	 eax
  000d8	ff d7		 call	 edi

; 290  : 		GCServerMsgStringSend(Text, UserIndex, 1);

  000da	6a 01		 push	 1
  000dc	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  000e2	56		 push	 esi
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000e9	83 c4 24	 add	 esp, 36			; 00000024H
$LN3@SendNotify:

; 291  : 	}
; 292  : 	// ----
; 293  : 	if( CoinG > 0 )

  000ec	85 db		 test	 ebx, ebx
  000ee	7e 34		 jle	 SHORT $LN4@SendNotify

; 294  : 	{
; 295  : 		ZeroMemory(Text, 255);

  000f0	68 ff 00 00 00	 push	 255			; 000000ffH
  000f5	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  000fb	6a 00		 push	 0
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 _memset

; 296  : 		wsprintf(Text, "Obtained %d GoblinPoint", CoinG);

  00103	53		 push	 ebx
  00104	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DNLKGFOE@Obtained?5?$CFd?5GoblinPoint?$AA@
  0010f	50		 push	 eax
  00110	ff d7		 call	 edi

; 297  : 		GCServerMsgStringSend(Text, UserIndex, 1);

  00112	6a 01		 push	 1
  00114	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$[ebp]
  0011a	56		 push	 esi
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00121	83 c4 24	 add	 esp, 36			; 00000024H
$LN4@SendNotify:

; 298  : 	}
; 299  : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	33 cd		 xor	 ecx, ebp
  0012b	5b		 pop	 ebx
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 10 00	 ret	 16			; 00000010H
?SendNotify@ShopPointEx@@QAEXHHHH@Z ENDP		; ShopPointEx::SendNotify
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?AddMonsterBonus@ShopPointEx@@QAEXHH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
_MonsterIndex$ = 12					; size = 4
?AddMonsterBonus@ShopPointEx@@QAEXHH@Z PROC		; ShopPointEx::AddMonsterBonus, COMDAT
; _this$ = ecx

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 244  : 	if( !this->m_IsLoaded )

  00006	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00009	74 46		 je	 SHORT $LN1@AddMonster

; 245  : 	{
; 246  : 		return;
; 247  : 	}
; 248  : 	// ----
; 249  : 	int MonsterSlot = this->GetMonsterSlot(gObj[MonsterIndex].Class, gObj[MonsterIndex].MapNumber);

  0000b	69 55 0c 40 27
	00 00		 imul	 edx, DWORD PTR _MonsterIndex$[ebp], 10048
  00012	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  0001f	50		 push	 eax
  00020	0f b7 82 90 00
	00 00		 movzx	 eax, WORD PTR [edx+144]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?GetMonsterSlot@ShopPointEx@@QAEHHH@Z ; ShopPointEx::GetMonsterSlot

; 250  : 	// ----
; 251  : 	if( MonsterSlot == -1 )

  0002d	83 f8 ff	 cmp	 eax, -1
  00030	74 1f		 je	 SHORT $LN1@AddMonster

; 252  : 	{
; 253  : 		return;
; 254  : 	}
; 255  : 	// ----
; 256  : //	gObj[UserIndex].GameShop.WCoinC			+= this->m_MonsterBonus[MonsterSlot].AddCoinC;
; 257  : //	gObj[UserIndex].GameShop.WCoinP			+= this->m_MonsterBonus[MonsterSlot].AddCoinP;
; 258  : //	gObj[UserIndex].GameShop.GoblinPoint	+= this->m_MonsterBonus[MonsterSlot].AddCoinG;
; 259  : 	// ----
; 260  : 	this->SendNotify(UserIndex, 

  00032	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00035	ff b4 8e 80 00
	00 00		 push	 DWORD PTR [esi+ecx*4+128]
  0003c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0003f	ff 74 8e 7c	 push	 DWORD PTR [esi+ecx*4+124]
  00043	8b ce		 mov	 ecx, esi
  00045	ff 74 86 78	 push	 DWORD PTR [esi+eax*4+120]
  00049	ff 75 08	 push	 DWORD PTR _UserIndex$[ebp]
  0004c	e8 00 00 00 00	 call	 ?SendNotify@ShopPointEx@@QAEXHHHH@Z ; ShopPointEx::SendNotify
$LN1@AddMonster:
  00051	5e		 pop	 esi

; 261  : 		this->m_MonsterBonus[MonsterSlot].AddCoinC,
; 262  : 		this->m_MonsterBonus[MonsterSlot].AddCoinP,
; 263  : 		this->m_MonsterBonus[MonsterSlot].AddCoinG);
; 264  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?AddMonsterBonus@ShopPointEx@@QAEXHH@Z ENDP		; ShopPointEx::AddMonsterBonus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?AddEventBonus@ShopPointEx@@QAEXHW4T@ShopPointExEvent@@@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
_Event$ = 12						; size = 4
?AddEventBonus@ShopPointEx@@QAEXHW4T@ShopPointExEvent@@@Z PROC ; ShopPointEx::AddEventBonus, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  : 	if( !this->m_IsLoaded )

  00003	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00006	74 20		 je	 SHORT $LN1@AddEventBo

; 227  : 	{
; 228  : 		return;
; 229  : 	}
; 230  : 	// ----
; 231  : //	gObj[UserIndex].GameShop.WCoinC			+= this->m_EventBonus[Event].AddCoinC;
; 232  : //	gObj[UserIndex].GameShop.WCoinP			+= this->m_EventBonus[Event].AddCoinP;
; 233  : //	gObj[UserIndex].GameShop.GoblinPoint	+= this->m_EventBonus[Event].AddCoinG;
; 234  : 	// ----
; 235  : 	this->SendNotify(UserIndex,

  00008	8b 55 0c	 mov	 edx, DWORD PTR _Event$[ebp]
  0000b	56		 push	 esi
  0000c	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  0000f	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00012	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00015	ff 74 81 18	 push	 DWORD PTR [ecx+eax*4+24]
  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	ff 76 10	 push	 DWORD PTR [esi+16]
  0001f	ff 75 08	 push	 DWORD PTR _UserIndex$[ebp]
  00022	e8 00 00 00 00	 call	 ?SendNotify@ShopPointEx@@QAEXHHHH@Z ; ShopPointEx::SendNotify
  00027	5e		 pop	 esi
$LN1@AddEventBo:

; 236  : 		this->m_EventBonus[Event].AddCoinC,
; 237  : 		this->m_EventBonus[Event].AddCoinP,
; 238  : 		this->m_EventBonus[Event].AddCoinG);
; 239  : }

  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?AddEventBonus@ShopPointEx@@QAEXHW4T@ShopPointExEvent@@@Z ENDP ; ShopPointEx::AddEventBonus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?AddTimeBonus@ShopPointEx@@QAEXH@Z
_TEXT	SEGMENT
_Bonus$1$ = -4						; size = 4
_UserIndex$ = 8						; size = 4
?AddTimeBonus@ShopPointEx@@QAEXH@Z PROC			; ShopPointEx::AddTimeBonus, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 198  : 	if( !this->m_IsLoaded || !this->m_TimeBonusOn )

  00004	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00007	0f 84 a6 00 00
	00		 je	 $LN6@AddTimeBon
  0000d	80 79 01 00	 cmp	 BYTE PTR [ecx+1], 0
  00011	0f 84 9c 00 00
	00		 je	 $LN6@AddTimeBon

; 199  : 	{
; 200  : 		return;
; 201  : 	}
; 202  : 	// ----
; 203  : 	if( gObj[UserIndex].m_ShopPointExTime % this->m_TimeBonusInterval != 0 )

  00017	53		 push	 ebx
  00018	69 5d 08 40 27
	00 00		 imul	 ebx, DWORD PTR _UserIndex$[ebp], 10048
  0001f	33 d2		 xor	 edx, edx
  00021	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00027	8b 83 14 27 00
	00		 mov	 eax, DWORD PTR [ebx+10004]
  0002d	f7 71 08	 div	 DWORD PTR [ecx+8]
  00030	85 d2		 test	 edx, edx
  00032	75 7e		 jne	 SHORT $LN58@AddTimeBon
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00034	8b 81 74 50 00
	00		 mov	 eax, DWORD PTR [ecx+20596]
  0003a	2b 81 70 50 00
	00		 sub	 eax, DWORD PTR [ecx+20592]
  00040	c1 f8 03	 sar	 eax, 3
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 208  : 	int Bonus = 0;

  00043	89 55 fc	 mov	 DWORD PTR _Bonus$1$[ebp], edx

; 209  : 	for( int i = 0; i < this->m_TimeBonus.size(); i++ )

  00046	85 c0		 test	 eax, eax
  00048	74 4b		 je	 SHORT $LN3@AddTimeBon
  0004a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0004b	8b b1 70 50 00
	00		 mov	 esi, DWORD PTR [ecx+20592]
  00051	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 211  : 		if( gObj[UserIndex].m_ShopPointExTimeBackup >= this->m_TimeBonus[i].Hour * 60 * 60 )

  00052	8b bb 18 27 00
	00		 mov	 edi, DWORD PTR [ebx+10008]
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@AddTimeBon:
  00060	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00063	69 c0 10 0e 00
	00		 imul	 eax, eax, 3600
  00069	3b f8		 cmp	 edi, eax
  0006b	73 19		 jae	 SHORT $LN54@AddTimeBon
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0006d	8b 81 74 50 00
	00		 mov	 eax, DWORD PTR [ecx+20596]
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 209  : 	for( int i = 0; i < this->m_TimeBonus.size(); i++ )

  00073	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00074	2b 81 70 50 00
	00		 sub	 eax, DWORD PTR [ecx+20592]
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 209  : 	for( int i = 0; i < this->m_TimeBonus.size(); i++ )

  0007a	83 c6 08	 add	 esi, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0007d	c1 f8 03	 sar	 eax, 3
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 209  : 	for( int i = 0; i < this->m_TimeBonus.size(); i++ )

  00080	3b d0		 cmp	 edx, eax
  00082	72 dc		 jb	 SHORT $LL4@AddTimeBon

; 211  : 		if( gObj[UserIndex].m_ShopPointExTimeBackup >= this->m_TimeBonus[i].Hour * 60 * 60 )

  00084	eb 0d		 jmp	 SHORT $LN59@AddTimeBon
$LN54@AddTimeBon:

; 212  : 		{
; 213  : 			Bonus = this->m_TimeBonus[i].Bonus;

  00086	8b 81 70 50 00
	00		 mov	 eax, DWORD PTR [ecx+20592]
  0008c	8b 44 d0 04	 mov	 eax, DWORD PTR [eax+edx*8+4]
  00090	89 45 fc	 mov	 DWORD PTR _Bonus$1$[ebp], eax
$LN59@AddTimeBon:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
$LN3@AddTimeBon:

; 214  : 			break;
; 215  : 		}
; 216  : 	}
; 217  : 	gObj[UserIndex].m_ShopPointExTime = 0;

  00095	c7 83 14 27 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+10004], 0

; 218  : //	gObj[UserIndex].GameShop.GoblinPoint += this->m_TimeBonusAdd;
; 219  : //	m_ShopPointExTimeBackup
; 220  : 	this->SendNotify(UserIndex, 0, 0, this->m_TimeBonusAdd + Bonus);

  0009f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000a2	03 45 fc	 add	 eax, DWORD PTR _Bonus$1$[ebp]
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	6a 00		 push	 0
  000aa	ff 75 08	 push	 DWORD PTR _UserIndex$[ebp]
  000ad	e8 00 00 00 00	 call	 ?SendNotify@ShopPointEx@@QAEXHHHH@Z ; ShopPointEx::SendNotify
$LN58@AddTimeBon:
  000b2	5b		 pop	 ebx
$LN6@AddTimeBon:

; 221  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?AddTimeBonus@ShopPointEx@@QAEXH@Z ENDP			; ShopPointEx::AddTimeBonus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?GetMonsterSlot@ShopPointEx@@QAEHHH@Z
_TEXT	SEGMENT
_Class$ = 8						; size = 4
_Map$ = 12						; size = 4
?GetMonsterSlot@ShopPointEx@@QAEHHH@Z PROC		; ShopPointEx::GetMonsterSlot, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]

; 177  : 	for( int i = 0; i < this->m_MonsterLoaded; i++ )

  00008	33 d2		 xor	 edx, edx
  0000a	57		 push	 edi
  0000b	85 f6		 test	 esi, esi
  0000d	7e 21		 jle	 SHORT $LN12@GetMonster
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _Map$[ebp]
  00012	8d 41 74	 lea	 eax, DWORD PTR [ecx+116]
  00015	8b 7d 08	 mov	 edi, DWORD PTR _Class$[ebp]
$LL4@GetMonster:

; 178  : 	{
; 179  : 		if( this->m_MonsterBonus[i].MonsterID != Class )

  00018	39 78 fc	 cmp	 DWORD PTR [eax-4], edi
  0001b	75 0b		 jne	 SHORT $LN2@GetMonster

; 180  : 		{
; 181  : 			continue;
; 182  : 		}
; 183  : 		// ----
; 184  : 		if( this->m_MonsterBonus[i].MapNumber != Map && this->m_MonsterBonus[i].MapNumber != -1 )

  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	3b cb		 cmp	 ecx, ebx
  00021	74 17		 je	 SHORT $LN6@GetMonster
  00023	83 f9 ff	 cmp	 ecx, -1
  00026	74 12		 je	 SHORT $LN6@GetMonster
$LN2@GetMonster:

; 177  : 	for( int i = 0; i < this->m_MonsterLoaded; i++ )

  00028	42		 inc	 edx
  00029	83 c0 14	 add	 eax, 20			; 00000014H
  0002c	3b d6		 cmp	 edx, esi
  0002e	7c e8		 jl	 SHORT $LL4@GetMonster
$LN12@GetMonster:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 190  : 	}
; 191  : 	// ----
; 192  : 	return -1;

  00032	83 c8 ff	 or	 eax, -1
  00035	5b		 pop	 ebx

; 193  : }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN6@GetMonster:
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 185  : 		{
; 186  : 			continue;
; 187  : 		}
; 188  : 		// ----
; 189  : 		return i;

  0003c	8b c2		 mov	 eax, edx
  0003e	5b		 pop	 ebx

; 193  : }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?GetMonsterSlot@ShopPointEx@@QAEHHH@Z ENDP		; ShopPointEx::GetMonsterSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?ReadData@ShopPointEx@@QAEXPAD@Z
_TEXT	SEGMENT
_lpInfo$1 = -12						; size = 8
_Category$1$ = -4					; size = 4
_File$ = 8						; size = 4
?ReadData@ShopPointEx@@QAEXPAD@Z PROC			; ShopPointEx::ReadData, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 62   : 	int Category;
; 63   : 	SMDToken Token;
; 64   : 	SMDFile = fopen(File, "r");

  00008	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _fopen
  00018	83 c4 08	 add	 esp, 8
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 65   : 	// ----
; 66   : 	if( !SMDFile )

  00020	85 c0		 test	 eax, eax
  00022	75 16		 jne	 SHORT $LN243@ReadData

; 67   : 	{
; 68   : 		MsgBox("[ShopPointEx] %s file not found", File);

  00024	56		 push	 esi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OOGNLOOF@?$FLShopPointEx?$FN?5?$CFs?5file?5not?5found?$AA@
  0002a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002f	83 c4 08	 add	 esp, 8
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 172  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN243@ReadData:

; 69   : 		return;
; 70   : 	}
; 71   : 	// ----
; 72   : 	while(true)
; 73   : 	{
; 74   : 		Token = GetToken();

  0003a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 		// ----
; 76   : 		if( Token == END )

  0003f	83 f8 02	 cmp	 eax, 2
  00042	0f 84 d3 02 00
	00		 je	 $LN250@ReadData
  00048	57		 push	 edi
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ReadData:

; 77   : 		{
; 78   : 			break;
; 79   : 		}
; 80   : 		// ----
; 81   : 		Category = TokenNumber;

  00050	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00058	89 45 fc	 mov	 DWORD PTR _Category$1$[ebp], eax
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@ReadData:

; 82   : 		// ----
; 83   : 		while(true)
; 84   : 		{
; 85   : 			if( Category == 0 )			//-> Time Bonus

  00060	85 c0		 test	 eax, eax
  00062	0f 85 86 00 00
	00		 jne	 $LN8@ReadData

; 86   : 			{
; 87   : 				Token = GetToken();

  00068	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 88   : 				// ----
; 89   : 				if( strcmp("end", TokenString) == 0 )

  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00072	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL256@ReadData:
  00077	8a 10		 mov	 dl, BYTE PTR [eax]
  00079	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0007b	75 1a		 jne	 SHORT $LN257@ReadData
  0007d	84 d2		 test	 dl, dl
  0007f	74 12		 je	 SHORT $LN258@ReadData
  00081	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00084	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00087	75 0e		 jne	 SHORT $LN257@ReadData
  00089	83 c0 02	 add	 eax, 2
  0008c	83 c1 02	 add	 ecx, 2
  0008f	84 d2		 test	 dl, dl
  00091	75 e4		 jne	 SHORT $LL256@ReadData
$LN258@ReadData:
  00093	33 c0		 xor	 eax, eax
  00095	eb 05		 jmp	 SHORT $LN259@ReadData
$LN257@ReadData:
  00097	1b c0		 sbb	 eax, eax
  00099	83 c8 01	 or	 eax, 1
$LN259@ReadData:
  0009c	85 c0		 test	 eax, eax
  0009e	0f 84 65 02 00
	00		 je	 $LN246@ReadData

; 90   : 				{
; 91   : 					break;
; 92   : 				}
; 93   : 				// ----
; 94   : #pragma warning (disable : 4800)
; 95   : 				this->m_TimeBonusOn = TokenNumber;

  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?TokenNumber@@3MA
  000ac	0f 57 c9	 xorps	 xmm1, xmm1
  000af	0f 2e c1	 ucomiss xmm0, xmm1
  000b2	9f		 lahf
  000b3	f6 c4 44	 test	 ah, 68			; 00000044H
  000b6	7b 04		 jnp	 SHORT $LN20@ReadData
  000b8	b0 01		 mov	 al, 1
  000ba	eb 02		 jmp	 SHORT $LN21@ReadData
$LN20@ReadData:
  000bc	32 c0		 xor	 al, al
$LN21@ReadData:
  000be	88 43 01	 mov	 BYTE PTR [ebx+1], al

; 96   : 				// ----
; 97   : 				Token = GetToken();

  000c1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 				this->m_TimeBonusAdd = TokenNumber;

  000c6	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000ce	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 99   : 				// ----
; 100  : 				Token = GetToken();

  000d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 				this->m_TimeBonusInterval = TokenNumber;

  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?TokenNumber@@3MA
  000de	e8 00 00 00 00	 call	 __ftoui3
  000e3	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _Category$1$[ebp]
  000e9	e9 72 ff ff ff	 jmp	 $LL4@ReadData
$LN8@ReadData:

; 102  : 
; 103  : 			}
; 104  : 			else if( Category == 1 )	//-> Event Bonus

  000ee	83 f8 01	 cmp	 eax, 1
  000f1	0f 85 85 00 00
	00		 jne	 $LN11@ReadData

; 105  : 			{
; 106  : 				Token = GetToken();

  000f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 				// ----
; 108  : 				if( strcmp("end", TokenString) == 0 )

  000fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00101	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL260@ReadData:
  00106	8a 10		 mov	 dl, BYTE PTR [eax]
  00108	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0010a	75 1a		 jne	 SHORT $LN261@ReadData
  0010c	84 d2		 test	 dl, dl
  0010e	74 12		 je	 SHORT $LN262@ReadData
  00110	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00113	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00116	75 0e		 jne	 SHORT $LN261@ReadData
  00118	83 c0 02	 add	 eax, 2
  0011b	83 c1 02	 add	 ecx, 2
  0011e	84 d2		 test	 dl, dl
  00120	75 e4		 jne	 SHORT $LL260@ReadData
$LN262@ReadData:
  00122	33 c0		 xor	 eax, eax
  00124	eb 05		 jmp	 SHORT $LN263@ReadData
$LN261@ReadData:
  00126	1b c0		 sbb	 eax, eax
  00128	83 c8 01	 or	 eax, 1
$LN263@ReadData:
  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 d6 01 00
	00		 je	 $LN246@ReadData

; 109  : 				{
; 110  : 					break;
; 111  : 				}
; 112  : 				// ----
; 113  : 				int Slot = TokenNumber;

  00133	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 114  : 				// ----
; 115  : 				Token = GetToken();

  0013b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 				this->m_EventBonus[Slot].AddCoinC = TokenNumber;

  00140	8d 34 7f	 lea	 esi, DWORD PTR [edi+edi*2]
  00143	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0014b	89 44 b3 10	 mov	 DWORD PTR [ebx+esi*4+16], eax

; 117  : 				// ----
; 118  : 				Token = GetToken();

  0014f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 				this->m_EventBonus[Slot].AddCoinP = TokenNumber;

  00154	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0015c	89 44 b3 14	 mov	 DWORD PTR [ebx+esi*4+20], eax

; 120  : 				// ----
; 121  : 				Token = GetToken();

  00160	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 				this->m_EventBonus[Slot].AddCoinG = TokenNumber;

  00165	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  0016d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00170	89 4c 83 18	 mov	 DWORD PTR [ebx+eax*4+24], ecx
  00174	8b 45 fc	 mov	 eax, DWORD PTR _Category$1$[ebp]
  00177	e9 e4 fe ff ff	 jmp	 $LL4@ReadData
$LN11@ReadData:

; 123  : 			}
; 124  : 			else if( Category == 2 )	//-> Monster Bonus

  0017c	83 f8 02	 cmp	 eax, 2
  0017f	0f 85 a8 00 00
	00		 jne	 $LN14@ReadData

; 125  : 			{
; 126  : 				Token = GetToken();

  00185	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 				// ----
; 128  : 				if( strcmp("end", TokenString) == 0 )

  0018a	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0018f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL264@ReadData:
  00194	8a 10		 mov	 dl, BYTE PTR [eax]
  00196	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00198	75 1a		 jne	 SHORT $LN265@ReadData
  0019a	84 d2		 test	 dl, dl
  0019c	74 12		 je	 SHORT $LN266@ReadData
  0019e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001a1	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001a4	75 0e		 jne	 SHORT $LN265@ReadData
  001a6	83 c0 02	 add	 eax, 2
  001a9	83 c1 02	 add	 ecx, 2
  001ac	84 d2		 test	 dl, dl
  001ae	75 e4		 jne	 SHORT $LL264@ReadData
$LN266@ReadData:
  001b0	33 c0		 xor	 eax, eax
  001b2	eb 05		 jmp	 SHORT $LN267@ReadData
$LN265@ReadData:
  001b4	1b c0		 sbb	 eax, eax
  001b6	83 c8 01	 or	 eax, 1
$LN267@ReadData:
  001b9	85 c0		 test	 eax, eax
  001bb	0f 84 48 01 00
	00		 je	 $LN246@ReadData

; 129  : 				{
; 130  : 					break;
; 131  : 				}
; 132  : 				// ----
; 133  : 				int Slot = this->m_MonsterLoaded;

  001c1	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]

; 134  : 				// ----
; 135  : 				this->m_MonsterBonus[Slot].MonsterID = TokenNumber;

  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?TokenNumber@@3MA
  001cc	8d 3c b6	 lea	 edi, DWORD PTR [esi+esi*4]
  001cf	e8 00 00 00 00	 call	 __ftoui3
  001d4	89 44 bb 70	 mov	 DWORD PTR [ebx+edi*4+112], eax

; 136  : 				// ----
; 137  : 				Token = GetToken();

  001d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 138  : 				this->m_MonsterBonus[Slot].MapNumber = TokenNumber;

  001dd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e5	89 44 bb 74	 mov	 DWORD PTR [ebx+edi*4+116], eax

; 139  : 				// ----
; 140  : 				Token = GetToken();

  001e9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 141  : 				this->m_MonsterBonus[Slot].AddCoinC = TokenNumber;

  001ee	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  001f6	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  001f9	89 4c 83 78	 mov	 DWORD PTR [ebx+eax*4+120], ecx

; 142  : 				// ----
; 143  : 				Token = GetToken();

  001fd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 144  : 				this->m_MonsterBonus[Slot].AddCoinP = TokenNumber;

  00202	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0020a	89 44 bb 7c	 mov	 DWORD PTR [ebx+edi*4+124], eax

; 145  : 				// ----
; 146  : 				Token = GetToken();

  0020e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 147  : 				this->m_MonsterBonus[Slot].AddCoinG = TokenNumber;

  00213	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0021b	89 84 bb 80 00
	00 00		 mov	 DWORD PTR [ebx+edi*4+128], eax

; 148  : 				// ----
; 149  : 				this->m_MonsterLoaded++;

  00222	ff 43 0c	 inc	 DWORD PTR [ebx+12]
  00225	8b 45 fc	 mov	 eax, DWORD PTR _Category$1$[ebp]
  00228	e9 33 fe ff ff	 jmp	 $LL4@ReadData
$LN14@ReadData:

; 150  : 			}
; 151  : 			else if( Category == 3 )

  0022d	83 f8 03	 cmp	 eax, 3
  00230	0f 85 2a fe ff
	ff		 jne	 $LL4@ReadData

; 152  : 			{
; 153  : 				Token = GetToken();

  00236	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 154  : 				// ----
; 155  : 				if( strcmp("end", TokenString) == 0 )

  0023b	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00240	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL268@ReadData:
  00245	8a 10		 mov	 dl, BYTE PTR [eax]
  00247	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00249	75 1a		 jne	 SHORT $LN269@ReadData
  0024b	84 d2		 test	 dl, dl
  0024d	74 12		 je	 SHORT $LN270@ReadData
  0024f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00252	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00255	75 0e		 jne	 SHORT $LN269@ReadData
  00257	83 c0 02	 add	 eax, 2
  0025a	83 c1 02	 add	 ecx, 2
  0025d	84 d2		 test	 dl, dl
  0025f	75 e4		 jne	 SHORT $LL268@ReadData
$LN270@ReadData:
  00261	33 c0		 xor	 eax, eax
  00263	eb 05		 jmp	 SHORT $LN271@ReadData
$LN269@ReadData:
  00265	1b c0		 sbb	 eax, eax
  00267	83 c8 01	 or	 eax, 1
$LN271@ReadData:
  0026a	85 c0		 test	 eax, eax
  0026c	0f 84 97 00 00
	00		 je	 $LN246@ReadData

; 156  : 				{
; 157  : 					break;
; 158  : 				}
; 159  : 				// ----
; 160  : 				SHOPPOINTEX_TIMEBONUS lpInfo;
; 161  : 				lpInfo.Hour = TokenNumber;

  00272	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0027a	66 89 45 f4	 mov	 WORD PTR _lpInfo$1[ebp], ax

; 162  : 				Token = GetToken();

  0027e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 163  : 				lpInfo.Bonus = TokenNumber;

  00283	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0028b	8b 83 74 50 00
	00		 mov	 eax, DWORD PTR [ebx+20596]
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 164  : 				m_TimeBonus.push_back(lpInfo);

  00291	8d b3 70 50 00
	00		 lea	 esi, DWORD PTR [ebx+20592]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00297	8d 4d f4	 lea	 ecx, DWORD PTR _lpInfo$1[ebp]
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 163  : 				lpInfo.Bonus = TokenNumber;

  0029a	89 7d f8	 mov	 DWORD PTR _lpInfo$1[ebp+4], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0029d	3b c8		 cmp	 ecx, eax
  0029f	73 3f		 jae	 SHORT $LN23@ReadData
  002a1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002a3	8d 55 f4	 lea	 edx, DWORD PTR _lpInfo$1[ebp]
  002a6	3b ca		 cmp	 ecx, edx
  002a8	77 36		 ja	 SHORT $LN23@ReadData

; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  002aa	8b fa		 mov	 edi, edx
  002ac	2b f9		 sub	 edi, ecx
  002ae	c1 ff 03	 sar	 edi, 3

; 1278 : 			if (this->_Mylast() == this->_Myend())

  002b1	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  002b4	75 09		 jne	 SHORT $LN25@ReadData

; 1279 : 				_Reserve(1);

  002b6	6a 01		 push	 1
  002b8	8b ce		 mov	 ecx, esi
  002ba	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
$LN25@ReadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  002bf	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  002c2	85 d2		 test	 edx, edx
  002c4	74 0e		 je	 SHORT $LN145@ReadData
  002c6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002c8	8b 04 f9	 mov	 eax, DWORD PTR [ecx+edi*8]
  002cb	89 02		 mov	 DWORD PTR [edx], eax
  002cd	8b 44 f9 04	 mov	 eax, DWORD PTR [ecx+edi*8+4]
  002d1	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN145@ReadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			++this->_Mylast();

  002d4	83 46 04 08	 add	 DWORD PTR [esi+4], 8

; 1284 : 			}
; 1285 : 		else

  002d8	8b 45 fc	 mov	 eax, DWORD PTR _Category$1$[ebp]
  002db	e9 80 fd ff ff	 jmp	 $LL4@ReadData
$LN23@ReadData:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  002e0	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  002e3	75 09		 jne	 SHORT $LN26@ReadData

; 1288 : 				_Reserve(1);

  002e5	6a 01		 push	 1
  002e7	8b ce		 mov	 ecx, esi
  002e9	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USHOPPOINTEX_TIMEBONUS@@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@IAEXI@Z ; std::vector<SHOPPOINTEX_TIMEBONUS,std::allocator<SHOPPOINTEX_TIMEBONUS> >::_Reserve
$LN26@ReadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  002ee	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002f1	85 c9		 test	 ecx, ecx
  002f3	74 08		 je	 SHORT $LN226@ReadData
  002f5	8b 45 f4	 mov	 eax, DWORD PTR _lpInfo$1[ebp]
  002f8	89 01		 mov	 DWORD PTR [ecx], eax
  002fa	89 79 04	 mov	 DWORD PTR [ecx+4], edi
$LN226@ReadData:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  002fd	83 46 04 08	 add	 DWORD PTR [esi+4], 8
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 166  : 		}

  00301	8b 45 fc	 mov	 eax, DWORD PTR _Category$1$[ebp]
  00304	e9 57 fd ff ff	 jmp	 $LL4@ReadData
$LN246@ReadData:

; 69   : 		return;
; 70   : 	}
; 71   : 	// ----
; 72   : 	while(true)
; 73   : 	{
; 74   : 		Token = GetToken();

  00309	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 75   : 		// ----
; 76   : 		if( Token == END )

  0030e	83 f8 02	 cmp	 eax, 2
  00311	0f 85 39 fd ff
	ff		 jne	 $LL2@ReadData
  00317	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]
  0031a	5f		 pop	 edi
$LN250@ReadData:

; 167  : 	}
; 168  : 	// ----
; 169  : 	this->m_IsLoaded = true;
; 170  : 	LogAddTD("[ShopPointEx] [%s] File is loaded (Monsters: %d)", File, this->m_MonsterLoaded);

  0031b	ff 73 0c	 push	 DWORD PTR [ebx+12]
  0031e	c6 03 01	 mov	 BYTE PTR [ebx], 1
  00321	56		 push	 esi
  00322	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@LKIBCCDC@?$FLShopPointEx?$FN?5?$FL?$CFs?$FN?5File?5is?5loade@
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 171  : 	fclose(SMDFile);

  0032d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00333	e8 00 00 00 00	 call	 _fclose
  00338	83 c4 10	 add	 esp, 16			; 00000010H
  0033b	5e		 pop	 esi
  0033c	5b		 pop	 ebx

; 172  : }

  0033d	8b e5		 mov	 esp, ebp
  0033f	5d		 pop	 ebp
  00340	c2 04 00	 ret	 4
?ReadData@ShopPointEx@@QAEXPAD@Z ENDP			; ShopPointEx::ReadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?Load@ShopPointEx@@QAEXXZ
_TEXT	SEGMENT
?Load@ShopPointEx@@QAEXXZ PROC				; ShopPointEx::Load, COMDAT
; _this$ = ecx

; 54   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 55   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@ShopPointEx@@QAEXXZ ; ShopPointEx::Init

; 56   : 	this->ReadData(gDirPath.GetNewPath("Custom\\ShopPointEx.txt"));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HHIFLGJO@Custom?2ShopPointEx?4txt?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?ReadData@ShopPointEx@@QAEXPAD@Z ; ShopPointEx::ReadData
  0001f	5e		 pop	 esi

; 57   : }

  00020	c3		 ret	 0
?Load@ShopPointEx@@QAEXXZ ENDP				; ShopPointEx::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?Init@ShopPointEx@@QAEXXZ
_TEXT	SEGMENT
?Init@ShopPointEx@@QAEXXZ PROC				; ShopPointEx::Init, COMDAT
; _this$ = ecx

; 28   : 	this->m_IsLoaded			= false;

  00000	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0
  00005	8d 41 74	 lea	 eax, DWORD PTR [ecx+116]

; 29   : 	this->m_TimeBonusOn			= false;
; 30   : 	this->m_TimeBonusAdd		= 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H

; 31   : 	this->m_TimeBonusInterval	= 0;

  00014	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 32   : 	this->m_MonsterLoaded		= 0;

  0001b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 33   : 	// ----
; 34   : 	for( int i = 0; i < MAX_SHOPPOINTEX_EVENT; i++ )
; 35   : 	{
; 36   : 		this->m_EventBonus[i].AddCoinC	= 0;

  00022	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 37   : 		this->m_EventBonus[i].AddCoinP	= 0;

  00029	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 38   : 		this->m_EventBonus[i].AddCoinG	= 0;

  00030	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00037	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0003e	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00045	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0004c	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00053	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0005a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00061	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00068	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0006f	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00076	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  0007d	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00084	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  0008b	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00092	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00099	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  000a0	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
  000a7	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0
  000ae	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0
  000b5	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0
  000bc	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0
  000c3	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
  000ca	66 0f 1f 44 00
	00		 npad	 6
$LL7@Init:

; 39   : 	}
; 40   : 	// ----
; 41   : 	for(int i = 0; i < MAX_SHOPPOINTEX_MONSTER; i++ )
; 42   : 	{
; 43   : 		this->m_MonsterBonus[i].MonsterID	= -1;

  000d0	c7 40 fc ff ff
	ff ff		 mov	 DWORD PTR [eax-4], -1
  000d7	8d 40 14	 lea	 eax, DWORD PTR [eax+20]

; 44   : 		this->m_MonsterBonus[i].MapNumber	= -1;

  000da	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 45   : 		this->m_MonsterBonus[i].AddCoinC	= 0;

  000e1	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 46   : 		this->m_MonsterBonus[i].AddCoinP	= 0;

  000e8	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 47   : 		this->m_MonsterBonus[i].AddCoinG	= 0;

  000ef	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0
  000f6	83 ea 01	 sub	 edx, 1
  000f9	75 d5		 jne	 SHORT $LL7@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  000fb	8b 81 70 50 00
	00		 mov	 eax, DWORD PTR [ecx+20592]
  00101	89 81 74 50 00
	00		 mov	 DWORD PTR [ecx+20596], eax
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 50   : }

  00107	c3		 ret	 0
?Init@ShopPointEx@@QAEXXZ ENDP				; ShopPointEx::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ??1ShopPointEx@@QAE@XZ
_TEXT	SEGMENT
??1ShopPointEx@@QAE@XZ PROC				; ShopPointEx::~ShopPointEx, COMDAT
; _this$ = ecx

; 21   : {

  00000	56		 push	 esi

; 23   : }

  00001	8d b1 70 50 00
	00		 lea	 esi, DWORD PTR [ecx+20592]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 25		 je	 SHORT $LN7@ShopPointE

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0000d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00010	2b c1		 sub	 eax, ecx
  00012	c1 f8 03	 sar	 eax, 3
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USHOPPOINTEX_TIMEBONUS@@@std@@@std@@QAEXPAUSHOPPOINTEX_TIMEBONUS@@I@Z ; std::_Wrap_alloc<std::allocator<SHOPPOINTEX_TIMEBONUS> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00024	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  0002b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@ShopPointE:
  00032	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 23   : }

  00033	c3		 ret	 0
??1ShopPointEx@@QAE@XZ ENDP				; ShopPointEx::~ShopPointEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ??0ShopPointEx@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ShopPointEx@@QAE@XZ PROC				; ShopPointEx::ShopPointEx, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000a	c7 86 70 50 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+20592], 0

; 481  : 		_Mylast = pointer();

  00014	c7 86 74 50 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+20596], 0

; 482  : 		_Myend = pointer();

  0001e	c7 86 78 50 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+20600], 0
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp

; 16   : 	this->Init();

  00028	e8 00 00 00 00	 call	 ?Init@ShopPointEx@@QAEXXZ ; ShopPointEx::Init

; 17   : }

  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??0ShopPointEx@@QAE@XZ ENDP				; ShopPointEx::ShopPointEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 301  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shoppointex.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 301  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
