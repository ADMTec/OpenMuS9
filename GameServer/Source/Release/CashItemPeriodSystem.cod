; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CashItemPeriodSystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bRunningPeriodCheckThread@@3HA		; g_bRunningPeriodCheckThread
_BSS	SEGMENT
?g_bRunningPeriodCheckThread@@3HA DD 01H DUP (?)	; g_bRunningPeriodCheckThread
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CCashItemPeriodSystem@@QAE@XZ		; CCashItemPeriodSystem::CCashItemPeriodSystem
PUBLIC	??1CCashItemPeriodSystem@@UAE@XZ		; CCashItemPeriodSystem::~CCashItemPeriodSystem
PUBLIC	?Initialize@CCashItemPeriodSystem@@QAEXXZ	; CCashItemPeriodSystem::Initialize
PUBLIC	?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetUserPeriodItemList
PUBLIC	?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect
PUBLIC	?ClearPeriodItem@CCashItemPeriodSystem@@QAEEPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItem
PUBLIC	?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
PUBLIC	?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList
PUBLIC	?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::GDReqPeriodItemInsert
PUBLIC	?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
PUBLIC	?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
PUBLIC	?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemList
PUBLIC	?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
PUBLIC	?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
PUBLIC	?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
PUBLIC	?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CCashItemPeriodSystem::GDReqPeriodItemDelete
PUBLIC	?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
PUBLIC	?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
PUBLIC	?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ; CCashItemPeriodSystem::CalcItemUseLeftTime
PUBLIC	?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime
PUBLIC	?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime
PUBLIC	?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ; CCashItemPeriodSystem::ConvertTimeToString
PUBLIC	?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::CheckMoveMapBoundItem
PUBLIC	?GetPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GetPeriodInfo
PUBLIC	?SavePeriodInfo@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::SavePeriodInfo
PUBLIC	?_SetItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::_SetItemEffect
PUBLIC	?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z	; CCashItemPeriodSystem::GetEffectNumber
PUBLIC	?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
PUBLIC	??_GCCashItemPeriodSystem@@UAEPAXI@Z		; CCashItemPeriodSystem::`scalar deleting destructor'
PUBLIC	??_7CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`vftable'
PUBLIC	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
PUBLIC	??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ ; `string'
PUBLIC	??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ ; `string'
PUBLIC	??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ ; `string'
PUBLIC	??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ ; `string'
PUBLIC	??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ ; `string'
PUBLIC	??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ ; `string'
PUBLIC	??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ ; `string'
PUBLIC	??_R4CCashItemPeriodSystem@@6B@			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashItemPeriodSystem@@@8		; CCashItemPeriodSystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashItemPeriodSystem@@8			; CCashItemPeriodSystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashItemPeriodSystem@@8		; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_strtok:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_atoi:PROC
EXTRN	__localtime64_s:PROC
EXTRN	__mktime64:PROC
EXTRN	__time64:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	??_ECCashItemPeriodSystem@@UAEPAXI@Z:PROC	; CCashItemPeriodSystem::`vector deleting destructor'
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::SetItemEffect
EXTRN	?ClearItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z:PROC ; CItemAddOption::ClearItemEffect
EXTRN	?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z:PROC ; CItemAddOption::SearchItemEffectType
EXTRN	?SearchItemOption@CItemAddOption@@QAEHH@Z:PROC	; CItemAddOption::SearchItemOption
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjAddBuffEffect
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	?g_ItemAddOption@@3VCItemAddOption@@A:BYTE	; g_ItemAddOption
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A DB 082dccH DUP (?) ; g_CashItemPeriodSystem
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CashItemPeriodSystem$initializer$@@3P6AXXZA DD FLAT:??__Eg_CashItemPeriodSystem@@YAXXZ ; g_CashItemPeriodSystem$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashItemPeriodSystem@@8 DD FLAT:??_R0?AVCCashItemPeriodSystem@@@8 ; CCashItemPeriodSystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R2CCashItemPeriodSystem@@8 DD FLAT:??_R1A@?0A@EA@CCashItemPeriodSystem@@8 ; CCashItemPeriodSystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashItemPeriodSystem@@8
rdata$r	SEGMENT
??_R3CCashItemPeriodSystem@@8 DD 00H			; CCashItemPeriodSystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashItemPeriodSystem@@@8
data$r	SEGMENT
??_R0?AVCCashItemPeriodSystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashItemPeriodSystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashItemPeriodSystem@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCashItemPeriodSystem@@6B@
rdata$r	SEGMENT
??_R4CCashItemPeriodSystem@@6B@ DD 00H			; CCashItemPeriodSystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashItemPeriodSystem@@@8
	DD	FLAT:??_R3CCashItemPeriodSystem@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
CONST	SEGMENT
??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@ DB '[Cas'
	DB	'hShop][PeriodItemDelete Ans] - ID : %s, Name : %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Result %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
CONST	SEGMENT
??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, N'
	DB	'ame : %s, ItemCode : %d, Result : %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
CONST	SEGMENT
??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTim'
	DB	'e : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@
CONST	SEGMENT
??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@ DB '[C'
	DB	'ashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, It'
	DB	'emCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, Use'
	DB	'Time : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item usedtime is over '
	DB	'ID : %s, Name : %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
CONST	SEGMENT
??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : '
	DB	'%s, Name : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
CONST	SEGMENT
??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@ DB '[CashS'
	DB	'hop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemC'
	DB	'ode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
CONST	SEGMENT
??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, I'
	DB	'temCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
CONST	SEGMENT
??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@ DB '[Ca'
	DB	'shShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode '
	DB	': %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@ DB '%d-%d-%d %d:'
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
CONST	SEGMENT
??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@ DB 'CreateT'
	DB	'hread() failed with error %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CCashItemPeriodSystem@@6B@
CONST	SEGMENT
??_7CCashItemPeriodSystem@@6B@ DD FLAT:??_R4CCashItemPeriodSystem@@6B@ ; CCashItemPeriodSystem::`vftable'
	DD	FLAT:??_ECCashItemPeriodSystem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CashItemPeriodSystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashItemPeriodSystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00005	e9 00 00 00 00	 jmp	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
??__Fg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ??__Eg_CashItemPeriodSystem@@YAXXZ
text$di	SEGMENT
??__Eg_CashItemPeriodSystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashItemPeriodSystem'', COMDAT

; 14   : CCashItemPeriodSystem g_CashItemPeriodSystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00005	e8 00 00 00 00	 call	 ??0CCashItemPeriodSystem@@QAE@XZ ; CCashItemPeriodSystem::CCashItemPeriodSystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CashItemPeriodSystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashItemPeriodSystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CashItemPeriodSystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashItemPeriodSystem''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCashItemPeriodSystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z PROC		; CCashItemPeriodSystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCashItemPeriodSystem@@UAE@XZ ; CCashItemPeriodSystem::~CCashItemPeriodSystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 cc 2d 08 00	 push	 536012			; 00082dccH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCashItemPeriodSystem@@UAEPAXI@Z ENDP		; CCashItemPeriodSystem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z
_TEXT	SEGMENT
_dwTick$1$ = -12					; size = 4
tv737 = -8						; size = 4
tv738 = -4						; size = 4
_lpPeriodInfo$ = 8					; size = 4
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z PROC	; CCashItemPeriodSystem::PeriodCheckThread, COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 73   : 	ITEMPERIOD_INFO * lpPeriodItem = (ITEMPERIOD_INFO *)lpPeriodInfo;
; 74   : 	int i = 0;
; 75   : 	DWORD dwTick = 0;

  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0000e	33 db		 xor	 ebx, ebx
  00010	57		 push	 edi
$LL2@PeriodChec:

; 76   : 	LPOBJ lpObj = NULL;
; 77   : 	DWORD dwTick2 = 0;
; 78   : 	int n = 0;
; 79   : 
; 80   : 	while( true )
; 81   : 	{
; 82   : 		if( (GetTickCount() - dwTick) > 10000)

  00011	ff d6		 call	 esi
  00013	2b c3		 sub	 eax, ebx
  00015	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  0001a	0f 86 98 00 00
	00		 jbe	 $LN10@PeriodChec

; 83   : 		{
; 84   : 			dwTick = GetTickCount();

  00020	ff d6		 call	 esi
  00022	8b 7d 08	 mov	 edi, DWORD PTR _lpPeriodInfo$[ebp]
  00025	bb e8 03 00 00	 mov	 ebx, 1000		; 000003e8H
  0002a	83 c7 08	 add	 edi, 8
  0002d	89 45 f4	 mov	 DWORD PTR _dwTick$1$[ebp], eax
  00030	89 7d fc	 mov	 DWORD PTR tv738[ebp], edi
  00033	89 5d f8	 mov	 DWORD PTR tv737[ebp], ebx
$LL6@PeriodChec:

; 86   : 			{
; 87   : 				if(lpPeriodItem[i].btUsedInfo == TRUE)

  00036	80 7f f8 01	 cmp	 BYTE PTR [edi-8], 1
  0003a	75 63		 jne	 SHORT $LN4@PeriodChec

; 88   : 				{
; 89   : 					dwTick2 = GetTickCount() - lpPeriodItem[i].dwTickCount;

  0003c	ff d6		 call	 esi
  0003e	2b 07		 sub	 eax, DWORD PTR [edi]

; 90   : 					if(dwTick2 > 60000)

  00040	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  00045	76 58		 jbe	 SHORT $LN4@PeriodChec

; 91   : 					{
; 92   : 						lpPeriodItem[i].dwTickCount = GetTickCount();

  00047	ff d6		 call	 esi
  00049	89 07		 mov	 DWORD PTR [edi], eax
  0004b	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]

; 93   : 						for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  0004e	33 db		 xor	 ebx, ebx
$LL9@PeriodChec:

; 94   : 						{
; 95   : 							if(lpPeriodItem[i].ItemPeriod[n].btUsedItem == TRUE)

  00050	80 7e f4 01	 cmp	 BYTE PTR [esi-12], 1
  00054	75 37		 jne	 SHORT $LN7@PeriodChec

; 96   : 							{
; 97   : 								lpPeriodItem[i].ItemPeriod[n].iItemPeriodLeftTime--;

  00056	ff 0e		 dec	 DWORD PTR [esi]

; 98   : 								lpPeriodItem[i].ItemPeriod[n].iItemPeriodUsedTime++;

  00058	ff 46 fc	 inc	 DWORD PTR [esi-4]

; 99   : 								if(lpPeriodItem[i].ItemPeriod[n].iItemPeriodLeftTime <= 0)

  0005b	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0005e	77 2d		 ja	 SHORT $LN7@PeriodChec

; 100  : 								{
; 101  : 									lpObj = &gObj[lpPeriodItem[i].iUserIndex];

  00060	0f b7 47 fa	 movzx	 eax, WORD PTR [edi-6]

; 102  : 									g_CashItemPeriodSystem.GDReqPeriodItemUpdate(lpObj,n);

  00064	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00069	69 f8 40 27 00
	00		 imul	 edi, eax, 10048
  0006f	53		 push	 ebx
  00070	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate

; 103  : 									g_CashItemPeriodSystem.ClearPeriodItemEffect(lpObj,lpPeriodItem[i].ItemPeriod[n].iItemCode);

  0007c	ff 76 f8	 push	 DWORD PTR [esi-8]
  0007f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
  0008a	8b 7d fc	 mov	 edi, DWORD PTR tv738[ebp]
$LN7@PeriodChec:

; 93   : 						for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  0008d	43		 inc	 ebx
  0008e	83 c6 10	 add	 esi, 16			; 00000010H
  00091	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00094	7c ba		 jl	 SHORT $LL9@PeriodChec
  00096	8b 5d f8	 mov	 ebx, DWORD PTR tv737[ebp]
  00099	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
$LN4@PeriodChec:

; 85   : 			for(i = 0; i < MAX_ITEM_PERIOD_INFO; i++)

  0009f	81 c7 18 02 00
	00		 add	 edi, 536		; 00000218H
  000a5	83 eb 01	 sub	 ebx, 1
  000a8	89 7d fc	 mov	 DWORD PTR tv738[ebp], edi
  000ab	89 5d f8	 mov	 DWORD PTR tv737[ebp], ebx
  000ae	75 86		 jne	 SHORT $LL6@PeriodChec

; 104  : 								}
; 105  : 							}
; 106  : 						}
; 107  : 					}
; 108  : 				}
; 109  : 			}
; 110  : 		}
; 111  : 		else

  000b0	8b 5d f4	 mov	 ebx, DWORD PTR _dwTick$1$[ebp]
  000b3	e9 59 ff ff ff	 jmp	 $LL2@PeriodChec
$LN10@PeriodChec:

; 112  : 		{
; 113  : 			Sleep(10);

  000b8	6a 0a		 push	 10			; 0000000aH
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 114  : 		}
; 115  : 	}

  000c0	e9 4c ff ff ff	 jmp	 $LL2@PeriodChec
?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ENDP	; CCashItemPeriodSystem::PeriodCheckThread
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z
_TEXT	SEGMENT
_iItemCode$ = 8						; size = 4
?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z PROC	; CCashItemPeriodSystem::GetEffectNumber, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 	int BuffNumber = 0;
; 309  : 
; 310  : 	switch( iItemCode )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iItemCode$[ebp]
  00006	3d 48 1c 00 00	 cmp	 eax, 7240		; 00001c48H
  0000b	0f 8f a0 00 00
	00		 jg	 $LN32@GetEffectN
  00011	0f 84 91 00 00
	00		 je	 $LN17@GetEffectN
  00017	05 d5 e5 ff ff	 add	 eax, -6699		; ffffe5d5H
  0001c	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  0001f	0f 87 10 01 00
	00		 ja	 $LN30@GetEffectN
  00025	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN33@GetEffectN[eax]
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN36@GetEffectN[eax*4]
$LN4@GetEffectN:

; 311  : 	{
; 312  : 	
; 313  : 	case ITEMGET(13,43):	BuffNumber = 40;	break;

  00033	b8 28 00 00 00	 mov	 eax, 40			; 00000028H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN5@GetEffectN:

; 314  : 	case ITEMGET(13,44):	BuffNumber = 41;	break;

  0003c	b8 29 00 00 00	 mov	 eax, 41			; 00000029H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@GetEffectN:

; 315  : 	case ITEMGET(13,45):	BuffNumber = 42;	break;

  00045	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN7@GetEffectN:

; 316  : 	case ITEMGET(13,59):	BuffNumber = 43;	break;

  0004e	b8 2b 00 00 00	 mov	 eax, 43			; 0000002bH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN8@GetEffectN:

; 317  : 	case ITEMGET(13,62):	BuffNumber = 87;	break;

  00057	b8 57 00 00 00	 mov	 eax, 87			; 00000057H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN9@GetEffectN:

; 318  : 	case ITEMGET(13,63):	BuffNumber = 88;	break;

  00060	b8 58 00 00 00	 mov	 eax, 88			; 00000058H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN10@GetEffectN:

; 319  : 	case ITEMGET(13,81):	BuffNumber = 99;	break;

  00069	b8 63 00 00 00	 mov	 eax, 99			; 00000063H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN11@GetEffectN:

; 320  : 	case ITEMGET(13,82):	BuffNumber = 100;	break;

  00072	b8 64 00 00 00	 mov	 eax, 100		; 00000064H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN12@GetEffectN:

; 321  : 	case ITEMGET(13,93):	BuffNumber = 101;	break;

  0007b	b8 65 00 00 00	 mov	 eax, 101		; 00000065H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN13@GetEffectN:

; 322  : 	case ITEMGET(13,94):	BuffNumber = 102;	break;

  00084	b8 66 00 00 00	 mov	 eax, 102		; 00000066H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN14@GetEffectN:

; 323  : 	case ITEMGET(13,95):	BuffNumber = 103;	break;

  0008d	b8 67 00 00 00	 mov	 eax, 103		; 00000067H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN15@GetEffectN:

; 324  : 	case ITEMGET(13,104):	BuffNumber = 113;	break;

  00096	b8 71 00 00 00	 mov	 eax, 113		; 00000071H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN16@GetEffectN:

; 325  : 	case ITEMGET(13,105):	BuffNumber = 114;	break;

  0009f	b8 72 00 00 00	 mov	 eax, 114		; 00000072H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN17@GetEffectN:

; 326  : 	case ITEMGET(14,72):	BuffNumber = 44;	break;

  000a8	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN32@GetEffectN:

; 308  : 	int BuffNumber = 0;
; 309  : 
; 310  : 	switch( iItemCode )

  000b1	05 b7 e3 ff ff	 add	 eax, -7241		; ffffe3b7H
  000b6	83 f8 19	 cmp	 eax, 25			; 00000019H
  000b9	77 7a		 ja	 SHORT $LN30@GetEffectN
  000bb	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN34@GetEffectN[eax]
  000c2	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN37@GetEffectN[eax*4]
$LN18@GetEffectN:

; 327  : 	case ITEMGET(14,74):	BuffNumber = 46;	break;

  000c9	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
$LN19@GetEffectN:

; 328  : 	case ITEMGET(14,73):	BuffNumber = 45;	break;

  000d2	b8 2d 00 00 00	 mov	 eax, 45			; 0000002dH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
$LN20@GetEffectN:

; 329  : 	case ITEMGET(14,75):	BuffNumber = 47;	break;

  000db	b8 2f 00 00 00	 mov	 eax, 47			; 0000002fH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
$LN21@GetEffectN:

; 330  : 	case ITEMGET(14,76):	BuffNumber = 48;	break;

  000e4	b8 30 00 00 00	 mov	 eax, 48			; 00000030H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
$LN22@GetEffectN:

; 331  : 	case ITEMGET(14,77):	BuffNumber = 49;	break;

  000ed	b8 31 00 00 00	 mov	 eax, 49			; 00000031H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
$LN23@GetEffectN:

; 332  : 	case ITEMGET(14,78):	BuffNumber = 50;	break;

  000f6	b8 32 00 00 00	 mov	 eax, 50			; 00000032H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  000fb	5d		 pop	 ebp
  000fc	c2 04 00	 ret	 4
$LN24@GetEffectN:

; 333  : 	case ITEMGET(14,79):	BuffNumber = 51;	break;

  000ff	b8 33 00 00 00	 mov	 eax, 51			; 00000033H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
$LN25@GetEffectN:

; 334  : 	case ITEMGET(14,80):	BuffNumber = 52;	break;

  00108	b8 34 00 00 00	 mov	 eax, 52			; 00000034H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0010d	5d		 pop	 ebp
  0010e	c2 04 00	 ret	 4
$LN26@GetEffectN:

; 335  : 	case ITEMGET(14,81):	BuffNumber = 53;	break;

  00111	b8 35 00 00 00	 mov	 eax, 53			; 00000035H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN27@GetEffectN:

; 336  : 	case ITEMGET(14,82):	BuffNumber = 54;	break;

  0011a	b8 36 00 00 00	 mov	 eax, 54			; 00000036H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  0011f	5d		 pop	 ebp
  00120	c2 04 00	 ret	 4
$LN28@GetEffectN:

; 337  : 	case ITEMGET(14,97):	BuffNumber = 89;	break;

  00123	b8 59 00 00 00	 mov	 eax, 89			; 00000059H

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00128	5d		 pop	 ebp
  00129	c2 04 00	 ret	 4
$LN29@GetEffectN:

; 338  : 	case ITEMGET(14,98):	BuffNumber = 90;	break;

  0012c	b8 5a 00 00 00	 mov	 eax, 90			; 0000005aH

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
$LN30@GetEffectN:

; 339  : 		default:
; 340  : 		BuffNumber = 0;	break;

  00135	33 c0		 xor	 eax, eax

; 341  : 	}
; 342  : 	return BuffNumber;
; 343  : }

  00137	5d		 pop	 ebp
  00138	c2 04 00	 ret	 4
  0013b	90		 npad	 1
$LN36@GetEffectN:
  0013c	00 00 00 00	 DD	 $LN4@GetEffectN
  00140	00 00 00 00	 DD	 $LN5@GetEffectN
  00144	00 00 00 00	 DD	 $LN6@GetEffectN
  00148	00 00 00 00	 DD	 $LN7@GetEffectN
  0014c	00 00 00 00	 DD	 $LN8@GetEffectN
  00150	00 00 00 00	 DD	 $LN9@GetEffectN
  00154	00 00 00 00	 DD	 $LN10@GetEffectN
  00158	00 00 00 00	 DD	 $LN11@GetEffectN
  0015c	00 00 00 00	 DD	 $LN12@GetEffectN
  00160	00 00 00 00	 DD	 $LN13@GetEffectN
  00164	00 00 00 00	 DD	 $LN14@GetEffectN
  00168	00 00 00 00	 DD	 $LN15@GetEffectN
  0016c	00 00 00 00	 DD	 $LN16@GetEffectN
  00170	00 00 00 00	 DD	 $LN30@GetEffectN
$LN33@GetEffectN:
  00174	00		 DB	 0
  00175	01		 DB	 1
  00176	02		 DB	 2
  00177	0d		 DB	 13			; 0000000dH
  00178	0d		 DB	 13			; 0000000dH
  00179	0d		 DB	 13			; 0000000dH
  0017a	0d		 DB	 13			; 0000000dH
  0017b	0d		 DB	 13			; 0000000dH
  0017c	0d		 DB	 13			; 0000000dH
  0017d	0d		 DB	 13			; 0000000dH
  0017e	0d		 DB	 13			; 0000000dH
  0017f	0d		 DB	 13			; 0000000dH
  00180	0d		 DB	 13			; 0000000dH
  00181	0d		 DB	 13			; 0000000dH
  00182	0d		 DB	 13			; 0000000dH
  00183	0d		 DB	 13			; 0000000dH
  00184	03		 DB	 3
  00185	0d		 DB	 13			; 0000000dH
  00186	0d		 DB	 13			; 0000000dH
  00187	04		 DB	 4
  00188	05		 DB	 5
  00189	0d		 DB	 13			; 0000000dH
  0018a	0d		 DB	 13			; 0000000dH
  0018b	0d		 DB	 13			; 0000000dH
  0018c	0d		 DB	 13			; 0000000dH
  0018d	0d		 DB	 13			; 0000000dH
  0018e	0d		 DB	 13			; 0000000dH
  0018f	0d		 DB	 13			; 0000000dH
  00190	0d		 DB	 13			; 0000000dH
  00191	0d		 DB	 13			; 0000000dH
  00192	0d		 DB	 13			; 0000000dH
  00193	0d		 DB	 13			; 0000000dH
  00194	0d		 DB	 13			; 0000000dH
  00195	0d		 DB	 13			; 0000000dH
  00196	0d		 DB	 13			; 0000000dH
  00197	0d		 DB	 13			; 0000000dH
  00198	0d		 DB	 13			; 0000000dH
  00199	0d		 DB	 13			; 0000000dH
  0019a	06		 DB	 6
  0019b	07		 DB	 7
  0019c	0d		 DB	 13			; 0000000dH
  0019d	0d		 DB	 13			; 0000000dH
  0019e	0d		 DB	 13			; 0000000dH
  0019f	0d		 DB	 13			; 0000000dH
  001a0	0d		 DB	 13			; 0000000dH
  001a1	0d		 DB	 13			; 0000000dH
  001a2	0d		 DB	 13			; 0000000dH
  001a3	0d		 DB	 13			; 0000000dH
  001a4	0d		 DB	 13			; 0000000dH
  001a5	0d		 DB	 13			; 0000000dH
  001a6	08		 DB	 8
  001a7	09		 DB	 9
  001a8	0a		 DB	 10			; 0000000aH
  001a9	0d		 DB	 13			; 0000000dH
  001aa	0d		 DB	 13			; 0000000dH
  001ab	0d		 DB	 13			; 0000000dH
  001ac	0d		 DB	 13			; 0000000dH
  001ad	0d		 DB	 13			; 0000000dH
  001ae	0d		 DB	 13			; 0000000dH
  001af	0d		 DB	 13			; 0000000dH
  001b0	0d		 DB	 13			; 0000000dH
  001b1	0b		 DB	 11			; 0000000bH
  001b2	0c		 DB	 12			; 0000000cH
  001b3	90		 npad	 1
$LN37@GetEffectN:
  001b4	00 00 00 00	 DD	 $LN19@GetEffectN
  001b8	00 00 00 00	 DD	 $LN18@GetEffectN
  001bc	00 00 00 00	 DD	 $LN20@GetEffectN
  001c0	00 00 00 00	 DD	 $LN21@GetEffectN
  001c4	00 00 00 00	 DD	 $LN22@GetEffectN
  001c8	00 00 00 00	 DD	 $LN23@GetEffectN
  001cc	00 00 00 00	 DD	 $LN24@GetEffectN
  001d0	00 00 00 00	 DD	 $LN25@GetEffectN
  001d4	00 00 00 00	 DD	 $LN26@GetEffectN
  001d8	00 00 00 00	 DD	 $LN27@GetEffectN
  001dc	00 00 00 00	 DD	 $LN28@GetEffectN
  001e0	00 00 00 00	 DD	 $LN29@GetEffectN
  001e4	00 00 00 00	 DD	 $LN30@GetEffectN
$LN34@GetEffectN:
  001e8	00		 DB	 0
  001e9	01		 DB	 1
  001ea	02		 DB	 2
  001eb	03		 DB	 3
  001ec	04		 DB	 4
  001ed	05		 DB	 5
  001ee	06		 DB	 6
  001ef	07		 DB	 7
  001f0	08		 DB	 8
  001f1	09		 DB	 9
  001f2	0c		 DB	 12			; 0000000cH
  001f3	0c		 DB	 12			; 0000000cH
  001f4	0c		 DB	 12			; 0000000cH
  001f5	0c		 DB	 12			; 0000000cH
  001f6	0c		 DB	 12			; 0000000cH
  001f7	0c		 DB	 12			; 0000000cH
  001f8	0c		 DB	 12			; 0000000cH
  001f9	0c		 DB	 12			; 0000000cH
  001fa	0c		 DB	 12			; 0000000cH
  001fb	0c		 DB	 12			; 0000000cH
  001fc	0c		 DB	 12			; 0000000cH
  001fd	0c		 DB	 12			; 0000000cH
  001fe	0c		 DB	 12			; 0000000cH
  001ff	0c		 DB	 12			; 0000000cH
  00200	0a		 DB	 10			; 0000000aH
  00201	0b		 DB	 11			; 0000000bH
?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z ENDP	; CCashItemPeriodSystem::GetEffectNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?_SetItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iValidTime$ = 16					; size = 4
?_SetItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::_SetItemEffect, COMDAT
; _this$ = ecx

; 276  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 277  : 	int bSuccess = FALSE;
; 278  : 	int BuffNumber = 0;
; 279  : 
; 280  : 	BuffNumber = GetEffectNumber(iItemCode);

  00004	8b 75 0c	 mov	 esi, DWORD PTR _iItemCode$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetEffectNumber
  0000e	8b f8		 mov	 edi, eax

; 281  : 
; 282  : 	if( BuffNumber != 0 )

  00010	85 ff		 test	 edi, edi
  00012	74 39		 je	 SHORT $LN4@SetItemEff

; 283  : 	{
; 284  : 		int iTime = iValidTime * 60;

  00014	8b 55 10	 mov	 edx, DWORD PTR _iValidTime$[ebp]
  00017	c1 e2 04	 shl	 edx, 4
  0001a	2b 55 10	 sub	 edx, DWORD PTR _iValidTime$[ebp]
  0001d	53		 push	 ebx

; 285  : 		bSuccess = gObjAddBuffEffect(lpObj,BuffNumber,iTime);

  0001e	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00021	c1 e2 02	 shl	 edx, 2
  00024	52		 push	 edx
  00025	57		 push	 edi
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z ; gObjAddBuffEffect

; 286  : 
; 287  : 		switch(BuffNumber)

  0002c	8d 4f ce	 lea	 ecx, DWORD PTR [edi-50]
  0002f	0f b6 f0	 movzx	 esi, al
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	83 f9 04	 cmp	 ecx, 4
  00038	77 0a		 ja	 SHORT $LN8@SetItemEff

; 288  : 		{
; 289  : 		case 50:
; 290  : 		case 51:
; 291  : 		case 52:
; 292  : 		case 53:
; 293  : 		case 54:
; 294  : 			gObjCalCharacter(lpObj->m_Index);

  0003a	ff 33		 push	 DWORD PTR [ebx]
  0003c	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00041	83 c4 04	 add	 esp, 4
$LN8@SetItemEff:

; 301  : 	}
; 302  : 
; 303  : 	return bSuccess;

  00044	5b		 pop	 ebx
  00045	5f		 pop	 edi
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi

; 304  : }

  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetItemEff:

; 295  : 			break;
; 296  : 		}
; 297  : 	}
; 298  : 	else
; 299  : 	{
; 300  : 		bSuccess = !(g_ItemAddOption.SetItemEffect(lpObj,iItemCode,iValidTime)-1);

  0004d	ff 75 10	 push	 DWORD PTR _iValidTime$[ebp]
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00055	56		 push	 esi
  00056	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00059	e8 00 00 00 00	 call	 ?SetItemEffect@CItemAddOption@@QAE_NPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::SetItemEffect
  0005e	0f b6 c0	 movzx	 eax, al
  00061	48		 dec	 eax
  00062	f7 d8		 neg	 eax
  00064	5f		 pop	 edi
  00065	1b c0		 sbb	 eax, eax
  00067	40		 inc	 eax
  00068	5e		 pop	 esi

; 304  : }

  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
?_SetItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::_SetItemEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?SavePeriodInfo@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
?SavePeriodInfo@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::SavePeriodInfo, COMDAT
; _this$ = ecx

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 347  : 	int iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	8b 83 80 24 00
	00		 mov	 eax, DWORD PTR [ebx+9344]

; 348  : 
; 349  : 	if(iItemInfoIndex < 0 || iItemInfoIndex >= MAX_ITEM_PERIOD_INFO)

  00011	3d e7 03 00 00	 cmp	 eax, 999		; 000003e7H
  00016	77 2f		 ja	 SHORT $LN6@SavePeriod

; 350  : 		return;
; 351  : 
; 352  : 	ITEMPERIOD_INFO * lpItemInfo = &ItemPeriodInfo[iItemInfoIndex];

  00018	56		 push	 esi
  00019	69 c0 18 02 00
	00		 imul	 eax, eax, 536
  0001f	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00022	57		 push	 edi

; 353  : 
; 354  : 	for(int n = 0; n < SUBITEM_INFO_COUNT; n++)

  00023	33 ff		 xor	 edi, edi
  00025	03 f0		 add	 esi, eax
$LL4@SavePeriod:

; 355  : 	{
; 356  : 		if(lpItemInfo->ItemPeriod[n].btUsedItem == TRUE)	{

  00027	80 7e f8 01	 cmp	 BYTE PTR [esi-8], 1
  0002b	75 0f		 jne	 SHORT $LN2@SavePeriod

; 357  : 			lpItemInfo->ItemPeriod[n].iItemPeriodUsedTime++;

  0002d	ff 06		 inc	 DWORD PTR [esi]

; 358  : 			lpItemInfo->ItemPeriod[n].iItemPeriodLeftTime--;

  0002f	ff 4e 04	 dec	 DWORD PTR [esi+4]

; 359  : 			GDReqPeriodItemUpdate(lpObj,n);

  00032	57		 push	 edi
  00033	53		 push	 ebx
  00034	e8 00 00 00 00	 call	 ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN2@SavePeriod:

; 353  : 
; 354  : 	for(int n = 0; n < SUBITEM_INFO_COUNT; n++)

  0003c	47		 inc	 edi
  0003d	83 c6 10	 add	 esi, 16			; 00000010H
  00040	83 ff 20	 cmp	 edi, 32			; 00000020H
  00043	7c e2		 jl	 SHORT $LL4@SavePeriod
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
$LN6@SavePeriod:
  00047	5b		 pop	 ebx

; 360  : 		}
; 361  : 	}
; 362  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?SavePeriodInfo@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::SavePeriodInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GetPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetPeriodInfo, COMDAT
; _this$ = ecx

; 824  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 825  : 	if(lpObj->m_iPeriodItemEffectIndex < 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 80 24 00
	00		 mov	 eax, DWORD PTR [eax+9344]
  0000c	85 c0		 test	 eax, eax
  0000e	79 06		 jns	 SHORT $LN2@GetPeriodI

; 826  : 		return FALSE;

  00010	33 c0		 xor	 eax, eax

; 829  : 		return FALSE;
; 830  : 
; 831  : return &ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];
; 832  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@GetPeriodI:

; 827  : 
; 828  : 	if(ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex].btUsedInfo == FALSE)

  00016	69 c0 18 02 00
	00		 imul	 eax, eax, 536
  0001c	83 c0 08	 add	 eax, 8
  0001f	03 c1		 add	 eax, ecx
  00021	33 c9		 xor	 ecx, ecx
  00023	38 08		 cmp	 BYTE PTR [eax], cl
  00025	0f 44 c1	 cmove	 eax, ecx

; 829  : 		return FALSE;
; 830  : 
; 831  : return &ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];
; 832  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?GetPeriodInfo@CCashItemPeriodSystem@@QAEPAUITEMPERIOD_INFO@@PAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetPeriodInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::CheckMoveMapBoundItem, COMDAT
; _this$ = ecx

; 792  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 793  : 	int iPeriodItemIndex = lpObj->m_iPeriodItemEffectIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 80 24 00
	00		 mov	 eax, DWORD PTR [eax+9344]

; 794  : 
; 795  : 	if(iPeriodItemIndex == -1)

  0000c	83 f8 ff	 cmp	 eax, -1
  0000f	74 3c		 je	 SHORT $LN16@CheckMoveM

; 796  : 		return FALSE;
; 797  : 
; 798  : 	if(ItemPeriodInfo[iPeriodItemIndex].btUsedInfo == FALSE)

  00011	69 c0 18 02 00
	00		 imul	 eax, eax, 536
  00017	03 c8		 add	 ecx, eax
  00019	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  0001d	74 2e		 je	 SHORT $LN16@CheckMoveM

; 799  : 		return FALSE;
; 800  : 
; 801  : 	for(int i = 0; i < SUBITEM_INFO_COUNT; i++)

  0001f	33 d2		 xor	 edx, edx
  00021	83 c1 24	 add	 ecx, 36			; 00000024H
$LL4@CheckMoveM:

; 802  : 	{
; 803  : 		if(ItemPeriodInfo[iPeriodItemIndex].ItemPeriod[i].btUsedItem == TRUE)

  00024	80 79 fc 01	 cmp	 BYTE PTR [ecx-4], 1
  00028	75 1a		 jne	 SHORT $LN2@CheckMoveM

; 804  : 		{
; 805  : 			switch(ItemPeriodInfo[iPeriodItemIndex].ItemPeriod[i].iItemCode)

  0002a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002c	05 d5 e5 ff ff	 add	 eax, -6699		; ffffe5d5H
  00031	83 f8 33	 cmp	 eax, 51			; 00000033H
  00034	77 0e		 ja	 SHORT $LN2@CheckMoveM
  00036	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN17@CheckMoveM[eax]
  0003d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@CheckMoveM[eax*4]
$LN2@CheckMoveM:

; 799  : 		return FALSE;
; 800  : 
; 801  : 	for(int i = 0; i < SUBITEM_INFO_COUNT; i++)

  00044	42		 inc	 edx
  00045	83 c1 10	 add	 ecx, 16			; 00000010H
  00048	83 fa 20	 cmp	 edx, 32			; 00000020H
  0004b	7c d7		 jl	 SHORT $LL4@CheckMoveM
$LN16@CheckMoveM:

; 817  : 			}
; 818  : 		}
; 819  : 	}
; 820  : return FALSE;

  0004d	33 c0		 xor	 eax, eax

; 821  : }

  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN10@CheckMoveM:

; 806  : 			{
; 807  : 			case ITEMGET(13,43):
; 808  : 			case ITEMGET(13,44):
; 809  : 			case ITEMGET(13,45):
; 810  : 			case ITEMGET(13,52):
; 811  : 			case ITEMGET(13,59):
; 812  : 			case ITEMGET(13,62):
; 813  : 			case ITEMGET(13,63):
; 814  : 			case ITEMGET(13,93):
; 815  : 			case ITEMGET(13,94):
; 816  : 				return TRUE;

  00053	b8 01 00 00 00	 mov	 eax, 1

; 821  : }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN19@CheckMoveM:
  0005c	00 00 00 00	 DD	 $LN10@CheckMoveM
  00060	00 00 00 00	 DD	 $LN2@CheckMoveM
$LN17@CheckMoveM:
  00064	00		 DB	 0
  00065	00		 DB	 0
  00066	00		 DB	 0
  00067	01		 DB	 1
  00068	01		 DB	 1
  00069	01		 DB	 1
  0006a	01		 DB	 1
  0006b	01		 DB	 1
  0006c	01		 DB	 1
  0006d	00		 DB	 0
  0006e	01		 DB	 1
  0006f	01		 DB	 1
  00070	01		 DB	 1
  00071	01		 DB	 1
  00072	01		 DB	 1
  00073	01		 DB	 1
  00074	00		 DB	 0
  00075	01		 DB	 1
  00076	01		 DB	 1
  00077	00		 DB	 0
  00078	00		 DB	 0
  00079	01		 DB	 1
  0007a	01		 DB	 1
  0007b	01		 DB	 1
  0007c	01		 DB	 1
  0007d	01		 DB	 1
  0007e	01		 DB	 1
  0007f	01		 DB	 1
  00080	01		 DB	 1
  00081	01		 DB	 1
  00082	01		 DB	 1
  00083	01		 DB	 1
  00084	01		 DB	 1
  00085	01		 DB	 1
  00086	01		 DB	 1
  00087	01		 DB	 1
  00088	01		 DB	 1
  00089	01		 DB	 1
  0008a	01		 DB	 1
  0008b	01		 DB	 1
  0008c	01		 DB	 1
  0008d	01		 DB	 1
  0008e	01		 DB	 1
  0008f	01		 DB	 1
  00090	01		 DB	 1
  00091	01		 DB	 1
  00092	01		 DB	 1
  00093	01		 DB	 1
  00094	01		 DB	 1
  00095	01		 DB	 1
  00096	00		 DB	 0
  00097	00		 DB	 0
?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::CheckMoveMapBoundItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z
_TEXT	SEGMENT
_pchDate$GSCopy$1$ = -72				; size = 4
_iDay$1$ = -68						; size = 4
_iHour$1$ = -64						; size = 4
_ttm$1 = -60						; size = 36
_ttm$2 = -60						; size = 36
_ttm$3 = -60						; size = 36
_ttm$4 = -60						; size = 36
_ttm$5 = -60						; size = 36
_chDate$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_lpTime$ = 8						; size = 4
_pchDate$ = 12						; size = 4
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z PROC ; CCashItemPeriodSystem::ConvertTimeToString, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _pchDate$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _lpTime$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 661  : 	ptm = GetLocalTm(&ttm);

  00019	8b cf		 mov	 ecx, edi
  0001b	89 45 b8	 mov	 DWORD PTR _pchDate$GSCopy$1$[ebp], eax
  0001e	8d 45 c4	 lea	 eax, DWORD PTR _ttm$5[ebp]
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00027	85 c0		 test	 eax, eax
  00029	74 0b		 je	 SHORT $LN5@ConvertTim
  0002b	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  0002e	81 c6 6c 07 00
	00		 add	 esi, 1900		; 0000076cH
  00034	eb 02		 jmp	 SHORT $LN6@ConvertTim
$LN5@ConvertTim:
  00036	33 f6		 xor	 esi, esi
$LN6@ConvertTim:

; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  00038	8d 45 c4	 lea	 eax, DWORD PTR _ttm$4[ebp]
  0003b	8b cf		 mov	 ecx, edi
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00043	85 c0		 test	 eax, eax
  00045	74 06		 je	 SHORT $LN9@ConvertTim
  00047	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  0004a	43		 inc	 ebx
  0004b	eb 02		 jmp	 SHORT $LN10@ConvertTim
$LN9@ConvertTim:
  0004d	33 db		 xor	 ebx, ebx
$LN10@ConvertTim:

; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  0004f	8d 45 c4	 lea	 eax, DWORD PTR _ttm$3[ebp]
  00052	8b cf		 mov	 ecx, edi
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  0005a	85 c0		 test	 eax, eax
  0005c	74 08		 je	 SHORT $LN13@ConvertTim
  0005e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00061	89 45 bc	 mov	 DWORD PTR _iDay$1$[ebp], eax
  00064	eb 07		 jmp	 SHORT $LN14@ConvertTim
$LN13@ConvertTim:
  00066	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iDay$1$[ebp], 0
$LN14@ConvertTim:

; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  0006d	8d 45 c4	 lea	 eax, DWORD PTR _ttm$2[ebp]
  00070	8b cf		 mov	 ecx, edi
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  00078	85 c0		 test	 eax, eax
  0007a	74 08		 je	 SHORT $LN17@ConvertTim
  0007c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0007f	89 45 c0	 mov	 DWORD PTR _iHour$1$[ebp], eax
  00082	eb 07		 jmp	 SHORT $LN18@ConvertTim
$LN17@ConvertTim:
  00084	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _iHour$1$[ebp], -1
$LN18@ConvertTim:

; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);

  0008b	8d 45 c4	 lea	 eax, DWORD PTR _ttm$1[ebp]
  0008e	8b cf		 mov	 ecx, edi
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  00096	85 c0		 test	 eax, eax
  00098	74 05		 je	 SHORT $LN21@ConvertTim
  0009a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009d	eb 03		 jmp	 SHORT $LN22@ConvertTim
$LN21@ConvertTim:
  0009f	83 c8 ff	 or	 eax, -1
$LN22@ConvertTim:
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 206  : 	wsprintf(chDate, "%d-%d-%d %d:%d", iYear, iMonth, iDay, iHour, iMinute);

  000a2	50		 push	 eax
  000a3	ff 75 c0	 push	 DWORD PTR _iHour$1$[ebp]
  000a6	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  000a9	ff 75 bc	 push	 DWORD PTR _iDay$1$[ebp]
  000ac	53		 push	 ebx
  000ad	56		 push	 esi
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  000b3	50		 push	 eax
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 207  : 	memcpy(pchDate, chDate, sizeof(chDate));

  000ba	8b 4d b8	 mov	 ecx, DWORD PTR _pchDate$GSCopy$1$[ebp]
  000bd	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c0	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR _chDate$[ebp]
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _chDate$[ebp+16]
  000c7	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000ca	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 208  : }

  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	33 cd		 xor	 ecx, ebp
  000d4	5b		 pop	 ebx
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
?ConvertTimeToString@CCashItemPeriodSystem@@QAEXPBVCTime@ATL@@PAD@Z ENDP ; CCashItemPeriodSystem::ConvertTimeToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z
_TEXT	SEGMENT
_lpTime$GSCopy$1$ = -40					; size = 4
_tReturnTime$ = -36					; size = 8
_iYear$1$ = -32						; size = 4
_seps$ = -28						; size = 4
_chDate$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_pchDate$ = 8						; size = 4
_lpTime$ = 12						; size = 4
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z PROC ; CCashItemPeriodSystem::ConvertStringToTime, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pchDate$[ebp]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _lpTime$[ebp]
  00016	89 4d d8	 mov	 DWORD PTR _lpTime$GSCopy$1$[ebp], ecx

; 156  : 	int iYear=0;
; 157  : 	int iMonth=0;
; 158  : 	int iDay=0;
; 159  : 	int iHour=0;
; 160  : 	int iMinute=0;
; 161  : 	int iDateLength=0;
; 162  : 	char chDate[20];
; 163  : 	char* Token;
; 164  : 	char seps[4]="-: ";

  00019	c7 45 e4 2d 3a
	20 00		 mov	 DWORD PTR _seps$[ebp], 2112045 ; 00203a2dH

; 165  : 
; 166  : 	if ( pchDate == NULL || lpTime == NULL )

  00020	85 c0		 test	 eax, eax
  00022	0f 84 b8 00 00
	00		 je	 $LN5@ConvertStr
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 84 b0 00 00
	00		 je	 $LN5@ConvertStr

; 167  : 		return;
; 168  : 
; 169  : 	memcpy(chDate, pchDate, sizeof(chDate));

  00030	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00033	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00036	89 45 f8	 mov	 DWORD PTR _chDate$[ebp+16], eax

; 170  : 	iDateLength = strlen(chDate);

  00039	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  0003c	0f 11 45 e8	 movups	 XMMWORD PTR _chDate$[ebp], xmm0
  00040	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL7@ConvertStr:
  00043	8a 08		 mov	 cl, BYTE PTR [eax]
  00045	40		 inc	 eax
  00046	84 c9		 test	 cl, cl
  00048	75 f9		 jne	 SHORT $LL7@ConvertStr
  0004a	2b c2		 sub	 eax, edx

; 171  : 
; 172  : 	if ( iDateLength <= 0 || iDateLength > 20 )

  0004c	48		 dec	 eax
  0004d	83 f8 13	 cmp	 eax, 19			; 00000013H
  00050	0f 87 8a 00 00
	00		 ja	 $LN5@ConvertStr

; 173  : 		return;
; 174  : 
; 175  : 	Token = strtok( chDate, seps);

  00056	53		 push	 ebx
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  0005c	50		 push	 eax
  0005d	8d 45 e8	 lea	 eax, DWORD PTR _chDate$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 _strtok

; 176  : 	iYear = atoi(Token);

  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 _atoi
  0006c	89 45 e0	 mov	 DWORD PTR _iYear$1$[ebp], eax

; 177  : 	Token = strtok( NULL, seps);

  0006f	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  00072	50		 push	 eax
  00073	6a 00		 push	 0
  00075	e8 00 00 00 00	 call	 _strtok

; 178  : 	iMonth = atoi(Token);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _atoi
  00080	8b d8		 mov	 ebx, eax

; 179  : 	Token = strtok( NULL, seps);

  00082	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  00085	50		 push	 eax
  00086	6a 00		 push	 0
  00088	e8 00 00 00 00	 call	 _strtok

; 180  : 	iDay = atoi(Token);

  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _atoi
  00093	8b f8		 mov	 edi, eax

; 181  : 	Token = strtok( NULL, seps);

  00095	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  00098	50		 push	 eax
  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 _strtok

; 182  : 	iHour = atoi(Token);

  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 _atoi
  000a6	8b f0		 mov	 esi, eax

; 183  : 	Token = strtok( NULL, seps);

  000a8	8d 45 e4	 lea	 eax, DWORD PTR _seps$[ebp]
  000ab	50		 push	 eax
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 _strtok

; 184  : 	iMinute = atoi(Token);

  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _atoi
  000b9	83 c4 3c	 add	 esp, 60			; 0000003cH

; 185  : 
; 186  : 	CTime tReturnTime(iYear, iMonth, iDay, iHour, iMinute, 0, -1);

  000bc	8d 4d dc	 lea	 ecx, DWORD PTR _tReturnTime$[ebp]
  000bf	6a ff		 push	 -1
  000c1	6a 00		 push	 0
  000c3	50		 push	 eax
  000c4	56		 push	 esi
  000c5	57		 push	 edi
  000c6	53		 push	 ebx
  000c7	ff 75 e0	 push	 DWORD PTR _iYear$1$[ebp]
  000ca	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime

; 187  : 
; 188  : 	*lpTime = tReturnTime;

  000cf	8b 4d d8	 mov	 ecx, DWORD PTR _lpTime$GSCopy$1$[ebp]
  000d2	8b 45 dc	 mov	 eax, DWORD PTR _tReturnTime$[ebp]
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	89 01		 mov	 DWORD PTR [ecx], eax
  000d9	8b 45 e0	 mov	 eax, DWORD PTR _tReturnTime$[ebp+4]
  000dc	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000df	5b		 pop	 ebx
$LN5@ConvertStr:

; 189  : }

  000e0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	33 cd		 xor	 ecx, ebp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 08 00	 ret	 8
?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ENDP ; CCashItemPeriodSystem::ConvertStringToTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_iLeftTime$ = 12					; size = 4
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z PROC ; CCashItemPeriodSystem::CalcItemUseEndTime, COMDAT
; _this$ = ecx

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 412  : 	m_time(0)

  00005	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 274  : }
; 275  : 
; 276  : inline LONGLONG CTimeSpan::GetDays() const throw()
; 277  : {
; 278  : 	return( m_timeSpan/(24*3600) );
; 279  : }
; 280  : 
; 281  : inline LONGLONG CTimeSpan::GetTotalHours() const throw()
; 282  : {
; 283  : 	return( m_timeSpan/3600 );
; 284  : }
; 285  : 
; 286  : inline LONG CTimeSpan::GetHours() const throw()
; 287  : {
; 288  : 	return( LONG( GetTotalHours()-(GetDays()*24) ) );
; 289  : }
; 290  : 
; 291  : inline LONGLONG CTimeSpan::GetTotalMinutes() const throw()
; 292  : {
; 293  : 	return( m_timeSpan/60 );
; 294  : }
; 295  : 
; 296  : inline LONG CTimeSpan::GetMinutes() const throw()
; 297  : {
; 298  : 	return( LONG( GetTotalMinutes()-(GetTotalHours()*60) ) );
; 299  : }
; 300  : 
; 301  : inline LONGLONG CTimeSpan::GetTotalSeconds() const throw()
; 302  : {
; 303  : 	return( m_timeSpan );
; 304  : }
; 305  : 
; 306  : inline LONG CTimeSpan::GetSeconds() const throw()
; 307  : {
; 308  : 	return( LONG( GetTotalSeconds()-(GetTotalMinutes()*60) ) );
; 309  : }
; 310  : 
; 311  : inline __time64_t CTimeSpan::GetTimeSpan() const throw()
; 312  : {
; 313  : 	return( m_timeSpan );
; 314  : }
; 315  : 
; 316  : inline CTimeSpan CTimeSpan::operator+(_In_ CTimeSpan span) const throw()
; 317  : {
; 318  : 	return( CTimeSpan( m_timeSpan+span.m_timeSpan ) );
; 319  : }
; 320  : 
; 321  : inline CTimeSpan CTimeSpan::operator-(_In_ CTimeSpan span) const throw()
; 322  : {
; 323  : 	return( CTimeSpan( m_timeSpan-span.m_timeSpan ) );
; 324  : }
; 325  : 
; 326  : inline CTimeSpan& CTimeSpan::operator+=(_In_ CTimeSpan span) throw()
; 327  : {
; 328  : 	m_timeSpan += span.m_timeSpan;
; 329  : 	return( *this );
; 330  : }
; 331  : 
; 332  : inline CTimeSpan& CTimeSpan::operator-=(_In_ CTimeSpan span) throw()
; 333  : {
; 334  : 	m_timeSpan -= span.m_timeSpan;
; 335  : 	return( *this );
; 336  : }
; 337  : 
; 338  : inline bool CTimeSpan::operator==(_In_ CTimeSpan span) const throw()
; 339  : {
; 340  : 	return( m_timeSpan == span.m_timeSpan );
; 341  : }
; 342  : 
; 343  : inline bool CTimeSpan::operator!=(_In_ CTimeSpan span) const throw()
; 344  : {
; 345  : 	return( m_timeSpan != span.m_timeSpan );
; 346  : }
; 347  : 
; 348  : inline bool CTimeSpan::operator<(_In_ CTimeSpan span) const throw()
; 349  : {
; 350  : 	return( m_timeSpan < span.m_timeSpan );
; 351  : }
; 352  : 
; 353  : inline bool CTimeSpan::operator>(_In_ CTimeSpan span) const throw()
; 354  : {
; 355  : 	return( m_timeSpan > span.m_timeSpan );
; 356  : }
; 357  : 
; 358  : inline bool CTimeSpan::operator<=(_In_ CTimeSpan span) const throw()
; 359  : {
; 360  : 	return( m_timeSpan <= span.m_timeSpan );
; 361  : }
; 362  : 
; 363  : inline bool CTimeSpan::operator>=(_In_ CTimeSpan span) const throw()
; 364  : {
; 365  : 	return( m_timeSpan >= span.m_timeSpan );
; 366  : }
; 367  : 
; 368  : /////////////////////////////////////////////////////////////////////////////
; 369  : // CTime
; 370  : /////////////////////////////////////////////////////////////////////////////
; 371  : 
; 372  : inline CTime WINAPI CTime::GetCurrentTime() throw()
; 373  : {
; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00008	6a 00		 push	 0

; 412  : 	m_time(0)

  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00010	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 274  : }
; 275  : 
; 276  : inline LONGLONG CTimeSpan::GetDays() const throw()
; 277  : {
; 278  : 	return( m_timeSpan/(24*3600) );
; 279  : }
; 280  : 
; 281  : inline LONGLONG CTimeSpan::GetTotalHours() const throw()
; 282  : {
; 283  : 	return( m_timeSpan/3600 );
; 284  : }
; 285  : 
; 286  : inline LONG CTimeSpan::GetHours() const throw()
; 287  : {
; 288  : 	return( LONG( GetTotalHours()-(GetDays()*24) ) );
; 289  : }
; 290  : 
; 291  : inline LONGLONG CTimeSpan::GetTotalMinutes() const throw()
; 292  : {
; 293  : 	return( m_timeSpan/60 );
; 294  : }
; 295  : 
; 296  : inline LONG CTimeSpan::GetMinutes() const throw()
; 297  : {
; 298  : 	return( LONG( GetTotalMinutes()-(GetTotalHours()*60) ) );
; 299  : }
; 300  : 
; 301  : inline LONGLONG CTimeSpan::GetTotalSeconds() const throw()
; 302  : {
; 303  : 	return( m_timeSpan );
; 304  : }
; 305  : 
; 306  : inline LONG CTimeSpan::GetSeconds() const throw()
; 307  : {
; 308  : 	return( LONG( GetTotalSeconds()-(GetTotalMinutes()*60) ) );
; 309  : }
; 310  : 
; 311  : inline __time64_t CTimeSpan::GetTimeSpan() const throw()
; 312  : {
; 313  : 	return( m_timeSpan );
; 314  : }
; 315  : 
; 316  : inline CTimeSpan CTimeSpan::operator+(_In_ CTimeSpan span) const throw()
; 317  : {
; 318  : 	return( CTimeSpan( m_timeSpan+span.m_timeSpan ) );
; 319  : }
; 320  : 
; 321  : inline CTimeSpan CTimeSpan::operator-(_In_ CTimeSpan span) const throw()
; 322  : {
; 323  : 	return( CTimeSpan( m_timeSpan-span.m_timeSpan ) );
; 324  : }
; 325  : 
; 326  : inline CTimeSpan& CTimeSpan::operator+=(_In_ CTimeSpan span) throw()
; 327  : {
; 328  : 	m_timeSpan += span.m_timeSpan;
; 329  : 	return( *this );
; 330  : }
; 331  : 
; 332  : inline CTimeSpan& CTimeSpan::operator-=(_In_ CTimeSpan span) throw()
; 333  : {
; 334  : 	m_timeSpan -= span.m_timeSpan;
; 335  : 	return( *this );
; 336  : }
; 337  : 
; 338  : inline bool CTimeSpan::operator==(_In_ CTimeSpan span) const throw()
; 339  : {
; 340  : 	return( m_timeSpan == span.m_timeSpan );
; 341  : }
; 342  : 
; 343  : inline bool CTimeSpan::operator!=(_In_ CTimeSpan span) const throw()
; 344  : {
; 345  : 	return( m_timeSpan != span.m_timeSpan );
; 346  : }
; 347  : 
; 348  : inline bool CTimeSpan::operator<(_In_ CTimeSpan span) const throw()
; 349  : {
; 350  : 	return( m_timeSpan < span.m_timeSpan );
; 351  : }
; 352  : 
; 353  : inline bool CTimeSpan::operator>(_In_ CTimeSpan span) const throw()
; 354  : {
; 355  : 	return( m_timeSpan > span.m_timeSpan );
; 356  : }
; 357  : 
; 358  : inline bool CTimeSpan::operator<=(_In_ CTimeSpan span) const throw()
; 359  : {
; 360  : 	return( m_timeSpan <= span.m_timeSpan );
; 361  : }
; 362  : 
; 363  : inline bool CTimeSpan::operator>=(_In_ CTimeSpan span) const throw()
; 364  : {
; 365  : 	return( m_timeSpan >= span.m_timeSpan );
; 366  : }
; 367  : 
; 368  : /////////////////////////////////////////////////////////////////////////////
; 369  : // CTime
; 370  : /////////////////////////////////////////////////////////////////////////////
; 371  : 
; 372  : inline CTime WINAPI CTime::GetCurrentTime() throw()
; 373  : {
; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00017	e8 00 00 00 00	 call	 __time64
  0001c	8b c8		 mov	 ecx, eax
  0001e	8b f2		 mov	 esi, edx

; 273  :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00020	8b 45 0c	 mov	 eax, DWORD PTR _iLeftTime$[ebp]
  00023	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00028	f7 ea		 imul	 edx

; 274  : }
; 275  : 
; 276  : inline LONGLONG CTimeSpan::GetDays() const throw()
; 277  : {
; 278  : 	return( m_timeSpan/(24*3600) );
; 279  : }
; 280  : 
; 281  : inline LONGLONG CTimeSpan::GetTotalHours() const throw()
; 282  : {
; 283  : 	return( m_timeSpan/3600 );
; 284  : }
; 285  : 
; 286  : inline LONG CTimeSpan::GetHours() const throw()
; 287  : {
; 288  : 	return( LONG( GetTotalHours()-(GetDays()*24) ) );
; 289  : }
; 290  : 
; 291  : inline LONGLONG CTimeSpan::GetTotalMinutes() const throw()
; 292  : {
; 293  : 	return( m_timeSpan/60 );
; 294  : }
; 295  : 
; 296  : inline LONG CTimeSpan::GetMinutes() const throw()
; 297  : {
; 298  : 	return( LONG( GetTotalMinutes()-(GetTotalHours()*60) ) );
; 299  : }
; 300  : 
; 301  : inline LONGLONG CTimeSpan::GetTotalSeconds() const throw()
; 302  : {
; 303  : 	return( m_timeSpan );
; 304  : }
; 305  : 
; 306  : inline LONG CTimeSpan::GetSeconds() const throw()
; 307  : {
; 308  : 	return( LONG( GetTotalSeconds()-(GetTotalMinutes()*60) ) );
; 309  : }
; 310  : 
; 311  : inline __time64_t CTimeSpan::GetTimeSpan() const throw()
; 312  : {
; 313  : 	return( m_timeSpan );
; 314  : }
; 315  : 
; 316  : inline CTimeSpan CTimeSpan::operator+(_In_ CTimeSpan span) const throw()
; 317  : {
; 318  : 	return( CTimeSpan( m_timeSpan+span.m_timeSpan ) );
; 319  : }
; 320  : 
; 321  : inline CTimeSpan CTimeSpan::operator-(_In_ CTimeSpan span) const throw()
; 322  : {
; 323  : 	return( CTimeSpan( m_timeSpan-span.m_timeSpan ) );
; 324  : }
; 325  : 
; 326  : inline CTimeSpan& CTimeSpan::operator+=(_In_ CTimeSpan span) throw()
; 327  : {
; 328  : 	m_timeSpan += span.m_timeSpan;
; 329  : 	return( *this );
; 330  : }
; 331  : 
; 332  : inline CTimeSpan& CTimeSpan::operator-=(_In_ CTimeSpan span) throw()
; 333  : {
; 334  : 	m_timeSpan -= span.m_timeSpan;
; 335  : 	return( *this );
; 336  : }
; 337  : 
; 338  : inline bool CTimeSpan::operator==(_In_ CTimeSpan span) const throw()
; 339  : {
; 340  : 	return( m_timeSpan == span.m_timeSpan );
; 341  : }
; 342  : 
; 343  : inline bool CTimeSpan::operator!=(_In_ CTimeSpan span) const throw()
; 344  : {
; 345  : 	return( m_timeSpan != span.m_timeSpan );
; 346  : }
; 347  : 
; 348  : inline bool CTimeSpan::operator<(_In_ CTimeSpan span) const throw()
; 349  : {
; 350  : 	return( m_timeSpan < span.m_timeSpan );
; 351  : }
; 352  : 
; 353  : inline bool CTimeSpan::operator>(_In_ CTimeSpan span) const throw()
; 354  : {
; 355  : 	return( m_timeSpan > span.m_timeSpan );
; 356  : }
; 357  : 
; 358  : inline bool CTimeSpan::operator<=(_In_ CTimeSpan span) const throw()
; 359  : {
; 360  : 	return( m_timeSpan <= span.m_timeSpan );
; 361  : }
; 362  : 
; 363  : inline bool CTimeSpan::operator>=(_In_ CTimeSpan span) const throw()
; 364  : {
; 365  : 	return( m_timeSpan >= span.m_timeSpan );
; 366  : }
; 367  : 
; 368  : /////////////////////////////////////////////////////////////////////////////
; 369  : // CTime
; 370  : /////////////////////////////////////////////////////////////////////////////
; 371  : 
; 372  : inline CTime WINAPI CTime::GetCurrentTime() throw()
; 373  : {
; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0002a	83 c4 04	 add	 esp, 4

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0002d	03 c8		 add	 ecx, eax
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 150  : 	return tExpireTime;

  0002f	8b c7		 mov	 eax, edi
  00031	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00033	13 f2		 adc	 esi, edx
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 149  : 	tExpireTime = tCurrentTime + tLeftTime;

  00035	89 77 04	 mov	 DWORD PTR [edi+4], esi
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi

; 151  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ENDP ; CCashItemPeriodSystem::CalcItemUseEndTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z
_TEXT	SEGMENT
_tBuyTime$ = -8						; size = 8
_pchBuyDate$ = 8					; size = 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z PROC ; CCashItemPeriodSystem::CalcItemUseLeftTime, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00009	6a 00		 push	 0
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 128  : {

  0000b	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0000d	e8 00 00 00 00	 call	 __time64
  00012	83 c4 04	 add	 esp, 4

; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00015	8b f0		 mov	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 134  : 	this->ConvertStringToTime(pchBuyDate, &tBuyTime);

  00017	8d 45 f8	 lea	 eax, DWORD PTR _tBuyTime$[ebp]
  0001a	0f 57 c0	 xorps	 xmm0, xmm0
  0001d	8b cb		 mov	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 412  : 	m_time(0)

  0001f	66 0f 13 45 f8	 movlpd	 QWORD PTR _tBuyTime$[ebp], xmm0

; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00024	8b fa		 mov	 edi, edx
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 134  : 	this->ConvertStringToTime(pchBuyDate, &tBuyTime);

  00026	50		 push	 eax
  00027	ff 75 08	 push	 DWORD PTR _pchBuyDate$[ebp]
  0002a	e8 00 00 00 00	 call	 ?ConvertStringToTime@CCashItemPeriodSystem@@QAEXPBDPAVCTime@ATL@@@Z ; CCashItemPeriodSystem::ConvertStringToTime
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 543  : 	return( CTimeSpan( m_time-time.m_time ) );

  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _tBuyTime$[ebp]
  00032	8b 45 fc	 mov	 eax, DWORD PTR _tBuyTime$[ebp+4]
  00035	2b ce		 sub	 ecx, esi

; 293  : 	return( m_timeSpan/60 );

  00037	6a 00		 push	 0
  00039	6a 3c		 push	 60			; 0000003cH

; 543  : 	return( CTimeSpan( m_time-time.m_time ) );

  0003b	1b c7		 sbb	 eax, edi

; 293  : 	return( m_timeSpan/60 );

  0003d	50		 push	 eax
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __alldiv
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 140  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?CalcItemUseLeftTime@CCashItemPeriodSystem@@QAEHPAD@Z ENDP ; CCashItemPeriodSystem::CalcItemUseLeftTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_lpObj$ = 8						; size = 4
_btResult$ = 12						; size = 1
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z PROC ; CCashItemPeriodSystem::GCSendPeriodItemInserResult, COMDAT
; _this$ = ecx

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 758  : 	PMSG_ANS_PERIODITEM_INSERT_RESULT pMsg;
; 759  : 	
; 760  : 	pMsg.btResult = btResult;

  00006	8a 45 0c	 mov	 al, BYTE PTR _btResult$[ebp]

; 761  : 
; 762  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  00009	6a 05		 push	 5
  0000b	6a 03		 push	 3
  0000d	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00010	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00013	68 d0 00 00 00	 push	 208			; 000000d0H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 763  : 
; 764  : 	DataSend(lpObj->m_Index, (LPBYTE)&pMsg,	sizeof(PMSG_ANS_PERIODITEM_INSERT_RESULT));

  0001e	6a 05		 push	 5
  00020	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00027	ff 30		 push	 DWORD PTR [eax]
  00029	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0002e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 765  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ENDP ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemDelete, COMDAT
; _this$ = ecx

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 736  : 	LPOBJ lpObj = NULL;
; 737  : 
; 738  : 	if ( aRecv->iUserIndex < 0 || aRecv->iUserIndex > OBJMAX )

  00003	8b 55 08	 mov	 edx, DWORD PTR _aRecv$[ebp]
  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	85 c0		 test	 eax, eax
  0000b	78 37		 js	 SHORT $LN5@DGAnsPerio
  0000d	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  00012	7f 30		 jg	 SHORT $LN5@DGAnsPerio

; 739  : 		return;
; 740  : 
; 741  : 	lpObj = &gObj[aRecv->iUserIndex];

  00014	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  0001a	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 742  : 
; 743  : 	if ( lpObj->DBNumber != aRecv->iUserGuid )

  00020	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00023	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00026	75 1c		 jne	 SHORT $LN5@DGAnsPerio

; 744  : 		return;
; 745  : 
; 746  : 	switch ( aRecv->btResult )

  00028	80 7a 0c 00	 cmp	 BYTE PTR [edx+12], 0
  0002c	75 16		 jne	 SHORT $LN5@DGAnsPerio

; 747  : 	{
; 748  : 	case 0:
; 749  : 		LogAddTD("[CashShop][PeriodItemDelete Ans] - ID : %s, Name : %s",

  0002e	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00031	50		 push	 eax
  00032	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00035	50		 push	 eax
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@OOLHNPG@?$FLCashShop?$FN?$FLPeriodItemDelete?5Ans?$FN@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@DGAnsPerio:

; 750  : 			lpObj->AccountID,lpObj->Name);
; 751  : 		break;
; 752  : 	}
; 753  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?DGAnsPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_DELETE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_pchCharacterName$ = 12					; size = 4
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemDelete, COMDAT
; _this$ = ecx

; 721  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _pchCharacterName$[ebp]

; 722  : 	PMSG_REQ_PERIODITEM_DELETE pMsg;
; 723  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;
; 724  : 	
; 725  : 	pMsg.iUserIndex = lpObj->m_Index;
; 726  : 	pMsg.iUserGuid = lpObj->DBNumber;
; 727  : 	memcpy(pMsg.chCharacterName, pchCharacterName, sizeof(pMsg.chCharacterName));
; 728  : 
; 729  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x09, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  00016	6a 18		 push	 24			; 00000018H
  00018	6a 09		 push	 9
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00020	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00023	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00026	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00029	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  0002d	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+20], ax
  00031	8a 42 0a	 mov	 al, BYTE PTR [edx+10]
  00034	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+22], al
  00037	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003a	68 d0 00 00 00	 push	 208			; 000000d0H
  0003f	50		 push	 eax
  00040	66 0f d6 45 f0	 movq	 QWORD PTR _pMsg$[ebp+12], xmm0
  00045	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 730  : 
; 731  : 	cDBSMng.Send((char*)&pMsg, sizeof(PMSG_REQ_PERIODITEM_DELETE));

  0004d	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00055	6a 18		 push	 24			; 00000018H
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 732  : }

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00060	33 cd		 xor	 ecx, ebp
  00062	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?GDReqPeriodItemDelete@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@PAD@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate, COMDAT
; _this$ = ecx

; 676  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 677  : 
; 678  : 	int iUserIndex = aRecv->iUserIndex;

  00004	8b 7d 08	 mov	 edi, DWORD PTR _aRecv$[ebp]
  00007	8b d1		 mov	 edx, ecx
  00009	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 679  : 
; 680  : 	if ( iUserIndex < 0 || iUserIndex > OBJMAX )

  0000c	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  00011	0f 87 81 00 00
	00		 ja	 $LN7@DGAnsPerio

; 681  : 		return;
; 682  : 
; 683  : 	LPOBJ lpObj = &gObj[iUserIndex];

  00017	56		 push	 esi
  00018	69 f0 40 27 00
	00		 imul	 esi, eax, 10048
  0001e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 684  : 	ITEMPERIOD_INFO* lpItemInfo = NULL;
; 685  : 
; 686  : 	if ( lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >=MAX_ITEM_PERIOD_INFO )

  00024	8b 8e 80 24 00
	00		 mov	 ecx, DWORD PTR [esi+9344]
  0002a	85 c9		 test	 ecx, ecx
  0002c	78 69		 js	 SHORT $LN12@DGAnsPerio
  0002e	81 f9 e8 03 00
	00		 cmp	 ecx, 1000		; 000003e8H
  00034	7d 61		 jge	 SHORT $LN12@DGAnsPerio

; 687  : 		return;
; 688  : 
; 689  : 	lpItemInfo = &ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  00036	69 c1 18 02 00
	00		 imul	 eax, ecx, 536

; 690  : 
; 691  : 	if ( lpObj->m_iPeriodItemEffectIndex != lpItemInfo->iUserIndex )

  0003c	0f b7 44 10 0a	 movzx	 eax, WORD PTR [eax+edx+10]
  00041	3b c8		 cmp	 ecx, eax
  00043	75 52		 jne	 SHORT $LN12@DGAnsPerio

; 692  : 		return;
; 693  : 
; 694  : 	switch ( aRecv->btResult )

  00045	80 7f 0c 03	 cmp	 BYTE PTR [edi+12], 3
  00049	75 2e		 jne	 SHORT $LN10@DGAnsPerio

; 695  : 	{
; 696  : 		case 3:
; 697  : 			if ( ClearPeriodItemEffect(lpObj,aRecv->iItemCode) == TRUE )

  0004b	ff 77 08	 push	 DWORD PTR [edi+8]
  0004e	8b ca		 mov	 ecx, edx
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 1e		 jne	 SHORT $LN10@DGAnsPerio

; 698  : 			{		
; 699  : 				LogAddTD("[CashShop][PeriodItemUpdate Ans] Remove Item Effect - ID : %s, Name : %s, ItemCode : %d, Result : %d",

  0005b	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  0005f	50		 push	 eax
  00060	ff 77 08	 push	 DWORD PTR [edi+8]
  00063	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00066	50		 push	 eax
  00067	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0006a	50		 push	 eax
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@FJLAMJFG@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00076	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@DGAnsPerio:

; 700  : 					lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);
; 701  : 			}
; 702  : 	}
; 703  : 
; 704  : 	LogAddTD("[CashShop][PeriodItemUpdate Ans] - ID : %s, Name : %s, ItemCode : %d, Result %d",

  00079	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  0007d	50		 push	 eax
  0007e	ff 77 08	 push	 DWORD PTR [edi+8]
  00081	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00084	50		 push	 eax
  00085	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00088	50		 push	 eax
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@BDNIOHDO@?$FLCashShop?$FN?$FLPeriodItemUpdate?5Ans?$FN@
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00094	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@DGAnsPerio:
  00097	5e		 pop	 esi
$LN7@DGAnsPerio:
  00098	5f		 pop	 edi

; 705  : 		lpObj->AccountID, lpObj->Name, aRecv->iItemCode, aRecv->btResult);
; 706  : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?DGAnsPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_UPDATE@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z
_TEXT	SEGMENT
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry, COMDAT
; _this$ = ecx

; 670  : 	return;
; 671  : }

  00000	c2 04 00	 ret	 4
?DGAnsPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INQUIRY@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInquiry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z
_TEXT	SEGMENT
_bResult$ = 8						; size = 1
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemInsert, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 595  : 	int iIndex = aRecv->iUserIndex;
; 596  : 	LPOBJ lpObj = &gObj[iIndex];

  00005	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	69 7e 04 40 27
	00 00		 imul	 edi, DWORD PTR [esi+4], 10048

; 597  : 	BYTE bResult = 0;
; 598  : 
; 599  : 	switch(aRecv->btResult)

  00012	0f b6 46 12	 movzx	 eax, BYTE PTR [esi+18]
  00016	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001c	83 e8 00	 sub	 eax, 0
  0001f	74 48		 je	 SHORT $LN4@DGAnsPerio
  00021	83 e8 01	 sub	 eax, 1
  00024	74 43		 je	 SHORT $LN4@DGAnsPerio
  00026	83 e8 01	 sub	 eax, 1
  00029	75 3e		 jne	 SHORT $LN4@DGAnsPerio

; 611  : 			lpObj->AccountID,lpObj->Name,aRecv->iItemCode,aRecv->btItemEffectType1,aRecv->btItemEffectType2,aRecv->iItemPeriodDate);
; 612  : 	}
; 613  : 	else
; 614  : 	{
; 615  : 		LogAddTD("[CashShop][PeriodItemInserver Ans] Fail - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, Result : %d",

  0002b	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  0002f	6a 03		 push	 3
  00031	ff 76 0c	 push	 DWORD PTR [esi+12]
  00034	c6 45 08 03	 mov	 BYTE PTR _bResult$[ebp], 3
  00038	50		 push	 eax
  00039	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  0003d	50		 push	 eax
  0003e	ff 76 08	 push	 DWORD PTR [esi+8]
  00041	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00044	50		 push	 eax
  00045	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JMDONCAH@?$FLCashShop?$FN?$FLPeriodItemInserver?5An@
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00054	83 c4 20	 add	 esp, 32			; 00000020H

; 616  : 			lpObj->AccountID,lpObj->Name,aRecv->iItemCode,aRecv->btItemEffectType1,aRecv->btItemEffectType2,aRecv->iItemPeriodDate,bResult);
; 617  : 	}
; 618  : 
; 619  : 	GCSendPeriodItemInserResult(lpObj,bResult);

  00057	8b cb		 mov	 ecx, ebx
  00059	ff 75 08	 push	 DWORD PTR _bResult$[ebp]
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 620  : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
$LN4@DGAnsPerio:

; 600  : 	{
; 601  : 	case 0:	bResult = 1;break;
; 602  : 	case 1: bResult = 1;break;
; 603  : 	case 2: bResult = 3;break;
; 604  : 	default: bResult = 1;
; 605  : 	}
; 606  : 
; 607  : 	if(bResult == 1)
; 608  : 	{
; 609  : 		SetPeriodItemEffect(lpObj,aRecv->iItemCode,aRecv->btItemEffectType1,aRecv->btItemEffectType2,aRecv->iItemPeriodDate);

  00069	ff 76 0c	 push	 DWORD PTR [esi+12]
  0006c	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  00070	50		 push	 eax
  00071	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00075	50		 push	 eax
  00076	ff 76 08	 push	 DWORD PTR [esi+8]
  00079	c6 45 08 01	 mov	 BYTE PTR _bResult$[ebp], 1
  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 610  : 		LogAddTD("[CashShop][PeriodItemInsert Ans] Success - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",

  00083	ff 76 0c	 push	 DWORD PTR [esi+12]
  00086	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  0008a	50		 push	 eax
  0008b	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  0008f	50		 push	 eax
  00090	ff 76 08	 push	 DWORD PTR [esi+8]
  00093	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00096	50		 push	 eax
  00097	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0009a	50		 push	 eax
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@DBFGECOP@?$FLCashShop?$FN?$FLPeriodItemInsert?5Ans?$FN@
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 616  : 			lpObj->AccountID,lpObj->Name,aRecv->iItemCode,aRecv->btItemEffectType1,aRecv->btItemEffectType2,aRecv->iItemPeriodDate,bResult);
; 617  : 	}
; 618  : 
; 619  : 	GCSendPeriodItemInserResult(lpObj,bResult);

  000a9	8b cb		 mov	 ecx, ebx
  000ab	ff 75 08	 push	 DWORD PTR _bResult$[ebp]
  000ae	57		 push	 edi
  000af	e8 00 00 00 00	 call	 ?GCSendPeriodItemInserResult@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@E@Z ; CCashItemPeriodSystem::GCSendPeriodItemInserResult
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx

; 620  : }

  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
?DGAnsPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_INSERT@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemInsert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_count$1$ = 8						; size = 4
_aRecv$ = 8						; size = 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z PROC ; CCashItemPeriodSystem::DGAnsPeriodItemList, COMDAT
; _this$ = ecx

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 625  : 	if ( aRecv->iUserIndex <= 0 || aRecv->iUserIndex > OBJMAX )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aRecv$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000e	85 c0		 test	 eax, eax
  00010	0f 8e d3 00 00
	00		 jle	 $LN6@DGAnsPerio
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	0f 8f c8 00 00
	00		 jg	 $LN6@DGAnsPerio

; 626  : 		return;
; 627  : 
; 628  : 	LPOBJ lpObj = &gObj[aRecv->iUserIndex];
; 629  : 	int UseTime = 0;
; 630  : 	int bResult = 0;
; 631  : 	bResult = aRecv->btResult;

  00021	0f be 4e 11	 movsx	 ecx, BYTE PTR [esi+17]
  00025	53		 push	 ebx
  00026	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  0002c	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 632  : 
; 633  : 	if(lpObj->DBNumber != aRecv->iUserGuid)

  00032	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00035	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00038	0f 85 aa 00 00
	00		 jne	 $LN18@DGAnsPerio

; 634  : 		return;
; 635  : 
; 636  : 	if(bResult == -1)

  0003e	83 f9 ff	 cmp	 ecx, -1
  00041	75 0f		 jne	 SHORT $LN8@DGAnsPerio

; 637  : 	{
; 638  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item over 1 item ID : %s, Name : %s",

  00043	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00046	50		 push	 eax
  00047	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LGFLHBHJ@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
  00050	eb 12		 jmp	 SHORT $LN20@DGAnsPerio
$LN8@DGAnsPerio:

; 639  : 			lpObj->AccountID,lpObj->Name);
; 640  : 	}
; 641  : 	else if(bResult == -2)

  00052	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  00055	75 16		 jne	 SHORT $LN10@DGAnsPerio

; 642  : 	{
; 643  : 		LogAddTD("[CashShop][PeriodItemSelect Ans] Failed - Item usedtime is over ID : %s, Name : %s",

  00057	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0005a	50		 push	 eax
  0005b	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@PBNHLFLM@?$FLCashShop?$FN?$FLPeriodItemSelect?5Ans?$FN@
$LN20@DGAnsPerio:
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN10@DGAnsPerio:

; 644  : 			lpObj->AccountID,lpObj->Name);
; 645  : 	}
; 646  : 
; 647  : 	int count = aRecv->btCount;

  0006d	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00071	89 45 08	 mov	 DWORD PTR _count$1$[ebp], eax

; 648  : 
; 649  : 	for(int i = 0; i < count; i++)

  00074	85 c0		 test	 eax, eax
  00076	7e 70		 jle	 SHORT $LN18@DGAnsPerio

; 644  : 			lpObj->AccountID,lpObj->Name);
; 645  : 	}
; 646  : 
; 647  : 	int count = aRecv->btCount;

  00078	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  0007b	83 c6 1e	 add	 esi, 30			; 0000001eH
  0007e	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  00081	57		 push	 edi
$LL4@DGAnsPerio:

; 650  : 	{
; 651  : 		UseTime = aRecv->Items[i].iItemPeriodLeftTime;

  00082	8b 7e 06	 mov	 edi, DWORD PTR [esi+6]

; 652  : 		if(UseTime  > 0)
; 653  : 		{
; 654  : 			SetPeriodItemEffect(lpObj,aRecv->Items[i].iItemCode,aRecv->Items[i].btItemEffectType1,aRecv->Items[i].btItemEffectType2,UseTime);

  00085	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00088	57		 push	 edi
  00089	50		 push	 eax
  0008a	0f b6 46 ff	 movzx	 eax, BYTE PTR [esi-1]
  0008e	50		 push	 eax
  0008f	85 ff		 test	 edi, edi
  00091	7e 2d		 jle	 SHORT $LN11@DGAnsPerio
  00093	ff 76 fa	 push	 DWORD PTR [esi-6]
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ; CCashItemPeriodSystem::SetPeriodItemEffect

; 655  : 			LogAddTD("[CashShop][PeriodItemList Ans] Success - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",

  0009f	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  000a2	57		 push	 edi
  000a3	50		 push	 eax
  000a4	0f b6 46 ff	 movzx	 eax, BYTE PTR [esi-1]
  000a8	50		 push	 eax
  000a9	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  000ad	50		 push	 eax
  000ae	ff 76 fa	 push	 DWORD PTR [esi-6]
  000b1	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  000b4	50		 push	 eax
  000b5	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0IG@FJCKGEMG@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5S@

; 656  : 				lpObj->AccountID,lpObj->Name,aRecv->Items[i].iItemCode,aRecv->Items[i].btItemOption,aRecv->Items[i].btItemEffectType1,aRecv->Items[i].btItemEffectType2,UseTime);
; 657  : 		}
; 658  : 		else

  000be	eb 0f		 jmp	 SHORT $LN21@DGAnsPerio
$LN11@DGAnsPerio:

; 659  : 		{
; 660  : 			LogAddTD("[CashShop][PeriodItemList Ans] Fail - ID : %s, Name : %s, ItemCode : %d, OptionType : %d, Effect1 : %d, Effect2 : %d, UseTime : %d",

  000c0	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  000c4	50		 push	 eax
  000c5	ff 76 fa	 push	 DWORD PTR [esi-6]
  000c8	51		 push	 ecx
  000c9	52		 push	 edx
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@JCBFAJNA@?$FLCashShop?$FN?$FLPeriodItemList?5Ans?$FN?5F@
$LN21@DGAnsPerio:
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d5	83 c4 20	 add	 esp, 32			; 00000020H
  000d8	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  000db	83 c6 14	 add	 esi, 20			; 00000014H
  000de	8d 53 52	 lea	 edx, DWORD PTR [ebx+82]
  000e1	83 6d 08 01	 sub	 DWORD PTR _count$1$[ebp], 1
  000e5	75 9b		 jne	 SHORT $LL4@DGAnsPerio
  000e7	5f		 pop	 edi
$LN18@DGAnsPerio:
  000e8	5b		 pop	 ebx
$LN6@DGAnsPerio:
  000e9	5e		 pop	 esi

; 661  : 				lpObj->AccountID,lpObj->Name,aRecv->Items[i].iItemCode,aRecv->Items[i].btItemOption,aRecv->Items[i].btItemEffectType1,aRecv->Items[i].btItemEffectType2,UseTime);
; 662  : 		}
; 663  : 	}
; 664  : }

  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 04 00	 ret	 4
?DGAnsPeriodItemList@CCashItemPeriodSystem@@QAEXPAUPMSG_ANS_PERIODITEM_LIST@@@Z ENDP ; CCashItemPeriodSystem::DGAnsPeriodItemList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pMsg$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_itemid$ = 12						; size = 4
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemUpdate, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _itemid$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]

; 563  : 	PMSG_REQ_PERIODITEM_UPDATE pMsg;
; 564  : 	ITEMPERIOD_INFO * lpItemInfo = NULL;
; 565  : 
; 566  : 	if(lpObj->m_iPeriodItemEffectIndex < 0 || lpObj->m_iPeriodItemEffectIndex >= MAX_ITEM_PERIOD_INFO)

  00018	8b 87 80 24 00
	00		 mov	 eax, DWORD PTR [edi+9344]
  0001e	85 c0		 test	 eax, eax
  00020	0f 88 80 00 00
	00		 js	 $LN5@GDReqPerio
  00026	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0002b	7d 79		 jge	 SHORT $LN5@GDReqPerio

; 567  : 		return;
; 568  : 
; 569  : 	if(itemid < 0 || itemid > SUBITEM_INFO_COUNT)

  0002d	83 fe 20	 cmp	 esi, 32			; 00000020H
  00030	77 74		 ja	 SHORT $LN5@GDReqPerio

; 570  : 		return;
; 571  : 
; 572  : 	lpItemInfo = &ItemPeriodInfo[lpObj->m_iPeriodItemEffectIndex];

  00032	69 d0 18 02 00
	00		 imul	 edx, eax, 536
  00038	03 d1		 add	 edx, ecx

; 573  : 
; 574  : 	if(lpItemInfo->btUsedInfo == FALSE)

  0003a	80 7a 08 00	 cmp	 BYTE PTR [edx+8], 0
  0003e	74 66		 je	 SHORT $LN5@GDReqPerio

; 575  : 		return;
; 576  : 
; 577  : 	pMsg.iUserGuid = lpObj->DBNumber;

  00040	8b 47 30	 mov	 eax, DWORD PTR [edi+48]

; 578  : 	pMsg.iUserIndex = lpObj->m_Index;
; 579  : 	pMsg.iItemCode = lpItemInfo->ItemPeriod[itemid].iItemCode;

  00043	8b ce		 mov	 ecx, esi
  00045	89 45 e0	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00048	03 c9		 add	 ecx, ecx
  0004a	8b 07		 mov	 eax, DWORD PTR [edi]
  0004c	89 45 dc	 mov	 DWORD PTR _pMsg$[ebp+4], eax

; 580  : 	pMsg.iLeftTime = lpItemInfo->ItemPeriod[itemid].iItemPeriodLeftTime;
; 581  : 	pMsg.iUsedTime = lpItemInfo->ItemPeriod[itemid].iItemPeriodUsedTime;
; 582  : 	memcpy(pMsg.chCharacterName, lpItemInfo->szName, sizeof(pMsg.chCharacterName));
; 583  : 
; 584  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x07, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  0004f	6a 24		 push	 36			; 00000024H
  00051	8b 44 ca 24	 mov	 eax, DWORD PTR [edx+ecx*8+36]
  00055	89 45 e4	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  00058	8b 44 ca 2c	 mov	 eax, DWORD PTR [edx+ecx*8+44]
  0005c	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+20], eax
  0005f	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00062	03 c0		 add	 eax, eax
  00064	6a 07		 push	 7
  00066	68 d0 00 00 00	 push	 208			; 000000d0H
  0006b	8b 44 c2 08	 mov	 eax, DWORD PTR [edx+eax*8+8]
  0006f	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+16], eax
  00072	f3 0f 7e 42 14	 movq	 xmm0, QWORD PTR [edx+20]
  00077	66 0f d6 45 f0	 movq	 QWORD PTR _pMsg$[ebp+24], xmm0
  0007c	66 8b 42 1c	 mov	 ax, WORD PTR [edx+28]
  00080	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+32], ax
  00084	8a 42 1e	 mov	 al, BYTE PTR [edx+30]
  00087	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+34], al
  0008a	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00093	83 c4 10	 add	 esp, 16			; 00000010H

; 585  : 
; 586  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_UPDATE));

  00096	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0009e	6a 24		 push	 36			; 00000024H
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN5@GDReqPerio:

; 587  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	5f		 pop	 edi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5e		 pop	 esi
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 08 00	 ret	 8
?GDReqPeriodItemUpdate@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInquiry, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 534  : 	PMSG_REQ_PERIODITEM_INQUIRY pMsg;
; 535  : 
; 536  : 	pMsg.iUserIndex = lpObj->m_Index;
; 537  : 	pMsg.iUserGuid = lpObj->DBNumber;
; 538  : 
; 539  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x01, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  00013	6a 0c		 push	 12			; 0000000cH
  00015	6a 01		 push	 1
  00017	68 d0 00 00 00	 push	 208			; 000000d0H
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00021	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00024	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00030	83 c4 10	 add	 esp, 16			; 00000010H

; 540  : 
; 541  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INQUIRY));

  00033	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0003b	6a 0c		 push	 12			; 0000000cH
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 542  : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?GDReqPeriodItemInquiry@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInquiry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
$T1 = -280						; size = 8
_lpObj$GSCopy$1$ = -272					; size = 4
tv249 = -268						; size = 4
_iEffectType2$ = -264					; size = 4
_iEffectType1$ = -260					; size = 4
_iItemPeriodDate$ = -256				; size = 4
_tExpireDate$ = -252					; size = 8
_this$GSCopy$1$ = -244					; size = 4
tv253 = -244						; size = 4
_ttm$2 = -240						; size = 36
_ttm$3 = -204						; size = 36
_ttm$4 = -168						; size = 36
_ttm$5 = -132						; size = 36
_ttm$6 = -96						; size = 36
_pMsg$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_iItemEffectDate$ = 16					; size = 4
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemInsert, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]

; 463  : 
; 464  : 	if ( g_ItemAddOption.SearchItemEffectType(iItemCode, &iEffectType1, &iEffectType2, &iItemPeriodDate) == false )

  00017	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR _iItemPeriodDate$[ebp]
  0001d	56		 push	 esi
  0001e	8b 75 10	 mov	 esi, DWORD PTR _iItemEffectDate$[ebp]
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	57		 push	 edi
  00025	8b 7d 0c	 mov	 edi, DWORD PTR _iItemCode$[ebp]
  00028	50		 push	 eax
  00029	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _iEffectType2$[ebp]
  0002f	89 8d 0c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00035	50		 push	 eax
  00036	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _iEffectType1$[ebp]
  0003c	89 9d f0 fe ff
	ff		 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], ebx
  00042	50		 push	 eax
  00043	57		 push	 edi
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00049	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iEffectType1$[ebp], 0
  00053	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iEffectType2$[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 412  : 	m_time(0)

  0005d	66 0f 13 85 04
	ff ff ff	 movlpd	 QWORD PTR _tExpireDate$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 462  : 	int iItemPeriodDate = 0;

  00065	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _iItemPeriodDate$[ebp], 0

; 463  : 
; 464  : 	if ( g_ItemAddOption.SearchItemEffectType(iItemCode, &iEffectType1, &iEffectType2, &iItemPeriodDate) == false )

  0006f	e8 00 00 00 00	 call	 ?SearchItemEffectType@CItemAddOption@@QAE_NHPAH00@Z ; CItemAddOption::SearchItemEffectType
  00074	84 c0		 test	 al, al
  00076	0f 84 b2 01 00
	00		 je	 $LN1@GDReqPerio

; 465  : 		return;
; 466  : 
; 467  : 	if ( iItemEffectDate == -1 )

  0007c	83 fe ff	 cmp	 esi, -1
  0007f	75 1b		 jne	 SHORT $LN3@GDReqPerio

; 468  : 		iItemEffectDate = iItemPeriodDate / 60;

  00081	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00086	f7 ad 00 ff ff
	ff		 imul	 DWORD PTR _iItemPeriodDate$[ebp]
  0008c	03 95 00 ff ff
	ff		 add	 edx, DWORD PTR _iItemPeriodDate$[ebp]
  00092	c1 fa 05	 sar	 edx, 5
  00095	8b f2		 mov	 esi, edx
  00097	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0009a	03 f2		 add	 esi, edx
$LN3@GDReqPerio:

; 469  : 
; 470  : 	int iItemOption = g_ItemAddOption.SearchItemOption(iItemCode);

  0009c	57		 push	 edi
  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  000a2	e8 00 00 00 00	 call	 ?SearchItemOption@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOption

; 471  : 
; 472  : 	if ( iItemOption == -1 )

  000a7	83 f8 ff	 cmp	 eax, -1
  000aa	0f 84 7e 01 00
	00		 je	 $LN1@GDReqPerio

; 473  : 		return;
; 474  : 
; 475  : 	pMsg.btItemOption = iItemOption;
; 476  : 	pMsg.iUserIndex = lpObj->m_Index;
; 477  : 	pMsg.iUserGuid = lpObj->DBNumber;
; 478  : 	pMsg.iItemCode = iItemCode;
; 479  : 	pMsg.btItemEffectType1 = iEffectType1;
; 480  : 	pMsg.btItemEffectType2 = iEffectType2;
; 481  : 	pMsg.iItemPeriodDate = iItemEffectDate;
; 482  : 	memcpy(pMsg.chUserID, lpObj->Name, sizeof(pMsg.chUserID));

  000b0	f3 0f 7e 43 5d	 movq	 xmm0, QWORD PTR [ebx+93]
  000b5	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  000b8	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+53], al
  000bb	8b 03		 mov	 eax, DWORD PTR [ebx]
  000bd	89 45 c8	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  000c0	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000c3	89 45 cc	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  000c6	8a 85 fc fe ff
	ff		 mov	 al, BYTE PTR _iEffectType1$[ebp]
  000cc	88 45 d8	 mov	 BYTE PTR _pMsg$[ebp+20], al
  000cf	8a 85 f8 fe ff
	ff		 mov	 al, BYTE PTR _iEffectType2$[ebp]
  000d5	88 45 d9	 mov	 BYTE PTR _pMsg$[ebp+21], al
  000d8	66 8b 41 08	 mov	 ax, WORD PTR [ecx+8]
  000dc	66 89 45 e2	 mov	 WORD PTR _pMsg$[ebp+30], ax
  000e0	8a 41 0a	 mov	 al, BYTE PTR [ecx+10]
  000e3	88 45 e4	 mov	 BYTE PTR _pMsg$[ebp+32], al

; 484  : 	tExpireDate = this->CalcItemUseEndTime(iItemEffectDate);

  000e6	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ec	56		 push	 esi
  000ed	89 8d f4 fe ff
	ff		 mov	 DWORD PTR tv249[ebp], ecx
  000f3	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000f9	50		 push	 eax
  000fa	89 7d d0	 mov	 DWORD PTR _pMsg$[ebp+12], edi
  000fd	89 75 d4	 mov	 DWORD PTR _pMsg$[ebp+16], esi
  00100	66 0f d6 45 da	 movq	 QWORD PTR _pMsg$[ebp+22], xmm0
  00105	e8 00 00 00 00	 call	 ?CalcItemUseEndTime@CCashItemPeriodSystem@@QAE?AVCTime@ATL@@H@Z ; CCashItemPeriodSystem::CalcItemUseEndTime
  0010a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010c	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 697  : 	ptm = GetLocalTm(&ttm);

  00112	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 484  : 	tExpireDate = this->CalcItemUseEndTime(iItemEffectDate);

  00118	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0011b	89 85 08 ff ff
	ff		 mov	 DWORD PTR _tExpireDate$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 697  : 	ptm = GetLocalTm(&ttm);

  00121	8d 45 a0	 lea	 eax, DWORD PTR _ttm$6[ebp]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  0012a	85 c0		 test	 eax, eax
  0012c	74 05		 je	 SHORT $LN10@GDReqPerio
  0012e	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  00131	eb 03		 jmp	 SHORT $LN11@GDReqPerio
$LN10@GDReqPerio:
  00133	83 cb ff	 or	 ebx, -1
$LN11@GDReqPerio:

; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  00136	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _ttm$5[ebp]
  0013c	50		 push	 eax
  0013d	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  00143	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  00148	85 c0		 test	 eax, eax
  0014a	74 0b		 je	 SHORT $LN14@GDReqPerio
  0014c	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0014f	89 b5 0c ff ff
	ff		 mov	 DWORD PTR tv253[ebp], esi
  00155	eb 0a		 jmp	 SHORT $LN15@GDReqPerio
$LN14@GDReqPerio:
  00157	c7 85 0c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv253[ebp], -1
$LN15@GDReqPerio:

; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  00161	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ttm$4[ebp]
  00167	50		 push	 eax
  00168	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  0016e	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  00173	85 c0		 test	 eax, eax
  00175	74 05		 je	 SHORT $LN18@GDReqPerio
  00177	8b 78 0c	 mov	 edi, DWORD PTR [eax+12]
  0017a	eb 02		 jmp	 SHORT $LN19@GDReqPerio
$LN18@GDReqPerio:
  0017c	33 ff		 xor	 edi, edi
$LN19@GDReqPerio:

; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  0017e	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR _ttm$3[ebp]
  00184	50		 push	 eax
  00185	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  0018b	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00190	85 c0		 test	 eax, eax
  00192	74 06		 je	 SHORT $LN22@GDReqPerio
  00194	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00197	46		 inc	 esi
  00198	eb 02		 jmp	 SHORT $LN23@GDReqPerio
$LN22@GDReqPerio:
  0019a	33 f6		 xor	 esi, esi
$LN23@GDReqPerio:

; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )
; 418  : {
; 419  : }
; 420  : 
; 421  : inline CTime::CTime(
; 422  : 	_In_ int nYear,
; 423  : 	_In_ int nMonth,
; 424  : 	_In_ int nDay,
; 425  : 	_In_ int nHour,
; 426  : 	_In_ int nMin,
; 427  : 	_In_ int nSec,
; 428  : 	_In_ int nDST)
; 429  : {
; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );
; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );
; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );
; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based
; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based
; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);
; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)
; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);
; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );
; 554  : }
; 555  : 
; 556  : inline bool CTime::operator==(_In_ CTime time) const throw()
; 557  : {
; 558  : 	return( m_time == time.m_time );
; 559  : }
; 560  : 
; 561  : inline bool CTime::operator!=(_In_ CTime time) const throw()
; 562  : {
; 563  : 	return( m_time != time.m_time );
; 564  : }
; 565  : 
; 566  : inline bool CTime::operator<(_In_ CTime time) const throw()
; 567  : {
; 568  : 	return( m_time < time.m_time );
; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );
; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  0019c	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _ttm$2[ebp]
  001a2	50		 push	 eax
  001a3	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR _tExpireDate$[ebp]
  001a9	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  001ae	85 c0		 test	 eax, eax
  001b0	74 0a		 je	 SHORT $LN26@GDReqPerio
  001b2	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001b5	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  001ba	eb 02		 jmp	 SHORT $LN27@GDReqPerio
$LN26@GDReqPerio:
  001bc	33 c0		 xor	 eax, eax
$LN27@GDReqPerio:
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp

; 486  : 	wsprintf(pMsg.chExpireDate, "%d-%d-%d %d:%d", tExpireDate.GetYear(), tExpireDate.GetMonth(), tExpireDate.GetDay(), tExpireDate.GetHour(), tExpireDate.GetMinute());

  001be	53		 push	 ebx
  001bf	ff b5 0c ff ff
	ff		 push	 DWORD PTR tv253[ebp]
  001c5	57		 push	 edi
  001c6	56		 push	 esi
  001c7	50		 push	 eax
  001c8	8d 45 e5	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OAFJLBNC@?$CFd?9?$CFd?9?$CFd?5?$CFd?3?$CFd?$AA@
  001d0	50		 push	 eax
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 487  : 
; 488  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x03, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  001d7	6a 38		 push	 56			; 00000038H
  001d9	6a 03		 push	 3
  001db	8d 45 c4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001de	68 d0 00 00 00	 push	 208			; 000000d0H
  001e3	50		 push	 eax
  001e4	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  001e9	83 c4 2c	 add	 esp, 44			; 0000002cH

; 489  : 
; 490  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_INSERT));

  001ec	8d 45 c4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001f4	6a 38		 push	 56			; 00000038H
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 491  : 
; 492  : 	LogAddTD("[CashShop][PeriodItemInsert Req] - ID : %s, Name : %s, ItemCode : %d, Effect1 : %d, Effect2 : %d, UseTime : %d, ExpireDate : %s",

  001fc	8d 45 e5	 lea	 eax, DWORD PTR _pMsg$[ebp+33]
  001ff	50		 push	 eax
  00200	ff 75 d4	 push	 DWORD PTR _pMsg$[ebp+16]
  00203	0f b6 45 d9	 movzx	 eax, BYTE PTR _pMsg$[ebp+21]
  00207	50		 push	 eax
  00208	0f b6 45 d8	 movzx	 eax, BYTE PTR _pMsg$[ebp+20]
  0020c	50		 push	 eax
  0020d	ff 75 d0	 push	 DWORD PTR _pMsg$[ebp+12]
  00210	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _lpObj$GSCopy$1$[ebp]
  00216	ff b5 f4 fe ff
	ff		 push	 DWORD PTR tv249[ebp]
  0021c	83 c0 52	 add	 eax, 82			; 00000052H
  0021f	50		 push	 eax
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@INOHPBEA@?$FLCashShop?$FN?$FLPeriodItemInsert?5Req?$FN@
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0022b	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@GDReqPerio:

; 493  : 		lpObj->AccountID, lpObj->Name, pMsg.iItemCode, pMsg.btItemEffectType1, pMsg.btItemEffectType2, pMsg.iItemPeriodDate, pMsg.chExpireDate);
; 494  : }

  0022e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	33 cd		 xor	 ecx, ebp
  00235	5b		 pop	 ebx
  00236	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023b	8b e5		 mov	 esp, ebp
  0023d	5d		 pop	 ebp
  0023e	c2 0c 00	 ret	 12			; 0000000cH
?GDReqPeriodItemInsert@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@HH@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemInsert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GDReqPeriodItemList, COMDAT
; _this$ = ecx

; 511  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 512  : 	PMSG_REQ_PERIODITEM_LIST pMsg;
; 513  : 
; 514  : 	pMsg.iUserIndex = lpObj->m_Index;
; 515  : 	pMsg.iUserGuid = lpObj->DBNumber;
; 516  : 	memcpy(pMsg.chCharacterName, lpObj->Name, sizeof(pMsg.chCharacterName));
; 517  : 
; 518  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xD0, 0x05, sizeof(PMSG_REQ_PERIODITEM_LIST));

  00013	6a 18		 push	 24			; 00000018H
  00015	6a 05		 push	 5
  00017	68 d0 00 00 00	 push	 208			; 000000d0H
  0001c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001e	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  00023	89 45 e8	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  00026	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00029	89 45 ec	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  0002c	66 8b 41 65	 mov	 ax, WORD PTR [ecx+101]
  00030	66 89 45 f8	 mov	 WORD PTR _pMsg$[ebp+20], ax
  00034	8a 41 67	 mov	 al, BYTE PTR [ecx+103]
  00037	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+22], al
  0003a	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003d	50		 push	 eax
  0003e	66 0f d6 45 f0	 movq	 QWORD PTR _pMsg$[ebp+12], xmm0
  00043	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00048	83 c4 10	 add	 esp, 16			; 00000010H

; 519  : 
; 520  : 	cDBSMng.Send((char *)&pMsg, sizeof(PMSG_REQ_PERIODITEM_LIST));

  0004b	8d 45 e4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00053	6a 18		 push	 24			; 00000018H
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 521  : }

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005e	33 cd		 xor	 ecx, ebp
  00060	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GDReqPeriodItemList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::ClearPeriodItemEffect, COMDAT
; _this$ = ecx

; 365  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 366  : 	int iItemInfoIndex = 0;
; 367  : 	iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	8b 87 80 24 00
	00		 mov	 eax, DWORD PTR [edi+9344]

; 368  : 
; 369  : 	if(iItemInfoIndex < 0 || iItemInfoIndex > MAX_ITEM_PERIOD_INFO)

  00011	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00016	0f 87 fd 00 00
	00		 ja	 $LN11@ClearPerio

; 371  : 
; 372  : 	if(ItemPeriodInfo[iItemInfoIndex].btUsedInfo != TRUE && ItemPeriodInfo[iItemInfoIndex].iUserIndex != lpObj->m_Index)

  0001c	56		 push	 esi
  0001d	69 f0 18 02 00
	00		 imul	 esi, eax, 536
  00023	03 f1		 add	 esi, ecx
  00025	80 7e 08 01	 cmp	 BYTE PTR [esi+8], 1
  00029	74 12		 je	 SHORT $LN12@ClearPerio
  0002b	0f b7 46 0a	 movzx	 eax, WORD PTR [esi+10]
  0002f	3b 07		 cmp	 eax, DWORD PTR [edi]
  00031	74 0a		 je	 SHORT $LN12@ClearPerio

; 373  : 		return FALSE;

  00033	5e		 pop	 esi
  00034	33 c0		 xor	 eax, eax
  00036	5f		 pop	 edi

; 437  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN12@ClearPerio:

; 374  : 
; 375  : 	ItemPeriodInfo[iItemInfoIndex].btUsedCount --;

  0003d	80 46 09 ff	 add	 BYTE PTR [esi+9], 255	; 000000ffH

; 376  : 
; 377  : 	if(ItemPeriodInfo[iItemInfoIndex].btUsedCount == 0 || iItemCode == -1)

  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  00044	53		 push	 ebx
  00045	74 49		 je	 SHORT $LN15@ClearPerio
  00047	83 f9 ff	 cmp	 ecx, -1
  0004a	74 44		 je	 SHORT $LN15@ClearPerio

; 402  : 	}
; 403  : 	else
; 404  : 	{
; 405  : 		int n = 0;
; 406  : 		for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  0004c	83 c6 24	 add	 esi, 36			; 00000024H
  0004f	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
$LL7@ClearPerio:

; 407  : 		{
; 408  : 			if(ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode == iItemCode)

  00054	8b 06		 mov	 eax, DWORD PTR [esi]
  00056	3b c1		 cmp	 eax, ecx
  00058	75 2c		 jne	 SHORT $LN5@ClearPerio

; 409  : 			{
; 410  : 				g_ItemAddOption.ClearItemEffect(lpObj,ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode,2);

  0005a	6a 02		 push	 2
  0005c	50		 push	 eax
  0005d	57		 push	 edi
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00063	e8 00 00 00 00	 call	 ?ClearItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]

; 411  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btUsedItem = FALSE;

  0006b	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 412  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode = FALSE;

  00072	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 413  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btItemOption = FALSE;
; 414  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType1 = FALSE;
; 415  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType2 = FALSE;
; 416  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodLeftTime = FALSE;

  00078	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 417  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodUsedTime = FALSE;

  0007f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN5@ClearPerio:

; 402  : 	}
; 403  : 	else
; 404  : 	{
; 405  : 		int n = 0;
; 406  : 		for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  00086	83 c6 10	 add	 esi, 16			; 00000010H
  00089	83 eb 01	 sub	 ebx, 1
  0008c	75 c6		 jne	 SHORT $LL7@ClearPerio

; 368  : 
; 369  : 	if(iItemInfoIndex < 0 || iItemInfoIndex > MAX_ITEM_PERIOD_INFO)

  0008e	eb 5e		 jmp	 SHORT $LN6@ClearPerio
$LN15@ClearPerio:

; 378  : 	{
; 379  : 		//SavePeriodInfo(lpObj);
; 380  : 
; 381  : 		ItemPeriodInfo[iItemInfoIndex].btUsedInfo = FALSE;

  00090	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00097	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H

; 382  : 		ItemPeriodInfo[iItemInfoIndex].iUserIndex = FALSE;
; 383  : 		ItemPeriodInfo[iItemInfoIndex].iUserGuid = FALSE;

  0009c	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 384  : 		ItemPeriodInfo[iItemInfoIndex].btUsedCount = FALSE;
; 385  : 		ItemPeriodInfo[iItemInfoIndex].dwTickCount = FALSE;

  000a3	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 386  : 		ItemPeriodInfo[iItemInfoIndex].szName[0] = 0;

  000aa	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  000ae	83 c6 24	 add	 esi, 36			; 00000024H
$LL4@ClearPerio:

; 387  : 
; 388  : 		for(int n = 0; n < SUBITEM_INFO_COUNT; n++)
; 389  : 		{
; 390  : 
; 391  : 			g_ItemAddOption.ClearItemEffect(lpObj,ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode,2);

  000b1	6a 02		 push	 2
  000b3	ff 36		 push	 DWORD PTR [esi]
  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  000ba	57		 push	 edi
  000bb	e8 00 00 00 00	 call	 ?ClearItemEffect@CItemAddOption@@QAEEPAUOBJECTSTRUCT@@HH@Z ; CItemAddOption::ClearItemEffect

; 392  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btUsedItem = FALSE;

  000c0	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  000c7	8d 76 10	 lea	 esi, DWORD PTR [esi+16]

; 393  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode = FALSE;

  000ca	c7 46 f0 00 00
	00 00		 mov	 DWORD PTR [esi-16], 0

; 394  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btItemOption = FALSE;
; 395  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType1 = FALSE;
; 396  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType2 = FALSE;
; 397  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodLeftTime = FALSE;

  000d1	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0

; 398  : 			ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodUsedTime = FALSE;

  000d8	c7 46 f4 00 00
	00 00		 mov	 DWORD PTR [esi-12], 0
  000df	83 eb 01	 sub	 ebx, 1
  000e2	75 cd		 jne	 SHORT $LL4@ClearPerio

; 399  : 		}
; 400  : 
; 401  : 		lpObj->m_iPeriodItemEffectIndex = -1;

  000e4	c7 87 80 24 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+9344], -1
$LN6@ClearPerio:

; 418  : 			}
; 419  : 		}
; 420  : 	}
; 421  : 
; 422  : 	int BuffNumber = 0;
; 423  : 	BuffNumber = GetEffectNumber(iItemCode);

  000ee	ff 75 0c	 push	 DWORD PTR _iItemCode$[ebp]
  000f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f4	e8 00 00 00 00	 call	 ?GetEffectNumber@CCashItemPeriodSystem@@QAEHH@Z ; CCashItemPeriodSystem::GetEffectNumber

; 424  : 
; 425  : 	switch(BuffNumber)

  000f9	83 c0 ce	 add	 eax, -50		; ffffffceH
  000fc	5b		 pop	 ebx
  000fd	83 f8 04	 cmp	 eax, 4
  00100	77 0a		 ja	 SHORT $LN8@ClearPerio

; 426  : 	{
; 427  : 	case 50:
; 428  : 	case 51:
; 429  : 	case 52:
; 430  : 	case 53:
; 431  : 	case 54:
; 432  : 		gObjCalCharacter(lpObj->m_Index);

  00102	ff 37		 push	 DWORD PTR [edi]
  00104	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  00109	83 c4 04	 add	 esp, 4
$LN8@ClearPerio:

; 433  : 		break;
; 434  : 	}
; 435  : 
; 436  : 	return TRUE;

  0010c	5e		 pop	 esi
  0010d	b8 01 00 00 00	 mov	 eax, 1
  00112	5f		 pop	 edi

; 437  : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN11@ClearPerio:

; 370  : 		return FALSE;

  00119	33 c0		 xor	 eax, eax
  0011b	5f		 pop	 edi

; 437  : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::ClearPeriodItemEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?ClearPeriodItem@CCashItemPeriodSystem@@QAEEPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
tv295 = 12						; size = 4
_iItemCode$ = 12					; size = 4
?ClearPeriodItem@CCashItemPeriodSystem@@QAEEPAUOBJECTSTRUCT@@H@Z PROC ; CCashItemPeriodSystem::ClearPeriodItem, COMDAT
; _this$ = ecx

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 769  : 	int PeriodItemIndex = lpObj->m_iPeriodItemEffectIndex;

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi

; 770  : 	int ItemOption =0;
; 771  : 	ItemOption = g_ItemAddOption.SearchItemOption(iItemCode);

  0000b	ff 75 0c	 push	 DWORD PTR _iItemCode$[ebp]
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00013	8b b6 80 24 00
	00		 mov	 esi, DWORD PTR [esi+9344]
  00019	e8 00 00 00 00	 call	 ?SearchItemOption@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOption
  0001e	8b f8		 mov	 edi, eax

; 772  : 
; 773  : 	if(PeriodItemIndex == -1)

  00020	83 fe ff	 cmp	 esi, -1
  00023	74 32		 je	 SHORT $LN14@ClearPerio

; 774  : 		return TRUE;
; 775  : 
; 776  : 	if(ItemPeriodInfo[PeriodItemIndex].iUserGuid != lpObj->DBNumber)

  00025	69 ce 18 02 00
	00		 imul	 ecx, esi, 536
  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0002e	89 4d 0c	 mov	 DWORD PTR tv295[ebp], ecx
  00031	8b 44 19 0c	 mov	 eax, DWORD PTR [ecx+ebx+12]
  00035	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  00038	75 38		 jne	 SHORT $LN15@ClearPerio

; 777  : 		return FALSE;
; 778  : 
; 779  : 	for(int i = 0; i < SUBITEM_INFO_COUNT; i++)

  0003a	83 c1 21	 add	 ecx, 33			; 00000021H
  0003d	33 d2		 xor	 edx, edx
  0003f	03 cb		 add	 ecx, ebx
$LL4@ClearPerio:

; 780  : 	{
; 781  : 		if(ItemPeriodInfo[PeriodItemIndex].ItemPeriod[i].btUsedItem == TRUE
; 782  : 			&& ItemPeriodInfo[PeriodItemIndex].ItemPeriod[i].btItemOption == ItemOption)

  00041	80 79 ff 01	 cmp	 BYTE PTR [ecx-1], 1
  00045	75 07		 jne	 SHORT $LN2@ClearPerio
  00047	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0004a	3b c7		 cmp	 eax, edi
  0004c	74 12		 je	 SHORT $LN10@ClearPerio
$LN2@ClearPerio:

; 777  : 		return FALSE;
; 778  : 
; 779  : 	for(int i = 0; i < SUBITEM_INFO_COUNT; i++)

  0004e	42		 inc	 edx
  0004f	83 c1 10	 add	 ecx, 16			; 00000010H
  00052	83 fa 20	 cmp	 edx, 32			; 00000020H
  00055	7c ea		 jl	 SHORT $LL4@ClearPerio
$LN14@ClearPerio:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 786  : 		}
; 787  : 	}
; 788  : return TRUE;

  00059	b0 01		 mov	 al, 1
  0005b	5b		 pop	 ebx

; 789  : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN10@ClearPerio:

; 783  : 		{
; 784  : 			ClearPeriodItemEffect(lpObj,ItemPeriodInfo[PeriodItemIndex].ItemPeriod[i].iItemCode);

  00060	c1 e2 04	 shl	 edx, 4
  00063	8b cb		 mov	 ecx, ebx
  00065	03 55 0c	 add	 edx, DWORD PTR tv295[ebp]
  00068	ff 74 1a 24	 push	 DWORD PTR [edx+ebx+36]
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ?ClearPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItemEffect
$LN15@ClearPerio:

; 785  : 			return FALSE;

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	32 c0		 xor	 al, al
  00076	5b		 pop	 ebx

; 789  : }

  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
?ClearPeriodItem@CCashItemPeriodSystem@@QAEEPAUOBJECTSTRUCT@@H@Z ENDP ; CCashItemPeriodSystem::ClearPeriodItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z
_TEXT	SEGMENT
_ItemOption$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iItemCode$ = 12					; size = 4
_btEffectType1$ = 16					; size = 1
_btEffectType2$ = 20					; size = 1
_dwItemPeriod$ = 24					; size = 4
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z PROC ; CCashItemPeriodSystem::SetPeriodItemEffect, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 212  : 	int iItemInfoIndex = -1;
; 213  : 	int ItemOption = 0;
; 214  : 	int i = 0,n = 0;
; 215  : 
; 216  : 
; 217  : 	ItemOption = g_ItemAddOption.SearchItemOption(iItemCode);

  00005	8b 75 0c	 mov	 esi, DWORD PTR _iItemCode$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?SearchItemOption@CItemAddOption@@QAEHH@Z ; CItemAddOption::SearchItemOption
  00016	89 45 fc	 mov	 DWORD PTR _ItemOption$1$[ebp], eax

; 218  : 
; 219  : 	if(ItemOption == -1)

  00019	83 f8 ff	 cmp	 eax, -1
  0001c	75 0a		 jne	 SHORT $LN8@SetPeriodI

; 220  : 		return false;

  0001e	5f		 pop	 edi
  0001f	33 c0		 xor	 eax, eax
  00021	5e		 pop	 esi

; 273  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 14 00	 ret	 20			; 00000014H
$LN8@SetPeriodI:
  00028	53		 push	 ebx

; 221  : 
; 222  : 	ClearPeriodItem(lpObj,iItemCode);

  00029	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0002c	8b cf		 mov	 ecx, edi
  0002e	56		 push	 esi
  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?ClearPeriodItem@CCashItemPeriodSystem@@QAEEPAUOBJECTSTRUCT@@H@Z ; CCashItemPeriodSystem::ClearPeriodItem

; 223  : 
; 224  : 	if(lpObj->m_iPeriodItemEffectIndex != -1)

  00035	8b 83 80 24 00
	00		 mov	 eax, DWORD PTR [ebx+9344]
  0003b	83 f8 ff	 cmp	 eax, -1
  0003e	74 66		 je	 SHORT $LN9@SetPeriodI

; 225  : 	{
; 226  : 		iItemInfoIndex = lpObj->m_iPeriodItemEffectIndex;
; 227  : 		ItemPeriodInfo[iItemInfoIndex].btUsedCount++;

  00040	69 d0 18 02 00
	00		 imul	 edx, eax, 536
  00046	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]

; 228  : 
; 229  : 		for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  00049	33 c0		 xor	 eax, eax
  0004b	fe 44 3a 09	 inc	 BYTE PTR [edx+edi+9]
  0004f	03 ca		 add	 ecx, edx
$LL4@SetPeriodI:

; 230  : 		{
; 231  : 			if(ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btUsedItem == FALSE)

  00051	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00054	74 14		 je	 SHORT $LN16@SetPeriodI

; 228  : 
; 229  : 		for(n = 0; n < SUBITEM_INFO_COUNT; n++)

  00056	40		 inc	 eax
  00057	83 c1 10	 add	 ecx, 16			; 00000010H
  0005a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0005d	7c f2		 jl	 SHORT $LL4@SetPeriodI

; 269  : 			}
; 270  : 		}
; 271  : 	}
; 272  : 	return FALSE;

  0005f	5b		 pop	 ebx
  00060	5f		 pop	 edi
  00061	33 c0		 xor	 eax, eax
  00063	5e		 pop	 esi

; 273  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 14 00	 ret	 20			; 00000014H
$LN16@SetPeriodI:

; 232  : 			{
; 233  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btUsedItem = TRUE;

  0006a	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]

; 234  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemCode = iItemCode;

  0006d	03 c0		 add	 eax, eax
  0006f	c1 e1 04	 shl	 ecx, 4
  00072	03 ca		 add	 ecx, edx
  00074	c6 04 39 01	 mov	 BYTE PTR [ecx+edi], 1
  00078	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]

; 235  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType1 = btEffectType1;

  0007b	8a 45 10	 mov	 al, BYTE PTR _btEffectType1$[ebp]
  0007e	03 cf		 add	 ecx, edi
  00080	88 41 22	 mov	 BYTE PTR [ecx+34], al

; 236  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btEffectType2 = btEffectType2;

  00083	8a 45 14	 mov	 al, BYTE PTR _btEffectType2$[ebp]
  00086	88 41 23	 mov	 BYTE PTR [ecx+35], al

; 237  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].btItemOption = ItemOption;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _ItemOption$1$[ebp]
  0008c	88 41 21	 mov	 BYTE PTR [ecx+33], al

; 238  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodLeftTime = dwItemPeriod;

  0008f	8b 45 18	 mov	 eax, DWORD PTR _dwItemPeriod$[ebp]

; 239  : 				ItemPeriodInfo[iItemInfoIndex].ItemPeriod[n].iItemPeriodUsedTime = 0;
; 240  : 
; 241  : 				_SetItemEffect(lpObj,iItemCode,dwItemPeriod);

  00092	50		 push	 eax
  00093	89 71 24	 mov	 DWORD PTR [ecx+36], esi
  00096	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00099	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  000a0	56		 push	 esi

; 242  : 				return TRUE;

  000a1	e9 98 00 00 00	 jmp	 $LN25@SetPeriodI
$LN9@SetPeriodI:

; 243  : 			}
; 244  : 		}
; 245  : 	}
; 246  : 	else
; 247  : 	{
; 248  : 		for(i = 0; i < MAX_ITEM_PERIOD_INFO; i++)

  000a6	33 c0		 xor	 eax, eax
  000a8	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  000ab	0f 1f 44 00 00	 npad	 5
$LL7@SetPeriodI:

; 249  : 		{
; 250  : 			if(ItemPeriodInfo[i].btUsedInfo == FALSE)

  000b0	80 39 00	 cmp	 BYTE PTR [ecx], 0
  000b3	74 19		 je	 SHORT $LN17@SetPeriodI

; 243  : 			}
; 244  : 		}
; 245  : 	}
; 246  : 	else
; 247  : 	{
; 248  : 		for(i = 0; i < MAX_ITEM_PERIOD_INFO; i++)

  000b5	40		 inc	 eax
  000b6	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  000bc	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  000c1	7c ed		 jl	 SHORT $LL7@SetPeriodI

; 269  : 			}
; 270  : 		}
; 271  : 	}
; 272  : 	return FALSE;

  000c3	5b		 pop	 ebx
  000c4	5f		 pop	 edi
  000c5	33 c0		 xor	 eax, eax
  000c7	5e		 pop	 esi

; 273  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 14 00	 ret	 20			; 00000014H
$LN17@SetPeriodI:

; 251  : 			{
; 252  : 				lpObj->m_iPeriodItemEffectIndex = i;
; 253  : 				ItemPeriodInfo[i].btUsedInfo = TRUE;

  000ce	69 f0 18 02 00
	00		 imul	 esi, eax, 536
  000d4	03 f7		 add	 esi, edi
  000d6	89 83 80 24 00
	00		 mov	 DWORD PTR [ebx+9344], eax
  000dc	c6 46 08 01	 mov	 BYTE PTR [esi+8], 1

; 254  : 				ItemPeriodInfo[i].iUserGuid = lpObj->DBNumber;

  000e0	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  000e3	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 255  : 				ItemPeriodInfo[i].iUserIndex = lpObj->m_Index;

  000e6	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  000e9	66 89 46 0a	 mov	 WORD PTR [esi+10], ax

; 256  : 				ItemPeriodInfo[i].dwTickCount = GetTickCount();

  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000f3	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 257  : 				ItemPeriodInfo[i].btUsedCount = 1;
; 258  : 				memcpy(ItemPeriodInfo[i].szName,lpObj->Name,sizeof(lpObj->AccountID));
; 259  : 				ItemPeriodInfo[i].ItemPeriod[0].btUsedItem = TRUE;
; 260  : 				ItemPeriodInfo[i].ItemPeriod[0].iItemCode = iItemCode;

  000f6	8b 4d 0c	 mov	 ecx, DWORD PTR _iItemCode$[ebp]
  000f9	c6 46 09 01	 mov	 BYTE PTR [esi+9], 1
  000fd	f3 0f 7e 43 5d	 movq	 xmm0, QWORD PTR [ebx+93]
  00102	66 0f d6 46 14	 movq	 QWORD PTR [esi+20], xmm0
  00107	0f b7 43 65	 movzx	 eax, WORD PTR [ebx+101]
  0010b	66 89 46 1c	 mov	 WORD PTR [esi+28], ax
  0010f	0f b6 43 67	 movzx	 eax, BYTE PTR [ebx+103]
  00113	88 46 1e	 mov	 BYTE PTR [esi+30], al

; 261  : 				ItemPeriodInfo[i].ItemPeriod[0].btEffectType1 = btEffectType1;

  00116	8a 45 10	 mov	 al, BYTE PTR _btEffectType1$[ebp]
  00119	88 46 22	 mov	 BYTE PTR [esi+34], al

; 262  : 				ItemPeriodInfo[i].ItemPeriod[0].btEffectType2 = btEffectType2;

  0011c	8a 45 14	 mov	 al, BYTE PTR _btEffectType2$[ebp]
  0011f	88 46 23	 mov	 BYTE PTR [esi+35], al

; 263  : 				ItemPeriodInfo[i].ItemPeriod[0].btItemOption = ItemOption;

  00122	8b 45 fc	 mov	 eax, DWORD PTR _ItemOption$1$[ebp]
  00125	88 46 21	 mov	 BYTE PTR [esi+33], al

; 264  : 				ItemPeriodInfo[i].ItemPeriod[0].iItemPeriodLeftTime = dwItemPeriod;

  00128	8b 45 18	 mov	 eax, DWORD PTR _dwItemPeriod$[ebp]

; 265  : 				ItemPeriodInfo[i].ItemPeriod[0].iItemPeriodUsedTime = 0;
; 266  : 
; 267  : 				_SetItemEffect(lpObj,iItemCode,dwItemPeriod);

  0012b	50		 push	 eax
  0012c	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1
  00130	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  00133	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00136	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0013d	51		 push	 ecx
$LN25@SetPeriodI:
  0013e	53		 push	 ebx
  0013f	8b cf		 mov	 ecx, edi
  00141	e8 00 00 00 00	 call	 ?_SetItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HH@Z ; CCashItemPeriodSystem::_SetItemEffect
  00146	5b		 pop	 ebx
  00147	5f		 pop	 edi

; 268  : 				return TRUE;

  00148	b8 01 00 00 00	 mov	 eax, 1
  0014d	5e		 pop	 esi

; 273  : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 14 00	 ret	 20			; 00000014H
?SetPeriodItemEffect@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@HEEK@Z ENDP ; CCashItemPeriodSystem::SetPeriodItemEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CCashItemPeriodSystem::GetUserPeriodItemList, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  : }

  00003	5d		 pop	 ebp

; 122  : 	this->GDReqPeriodItemList(lpObj);

  00004	e9 00 00 00 00	 jmp	 ?GDReqPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::GDReqPeriodItemList
?GetUserPeriodItemList@CCashItemPeriodSystem@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CCashItemPeriodSystem::GetUserPeriodItemList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?Initialize@CCashItemPeriodSystem@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CCashItemPeriodSystem@@QAEXXZ PROC		; CCashItemPeriodSystem::Initialize, COMDAT
; _this$ = ecx

; 32   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 33   : 	this->iItemPeriodInfoCount = 0;

  00004	be e8 03 00 00	 mov	 esi, 1000		; 000003e8H
  00009	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00010	8d 57 09	 lea	 edx, DWORD PTR [edi+9]
$LL4@Initialize:

; 36   : 	{
; 37   : 		ItemPeriodInfo[i].btUsedInfo = FALSE;

  00013	c7 42 ff 00 00
	00 00		 mov	 DWORD PTR [edx-1], 0
  0001a	8d 42 18	 lea	 eax, DWORD PTR [edx+24]

; 38   : 		ItemPeriodInfo[i].btUsedCount = FALSE;
; 39   : 		ItemPeriodInfo[i].iUserIndex = 0;
; 40   : 		ItemPeriodInfo[i].iUserGuid = 0;

  0001d	c7 42 03 00 00
	00 00		 mov	 DWORD PTR [edx+3], 0
  00024	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H

; 41   : 		ItemPeriodInfo[i].dwTickCount = NULL;

  00029	c7 42 07 00 00
	00 00		 mov	 DWORD PTR [edx+7], 0

; 42   : 		ItemPeriodInfo[i].szName[0] = NULL;

  00030	c6 42 0b 00	 mov	 BYTE PTR [edx+11], 0
$LL7@Initialize:

; 43   : 
; 44   : 		for(int n = 0; n < SUBITEM_INFO_COUNT; n++)
; 45   : 		{
; 46   : 			ItemPeriodInfo[i].ItemPeriod[n].btUsedItem = 0;

  00034	c7 40 ff 00 00
	00 00		 mov	 DWORD PTR [eax-1], 0
  0003b	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 47   : 			ItemPeriodInfo[i].ItemPeriod[n].btItemOption = 0;
; 48   : 			ItemPeriodInfo[i].ItemPeriod[n].btEffectType1 = 0;
; 49   : 			ItemPeriodInfo[i].ItemPeriod[n].btEffectType2 = 0;
; 50   : 			ItemPeriodInfo[i].ItemPeriod[n].iItemCode = 0;

  0003e	c7 40 f3 00 00
	00 00		 mov	 DWORD PTR [eax-13], 0

; 51   : 			ItemPeriodInfo[i].ItemPeriod[n].iItemPeriodUsedTime = 0;

  00045	c7 40 f7 00 00
	00 00		 mov	 DWORD PTR [eax-9], 0

; 52   : 			ItemPeriodInfo[i].ItemPeriod[n].iItemPeriodLeftTime = 0;

  0004c	c7 40 fb 00 00
	00 00		 mov	 DWORD PTR [eax-5], 0
  00053	83 e9 01	 sub	 ecx, 1
  00056	75 dc		 jne	 SHORT $LL7@Initialize

; 34   : 
; 35   : 	for(int i = 0; i < MAX_ITEM_PERIOD_INFO; i++)

  00058	81 c2 18 02 00
	00		 add	 edx, 536		; 00000218H
  0005e	83 ee 01	 sub	 esi, 1
  00061	75 b0		 jne	 SHORT $LL4@Initialize

; 53   : 		}
; 54   : 	}
; 55   : 
; 56   : 	if (g_bRunningPeriodCheckThread == FALSE )

  00063	39 35 00 00 00
	00		 cmp	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, esi ; g_bRunningPeriodCheckThread
  00069	75 35		 jne	 SHORT $LN9@Initialize

; 57   : 	{
; 58   : 		this->hThreadHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)CCashItemPeriodSystem::PeriodCheckThread, this->ItemPeriodInfo, 0, NULL);

  0006b	56		 push	 esi
  0006c	56		 push	 esi
  0006d	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ?PeriodCheckThread@CCashItemPeriodSystem@@SGKPAX@Z ; CCashItemPeriodSystem::PeriodCheckThread
  00076	56		 push	 esi
  00077	56		 push	 esi
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateThread@24
  0007e	89 87 c8 2d 08
	00		 mov	 DWORD PTR [edi+536008], eax

; 59   : 		
; 60   : 		if ( this->hThreadHandle == NULL )

  00084	85 c0		 test	 eax, eax
  00086	75 18		 jne	 SHORT $LN9@Initialize

; 61   : 		{
; 62   : 			LogAdd("CreateThread() failed with error %d", GetLastError());

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HNFLFMJK@CreateThread?$CI?$CJ?5failed?5with?5error@
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0009a	83 c4 08	 add	 esp, 8
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi

; 69   : }

  0009f	c3		 ret	 0
$LN9@Initialize:

; 63   : 			return;
; 64   : 		}
; 65   : 	}
; 66   : 
; 67   : 	g_bRunningPeriodCheckThread = TRUE;

  000a0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bRunningPeriodCheckThread@@3HA, 1 ; g_bRunningPeriodCheckThread

; 68   : 	CloseHandle(this->hThreadHandle);

  000aa	ff b7 c8 2d 08
	00		 push	 DWORD PTR [edi+536008]
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi

; 69   : }

  000b8	c3		 ret	 0
?Initialize@CCashItemPeriodSystem@@QAEXXZ ENDP		; CCashItemPeriodSystem::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ??1CCashItemPeriodSystem@@UAE@XZ
_TEXT	SEGMENT
??1CCashItemPeriodSystem@@UAE@XZ PROC			; CCashItemPeriodSystem::~CCashItemPeriodSystem, COMDAT
; _this$ = ecx

; 27   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 28   : 	return;
; 29   : }

  00006	c3		 ret	 0
??1CCashItemPeriodSystem@@UAE@XZ ENDP			; CCashItemPeriodSystem::~CCashItemPeriodSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ??0CCashItemPeriodSystem@@QAE@XZ
_TEXT	SEGMENT
??0CCashItemPeriodSystem@@QAE@XZ PROC			; CCashItemPeriodSystem::CCashItemPeriodSystem, COMDAT
; _this$ = ecx

; 22   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCashItemPeriodSystem@@6B@

; 23   : 	return;
; 24   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CCashItemPeriodSystem@@QAE@XZ ENDP			; CCashItemPeriodSystem::CCashItemPeriodSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetMinute
  0001d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 699  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetMinute:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	83 c8 ff	 or	 eax, -1
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetHour
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 690  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetHour:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	83 c8 ff	 or	 eax, -1
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetDay
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 681  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetDay:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	33 c0		 xor	 eax, eax
  00033	33 cd		 xor	 ecx, ebp
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00019	85 c0		 test	 eax, eax
  0001b	74 12		 je	 SHORT $LN3@GetMonth
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	40		 inc	 eax

; 672  : }

  00021	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00024	33 cd		 xor	 ecx, ebp
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@GetMonth:
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 c0		 xor	 eax, eax
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 16		 je	 SHORT $LN3@GetYear
  0001d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00020	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH

; 663  : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN3@GetYear:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 c0		 xor	 eax, eax
  00038	33 cd		 xor	 ecx, ebp
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptmTemp$1 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ptm$[ebp]

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00014	85 f6		 test	 esi, esi
  00016	74 4c		 je	 SHORT $LN13@GetLocalTm

; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00018	51		 push	 ecx
  00019	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$1[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __localtime64_s
  00022	83 c4 08	 add	 esp, 8

; 615  : 
; 616  : 		if (err != 0)

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN10@GetLocalTm

; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002f	33 cd		 xor	 ecx, ebp
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN10@GetLocalTm:

; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;

  0003c	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp]
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _ptmTemp$1[ebp+32]

; 622  : 		return ptm;

  00043	8b c6		 mov	 eax, esi
  00045	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00048	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp+16]
  0004c	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00050	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN13@GetLocalTm:

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00064	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00069	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN15@GetLocalTm:
$LN12@GetLocalTm:
  0006e	cc		 int	 3
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	03 55 0c	 add	 edx, DWORD PTR _span$[ebp]

; 417  : 	m_time( time )

  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0000b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _span$[ebp+4]

; 417  : 	m_time( time )

  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 554  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_time$ = 12						; size = 8
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z PROC		; ATL::CTime::operator-, COMDAT
; _this$ = ecx

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 543  : 	return( CTimeSpan( m_time-time.m_time ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b 55 0c	 sub	 edx, DWORD PTR _time$[ebp]

; 263  : 	m_timeSpan( time )

  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 543  : 	return( CTimeSpan( m_time-time.m_time ) );

  0000b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000e	1b 4d 10	 sbb	 ecx, DWORD PTR _time$[ebp+4]

; 263  : 	m_timeSpan( time )

  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z ENDP		; ATL::CTime::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );

  00010	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	0f 8c 95 00 00
	00		 jl	 $LN65@CTime

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _nMonth$[ebp]
  00023	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00026	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00029	0f 87 90 00 00
	00		 ja	 $LN67@CTime

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0002f	53		 push	 ebx
  00030	57		 push	 edi
  00031	8b 7d 10	 mov	 edi, DWORD PTR _nDay$[ebp]
  00034	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00037	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0003a	0f 87 89 00 00
	00		 ja	 $LN68@CTime

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00040	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  00043	83 f8 17	 cmp	 eax, 23			; 00000017H
  00046	0f 87 87 00 00
	00		 ja	 $LN69@CTime

; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  0004c	8b 5d 18	 mov	 ebx, DWORD PTR _nMin$[ebp]
  0004f	83 fb 3b	 cmp	 ebx, 59			; 0000003bH
  00052	0f 87 85 00 00
	00		 ja	 $LN70@CTime

; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00058	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0005c	0f 87 85 00 00
	00		 ja	 $LN71@CTime

; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;

  00062	8b 55 1c	 mov	 edx, DWORD PTR _nSec$[ebp]

; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;

  00065	89 45 e0	 mov	 DWORD PTR _atm$[ebp+8], eax

; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  00068	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0006b	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax

; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  0006e	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  00071	05 94 f8 ff ff	 add	 eax, -1900		; fffff894H
  00076	89 55 d8	 mov	 DWORD PTR _atm$[ebp], edx
  00079	89 45 ec	 mov	 DWORD PTR _atm$[ebp+20], eax

; 450  : 	atm.tm_isdst = nDST;

  0007c	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  0007f	89 45 f8	 mov	 DWORD PTR _atm$[ebp+32], eax

; 451  : 
; 452  : 	m_time = _mktime64(&atm);

  00082	8d 45 d8	 lea	 eax, DWORD PTR _atm$[ebp]
  00085	50		 push	 eax
  00086	89 5d dc	 mov	 DWORD PTR _atm$[ebp+4], ebx
  00089	89 7d e4	 mov	 DWORD PTR _atm$[ebp+12], edi
  0008c	e8 00 00 00 00	 call	 __mktime64
  00091	83 c4 04	 add	 esp, 4
  00094	89 06		 mov	 DWORD PTR [esi], eax

; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)

  00096	23 c2		 and	 eax, edx
  00098	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0009b	5f		 pop	 edi
  0009c	5b		 pop	 ebx
  0009d	83 f8 ff	 cmp	 eax, -1
  000a0	74 4f		 je	 SHORT $LN72@CTime

; 457  : 	}
; 458  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	8b c6		 mov	 eax, esi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5e		 pop	 esi
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 1c 00	 ret	 28			; 0000001cH
$LN65@CTime:

; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );

  000b5	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ba	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN73@CTime:
$LN67@CTime:

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  000bf	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c4	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN74@CTime:
$LN68@CTime:

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  000c9	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ce	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN75@CTime:
$LN69@CTime:

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d3	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000d8	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN76@CTime:
$LN70@CTime:

; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  000dd	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000e2	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN77@CTime:
$LN71@CTime:

; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  000e7	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ec	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN78@CTime:
$LN72@CTime:

; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);

  000f1	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000f6	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN79@CTime:
$LN64@CTime:
  000fb	cc		 int	 3
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	m_time( time )

  00003	8b 45 08	 mov	 eax, DWORD PTR _time$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp+4]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 419  : }

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 412  : 	m_time(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 414  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0000d	83 c4 04	 add	 esp, 4

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00010	89 01		 mov	 DWORD PTR [ecx], eax

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00012	8b c1		 mov	 eax, ecx

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 375  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 313  : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 314  : }

  00005	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTotalMinutes, COMDAT
; _this$ = ecx

; 293  : 	return( m_timeSpan/60 );

  00000	6a 00		 push	 0
  00002	6a 3c		 push	 60			; 0000003cH
  00004	ff 71 04	 push	 DWORD PTR [ecx+4]
  00007	ff 31		 push	 DWORD PTR [ecx]
  00009	e8 00 00 00 00	 call	 __alldiv

; 294  : }

  0000e	c3		 ret	 0
?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTotalMinutes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 273  :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0000f	f7 e9		 imul	 ecx
  00011	6a 00		 push	 0
  00013	68 10 0e 00 00	 push	 3600			; 00000e10H
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 __allmul
  0001f	8b c8		 mov	 ecx, eax
  00021	8b f2		 mov	 esi, edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  00026	ba 10 0e 00 00	 mov	 edx, 3600		; 00000e10H
  0002b	f7 ea		 imul	 edx
  0002d	03 c8		 add	 ecx, eax
  0002f	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  00032	13 f2		 adc	 esi, edx
  00034	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00039	f7 ea		 imul	 edx
  0003b	03 c8		 add	 ecx, eax
  0003d	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  00040	13 f2		 adc	 esi, edx
  00042	99		 cdq
  00043	03 c8		 add	 ecx, eax

; 274  : }

  00045	8b c7		 mov	 eax, edi
  00047	89 0f		 mov	 DWORD PTR [edi], ecx
  00049	13 f2		 adc	 esi, edx
  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTimeSpan@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTimeSpan@ATL@@QAE@_J@Z PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 263  : 	m_timeSpan( time )

  00003	8b 45 08	 mov	 eax, DWORD PTR _time$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp+4]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 265  : }

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTimeSpan@ATL@@QAE@_J@Z ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTimeSpan@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTimeSpan@ATL@@QAE@XZ PROC				; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 258  : 	m_timeSpan(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 260  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0CTimeSpan@ATL@@QAE@XZ ENDP				; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 833  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashitemperiodsystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 833  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
