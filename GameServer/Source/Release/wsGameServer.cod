; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\wsGameServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?SetSocketIndex@CwsGameServer@@QAEHIH@Z		; CwsGameServer::SetSocketIndex
PUBLIC	?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z	; CwsGameServer::SetSocketBuffer
PUBLIC	?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ; CwsGameServer::AcceptSocket
PUBLIC	?DataRecv@CwsGameServer@@QAEHI@Z		; CwsGameServer::DataRecv
PUBLIC	?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z	; CwsGameServer::FDWRITE_MsgDataSend
PUBLIC	?DataSendW@CwsGameServer@@QAEHHPADH@Z		; CwsGameServer::DataSendW
PUBLIC	?DataSocketSend@CwsGameServer@@QAEHIPADH@Z	; CwsGameServer::DataSocketSend
PUBLIC	?CreateServer@CwsGameServer@@QAEHPADGKK@Z	; CwsGameServer::CreateServer
PUBLIC	??0CwsGameServer@@QAE@XZ			; CwsGameServer::CwsGameServer
PUBLIC	??1CwsGameServer@@UAE@XZ			; CwsGameServer::~CwsGameServer
PUBLIC	??_GCwsGameServer@@UAEPAXI@Z			; CwsGameServer::`scalar deleting destructor'
PUBLIC	??_7CwsGameServer@@6B@				; CwsGameServer::`vftable'
PUBLIC	??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@	; `string'
PUBLIC	??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@	; `string'
PUBLIC	??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_R4CwsGameServer@@6B@				; CwsGameServer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCwsGameServer@@@8			; CwsGameServer `RTTI Type Descriptor'
PUBLIC	??_R3CwsGameServer@@8				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CwsGameServer@@8				; CwsGameServer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CwsGameServer@@8			; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMyWinsockBase@@@8			; MyWinsockBase `RTTI Type Descriptor'
PUBLIC	??_R3MyWinsockBase@@8				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MyWinsockBase@@8				; MyWinsockBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__accept@12:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__htonl@4:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__inet_ntoa@4:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__send@16:PROC
EXTRN	__imp__setsockopt@20:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	??0MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::MyWinsockBase
EXTRN	??1MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::~MyWinsockBase
EXTRN	?AddIp@CIpCache@@QAEHPAD@Z:PROC			; CIpCache::AddIp
EXTRN	??_ECwsGameServer@@UAEPAXI@Z:PROC		; CwsGameServer::`vector deleting destructor'
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?IpCache@@3VCIpCache@@A:BYTE			; IpCache
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R2MyWinsockBase@@8
rdata$r	SEGMENT
??_R2MyWinsockBase@@8 DD FLAT:??_R1A@?0A@EA@MyWinsockBase@@8 ; MyWinsockBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MyWinsockBase@@8
rdata$r	SEGMENT
??_R3MyWinsockBase@@8 DD 00H				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMyWinsockBase@@@8
data$r	SEGMENT
??_R0?AVMyWinsockBase@@@8 DD FLAT:??_7type_info@@6B@	; MyWinsockBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMyWinsockBase@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CwsGameServer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CwsGameServer@@8 DD FLAT:??_R0?AVCwsGameServer@@@8 ; CwsGameServer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R2CwsGameServer@@8
rdata$r	SEGMENT
??_R2CwsGameServer@@8 DD FLAT:??_R1A@?0A@EA@CwsGameServer@@8 ; CwsGameServer::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CwsGameServer@@8
rdata$r	SEGMENT
??_R3CwsGameServer@@8 DD 00H				; CwsGameServer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCwsGameServer@@@8
data$r	SEGMENT
??_R0?AVCwsGameServer@@@8 DD FLAT:??_7type_info@@6B@	; CwsGameServer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCwsGameServer@@', 00H
data$r	ENDS
;	COMDAT ??_R4CwsGameServer@@6B@
rdata$r	SEGMENT
??_R4CwsGameServer@@6B@ DD 00H				; CwsGameServer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCwsGameServer@@@8
	DD	FLAT:??_R3CwsGameServer@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@ DB 'INVALID_SOCKET %'
	DB	's %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@
CONST	SEGMENT
??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@ DB 'wsGameServer.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@ DB 'Server WS'
	DB	'AAsyncSelect error %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@ DB 'Server listen er'
	DB	'ror %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@ DB 'Server bind error %'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
CONST	SEGMENT
??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@ DB 'windows handle error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CwsGameServer@@6B@
CONST	SEGMENT
??_7CwsGameServer@@6B@ DD FLAT:??_R4CwsGameServer@@6B@	; CwsGameServer::`vftable'
	DD	FLAT:??_ECwsGameServer@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCwsGameServer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCwsGameServer@@UAEPAXI@Z PROC			; CwsGameServer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CwsGameServer@@UAE@XZ ; CwsGameServer::~CwsGameServer
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 30		 push	 48			; 00000030H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCwsGameServer@@UAEPAXI@Z ENDP			; CwsGameServer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ??1CwsGameServer@@UAE@XZ
_TEXT	SEGMENT
??1CwsGameServer@@UAE@XZ PROC				; CwsGameServer::~CwsGameServer, COMDAT
; _this$ = ecx

; 24   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CwsGameServer@@6B@

; 25   : 	// Empty
; 26   : }

  00006	83 c1 04	 add	 ecx, 4
  00009	e9 00 00 00 00	 jmp	 ??1MyWinsockBase@@QAE@XZ ; MyWinsockBase::~MyWinsockBase
??1CwsGameServer@@UAE@XZ ENDP				; CwsGameServer::~CwsGameServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ??0CwsGameServer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CwsGameServer@@QAE@XZ PROC				; CwsGameServer::CwsGameServer, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	e8 00 00 00 00	 call	 ??0MyWinsockBase@@QAE@XZ ; MyWinsockBase::MyWinsockBase
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CwsGameServer@@6B@

; 18   : 	this->m_SendSec=0;
; 19   : 	this->m_SendSecTmp=0;
; 20   : }

  00018	8b c6		 mov	 eax, esi
  0001a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00021	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0CwsGameServer@@QAE@XZ ENDP				; CwsGameServer::CwsGameServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?CreateServer@CwsGameServer@@QAEHPADGKK@Z
_TEXT	SEGMENT
_addr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ip_addr$ = 8						; size = 4
_port$ = 12						; size = 2
_WinServerMsg$ = 16					; size = 4
_WinClientMsg$ = 20					; size = 4
?CreateServer@CwsGameServer@@QAEHPADGKK@Z PROC		; CwsGameServer::CreateServer, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 35   : 	sockaddr_in addr;
; 36   : 	int nResult;
; 37   : 	
; 38   : 	if (this->m_hWnd == 0 )

  00013	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00017	75 20		 jne	 SHORT $LN2@CreateServ

; 39   : 	{
; 40   : 		MsgBox("windows handle error");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OCJBKION@windows?5handle?5error?$AA@
  0001e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00023	83 c4 04	 add	 esp, 4

; 41   : 		return 0;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 78   : 	return 1;
; 79   : }

  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 10 00	 ret	 16			; 00000010H
$LN2@CreateServ:
  00039	0f 57 c0	 xorps	 xmm0, xmm0

; 42   : 	}
; 43   : 
; 44   : 	memset(&addr, 0, sizeof(addr) );
; 45   : 
; 46   : 	addr.sin_family=AF_INET; // INET

  0003c	b8 02 00 00 00	 mov	 eax, 2
  00041	0f 11 45 ec	 movups	 XMMWORD PTR _addr$[ebp], xmm0

; 47   : 	addr.sin_addr.S_un.S_addr=htonl(0);

  00045	6a 00		 push	 0
  00047	66 89 45 ec	 mov	 WORD PTR _addr$[ebp], ax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htonl@4

; 48   : 	addr.sin_port=htons(port);

  00051	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  00054	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  0005d	66 89 45 ee	 mov	 WORD PTR _addr$[ebp+2], ax

; 49   : 
; 50   : 	nResult=bind(this->m_socket, (sockaddr*)&addr, 16);

  00061	8d 45 ec	 lea	 eax, DWORD PTR _addr$[ebp]
  00064	6a 10		 push	 16			; 00000010H
  00066	50		 push	 eax
  00067	ff 76 0c	 push	 DWORD PTR [esi+12]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12

; 51   : 
; 52   : 	if ( nResult == -1 )

  00070	83 f8 ff	 cmp	 eax, -1
  00073	75 31		 jne	 SHORT $LN3@CreateServ

; 53   : 	{
; 54   : 		LogAdd("Server bind error %d", WSAGetLastError() );

  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OENIBBI@Server?5bind?5error?5?$CFd?$AA@
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00087	83 c4 08	 add	 esp, 8

; 55   : 		closesocket(this->m_socket);

  0008a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 56   : 		return 0;

  00093	33 c0		 xor	 eax, eax
  00095	5e		 pop	 esi

; 78   : 	return 1;
; 79   : }

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 10 00	 ret	 16			; 00000010H
$LN3@CreateServ:

; 57   : 	}
; 58   : 
; 59   : 	nResult=listen(this->m_socket , 4);

  000a6	6a 04		 push	 4
  000a8	ff 76 0c	 push	 DWORD PTR [esi+12]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8

; 60   : 
; 61   : 	if (nResult == -1)

  000b1	83 f8 ff	 cmp	 eax, -1
  000b4	75 31		 jne	 SHORT $LN4@CreateServ

; 62   : 	{
; 63   : 		closesocket(this->m_socket );

  000b6	ff 76 0c	 push	 DWORD PTR [esi+12]
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 64   : 		LogAdd("Server listen error %d", WSAGetLastError() );

  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BLCKGNNH@Server?5listen?5error?5?$CFd?$AA@
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d1	83 c4 08	 add	 esp, 8

; 65   : 		return 0;

  000d4	33 c0		 xor	 eax, eax
  000d6	5e		 pop	 esi

; 78   : 	return 1;
; 79   : }

  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 10 00	 ret	 16			; 00000010H
$LN4@CreateServ:

; 66   : 	}
; 67   : 
; 68   : 	nResult=WSAAsyncSelect( this->m_socket , this->m_hWnd , WinServerMsg, FD_ACCEPT);

  000e7	6a 08		 push	 8
  000e9	ff 75 10	 push	 DWORD PTR _WinServerMsg$[ebp]
  000ec	ff 76 08	 push	 DWORD PTR [esi+8]
  000ef	ff 76 0c	 push	 DWORD PTR [esi+12]
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 69   : 
; 70   : 	if (nResult == -1)

  000f8	83 f8 ff	 cmp	 eax, -1
  000fb	75 31		 jne	 SHORT $LN5@CreateServ

; 71   : 	{
; 72   : 		closesocket(this->m_socket);

  000fd	ff 76 0c	 push	 DWORD PTR [esi+12]
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 73   : 		LogAdd("Server WSAAsyncSelect error %d", WSAGetLastError());

  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JMMAJAG@Server?5WSAAsyncSelect?5error?5?$CFd?$AA@
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00118	83 c4 08	 add	 esp, 8

; 74   : 		return 0;

  0011b	33 c0		 xor	 eax, eax
  0011d	5e		 pop	 esi

; 78   : 	return 1;
; 79   : }

  0011e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00121	33 cd		 xor	 ecx, ebp
  00123	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 10 00	 ret	 16			; 00000010H
$LN5@CreateServ:

; 75   : 	}
; 76   : 
; 77   : 	this->m_WinClientMsg  =WinClientMsg;

  0012e	8b 45 14	 mov	 eax, DWORD PTR _WinClientMsg$[ebp]

; 78   : 	return 1;
; 79   : }

  00131	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00134	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  00137	33 cd		 xor	 ecx, ebp
  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	5e		 pop	 esi
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 10 00	 ret	 16			; 00000010H
?CreateServer@CwsGameServer@@QAEHPADGKK@Z ENDP		; CwsGameServer::CreateServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?DataSocketSend@CwsGameServer@@QAEHIPADH@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z PROC		; CwsGameServer::DataSocketSend, COMDAT
; _this$ = ecx

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 129  : 	int nResult, nDx, nLeft;
; 130  : 
; 131  : 	nDx=0;
; 132  : 
; 133  : 	if (socket == INVALID_SOCKET )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _socket$[ebp]
  00006	56		 push	 esi
  00007	33 f6		 xor	 esi, esi
  00009	83 f9 ff	 cmp	 ecx, -1
  0000c	75 1f		 jne	 SHORT $LN4@DataSocket

; 134  : 	{
; 135  : 		LogAdd("INVALID_SOCKET %s %d", __FILE__, __LINE__);

  0000e	68 87 00 00 00	 push	 135			; 00000087H
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OMKOBAGC@wsGameServer?4cpp?$AA@
  00018	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GDJNGBDL@INVALID_SOCKET?5?$CFs?5?$CFd?$AA@
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 136  : 		return 0;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 165  : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN4@DataSocket:
  0002d	53		 push	 ebx

; 137  : 	}
; 138  : 
; 139  : 	nLeft = len;

  0002e	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  00031	57		 push	 edi
  00032	8b fb		 mov	 edi, ebx

; 140  : 
; 141  : 	while (nLeft > 0)

  00034	85 db		 test	 ebx, ebx
  00036	7e 41		 jle	 SHORT $LN12@DataSocket
$LL2@DataSocket:

; 142  : 	{
; 143  : 		nResult=send(socket, &buf[nDx], (len-nDx), 0);

  00038	6a 00		 push	 0
  0003a	8b c3		 mov	 eax, ebx
  0003c	2b c6		 sub	 eax, esi
  0003e	50		 push	 eax
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00042	03 c6		 add	 eax, esi
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16

; 144  : 
; 145  : 		if (nResult == -1)

  0004c	83 f8 ff	 cmp	 eax, -1
  0004f	75 12		 jne	 SHORT $LN5@DataSocket

; 146  : 		{
; 147  : 			if (WSAGetLastError() != WSAEWOULDBLOCK)

  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00057	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0005c	75 12		 jne	 SHORT $LN11@DataSocket

; 150  : 			}
; 151  : 		}
; 152  : 		else

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _socket$[ebp]
  00061	eb d5		 jmp	 SHORT $LL2@DataSocket
$LN5@DataSocket:

; 153  : 		{
; 154  : 			nDx += nResult;
; 155  : 			nLeft -=nResult;

  00063	2b f8		 sub	 edi, eax
  00065	03 f0		 add	 esi, eax

; 156  : 
; 157  : 			if ( nLeft <= 0)

  00067	85 ff		 test	 edi, edi
  00069	7e 0e		 jle	 SHORT $LN12@DataSocket

; 140  : 
; 141  : 	while (nLeft > 0)

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _socket$[ebp]
  0006e	eb c8		 jmp	 SHORT $LL2@DataSocket
$LN11@DataSocket:
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 148  : 			{
; 149  : 				return 0;

  00072	33 c0		 xor	 eax, eax
  00074	5e		 pop	 esi

; 165  : }

  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
$LN12@DataSocket:
  00079	5f		 pop	 edi
  0007a	5b		 pop	 ebx

; 158  : 			{
; 159  : 				break;
; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return 1;

  0007b	b8 01 00 00 00	 mov	 eax, 1
  00080	5e		 pop	 esi

; 165  : }

  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
?DataSocketSend@CwsGameServer@@QAEHIPADH@Z ENDP		; CwsGameServer::DataSocketSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?DataSendW@CwsGameServer@@QAEHHPADH@Z
_TEXT	SEGMENT
_uindex$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
?DataSendW@CwsGameServer@@QAEHHPADH@Z PROC		; CwsGameServer::DataSendW, COMDAT
; _this$ = ecx

; 124  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 125  : }

  00005	c2 0c 00	 ret	 12			; 0000000cH
?DataSendW@CwsGameServer@@QAEHHPADH@Z ENDP		; CwsGameServer::DataSendW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z PROC	; CwsGameServer::FDWRITE_MsgDataSend, COMDAT
; _this$ = ecx

; 169  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 170  : }

  00002	c2 04 00	 ret	 4
?FDWRITE_MsgDataSend@CwsGameServer@@QAEHI@Z ENDP	; CwsGameServer::FDWRITE_MsgDataSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?DataRecv@CwsGameServer@@QAEHI@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
?DataRecv@CwsGameServer@@QAEHI@Z PROC			; CwsGameServer::DataRecv, COMDAT
; _this$ = ecx

; 175  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 176  : }

  00002	c2 04 00	 ret	 4
?DataRecv@CwsGameServer@@QAEHI@Z ENDP			; CwsGameServer::DataRecv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z
_TEXT	SEGMENT
_cInAddr$GSCopy$1$ = -32				; size = 4
_Len$ = -28						; size = 4
_ling$ = -24						; size = 4
_cAddr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_clientSocket$ = 8					; size = 4
_cInAddr$ = 12						; size = 4
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z PROC	; CwsGameServer::AcceptSocket, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _cInAddr$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _clientSocket$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	89 45 e0	 mov	 DWORD PTR _cInAddr$GSCopy$1$[ebp], eax
  0001c	8b f9		 mov	 edi, ecx

; 84   : 	SOCKET cSocket;
; 85   : 	sockaddr_in cAddr;
; 86   : 	int Len = 16;
; 87   : 	int nResult;
; 88   : 	WORD ling[2];
; 89   : 
; 90   : 	cSocket=accept(this->m_socket , (sockaddr*)&cAddr, &Len);

  0001e	8d 45 e4	 lea	 eax, DWORD PTR _Len$[ebp]
  00021	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _Len$[ebp], 16 ; 00000010H
  00028	50		 push	 eax
  00029	8d 45 ec	 lea	 eax, DWORD PTR _cAddr$[ebp]
  0002c	50		 push	 eax
  0002d	ff 77 0c	 push	 DWORD PTR [edi+12]
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__accept@12
  00036	8b f0		 mov	 esi, eax

; 91   : 	
; 92   : 	if (cSocket != INVALID_SOCKET)

  00038	83 fe ff	 cmp	 esi, -1
  0003b	74 4e		 je	 SHORT $LN4@AcceptSock

; 93   : 	{
; 94   : 		memcpy(&cInAddr, &cAddr.sin_addr.S_un.S_addr , sizeof(cInAddr));
; 95   : 
; 96   : 		if (IpCache.AddIp(inet_ntoa( cInAddr)) == 0)

  0003d	8b 45 e0	 mov	 eax, DWORD PTR _cInAddr$GSCopy$1$[ebp]
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _cAddr$[ebp+4]
  00043	51		 push	 ecx
  00044	89 08		 mov	 DWORD PTR [eax], ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  0004c	50		 push	 eax
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00052	e8 00 00 00 00	 call	 ?AddIp@CIpCache@@QAEHPAD@Z ; CIpCache::AddIp
  00057	85 c0		 test	 eax, eax
  00059	75 1c		 jne	 SHORT $LN3@AcceptSock
$LN10@AcceptSock:

; 97   : 		{
; 98   : 			closesocket( cSocket);

  0005b	56		 push	 esi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 99   : 			return 0;

  00064	33 c0		 xor	 eax, eax
  00066	5b		 pop	 ebx

; 118  : 
; 119  : 	return 1;
; 120  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN3@AcceptSock:

; 100  : 		}
; 101  : 
; 102  : 		nResult=WSAAsyncSelect(cSocket, this->m_hWnd , this->m_WinClientMsg , FD_READ|FD_WRITE|FD_CLOSE);

  00077	6a 23		 push	 35			; 00000023H
  00079	ff 77 2c	 push	 DWORD PTR [edi+44]
  0007c	ff 77 08	 push	 DWORD PTR [edi+8]
  0007f	56		 push	 esi
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 103  : 
; 104  : 		if ( nResult == -1 )

  00086	83 f8 ff	 cmp	 eax, -1
  00089	74 d0		 je	 SHORT $LN10@AcceptSock
$LN4@AcceptSock:

; 105  : 		{
; 106  : 			closesocket(cSocket);
; 107  : 			return 0;
; 108  : 		}
; 109  : 
; 110  : 	}
; 111  : 
; 112  : 	clientSocket=cSocket;
; 113  : 
; 114  : 	ling[0]=0;

  0008b	33 c0		 xor	 eax, eax
  0008d	89 33		 mov	 DWORD PTR [ebx], esi

; 115  : 	ling[1]=0;
; 116  : 
; 117  : 	setsockopt( clientSocket, SOL_SOCKET, 0xFFFFFF7F, (char*)&ling, sizeof(ling));

  0008f	6a 04		 push	 4
  00091	89 45 e8	 mov	 DWORD PTR _ling$[ebp], eax
  00094	8d 45 e8	 lea	 eax, DWORD PTR _ling$[ebp]
  00097	50		 push	 eax
  00098	68 7f ff ff ff	 push	 -129			; ffffff7fH
  0009d	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000a2	56		 push	 esi
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setsockopt@20

; 118  : 
; 119  : 	return 1;
; 120  : }

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	33 cd		 xor	 ecx, ebp
  000b5	5b		 pop	 ebx
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
?AcceptSocket@CwsGameServer@@QAEHAAIAAUin_addr@@@Z ENDP	; CwsGameServer::AcceptSocket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_socket$ = 12						; size = 4
_ip$ = 16						; size = 4
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z PROC	; CwsGameServer::SetSocketBuffer, COMDAT
; _this$ = ecx

; 180  : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 181  : }

  00005	c2 0c 00	 ret	 12			; 0000000cH
?SetSocketBuffer@CwsGameServer@@QAEHHIPAD@Z ENDP	; CwsGameServer::SetSocketBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?SetSocketIndex@CwsGameServer@@QAEHIH@Z
_TEXT	SEGMENT
_socket$ = 8						; size = 4
_index$ = 12						; size = 4
?SetSocketIndex@CwsGameServer@@QAEHIH@Z PROC		; CwsGameServer::SetSocketIndex, COMDAT
; _this$ = ecx

; 30   : 	return 1;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 31   : }

  00005	c2 08 00	 ret	 8
?SetSocketIndex@CwsGameServer@@QAEHIH@Z ENDP		; CwsGameServer::SetSocketIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsgameserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 194  : 	

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
