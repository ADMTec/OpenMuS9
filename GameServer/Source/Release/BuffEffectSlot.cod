; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\BuffEffectSlot.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CBuffEffectSlot@@QAE@XZ			; CBuffEffectSlot::CBuffEffectSlot
PUBLIC	??1CBuffEffectSlot@@UAE@XZ			; CBuffEffectSlot::~CBuffEffectSlot
PUBLIC	?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ; CBuffEffectSlot::SetEffect
PUBLIC	?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveEffect
PUBLIC	?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::CheckUsedEffect
PUBLIC	?RemoveBuffVariable@CBuffEffectSlot@@QAEXPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveBuffVariable
PUBLIC	?ClearEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; CBuffEffectSlot::ClearEffect
PUBLIC	?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ; CBuffEffectSlot::GetEffectData
PUBLIC	?GetEffectDataFromItemCode@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@G@Z ; CBuffEffectSlot::GetEffectDataFromItemCode
PUBLIC	?GetBuffClearType@CBuffEffectSlot@@QAEHH@Z	; CBuffEffectSlot::GetBuffClearType
PUBLIC	??_GCBuffEffectSlot@@UAEPAXI@Z			; CBuffEffectSlot::`scalar deleting destructor'
PUBLIC	?gObjCheckBuffEffectList@@YAXPAUOBJECTSTRUCT@@@Z ; gObjCheckBuffEffectList
PUBLIC	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z	; gObjAddBuffEffect
PUBLIC	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
PUBLIC	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z	; gObjAddBuffEffect
PUBLIC	?gObjAddBuffEffectForInGameShop@@YA_NPAUOBJECTSTRUCT@@GH@Z ; gObjAddBuffEffectForInGameShop
PUBLIC	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z	; gObjRemoveBuffEffect
PUBLIC	?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect
PUBLIC	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
PUBLIC	?gObjChangeBuffValidTime@@YA_NPAUOBJECTSTRUCT@@HH@Z ; gObjChangeBuffValidTime
PUBLIC	?gObjSetActiveEffectAtTick@@YAXPAUOBJECTSTRUCT@@@Z ; gObjSetActiveEffectAtTick
PUBLIC	?gObjMakeViewportState@@YAHPAUOBJECTSTRUCT@@PAE@Z ; gObjMakeViewportState
PUBLIC	?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
PUBLIC	?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
PUBLIC	?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
PUBLIC	?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z	; GCUseBuffEffect
PUBLIC	?gObjSendBuffList@@YAXPAUOBJECTSTRUCT@@@Z	; gObjSendBuffList
PUBLIC	?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z ; gObjAddBuffEffectWideArea
PUBLIC	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx
PUBLIC	??_7CBuffEffectSlot@@6B@			; CBuffEffectSlot::`vftable'
PUBLIC	?g_BuffEffectSlot@@3VCBuffEffectSlot@@A		; g_BuffEffectSlot
PUBLIC	??_R4CBuffEffectSlot@@6B@			; CBuffEffectSlot::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBuffEffectSlot@@@8			; CBuffEffectSlot `RTTI Type Descriptor'
PUBLIC	??_R3CBuffEffectSlot@@8				; CBuffEffectSlot::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBuffEffectSlot@@8				; CBuffEffectSlot::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBuffEffectSlot@@8		; CBuffEffectSlot::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCStateInfoSend@@YAXPAUOBJECTSTRUCT@@EE@Z:PROC	; GCStateInfoSend
EXTRN	?gObjCalCharacter@@YAXH@Z:PROC			; gObjCalCharacter
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z:PROC ; CBuffScriptLoader::CheckVaildBuffEffect
EXTRN	?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z:PROC ; CBuffScriptLoader::GetBuffData
EXTRN	?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z:PROC ; CBuffScriptLoader::GetBuffDataFromItemCode
EXTRN	?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z:PROC ; CBuffEffect::SetBuffEffect
EXTRN	?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z:PROC ; CBuffEffect::ClearBuffEffect
EXTRN	?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z:PROC ; CBuffEffect::SetActiveBuffEffect
EXTRN	??_ECBuffEffectSlot@@UAEPAXI@Z:PROC		; CBuffEffectSlot::`vector deleting destructor'
EXTRN	?IsItemEffect@CItemAddOption@@QAEEH@Z:PROC	; CItemAddOption::IsItemEffect
EXTRN	?GetItemEffect@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z:PROC ; CItemAddOption::GetItemEffect
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?GetResetExp@TCustomExp@@QAE_JPAUOBJECTSTRUCT@@_J@Z:PROC ; TCustomExp::GetResetExp
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_BuffScript@@3VCBuffScriptLoader@@A:BYTE	; g_BuffScript
EXTRN	?g_BuffEffect@@3VCBuffEffect@@A:DWORD		; g_BuffEffect
EXTRN	?g_ItemAddOption@@3VCItemAddOption@@A:BYTE	; g_ItemAddOption
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gCustomExp@@3VTCustomExp@@A:BYTE		; gCustomExp
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_BuffEffectSlot@@3VCBuffEffectSlot@@A DD 01H DUP (?)	; g_BuffEffectSlot
_BSS	ENDS
CRT$XCU	SEGMENT
?g_BuffEffectSlot$initializer$@@3P6AXXZA DD FLAT:??__Eg_BuffEffectSlot@@YAXXZ ; g_BuffEffectSlot$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CBuffEffectSlot@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBuffEffectSlot@@8 DD FLAT:??_R0?AVCBuffEffectSlot@@@8 ; CBuffEffectSlot::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBuffEffectSlot@@8
rdata$r	ENDS
;	COMDAT ??_R2CBuffEffectSlot@@8
rdata$r	SEGMENT
??_R2CBuffEffectSlot@@8 DD FLAT:??_R1A@?0A@EA@CBuffEffectSlot@@8 ; CBuffEffectSlot::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBuffEffectSlot@@8
rdata$r	SEGMENT
??_R3CBuffEffectSlot@@8 DD 00H				; CBuffEffectSlot::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBuffEffectSlot@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBuffEffectSlot@@@8
data$r	SEGMENT
??_R0?AVCBuffEffectSlot@@@8 DD FLAT:??_7type_info@@6B@	; CBuffEffectSlot `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBuffEffectSlot@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBuffEffectSlot@@6B@
rdata$r	SEGMENT
??_R4CBuffEffectSlot@@6B@ DD 00H			; CBuffEffectSlot::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBuffEffectSlot@@@8
	DD	FLAT:??_R3CBuffEffectSlot@@8
rdata$r	ENDS
;	COMDAT ??_7CBuffEffectSlot@@6B@
CONST	SEGMENT
??_7CBuffEffectSlot@@6B@ DD FLAT:??_R4CBuffEffectSlot@@6B@ ; CBuffEffectSlot::`vftable'
	DD	FLAT:??_ECBuffEffectSlot@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_BuffEffectSlot@@YAXXZ
text$yd	SEGMENT
??__Fg_BuffEffectSlot@@YAXXZ PROC			; `dynamic atexit destructor for 'g_BuffEffectSlot'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00005	e9 00 00 00 00	 jmp	 ??1CBuffEffectSlot@@UAE@XZ ; CBuffEffectSlot::~CBuffEffectSlot
??__Fg_BuffEffectSlot@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_BuffEffectSlot''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ??__Eg_BuffEffectSlot@@YAXXZ
text$di	SEGMENT
??__Eg_BuffEffectSlot@@YAXXZ PROC			; `dynamic initializer for 'g_BuffEffectSlot'', COMDAT

; 15   : CBuffEffectSlot g_BuffEffectSlot;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00005	e8 00 00 00 00	 call	 ??0CBuffEffectSlot@@QAE@XZ ; CBuffEffectSlot::CBuffEffectSlot
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_BuffEffectSlot@@YAXXZ ; `dynamic atexit destructor for 'g_BuffEffectSlot''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_BuffEffectSlot@@YAXXZ ENDP			; `dynamic initializer for 'g_BuffEffectSlot''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsVulcanusMap@CNewPVP@@QAEHH@Z
_TEXT	SEGMENT
_nMapNumber$ = 8					; size = 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z PROC			; CNewPVP::IsVulcanusMap, COMDAT
; _this$ = ecx

; 307  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  00003	33 c0		 xor	 eax, eax
  00005	83 7d 08 3f	 cmp	 DWORD PTR _nMapNumber$[ebp], 63 ; 0000003fH
  00009	0f 94 c0	 sete	 al

; 309  : 	}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z ENDP			; CNewPVP::IsVulcanusMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z
_TEXT	SEGMENT
_iRetExp$ = -12						; size = 8
_lpPartyObj$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iExp$ = 12						; size = 4
_bRewardExp$ = 16					; size = 4
?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z PROC ; CheckItemOptForGetExpEx, COMDAT

; 926  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 927  : 	__int64 iRetExp = iExp;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _iExp$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 928  : 	int iAddExpRate = 100;
; 929  : 
; 930  : 	if ( gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj, AT_PCBANG_SEAL_OF_SUSTENANCE) )

  0000b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00010	57		 push	 edi
  00011	89 45 f4	 mov	 DWORD PTR _iRetExp$[ebp], eax
  00014	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  00019	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0001c	6a 2a		 push	 42			; 0000002aH
  0001e	56		 push	 esi
  0001f	89 45 f8	 mov	 DWORD PTR _iRetExp$[ebp+4], eax
  00022	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00027	8b 5d 10	 mov	 ebx, DWORD PTR _bRewardExp$[ebp]
  0002a	83 c4 08	 add	 esp, 8
  0002d	84 c0		 test	 al, al
  0002f	0f 85 25 02 00
	00		 jne	 $LN7@CheckItemO
  00035	6a 1f		 push	 31			; 0000001fH
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0003d	83 c4 08	 add	 esp, 8
  00040	84 c0		 test	 al, al
  00042	0f 85 12 02 00
	00		 jne	 $LN7@CheckItemO

; 933  : 	}
; 934  : 	else if (
; 935  : 		 gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_SEAL_OF_ASCENSION)
; 936  :       || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_SEAL_OF_WEALTH)
; 937  :       || gObjCheckUsedBuffEffect(lpObj, AT_PCBANG_SEAL_OF_ASCENSION)
; 938  :       || gObjCheckUsedBuffEffect(lpObj, AT_PCBANG_SEAL_OF_WEALTH)
; 939  :       || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_SEAL_OF_HEALING)
; 940  :       || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_ASCENSION)
; 941  :       || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_WEALTH) )

  00048	6a 28		 push	 40			; 00000028H
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00050	83 c4 08	 add	 esp, 8
  00053	84 c0		 test	 al, al
  00055	0f 85 90 01 00
	00		 jne	 $LN10@CheckItemO
  0005b	6a 29		 push	 41			; 00000029H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00063	83 c4 08	 add	 esp, 8
  00066	84 c0		 test	 al, al
  00068	0f 85 7d 01 00
	00		 jne	 $LN10@CheckItemO
  0006e	6a 1d		 push	 29			; 0000001dH
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00076	83 c4 08	 add	 esp, 8
  00079	84 c0		 test	 al, al
  0007b	0f 85 6a 01 00
	00		 jne	 $LN10@CheckItemO
  00081	6a 1e		 push	 30			; 0000001eH
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00089	83 c4 08	 add	 esp, 8
  0008c	84 c0		 test	 al, al
  0008e	0f 85 57 01 00
	00		 jne	 $LN10@CheckItemO
  00094	6a 57		 push	 87			; 00000057H
  00096	56		 push	 esi
  00097	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0009c	83 c4 08	 add	 esp, 8
  0009f	84 c0		 test	 al, al
  000a1	0f 85 44 01 00
	00		 jne	 $LN10@CheckItemO
  000a7	6a 65		 push	 101			; 00000065H
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  000af	83 c4 08	 add	 esp, 8
  000b2	84 c0		 test	 al, al
  000b4	0f 85 31 01 00
	00		 jne	 $LN10@CheckItemO
  000ba	6a 66		 push	 102			; 00000066H
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  000c2	83 c4 08	 add	 esp, 8
  000c5	84 c0		 test	 al, al
  000c7	0f 85 1e 01 00
	00		 jne	 $LN10@CheckItemO

; 967  : 			}
; 968  : 		}
; 969  : 		//iRetExp = iRetExp * iAddExpRate / 100;
; 970  :     }
; 971  : 	else if ( gObjCheckUsedBuffEffect(lpObj, AT_PARTY_EXP_BONUS) )

  000cd	6a 70		 push	 112			; 00000070H
  000cf	56		 push	 esi
  000d0	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  000d5	83 c4 08	 add	 esp, 8
  000d8	84 c0		 test	 al, al
  000da	0f 84 88 00 00
	00		 je	 $LN21@CheckItemO

; 972  : 	{
; 973  :         iAddExpRate = 190;
; 974  : 
; 975  :         if ( lpObj->PartyNumber >= 0 )

  000e0	83 be 0c 06 00
	00 00		 cmp	 DWORD PTR [esi+1548], 0
  000e7	bf be 00 00 00	 mov	 edi, 190		; 000000beH
  000ec	7c 59		 jl	 SHORT $LN3@CheckItemO

; 976  : 		{
; 977  : 			for (int i = 0; i < MAX_USER_IN_PARTY; ++i )

  000ee	33 db		 xor	 ebx, ebx
$LL4@CheckItemO:

; 978  : 			{
; 979  : 				LPOBJ lpPartyObj = &gObj[gParty.m_PartyS[lpObj->PartyNumber].Number[i]]; // wz bug ? need to check for -1

  000f0	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  000f6	8b c8		 mov	 ecx, eax
  000f8	c1 e1 04	 shl	 ecx, 4
  000fb	2b c8		 sub	 ecx, eax
  000fd	03 cb		 add	 ecx, ebx

; 980  : 				int iPartyDis = gObjCalDistance(lpObj, lpObj);

  000ff	56		 push	 esi
  00100	56		 push	 esi
  00101	69 04 8d 0c 00
	00 00 40 27 00
	00		 imul	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[ecx*4+12], 10048
  0010c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	89 45 fc	 mov	 DWORD PTR _lpPartyObj$1$[ebp], eax
  00115	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance

; 981  : 				
; 982  : 				if ( lpObj->m_Index != lpPartyObj->m_Index && lpObj->MapNumber == lpPartyObj->MapNumber && iPartyDis < 10 )

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR _lpPartyObj$1$[ebp]
  0011d	8b d0		 mov	 edx, eax
  0011f	8b 06		 mov	 eax, DWORD PTR [esi]
  00121	83 c4 08	 add	 esp, 8
  00124	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00126	74 16		 je	 SHORT $LN2@CheckItemO
  00128	8a 86 23 01 00
	00		 mov	 al, BYTE PTR [esi+291]
  0012e	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  00134	75 08		 jne	 SHORT $LN2@CheckItemO
  00136	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00139	7d 03		 jge	 SHORT $LN2@CheckItemO

; 983  : 					iAddExpRate += 10;

  0013b	83 c7 0a	 add	 edi, 10			; 0000000aH
$LN2@CheckItemO:

; 976  : 		{
; 977  : 			for (int i = 0; i < MAX_USER_IN_PARTY; ++i )

  0013e	43		 inc	 ebx
  0013f	83 fb 05	 cmp	 ebx, 5
  00142	7c ac		 jl	 SHORT $LL4@CheckItemO
  00144	8b 5d 10	 mov	 ebx, DWORD PTR _bRewardExp$[ebp]
$LN3@CheckItemO:

; 984  : 			}
; 985  :         }
; 986  :         
; 987  : 		// g_MasterLevelSystem.IsMasterLevelUser(lpObj) )
; 988  : 		if ( bRewardExp || g_MasterExp.IsEnabled(lpObj) )

  00147	85 db		 test	 ebx, ebx
  00149	75 13		 jne	 SHORT $LN26@CheckItemO
  0014b	56		 push	 esi
  0014c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  00151	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  00156	85 c0		 test	 eax, eax
  00158	0f 84 09 01 00
	00		 je	 $LN29@CheckItemO
$LN26@CheckItemO:

; 989  : 			iAddExpRate = 100;

  0015e	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 990  : 		
; 991  : 		//iRetExp = iRetExp * iAddExpRate / 100;
; 992  : 	}

  00163	e9 ff 00 00 00	 jmp	 $LN29@CheckItemO
$LN21@CheckItemO:

; 993  : 	else if ( gObjCheckUsedBuffEffect(lpObj, AT_NEWPVPSYSTEM_REWARD) )

  00168	6a 67		 push	 103			; 00000067H
  0016a	56		 push	 esi
  0016b	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00170	83 c4 08	 add	 esp, 8
  00173	84 c0		 test	 al, al
  00175	0f 84 ec 00 00
	00		 je	 $LN29@CheckItemO

; 994  : 	{
; 995  : 		// g_MasterLevelSystem.IsMasterLevelUser(lpObj) )
; 996  : 		if( g_MasterExp.IsEnabled(lpObj) )

  0017b	56		 push	 esi
  0017c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  00181	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  00186	85 c0		 test	 eax, eax
  00188	0f 85 70 06 00
	00		 jne	 $LN1@CheckItemO
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  0018e	80 be 23 01 00
	00 3f		 cmp	 BYTE PTR [esi+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp

; 1000 :         if (g_NewPVP.IsVulcanusMap(lpObj->MapNumber) && iRetExp == iExp) {

  00195	0f 85 cc 00 00
	00		 jne	 $LN29@CheckItemO
  0019b	8b 4d 0c	 mov	 ecx, DWORD PTR _iExp$[ebp]
  0019e	8b 5d f4	 mov	 ebx, DWORD PTR _iRetExp$[ebp]
  001a1	3b 19		 cmp	 ebx, DWORD PTR [ecx]
  001a3	0f 85 bb 00 00
	00		 jne	 $LN83@CheckItemO
  001a9	8b 45 f8	 mov	 eax, DWORD PTR _iRetExp$[ebp+4]
  001ac	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  001af	0f 85 af 00 00
	00		 jne	 $LN83@CheckItemO

; 1001 : 			iExp = iRetExp * gObjGetTotalValueOfEffect(lpObj, 60) / 100 + iRetExp;

  001b5	6a 3c		 push	 60			; 0000003cH
  001b7	56		 push	 esi
  001b8	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  001bd	8b 75 f8	 mov	 esi, DWORD PTR _iRetExp$[ebp+4]
  001c0	83 c4 08	 add	 esp, 8
  001c3	99		 cdq
  001c4	56		 push	 esi
  001c5	53		 push	 ebx
  001c6	52		 push	 edx
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 __allmul
  001cd	6a 00		 push	 0
  001cf	6a 64		 push	 100			; 00000064H
  001d1	52		 push	 edx
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 __alldiv
  001d8	8b 4d 0c	 mov	 ecx, DWORD PTR _iExp$[ebp]
  001db	03 c3		 add	 eax, ebx
  001dd	5f		 pop	 edi
  001de	13 d6		 adc	 edx, esi
  001e0	5e		 pop	 esi
  001e1	89 01		 mov	 DWORD PTR [ecx], eax
  001e3	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001e6	5b		 pop	 ebx

; 1135 : }

  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c3		 ret	 0
$LN10@CheckItemO:

; 942  :     {
; 943  : 		iAddExpRate = gObjGetTotalValueOfEffect(lpObj, ADD_OPTION_EXPERIENCE);

  001eb	6a 06		 push	 6
  001ed	56		 push	 esi
  001ee	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  001f3	83 c4 08	 add	 esp, 8

; 944  : 		
; 945  : 		if( g_MasterExp.IsEnabled(lpObj) )

  001f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  001fb	8b f8		 mov	 edi, eax
  001fd	56		 push	 esi
  001fe	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled

; 946  : 		{
; 947  : 			if ( gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_ASCENSION) || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_WEALTH) )

  00203	6a 65		 push	 101			; 00000065H
  00205	56		 push	 esi
  00206	85 c0		 test	 eax, eax
  00208	74 22		 je	 SHORT $LN11@CheckItemO
  0020a	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0020f	83 c4 08	 add	 esp, 8
  00212	84 c0		 test	 al, al
  00214	75 39		 jne	 SHORT $LN15@CheckItemO
  00216	6a 66		 push	 102			; 00000066H
  00218	56		 push	 esi
  00219	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0021e	83 c4 08	 add	 esp, 8
  00221	84 c0		 test	 al, al
  00223	75 2a		 jne	 SHORT $LN15@CheckItemO

; 948  : 			{
; 949  : 				if ( bRewardExp )
; 950  : 					iAddExpRate = 100;
; 951  : 			}
; 952  : 			else
; 953  : 			{
; 954  : 				iAddExpRate = 100;

  00225	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  0022a	eb 3b		 jmp	 SHORT $LN29@CheckItemO
$LN11@CheckItemO:

; 955  : 			}
; 956  : 		}
; 957  : 		else
; 958  : 		{
; 959  : 			if ( gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_ASCENSION) || gObjCheckUsedBuffEffect(lpObj, AT_CSHOP_MASTER_SEAL_OF_WEALTH) )

  0022c	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00231	83 c4 08	 add	 esp, 8
  00234	84 c0		 test	 al, al
  00236	0f 85 22 ff ff
	ff		 jne	 $LN26@CheckItemO
  0023c	6a 66		 push	 102			; 00000066H
  0023e	56		 push	 esi
  0023f	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00244	83 c4 08	 add	 esp, 8
  00247	84 c0		 test	 al, al
  00249	0f 85 0f ff ff
	ff		 jne	 $LN26@CheckItemO
$LN15@CheckItemO:

; 960  : 			{
; 961  : 				iAddExpRate = 100;
; 962  : 			}
; 963  : 			else
; 964  : 			{
; 965  : 				if ( bRewardExp )

  0024f	85 db		 test	 ebx, ebx
  00251	74 14		 je	 SHORT $LN29@CheckItemO

; 966  : 					iAddExpRate = 100;

  00253	bf 64 00 00 00	 mov	 edi, 100		; 00000064H
  00258	eb 0d		 jmp	 SHORT $LN29@CheckItemO
$LN7@CheckItemO:
  0025a	0f 57 c0	 xorps	 xmm0, xmm0

; 931  : 	{
; 932  : 		iRetExp = 0;

  0025d	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
  00262	eb 03		 jmp	 SHORT $LN29@CheckItemO
$LN83@CheckItemO:
  00264	8b 5d 10	 mov	 ebx, DWORD PTR _bRewardExp$[ebp]
$LN29@CheckItemO:

; 1002 : 			return;
; 1003 : 		}
; 1004 : #endif
; 1005 : 	}
; 1006 : 
; 1007 : 	if( (lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,77) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||

  00267	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  0026d	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  00273	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00278	b9 4d 1a 00 00	 mov	 ecx, 6733		; 00001a4dH
  0027d	0f 57 c9	 xorps	 xmm1, xmm1
  00280	85 c0		 test	 eax, eax
  00282	74 25		 je	 SHORT $LN32@CheckItemO
  00284	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0028a	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00291	75 16		 jne	 SHORT $LN32@CheckItemO
  00293	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  0029b	0f 2f c1	 comiss	 xmm0, xmm1
  0029e	76 09		 jbe	 SHORT $LN32@CheckItemO
  002a0	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  002a7	74 42		 je	 SHORT $LN31@CheckItemO
$LN32@CheckItemO:
  002a9	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  002af	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  002b5	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  002ba	85 c0		 test	 eax, eax
  002bc	74 63		 je	 SHORT $LN37@CheckItemO
  002be	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  002c4	b9 4d 1a 00 00	 mov	 ecx, 6733		; 00001a4dH
  002c9	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  002d0	75 4f		 jne	 SHORT $LN37@CheckItemO
  002d2	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  002da	0f 57 c9	 xorps	 xmm1, xmm1
  002dd	0f 2f c1	 comiss	 xmm0, xmm1
  002e0	76 3f		 jbe	 SHORT $LN37@CheckItemO
  002e2	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  002e9	75 36		 jne	 SHORT $LN37@CheckItemO
$LN31@CheckItemO:

; 1008 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,77) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired))
; 1009 : 	{
; 1010 : 		if( gObjCheckUsedBuffEffect(lpObj,AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj,AT_PCBANG_SEAL_OF_SUSTENANCE) )

  002eb	6a 2a		 push	 42			; 0000002aH
  002ed	56		 push	 esi
  002ee	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  002f3	83 c4 08	 add	 esp, 8
  002f6	84 c0		 test	 al, al
  002f8	75 1f		 jne	 SHORT $LN35@CheckItemO
  002fa	6a 1f		 push	 31			; 0000001fH
  002fc	56		 push	 esi
  002fd	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00302	83 c4 08	 add	 esp, 8
  00305	84 c0		 test	 al, al
  00307	75 10		 jne	 SHORT $LN35@CheckItemO

; 1013 : 		}
; 1014 : 		else
; 1015 : 		{
; 1016 : 			if( bRewardExp )

  00309	85 db		 test	 ebx, ebx
  0030b	74 07		 je	 SHORT $LN36@CheckItemO

; 1017 : 			{
; 1018 : 				iAddExpRate = 100;

  0030d	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1019 : 			}
; 1020 : 			else

  00312	eb 0d		 jmp	 SHORT $LN37@CheckItemO
$LN36@CheckItemO:

; 1021 : 			{
; 1022 : 				iAddExpRate += 30;

  00314	83 c7 1e	 add	 edi, 30			; 0000001eH
  00317	eb 08		 jmp	 SHORT $LN37@CheckItemO
$LN35@CheckItemO:
  00319	0f 57 c0	 xorps	 xmm0, xmm0

; 1011 : 		{
; 1012 : 			iRetExp = 0;

  0031c	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
$LN37@CheckItemO:

; 1023 : 			}
; 1024 : 			
; 1025 : 			//iRetExp = iRetExp * iAddExpRate / 100;
; 1026 : 		}
; 1027 : 	}
; 1028 : 	if( (lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,78) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||

  00321	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00327	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  0032d	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00332	b9 4e 1a 00 00	 mov	 ecx, 6734		; 00001a4eH
  00337	85 c0		 test	 eax, eax
  00339	74 28		 je	 SHORT $LN40@CheckItemO
  0033b	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00341	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00348	75 19		 jne	 SHORT $LN40@CheckItemO
  0034a	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  00352	0f 57 c9	 xorps	 xmm1, xmm1
  00355	0f 2f c1	 comiss	 xmm0, xmm1
  00358	76 09		 jbe	 SHORT $LN40@CheckItemO
  0035a	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  00361	74 42		 je	 SHORT $LN39@CheckItemO
$LN40@CheckItemO:
  00363	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00369	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  0036f	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00374	85 c0		 test	 eax, eax
  00376	74 63		 je	 SHORT $LN45@CheckItemO
  00378	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0037e	b9 4e 1a 00 00	 mov	 ecx, 6734		; 00001a4eH
  00383	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  0038a	75 4f		 jne	 SHORT $LN45@CheckItemO
  0038c	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  00394	0f 57 c9	 xorps	 xmm1, xmm1
  00397	0f 2f c1	 comiss	 xmm0, xmm1
  0039a	76 3f		 jbe	 SHORT $LN45@CheckItemO
  0039c	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  003a3	75 36		 jne	 SHORT $LN45@CheckItemO
$LN39@CheckItemO:

; 1029 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,78) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired))
; 1030 : 	{
; 1031 : 		if( gObjCheckUsedBuffEffect(lpObj,AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj,AT_PCBANG_SEAL_OF_SUSTENANCE) )

  003a5	6a 2a		 push	 42			; 0000002aH
  003a7	56		 push	 esi
  003a8	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  003ad	83 c4 08	 add	 esp, 8
  003b0	84 c0		 test	 al, al
  003b2	75 1f		 jne	 SHORT $LN43@CheckItemO
  003b4	6a 1f		 push	 31			; 0000001fH
  003b6	56		 push	 esi
  003b7	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  003bc	83 c4 08	 add	 esp, 8
  003bf	84 c0		 test	 al, al
  003c1	75 10		 jne	 SHORT $LN43@CheckItemO

; 1034 : 		}
; 1035 : 		else
; 1036 : 		{
; 1037 : 			if( bRewardExp )

  003c3	85 db		 test	 ebx, ebx
  003c5	74 07		 je	 SHORT $LN44@CheckItemO

; 1038 : 			{
; 1039 : 				iAddExpRate = 100;

  003c7	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1040 : 			}
; 1041 : 			else

  003cc	eb 0d		 jmp	 SHORT $LN45@CheckItemO
$LN44@CheckItemO:

; 1042 : 			{
; 1043 : 				iAddExpRate += 50;

  003ce	83 c7 32	 add	 edi, 50			; 00000032H
  003d1	eb 08		 jmp	 SHORT $LN45@CheckItemO
$LN43@CheckItemO:
  003d3	0f 57 c0	 xorps	 xmm0, xmm0

; 1032 : 		{
; 1033 : 			iRetExp = 0;

  003d6	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
$LN45@CheckItemO:

; 1044 : 			}
; 1045 : 			
; 1046 : 			//iRetExp = iRetExp * iAddExpRate / 100;
; 1047 : 		}
; 1048 : 	}
; 1049 : 
; 1050 : 	if( lpObj->pInventory[8].IsItem() && lpObj->pInventory[8].m_Type == ITEMGET(13,80) && lpObj->pInventory[8].m_Durability > 0.0 && !lpObj->pInventory[8].m_bExpired )

  003db	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  003e1	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  003e7	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  003ec	b9 50 1a 00 00	 mov	 ecx, 6736		; 00001a50H
  003f1	85 c0		 test	 eax, eax
  003f3	74 5e		 je	 SHORT $LN51@CheckItemO
  003f5	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  003fb	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00402	75 4f		 jne	 SHORT $LN51@CheckItemO
  00404	f3 0f 10 80 c4
	06 00 00	 movss	 xmm0, DWORD PTR [eax+1732]
  0040c	0f 57 c9	 xorps	 xmm1, xmm1
  0040f	0f 2f c1	 comiss	 xmm0, xmm1
  00412	76 3f		 jbe	 SHORT $LN51@CheckItemO
  00414	80 b8 70 07 00
	00 00		 cmp	 BYTE PTR [eax+1904], 0
  0041b	75 36		 jne	 SHORT $LN51@CheckItemO

; 1051 : 	{
; 1052 : 		if( gObjCheckUsedBuffEffect(lpObj,AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj,AT_PCBANG_SEAL_OF_SUSTENANCE) )

  0041d	6a 2a		 push	 42			; 0000002aH
  0041f	56		 push	 esi
  00420	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00425	83 c4 08	 add	 esp, 8
  00428	84 c0		 test	 al, al
  0042a	75 1f		 jne	 SHORT $LN49@CheckItemO
  0042c	6a 1f		 push	 31			; 0000001fH
  0042e	56		 push	 esi
  0042f	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00434	83 c4 08	 add	 esp, 8
  00437	84 c0		 test	 al, al
  00439	75 10		 jne	 SHORT $LN49@CheckItemO

; 1055 : 		}
; 1056 : 		else
; 1057 : 		{
; 1058 : 			if( bRewardExp )

  0043b	85 db		 test	 ebx, ebx
  0043d	74 07		 je	 SHORT $LN50@CheckItemO

; 1059 : 			{
; 1060 : 				iAddExpRate = 100;

  0043f	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1061 : 			}
; 1062 : 			else

  00444	eb 0d		 jmp	 SHORT $LN51@CheckItemO
$LN50@CheckItemO:

; 1063 : 			{
; 1064 : 				iAddExpRate += 50;

  00446	83 c7 32	 add	 edi, 50			; 00000032H
  00449	eb 08		 jmp	 SHORT $LN51@CheckItemO
$LN49@CheckItemO:
  0044b	0f 57 c0	 xorps	 xmm0, xmm0

; 1053 : 		{
; 1054 : 			iRetExp = 0;

  0044e	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
$LN51@CheckItemO:

; 1065 : 			}
; 1066 : 
; 1067 : 			//iRetExp = iRetExp * iAddExpRate / 100;
; 1068 : 		}
; 1069 : 	}
; 1070 : 
; 1071 : 	if( lpObj->pInventory[8].IsItem() && lpObj->pInventory[8].m_Type == ITEMGET(13,123) && lpObj->pInventory[8].m_Durability > 0.0 && !lpObj->pInventory[8].m_bExpired )

  00453	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00459	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0045f	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00464	b9 7b 1a 00 00	 mov	 ecx, 6779		; 00001a7bH
  00469	85 c0		 test	 eax, eax
  0046b	74 5e		 je	 SHORT $LN57@CheckItemO
  0046d	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00473	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  0047a	75 4f		 jne	 SHORT $LN57@CheckItemO
  0047c	f3 0f 10 80 c4
	06 00 00	 movss	 xmm0, DWORD PTR [eax+1732]
  00484	0f 57 c9	 xorps	 xmm1, xmm1
  00487	0f 2f c1	 comiss	 xmm0, xmm1
  0048a	76 3f		 jbe	 SHORT $LN57@CheckItemO
  0048c	80 b8 70 07 00
	00 00		 cmp	 BYTE PTR [eax+1904], 0
  00493	75 36		 jne	 SHORT $LN57@CheckItemO

; 1072 : 	{
; 1073 : 		if( gObjCheckUsedBuffEffect(lpObj,AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj,AT_PCBANG_SEAL_OF_SUSTENANCE) )

  00495	6a 2a		 push	 42			; 0000002aH
  00497	56		 push	 esi
  00498	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0049d	83 c4 08	 add	 esp, 8
  004a0	84 c0		 test	 al, al
  004a2	75 1f		 jne	 SHORT $LN55@CheckItemO
  004a4	6a 1f		 push	 31			; 0000001fH
  004a6	56		 push	 esi
  004a7	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  004ac	83 c4 08	 add	 esp, 8
  004af	84 c0		 test	 al, al
  004b1	75 10		 jne	 SHORT $LN55@CheckItemO

; 1076 : 		}
; 1077 : 		else
; 1078 : 		{
; 1079 : 			if( bRewardExp )

  004b3	85 db		 test	 ebx, ebx
  004b5	74 07		 je	 SHORT $LN56@CheckItemO

; 1080 : 			{
; 1081 : 				iAddExpRate = 100;

  004b7	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1082 : 			}
; 1083 : 			else

  004bc	eb 0d		 jmp	 SHORT $LN57@CheckItemO
$LN56@CheckItemO:

; 1084 : 			{
; 1085 : 				iAddExpRate += 30;

  004be	83 c7 1e	 add	 edi, 30			; 0000001eH
  004c1	eb 08		 jmp	 SHORT $LN57@CheckItemO
$LN55@CheckItemO:
  004c3	0f 57 c0	 xorps	 xmm0, xmm0

; 1074 : 		{
; 1075 : 			iRetExp = 0;

  004c6	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
$LN57@CheckItemO:

; 1086 : 			}
; 1087 : 
; 1088 : 			//iRetExp = iRetExp * iAddExpRate / 100;
; 1089 : 		}
; 1090 : 	}
; 1091 : 
; 1092 : 	if(((lpObj->pInventory[8].IsItem() && lpObj->pInventory[8].m_Type == ITEMGET(13,80)  && lpObj->pInventory[8].m_Durability > 0.0 &&  !lpObj->pInventory[8].m_bExpired) ||
; 1093 : 		(lpObj->pInventory[8].IsItem() && lpObj->pInventory[8].m_Type == ITEMGET(13,123) && lpObj->pInventory[8].m_Durability > 0.0 &&  !lpObj->pInventory[8].m_bExpired)) &&

  004cb	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  004d1	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  004d7	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  004dc	85 c0		 test	 eax, eax
  004de	74 2d		 je	 SHORT $LN60@CheckItemO
  004e0	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  004e6	b8 50 1a 00 00	 mov	 eax, 6736		; 00001a50H
  004eb	66 39 81 a6 06
	00 00		 cmp	 WORD PTR [ecx+1702], ax
  004f2	75 19		 jne	 SHORT $LN60@CheckItemO
  004f4	f3 0f 10 81 c4
	06 00 00	 movss	 xmm0, DWORD PTR [ecx+1732]
  004fc	0f 57 c9	 xorps	 xmm1, xmm1
  004ff	0f 2f c1	 comiss	 xmm0, xmm1
  00502	76 09		 jbe	 SHORT $LN60@CheckItemO
  00504	80 b9 70 07 00
	00 00		 cmp	 BYTE PTR [ecx+1904], 0
  0050b	74 52		 je	 SHORT $LN59@CheckItemO
$LN60@CheckItemO:
  0050d	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00513	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00519	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0051e	85 c0		 test	 eax, eax
  00520	0f 84 91 02 00
	00		 je	 $LN73@CheckItemO
  00526	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  0052c	b8 7b 1a 00 00	 mov	 eax, 6779		; 00001a7bH
  00531	66 39 81 a6 06
	00 00		 cmp	 WORD PTR [ecx+1702], ax
  00538	0f 85 79 02 00
	00		 jne	 $LN73@CheckItemO
  0053e	f3 0f 10 81 c4
	06 00 00	 movss	 xmm0, DWORD PTR [ecx+1732]
  00546	0f 57 c9	 xorps	 xmm1, xmm1
  00549	0f 2f c1	 comiss	 xmm0, xmm1
  0054c	0f 86 65 02 00
	00		 jbe	 $LN73@CheckItemO
  00552	80 b9 70 07 00
	00 00		 cmp	 BYTE PTR [ecx+1904], 0
  00559	0f 85 58 02 00
	00		 jne	 $LN73@CheckItemO
$LN59@CheckItemO:
  0055f	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  00565	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0056a	b9 4c 1a 00 00	 mov	 ecx, 6732		; 00001a4cH
  0056f	85 c0		 test	 eax, eax
  00571	74 2c		 je	 SHORT $LN62@CheckItemO
  00573	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00579	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00580	75 1d		 jne	 SHORT $LN62@CheckItemO
  00582	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  0058a	0f 57 c9	 xorps	 xmm1, xmm1
  0058d	0f 2f c1	 comiss	 xmm0, xmm1
  00590	76 0d		 jbe	 SHORT $LN62@CheckItemO
  00592	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  00599	0f 84 e2 01 00
	00		 je	 $LN61@CheckItemO
$LN62@CheckItemO:
  0059f	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  005a5	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  005ab	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  005b0	85 c0		 test	 eax, eax
  005b2	74 31		 je	 SHORT $LN63@CheckItemO
  005b4	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  005ba	b9 4c 1a 00 00	 mov	 ecx, 6732		; 00001a4cH
  005bf	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  005c6	75 1d		 jne	 SHORT $LN63@CheckItemO
  005c8	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  005d0	0f 57 c9	 xorps	 xmm1, xmm1
  005d3	0f 2f c1	 comiss	 xmm0, xmm1
  005d6	76 0d		 jbe	 SHORT $LN63@CheckItemO
  005d8	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  005df	0f 84 9c 01 00
	00		 je	 $LN61@CheckItemO
$LN63@CheckItemO:
  005e5	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  005eb	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  005f1	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  005f6	85 c0		 test	 eax, eax
  005f8	74 31		 je	 SHORT $LN64@CheckItemO
  005fa	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00600	b9 4d 1a 00 00	 mov	 ecx, 6733		; 00001a4dH
  00605	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  0060c	75 1d		 jne	 SHORT $LN64@CheckItemO
  0060e	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  00616	0f 57 c9	 xorps	 xmm1, xmm1
  00619	0f 2f c1	 comiss	 xmm0, xmm1
  0061c	76 0d		 jbe	 SHORT $LN64@CheckItemO
  0061e	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  00625	0f 84 56 01 00
	00		 je	 $LN61@CheckItemO
$LN64@CheckItemO:
  0062b	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00631	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  00637	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0063c	85 c0		 test	 eax, eax
  0063e	74 31		 je	 SHORT $LN65@CheckItemO
  00640	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00646	b9 4d 1a 00 00	 mov	 ecx, 6733		; 00001a4dH
  0064b	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  00652	75 1d		 jne	 SHORT $LN65@CheckItemO
  00654	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  0065c	0f 57 c9	 xorps	 xmm1, xmm1
  0065f	0f 2f c1	 comiss	 xmm0, xmm1
  00662	76 0d		 jbe	 SHORT $LN65@CheckItemO
  00664	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  0066b	0f 84 10 01 00
	00		 je	 $LN61@CheckItemO
$LN65@CheckItemO:
  00671	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00677	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  0067d	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00682	85 c0		 test	 eax, eax
  00684	74 31		 je	 SHORT $LN66@CheckItemO
  00686	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0068c	b9 4e 1a 00 00	 mov	 ecx, 6734		; 00001a4eH
  00691	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00698	75 1d		 jne	 SHORT $LN66@CheckItemO
  0069a	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  006a2	0f 57 c9	 xorps	 xmm1, xmm1
  006a5	0f 2f c1	 comiss	 xmm0, xmm1
  006a8	76 0d		 jbe	 SHORT $LN66@CheckItemO
  006aa	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  006b1	0f 84 ca 00 00
	00		 je	 $LN61@CheckItemO
$LN66@CheckItemO:
  006b7	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  006bd	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  006c3	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  006c8	85 c0		 test	 eax, eax
  006ca	74 31		 je	 SHORT $LN67@CheckItemO
  006cc	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  006d2	b9 4e 1a 00 00	 mov	 ecx, 6734		; 00001a4eH
  006d7	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  006de	75 1d		 jne	 SHORT $LN67@CheckItemO
  006e0	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  006e8	0f 57 c9	 xorps	 xmm1, xmm1
  006eb	0f 2f c1	 comiss	 xmm0, xmm1
  006ee	76 0d		 jbe	 SHORT $LN67@CheckItemO
  006f0	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  006f7	0f 84 84 00 00
	00		 je	 $LN61@CheckItemO
$LN67@CheckItemO:
  006fd	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00703	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  00709	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0070e	b9 7a 1a 00 00	 mov	 ecx, 6778		; 00001a7aH
  00713	85 c0		 test	 eax, eax
  00715	74 28		 je	 SHORT $LN68@CheckItemO
  00717	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0071d	66 39 88 4e 08
	00 00		 cmp	 WORD PTR [eax+2126], cx
  00724	75 19		 jne	 SHORT $LN68@CheckItemO
  00726	f3 0f 10 80 6c
	08 00 00	 movss	 xmm0, DWORD PTR [eax+2156]
  0072e	0f 57 c9	 xorps	 xmm1, xmm1
  00731	0f 2f c1	 comiss	 xmm0, xmm1
  00734	76 09		 jbe	 SHORT $LN68@CheckItemO
  00736	80 b8 18 09 00
	00 00		 cmp	 BYTE PTR [eax+2328], 0
  0073d	74 42		 je	 SHORT $LN61@CheckItemO
$LN68@CheckItemO:
  0073f	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00745	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  0074b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00750	85 c0		 test	 eax, eax
  00752	74 63		 je	 SHORT $LN73@CheckItemO
  00754	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0075a	b9 7a 1a 00 00	 mov	 ecx, 6778		; 00001a7aH
  0075f	66 39 88 22 09
	00 00		 cmp	 WORD PTR [eax+2338], cx
  00766	75 4f		 jne	 SHORT $LN73@CheckItemO
  00768	f3 0f 10 80 40
	09 00 00	 movss	 xmm0, DWORD PTR [eax+2368]
  00770	0f 57 c9	 xorps	 xmm1, xmm1
  00773	0f 2f c1	 comiss	 xmm0, xmm1
  00776	76 3f		 jbe	 SHORT $LN73@CheckItemO
  00778	80 b8 ec 09 00
	00 00		 cmp	 BYTE PTR [eax+2540], 0
  0077f	75 36		 jne	 SHORT $LN73@CheckItemO
$LN61@CheckItemO:

; 1094 : 
; 1095 : 	   ((lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,76) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||
; 1096 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,76) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired) ||
; 1097 : 
; 1098 : 		(lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,77) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||
; 1099 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,77) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired) ||
; 1100 : 
; 1101 : 		(lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,78) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||
; 1102 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,78) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired) ||
; 1103 : 		
; 1104 : 		(lpObj->pInventory[10].IsItem() && lpObj->pInventory[10].m_Type == ITEMGET(13,122) && lpObj->pInventory[10].m_Durability > 0.0 &&  !lpObj->pInventory[10].m_bExpired) ||
; 1105 : 		(lpObj->pInventory[11].IsItem() && lpObj->pInventory[11].m_Type == ITEMGET(13,122) && lpObj->pInventory[11].m_Durability > 0.0 &&  !lpObj->pInventory[11].m_bExpired) ))
; 1106 : 	{
; 1107 : 		if( gObjCheckUsedBuffEffect(lpObj,AT_CSHOP_SEAL_OF_SUSTENANCE) || gObjCheckUsedBuffEffect(lpObj,AT_PCBANG_SEAL_OF_SUSTENANCE) )

  00781	6a 2a		 push	 42			; 0000002aH
  00783	56		 push	 esi
  00784	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00789	83 c4 08	 add	 esp, 8
  0078c	84 c0		 test	 al, al
  0078e	75 1f		 jne	 SHORT $LN71@CheckItemO
  00790	6a 1f		 push	 31			; 0000001fH
  00792	56		 push	 esi
  00793	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00798	83 c4 08	 add	 esp, 8
  0079b	84 c0		 test	 al, al
  0079d	75 10		 jne	 SHORT $LN71@CheckItemO

; 1110 : 		}
; 1111 : 		else
; 1112 : 		{
; 1113 : 			if( bRewardExp )

  0079f	85 db		 test	 ebx, ebx
  007a1	74 07		 je	 SHORT $LN72@CheckItemO

; 1114 : 			{
; 1115 : 				iAddExpRate = 100;

  007a3	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 1116 : 			}
; 1117 : 			else

  007a8	eb 0d		 jmp	 SHORT $LN73@CheckItemO
$LN72@CheckItemO:

; 1118 : 			{
; 1119 : 				iAddExpRate += 30;

  007aa	83 c7 1e	 add	 edi, 30			; 0000001eH
  007ad	eb 08		 jmp	 SHORT $LN73@CheckItemO
$LN71@CheckItemO:
  007af	0f 57 c0	 xorps	 xmm0, xmm0

; 1108 : 		{
; 1109 : 			iRetExp = 0;

  007b2	66 0f 13 45 f4	 movlpd	 QWORD PTR _iRetExp$[ebp], xmm0
$LN73@CheckItemO:

; 1120 : 			}
; 1121 : 			
; 1122 : 			//iRetExp = iRetExp * iAddExpRate / 100;
; 1123 : 		}
; 1124 : 	}
; 1125 : 
; 1126 : 	iRetExp = iRetExp * iAddExpRate / 100;

  007b7	ff 75 f8	 push	 DWORD PTR _iRetExp$[ebp+4]
  007ba	8b c7		 mov	 eax, edi
  007bc	ff 75 f4	 push	 DWORD PTR _iRetExp$[ebp]
  007bf	99		 cdq
  007c0	52		 push	 edx
  007c1	50		 push	 eax
  007c2	e8 00 00 00 00	 call	 __allmul
  007c7	6a 00		 push	 0
  007c9	6a 64		 push	 100			; 00000064H
  007cb	52		 push	 edx
  007cc	50		 push	 eax
  007cd	e8 00 00 00 00	 call	 __alldiv

; 1127 : 
; 1128 : #if ( __CUSTOM__ == 1)
; 1129 : 	if( !g_MasterExp.IsEnabled(lpObj) )

  007d2	56		 push	 esi
  007d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  007d8	8b f8		 mov	 edi, eax
  007da	8b da		 mov	 ebx, edx
  007dc	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  007e1	85 c0		 test	 eax, eax
  007e3	75 11		 jne	 SHORT $LN74@CheckItemO

; 1130 : 	{
; 1131 : 		iRetExp = gCustomExp.GetResetExp(lpObj,iRetExp);

  007e5	53		 push	 ebx
  007e6	57		 push	 edi
  007e7	56		 push	 esi
  007e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gCustomExp@@3VTCustomExp@@A ; gCustomExp
  007ed	e8 00 00 00 00	 call	 ?GetResetExp@TCustomExp@@QAE_JPAUOBJECTSTRUCT@@_J@Z ; TCustomExp::GetResetExp
  007f2	8b f8		 mov	 edi, eax
  007f4	8b da		 mov	 ebx, edx
$LN74@CheckItemO:

; 1132 : 	}
; 1133 : #endif
; 1134 : 	iExp = iRetExp;

  007f6	8b 45 0c	 mov	 eax, DWORD PTR _iExp$[ebp]
  007f9	89 38		 mov	 DWORD PTR [eax], edi
  007fb	89 58 04	 mov	 DWORD PTR [eax+4], ebx
$LN1@CheckItemO:
  007fe	5f		 pop	 edi
  007ff	5e		 pop	 esi
  00800	5b		 pop	 ebx

; 1135 : }

  00801	8b e5		 mov	 esp, ebp
  00803	5d		 pop	 ebp
  00804	c3		 ret	 0
?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ENDP ; CheckItemOptForGetExpEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z
_TEXT	SEGMENT
_lpTargetObj$ = 8					; size = 4
_nDistance$ = 12					; size = 4
_nAffectedCount$ = 16					; size = 4
_iBuffIndex$ = 20					; size = 4
_EffectType1$ = 24					; size = 1
_EffectValue1$ = 28					; size = 4
_EffectType2$ = 32					; size = 1
_EffectValue2$ = 36					; size = 4
_Duration$ = 40						; size = 4
?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z PROC ; gObjAddBuffEffectWideArea, COMDAT

; 902  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 903  : 	if(lpTargetObj == NULL)

  00003	83 7d 08 00	 cmp	 DWORD PTR _lpTargetObj$[ebp], 0
  00007	75 04		 jne	 SHORT $LN5@gObjAddBuf

; 904  : 		return FALSE;

  00009	33 c0		 xor	 eax, eax

; 923  : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
$LN5@gObjAddBuf:
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi

; 905  : 
; 906  : 	for(int iIndex = OBJ_STARTUSERINDEX; iIndex < OBJMAX; iIndex++)

  00010	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  00015	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@gObjAddBuf:

; 907  : 	{
; 908  : 		LPOBJ lpObj = &gObj[iIndex];

  00020	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00026	03 f7		 add	 esi, edi

; 909  : 
; 910  : 		if(lpObj->Type == OBJ_USER && gObjIsConnected(iIndex) != FALSE)

  00028	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0002c	75 4d		 jne	 SHORT $LN2@gObjAddBuf
  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00034	83 c4 04	 add	 esp, 4
  00037	85 c0		 test	 eax, eax
  00039	74 40		 je	 SHORT $LN2@gObjAddBuf

; 911  : 		{
; 912  : 			if(lpObj->MapNumber == lpTargetObj->MapNumber)

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _lpTargetObj$[ebp]
  0003e	8a 86 23 01 00
	00		 mov	 al, BYTE PTR [esi+291]
  00044	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  0004a	75 2f		 jne	 SHORT $LN2@gObjAddBuf

; 913  : 			{
; 914  : 				if(gObjCalDistance(lpTargetObj,lpObj) < nDistance)

  0004c	56		 push	 esi
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00053	83 c4 08	 add	 esp, 8
  00056	3b 45 0c	 cmp	 eax, DWORD PTR _nDistance$[ebp]
  00059	7d 20		 jge	 SHORT $LN2@gObjAddBuf

; 915  : 				{
; 916  : 					gObjAddBuffEffect(lpObj, iBuffIndex, EffectType1, EffectValue1, EffectType2, EffectValue2, Duration);

  0005b	ff 75 28	 push	 DWORD PTR _Duration$[ebp]
  0005e	ff 75 24	 push	 DWORD PTR _EffectValue2$[ebp]
  00061	ff 75 20	 push	 DWORD PTR _EffectType2$[ebp]
  00064	ff 75 1c	 push	 DWORD PTR _EffectValue1$[ebp]
  00067	ff 75 18	 push	 DWORD PTR _EffectType1$[ebp]
  0006a	ff 75 14	 push	 DWORD PTR _iBuffIndex$[ebp]
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 917  : 					nAffectedCount+= 1;

  00073	8b 45 10	 mov	 eax, DWORD PTR _nAffectedCount$[ebp]
  00076	83 c4 1c	 add	 esp, 28			; 0000001cH
  00079	ff 00		 inc	 DWORD PTR [eax]
$LN2@gObjAddBuf:

; 905  : 
; 906  : 	for(int iIndex = OBJ_STARTUSERINDEX; iIndex < OBJMAX; iIndex++)

  0007b	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  00081	43		 inc	 ebx
  00082	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  00088	7c 96		 jl	 SHORT $LL4@gObjAddBuf

; 918  : 				}
; 919  : 			}
; 920  : 		}
; 921  : 	}
; 922  : 	return TRUE;

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	b8 01 00 00 00	 mov	 eax, 1
  00091	5b		 pop	 ebx

; 923  : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?gObjAddBuffEffectWideArea@@YAHPAUOBJECTSTRUCT@@HAAHHEHEHH@Z ENDP ; gObjAddBuffEffectWideArea
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjSendBuffList@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjSendBuffList@@YAXPAUOBJECTSTRUCT@@@Z PROC		; gObjSendBuffList, COMDAT

; 884  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 885  : 	if(lpObj == NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	74 38		 je	 SHORT $LN3@gObjSendBu

; 886  : 		return;
; 887  : 
; 888  : 	if(lpObj->Type != OBJ_USER)

  0000b	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  0000f	75 32		 jne	 SHORT $LN3@gObjSendBu

; 889  : 		return;
; 890  : 
; 891  : 	if(lpObj->btEffectCount <= 0)

  00011	80 bf d6 01 00
	00 00		 cmp	 BYTE PTR [edi+470], 0
  00018	76 29		 jbe	 SHORT $LN3@gObjSendBu

; 892  : 		return;
; 893  : 
; 894  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	8d b7 d8 01 00
	00		 lea	 esi, DWORD PTR [edi+472]
  00022	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
$LL4@gObjSendBu:

; 895  : 	{
; 896  : 		if(lpObj->pEffectInfo[i].btEffectNum != NULL)

  00027	8a 06		 mov	 al, BYTE PTR [esi]
  00029	84 c0		 test	 al, al
  0002b	74 0c		 je	 SHORT $LN2@gObjSendBu

; 897  : 			GCStateInfoSend(lpObj, 1, lpObj->pEffectInfo[i].btEffectNum);

  0002d	50		 push	 eax
  0002e	6a 01		 push	 1
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ?GCStateInfoSend@@YAXPAUOBJECTSTRUCT@@EE@Z ; GCStateInfoSend
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@gObjSendBu:

; 892  : 		return;
; 893  : 
; 894  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00039	83 c6 1c	 add	 esi, 28			; 0000001cH
  0003c	83 eb 01	 sub	 ebx, 1
  0003f	75 e6		 jne	 SHORT $LL4@gObjSendBu
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
$LN3@gObjSendBu:
  00043	5f		 pop	 edi

; 898  : 	}
; 899  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?gObjSendBuffList@@YAXPAUOBJECTSTRUCT@@@Z ENDP		; gObjSendBuffList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z
_TEXT	SEGMENT
_pMsg$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_btEffectIndex$ = 12					; size = 1
_btEffectUseOption$ = 16				; size = 1
_wOptionType$ = 20					; size = 2
_wEffectType$ = 24					; size = 2
_iLeftTime$ = 28					; size = 4
?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z PROC	; GCUseBuffEffect, COMDAT

; 857  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 858  : 	PMSG_SEND_BUFF_ICON pMsg;
; 859  : 
; 860  : 	PHeadSetB((LPBYTE)&pMsg, 0x2D, sizeof(PMSG_SEND_BUFF_ICON));

  00015	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	6a 14		 push	 20			; 00000014H
  0001a	6a 2d		 push	 45			; 0000002dH
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 861  : 
; 862  : 	pMsg.btEffectIndex = btEffectIndex;
; 863  : 	pMsg.byEffectOption = btEffectUseOption;

  00022	8a 45 10	 mov	 al, BYTE PTR _btEffectUseOption$[ebp]
  00025	83 c4 0c	 add	 esp, 12			; 0000000cH

; 864  : 	pMsg.wOptionType = wOptionType;
; 865  : 	pMsg.wEffectType = wEffectType;
; 866  : 	pMsg.iLeftTime = iLeftTime;
; 867  : 
; 868  : 	if ( lpObj->Type == OBJ_USER )

  00028	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0002c	8b 5d 0c	 mov	 ebx, DWORD PTR _btEffectIndex$[ebp]
  0002f	88 45 f0	 mov	 BYTE PTR _pMsg$[ebp+8], al
  00032	66 8b 45 14	 mov	 ax, WORD PTR _wOptionType$[ebp]
  00036	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0003a	66 8b 45 18	 mov	 ax, WORD PTR _wEffectType$[ebp]
  0003e	66 89 45 ee	 mov	 WORD PTR _pMsg$[ebp+6], ax
  00042	8b 45 1c	 mov	 eax, DWORD PTR _iLeftTime$[ebp]
  00045	88 5d f8	 mov	 BYTE PTR _pMsg$[ebp+16], bl
  00048	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+12], eax
  0004b	75 13		 jne	 SHORT $LN2@GCUseBuffE

; 869  : 	{
; 870  : 		DataSend(lpObj->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  0004d	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00051	50		 push	 eax
  00052	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00055	50		 push	 eax
  00056	ff 36		 push	 DWORD PTR [esi]
  00058	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GCUseBuffE:

; 871  : 	}
; 872  : 
; 873  : 	if(btEffectUseOption == 0)

  00060	80 7d 10 00	 cmp	 BYTE PTR _btEffectUseOption$[ebp], 0

; 874  : 	{
; 875  : 		GCStateInfoSend(lpObj, 1, btEffectIndex);

  00064	53		 push	 ebx
  00065	75 04		 jne	 SHORT $LN3@GCUseBuffE
  00067	6a 01		 push	 1

; 876  : 	}
; 877  : 	else

  00069	eb 02		 jmp	 SHORT $LN6@GCUseBuffE
$LN3@GCUseBuffE:

; 878  : 	{
; 879  : 		GCStateInfoSend(lpObj, 0, btEffectIndex);

  0006b	6a 00		 push	 0
$LN6@GCUseBuffE:
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?GCStateInfoSend@@YAXPAUOBJECTSTRUCT@@EE@Z ; GCStateInfoSend

; 880  : 	}
; 881  : }

  00073	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	33 cd		 xor	 ecx, ebp
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ENDP	; GCUseBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_EffectValue1$ = 16					; size = 4
_EffectValue2$ = 20					; size = 4
?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z PROC ; gObjGetValueOfBuffIndex, COMDAT

; 831  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 832  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN5@gObjGetVal
$LN16@gObjGetVal:

; 833  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 854  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN5@gObjGetVal:

; 834  : 
; 835  : 	if(lpObj->Connected < PLAYER_PLAYING)

  00010	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00014	7c f5		 jl	 SHORT $LN16@gObjGetVal

; 836  : 		return false;
; 837  : 
; 838  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00016	57		 push	 edi
  00017	8b 7d 0c	 mov	 edi, DWORD PTR _iBuffIndex$[ebp]
  0001a	8d 96 d8 01 00
	00		 lea	 edx, DWORD PTR [esi+472]
  00020	33 c9		 xor	 ecx, ecx
$LL4@gObjGetVal:

; 839  : 	{
; 840  : 		if(lpObj->pEffectInfo[i].btEffectNum == iBuffIndex)

  00022	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00025	3b c7		 cmp	 eax, edi
  00027	74 0f		 je	 SHORT $LN11@gObjGetVal

; 836  : 		return false;
; 837  : 
; 838  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00029	41		 inc	 ecx
  0002a	83 c2 1c	 add	 edx, 28			; 0000001cH
  0002d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00030	7c f0		 jl	 SHORT $LL4@gObjGetVal

; 850  : 		}
; 851  : 	}
; 852  : 
; 853  : 	return false;

  00032	5f		 pop	 edi
  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 854  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
$LN11@gObjGetVal:

; 841  : 		{
; 842  : 			*EffectValue1 = lpObj->pEffectInfo[i].iEffectValue1;

  00038	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0003f	2b c1		 sub	 eax, ecx
  00041	8b 8c 86 e0 01
	00 00		 mov	 ecx, DWORD PTR [esi+eax*4+480]
  00048	8d 14 86	 lea	 edx, DWORD PTR [esi+eax*4]
  0004b	8b 45 10	 mov	 eax, DWORD PTR _EffectValue1$[ebp]
  0004e	89 08		 mov	 DWORD PTR [eax], ecx

; 843  : 
; 844  : 			if(EffectValue2 != 0)

  00050	8b 4d 14	 mov	 ecx, DWORD PTR _EffectValue2$[ebp]
  00053	85 c9		 test	 ecx, ecx
  00055	74 08		 je	 SHORT $LN8@gObjGetVal

; 845  : 			{
; 846  : 				*EffectValue2 = lpObj->pEffectInfo[i].iEffectValue2;

  00057	8b 82 e4 01 00
	00		 mov	 eax, DWORD PTR [edx+484]
  0005d	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@gObjGetVal:

; 847  : 			}
; 848  : 
; 849  : 			return true;

  0005f	5f		 pop	 edi
  00060	b0 01		 mov	 al, 1
  00062	5e		 pop	 esi

; 854  : }

  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ENDP ; gObjGetValueOfBuffIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_EffectType$ = 12					; size = 4
?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z PROC ; gObjGetTotalValueOfEffect, COMDAT

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 803  : 	if(lpObj == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN5@gObjGetTot
$LN15@gObjGetTot:

; 804  : 		return false;

  0000a	33 c0		 xor	 eax, eax

; 828  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN5@gObjGetTot:

; 805  : 
; 806  : 	if(lpObj->Connected < PLAYER_PLAYING)

  0000e	83 79 04 03	 cmp	 DWORD PTR [ecx+4], 3
  00012	7c f6		 jl	 SHORT $LN15@gObjGetTot

; 807  : 		return false;
; 808  : 
; 809  : 	int iTotalValue = 0;

  00014	33 d2		 xor	 edx, edx
  00016	81 c1 da 01 00
	00		 add	 ecx, 474		; 000001daH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _EffectType$[ebp]
  00021	8d 72 10	 lea	 esi, DWORD PTR [edx+16]
$LL4@gObjGetTot:

; 812  : 	{
; 813  : 		if(lpObj->pEffectInfo[i].btEffectNum == NULL)

  00024	80 79 fe 00	 cmp	 BYTE PTR [ecx-2], 0
  00028	74 15		 je	 SHORT $LN2@gObjGetTot

; 814  : 			continue;
; 815  : 
; 816  : 		if(lpObj->pEffectInfo[i].btEffectType1 == EffectType)

  0002a	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0002d	3b c7		 cmp	 eax, edi
  0002f	75 03		 jne	 SHORT $LN8@gObjGetTot

; 817  : 		{
; 818  : 			iTotalValue += lpObj->pEffectInfo[i].iEffectValue1;

  00031	03 51 06	 add	 edx, DWORD PTR [ecx+6]
$LN8@gObjGetTot:

; 819  : 		}
; 820  : 
; 821  : 		if(lpObj->pEffectInfo[i].btEffectType2 == EffectType)

  00034	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  00038	3b c7		 cmp	 eax, edi
  0003a	75 03		 jne	 SHORT $LN2@gObjGetTot

; 822  : 		{
; 823  : 			iTotalValue += lpObj->pEffectInfo[i].iEffectValue2;

  0003c	03 51 0a	 add	 edx, DWORD PTR [ecx+10]
$LN2@gObjGetTot:

; 810  : 
; 811  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0003f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00042	83 ee 01	 sub	 esi, 1
  00045	75 dd		 jne	 SHORT $LL4@gObjGetTot

; 824  : 		}
; 825  : 	}
; 826  : 
; 827  : 	return iTotalValue;

  00047	5f		 pop	 edi
  00048	8b c2		 mov	 eax, edx
  0004a	5e		 pop	 esi

; 828  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ENDP ; gObjGetTotalValueOfEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_EffectValue1$ = 16					; size = 4
_EffectValue2$ = 20					; size = 4
?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z PROC ; gObjCheckPowerfulEffect, COMDAT

; 776  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 777  : 	if(lpObj == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN5@gObjCheckP
$LN21@gObjCheckP:

; 778  : 		return false;

  0000a	32 c0		 xor	 al, al

; 799  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN5@gObjCheckP:

; 779  : 
; 780  : 	if(lpObj->Connected < PLAYER_PLAYING)

  0000e	83 79 04 03	 cmp	 DWORD PTR [ecx+4], 3
  00012	7c f6		 jl	 SHORT $LN21@gObjCheckP

; 781  : 		return false;
; 782  : 
; 783  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00014	53		 push	 ebx
  00015	8b 5d 0c	 mov	 ebx, DWORD PTR _iBuffIndex$[ebp]
  00018	33 d2		 xor	 edx, edx
  0001a	56		 push	 esi
  0001b	8b 75 14	 mov	 esi, DWORD PTR _EffectValue2$[ebp]
  0001e	81 c1 e0 01 00
	00		 add	 ecx, 480		; 000001e0H
  00024	57		 push	 edi
  00025	8b 7d 10	 mov	 edi, DWORD PTR _EffectValue1$[ebp]
$LL4@gObjCheckP:

; 784  : 	{
; 785  : 		if(lpObj->pEffectInfo[i].btEffectNum == iBuffIndex)

  00028	0f b6 41 f8	 movzx	 eax, BYTE PTR [ecx-8]
  0002c	3b c3		 cmp	 eax, ebx
  0002e	75 09		 jne	 SHORT $LN2@gObjCheckP

; 786  : 		{
; 787  : 			if(lpObj->pEffectInfo[i].iEffectValue1 > EffectValue1)

  00030	39 39		 cmp	 DWORD PTR [ecx], edi
  00032	7f 15		 jg	 SHORT $LN13@gObjCheckP

; 788  : 			{
; 789  : 				return true;
; 790  : 			}
; 791  : 
; 792  : 			if(lpObj->pEffectInfo[i].iEffectValue2 > EffectValue2)

  00034	39 71 04	 cmp	 DWORD PTR [ecx+4], esi
  00037	7f 10		 jg	 SHORT $LN13@gObjCheckP
$LN2@gObjCheckP:

; 781  : 		return false;
; 782  : 
; 783  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00039	42		 inc	 edx
  0003a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00040	7c e6		 jl	 SHORT $LL4@gObjCheckP

; 795  : 			}			
; 796  : 		}
; 797  : 	}
; 798  : 	return false;

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	32 c0		 xor	 al, al
  00046	5b		 pop	 ebx

; 799  : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN13@gObjCheckP:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 793  : 			{
; 794  : 				return true;

  0004b	b0 01		 mov	 al, 1
  0004d	5b		 pop	 ebx

; 799  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ENDP ; gObjCheckPowerfulEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjMakeViewportState@@YAHPAUOBJECTSTRUCT@@PAE@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpBuffer$ = 12						; size = 4
?gObjMakeViewportState@@YAHPAUOBJECTSTRUCT@@PAE@Z PROC	; gObjMakeViewportState, COMDAT

; 745  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 746  : 	if(lpObj == NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	75 06		 jne	 SHORT $LN7@gObjMakeVi
$LN21@gObjMakeVi:

; 747  : 		return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5f		 pop	 edi

; 773  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN7@gObjMakeVi:

; 748  : 
; 749  : 	if(lpObj->Connected < PLAYER_PLAYING)

  00011	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  00015	7c f4		 jl	 SHORT $LN21@gObjMakeVi

; 750  : 		return -1;
; 751  : 
; 752  : 	int iBuffCount = 0;

  00017	53		 push	 ebx
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _lpBuffer$[ebp]
  0001b	33 c9		 xor	 ecx, ecx
  0001d	56		 push	 esi

; 753  : 
; 754  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0001e	33 d2		 xor	 edx, edx
  00020	8d b7 d8 01 00
	00		 lea	 esi, DWORD PTR [edi+472]
$LL4@gObjMakeVi:

; 755  : 	{
; 756  : 		if(iBuffCount >= MAX_STATE_COUNT || iBuffCount >= lpObj->btEffectCount)

  00026	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00029	7d 1e		 jge	 SHORT $LN16@gObjMakeVi
  0002b	0f b6 87 d6 01
	00 00		 movzx	 eax, BYTE PTR [edi+470]
  00032	3b c8		 cmp	 ecx, eax
  00034	7d 13		 jge	 SHORT $LN16@gObjMakeVi

; 757  : 			break;
; 758  : 
; 759  : 		if(lpObj->pEffectInfo[i].btEffectNum == NULL)

  00036	8a 06		 mov	 al, BYTE PTR [esi]
  00038	84 c0		 test	 al, al
  0003a	74 04		 je	 SHORT $LN2@gObjMakeVi

; 760  : 			continue;
; 761  : 
; 762  : 		switch(lpObj->pEffectInfo[i].btEffectNum)
; 763  : 		{
; 764  : 		case 0:
; 765  : 			break;
; 766  : 		default:
; 767  : 			lpBuffer[iBuffCount] = lpObj->pEffectInfo[i].btEffectNum;

  0003c	88 04 19	 mov	 BYTE PTR [ecx+ebx], al

; 768  : 			iBuffCount++;

  0003f	41		 inc	 ecx
$LN2@gObjMakeVi:

; 753  : 
; 754  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00040	42		 inc	 edx
  00041	83 c6 1c	 add	 esi, 28			; 0000001cH
  00044	83 fa 10	 cmp	 edx, 16			; 00000010H
  00047	7c dd		 jl	 SHORT $LL4@gObjMakeVi
$LN16@gObjMakeVi:
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 769  : 			break;
; 770  : 		}		
; 771  : 	}
; 772  : 	return iBuffCount;

  0004b	8b c1		 mov	 eax, ecx
  0004d	5f		 pop	 edi

; 773  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?gObjMakeViewportState@@YAHPAUOBJECTSTRUCT@@PAE@Z ENDP	; gObjMakeViewportState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjSetActiveEffectAtTick@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjSetActiveEffectAtTick@@YAXPAUOBJECTSTRUCT@@@Z PROC	; gObjSetActiveEffectAtTick, COMDAT

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 732  : 	int EffectValue = 0;
; 733  : 
; 734  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0000e	8d b3 e0 01 00
	00		 lea	 esi, DWORD PTR [ebx+480]
$LL4@gObjSetAct:

; 735  : 	{
; 736  : 		if(lpObj->pEffectInfo[i].btEffectNum != NULL)

  00014	80 7e f8 00	 cmp	 BYTE PTR [esi-8], 0
  00018	74 25		 je	 SHORT $LN2@gObjSetAct

; 737  : 		{
; 738  : 			g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);

  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	0f b6 46 fa	 movzx	 eax, BYTE PTR [esi-6]
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00025	50		 push	 eax
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetActiveBuffEffect

; 739  : 			g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);

  0002c	ff 76 04	 push	 DWORD PTR [esi+4]
  0002f	0f b6 46 fb	 movzx	 eax, BYTE PTR [esi-5]
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00038	50		 push	 eax
  00039	53		 push	 ebx
  0003a	e8 00 00 00 00	 call	 ?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetActiveBuffEffect
$LN2@gObjSetAct:

; 732  : 	int EffectValue = 0;
; 733  : 
; 734  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0003f	83 c6 1c	 add	 esi, 28			; 0000001cH
  00042	83 ef 01	 sub	 edi, 1
  00045	75 cd		 jne	 SHORT $LL4@gObjSetAct
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 740  : 		}
; 741  : 	}
; 742  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?gObjSetActiveEffectAtTick@@YAXPAUOBJECTSTRUCT@@@Z ENDP	; gObjSetActiveEffectAtTick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjChangeBuffValidTime@@YA_NPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_iTime$ = 16						; size = 4
?gObjChangeBuffValidTime@@YA_NPAUOBJECTSTRUCT@@HH@Z PROC ; gObjChangeBuffValidTime, COMDAT

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 703  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN5@gObjChange
$LN19@gObjChange:

; 704  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 725  : 		}
; 726  : 	}
; 727  : 	return false;
; 728  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN5@gObjChange:

; 705  : 
; 706  : 	if(lpObj->Connected < PLAYER_PLAYING)

  00010	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00014	7c f5		 jl	 SHORT $LN19@gObjChange

; 707  : 		return false;
; 708  : 
; 709  : 	DWORD iTimeValue = GetTickCount();

  00016	53		 push	 ebx
  00017	57		 push	 edi
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 712  : 	{
; 713  : 		if(i > lpObj->btEffectCount)

  0001e	8a 86 d6 01 00
	00		 mov	 al, BYTE PTR [esi+470]
  00024	8d 96 d8 01 00
	00		 lea	 edx, DWORD PTR [esi+472]
  0002a	8b 7d 0c	 mov	 edi, DWORD PTR _iBuffIndex$[ebp]
  0002d	33 c9		 xor	 ecx, ecx
  0002f	0f b6 d8	 movzx	 ebx, al
$LL4@gObjChange:
  00032	3b cb		 cmp	 ecx, ebx
  00034	7f 10		 jg	 SHORT $LN12@gObjChange

; 715  : 
; 716  : 		if(lpObj->pEffectInfo[i].btEffectNum == iBuffIndex)

  00036	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00039	3b c7		 cmp	 eax, edi
  0003b	74 10		 je	 SHORT $LN13@gObjChange

; 710  : 
; 711  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0003d	41		 inc	 ecx
  0003e	83 c2 1c	 add	 edx, 28			; 0000001cH
  00041	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00044	7c ec		 jl	 SHORT $LL4@gObjChange
$LN12@gObjChange:
  00046	5f		 pop	 edi
  00047	5b		 pop	 ebx

; 714  : 			return false;

  00048	32 c0		 xor	 al, al
  0004a	5e		 pop	 esi

; 725  : 		}
; 726  : 	}
; 727  : 	return false;
; 728  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
$LN13@gObjChange:

; 717  : 		{
; 718  : 			lpObj->pEffectInfo[i].iTimeValue += iTime;

  0004d	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00054	2b c1		 sub	 eax, ecx
  00056	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  00059	8b 45 10	 mov	 eax, DWORD PTR _iTime$[ebp]
  0005c	01 81 f0 01 00
	00		 add	 DWORD PTR [ecx+496], eax

; 719  : 
; 720  : 			if(lpObj->pEffectInfo[i].iTimeValue < 0)

  00062	79 0a		 jns	 SHORT $LN9@gObjChange

; 721  : 			{
; 722  : 				gObjRemoveBuffEffect(lpObj, iBuffIndex);

  00064	57		 push	 edi
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  0006b	83 c4 08	 add	 esp, 8
$LN9@gObjChange:

; 723  : 			}
; 724  : 			return true;

  0006e	5f		 pop	 edi
  0006f	5b		 pop	 ebx
  00070	b0 01		 mov	 al, 1
  00072	5e		 pop	 esi

; 725  : 		}
; 726  : 	}
; 727  : 	return false;
; 728  : }

  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?gObjChangeBuffValidTime@@YA_NPAUOBJECTSTRUCT@@HH@Z ENDP ; gObjChangeBuffValidTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z PROC	; gObjCheckUsedBuffEffect, COMDAT

; 691  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 	if(lpObj == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 1e		 je	 SHORT $LN4@gObjCheckU

; 693  : 		return false;
; 694  : 
; 695  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	85 c9		 test	 ecx, ecx
  0000e	78 18		 js	 SHORT $LN4@gObjCheckU
  00010	81 f9 ec 2c 00
	00		 cmp	 ecx, 11500		; 00002cecH
  00016	7f 10		 jg	 SHORT $LN4@gObjCheckU

; 697  : 
; 698  : 	return g_BuffEffectSlot.CheckUsedEffect(lpObj,iBuffIndex);

  00018	ff 75 0c	 push	 DWORD PTR _iBuffIndex$[ebp]
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::CheckUsedEffect

; 699  : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN4@gObjCheckU:

; 696  : 		return false;

  00028	32 c0		 xor	 al, al

; 699  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ENDP	; gObjCheckUsedBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_ClearType$ = 12					; size = 4
?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z PROC ; gObjClearBuffEffect, COMDAT

; 508  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 509  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	0f 84 75 01 00
	00		 je	 $LN29@gObjClearB

; 510  : 		return 0;
; 511  : 
; 512  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	85 c0		 test	 eax, eax
  00013	0f 88 6b 01 00
	00		 js	 $LN29@gObjClearB
  00019	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001e	0f 8f 60 01 00
	00		 jg	 $LN29@gObjClearB

; 514  : 
; 515  : 	int iRemoveBuffEffectCount = 0;
; 516  : 	int iBuffIndex = 0;
; 517  : 	
; 518  : 	switch(ClearType)

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _ClearType$[ebp]
  00027	53		 push	 ebx
  00028	57		 push	 edi
  00029	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  0002c	83 f8 05	 cmp	 eax, 5
  0002f	0f 87 23 01 00
	00		 ja	 $LN47@gObjClearB
  00035	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN74@gObjClearB[eax*4]
$LN30@gObjClearB:

; 519  : 	{
; 520  : 	case CLEAR_TYPE_CASTLESIEGE:
; 521  : 		{
; 522  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  0003c	33 ff		 xor	 edi, edi
  0003e	8d 9e d8 01 00
	00		 lea	 ebx, DWORD PTR [esi+472]
$LL6@gObjClearB:

; 523  : 			{
; 524  : 				switch(lpObj->pEffectInfo[iBuffIndex].btEffectNum)

  00044	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00046	8a c1		 mov	 al, cl
  00048	2c 0e		 sub	 al, 14			; 0000000eH
  0004a	3c 03		 cmp	 al, 3
  0004c	77 15		 ja	 SHORT $LN4@gObjClearB

; 525  : 				{
; 526  : 				case AT_WATCHING_TOWER:
; 527  : 				case AT_ATTACKING_GUILD1:
; 528  : 				case AT_ATTACKING_GUILD2:
; 529  : 				case AT_ATTACKING_GUILD3:
; 530  : 					{
; 531  : 						if(gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[iBuffIndex].btEffectNum) == TRUE)

  0004e	0f b6 c1	 movzx	 eax, cl
  00051	50		 push	 eax
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00058	83 c4 08	 add	 esp, 8
  0005b	3c 01		 cmp	 al, 1
  0005d	75 04		 jne	 SHORT $LN4@gObjClearB

; 532  : 						{
; 533  : 							iRemoveBuffEffectCount++;
; 534  : 							iBuffIndex--;

  0005f	4f		 dec	 edi
  00060	83 eb 1c	 sub	 ebx, 28			; 0000001cH
$LN4@gObjClearB:

; 519  : 	{
; 520  : 	case CLEAR_TYPE_CASTLESIEGE:
; 521  : 		{
; 522  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  00063	47		 inc	 edi
  00064	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00067	83 ff 10	 cmp	 edi, 16			; 00000010H
  0006a	7c d8		 jl	 SHORT $LL6@gObjClearB

; 535  : 						}
; 536  : 					}
; 537  : 					break;
; 538  : 				default:
; 539  : 					{
; 540  : 						break;
; 541  : 					}
; 542  : 					break;
; 543  : 				}
; 544  : 			}
; 545  : 		}
; 546  : 		break;

  0006c	e9 f3 00 00 00	 jmp	 $LN2@gObjClearB
$LN34@gObjClearB:

; 547  : 	case CLEAR_TYPE_PCBANG_SEAL_FINISH:
; 548  : 		{
; 549  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  00071	33 ff		 xor	 edi, edi
  00073	8d 9e d8 01 00
	00		 lea	 ebx, DWORD PTR [esi+472]
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@gObjClearB:

; 550  : 			{
; 551  : 				switch(lpObj->pEffectInfo[iBuffIndex].btEffectNum)

  00080	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00082	8a c1		 mov	 al, cl
  00084	2c 1d		 sub	 al, 29			; 0000001dH
  00086	3c 02		 cmp	 al, 2
  00088	77 15		 ja	 SHORT $LN9@gObjClearB

; 552  : 				{
; 553  : 				case AT_PCBANG_SEAL_OF_ASCENSION:
; 554  : 				case AT_PCBANG_SEAL_OF_WEALTH:
; 555  : 				case AT_PCBANG_SEAL_OF_SUSTENANCE:
; 556  : 					{
; 557  : 						if(gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[iBuffIndex].btEffectNum) == TRUE)

  0008a	0f b6 c1	 movzx	 eax, cl
  0008d	50		 push	 eax
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00094	83 c4 08	 add	 esp, 8
  00097	3c 01		 cmp	 al, 1
  00099	75 04		 jne	 SHORT $LN9@gObjClearB

; 558  : 						{
; 559  : 							iRemoveBuffEffectCount++;
; 560  : 							iBuffIndex--;

  0009b	4f		 dec	 edi
  0009c	83 eb 1c	 sub	 ebx, 28			; 0000001cH
$LN9@gObjClearB:

; 547  : 	case CLEAR_TYPE_PCBANG_SEAL_FINISH:
; 548  : 		{
; 549  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  0009f	47		 inc	 edi
  000a0	83 c3 1c	 add	 ebx, 28			; 0000001cH
  000a3	83 ff 10	 cmp	 edi, 16			; 00000010H
  000a6	7c d8		 jl	 SHORT $LL11@gObjClearB

; 561  : 						}
; 562  : 					}
; 563  : 					break;
; 564  : 				default:
; 565  : 					{
; 566  : 						break;
; 567  : 					}
; 568  : 					break;
; 569  : 				}
; 570  : 			}
; 571  : 		}
; 572  : 		break;

  000a8	e9 b7 00 00 00	 jmp	 $LN2@gObjClearB
$LN38@gObjClearB:

; 573  : 	case CLEAR_TYPE_NON_PCS_ITEM_EFFECT:
; 574  : 		{
; 575  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  000ad	33 ff		 xor	 edi, edi
  000af	8d 9e d8 01 00
	00		 lea	 ebx, DWORD PTR [esi+472]
$LL16@gObjClearB:

; 576  : 			{
; 577  : 				switch(lpObj->pEffectInfo[iBuffIndex].btEffectNum)

  000b5	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  000b8	8d 41 e3	 lea	 eax, DWORD PTR [ecx-29]
  000bb	83 f8 63	 cmp	 eax, 99			; 00000063H
  000be	77 0e		 ja	 SHORT $LN40@gObjClearB
  000c0	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN71@gObjClearB[eax]
  000c7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN75@gObjClearB[eax*4]
$LN40@gObjClearB:

; 578  : 				{
; 579  : 				case AT_PCBANG_SEAL_OF_ASCENSION:
; 580  : 				case AT_PCBANG_SEAL_OF_WEALTH:
; 581  : 				case AT_PCBANG_SEAL_OF_SUSTENANCE:
; 582  : 
; 583  : 				case AT_CSHOP_SEAL_OF_ASCENSION:
; 584  : 				case AT_CSHOP_SEAL_OF_WEALTH:
; 585  : 				case AT_CSHOP_SEAL_OF_SUSTENANCE:
; 586  : 				case AT_CSHOP_SEAL_OF_MOBILITY:
; 587  : 
; 588  : 				case AT_CSHOP_SCROLL_OF_QUICKNESS:
; 589  : 				case AT_CSHOP_SCROLL_OF_DEFENSE:
; 590  : 				case AT_CSHOP_SCROLL_OF_WRATH:
; 591  : 				case AT_CSHOP_SCROLL_OF_WIZARDRY:
; 592  : 				case AT_CSHOP_SCROLL_OF_HEALTH:
; 593  : 				case AT_CSHOP_SCROLL_OF_MANA:
; 594  : 
; 595  : 				case AT_CSHOP_LEAP_OF_STRENGTH:
; 596  : 				case AT_CSHOP_LEAP_OF_QUICKNESS:
; 597  : 				case AT_CSHOP_LEAP_OF_HEALTH:
; 598  : 				case AT_CSHOP_LEAP_OF_ENERGY:
; 599  : 				case AT_CSHOP_LEAP_OF_CONTROL:
; 600  : 
; 601  : 				case AT_CSHOP_SEAL_OF_HEALING:
; 602  : 				case AT_CSHOP_SEAL_OF_DIVINITY:
; 603  : 
; 604  : 				case AT_CSHOP_SCROLL_OF_BATTLE:
; 605  : 				case AT_CSHOP_SCROLL_OF_STRENGTHENER:
; 606  : 
; 607  : 				case AT_CSHOP_GUARDIAN_AMULET:
; 608  : 				case AT_CSHOP_PROTECT_AMULET:
; 609  : 				case AT_CSHOP_MASTER_SEAL_OF_ASCENSION:
; 610  : 				case AT_CSHOP_MASTER_SEAL_OF_WEALTH:
; 611  : 				case 112:
; 612  : 				case 113:
; 613  : 				case 114:
; 614  : 				case 119:
; 615  : 				case 120:
; 616  : 				case 121:
; 617  : 				case 122:
; 618  : 				case 123:
; 619  : 				case 124:
; 620  : 				case 125:
; 621  : 				case 126:
; 622  : 				case 127:
; 623  : 				case 128:
; 624  : 					break;
; 625  : 				default:
; 626  : 					{
; 627  : 						if(gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[iBuffIndex].btEffectNum) == TRUE)

  000ce	51		 push	 ecx
  000cf	56		 push	 esi
  000d0	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  000d5	83 c4 08	 add	 esp, 8
  000d8	3c 01		 cmp	 al, 1
  000da	75 04		 jne	 SHORT $LN14@gObjClearB

; 628  : 						{
; 629  : 							iRemoveBuffEffectCount++;
; 630  : 							iBuffIndex--;

  000dc	4f		 dec	 edi
  000dd	83 eb 1c	 sub	 ebx, 28			; 0000001cH
$LN14@gObjClearB:

; 573  : 	case CLEAR_TYPE_NON_PCS_ITEM_EFFECT:
; 574  : 		{
; 575  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  000e0	47		 inc	 edi
  000e1	83 c3 1c	 add	 ebx, 28			; 0000001cH
  000e4	83 ff 10	 cmp	 edi, 16			; 00000010H
  000e7	7c cc		 jl	 SHORT $LL16@gObjClearB

; 631  : 						}
; 632  : 					}
; 633  : 					break;
; 634  : 				}
; 635  : 			}
; 636  : 		}
; 637  : 		break;

  000e9	eb 79		 jmp	 SHORT $LN2@gObjClearB
$LN42@gObjClearB:

; 638  : 	case CLEAR_TYPE_LOGOUT:
; 639  : 		{
; 640  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  000eb	33 ff		 xor	 edi, edi
  000ed	8d 9e d8 01 00
	00		 lea	 ebx, DWORD PTR [esi+472]
$LL21@gObjClearB:

; 641  : 			{
; 642  : 				if(gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[iBuffIndex].btEffectNum) == TRUE)

  000f3	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  000f6	50		 push	 eax
  000f7	56		 push	 esi
  000f8	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  000fd	83 c4 08	 add	 esp, 8
  00100	3c 01		 cmp	 al, 1
  00102	75 04		 jne	 SHORT $LN19@gObjClearB

; 643  : 				{
; 644  : 					iRemoveBuffEffectCount++;
; 645  : 					iBuffIndex--;

  00104	4f		 dec	 edi
  00105	83 eb 1c	 sub	 ebx, 28			; 0000001cH
$LN19@gObjClearB:

; 638  : 	case CLEAR_TYPE_LOGOUT:
; 639  : 		{
; 640  : 			for(iBuffIndex = 0; iBuffIndex < MAX_STATE_COUNT; iBuffIndex++)

  00108	47		 inc	 edi
  00109	83 c3 1c	 add	 ebx, 28			; 0000001cH
  0010c	83 ff 10	 cmp	 edi, 16			; 00000010H
  0010f	7c e2		 jl	 SHORT $LL21@gObjClearB

; 646  : 				}
; 647  : 			}
; 648  : 			lpObj->btEffectCount = 0;

  00111	c6 86 d6 01 00
	00 00		 mov	 BYTE PTR [esi+470], 0

; 649  : 		}
; 650  : 		break;

  00118	eb 4a		 jmp	 SHORT $LN2@gObjClearB
$LN44@gObjClearB:

; 651  : 	case CLEAR_TYPE_MONSTERREGEN:
; 652  : 		for( iBuffIndex = 0; iBuffIndex < MAX_EFFECT_INFO; iBuffIndex++)

  0011a	33 ff		 xor	 edi, edi
  0011c	8d 9e d8 01 00
	00		 lea	 ebx, DWORD PTR [esi+472]
$LL24@gObjClearB:

; 653  : 		{
; 654  : 			switch( lpObj->pEffectInfo[iBuffIndex].btEffectNum )

  00122	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]
  00125	8d 41 b7	 lea	 eax, DWORD PTR [ecx-73]
  00128	83 f8 71	 cmp	 eax, 113		; 00000071H
  0012b	77 20		 ja	 SHORT $LN22@gObjClearB
  0012d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN72@gObjClearB[eax]
  00134	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN76@gObjClearB[eax*4]
$LN45@gObjClearB:

; 655  : 			{
; 656  : 			case BUFF_WEAKNESS:
; 657  : 			case BUFF_WEAKNESS2:
; 658  : 			case BUFF_INNOVATION	:
; 659  : 			case BUFF_INNOVATION2:
; 660  : 			case BUFF_BLIND:
; 661  : 			case BUFF_BLIND2:
; 662  : 			case BUFF_DECREASE_DEFRATE:
; 663  : 			case BUFF_DECREASE_DEFRATE2:
; 664  : 			case BUFF_CONFUSION:
; 665  : 				if( gObjRemoveBuffEffect(lpObj,lpObj->pEffectInfo[iBuffIndex].btEffectNum) == TRUE )

  0013b	51		 push	 ecx
  0013c	56		 push	 esi
  0013d	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00142	83 c4 08	 add	 esp, 8
  00145	3c 01		 cmp	 al, 1
  00147	75 04		 jne	 SHORT $LN22@gObjClearB

; 666  : 				{
; 667  : 					iRemoveBuffEffectCount++;
; 668  : 					iBuffIndex--;

  00149	4f		 dec	 edi
  0014a	83 eb 1c	 sub	 ebx, 28			; 0000001cH
$LN22@gObjClearB:

; 651  : 	case CLEAR_TYPE_MONSTERREGEN:
; 652  : 		for( iBuffIndex = 0; iBuffIndex < MAX_EFFECT_INFO; iBuffIndex++)

  0014d	47		 inc	 edi
  0014e	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00151	83 ff 20	 cmp	 edi, 32			; 00000020H
  00154	7c cc		 jl	 SHORT $LL24@gObjClearB

; 669  : 				}
; 670  : 				break;
; 671  : 			}
; 672  : 		}
; 673  : 		break;

  00156	eb 0c		 jmp	 SHORT $LN2@gObjClearB
$LN47@gObjClearB:

; 674  : 	default:
; 675  : 		{
; 676  : 			iRemoveBuffEffectCount = g_BuffEffectSlot.ClearEffect(lpObj,ClearType);

  00158	51		 push	 ecx
  00159	56		 push	 esi
  0015a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  0015f	e8 00 00 00 00	 call	 ?ClearEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; CBuffEffectSlot::ClearEffect
$LN2@gObjClearB:

; 677  : 		}
; 678  : 		break;
; 679  : 	}
; 680  : 
; 681  : 	if(lpObj->btEffectCount < 0 || lpObj->btEffectCount > MAX_STATE_COUNT)

  00164	80 be d6 01 00
	00 10		 cmp	 BYTE PTR [esi+470], 16	; 00000010H
  0016b	5f		 pop	 edi
  0016c	5b		 pop	 ebx
  0016d	76 07		 jbe	 SHORT $LN48@gObjClearB

; 682  : 	{
; 683  : 		lpObj->btEffectCount = 0;

  0016f	c6 86 d6 01 00
	00 00		 mov	 BYTE PTR [esi+470], 0
$LN48@gObjClearB:

; 684  : 	}
; 685  : 
; 686  : 	gObjSendBuffList(lpObj);

  00176	56		 push	 esi
  00177	e8 00 00 00 00	 call	 ?gObjSendBuffList@@YAXPAUOBJECTSTRUCT@@@Z ; gObjSendBuffList
  0017c	83 c4 04	 add	 esp, 4

; 687  : 	return true;

  0017f	b0 01		 mov	 al, 1
  00181	5e		 pop	 esi

; 688  : }

  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
$LN29@gObjClearB:

; 513  : 		return 0;

  00184	32 c0		 xor	 al, al
  00186	5e		 pop	 esi

; 688  : }

  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
  00189	0f 1f 00	 npad	 3
$LN74@gObjClearB:
  0018c	00 00 00 00	 DD	 $LN42@gObjClearB
  00190	00 00 00 00	 DD	 $LN44@gObjClearB
  00194	00 00 00 00	 DD	 $LN47@gObjClearB
  00198	00 00 00 00	 DD	 $LN34@gObjClearB
  0019c	00 00 00 00	 DD	 $LN38@gObjClearB
  001a0	00 00 00 00	 DD	 $LN30@gObjClearB
$LN75@gObjClearB:
  001a4	00 00 00 00	 DD	 $LN14@gObjClearB
  001a8	00 00 00 00	 DD	 $LN40@gObjClearB
$LN71@gObjClearB:
  001ac	00		 DB	 0
  001ad	00		 DB	 0
  001ae	00		 DB	 0
  001af	01		 DB	 1
  001b0	01		 DB	 1
  001b1	01		 DB	 1
  001b2	01		 DB	 1
  001b3	01		 DB	 1
  001b4	01		 DB	 1
  001b5	01		 DB	 1
  001b6	01		 DB	 1
  001b7	00		 DB	 0
  001b8	00		 DB	 0
  001b9	00		 DB	 0
  001ba	00		 DB	 0
  001bb	00		 DB	 0
  001bc	00		 DB	 0
  001bd	00		 DB	 0
  001be	00		 DB	 0
  001bf	00		 DB	 0
  001c0	00		 DB	 0
  001c1	00		 DB	 0
  001c2	00		 DB	 0
  001c3	00		 DB	 0
  001c4	00		 DB	 0
  001c5	00		 DB	 0
  001c6	01		 DB	 1
  001c7	01		 DB	 1
  001c8	01		 DB	 1
  001c9	01		 DB	 1
  001ca	01		 DB	 1
  001cb	01		 DB	 1
  001cc	01		 DB	 1
  001cd	01		 DB	 1
  001ce	01		 DB	 1
  001cf	01		 DB	 1
  001d0	01		 DB	 1
  001d1	01		 DB	 1
  001d2	01		 DB	 1
  001d3	01		 DB	 1
  001d4	01		 DB	 1
  001d5	01		 DB	 1
  001d6	01		 DB	 1
  001d7	01		 DB	 1
  001d8	01		 DB	 1
  001d9	01		 DB	 1
  001da	01		 DB	 1
  001db	01		 DB	 1
  001dc	01		 DB	 1
  001dd	01		 DB	 1
  001de	01		 DB	 1
  001df	01		 DB	 1
  001e0	01		 DB	 1
  001e1	01		 DB	 1
  001e2	01		 DB	 1
  001e3	01		 DB	 1
  001e4	01		 DB	 1
  001e5	01		 DB	 1
  001e6	00		 DB	 0
  001e7	00		 DB	 0
  001e8	00		 DB	 0
  001e9	00		 DB	 0
  001ea	01		 DB	 1
  001eb	01		 DB	 1
  001ec	01		 DB	 1
  001ed	01		 DB	 1
  001ee	01		 DB	 1
  001ef	01		 DB	 1
  001f0	01		 DB	 1
  001f1	01		 DB	 1
  001f2	00		 DB	 0
  001f3	00		 DB	 0
  001f4	00		 DB	 0
  001f5	00		 DB	 0
  001f6	01		 DB	 1
  001f7	01		 DB	 1
  001f8	01		 DB	 1
  001f9	01		 DB	 1
  001fa	01		 DB	 1
  001fb	01		 DB	 1
  001fc	01		 DB	 1
  001fd	01		 DB	 1
  001fe	01		 DB	 1
  001ff	00		 DB	 0
  00200	00		 DB	 0
  00201	00		 DB	 0
  00202	01		 DB	 1
  00203	01		 DB	 1
  00204	01		 DB	 1
  00205	01		 DB	 1
  00206	00		 DB	 0
  00207	00		 DB	 0
  00208	00		 DB	 0
  00209	00		 DB	 0
  0020a	00		 DB	 0
  0020b	00		 DB	 0
  0020c	00		 DB	 0
  0020d	00		 DB	 0
  0020e	00		 DB	 0
  0020f	00		 DB	 0
$LN76@gObjClearB:
  00210	00 00 00 00	 DD	 $LN45@gObjClearB
  00214	00 00 00 00	 DD	 $LN22@gObjClearB
$LN72@gObjClearB:
  00218	00		 DB	 0
  00219	01		 DB	 1
  0021a	01		 DB	 1
  0021b	00		 DB	 0
  0021c	00		 DB	 0
  0021d	01		 DB	 1
  0021e	01		 DB	 1
  0021f	01		 DB	 1
  00220	01		 DB	 1
  00221	01		 DB	 1
  00222	01		 DB	 1
  00223	01		 DB	 1
  00224	01		 DB	 1
  00225	01		 DB	 1
  00226	01		 DB	 1
  00227	01		 DB	 1
  00228	01		 DB	 1
  00229	01		 DB	 1
  0022a	01		 DB	 1
  0022b	01		 DB	 1
  0022c	01		 DB	 1
  0022d	01		 DB	 1
  0022e	01		 DB	 1
  0022f	01		 DB	 1
  00230	01		 DB	 1
  00231	01		 DB	 1
  00232	01		 DB	 1
  00233	01		 DB	 1
  00234	01		 DB	 1
  00235	01		 DB	 1
  00236	01		 DB	 1
  00237	01		 DB	 1
  00238	01		 DB	 1
  00239	01		 DB	 1
  0023a	01		 DB	 1
  0023b	01		 DB	 1
  0023c	01		 DB	 1
  0023d	01		 DB	 1
  0023e	01		 DB	 1
  0023f	01		 DB	 1
  00240	01		 DB	 1
  00241	01		 DB	 1
  00242	01		 DB	 1
  00243	01		 DB	 1
  00244	01		 DB	 1
  00245	01		 DB	 1
  00246	01		 DB	 1
  00247	01		 DB	 1
  00248	01		 DB	 1
  00249	01		 DB	 1
  0024a	01		 DB	 1
  0024b	01		 DB	 1
  0024c	01		 DB	 1
  0024d	01		 DB	 1
  0024e	01		 DB	 1
  0024f	01		 DB	 1
  00250	01		 DB	 1
  00251	01		 DB	 1
  00252	01		 DB	 1
  00253	00		 DB	 0
  00254	01		 DB	 1
  00255	01		 DB	 1
  00256	01		 DB	 1
  00257	01		 DB	 1
  00258	01		 DB	 1
  00259	01		 DB	 1
  0025a	01		 DB	 1
  0025b	01		 DB	 1
  0025c	01		 DB	 1
  0025d	01		 DB	 1
  0025e	01		 DB	 1
  0025f	00		 DB	 0
  00260	01		 DB	 1
  00261	01		 DB	 1
  00262	01		 DB	 1
  00263	01		 DB	 1
  00264	01		 DB	 1
  00265	01		 DB	 1
  00266	01		 DB	 1
  00267	01		 DB	 1
  00268	01		 DB	 1
  00269	01		 DB	 1
  0026a	01		 DB	 1
  0026b	01		 DB	 1
  0026c	01		 DB	 1
  0026d	01		 DB	 1
  0026e	01		 DB	 1
  0026f	01		 DB	 1
  00270	01		 DB	 1
  00271	00		 DB	 0
  00272	00		 DB	 0
  00273	00		 DB	 0
  00274	01		 DB	 1
  00275	01		 DB	 1
  00276	01		 DB	 1
  00277	01		 DB	 1
  00278	01		 DB	 1
  00279	01		 DB	 1
  0027a	01		 DB	 1
  0027b	01		 DB	 1
  0027c	01		 DB	 1
  0027d	01		 DB	 1
  0027e	01		 DB	 1
  0027f	01		 DB	 1
  00280	01		 DB	 1
  00281	01		 DB	 1
  00282	01		 DB	 1
  00283	01		 DB	 1
  00284	01		 DB	 1
  00285	01		 DB	 1
  00286	01		 DB	 1
  00287	01		 DB	 1
  00288	01		 DB	 1
  00289	00		 DB	 0
?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ENDP ; gObjClearBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z PROC	; gObjRemoveBuffEffect, COMDAT

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 484  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gObjRemove
$LN4@gObjRemove:

; 485  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 505  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gObjRemove:

; 486  : 
; 487  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	78 f5		 js	 SHORT $LN4@gObjRemove
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	7f ee		 jg	 SHORT $LN4@gObjRemove

; 488  : 		return false;
; 489  : 
; 490  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 491  : 
; 492  : 	lpBuffData = g_BuffEffectSlot.GetEffectData(iBuffIndex);

  0001d	53		 push	 ebx
  0001e	57		 push	 edi
  0001f	8b 7d 0c	 mov	 edi, DWORD PTR _iBuffIndex$[ebp]
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ; CBuffEffectSlot::GetEffectData
  0002d	8b d8		 mov	 ebx, eax

; 493  : 
; 494  : 	if(lpBuffData == NULL)

  0002f	85 db		 test	 ebx, ebx
  00031	74 3e		 je	 SHORT $LN6@gObjRemove

; 495  : 		return false;
; 496  : 
; 497  : 	if( g_BuffEffectSlot.RemoveEffect(lpObj, iBuffIndex) == TRUE)

  00033	57		 push	 edi
  00034	56		 push	 esi
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  0003a	e8 00 00 00 00	 call	 ?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveEffect
  0003f	3c 01		 cmp	 al, 1
  00041	75 2e		 jne	 SHORT $LN6@gObjRemove

; 498  : 	{
; 499  : 		g_BuffEffectSlot.RemoveBuffVariable(lpObj, iBuffIndex);

  00043	57		 push	 edi
  00044	56		 push	 esi
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  0004a	e8 00 00 00 00	 call	 ?RemoveBuffVariable@CBuffEffectSlot@@QAEXPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveBuffVariable

; 500  : 		lpObj->btEffectCount--;

  0004f	fe 8e d6 01 00
	00		 dec	 BYTE PTR [esi+470]

; 501  : 		GCUseBuffEffect(lpObj, iBuffIndex, 1, 0, lpBuffData->btViewPortIndex, 0);

  00055	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  00059	6a 00		 push	 0
  0005b	50		 push	 eax
  0005c	6a 00		 push	 0
  0005e	6a 01		 push	 1
  00060	57		 push	 edi
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  00067	83 c4 18	 add	 esp, 24			; 00000018H

; 502  : 		return 1;

  0006a	b0 01		 mov	 al, 1
  0006c	5f		 pop	 edi
  0006d	5b		 pop	 ebx
  0006e	5e		 pop	 esi

; 505  : }

  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN6@gObjRemove:
  00071	5f		 pop	 edi
  00072	5b		 pop	 ebx

; 503  : 	}
; 504  : 	return 0;

  00073	32 c0		 xor	 al, al
  00075	5e		 pop	 esi

; 505  : }

  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ENDP	; gObjRemoveBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjAddBuffEffectForInGameShop@@YA_NPAUOBJECTSTRUCT@@GH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_wItemCode$ = 12					; size = 2
_iTimeValue$ = 16					; size = 4
?gObjAddBuffEffectForInGameShop@@YA_NPAUOBJECTSTRUCT@@GH@Z PROC ; gObjAddBuffEffectForInGameShop, COMDAT

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 438  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gObjAddBuf
$LN4@gObjAddBuf:

; 439  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 480  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gObjAddBuf:

; 440  : 
; 441  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	78 f5		 js	 SHORT $LN4@gObjAddBuf
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	7f ee		 jg	 SHORT $LN4@gObjAddBuf

; 442  : 		return false;
; 443  : 
; 444  : 	int iItemCode = 0;
; 445  : 	LPITEMEFFECT lpItemEffectInfo = NULL;
; 446  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 447  : 
; 448  : 	lpBuffData = g_BuffEffectSlot.GetEffectDataFromItemCode(wItemCode);

  0001d	53		 push	 ebx
  0001e	ff 75 0c	 push	 DWORD PTR _wItemCode$[ebp]
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00026	e8 00 00 00 00	 call	 ?GetEffectDataFromItemCode@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@G@Z ; CBuffEffectSlot::GetEffectDataFromItemCode
  0002b	8b d8		 mov	 ebx, eax

; 449  : 
; 450  : 	if(lpBuffData == NULL)

  0002d	85 db		 test	 ebx, ebx
  0002f	75 06		 jne	 SHORT $LN5@gObjAddBuf

; 451  : 		return false;

  00031	5b		 pop	 ebx
  00032	32 c0		 xor	 al, al
  00034	5e		 pop	 esi

; 480  : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN5@gObjAddBuf:

; 452  : 
; 453  : 	iItemCode = (lpBuffData->btItemType << 9) + lpBuffData->btItemIndex;

  00037	0f b6 43 03	 movzx	 eax, BYTE PTR [ebx+3]

; 454  : 
; 455  : 	if(g_ItemAddOption.IsItemEffect(iItemCode) == FALSE)

  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00040	57		 push	 edi
  00041	0f b6 7b 02	 movzx	 edi, BYTE PTR [ebx+2]
  00045	c1 e7 09	 shl	 edi, 9
  00048	03 f8		 add	 edi, eax
  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 ?IsItemEffect@CItemAddOption@@QAEEH@Z ; CItemAddOption::IsItemEffect
  00050	84 c0		 test	 al, al
  00052	0f 84 80 00 00
	00		 je	 $LN7@gObjAddBuf

; 456  : 		return false;
; 457  : 
; 458  : 	lpItemEffectInfo = g_ItemAddOption.GetItemEffect(iItemCode);

  00058	57		 push	 edi
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  0005e	e8 00 00 00 00	 call	 ?GetItemEffect@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::GetItemEffect

; 459  : 
; 460  : 	int iRemoveBuffIndex = 0;
; 461  : 
; 462  : 	iRemoveBuffIndex = g_BuffEffectSlot.SetEffect(lpObj, lpBuffData->btIndex, lpItemEffectInfo->wEffectType1, lpItemEffectInfo->wEffectType2, lpItemEffectInfo->iEffectValue1, lpItemEffectInfo->iEffectValue2, iTimeValue);

  00063	ff 75 10	 push	 DWORD PTR _iTimeValue$[ebp]
  00066	8b f8		 mov	 edi, eax
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  0006d	ff 77 18	 push	 DWORD PTR [edi+24]
  00070	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  00074	ff 77 14	 push	 DWORD PTR [edi+20]
  00077	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  0007b	52		 push	 edx
  0007c	50		 push	 eax
  0007d	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 ?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ; CBuffEffectSlot::SetEffect

; 463  : 
; 464  : 	if(iRemoveBuffIndex != -1)

  00087	83 f8 ff	 cmp	 eax, -1
  0008a	74 4c		 je	 SHORT $LN7@gObjAddBuf

; 465  : 	{
; 466  : 		if(iRemoveBuffIndex > 0)

  0008c	85 c0		 test	 eax, eax
  0008e	7e 16		 jle	 SHORT $LN8@gObjAddBuf

; 467  : 		{
; 468  : 			GCUseBuffEffect(lpObj, iRemoveBuffIndex, 2, lpItemEffectInfo->wOptionType, 0, 0);

  00090	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00093	6a 00		 push	 0
  00095	6a 00		 push	 0
  00097	51		 push	 ecx
  00098	6a 02		 push	 2
  0009a	50		 push	 eax
  0009b	56		 push	 esi
  0009c	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  000a1	83 c4 18	 add	 esp, 24			; 00000018H

; 469  : 		}
; 470  : 		else

  000a4	eb 10		 jmp	 SHORT $LN9@gObjAddBuf
$LN8@gObjAddBuf:

; 471  : 		{
; 472  : 			lpObj->btEffectCount++;
; 473  : 			gObjCalCharacter(lpObj->m_Index);

  000a6	ff 36		 push	 DWORD PTR [esi]
  000a8	fe 86 d6 01 00
	00		 inc	 BYTE PTR [esi+470]
  000ae	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  000b3	83 c4 04	 add	 esp, 4
$LN9@gObjAddBuf:

; 474  : 		}
; 475  : 
; 476  : 		GCUseBuffEffect(lpObj, lpBuffData->btIndex, 0, lpItemEffectInfo->wOptionType, lpItemEffectInfo->wEffectType1, iTimeValue);

  000b6	ff 75 10	 push	 DWORD PTR _iTimeValue$[ebp]
  000b9	0f b7 47 02	 movzx	 eax, WORD PTR [edi+2]
  000bd	50		 push	 eax
  000be	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000c1	50		 push	 eax
  000c2	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  000c5	6a 00		 push	 0
  000c7	50		 push	 eax
  000c8	56		 push	 esi
  000c9	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  000ce	83 c4 18	 add	 esp, 24			; 00000018H

; 477  : 		return true;

  000d1	b0 01		 mov	 al, 1
  000d3	5f		 pop	 edi
  000d4	5b		 pop	 ebx
  000d5	5e		 pop	 esi

; 480  : }

  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN7@gObjAddBuf:
  000d8	5f		 pop	 edi
  000d9	5b		 pop	 ebx

; 478  : 	}
; 479  : 	return false;

  000da	32 c0		 xor	 al, al
  000dc	5e		 pop	 esi

; 480  : }

  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
?gObjAddBuffEffectForInGameShop@@YA_NPAUOBJECTSTRUCT@@GH@Z ENDP ; gObjAddBuffEffectForInGameShop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_Duration$ = 16						; size = 4
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z PROC	; gObjAddBuffEffect, COMDAT

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 392  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gObjAddBuf
$LN4@gObjAddBuf:

; 393  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 434  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gObjAddBuf:

; 394  : 
; 395  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	78 f5		 js	 SHORT $LN4@gObjAddBuf
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	7f ee		 jg	 SHORT $LN4@gObjAddBuf

; 396  : 		return false;
; 397  : 
; 398  : 	int iItemCode = 0;
; 399  : 	LPITEMEFFECT lpItemEffectInfo = NULL;
; 400  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 401  : 
; 402  : 	lpBuffData = g_BuffEffectSlot.GetEffectData(iBuffIndex);

  0001d	53		 push	 ebx
  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _iBuffIndex$[ebp]
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ; CBuffEffectSlot::GetEffectData

; 403  : 
; 404  : 	if(lpBuffData == NULL)

  0002c	85 c0		 test	 eax, eax
  0002e	75 06		 jne	 SHORT $LN5@gObjAddBuf

; 405  : 		return false;

  00030	5b		 pop	 ebx
  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 434  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN5@gObjAddBuf:
  00036	57		 push	 edi

; 406  : 
; 407  : 	iItemCode = (lpBuffData->btItemType << 9) + lpBuffData->btItemIndex;

  00037	0f b6 78 02	 movzx	 edi, BYTE PTR [eax+2]

; 408  : 
; 409  : 	if(g_ItemAddOption.IsItemEffect(iItemCode) == FALSE)

  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00040	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00044	c1 e7 09	 shl	 edi, 9
  00047	03 f8		 add	 edi, eax
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 ?IsItemEffect@CItemAddOption@@QAEEH@Z ; CItemAddOption::IsItemEffect
  0004f	84 c0		 test	 al, al
  00051	74 70		 je	 SHORT $LN7@gObjAddBuf

; 410  : 		return false;
; 411  : 
; 412  : 	lpItemEffectInfo = g_ItemAddOption.GetItemEffect(iItemCode);

  00053	57		 push	 edi
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00059	e8 00 00 00 00	 call	 ?GetItemEffect@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::GetItemEffect

; 413  : 
; 414  : 	int iRemoveBuffIndex = 0;
; 415  : 
; 416  : 	iRemoveBuffIndex = g_BuffEffectSlot.SetEffect(lpObj, iBuffIndex, lpItemEffectInfo->wEffectType1, lpItemEffectInfo->wEffectType2, lpItemEffectInfo->iEffectValue1, lpItemEffectInfo->iEffectValue2, Duration);

  0005e	ff 75 10	 push	 DWORD PTR _Duration$[ebp]
  00061	8b f8		 mov	 edi, eax
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00068	ff 77 18	 push	 DWORD PTR [edi+24]
  0006b	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  0006f	ff 77 14	 push	 DWORD PTR [edi+20]
  00072	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00076	52		 push	 edx
  00077	50		 push	 eax
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ; CBuffEffectSlot::SetEffect

; 417  : 
; 418  : 	if(iRemoveBuffIndex != -1)

  0007f	83 f8 ff	 cmp	 eax, -1
  00082	74 3f		 je	 SHORT $LN7@gObjAddBuf

; 419  : 	{
; 420  : 		if(iRemoveBuffIndex > 0)

  00084	85 c0		 test	 eax, eax
  00086	7e 16		 jle	 SHORT $LN8@gObjAddBuf

; 421  : 		{
; 422  : 			GCUseBuffEffect(lpObj, iRemoveBuffIndex, 2, lpItemEffectInfo->wOptionType, 0, 0);

  00088	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	51		 push	 ecx
  00090	6a 02		 push	 2
  00092	50		 push	 eax
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  00099	83 c4 18	 add	 esp, 24			; 00000018H

; 423  : 		}
; 424  : 		else

  0009c	eb 06		 jmp	 SHORT $LN9@gObjAddBuf
$LN8@gObjAddBuf:

; 425  : 		{
; 426  : 			lpObj->btEffectCount++;

  0009e	fe 86 d6 01 00
	00		 inc	 BYTE PTR [esi+470]
$LN9@gObjAddBuf:

; 427  : 		}
; 428  : 
; 429  : 		GCUseBuffEffect(lpObj, iBuffIndex, 0, lpItemEffectInfo->wOptionType, lpItemEffectInfo->wEffectType1, Duration);

  000a4	ff 75 10	 push	 DWORD PTR _Duration$[ebp]
  000a7	0f b7 47 02	 movzx	 eax, WORD PTR [edi+2]
  000ab	50		 push	 eax
  000ac	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000af	50		 push	 eax
  000b0	6a 00		 push	 0
  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  000b9	83 c4 18	 add	 esp, 24			; 00000018H

; 430  : 		return true;

  000bc	b0 01		 mov	 al, 1
  000be	5f		 pop	 edi
  000bf	5b		 pop	 ebx
  000c0	5e		 pop	 esi

; 434  : }

  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
$LN7@gObjAddBuf:
  000c3	5f		 pop	 edi
  000c4	5b		 pop	 ebx

; 431  : 	}
; 432  : 
; 433  : 	return false;

  000c5	32 c0		 xor	 al, al
  000c7	5e		 pop	 esi

; 434  : }

  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z ENDP	; gObjAddBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_EffectType1$ = 16					; size = 1
_EffectValue1$ = 20					; size = 4
_EffectType2$ = 24					; size = 1
_EffectValue2$ = 28					; size = 4
_Duration$ = 32						; size = 4
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z PROC	; gObjAddBuffEffect, COMDAT

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 360  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gObjAddBuf
$LN4@gObjAddBuf:

; 361  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 388  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gObjAddBuf:

; 362  : 
; 363  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	78 f5		 js	 SHORT $LN4@gObjAddBuf
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	7f ee		 jg	 SHORT $LN4@gObjAddBuf

; 364  : 		return false;
; 365  : 
; 366  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 367  : 	lpBuffData = g_BuffEffectSlot.GetEffectData(iBuffIndex);

  0001d	53		 push	 ebx
  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _iBuffIndex$[ebp]
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00026	57		 push	 edi
  00027	53		 push	 ebx
  00028	e8 00 00 00 00	 call	 ?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ; CBuffEffectSlot::GetEffectData

; 368  : 	int iRemoveBuffIndex = 0;
; 369  : 
; 370  : 	iRemoveBuffIndex = g_BuffEffectSlot.SetEffect(lpObj, iBuffIndex, EffectType1, EffectType2, EffectValue1, EffectValue2, Duration);

  0002d	ff 75 20	 push	 DWORD PTR _Duration$[ebp]
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00035	8b f8		 mov	 edi, eax
  00037	ff 75 1c	 push	 DWORD PTR _EffectValue2$[ebp]
  0003a	ff 75 14	 push	 DWORD PTR _EffectValue1$[ebp]
  0003d	ff 75 18	 push	 DWORD PTR _EffectType2$[ebp]
  00040	ff 75 10	 push	 DWORD PTR _EffectType1$[ebp]
  00043	53		 push	 ebx
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ; CBuffEffectSlot::SetEffect
  0004a	8b d0		 mov	 edx, eax

; 371  : 
; 372  : 	if(iRemoveBuffIndex != -1)

  0004c	83 fa ff	 cmp	 edx, -1
  0004f	74 43		 je	 SHORT $LN5@gObjAddBuf

; 373  : 	{
; 374  : 		if(iRemoveBuffIndex > 0)

  00051	85 d2		 test	 edx, edx
  00053	7e 17		 jle	 SHORT $LN6@gObjAddBuf

; 375  : 		{
; 376  : 			GCUseBuffEffect(lpObj, iRemoveBuffIndex, 2, lpBuffData->btViewPortIndex, 0, 0);

  00055	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	50		 push	 eax
  0005e	6a 02		 push	 2
  00060	52		 push	 edx
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  00067	83 c4 18	 add	 esp, 24			; 00000018H

; 377  : 		}
; 378  : 		else

  0006a	eb 06		 jmp	 SHORT $LN7@gObjAddBuf
$LN6@gObjAddBuf:

; 379  : 		{
; 380  : 			lpObj->btEffectCount++;

  0006c	fe 86 d6 01 00
	00		 inc	 BYTE PTR [esi+470]
$LN7@gObjAddBuf:

; 381  : 		}
; 382  : 
; 383  : 		GCUseBuffEffect(lpObj, iBuffIndex, 0, lpBuffData->btViewPortIndex, EffectType1, Duration);

  00072	ff 75 20	 push	 DWORD PTR _Duration$[ebp]
  00075	8b 45 10	 mov	 eax, DWORD PTR _EffectType1$[ebp]
  00078	0f b6 c0	 movzx	 eax, al
  0007b	50		 push	 eax
  0007c	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00080	50		 push	 eax
  00081	6a 00		 push	 0
  00083	53		 push	 ebx
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  0008a	83 c4 18	 add	 esp, 24			; 00000018H

; 384  : 		return true;

  0008d	b0 01		 mov	 al, 1
  0008f	5f		 pop	 edi
  00090	5b		 pop	 ebx
  00091	5e		 pop	 esi

; 388  : }

  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
$LN5@gObjAddBuf:
  00094	5f		 pop	 edi
  00095	5b		 pop	 ebx

; 385  : 	}
; 386  : 
; 387  : 	return false;

  00096	32 c0		 xor	 al, al
  00098	5e		 pop	 esi

; 388  : }

  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ENDP	; gObjAddBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z PROC	; gObjAddBuffEffect, COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 314  : 	if(lpObj == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 05		 jne	 SHORT $LN2@gObjAddBuf
$LN4@gObjAddBuf:

; 315  : 		return false;

  0000b	32 c0		 xor	 al, al
  0000d	5e		 pop	 esi

; 356  : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN2@gObjAddBuf:

; 316  : 
; 317  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	85 c0		 test	 eax, eax
  00014	78 f5		 js	 SHORT $LN4@gObjAddBuf
  00016	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001b	7f ee		 jg	 SHORT $LN4@gObjAddBuf

; 318  : 		return false;
; 319  : 
; 320  : 	int iItemCode = 0;
; 321  : 	LPITEMEFFECT lpItemEffectInfo = NULL;
; 322  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 323  : 
; 324  : 	lpBuffData = g_BuffEffectSlot.GetEffectData(iBuffIndex);

  0001d	53		 push	 ebx
  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _iBuffIndex$[ebp]
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 ?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ; CBuffEffectSlot::GetEffectData

; 325  : 
; 326  : 	if(lpBuffData == NULL)

  0002c	85 c0		 test	 eax, eax
  0002e	75 06		 jne	 SHORT $LN5@gObjAddBuf

; 327  : 		return false;

  00030	5b		 pop	 ebx
  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 356  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN5@gObjAddBuf:
  00036	57		 push	 edi

; 328  : 
; 329  : 	iItemCode = (lpBuffData->btItemType << 9) + lpBuffData->btItemIndex;

  00037	0f b6 78 02	 movzx	 edi, BYTE PTR [eax+2]

; 330  : 
; 331  : 	if(g_ItemAddOption.IsItemEffect(iItemCode) == FALSE)

  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00040	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00044	c1 e7 09	 shl	 edi, 9
  00047	03 f8		 add	 edi, eax
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 ?IsItemEffect@CItemAddOption@@QAEEH@Z ; CItemAddOption::IsItemEffect
  0004f	84 c0		 test	 al, al
  00051	74 70		 je	 SHORT $LN7@gObjAddBuf

; 332  : 		return false;
; 333  : 
; 334  : 	lpItemEffectInfo = g_ItemAddOption.GetItemEffect(iItemCode);

  00053	57		 push	 edi
  00054	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ItemAddOption@@3VCItemAddOption@@A ; g_ItemAddOption
  00059	e8 00 00 00 00	 call	 ?GetItemEffect@CItemAddOption@@QAEPAUITEMEFFECT@@H@Z ; CItemAddOption::GetItemEffect
  0005e	8b f8		 mov	 edi, eax

; 335  : 
; 336  : 	int iRemoveBuffIndex = 0;
; 337  : 
; 338  : 	iRemoveBuffIndex = g_BuffEffectSlot.SetEffect(lpObj, iBuffIndex, lpItemEffectInfo->wEffectType1, lpItemEffectInfo->wEffectType2, lpItemEffectInfo->iEffectValue1, lpItemEffectInfo->iEffectValue2, lpItemEffectInfo->iEffectValidTime);

  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffectSlot@@3VCBuffEffectSlot@@A ; g_BuffEffectSlot
  00065	ff 77 1c	 push	 DWORD PTR [edi+28]
  00068	0f b6 57 04	 movzx	 edx, BYTE PTR [edi+4]
  0006c	ff 77 18	 push	 DWORD PTR [edi+24]
  0006f	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00073	ff 77 14	 push	 DWORD PTR [edi+20]
  00076	52		 push	 edx
  00077	50		 push	 eax
  00078	53		 push	 ebx
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ; CBuffEffectSlot::SetEffect

; 339  : 
; 340  : 	if(iRemoveBuffIndex != -1)

  0007f	83 f8 ff	 cmp	 eax, -1
  00082	74 3f		 je	 SHORT $LN7@gObjAddBuf

; 341  : 	{
; 342  : 		if(iRemoveBuffIndex > 0)

  00084	85 c0		 test	 eax, eax
  00086	7e 16		 jle	 SHORT $LN8@gObjAddBuf

; 343  : 		{
; 344  : 			GCUseBuffEffect(lpObj, iRemoveBuffIndex, 2, lpItemEffectInfo->wOptionType, 0, 0);

  00088	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	51		 push	 ecx
  00090	6a 02		 push	 2
  00092	50		 push	 eax
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  00099	83 c4 18	 add	 esp, 24			; 00000018H

; 345  : 		}
; 346  : 		else

  0009c	eb 06		 jmp	 SHORT $LN9@gObjAddBuf
$LN8@gObjAddBuf:

; 347  : 		{
; 348  : 			lpObj->btEffectCount++;

  0009e	fe 86 d6 01 00
	00		 inc	 BYTE PTR [esi+470]
$LN9@gObjAddBuf:

; 349  : 		}
; 350  : 
; 351  : 		GCUseBuffEffect(lpObj, iBuffIndex, 0, lpItemEffectInfo->wOptionType, lpItemEffectInfo->wEffectType1, lpItemEffectInfo->iEffectValidTime);

  000a4	ff 77 1c	 push	 DWORD PTR [edi+28]
  000a7	0f b7 47 02	 movzx	 eax, WORD PTR [edi+2]
  000ab	50		 push	 eax
  000ac	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000af	50		 push	 eax
  000b0	6a 00		 push	 0
  000b2	53		 push	 ebx
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?GCUseBuffEffect@@YAXPAUOBJECTSTRUCT@@EEGGH@Z ; GCUseBuffEffect
  000b9	83 c4 18	 add	 esp, 24			; 00000018H

; 352  : 		return 1;

  000bc	b0 01		 mov	 al, 1
  000be	5f		 pop	 edi
  000bf	5b		 pop	 ebx
  000c0	5e		 pop	 esi

; 356  : }

  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
$LN7@gObjAddBuf:
  000c3	5f		 pop	 edi
  000c4	5b		 pop	 ebx

; 353  : 	}
; 354  : 	
; 355  : 	return 0;

  000c5	32 c0		 xor	 al, al
  000c7	5e		 pop	 esi

; 356  : }

  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ENDP	; gObjAddBuffEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?gObjCheckBuffEffectList@@YAXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjCheckBuffEffectList@@YAXPAUOBJECTSTRUCT@@@Z PROC	; gObjCheckBuffEffectList, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 243  : 	if(lpObj == NULL)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	0f 84 c8 00 00
	00		 je	 $LN11@gObjCheckB

; 244  : 		return;
; 245  : 
; 246  : 	if(lpObj->m_Index < 0 || lpObj->m_Index > OBJMAX)

  0000f	8b 07		 mov	 eax, DWORD PTR [edi]
  00011	85 c0		 test	 eax, eax
  00013	0f 88 be 00 00
	00		 js	 $LN11@gObjCheckB
  00019	3d ec 2c 00 00	 cmp	 eax, 11500		; 00002cecH
  0001e	0f 8f b3 00 00
	00		 jg	 $LN11@gObjCheckB

; 247  : 		return;
; 248  : 
; 249  : 	if( (lpObj->Type == OBJ_USER && lpObj->Connected >= PLAYER_PLAYING) || lpObj->Type == OBJ_MONSTER)

  00024	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  00027	3c 01		 cmp	 al, 1
  00029	75 06		 jne	 SHORT $LN14@gObjCheckB
  0002b	83 7f 04 03	 cmp	 DWORD PTR [edi+4], 3
  0002f	7d 08		 jge	 SHORT $LN13@gObjCheckB
$LN14@gObjCheckB:
  00031	3c 02		 cmp	 al, 2
  00033	0f 85 9e 00 00
	00		 jne	 $LN11@gObjCheckB
$LN13@gObjCheckB:
  00039	53		 push	 ebx
  0003a	56		 push	 esi

; 250  : 	{
; 251  : 		for(int i = 0; i < MAX_STATE_COUNT; i++)

  0003b	8d b7 da 01 00
	00		 lea	 esi, DWORD PTR [edi+474]
  00041	bb 10 00 00 00	 mov	 ebx, 16			; 00000010H
$LL4@gObjCheckB:

; 252  : 		{
; 253  : 			if(lpObj->pEffectInfo[i].iTimeValue == -10)

  00046	8b 4e 16	 mov	 ecx, DWORD PTR [esi+22]
  00049	83 f9 f6	 cmp	 ecx, -10		; fffffff6H
  0004c	74 7b		 je	 SHORT $LN2@gObjCheckB

; 254  : 				continue;
; 255  : 
; 256  : 			if(lpObj->pEffectInfo[i].btEffectNum == NULL)

  0004e	8a 46 fe	 mov	 al, BYTE PTR [esi-2]
  00051	84 c0		 test	 al, al
  00053	74 74		 je	 SHORT $LN2@gObjCheckB

; 257  : 				continue;
; 258  : 
; 259  : 			switch(lpObj->pEffectInfo[i].btEffectNum)

  00055	3c 37		 cmp	 al, 55			; 00000037H
  00057	75 0e		 jne	 SHORT $LN28@gObjCheckB

; 260  : 			{
; 261  : 			case AT_POISON:
; 262  : 				{
; 263  : 					if((lpObj->pEffectInfo[i].iTimeValue % 3) == 0) //Rand type??

  00059	8b c1		 mov	 eax, ecx
  0005b	b9 03 00 00 00	 mov	 ecx, 3
  00060	99		 cdq
  00061	f7 f9		 idiv	 ecx
  00063	85 d2		 test	 edx, edx
  00065	75 25		 jne	 SHORT $LN18@gObjCheckB
$LN28@gObjCheckB:

; 264  : 					{
; 265  : 						g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);

  00067	ff 76 06	 push	 DWORD PTR [esi+6]
  0006a	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00072	50		 push	 eax
  00073	57		 push	 edi
  00074	e8 00 00 00 00	 call	 ?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetActiveBuffEffect

; 266  : 						g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);

  00079	ff 76 0a	 push	 DWORD PTR [esi+10]
  0007c	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00085	50		 push	 eax
  00086	57		 push	 edi
  00087	e8 00 00 00 00	 call	 ?SetActiveBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetActiveBuffEffect
$LN18@gObjCheckB:

; 267  : 					}
; 268  : 				}
; 269  : 				break;
; 270  : 			default:
; 271  : 				{
; 272  : 					g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType1, lpObj->pEffectInfo[i].iEffectValue1);
; 273  : 					g_BuffEffect.SetActiveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectType2, lpObj->pEffectInfo[i].iEffectValue2);
; 274  : 				}
; 275  : 				break;
; 276  : 			}
; 277  : 			
; 278  : 			lpObj->pEffectInfo[i].iTimeValue--;

  0008c	ff 4e 16	 dec	 DWORD PTR [esi+22]

; 279  : 
; 280  : 			if(lpObj->pEffectInfo[i].iTimeValue <= 0)

  0008f	83 7e 16 00	 cmp	 DWORD PTR [esi+22], 0
  00093	7f 34		 jg	 SHORT $LN2@gObjCheckB

; 281  : 			{
; 282  : 				/*if( lpObj->pEffectInfo[i].btEffectNum == AT_RFVITALITY ||
; 283  : 					lpObj->pEffectInfo[i].btEffectNum == BUFF_SWELL_LIFE3 ||
; 284  : 					lpObj->pEffectInfo[i].btEffectNum == BUFF_MANASHIELD2 ||)
; 285  : 				{
; 286  : 					gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectNum);
; 287  : 					gObjCalCharacter(lpObj->m_Index);
; 288  : 				}
; 289  : 				else
; 290  : 				{
; 291  : 					
; 292  : 				}*/
; 293  : 				gObjRemoveBuffEffect(lpObj, lpObj->pEffectInfo[i].btEffectNum);

  00095	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  00099	50		 push	 eax
  0009a	57		 push	 edi
  0009b	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 294  : 
; 295  : 				switch( lpObj->pEffectInfo[i].btEffectNum )

  000a0	0f b6 46 fe	 movzx	 eax, BYTE PTR [esi-2]
  000a4	83 c4 08	 add	 esp, 8
  000a7	05 7e ff ff ff	 add	 eax, -130		; ffffff7eH
  000ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000af	77 18		 ja	 SHORT $LN2@gObjCheckB
  000b1	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@gObjCheckB[eax]
  000b8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@gObjCheckB[eax*4]
$LN21@gObjCheckB:

; 296  : 				{
; 297  : 				case BUFF_INCREASE_VIT:
; 298  : 				case BUFF_INCREASE_VIT2:
; 299  : 				case BUFF_SWELL_LIFE3:
; 300  : 				case BUFF_MANASHIELD2:
; 301  : 				case BUFF_BLESS:
; 302  : 				case BUFF_BLESS2:
; 303  : 				case BUFF_ADD_CRITDMG3:
; 304  : 					gObjCalCharacter(lpObj->m_Index);

  000bf	ff 37		 push	 DWORD PTR [edi]
  000c1	e8 00 00 00 00	 call	 ?gObjCalCharacter@@YAXH@Z ; gObjCalCharacter
  000c6	83 c4 04	 add	 esp, 4
$LN2@gObjCheckB:

; 250  : 	{
; 251  : 		for(int i = 0; i < MAX_STATE_COUNT; i++)

  000c9	83 c6 1c	 add	 esi, 28			; 0000001cH
  000cc	83 eb 01	 sub	 ebx, 1
  000cf	0f 85 71 ff ff
	ff		 jne	 $LL4@gObjCheckB
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
$LN11@gObjCheckB:
  000d7	5f		 pop	 edi

; 305  : 					break;
; 306  : 				}
; 307  : 			}
; 308  : 		}
; 309  : 	}
; 310  : }

  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
  000da	66 90		 npad	 2
$LN30@gObjCheckB:
  000dc	00 00 00 00	 DD	 $LN21@gObjCheckB
  000e0	00 00 00 00	 DD	 $LN2@gObjCheckB
$LN27@gObjCheckB:
  000e4	00		 DB	 0
  000e5	01		 DB	 1
  000e6	01		 DB	 1
  000e7	01		 DB	 1
  000e8	01		 DB	 1
  000e9	01		 DB	 1
  000ea	00		 DB	 0
  000eb	01		 DB	 1
  000ec	01		 DB	 1
  000ed	01		 DB	 1
  000ee	00		 DB	 0
  000ef	01		 DB	 1
  000f0	00		 DB	 0
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	01		 DB	 1
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	00		 DB	 0
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	00		 DB	 0
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	00		 DB	 0
?gObjCheckBuffEffectList@@YAXPAUOBJECTSTRUCT@@@Z ENDP	; gObjCheckBuffEffectList
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBuffEffectSlot@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBuffEffectSlot@@UAEPAXI@Z PROC			; CBuffEffectSlot::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBuffEffectSlot@@UAE@XZ ; CBuffEffectSlot::~CBuffEffectSlot
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBuffEffectSlot@@UAEPAXI@Z ENDP			; CBuffEffectSlot::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?GetBuffClearType@CBuffEffectSlot@@QAEHH@Z
_TEXT	SEGMENT
_iBuffIndex$ = 8					; size = 4
?GetBuffClearType@CBuffEffectSlot@@QAEHH@Z PROC		; CBuffEffectSlot::GetBuffClearType, COMDAT
; _this$ = ecx

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 232  : 	BUFF_EFFECT_DATE* lpBuffData = 0;
; 233  : 
; 234  : 	if( !g_BuffScript.CheckVaildBuffEffect(iBuffIndex) )

  00003	ff 75 08	 push	 DWORD PTR _iBuffIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0000b	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00010	84 c0		 test	 al, al
  00012	75 07		 jne	 SHORT $LN2@GetBuffCle

; 235  : 		return -1;

  00014	83 c8 ff	 or	 eax, -1

; 239  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN2@GetBuffCle:

; 236  : 
; 237  : 	lpBuffData = g_BuffScript.GetBuffData(iBuffIndex);

  0001b	ff 75 08	 push	 DWORD PTR _iBuffIndex$[ebp]
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  00023	e8 00 00 00 00	 call	 ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData

; 238  : 	return lpBuffData->btClearType;

  00028	0f b6 40 1a	 movzx	 eax, BYTE PTR [eax+26]

; 239  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?GetBuffClearType@CBuffEffectSlot@@QAEHH@Z ENDP		; CBuffEffectSlot::GetBuffClearType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?GetEffectDataFromItemCode@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@G@Z
_TEXT	SEGMENT
_wItemCode$ = 8						; size = 2
?GetEffectDataFromItemCode@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@G@Z PROC ; CBuffEffectSlot::GetEffectDataFromItemCode, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 224  : 	BUFF_EFFECT_DATE* lpBuffData = 0;
; 225  : 
; 226  : 	lpBuffData = g_BuffScript.GetBuffDataFromItemCode(wItemCode);

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript

; 227  : return lpBuffData;
; 228  : }

  00008	5d		 pop	 ebp

; 224  : 	BUFF_EFFECT_DATE* lpBuffData = 0;
; 225  : 
; 226  : 	lpBuffData = g_BuffScript.GetBuffDataFromItemCode(wItemCode);

  00009	e9 00 00 00 00	 jmp	 ?GetBuffDataFromItemCode@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@G@Z ; CBuffScriptLoader::GetBuffDataFromItemCode
?GetEffectDataFromItemCode@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@G@Z ENDP ; CBuffEffectSlot::GetEffectDataFromItemCode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z
_TEXT	SEGMENT
_iBuffIndex$ = 8					; size = 4
?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z PROC ; CBuffEffectSlot::GetEffectData, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 213  : 	BUFF_EFFECT_DATE* lpBuffData = 0;
; 214  : 
; 215  : 	if( !g_BuffScript.CheckVaildBuffEffect(iBuffIndex) )

  00003	ff 75 08	 push	 DWORD PTR _iBuffIndex$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0000b	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN2@GetEffectD

; 216  : 		return NULL;

  00014	33 c0		 xor	 eax, eax

; 219  : return lpBuffData;
; 220  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@GetEffectD:

; 217  : 
; 218  : 	lpBuffData = g_BuffScript.GetBuffData(iBuffIndex);

  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript

; 219  : return lpBuffData;
; 220  : }

  0001f	5d		 pop	 ebp

; 217  : 
; 218  : 	lpBuffData = g_BuffScript.GetBuffData(iBuffIndex);

  00020	e9 00 00 00 00	 jmp	 ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData
?GetEffectData@CBuffEffectSlot@@QAEPAUBUFF_EFFECT_DATE@@H@Z ENDP ; CBuffEffectSlot::GetEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?ClearEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_ClearType$ = 12					; size = 4
?ClearEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z PROC ; CBuffEffectSlot::ClearEffect, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d1		 mov	 edx, ecx

; 168  : 	LPBUFF_EFFECT_DATE lpBuffData = NULL;
; 169  : 	int iRemoveEffectCount = 0; //clear count

  00007	33 db		 xor	 ebx, ebx
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx

; 170  : 	
; 171  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00011	33 ff		 xor	 edi, edi
  00013	8d b1 d8 01 00
	00		 lea	 esi, DWORD PTR [ecx+472]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@ClearEffec:

; 172  : 	{
; 173  : 		if( this->CheckUsedEffect(lpObj,lpObj->pEffectInfo[i].btEffectNum) == TRUE )

  00020	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::CheckUsedEffect
  0002c	3c 01		 cmp	 al, 1
  0002e	75 58		 jne	 SHORT $LN2@ClearEffec

; 174  : 		{
; 175  : 			lpBuffData = g_BuffScript.GetBuffData(lpObj->pEffectInfo[i].btEffectNum);

  00030	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData

; 176  : 
; 177  : 			if(lpBuffData == NULL)

  0003e	85 c0		 test	 eax, eax
  00040	74 46		 je	 SHORT $LN2@ClearEffec

; 178  : 				continue;
; 179  : 
; 180  : 			if(lpBuffData->btClearType == ClearType)

  00042	0f b6 40 1a	 movzx	 eax, BYTE PTR [eax+26]
  00046	3b 45 0c	 cmp	 eax, DWORD PTR _ClearType$[ebp]
  00049	75 18		 jne	 SHORT $LN8@ClearEffec

; 181  : 			{
; 182  : 				if( this->RemoveEffect(lpObj, lpObj->pEffectInfo[i].btEffectNum) == TRUE)

  0004b	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00051	50		 push	 eax
  00052	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  00055	e8 00 00 00 00	 call	 ?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveEffect
  0005a	3c 01		 cmp	 al, 1
  0005c	75 05		 jne	 SHORT $LN8@ClearEffec

; 183  : 				{
; 184  : 					iRemoveEffectCount += 1;

  0005e	43		 inc	 ebx

; 185  : 					i -= 1;

  0005f	4f		 dec	 edi
  00060	83 ee 1c	 sub	 esi, 28			; 0000001cH
$LN8@ClearEffec:

; 186  : 				}
; 187  : 			}
; 188  : 
; 189  : 			if(ClearType == CLEAR_TYPE_LOGOUT)

  00063	8b 45 0c	 mov	 eax, DWORD PTR _ClearType$[ebp]
  00066	83 f8 02	 cmp	 eax, 2
  00069	74 05		 je	 SHORT $LN19@ClearEffec

; 190  : 			{
; 191  : 				if( this->RemoveEffect(lpObj,lpObj->pEffectInfo[i].btEffectNum ) == TRUE)
; 192  : 				{
; 193  : 					iRemoveEffectCount += 1;
; 194  : 					i -= 1;
; 195  : 				}
; 196  : 			}
; 197  : 
; 198  : 			if(ClearType == CLEAR_TYPE_DIEREGEN)

  0006b	83 f8 01	 cmp	 eax, 1
  0006e	75 18		 jne	 SHORT $LN2@ClearEffec
$LN19@ClearEffec:

; 199  : 			{
; 200  : 				if( this->RemoveEffect(lpObj,lpObj->pEffectInfo[i].btEffectNum) == TRUE)

  00070	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00076	50		 push	 eax
  00077	ff 75 08	 push	 DWORD PTR _lpObj$[ebp]
  0007a	e8 00 00 00 00	 call	 ?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveEffect
  0007f	3c 01		 cmp	 al, 1
  00081	75 05		 jne	 SHORT $LN2@ClearEffec

; 201  : 				{
; 202  : 					iRemoveEffectCount += 1;

  00083	43		 inc	 ebx

; 203  : 					i -= 1;

  00084	4f		 dec	 edi
  00085	83 ee 1c	 sub	 esi, 28			; 0000001cH
$LN2@ClearEffec:

; 170  : 	
; 171  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0008b	47		 inc	 edi
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0008f	83 c6 1c	 add	 esi, 28			; 0000001cH
  00092	83 ff 10	 cmp	 edi, 16			; 00000010H
  00095	7c 89		 jl	 SHORT $LL4@ClearEffec

; 204  : 				}
; 205  : 			}
; 206  : 		}
; 207  : 	}
; 208  : 	return iRemoveEffectCount;

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 209  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
?ClearEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ENDP ; CBuffEffectSlot::ClearEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?RemoveBuffVariable@CBuffEffectSlot@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?RemoveBuffVariable@CBuffEffectSlot@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CBuffEffectSlot::RemoveBuffVariable, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  : 	switch( iBuffIndex )

  00003	83 7d 0c 38	 cmp	 DWORD PTR _iBuffIndex$[ebp], 56 ; 00000038H
  00007	75 14		 jne	 SHORT $LN2@RemoveBuff

; 156  : 	{
; 157  : 	case AT_ICE:
; 158  : 		{
; 159  : 			lpObj->DelayActionTime = 0;

  00009	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0000c	c7 80 a4 05 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+1444], 0

; 160  : 			lpObj->DelayLevel = 0;

  00016	c6 80 a8 05 00
	00 00		 mov	 BYTE PTR [eax+1448], 0
$LN2@RemoveBuff:

; 161  : 		}
; 162  : 		break;
; 163  : 	}
; 164  : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?RemoveBuffVariable@CBuffEffectSlot@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CBuffEffectSlot::RemoveBuffVariable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CBuffEffectSlot::CheckUsedEffect, COMDAT
; _this$ = ecx

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 142  : 	if( g_BuffScript.CheckVaildBuffEffect(iBuffIndex) == FALSE )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _iBuffIndex$[ebp]
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00012	84 c0		 test	 al, al
  00014	74 1b		 je	 SHORT $LN13@CheckUsedE

; 143  : 		return false;
; 144  : 
; 145  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00016	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00019	33 c9		 xor	 ecx, ecx
  0001b	81 c2 d8 01 00
	00		 add	 edx, 472		; 000001d8H
$LL4@CheckUsedE:

; 146  : 	{
; 147  : 		if(lpObj->pEffectInfo[i].btEffectNum == iBuffIndex)

  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00024	3b c6		 cmp	 eax, esi
  00026	74 10		 je	 SHORT $LN9@CheckUsedE

; 143  : 		return false;
; 144  : 
; 145  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  00028	41		 inc	 ecx
  00029	83 c2 1c	 add	 edx, 28			; 0000001cH
  0002c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002f	7c f0		 jl	 SHORT $LL4@CheckUsedE
$LN13@CheckUsedE:

; 149  : 	}
; 150  : 	return false;

  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 151  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN9@CheckUsedE:

; 148  : 			return true;

  00038	b0 01		 mov	 al, 1
  0003a	5e		 pop	 esi

; 151  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?CheckUsedEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CBuffEffectSlot::CheckUsedEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z PROC ; CBuffEffectSlot::RemoveEffect, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	bool bIsRemoveEffect = 0;
; 108  : 
; 109  : 	if(lpObj == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	53		 push	 ebx
  00007	32 db		 xor	 bl, bl
  00009	85 c0		 test	 eax, eax
  0000b	75 07		 jne	 SHORT $LN5@RemoveEffe
$LN16@RemoveEffe:

; 110  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	5b		 pop	 ebx

; 138  : }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
$LN5@RemoveEffe:

; 111  : 	
; 112  : 	if(lpObj->Connected < PLAYER_PLAYING)

  00014	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  00018	7c f3		 jl	 SHORT $LN16@RemoveEffe

; 113  : 		return false;
; 114  : 
; 115  : 	if(g_BuffScript.CheckVaildBuffEffect(iBuffIndex) == FALSE)

  0001a	ff 75 0c	 push	 DWORD PTR _iBuffIndex$[ebp]
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  00022	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00027	84 c0		 test	 al, al
  00029	74 e2		 je	 SHORT $LN16@RemoveEffe

; 116  : 		return false;
; 117  : 
; 118  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	33 ff		 xor	 edi, edi
  00032	8d b1 d8 01 00
	00		 lea	 esi, DWORD PTR [ecx+472]
$LL4@RemoveEffe:

; 119  : 	{
; 120  : 		if(bIsRemoveEffect == 1)

  00038	80 fb 01	 cmp	 bl, 1
  0003b	75 32		 jne	 SHORT $LN9@RemoveEffe

; 121  : 		{
; 122  : 			if( (lpObj->pEffectInfo[i].btEffectNum != 0) && (i > 0) )

  0003d	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00040	74 2d		 je	 SHORT $LN9@RemoveEffe
  00042	85 ff		 test	 edi, edi
  00044	7e 29		 jle	 SHORT $LN9@RemoveEffe

; 123  : 			{
; 124  : 				memcpy(&lpObj->pEffectInfo[i-1],&lpObj->pEffectInfo[i],sizeof(lpObj->pEffectInfo[i])); //Change the Buff Slot to the removed one...

  00046	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00049	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0004c	0f 11 46 e4	 movups	 XMMWORD PTR [esi-28], xmm0
  00050	f3 0f 7e 46 10	 movq	 xmm0, QWORD PTR [esi+16]
  00055	66 0f d6 46 f4	 movq	 QWORD PTR [esi-12], xmm0
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 125  : 				memset(&lpObj->pEffectInfo[i],0,sizeof(lpObj->pEffectInfo[i]));

  00060	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00063	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  00068	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN9@RemoveEffe:

; 126  : 			}
; 127  : 		}
; 128  : 		
; 129  : 		if(lpObj->pEffectInfo[i].btEffectNum == iBuffIndex )

  0006f	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00072	3b 45 0c	 cmp	 eax, DWORD PTR _iBuffIndex$[ebp]
  00075	75 40		 jne	 SHORT $LN2@RemoveEffe

; 130  : 		{
; 131  : 			g_BuffEffect.ClearBuffEffect(lpObj,lpObj->pEffectInfo[i].btEffectType1,lpObj->pEffectInfo[i].iEffectValue1);

  00077	ff 76 08	 push	 DWORD PTR [esi+8]
  0007a	0f b6 46 02	 movzx	 eax, BYTE PTR [esi+2]
  0007e	50		 push	 eax
  0007f	51		 push	 ecx
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00085	e8 00 00 00 00	 call	 ?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::ClearBuffEffect

; 132  : 			g_BuffEffect.ClearBuffEffect(lpObj,lpObj->pEffectInfo[i].btEffectType2,lpObj->pEffectInfo[i].iEffectValue2);

  0008a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0008d	0f b6 46 03	 movzx	 eax, BYTE PTR [esi+3]
  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00096	50		 push	 eax
  00097	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?ClearBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::ClearBuffEffect
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a3	0f 57 c0	 xorps	 xmm0, xmm0

; 133  : 			memset(&lpObj->pEffectInfo[i],0,sizeof(lpObj->pEffectInfo[i]));

  000a6	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 134  : 			bIsRemoveEffect = 1;

  000a9	b3 01		 mov	 bl, 1
  000ab	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  000b0	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN2@RemoveEffe:

; 116  : 		return false;
; 117  : 
; 118  : 	for(int i = 0; i < MAX_STATE_COUNT; i++)

  000b7	47		 inc	 edi
  000b8	83 c6 1c	 add	 esi, 28			; 0000001cH
  000bb	83 ff 10	 cmp	 edi, 16			; 00000010H
  000be	0f 8c 74 ff ff
	ff		 jl	 $LL4@RemoveEffe

; 135  : 		}
; 136  : 	}
; 137  : 	return bIsRemoveEffect;

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	8a c3		 mov	 al, bl
  000c8	5b		 pop	 ebx

; 138  : }

  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ENDP ; CBuffEffectSlot::RemoveEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z
_TEXT	SEGMENT
tv337 = -20						; size = 4
tv333 = -20						; size = 4
_lpPrevBuffData$1$ = -16				; size = 4
_this$1$ = -12						; size = 4
_iRemovedBuffIndex$1$ = -8				; size = 4
_lpBuffData$1$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_iBuffIndex$ = 12					; size = 4
_btEffectType1$ = 16					; size = 1
_btEffectType2$ = 20					; size = 1
_iEffectValue1$ = 24					; size = 4
_iEffectValue2$ = 28					; size = 4
_iTimeValue$ = 32					; size = 4
?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z PROC ; CBuffEffectSlot::SetEffect, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 32   : 	LPBUFF_EFFECT_DATE lpBuffData = 0;
; 33   : 	LPBUFF_EFFECT_DATE lpPrevBuffData = 0;
; 34   : 
; 35   : 	int BuffCount = 0;
; 36   : 	int DebuffCount = 0;
; 37   : 	int iRemovedBuffIndex = 0;
; 38   : 
; 39   : 	if(lpObj == NULL)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000a	33 c0		 xor	 eax, eax
  0000c	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	89 45 f8	 mov	 DWORD PTR _iRemovedBuffIndex$1$[ebp], eax
  00012	85 db		 test	 ebx, ebx
  00014	75 0a		 jne	 SHORT $LN8@SetEffect
$LN34@SetEffect:

; 40   : 		return -1;

  00016	83 c8 ff	 or	 eax, -1
  00019	5b		 pop	 ebx

; 103  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 1c 00	 ret	 28			; 0000001cH
$LN8@SetEffect:

; 41   : 
; 42   : 	if(lpObj->Connected < PLAYER_PLAYING)

  00020	83 7b 04 03	 cmp	 DWORD PTR [ebx+4], 3
  00024	7c f0		 jl	 SHORT $LN34@SetEffect

; 43   : 		return -1;
; 44   : 
; 45   : 	if(g_BuffScript.CheckVaildBuffEffect(iBuffIndex) == FALSE)

  00026	56		 push	 esi
  00027	8b 75 0c	 mov	 esi, DWORD PTR _iBuffIndex$[ebp]
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 ?CheckVaildBuffEffect@CBuffScriptLoader@@QAE_NE@Z ; CBuffScriptLoader::CheckVaildBuffEffect
  00035	84 c0		 test	 al, al
  00037	74 14		 je	 SHORT $LN33@SetEffect

; 46   : 		return -1;
; 47   : 
; 48   : 	lpBuffData = g_BuffScript.GetBuffData(iBuffIndex);

  00039	56		 push	 esi
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0003f	e8 00 00 00 00	 call	 ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData
  00044	8b d0		 mov	 edx, eax
  00046	89 55 fc	 mov	 DWORD PTR _lpBuffData$1$[ebp], edx

; 49   : 
; 50   : 	if(lpBuffData == NULL)

  00049	85 d2		 test	 edx, edx
  0004b	75 0b		 jne	 SHORT $LN11@SetEffect
$LN33@SetEffect:
  0004d	5e		 pop	 esi

; 51   : 		return -1;

  0004e	83 c8 ff	 or	 eax, -1
  00051	5b		 pop	 ebx

; 103  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 1c 00	 ret	 28			; 0000001cH
$LN11@SetEffect:

; 52   : 
; 53   : 	int i;
; 54   : 	for( i = 0; i < MAX_STATE_COUNT; i++)

  00058	33 f6		 xor	 esi, esi
  0005a	81 c3 d8 01 00
	00		 add	 ebx, 472		; 000001d8H
  00060	57		 push	 edi
  00061	89 5d ec	 mov	 DWORD PTR tv333[ebp], ebx
  00064	8b fb		 mov	 edi, ebx
  00066	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@SetEffect:

; 55   : 	{
; 56   : 		if( lpObj->pEffectInfo[i].btEffectNum != NULL )

  00070	8a 07		 mov	 al, BYTE PTR [edi]
  00072	84 c0		 test	 al, al
  00074	74 41		 je	 SHORT $LN2@SetEffect

; 57   : 		{
; 58   : 			lpPrevBuffData = g_BuffScript.GetBuffData(lpObj->pEffectInfo[i].btEffectNum);

  00076	50		 push	 eax
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffScript@@3VCBuffScriptLoader@@A ; g_BuffScript
  0007c	e8 00 00 00 00	 call	 ?GetBuffData@CBuffScriptLoader@@QAEPAUBUFF_EFFECT_DATE@@E@Z ; CBuffScriptLoader::GetBuffData

; 59   : 
; 60   : 			if(lpPrevBuffData == NULL)
; 61   : 				continue;
; 62   : 			
; 63   : 			if(lpPrevBuffData->btViewPortIndex == lpBuffData->btViewPortIndex )

  00081	8b 55 fc	 mov	 edx, DWORD PTR _lpBuffData$1$[ebp]
  00084	89 45 f0	 mov	 DWORD PTR _lpPrevBuffData$1$[ebp], eax
  00087	85 c0		 test	 eax, eax
  00089	74 2c		 je	 SHORT $LN2@SetEffect
  0008b	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  0008e	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00091	75 19		 jne	 SHORT $LN14@SetEffect

; 64   : 			{
; 65   : 				this->RemoveEffect(lpObj,lpObj->pEffectInfo[i].btEffectNum);

  00093	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00099	50		 push	 eax
  0009a	53		 push	 ebx
  0009b	e8 00 00 00 00	 call	 ?RemoveEffect@CBuffEffectSlot@@QAE_NPAUOBJECTSTRUCT@@H@Z ; CBuffEffectSlot::RemoveEffect

; 66   : 				iRemovedBuffIndex = lpPrevBuffData->btIndex;

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _lpPrevBuffData$1$[ebp]
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _lpBuffData$1$[ebp]
  000a6	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000a9	89 45 f8	 mov	 DWORD PTR _iRemovedBuffIndex$1$[ebp], eax
$LN14@SetEffect:

; 67   : 			}
; 68   : 
; 69   : 			if(lpPrevBuffData->btType == 0)
; 70   : 			{
; 71   : 				BuffCount +=1;
; 72   : 			}
; 73   : 			else if(lpPrevBuffData->btType == 1)
; 74   : 			{
; 75   : 				DebuffCount += 1;	
; 76   : 			}
; 77   : 
; 78   : 			if(i > lpObj->btEffectCount)

  000ac	0f b6 83 d6 01
	00 00		 movzx	 eax, BYTE PTR [ebx+470]
  000b3	3b f0		 cmp	 esi, eax
  000b5	7f 09		 jg	 SHORT $LN23@SetEffect
$LN2@SetEffect:

; 52   : 
; 53   : 	int i;
; 54   : 	for( i = 0; i < MAX_STATE_COUNT; i++)

  000b7	46		 inc	 esi
  000b8	83 c7 1c	 add	 edi, 28			; 0000001cH
  000bb	83 fe 10	 cmp	 esi, 16			; 00000010H
  000be	7c b0		 jl	 SHORT $LL4@SetEffect
$LN23@SetEffect:
  000c0	8b 5d ec	 mov	 ebx, DWORD PTR tv333[ebp]

; 79   : 				break;
; 80   : 		}
; 81   : 	}
; 82   : 
; 83   : 	for( i = 0; i < MAX_STATE_COUNT; i++)

  000c3	33 c9		 xor	 ecx, ecx
$LL7@SetEffect:

; 84   : 	{
; 85   : 		if(lpObj->pEffectInfo[i].btEffectNum == NULL)

  000c5	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  000c8	74 15		 je	 SHORT $LN24@SetEffect

; 79   : 				break;
; 80   : 		}
; 81   : 	}
; 82   : 
; 83   : 	for( i = 0; i < MAX_STATE_COUNT; i++)

  000ca	41		 inc	 ecx
  000cb	83 c3 1c	 add	 ebx, 28			; 0000001cH
  000ce	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000d1	7c f2		 jl	 SHORT $LL7@SetEffect

; 98   : 			break;
; 99   : 		}
; 100  : 	}
; 101  : 
; 102  : 	return iRemovedBuffIndex;

  000d3	8b 45 f8	 mov	 eax, DWORD PTR _iRemovedBuffIndex$1$[ebp]
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx

; 103  : }

  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 1c 00	 ret	 28			; 0000001cH
$LN24@SetEffect:

; 86   : 		{
; 87   : 			lpObj->pEffectInfo[i].btEffectNum = iBuffIndex;
; 88   : 			lpObj->pEffectInfo[i].btOptionType = lpBuffData->btViewPortIndex;
; 89   : 			lpObj->pEffectInfo[i].btEffectType1 = btEffectType1;

  000df	8b 5d 10	 mov	 ebx, DWORD PTR _btEffectType1$[ebp]
  000e2	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]

; 90   : 			lpObj->pEffectInfo[i].btEffectType2 = btEffectType2;
; 91   : 			lpObj->pEffectInfo[i].iEffectValue1 = iEffectValue1;

  000e9	8b 75 18	 mov	 esi, DWORD PTR _iEffectValue1$[ebp]
  000ec	2b c1		 sub	 eax, ecx
  000ee	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 92   : 			lpObj->pEffectInfo[i].iEffectValue2 = iEffectValue2;

  000f1	8b 7d 1c	 mov	 edi, DWORD PTR _iEffectValue2$[ebp]
  000f4	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  000f7	8b 45 0c	 mov	 eax, DWORD PTR _iBuffIndex$[ebp]
  000fa	88 81 d8 01 00
	00		 mov	 BYTE PTR [ecx+472], al
  00100	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00103	88 81 d9 01 00
	00		 mov	 BYTE PTR [ecx+473], al
  00109	8b 45 14	 mov	 eax, DWORD PTR _btEffectType2$[ebp]
  0010c	88 81 db 01 00
	00		 mov	 BYTE PTR [ecx+475], al

; 93   : 			lpObj->pEffectInfo[i].iTimeValue = iTimeValue;

  00112	8b 45 20	 mov	 eax, DWORD PTR _iTimeValue$[ebp]
  00115	89 4d ec	 mov	 DWORD PTR tv337[ebp], ecx
  00118	88 99 da 01 00
	00		 mov	 BYTE PTR [ecx+474], bl
  0011e	89 b1 e0 01 00
	00		 mov	 DWORD PTR [ecx+480], esi
  00124	89 b9 e4 01 00
	00		 mov	 DWORD PTR [ecx+484], edi
  0012a	89 81 f0 01 00
	00		 mov	 DWORD PTR [ecx+496], eax

; 94   : 			lpObj->pEffectInfo[i].dwTICK_COUNT = GetTickCount();

  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00136	8b 4d ec	 mov	 ecx, DWORD PTR tv337[ebp]

; 95   : 
; 96   : 			g_BuffEffect.SetBuffEffect(lpObj,btEffectType1,iEffectValue1);

  00139	56		 push	 esi
  0013a	53		 push	 ebx
  0013b	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0013e	89 81 ec 01 00
	00		 mov	 DWORD PTR [ecx+492], eax
  00144	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00149	53		 push	 ebx
  0014a	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect

; 97   : 			g_BuffEffect.SetBuffEffect(lpObj,btEffectType2,iEffectValue2);

  0014f	57		 push	 edi
  00150	ff 75 14	 push	 DWORD PTR _btEffectType2$[ebp]
  00153	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffEffect@@3VCBuffEffect@@A ; g_BuffEffect
  00158	53		 push	 ebx
  00159	e8 00 00 00 00	 call	 ?SetBuffEffect@CBuffEffect@@QAEXPAUOBJECTSTRUCT@@EH@Z ; CBuffEffect::SetBuffEffect

; 98   : 			break;
; 99   : 		}
; 100  : 	}
; 101  : 
; 102  : 	return iRemovedBuffIndex;

  0015e	8b 45 f8	 mov	 eax, DWORD PTR _iRemovedBuffIndex$1$[ebp]
  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx

; 103  : }

  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 1c 00	 ret	 28			; 0000001cH
?SetEffect@CBuffEffectSlot@@QAEHPAUOBJECTSTRUCT@@HEEHHH@Z ENDP ; CBuffEffectSlot::SetEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ??1CBuffEffectSlot@@UAE@XZ
_TEXT	SEGMENT
??1CBuffEffectSlot@@UAE@XZ PROC				; CBuffEffectSlot::~CBuffEffectSlot, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffEffectSlot@@6B@

; 26   : 
; 27   : }

  00006	c3		 ret	 0
??1CBuffEffectSlot@@UAE@XZ ENDP				; CBuffEffectSlot::~CBuffEffectSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ??0CBuffEffectSlot@@QAE@XZ
_TEXT	SEGMENT
??0CBuffEffectSlot@@QAE@XZ PROC				; CBuffEffectSlot::CBuffEffectSlot, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBuffEffectSlot@@6B@

; 21   : 
; 22   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CBuffEffectSlot@@QAE@XZ ENDP				; CBuffEffectSlot::CBuffEffectSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\buffeffectslot.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1136 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
