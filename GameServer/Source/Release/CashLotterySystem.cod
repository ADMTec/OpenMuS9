; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CashLotterySystem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CCashLotterySystem@@QAE@XZ			; CCashLotterySystem::CCashLotterySystem
PUBLIC	??1CCashLotterySystem@@UAE@XZ			; CCashLotterySystem::~CCashLotterySystem
PUBLIC	?Initialize@CCashLotterySystem@@QAEXXZ		; CCashLotterySystem::Initialize
PUBLIC	?Load@CCashLotterySystem@@QAEXPAD@Z		; CCashLotterySystem::Load
PUBLIC	?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate
PUBLIC	?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z	; CCashLotterySystem::InsertItem
PUBLIC	?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z	; CCashLotterySystem::GetItem
PUBLIC	?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ; CCashLotterySystem::GetRequireInvenSize
PUBLIC	??_GCCashLotterySystem@@UAEPAXI@Z		; CCashLotterySystem::`scalar deleting destructor'
PUBLIC	??0CCashLottery@@QAE@XZ				; CCashLottery::CCashLottery
PUBLIC	??1CCashLottery@@UAE@XZ				; CCashLottery::~CCashLottery
PUBLIC	?Init@CCashLottery@@QAEXXZ			; CCashLottery::Init
PUBLIC	?LoadLottery@CCashLottery@@QAEEPBDPAD@Z		; CCashLottery::LoadLottery
PUBLIC	?GetLottery@CCashLottery@@QAEPAVCCashLotterySystem@@PBD@Z ; CCashLottery::GetLottery
PUBLIC	?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z	; CCashLottery::GetItem
PUBLIC	??_GCCashLottery@@UAEPAXI@Z			; CCashLottery::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CCashLotterySystem@@6B@			; CCashLotterySystem::`vftable'
PUBLIC	??_7CCashLottery@@6B@				; CCashLottery::`vftable'
PUBLIC	?g_Lottery@@3VCCashLottery@@A			; g_Lottery
PUBLIC	?g_CashLotterySystem@@3VCCashLotterySystem@@A	; g_CashLotterySystem
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ ; `string'
PUBLIC	??_R4CCashLotterySystem@@6B@			; CCashLotterySystem::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashLotterySystem@@@8			; CCashLotterySystem `RTTI Type Descriptor'
PUBLIC	??_R3CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashLotterySystem@@8			; CCashLotterySystem::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashLotterySystem@@8		; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCashLottery@@6B@				; CCashLottery::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCashLottery@@@8			; CCashLottery `RTTI Type Descriptor'
PUBLIC	??_R3CCashLottery@@8				; CCashLottery::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCashLottery@@8				; CCashLottery::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCashLottery@@8			; CCashLottery::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	??_ECCashLotterySystem@@UAEPAXI@Z:PROC		; CCashLotterySystem::`vector deleting destructor'
EXTRN	??_ECCashLottery@@UAEPAXI@Z:PROC		; CCashLottery::`vector deleting destructor'
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_Lottery@@3VCCashLottery@@A DB 090H DUP (?)		; g_Lottery
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
?g_CashLotterySystem@@3VCCashLotterySystem@@A DB 076d4H DUP (?) ; g_CashLotterySystem
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CashLotterySystem$initializer$@@3P6AXXZA DD FLAT:??__Eg_CashLotterySystem@@YAXXZ ; g_CashLotterySystem$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CCashLottery@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashLottery@@8 DD FLAT:??_R0?AVCCashLottery@@@8 ; CCashLottery::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashLottery@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashLottery@@8
rdata$r	SEGMENT
??_R2CCashLottery@@8 DD FLAT:??_R1A@?0A@EA@CCashLottery@@8 ; CCashLottery::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashLottery@@8
rdata$r	SEGMENT
??_R3CCashLottery@@8 DD 00H				; CCashLottery::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashLottery@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashLottery@@@8
data$r	SEGMENT
??_R0?AVCCashLottery@@@8 DD FLAT:??_7type_info@@6B@	; CCashLottery `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashLottery@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCashLottery@@6B@
rdata$r	SEGMENT
??_R4CCashLottery@@6B@ DD 00H				; CCashLottery::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashLottery@@@8
	DD	FLAT:??_R3CCashLottery@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCashLotterySystem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCashLotterySystem@@8 DD FLAT:??_R0?AVCCashLotterySystem@@@8 ; CCashLotterySystem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R2CCashLotterySystem@@8
rdata$r	SEGMENT
??_R2CCashLotterySystem@@8 DD FLAT:??_R1A@?0A@EA@CCashLotterySystem@@8 ; CCashLotterySystem::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCashLotterySystem@@8
rdata$r	SEGMENT
??_R3CCashLotterySystem@@8 DD 00H			; CCashLotterySystem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCashLotterySystem@@@8
data$r	SEGMENT
??_R0?AVCCashLotterySystem@@@8 DD FLAT:??_7type_info@@6B@ ; CCashLotterySystem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCashLotterySystem@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCashLotterySystem@@6B@
rdata$r	SEGMENT
??_R4CCashLotterySystem@@6B@ DD 00H			; CCashLotterySystem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCashLotterySystem@@@8
	DD	FLAT:??_R3CCashLotterySystem@@8
rdata$r	ENDS
;	COMDAT ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
CONST	SEGMENT
??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@ DB '[C'
	DB	'ashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,'
	DB	'Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOp'
	DB	'tion(%d,%d,%d,%d,%d,%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
CONST	SEGMENT
??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@ DB '[CashLot'
	DB	'errySystem] Lottery Item List load failed. [%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CCashLottery@@6B@
CONST	SEGMENT
??_7CCashLottery@@6B@ DD FLAT:??_R4CCashLottery@@6B@	; CCashLottery::`vftable'
	DD	FLAT:??_ECCashLottery@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CCashLotterySystem@@6B@
CONST	SEGMENT
??_7CCashLotterySystem@@6B@ DD FLAT:??_R4CCashLotterySystem@@6B@ ; CCashLotterySystem::`vftable'
	DD	FLAT:??_ECCashLotterySystem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z$0
__ehfuncinfo$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCashLotterySystem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1
__ehfuncinfo$??0CCashLotterySystem@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCashLotterySystem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?g_Lottery$initializer$@@3P6AXXZA DD FLAT:??__Eg_Lottery@@YAXXZ ; g_Lottery$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_Lottery@@YAXXZ
text$yd	SEGMENT
??__Fg_Lottery@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Lottery'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Lottery@@3VCCashLottery@@A ; g_Lottery
  00005	e9 00 00 00 00	 jmp	 ??1CCashLottery@@UAE@XZ	; CCashLottery::~CCashLottery
??__Fg_Lottery@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Lottery''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??__Eg_Lottery@@YAXXZ
text$di	SEGMENT
??__Eg_Lottery@@YAXXZ PROC				; `dynamic initializer for 'g_Lottery'', COMDAT

; 442  : CCashLottery g_Lottery;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Lottery@@3VCCashLottery@@A ; g_Lottery
  00005	e8 00 00 00 00	 call	 ??0CCashLottery@@QAE@XZ	; CCashLottery::CCashLottery
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_Lottery@@YAXXZ ; `dynamic atexit destructor for 'g_Lottery''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_Lottery@@YAXXZ ENDP				; `dynamic initializer for 'g_Lottery''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CashLotterySystem@@YAXXZ
text$yd	SEGMENT
??__Fg_CashLotterySystem@@YAXXZ PROC			; `dynamic atexit destructor for 'g_CashLotterySystem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  00005	e9 00 00 00 00	 jmp	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
??__Fg_CashLotterySystem@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_CashLotterySystem''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??__Eg_CashLotterySystem@@YAXXZ
text$di	SEGMENT
??__Eg_CashLotterySystem@@YAXXZ PROC			; `dynamic initializer for 'g_CashLotterySystem'', COMDAT

; 14   : CCashLotterySystem g_CashLotterySystem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashLotterySystem@@3VCCashLotterySystem@@A ; g_CashLotterySystem
  00005	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CashLotterySystem@@YAXXZ ; `dynamic atexit destructor for 'g_CashLotterySystem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CashLotterySystem@@YAXXZ ENDP			; `dynamic initializer for 'g_CashLotterySystem''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCashLottery@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCashLottery@@UAEPAXI@Z PROC			; CCashLottery::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCashLottery@@UAE@XZ	; CCashLottery::~CCashLottery
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 90 00 00 00	 push	 144			; 00000090H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCashLottery@@UAEPAXI@Z ENDP			; CCashLottery::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
_lpItem$ = 12						; size = 4
?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z PROC		; CCashLottery::GetItem, COMDAT
; _this$ = ecx

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 504  : 	CCashLotterySystem* lpLottery = GetLottery(szName);

  00003	ff 75 08	 push	 DWORD PTR _szName$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetLottery@CCashLottery@@QAEPAVCCashLotterySystem@@PBD@Z ; CCashLottery::GetLottery

; 505  : 
; 506  : 	if( lpLottery == FALSE )

  0000b	85 c0		 test	 eax, eax
  0000d	75 04		 jne	 SHORT $LN2@GetItem

; 514  : 	{
; 515  : 		return FALSE;
; 516  : 	}
; 517  : return TRUE;
; 518  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN2@GetItem:

; 507  : 	{
; 508  : 		return FALSE;
; 509  : 	}
; 510  : 
; 511  : 	lpLottery->GetItem(lpItem);

  00013	ff 75 0c	 push	 DWORD PTR _lpItem$[ebp]
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ; CCashLotterySystem::GetItem

; 512  : 
; 513  : 	if( lpItem == FALSE )

  0001d	33 c0		 xor	 eax, eax
  0001f	39 45 0c	 cmp	 DWORD PTR _lpItem$[ebp], eax
  00022	0f 95 c0	 setne	 al

; 514  : 	{
; 515  : 		return FALSE;
; 516  : 	}
; 517  : return TRUE;
; 518  : }

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?GetItem@CCashLottery@@QAEHPBDPAVCItem@@@Z ENDP		; CCashLottery::GetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?GetLottery@CCashLottery@@QAEPAVCCashLotterySystem@@PBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_szName$ = 8						; size = 4
?GetLottery@CCashLottery@@QAEPAVCCashLotterySystem@@PBD@Z PROC ; CCashLottery::GetLottery, COMDAT
; _this$ = ecx

; 491  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 492  : 	for(int i = 0; i < MAX_LOTTERY; i++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _szName$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	33 ff		 xor	 edi, edi
  00011	8d 70 05	 lea	 esi, DWORD PTR [eax+5]
$LL4@GetLottery:

; 493  : 	{
; 494  : 		if( Lottery[i].InUse == TRUE && strcmp(Lottery[i].Name,szName) == FALSE)

  00014	80 7e ff 01	 cmp	 BYTE PTR [esi-1], 1
  00018	75 2f		 jne	 SHORT $LN2@GetLottery
  0001a	8b c3		 mov	 eax, ebx
  0001c	8b ce		 mov	 ecx, esi
  0001e	66 90		 npad	 2
$LL13@GetLottery:
  00020	8a 11		 mov	 dl, BYTE PTR [ecx]
  00022	3a 10		 cmp	 dl, BYTE PTR [eax]
  00024	75 1a		 jne	 SHORT $LN14@GetLottery
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN15@GetLottery
  0002a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0002d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00030	75 0e		 jne	 SHORT $LN14@GetLottery
  00032	83 c1 02	 add	 ecx, 2
  00035	83 c0 02	 add	 eax, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL13@GetLottery
$LN15@GetLottery:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN16@GetLottery
$LN14@GetLottery:
  00040	1b c0		 sbb	 eax, eax
  00042	83 c8 01	 or	 eax, 1
$LN16@GetLottery:
  00045	85 c0		 test	 eax, eax
  00047	74 14		 je	 SHORT $LN8@GetLottery
$LN2@GetLottery:

; 492  : 	for(int i = 0; i < MAX_LOTTERY; i++)

  00049	47		 inc	 edi
  0004a	83 c6 1c	 add	 esi, 28			; 0000001cH
  0004d	83 ff 05	 cmp	 edi, 5
  00050	7c c2		 jl	 SHORT $LL4@GetLottery

; 497  : 		}
; 498  : 	}
; 499  : return FALSE;

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	33 c0		 xor	 eax, eax
  00056	5b		 pop	 ebx

; 500  : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN8@GetLottery:

; 495  : 		{
; 496  : 			return Lottery[i].pLottery;

  0005d	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00060	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00067	2b c1		 sub	 eax, ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 500  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?GetLottery@CCashLottery@@QAEPAVCCashLotterySystem@@PBD@Z ENDP ; CCashLottery::GetLottery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?LoadLottery@CCashLottery@@QAEEPBDPAD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_szLotteryName$ = 8					; size = 4
_szFileName$ = 12					; size = 4
?LoadLottery@CCashLottery@@QAEEPBDPAD@Z PROC		; CCashLottery::LoadLottery, COMDAT
; _this$ = ecx

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 466  : 	CCashLotterySystem* lpLottery = 0;
; 467  : 
; 468  : 	for(int i = 0; i < MAX_LOTTERY; i++)

  00024	33 d2		 xor	 edx, edx
  00026	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@LoadLotter:

; 469  : 	{
; 470  : 		if( Lottery[i].InUse == FALSE)

  00030	80 38 00	 cmp	 BYTE PTR [eax], 0
  00033	74 1e		 je	 SHORT $LN14@LoadLotter

; 466  : 	CCashLotterySystem* lpLottery = 0;
; 467  : 
; 468  : 	for(int i = 0; i < MAX_LOTTERY; i++)

  00035	42		 inc	 edx
  00036	83 c0 1c	 add	 eax, 28			; 0000001cH
  00039	83 fa 05	 cmp	 edx, 5
  0003c	7c f2		 jl	 SHORT $LL4@LoadLotter
$LN21@LoadLotter:

; 484  : 		}
; 485  : 	}
; 486  : 
; 487  : return FALSE;

  0003e	32 c0		 xor	 al, al

; 488  : }

  00040	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00043	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004a	59		 pop	 ecx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN14@LoadLotter:

; 471  : 		{
; 472  : 			Lottery[i].InUse = TRUE;

  00053	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  0005a	2b c2		 sub	 eax, edx
  0005c	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]

; 473  : 			strcpy(Lottery[i].Name,szLotteryName);

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _szLotteryName$[ebp]
  00062	8d 57 05	 lea	 edx, DWORD PTR [edi+5]
  00065	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1
  00069	2b d1		 sub	 edx, ecx
  0006b	0f 1f 44 00 00	 npad	 5
$LL8@LoadLotter:
  00070	8a 01		 mov	 al, BYTE PTR [ecx]
  00072	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00075	88 44 0a ff	 mov	 BYTE PTR [edx+ecx-1], al
  00079	84 c0		 test	 al, al
  0007b	75 f3		 jne	 SHORT $LL8@LoadLotter

; 474  : 			lpLottery = new CCashLotterySystem;

  0007d	68 d4 76 00 00	 push	 30420			; 000076d4H
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4
  0008a	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
  0008d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00094	85 c0		 test	 eax, eax
  00096	74 0b		 je	 SHORT $LN9@LoadLotter
  00098	8b c8		 mov	 ecx, eax
  0009a	e8 00 00 00 00	 call	 ??0CCashLotterySystem@@QAE@XZ ; CCashLotterySystem::CCashLotterySystem
  0009f	8b f0		 mov	 esi, eax
  000a1	eb 02		 jmp	 SHORT $LN10@LoadLotter
$LN9@LoadLotter:
  000a3	33 f6		 xor	 esi, esi
$LN10@LoadLotter:
  000a5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 475  : 
; 476  : 			if( lpLottery == FALSE )

  000ac	85 f6		 test	 esi, esi
  000ae	74 8e		 je	 SHORT $LN21@LoadLotter

; 477  : 			{
; 478  : 				return FALSE;
; 479  : 			}
; 480  : 
; 481  : 			lpLottery->Load(szFileName);

  000b0	ff 75 0c	 push	 DWORD PTR _szFileName$[ebp]
  000b3	8b ce		 mov	 ecx, esi
  000b5	e8 00 00 00 00	 call	 ?Load@CCashLotterySystem@@QAEXPAD@Z ; CCashLotterySystem::Load

; 482  : 			Lottery[i].pLottery = lpLottery;

  000ba	89 77 1c	 mov	 DWORD PTR [edi+28], esi

; 483  : 			return TRUE;

  000bd	b0 01		 mov	 al, 1

; 488  : }

  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z$0:
  00000	68 d4 76 00 00	 push	 30420			; 000076d4H
  00005	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadLottery@CCashLottery@@QAEEPBDPAD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadLottery@CCashLottery@@QAEEPBDPAD@Z ENDP		; CCashLottery::LoadLottery
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?Init@CCashLottery@@QAEXXZ
_TEXT	SEGMENT
?Init@CCashLottery@@QAEXXZ PROC				; CCashLottery::Init, COMDAT
; _this$ = ecx

; 456  : 	for(int i = 0; i < MAX_LOTTERY; i++)
; 457  : 	{
; 458  : 		Lottery[i].InUse = FALSE;

  00000	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0

; 459  : 		Lottery[i].Name[0] = 0;
; 460  : 		Lottery[i].pLottery = 0;

  00006	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0000d	66 c7 41 20 00
	00		 mov	 WORD PTR [ecx+32], 0
  00013	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0001a	66 c7 41 3c 00
	00		 mov	 WORD PTR [ecx+60], 0
  00020	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  00027	66 c7 41 58 00
	00		 mov	 WORD PTR [ecx+88], 0
  0002d	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  00034	66 c7 41 74 00
	00		 mov	 WORD PTR [ecx+116], 0
  0003a	c7 81 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+140], 0

; 461  : 	}
; 462  : }

  00044	c3		 ret	 0
?Init@CCashLottery@@QAEXXZ ENDP				; CCashLottery::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??1CCashLottery@@UAE@XZ
_TEXT	SEGMENT
??1CCashLottery@@UAE@XZ PROC				; CCashLottery::~CCashLottery, COMDAT
; _this$ = ecx

; 450  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCashLottery@@6B@

; 451  : 
; 452  : }

  00006	c3		 ret	 0
??1CCashLottery@@UAE@XZ ENDP				; CCashLottery::~CCashLottery
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??0CCashLottery@@QAE@XZ
_TEXT	SEGMENT
??0CCashLottery@@QAE@XZ PROC				; CCashLottery::CCashLottery, COMDAT
; _this$ = ecx

; 445  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCashLottery@@6B@

; 446  : 	Init();

  00009	e8 00 00 00 00	 call	 ?Init@CCashLottery@@QAEXXZ ; CCashLottery::Init

; 447  : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CCashLottery@@QAE@XZ ENDP				; CCashLottery::CCashLottery
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCashLotterySystem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCashLotterySystem@@UAEPAXI@Z PROC			; CCashLotterySystem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCashLotterySystem@@UAE@XZ ; CCashLotterySystem::~CCashLotterySystem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 d4 76 00 00	 push	 30420			; 000076d4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCashLotterySystem@@UAEPAXI@Z ENDP			; CCashLotterySystem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z
_TEXT	SEGMENT
_piHeight$ = 8						; size = 4
_piWidth$ = 12						; size = 4
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z PROC ; CCashLotterySystem::GetRequireInvenSize, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 438  : 	*piHeight = this->iItemMaxHeight;

  00003	8b 45 08	 mov	 eax, DWORD PTR _piHeight$[ebp]
  00006	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 439  : 	*piWidth  = this->iItemMaxWidth;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _piWidth$[ebp]
  0000e	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00011	89 08		 mov	 DWORD PTR [eax], ecx

; 440  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetRequireInvenSize@CCashLotterySystem@@QAEXPAH0@Z ENDP ; CCashLotterySystem::GetRequireInvenSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z
_TEXT	SEGMENT
_iItemCategory$1$ = -312				; size = 4
_iItemSelectNumber$1$ = -308				; size = 4
_iExOption$1$ = -304					; size = 4
_iAddOptionRate$1$ = -300				; size = 4
_iLuckOptionRate$1$ = -296				; size = 4
_iSkillOptionRate$1$ = -292				; size = 4
_iItemLevelMin$1$ = -288				; size = 4
_btSkillOption$ = -284					; size = 1
_btLuckOption$ = -280					; size = 1
_iTemp$1$ = -276					; size = 4
_iAddOption$1$ = -272					; size = 4
_iLuckOption$1$ = -268					; size = 4
_iSkillOption$1$ = -264					; size = 4
_iItemLevelMax$1$ = -260				; size = 4
_iExOptionRate$1$ = -256				; size = 4
_btAddOption$ = -256					; size = 1
_iItemType$1$ = -252					; size = 4
_iItemIndex$1$ = -248					; size = 4
tv485 = -244						; size = 4
tv489 = -240						; size = 4
_lpItem$GSCopy$1$ = -236				; size = 4
_btExOption$ = -230					; size = 1
_btAddOption$1$ = -226					; size = 1
_btExOptionValue1$2$ = -225				; size = 1
_ReturnItem$ = -224					; size = 212
_ExOption$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z PROC	; CCashLotterySystem::GetItem, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpItem$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx
  0001a	89 9d 14 ff ff
	ff		 mov	 DWORD PTR _lpItem$GSCopy$1$[ebp], ebx

; 272  : 	int iItemCategory = 0;
; 273  : 	int iMaxItemCountInCategory = 0;
; 274  : 	int iItemSelectNumber = 0;
; 275  : 	CItem ReturnItem;

  00020	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _ReturnItem$[ebp]
  00026	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem

; 276  : 	int iItemNumber = 0;
; 277  : 	int iItemType = 0;
; 278  : 	int iItemIndex = 0;
; 279  : 	int iItemLevel = 0;
; 280  : 	int iItemLevelMin = 0;
; 281  : 	int iItemLevelMax = 0;
; 282  : 	int iSkillOption = 0;
; 283  : 	int iLuckOption = 0;
; 284  : 	int iAddOption = 0;
; 285  : 	int iExOption = 0;
; 286  : 	int iSkillOptionRate = 0;
; 287  : 	int iLuckOptionRate = 0;
; 288  : 	int iAddOptionRate = 0;
; 289  : 	int iExOptionRate = 0;
; 290  : 	BYTE btSkillOption = 0;

  0002b	32 c0		 xor	 al, al

; 291  : 	BYTE btLuckOption = 0;
; 292  : 	BYTE btAddOption = 0;
; 293  : 	BYTE btExOption = 0;
; 294  : 	BYTE btExOptionKey = 0;
; 295  : 	BYTE btExOptionValue1 = 0;
; 296  : 	BYTE btExOptionValue2 = 0;
; 297  : 	int iTemp = 0;

  0002d	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iTemp$1$[ebp], 0
  00037	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv485[ebp], eax
  0003d	88 85 e4 fe ff
	ff		 mov	 BYTE PTR _btSkillOption$[ebp], al
  00043	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv489[ebp], eax
  00049	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _btLuckOption$[ebp], al
  0004f	88 85 1e ff ff
	ff		 mov	 BYTE PTR _btAddOption$1$[ebp], al
  00055	88 85 1a ff ff
	ff		 mov	 BYTE PTR _btExOption$[ebp], al

; 298  : 	int iRandomKey = 0;
; 299  : 	BYTE ExOption[MAX_EXOPTION_SIZE];
; 300  : 
; 301  : 	if ( lpItem == NULL )

  0005b	85 db		 test	 ebx, ebx
  0005d	75 15		 jne	 SHORT $LN2@GetItem
$LN4@GetItem:
  0005f	5f		 pop	 edi

; 302  : 		return -1;

  00060	83 c8 ff	 or	 eax, -1
  00063	5b		 pop	 ebx

; 430  : }

  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	33 cd		 xor	 ecx, ebp
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN2@GetItem:

; 303  : 
; 304  : 	iItemCategory = this->CategoryRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00074	6a 01		 push	 1
  00076	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00079	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  0007e	8b d8		 mov	 ebx, eax
  00080	89 9d c8 fe ff
	ff		 mov	 DWORD PTR _iItemCategory$1$[ebp], ebx

; 305  : 
; 306  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00086	83 fb 17	 cmp	 ebx, 23			; 00000017H
  00089	77 d4		 ja	 SHORT $LN4@GetItem

; 307  : 		return -1;
; 308  : 
; 309  : 	iMaxItemCountInCategory = this->LotteryItemListCount[iItemCategory];

  0008b	56		 push	 esi
  0008c	8b 74 9f 3c	 mov	 esi, DWORD PTR [edi+ebx*4+60]

; 310  : 
; 311  : 	if ( iMaxItemCountInCategory <= 0 ||  iMaxItemCountInCategory > MAX_LOTTERY_ITEM_COUNT )

  00090	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  00093	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  00098	0f 87 77 03 00
	00		 ja	 $LN6@GetItem

; 312  : 		return -1;
; 313  : 
; 314  : 	iItemSelectNumber = rand() % iMaxItemCountInCategory;

  0009e	e8 00 00 00 00	 call	 _rand
  000a3	99		 cdq
  000a4	f7 fe		 idiv	 esi
  000a6	8b ca		 mov	 ecx, edx
  000a8	89 8d cc fe ff
	ff		 mov	 DWORD PTR _iItemSelectNumber$1$[ebp], ecx

; 315  : 
; 316  : 	if ( iItemSelectNumber < 0 ||  iItemSelectNumber > MAX_LOTTERY_ITEM_COUNT )

  000ae	81 f9 82 00 00
	00		 cmp	 ecx, 130		; 00000082H
  000b4	0f 87 5b 03 00
	00		 ja	 $LN6@GetItem

; 317  : 		return -1;
; 318  : 
; 319  : 	iItemType = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemType;

  000ba	69 c3 82 00 00
	00		 imul	 eax, ebx, 130
  000c0	03 c8		 add	 ecx, eax
  000c2	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]

; 320  : 	iItemIndex = this->LotteryItemList[iItemCategory][iItemSelectNumber].wItemIndex;
; 321  : 	iItemLevelMin = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMin;
; 322  : 	iItemLevelMax = this->LotteryItemList[iItemCategory][iItemSelectNumber].btItemLevelMax;

  000c5	0f b6 94 47 0c
	02 00 00	 movzx	 edx, BYTE PTR [edi+eax*2+524]
  000cd	8d 34 47	 lea	 esi, DWORD PTR [edi+eax*2]
  000d0	0f b6 86 0a 02
	00 00		 movzx	 eax, BYTE PTR [esi+522]
  000d7	89 85 04 ff ff
	ff		 mov	 DWORD PTR _iItemType$1$[ebp], eax
  000dd	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]

; 323  : 	iSkillOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btSkillOption;
; 324  : 	iLuckOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btLuckOption;
; 325  : 	iAddOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btAddOption;
; 326  : 	iExOption = this->LotteryItemList[iItemCategory][iItemSelectNumber].btExOption;
; 327  : 
; 328  : 	if ( iItemType == -1 || iItemIndex == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iItemLevelMin == -1 || iItemLevelMax == -1 || iSkillOption == -1 || iLuckOption == -1 || iAddOption == -1 || iExOption == -1 )

  000e0	83 bd 04 ff ff
	ff ff		 cmp	 DWORD PTR _iItemType$1$[ebp], -1
  000e7	0f b6 8e 0d 02
	00 00		 movzx	 ecx, BYTE PTR [esi+525]
  000ee	0f b7 84 47 08
	02 00 00	 movzx	 eax, WORD PTR [edi+eax*2+520]
  000f6	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _iSkillOption$1$[ebp], ecx
  000fc	0f b6 8e 0e 02
	00 00		 movzx	 ecx, BYTE PTR [esi+526]
  00103	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _iLuckOption$1$[ebp], ecx
  00109	0f b6 8e 0f 02
	00 00		 movzx	 ecx, BYTE PTR [esi+527]
  00110	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iItemIndex$1$[ebp], eax
  00116	0f b6 86 0b 02
	00 00		 movzx	 eax, BYTE PTR [esi+523]
  0011d	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _iAddOption$1$[ebp], ecx
  00123	0f b6 8e 10 02
	00 00		 movzx	 ecx, BYTE PTR [esi+528]
  0012a	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _iItemLevelMin$1$[ebp], eax
  00130	89 95 fc fe ff
	ff		 mov	 DWORD PTR _iItemLevelMax$1$[ebp], edx
  00136	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _iExOption$1$[ebp], ecx
  0013c	0f 84 d3 02 00
	00		 je	 $LN6@GetItem
  00142	83 bd 08 ff ff
	ff ff		 cmp	 DWORD PTR _iItemIndex$1$[ebp], -1
  00149	0f 84 c6 02 00
	00		 je	 $LN6@GetItem
  0014f	83 f8 ff	 cmp	 eax, -1
  00152	0f 84 bd 02 00
	00		 je	 $LN6@GetItem
  00158	83 fa ff	 cmp	 edx, -1
  0015b	0f 84 b4 02 00
	00		 je	 $LN6@GetItem
  00161	83 bd f8 fe ff
	ff ff		 cmp	 DWORD PTR _iSkillOption$1$[ebp], -1
  00168	0f 84 a7 02 00
	00		 je	 $LN6@GetItem
  0016e	83 bd f4 fe ff
	ff ff		 cmp	 DWORD PTR _iLuckOption$1$[ebp], -1
  00175	0f 84 9a 02 00
	00		 je	 $LN6@GetItem
  0017b	83 bd f0 fe ff
	ff ff		 cmp	 DWORD PTR _iAddOption$1$[ebp], -1
  00182	0f 84 8d 02 00
	00		 je	 $LN6@GetItem
  00188	83 f9 ff	 cmp	 ecx, -1
  0018b	0f 84 84 02 00
	00		 je	 $LN6@GetItem

; 329  : 		return -1;
; 330  : 
; 331  : 	iSkillOptionRate = this->LotteryItemOptionRate[iItemCategory].iSkillOptionRate;

  00191	8b cb		 mov	 ecx, ebx
  00193	03 c9		 add	 ecx, ecx
  00195	8b 84 cf 98 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx*8+152]
  0019c	89 85 dc fe ff
	ff		 mov	 DWORD PTR _iSkillOptionRate$1$[ebp], eax

; 332  : 	iLuckOptionRate = this->LotteryItemOptionRate[iItemCategory].iLuckOptionRate;

  001a2	8b 84 cf 9c 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx*8+156]
  001a9	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _iLuckOptionRate$1$[ebp], eax

; 333  : 	iAddOptionRate = this->LotteryItemOptionRate[iItemCategory].iAddOptionRate;

  001af	8d 43 0a	 lea	 eax, DWORD PTR [ebx+10]
  001b2	03 c0		 add	 eax, eax
  001b4	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]
  001b7	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _iAddOptionRate$1$[ebp], eax

; 334  : 	iExOptionRate = this->LotteryItemOptionRate[iItemCategory].iExOptionRate;

  001bd	8b 84 cf a4 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx*8+164]
  001c4	89 85 00 ff ff
	ff		 mov	 DWORD PTR _iExOptionRate$1$[ebp], eax

; 335  : 
; 336  : 	iRandomKey = rand() % (iItemLevelMax - iItemLevelMin + 1);

  001ca	e8 00 00 00 00	 call	 _rand

; 337  : 	iItemLevel = iItemLevelMin + iRandomKey;

  001cf	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _iItemLevelMax$1$[ebp]
  001d5	8b 9d e0 fe ff
	ff		 mov	 ebx, DWORD PTR _iItemLevelMin$1$[ebp]
  001db	2b cb		 sub	 ecx, ebx
  001dd	41		 inc	 ecx
  001de	99		 cdq
  001df	f7 f9		 idiv	 ecx
  001e1	8d 34 13	 lea	 esi, DWORD PTR [ebx+edx]

; 338  : 
; 339  : 	if ( iItemLevel > iItemLevelMax || iItemLevel < iItemLevelMin )

  001e4	3b b5 fc fe ff
	ff		 cmp	 esi, DWORD PTR _iItemLevelMax$1$[ebp]
  001ea	7f 04		 jg	 SHORT $LN12@GetItem
  001ec	3b f3		 cmp	 esi, ebx
  001ee	7d 02		 jge	 SHORT $LN11@GetItem
$LN12@GetItem:

; 340  : 		iItemLevel = iItemLevelMin;

  001f0	8b f3		 mov	 esi, ebx
$LN11@GetItem:

; 341  : 
; 342  : 	if ( iSkillOption == 1 )

  001f2	83 bd f8 fe ff
	ff 01		 cmp	 DWORD PTR _iSkillOption$1$[ebp], 1
  001f9	bb 40 42 0f 00	 mov	 ebx, 1000000		; 000f4240H
  001fe	75 2c		 jne	 SHORT $LN14@GetItem

; 343  : 	{
; 344  : 		iRandomKey = GetLargeRand() % 1000000;

  00200	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00205	33 d2		 xor	 edx, edx

; 345  : 
; 346  : 		if ( iRandomKey < iSkillOptionRate )

  00207	b9 01 00 00 00	 mov	 ecx, 1
  0020c	f7 f3		 div	 ebx
  0020e	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv485[ebp]
  00214	3b 95 dc fe ff
	ff		 cmp	 edx, DWORD PTR _iSkillOptionRate$1$[ebp]
  0021a	0f b6 c0	 movzx	 eax, al
  0021d	0f 4c c1	 cmovl	 eax, ecx
  00220	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv485[ebp], eax
  00226	88 85 e4 fe ff
	ff		 mov	 BYTE PTR _btSkillOption$[ebp], al
$LN14@GetItem:

; 347  : 			btSkillOption = 1;
; 348  : 	}
; 349  : 
; 350  : 	if ( iLuckOption == 1 )

  0022c	83 bd f4 fe ff
	ff 01		 cmp	 DWORD PTR _iLuckOption$1$[ebp], 1
  00233	75 2c		 jne	 SHORT $LN16@GetItem

; 351  : 	{
; 352  : 		iRandomKey = GetLargeRand() % 1000000;

  00235	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0023a	33 d2		 xor	 edx, edx

; 353  : 
; 354  : 		if ( iRandomKey < iLuckOptionRate )

  0023c	b9 01 00 00 00	 mov	 ecx, 1
  00241	f7 f3		 div	 ebx
  00243	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv489[ebp]
  00249	3b 95 d8 fe ff
	ff		 cmp	 edx, DWORD PTR _iLuckOptionRate$1$[ebp]
  0024f	0f b6 c0	 movzx	 eax, al
  00252	0f 4c c1	 cmovl	 eax, ecx
  00255	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv489[ebp], eax
  0025b	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _btLuckOption$[ebp], al
$LN16@GetItem:

; 355  : 			btLuckOption = 1;
; 356  : 	}
; 357  : 
; 358  : 	if ( iAddOption == 1 )

  00261	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _iAddOption$1$[ebp], 1
  00268	75 2a		 jne	 SHORT $LN18@GetItem

; 359  : 	{
; 360  : 		iRandomKey = GetLargeRand() % 1000000;

  0026a	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0026f	33 d2		 xor	 edx, edx
  00271	f7 f3		 div	 ebx

; 361  : 
; 362  : 		if ( iRandomKey < iAddOptionRate )

  00273	3b 95 d4 fe ff
	ff		 cmp	 edx, DWORD PTR _iAddOptionRate$1$[ebp]
  00279	7d 19		 jge	 SHORT $LN18@GetItem

; 363  : 		{
; 364  : 			btAddOption = this->AddOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0027b	6a 01		 push	 1
  0027d	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00280	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  00285	88 85 1e ff ff
	ff		 mov	 BYTE PTR _btAddOption$1$[ebp], al

; 365  : 			iTemp = btAddOption;

  0028b	0f b6 c0	 movzx	 eax, al
  0028e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _iTemp$1$[ebp], eax
$LN18@GetItem:

; 366  : 		}
; 367  : 	}
; 368  : 
; 369  : 	if ( iExOption == 1 )

  00294	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _iExOption$1$[ebp]
  0029a	83 f9 01	 cmp	 ecx, 1
  0029d	75 13		 jne	 SHORT $LN19@GetItem

; 370  : 	{
; 371  : 		iRandomKey = GetLargeRand() % 1000000;

  0029f	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  002a4	33 d2		 xor	 edx, edx
  002a6	f7 f3		 div	 ebx

; 372  : 
; 373  : 		if ( iRandomKey < iExOptionRate )

  002a8	3b 95 00 ff ff
	ff		 cmp	 edx, DWORD PTR _iExOptionRate$1$[ebp]
  002ae	7d 5b		 jge	 SHORT $LN26@GetItem

; 374  : 		{
; 375  : 			btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 376  : 			btExOptionKey =  1 << (int)(btExOptionValue1);
; 377  : 			btExOption |= btExOptionKey;
; 378  : 
; 379  : 			iItemLevel = 0;
; 380  : 
; 381  : 			if ( (rand() % 4) == 0 )
; 382  : 			{
; 383  : 				btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);
; 384  : 
; 385  : 				if ( btExOptionValue1 != btExOptionValue2 )
; 386  : 				{
; 387  : 					btExOptionKey =  1 << (int)(btExOptionValue2);
; 388  : 					btExOption |= btExOptionKey;
; 389  : 				}
; 390  : 			}
; 391  : 		}
; 392  : 	}

  002b0	eb 05		 jmp	 SHORT $LN36@GetItem
$LN19@GetItem:

; 393  : 	else if ( iExOption == 2 )

  002b2	83 f9 02	 cmp	 ecx, 2
  002b5	75 54		 jne	 SHORT $LN26@GetItem
$LN36@GetItem:

; 394  : 	{
; 395  : 		btExOptionValue1 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  002b7	6a 01		 push	 1
  002b9	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  002bc	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
  002c1	0f b6 c8	 movzx	 ecx, al

; 396  : 		btExOptionKey =  1 << (int)(btExOptionValue1);
; 397  : 		btExOption |= btExOptionKey;

  002c4	33 db		 xor	 ebx, ebx
  002c6	0f ab cb	 bts	 ebx, ecx
  002c9	88 85 1f ff ff
	ff		 mov	 BYTE PTR _btExOptionValue1$2$[ebp], al

; 398  : 		iItemLevel = 0;

  002cf	33 f6		 xor	 esi, esi
  002d1	88 9d 1a ff ff
	ff		 mov	 BYTE PTR _btExOption$[ebp], bl

; 399  : 
; 400  : 		if ( (rand() % 4) == 0 )

  002d7	e8 00 00 00 00	 call	 _rand
  002dc	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002e1	79 05		 jns	 SHORT $LN33@GetItem
  002e3	48		 dec	 eax
  002e4	83 c8 fc	 or	 eax, -4			; fffffffcH
  002e7	40		 inc	 eax
$LN33@GetItem:
  002e8	75 21		 jne	 SHORT $LN26@GetItem

; 401  : 		{
; 402  : 			btExOptionValue2 = this->ExOptionRandomPool.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  002ea	6a 01		 push	 1
  002ec	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  002ef	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue

; 403  : 
; 404  : 			if ( btExOptionValue1 != btExOptionValue2 )

  002f4	38 85 1f ff ff
	ff		 cmp	 BYTE PTR _btExOptionValue1$2$[ebp], al
  002fa	74 0f		 je	 SHORT $LN26@GetItem

; 405  : 			{
; 406  : 				btExOptionKey =  1 << (int)(btExOptionValue2);
; 407  : 				btExOption |= btExOptionKey;

  002fc	0f b6 c0	 movzx	 eax, al
  002ff	0f b6 cb	 movzx	 ecx, bl
  00302	0f ab c1	 bts	 ecx, eax
  00305	88 8d 1a ff ff
	ff		 mov	 BYTE PTR _btExOption$[ebp], cl
$LN26@GetItem:

; 408  : 			}
; 409  : 		}
; 410  : 	}
; 411  : 
; 412  : 	if ( btAddOption != iTemp )

  0030b	0f b6 85 1e ff
	ff ff		 movzx	 eax, BYTE PTR _btAddOption$1$[ebp]
  00312	33 c9		 xor	 ecx, ecx
  00314	3b 85 ec fe ff
	ff		 cmp	 eax, DWORD PTR _iTemp$1$[ebp]

; 413  : 		btAddOption = 0;
; 414  : 
; 415  : 	iItemNumber = ItemGetNumberMake(iItemType, iItemIndex);

  0031a	ff b5 08 ff ff
	ff		 push	 DWORD PTR _iItemIndex$1$[ebp]
  00320	0f b6 9d 1e ff
	ff ff		 movzx	 ebx, BYTE PTR _btAddOption$1$[ebp]
  00327	ff b5 04 ff ff
	ff		 push	 DWORD PTR _iItemType$1$[ebp]
  0032d	0f 45 d9	 cmovne	 ebx, ecx
  00330	88 9d 00 ff ff
	ff		 mov	 BYTE PTR _btAddOption$[ebp], bl
  00336	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0033b	83 c4 08	 add	 esp, 8

; 416  : 	lpItem->Convert(iItemNumber, btSkillOption, btLuckOption, btAddOption, btExOption, 0, 0, 0, -1, CURRENT_DB_VERSION);

  0033e	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _lpItem$GSCopy$1$[ebp]
  00344	8b f8		 mov	 edi, eax
  00346	6a 03		 push	 3
  00348	68 ff 00 00 00	 push	 255			; 000000ffH
  0034d	6a 00		 push	 0
  0034f	6a 00		 push	 0
  00351	6a 00		 push	 0
  00353	ff b5 1a ff ff
	ff		 push	 DWORD PTR _btExOption$[ebp]
  00359	ff b5 00 ff ff
	ff		 push	 DWORD PTR _btAddOption$[ebp]
  0035f	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _btLuckOption$[ebp]
  00365	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _btSkillOption$[ebp]
  0036b	57		 push	 edi
  0036c	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 417  : 	lpItem->m_Level = iItemLevel;

  00371	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _lpItem$GSCopy$1$[ebp]

; 418  : 
; 419  : 	if ( !lpItem->IsItem() )

  00377	8b c8		 mov	 ecx, eax
  00379	66 89 70 08	 mov	 WORD PTR [eax+8], si
  0037d	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00382	85 c0		 test	 eax, eax
  00384	0f 84 8b 00 00
	00		 je	 $LN6@GetItem

; 420  : 		return -1;
; 421  : 
; 422  : 	ItemIsBufExOption(ExOption, lpItem);

  0038a	ff b5 14 ff ff
	ff		 push	 DWORD PTR _lpItem$GSCopy$1$[ebp]
  00390	8d 45 f4	 lea	 eax, DWORD PTR _ExOption$[ebp]
  00393	50		 push	 eax
  00394	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 423  : 
; 424  : 	LogAddTD("[CashItem][LotteryItem] Get Item Category:%d,Index:%d (Name:%s,Type:%d,Index:%d,Level:%d) Skill:%d,Luck:%d,AddOption:%d,ExOption(%d,%d,%d,%d,%d,%d)",

  00399	0f b6 45 f9	 movzx	 eax, BYTE PTR _ExOption$[ebp+5]
  0039d	50		 push	 eax
  0039e	0f b6 45 f8	 movzx	 eax, BYTE PTR _ExOption$[ebp+4]
  003a2	50		 push	 eax
  003a3	0f b6 45 f7	 movzx	 eax, BYTE PTR _ExOption$[ebp+3]
  003a7	50		 push	 eax
  003a8	0f b6 45 f6	 movzx	 eax, BYTE PTR _ExOption$[ebp+2]
  003ac	50		 push	 eax
  003ad	0f b6 45 f5	 movzx	 eax, BYTE PTR _ExOption$[ebp+1]
  003b1	50		 push	 eax
  003b2	0f b6 45 f4	 movzx	 eax, BYTE PTR _ExOption$[ebp]
  003b6	50		 push	 eax
  003b7	0f b6 c3	 movzx	 eax, bl
  003ba	50		 push	 eax
  003bb	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv489[ebp]
  003c1	0f b6 c0	 movzx	 eax, al
  003c4	50		 push	 eax
  003c5	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv485[ebp]
  003cb	0f b6 c0	 movzx	 eax, al
  003ce	50		 push	 eax
  003cf	56		 push	 esi
  003d0	ff b5 08 ff ff
	ff		 push	 DWORD PTR _iItemIndex$1$[ebp]
  003d6	8b b5 c8 fe ff
	ff		 mov	 esi, DWORD PTR _iItemCategory$1$[ebp]
  003dc	ff b5 04 ff ff
	ff		 push	 DWORD PTR _iItemType$1$[ebp]
  003e2	6b c7 70	 imul	 eax, edi, 112
  003e5	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  003ea	50		 push	 eax
  003eb	ff b5 cc fe ff
	ff		 push	 DWORD PTR _iItemSelectNumber$1$[ebp]
  003f1	56		 push	 esi
  003f2	68 00 00 00 00	 push	 OFFSET ??_C@_0JE@OJDHFOOC@?$FLCashItem?$FN?$FLLotteryItem?$FN?5Get?5Item@
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003fd	83 c4 48	 add	 esp, 72			; 00000048H

; 425  : 		iItemCategory, iItemSelectNumber, ItemAttribute[iItemNumber].Name, iItemType,
; 426  : 		iItemIndex, iItemLevel, btSkillOption, btLuckOption, btAddOption, 
; 427  : 		ExOption[0], ExOption[1], ExOption[2], ExOption[3], ExOption[4], ExOption[5]);
; 428  : 
; 429  : 	return iItemCategory;

  00400	8b c6		 mov	 eax, esi
  00402	5e		 pop	 esi
  00403	5f		 pop	 edi
  00404	5b		 pop	 ebx

; 430  : }

  00405	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00408	33 cd		 xor	 ecx, ebp
  0040a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040f	8b e5		 mov	 esp, ebp
  00411	5d		 pop	 ebp
  00412	c2 04 00	 ret	 4
$LN6@GetItem:
  00415	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00418	83 c8 ff	 or	 eax, -1
  0041b	5e		 pop	 esi
  0041c	5f		 pop	 edi
  0041d	33 cd		 xor	 ecx, ebp
  0041f	5b		 pop	 ebx
  00420	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00425	8b e5		 mov	 esp, ebp
  00427	5d		 pop	 ebp
  00428	c2 04 00	 ret	 4
?GetItem@CCashLotterySystem@@QAEHPAVCItem@@@Z ENDP	; CCashLotterySystem::GetItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z
_TEXT	SEGMENT
_iItemCategory$ = 8					; size = 4
_iItemType$ = 12					; size = 4
_iItemIndex$ = 16					; size = 4
_iItemLevelMin$ = 20					; size = 4
_iItemLevelMax$ = 24					; size = 4
_iSkillOption$ = 28					; size = 4
_iLuckOption$ = 32					; size = 4
_iAddOption$ = 36					; size = 4
_iExOption$ = 40					; size = 4
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z PROC	; CCashLotterySystem::InsertItem, COMDAT
; _this$ = ecx

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 232  : 	if ( iItemCategory < 0 || iItemCategory > MAX_LOTTERY_ITEM_CATEGORY )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _iItemCategory$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	83 ff 17	 cmp	 edi, 23			; 00000017H
  0000d	0f 87 a2 00 00
	00		 ja	 $LN3@InsertItem

; 234  : 
; 235  : 	int iItemCount = this->LotteryItemListCount[iItemCategory];

  00013	8b 4c be 3c	 mov	 ecx, DWORD PTR [esi+edi*4+60]

; 236  : 
; 237  : 	if ( iItemCount < 0 || iItemCount > MAX_LOTTERY_ITEM_COUNT )

  00017	81 f9 82 00 00
	00		 cmp	 ecx, 130		; 00000082H
  0001d	0f 87 92 00 00
	00		 ja	 $LN3@InsertItem

; 238  : 		return FALSE;
; 239  : 
; 240  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemType = iItemType;

  00023	69 c7 82 00 00
	00		 imul	 eax, edi, 130
  00029	53		 push	 ebx
  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR _iItemType$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00032	8d 14 46	 lea	 edx, DWORD PTR [esi+eax*2]

; 241  : 	this->LotteryItemList[iItemCategory][iItemCount].wItemIndex = iItemIndex;

  00035	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  00038	88 9a 0a 02 00
	00		 mov	 BYTE PTR [edx+522], bl
  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _iItemIndex$[ebp]
  00041	66 89 8c 46 08
	02 00 00	 mov	 WORD PTR [esi+eax*2+520], cx

; 242  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMin = iItemLevelMin;

  00049	8a 45 14	 mov	 al, BYTE PTR _iItemLevelMin$[ebp]
  0004c	88 82 0b 02 00
	00		 mov	 BYTE PTR [edx+523], al

; 243  : 	this->LotteryItemList[iItemCategory][iItemCount].btItemLevelMax = iItemLevelMax;

  00052	8a 45 18	 mov	 al, BYTE PTR _iItemLevelMax$[ebp]
  00055	88 82 0c 02 00
	00		 mov	 BYTE PTR [edx+524], al

; 244  : 	this->LotteryItemList[iItemCategory][iItemCount].btSkillOption = iSkillOption;

  0005b	8a 45 1c	 mov	 al, BYTE PTR _iSkillOption$[ebp]
  0005e	88 82 0d 02 00
	00		 mov	 BYTE PTR [edx+525], al

; 245  : 	this->LotteryItemList[iItemCategory][iItemCount].btLuckOption = iLuckOption;

  00064	8a 45 20	 mov	 al, BYTE PTR _iLuckOption$[ebp]
  00067	88 82 0e 02 00
	00		 mov	 BYTE PTR [edx+526], al

; 246  : 	this->LotteryItemList[iItemCategory][iItemCount].btAddOption = iAddOption;

  0006d	8a 45 24	 mov	 al, BYTE PTR _iAddOption$[ebp]
  00070	88 82 0f 02 00
	00		 mov	 BYTE PTR [edx+527], al

; 247  : 	this->LotteryItemList[iItemCategory][iItemCount].btExOption = iExOption;

  00076	8a 45 28	 mov	 al, BYTE PTR _iExOption$[ebp]

; 248  : 
; 249  : 	int iItemCode = 0;
; 250  : 	int iItemHeight = 0;
; 251  : 	int iItemWidth = 0;
; 252  : 
; 253  : 	iItemCode = ITEMGET(iItemType, iItemIndex);

  00079	c1 e3 09	 shl	 ebx, 9
  0007c	03 d9		 add	 ebx, ecx
  0007e	88 82 10 02 00
	00		 mov	 BYTE PTR [edx+528], al

; 254  : 	iItemHeight = ItemAttribute[iItemCode].Height;

  00084	6b c3 70	 imul	 eax, ebx, 112
  00087	5b		 pop	 ebx
  00088	0f b6 88 24 00
	00 00		 movzx	 ecx, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+36]

; 255  : 	iItemWidth = ItemAttribute[iItemCode].Width;

  0008f	0f b6 80 23 00
	00 00		 movzx	 eax, BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+35]

; 256  : 
; 257  : 	if ( iItemWidth > this->iItemMaxWidth )

  00096	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  00099	7e 03		 jle	 SHORT $LN6@InsertItem

; 258  : 		this->iItemMaxWidth = iItemWidth;

  0009b	89 46 38	 mov	 DWORD PTR [esi+56], eax
$LN6@InsertItem:

; 259  : 
; 260  : 	if ( iItemHeight > this->iItemMaxHeight )

  0009e	3b 4e 34	 cmp	 ecx, DWORD PTR [esi+52]
  000a1	7e 03		 jle	 SHORT $LN7@InsertItem

; 261  : 		this->iItemMaxHeight = iItemHeight;

  000a3	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
$LN7@InsertItem:

; 262  : 
; 263  : 	this->LotteryItemListCount[iItemCategory]++;

  000a6	ff 44 be 3c	 inc	 DWORD PTR [esi+edi*4+60]

; 264  : 
; 265  : 	return TRUE;

  000aa	b8 01 00 00 00	 mov	 eax, 1
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi

; 266  : }

  000b1	5d		 pop	 ebp
  000b2	c2 24 00	 ret	 36			; 00000024H
$LN3@InsertItem:
  000b5	5f		 pop	 edi

; 233  : 		return FALSE;

  000b6	33 c0		 xor	 eax, eax
  000b8	5e		 pop	 esi

; 266  : }

  000b9	5d		 pop	 ebp
  000ba	c2 24 00	 ret	 36			; 00000024H
?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ENDP	; CCashLotterySystem::InsertItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z
_TEXT	SEGMENT
_iCategory$ = 8						; size = 4
_iDropRate$ = 12					; size = 4
_iSkillOptionRate$ = 16					; size = 4
_iLuckOptionRate$ = 20					; size = 4
_iAddOptionRate$ = 24					; size = 4
_iExOptionRate$ = 28					; size = 4
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z PROC	; CCashLotterySystem::SetitemDropRate, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 219  : 	this->CategoryRandomPool.AddValue(iCategory, iDropRate);

  00004	8b 75 08	 mov	 esi, DWORD PTR _iCategory$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR _iDropRate$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	56		 push	 esi
  0000e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00011	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 220  : 
; 221  : 	this->LotteryItemOptionRate[iCategory].iSkillOptionRate = iSkillOptionRate;

  00016	8b 45 10	 mov	 eax, DWORD PTR _iSkillOptionRate$[ebp]

; 222  : 	this->LotteryItemOptionRate[iCategory].iLuckOptionRate = iLuckOptionRate;
; 223  : 	this->LotteryItemOptionRate[iCategory].iAddOptionRate = iAddOptionRate;

  00019	8d 4e 0a	 lea	 ecx, DWORD PTR [esi+10]
  0001c	8b d6		 mov	 edx, esi
  0001e	03 d2		 add	 edx, edx
  00020	03 c9		 add	 ecx, ecx
  00022	89 84 d7 98 00
	00 00		 mov	 DWORD PTR [edi+edx*8+152], eax
  00029	8b 45 14	 mov	 eax, DWORD PTR _iLuckOptionRate$[ebp]
  0002c	89 84 d7 9c 00
	00 00		 mov	 DWORD PTR [edi+edx*8+156], eax
  00033	8b 45 18	 mov	 eax, DWORD PTR _iAddOptionRate$[ebp]
  00036	89 04 cf	 mov	 DWORD PTR [edi+ecx*8], eax

; 224  : 	this->LotteryItemOptionRate[iCategory].iExOptionRate = iExOptionRate;

  00039	8b 45 1c	 mov	 eax, DWORD PTR _iExOptionRate$[ebp]
  0003c	89 84 d7 a4 00
	00 00		 mov	 DWORD PTR [edi+edx*8+164], eax
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 225  : }

  00045	5d		 pop	 ebp
  00046	c2 18 00	 ret	 24			; 00000018H
?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ENDP	; CCashLotterySystem::SetitemDropRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?Load@CCashLotterySystem@@QAEXPAD@Z
_TEXT	SEGMENT
_iItemType$1$ = -20					; size = 4
_iItemIndex$1$ = -16					; size = 4
_iItemLevelMax$1$ = -12					; size = 4
_iCategory$1$ = -12					; size = 4
_iItemLevelMin$1$ = -8					; size = 4
_iDropRate$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_iType$1$ = 8						; size = 4
_pchFilename$ = 8					; size = 4
?Load@CCashLotterySystem@@QAEXPAD@Z PROC		; CCashLotterySystem::Load, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 67   : 	this->Initialize();

  0000d	e8 00 00 00 00	 call	 ?Initialize@CCashLotterySystem@@QAEXXZ ; CCashLotterySystem::Initialize

; 68   : 
; 69   : 	SMDToken Token;
; 70   : 	SMDFile = fopen(pchFilename, "r");

  00012	8b 75 08	 mov	 esi, DWORD PTR _pchFilename$[ebp]
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _fopen
  00020	83 c4 08	 add	 esp, 8
  00023	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 71   : 
; 72   : 	if ( SMDFile == NULL )

  00028	85 c0		 test	 eax, eax
  0002a	75 16		 jne	 SHORT $LN6@Load

; 73   : 	{
; 74   : 		MsgBox("[CashLoterrySystem] Lottery Item List load failed. [%s]", pchFilename);

  0002c	56		 push	 esi
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@FFHDKPFK@?$FLCashLoterrySystem?$FN?5Lottery?5Item@
  00032	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00037	83 c4 08	 add	 esp, 8
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 211  : 
; 212  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@Load:

; 75   : 		return;
; 76   : 	}
; 77   : 
; 78   : 	int iType = 0;
; 79   : 	int iCategory = 0;
; 80   : 	int iDropRate = 0;
; 81   : 	int iSkillOptionRate = 0;
; 82   : 	int iLuckOptionRate = 0;
; 83   : 	int iAddOptionRate = 0;
; 84   : 	int iExOptionRate = 0;
; 85   : 	int iItemAddOption = 0;
; 86   : 	int iItemAddOptionRate = 0;
; 87   : 	int iItemExOption = 0;
; 88   : 	int iItemExOptionRate = 0;
; 89   : 	int iItemType = 0;
; 90   : 	int iItemIndex = 0;
; 91   : 	int iItemLevelMin = 0;
; 92   : 	int iItemLevelMax = 0;
; 93   : 	int iSkillOption = 0;
; 94   : 	int iLuckOption = 0;
; 95   : 	int iAddOption = 0;
; 96   : 	int iExOption = 0;
; 97   : 
; 98   : 	while ( true )
; 99   : 	{
; 100  : 		Token = (SMDToken)GetToken();

  00042	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 		if (Token == END )

  00047	83 f8 02	 cmp	 eax, 2
  0004a	0f 84 91 02 00
	00		 je	 $LN28@Load
  00050	53		 push	 ebx
  00051	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL2@Load:

; 103  : 		{
; 104  : 			break;
; 105  : 		}
; 106  : 
; 107  : 		iType = (int)TokenNumber;

  00060	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
  00068	89 5d 08	 mov	 DWORD PTR _iType$1$[ebp], ebx

; 108  : 
; 109  : 		while ( true )
; 110  : 		{
; 111  : 			Token = (SMDToken)GetToken();

  0006b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 
; 113  : 			if ( Token == END )

  00070	83 f8 02	 cmp	 eax, 2
  00073	0f 84 59 02 00
	00		 je	 $LN49@Load
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Load:

; 114  : 			{
; 115  : 				break;
; 116  : 			}
; 117  : 
; 118  : 			if ( iType == 0 )

  00080	85 db		 test	 ebx, ebx
  00082	0f 85 a6 00 00
	00		 jne	 $LN9@Load

; 119  : 			{
; 120  : 				if ( strcmp("end", TokenString) == 0 )

  00088	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0008d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL33@Load:
  00092	8a 10		 mov	 dl, BYTE PTR [eax]
  00094	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00096	75 1a		 jne	 SHORT $LN34@Load
  00098	84 d2		 test	 dl, dl
  0009a	74 12		 je	 SHORT $LN35@Load
  0009c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0009f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a2	75 0e		 jne	 SHORT $LN34@Load
  000a4	83 c0 02	 add	 eax, 2
  000a7	83 c1 02	 add	 ecx, 2
  000aa	84 d2		 test	 dl, dl
  000ac	75 e4		 jne	 SHORT $LL33@Load
$LN35@Load:
  000ae	33 c0		 xor	 eax, eax
  000b0	eb 05		 jmp	 SHORT $LN36@Load
$LN34@Load:
  000b2	1b c0		 sbb	 eax, eax
  000b4	83 c8 01	 or	 eax, 1
$LN36@Load:
  000b7	85 c0		 test	 eax, eax
  000b9	0f 84 13 02 00
	00		 je	 $LN49@Load

; 121  : 				{
; 122  : 					break;
; 123  : 				}
; 124  : 
; 125  : 				iCategory = (int)TokenNumber;

  000bf	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c7	89 45 f4	 mov	 DWORD PTR _iCategory$1$[ebp], eax

; 126  : 
; 127  : 				Token = (SMDToken)GetToken();

  000ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 				iDropRate = (int)TokenNumber;

  000cf	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d7	89 45 f8	 mov	 DWORD PTR _iDropRate$1$[ebp], eax

; 129  : 
; 130  : 				Token = (SMDToken)GetToken();

  000da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 				iSkillOptionRate = (int)TokenNumber;

  000df	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 132  : 
; 133  : 				Token = (SMDToken)GetToken();

  000e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 				iLuckOptionRate = (int)TokenNumber;

  000ec	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 135  : 
; 136  : 				Token = (SMDToken)GetToken();

  000f4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 				iAddOptionRate = (int)TokenNumber;

  000f9	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 138  : 
; 139  : 				Token = (SMDToken)GetToken();

  00101	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 				iExOptionRate = (int)TokenNumber;

  00106	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 141  : 
; 142  : 				this->SetitemDropRate(iCategory-3, iDropRate, iSkillOptionRate, iLuckOptionRate, iAddOptionRate, iExOptionRate);

  0010e	50		 push	 eax
  0010f	8b 45 f4	 mov	 eax, DWORD PTR _iCategory$1$[ebp]
  00112	56		 push	 esi
  00113	57		 push	 edi
  00114	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00117	83 c0 fd	 add	 eax, -3			; fffffffdH
  0011a	53		 push	 ebx
  0011b	ff 75 f8	 push	 DWORD PTR _iDropRate$1$[ebp]
  0011e	8b cf		 mov	 ecx, edi
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ?SetitemDropRate@CCashLotterySystem@@QAEXHHHHHH@Z ; CCashLotterySystem::SetitemDropRate

; 143  : 			}
; 144  : 
; 145  : 			if ( iType == 1 )

  00126	8b 5d 08	 mov	 ebx, DWORD PTR _iType$1$[ebp]
  00129	e9 96 01 00 00	 jmp	 $LN16@Load
$LN9@Load:
  0012e	83 fb 01	 cmp	 ebx, 1
  00131	75 5e		 jne	 SHORT $LN11@Load

; 146  : 			{
; 147  : 				if ( strcmp("end", TokenString) == 0 )

  00133	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00138	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0013d	0f 1f 00	 npad	 3
$LL37@Load:
  00140	8a 10		 mov	 dl, BYTE PTR [eax]
  00142	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00144	75 1a		 jne	 SHORT $LN38@Load
  00146	84 d2		 test	 dl, dl
  00148	74 12		 je	 SHORT $LN39@Load
  0014a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0014d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00150	75 0e		 jne	 SHORT $LN38@Load
  00152	83 c0 02	 add	 eax, 2
  00155	83 c1 02	 add	 ecx, 2
  00158	84 d2		 test	 dl, dl
  0015a	75 e4		 jne	 SHORT $LL37@Load
$LN39@Load:
  0015c	33 c0		 xor	 eax, eax
  0015e	eb 05		 jmp	 SHORT $LN40@Load
$LN38@Load:
  00160	1b c0		 sbb	 eax, eax
  00162	83 c8 01	 or	 eax, 1
$LN40@Load:
  00165	85 c0		 test	 eax, eax
  00167	0f 84 65 01 00
	00		 je	 $LN49@Load

; 148  : 				{
; 149  : 					break;
; 150  : 				}
; 151  : 
; 152  : 				iItemAddOption = (int)TokenNumber;

  0016d	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 153  : 
; 154  : 				Token = (SMDToken)GetToken();

  00175	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 155  : 				iItemAddOptionRate = (int)TokenNumber;
; 156  : 
; 157  : 				this->AddOptionRandomPool.AddValue(iItemAddOption, iItemAddOptionRate);

  0017a	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0017d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00185	50		 push	 eax
  00186	56		 push	 esi
  00187	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 158  : 			}
; 159  : 
; 160  : 			if ( iType == 2 )

  0018c	e9 33 01 00 00	 jmp	 $LN16@Load
$LN11@Load:
  00191	83 fb 02	 cmp	 ebx, 2
  00194	75 5b		 jne	 SHORT $LN13@Load

; 161  : 			{
; 162  : 				if ( strcmp("end", TokenString) == 0 )

  00196	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0019b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL41@Load:
  001a0	8a 10		 mov	 dl, BYTE PTR [eax]
  001a2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001a4	75 1a		 jne	 SHORT $LN42@Load
  001a6	84 d2		 test	 dl, dl
  001a8	74 12		 je	 SHORT $LN43@Load
  001aa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001ad	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001b0	75 0e		 jne	 SHORT $LN42@Load
  001b2	83 c0 02	 add	 eax, 2
  001b5	83 c1 02	 add	 ecx, 2
  001b8	84 d2		 test	 dl, dl
  001ba	75 e4		 jne	 SHORT $LL41@Load
$LN43@Load:
  001bc	33 c0		 xor	 eax, eax
  001be	eb 05		 jmp	 SHORT $LN44@Load
$LN42@Load:
  001c0	1b c0		 sbb	 eax, eax
  001c2	83 c8 01	 or	 eax, 1
$LN44@Load:
  001c5	85 c0		 test	 eax, eax
  001c7	0f 84 05 01 00
	00		 je	 $LN49@Load

; 163  : 				{
; 164  : 					break;
; 165  : 				}
; 166  : 
; 167  : 				iItemExOption = (int)TokenNumber;

  001cd	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 168  : 
; 169  : 				Token = (SMDToken)GetToken();

  001d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 				iItemExOptionRate = (int)TokenNumber;
; 171  : 
; 172  : 				this->ExOptionRandomPool.AddValue(iItemExOption, iItemExOptionRate);

  001da	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  001dd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e5	50		 push	 eax
  001e6	56		 push	 esi
  001e7	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue
  001ec	e9 d3 00 00 00	 jmp	 $LN16@Load
$LN13@Load:

; 173  : 			}
; 174  : 			else if ( iType  >= 3 && iType < 20 )

  001f1	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  001f4	83 f8 10	 cmp	 eax, 16			; 00000010H
  001f7	0f 87 c7 00 00
	00		 ja	 $LN16@Load

; 175  : 			{
; 176  : 				if ( strcmp("end", TokenString) == 0 )

  001fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00202	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL45@Load:
  00207	8a 10		 mov	 dl, BYTE PTR [eax]
  00209	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0020b	75 1a		 jne	 SHORT $LN46@Load
  0020d	84 d2		 test	 dl, dl
  0020f	74 12		 je	 SHORT $LN47@Load
  00211	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00214	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00217	75 0e		 jne	 SHORT $LN46@Load
  00219	83 c0 02	 add	 eax, 2
  0021c	83 c1 02	 add	 ecx, 2
  0021f	84 d2		 test	 dl, dl
  00221	75 e4		 jne	 SHORT $LL45@Load
$LN47@Load:
  00223	33 c0		 xor	 eax, eax
  00225	eb 05		 jmp	 SHORT $LN48@Load
$LN46@Load:
  00227	1b c0		 sbb	 eax, eax
  00229	83 c8 01	 or	 eax, 1
$LN48@Load:
  0022c	85 c0		 test	 eax, eax
  0022e	0f 84 9e 00 00
	00		 je	 $LN49@Load

; 177  : 				{
; 178  : 					break;
; 179  : 				}
; 180  : 
; 181  : 				iItemType = (int)TokenNumber;

  00234	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0023c	89 45 ec	 mov	 DWORD PTR _iItemType$1$[ebp], eax

; 182  : 
; 183  : 				Token = (SMDToken)GetToken();

  0023f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 184  : 				iItemIndex = (int)TokenNumber;

  00244	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0024c	89 45 f0	 mov	 DWORD PTR _iItemIndex$1$[ebp], eax

; 185  : 
; 186  : 				Token = (SMDToken)GetToken();

  0024f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 187  : 				iItemLevelMin = (int)TokenNumber;

  00254	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0025c	89 45 f8	 mov	 DWORD PTR _iItemLevelMin$1$[ebp], eax

; 188  : 
; 189  : 				Token = (SMDToken)GetToken();

  0025f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 190  : 				iItemLevelMax = (int)TokenNumber;

  00264	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0026c	89 45 f4	 mov	 DWORD PTR _iItemLevelMax$1$[ebp], eax

; 191  : 
; 192  : 				Token = (SMDToken)GetToken();

  0026f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 193  : 				iSkillOption = (int)TokenNumber;

  00274	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 194  : 
; 195  : 				Token = (SMDToken)GetToken();

  0027c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 196  : 				iLuckOption = (int)TokenNumber;

  00281	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 197  : 
; 198  : 				Token = (SMDToken)GetToken();

  00289	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 199  : 				iAddOption = (int)TokenNumber;

  0028e	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 200  : 
; 201  : 				Token = (SMDToken)GetToken();

  00296	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 202  : 				iExOption = (int)TokenNumber;

  0029b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 203  : 
; 204  : 				this->InsertItem(iType-3, iItemType, iItemIndex, iItemLevelMin, iItemLevelMax, iSkillOption, iLuckOption, iAddOption, iExOption);

  002a3	50		 push	 eax
  002a4	56		 push	 esi
  002a5	57		 push	 edi
  002a6	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  002a9	8b cf		 mov	 ecx, edi
  002ab	53		 push	 ebx
  002ac	ff 75 f4	 push	 DWORD PTR _iItemLevelMax$1$[ebp]
  002af	8b 5d 08	 mov	 ebx, DWORD PTR _iType$1$[ebp]
  002b2	ff 75 f8	 push	 DWORD PTR _iItemLevelMin$1$[ebp]
  002b5	ff 75 f0	 push	 DWORD PTR _iItemIndex$1$[ebp]
  002b8	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]
  002bb	ff 75 ec	 push	 DWORD PTR _iItemType$1$[ebp]
  002be	50		 push	 eax
  002bf	e8 00 00 00 00	 call	 ?InsertItem@CCashLotterySystem@@QAEHHHHHHHHHH@Z ; CCashLotterySystem::InsertItem
$LN16@Load:

; 112  : 
; 113  : 			if ( Token == END )

  002c4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  002c9	83 f8 02	 cmp	 eax, 2
  002cc	0f 85 ae fd ff
	ff		 jne	 $LL4@Load
$LN49@Load:

; 75   : 		return;
; 76   : 	}
; 77   : 
; 78   : 	int iType = 0;
; 79   : 	int iCategory = 0;
; 80   : 	int iDropRate = 0;
; 81   : 	int iSkillOptionRate = 0;
; 82   : 	int iLuckOptionRate = 0;
; 83   : 	int iAddOptionRate = 0;
; 84   : 	int iExOptionRate = 0;
; 85   : 	int iItemAddOption = 0;
; 86   : 	int iItemAddOptionRate = 0;
; 87   : 	int iItemExOption = 0;
; 88   : 	int iItemExOptionRate = 0;
; 89   : 	int iItemType = 0;
; 90   : 	int iItemIndex = 0;
; 91   : 	int iItemLevelMin = 0;
; 92   : 	int iItemLevelMax = 0;
; 93   : 	int iSkillOption = 0;
; 94   : 	int iLuckOption = 0;
; 95   : 	int iAddOption = 0;
; 96   : 	int iExOption = 0;
; 97   : 
; 98   : 	while ( true )
; 99   : 	{
; 100  : 		Token = (SMDToken)GetToken();

  002d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 		if (Token == END )

  002d7	83 f8 02	 cmp	 eax, 2
  002da	0f 85 80 fd ff
	ff		 jne	 $LL2@Load
  002e0	5b		 pop	 ebx
$LN28@Load:

; 205  : 			}
; 206  : 		}
; 207  : 
; 208  : 	}
; 209  : 
; 210  : 	fclose(SMDFile);

  002e1	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  002e7	e8 00 00 00 00	 call	 _fclose
  002ec	83 c4 04	 add	 esp, 4
  002ef	5f		 pop	 edi
  002f0	5e		 pop	 esi

; 211  : 
; 212  : }

  002f1	8b e5		 mov	 esp, ebp
  002f3	5d		 pop	 ebp
  002f4	c2 04 00	 ret	 4
?Load@CCashLotterySystem@@QAEXPAD@Z ENDP		; CCashLotterySystem::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?Initialize@CCashLotterySystem@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CCashLotterySystem@@QAEXXZ PROC		; CCashLotterySystem::Initialize, COMDAT
; _this$ = ecx

; 30   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 31   : 	int i;
; 32   : 	for ( i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  00004	be 17 00 00 00	 mov	 esi, 23			; 00000017H
  00009	8d 87 9c 00 00
	00		 lea	 eax, DWORD PTR [edi+156]
  0000f	8d 57 3c	 lea	 edx, DWORD PTR [edi+60]
  00012	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL4@Initialize:

; 33   : 	{
; 34   : 		this->LotteryItemListCount[i] = 0;

  00020	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00026	8d 52 04	 lea	 edx, DWORD PTR [edx+4]

; 35   : 		this->LotteryItemOptionRate[i].iSkillOptionRate = 0;

  00029	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00030	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 36   : 		this->LotteryItemOptionRate[i].iLuckOptionRate = 0;

  00033	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 37   : 		this->LotteryItemOptionRate[i].iAddOptionRate = 0;

  0003a	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 38   : 		this->LotteryItemOptionRate[i].iExOptionRate =0 ;

  00041	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0
  00048	83 ee 01	 sub	 esi, 1
  0004b	75 d3		 jne	 SHORT $LL4@Initialize

; 39   : 	}
; 40   : 
; 41   : 	for (i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  0004d	8d 87 0b 02 00
	00		 lea	 eax, DWORD PTR [edi+523]
  00053	8d 56 17	 lea	 edx, DWORD PTR [esi+23]
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@Initialize:

; 42   : 	{
; 43   : 		for ( int j=0;j<MAX_LOTTERY_ITEM_COUNT;j++)

  00060	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00065	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL10@Initialize:

; 44   : 		{
; 45   : 			this->LotteryItemList[i][j].btItemType = -1;
; 46   : 			this->LotteryItemList[i][j].wItemIndex = -1;

  00070	c7 40 fd ff ff
	ff ff		 mov	 DWORD PTR [eax-3], -1

; 47   : 			this->LotteryItemList[i][j].btItemLevelMin = -1;
; 48   : 			this->LotteryItemList[i][j].btItemLevelMax = -1;

  00077	c7 40 01 ff ff
	ff ff		 mov	 DWORD PTR [eax+1], -1

; 49   : 			this->LotteryItemList[i][j].btSkillOption = -1;
; 50   : 			this->LotteryItemList[i][j].btLuckOption = -1;
; 51   : 			this->LotteryItemList[i][j].btAddOption = -1;
; 52   : 			this->LotteryItemList[i][j].btExOption = -1;

  0007e	c6 40 05 ff	 mov	 BYTE PTR [eax+5], 255	; 000000ffH
  00082	83 c0 0a	 add	 eax, 10			; 0000000aH
  00085	83 e9 01	 sub	 ecx, 1
  00088	75 e6		 jne	 SHORT $LL10@Initialize

; 39   : 	}
; 40   : 
; 41   : 	for (i=0;i<MAX_LOTTERY_ITEM_CATEGORY;i++)

  0008a	83 ea 01	 sub	 edx, 1
  0008d	75 d1		 jne	 SHORT $LL7@Initialize

; 53   : 		}
; 54   : 	}
; 55   : 
; 56   : 	this->CategoryRandomPool.InitPool();

  0008f	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00092	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 57   : 	this->AddOptionRandomPool.InitPool();

  00097	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0009a	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 58   : 	this->ExOptionRandomPool.InitPool();

  0009f	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  000a2	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 59   : 	this->iItemMaxHeight = 0;

  000a7	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 60   : 	this->iItemMaxWidth = 0;

  000ae	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi

; 61   : }

  000b7	c3		 ret	 0
?Initialize@CCashLotterySystem@@QAEXXZ ENDP		; CCashLotterySystem::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??1CCashLotterySystem@@UAE@XZ
_TEXT	SEGMENT
??1CCashLotterySystem@@UAE@XZ PROC			; CCashLotterySystem::~CCashLotterySystem, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 25   : 	return;
; 26   : }

  00003	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCashLotterySystem@@6B@
  0000c	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00011	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00014	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00019	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0001c	5e		 pop	 esi
  0001d	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
??1CCashLotterySystem@@UAE@XZ ENDP			; CCashLotterySystem::~CCashLotterySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ??0CCashLotterySystem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCashLotterySystem@@QAE@XZ PROC			; CCashLotterySystem::CCashLotterySystem, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCashLotterySystem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCashLotterySystem@@6B@
  00032	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00037	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00046	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00049	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004d	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr

; 20   : 	return;
; 21   : }

  00052	8b c6		 mov	 eax, esi
  00054	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00057	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005e	59		 pop	 ecx
  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CCashLotterySystem@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CCashLotterySystem@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCashLotterySystem@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCashLotterySystem@@QAE@XZ ENDP			; CCashLotterySystem::CCashLotterySystem
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cashlotterysystem.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
