; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MuRummy.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bMuRummyEventOn@@3HA				; g_bMuRummyEventOn
PUBLIC	?g_MuRummyEventDBLog@@3HA			; g_MuRummyEventDBLog
_BSS	SEGMENT
?g_MuRummyEventDBLog@@3HA DD 01H DUP (?)		; g_MuRummyEventDBLog
_BSS	ENDS
_DATA	SEGMENT
?g_bMuRummyEventOn@@3HA DD 01H				; g_bMuRummyEventOn
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??0_tagMuRummyCardInfoDS@@QAE@XZ		; _tagMuRummyCardInfoDS::_tagMuRummyCardInfoDS
PUBLIC	??0_tagMuRummyCardUpdateDS@@QAE@XZ		; _tagMuRummyCardUpdateDS::_tagMuRummyCardUpdateDS
PUBLIC	??0_tagPMSG_REQ_MURUMMY_INSERT_DS@@QAE@XZ	; _tagPMSG_REQ_MURUMMY_INSERT_DS::_tagPMSG_REQ_MURUMMY_INSERT_DS
PUBLIC	??0_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS@@QAE@XZ	; _tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS::_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CMuRummyCardInfo@@QAE@XZ			; CMuRummyCardInfo::CMuRummyCardInfo
PUBLIC	??1CMuRummyCardInfo@@QAE@XZ			; CMuRummyCardInfo::~CMuRummyCardInfo
PUBLIC	??_ECMuRummyCardInfo@@QAEPAXI@Z			; CMuRummyCardInfo::`vector deleting destructor'
PUBLIC	??0CMuRummyInfo@@QAE@XZ				; CMuRummyInfo::CMuRummyInfo
PUBLIC	??1CMuRummyInfo@@UAE@XZ				; CMuRummyInfo::~CMuRummyInfo
PUBLIC	?Init@CMuRummyInfo@@QAEXXZ			; CMuRummyInfo::Init
PUBLIC	?Release@CMuRummyInfo@@QAEXXZ			; CMuRummyInfo::Release
PUBLIC	?Clear@CMuRummyInfo@@QAEXXZ			; CMuRummyInfo::Clear
PUBLIC	?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
PUBLIC	?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ	; CMuRummyInfo::GetSlotIndexInfo
PUBLIC	??_GCMuRummyInfo@@UAEPAXI@Z			; CMuRummyInfo::`scalar deleting destructor'
PUBLIC	??0CMuRummyMng@@QAE@XZ				; CMuRummyMng::CMuRummyMng
PUBLIC	??1CMuRummyMng@@QAE@XZ				; CMuRummyMng::~CMuRummyMng
PUBLIC	?LoadPreFixData@CMuRummyMng@@QAEXPAD@Z		; CMuRummyMng::LoadPreFixData
PUBLIC	?ProbabilityLoadData@CMuRummyMng@@QAEXXZ	; CMuRummyMng::ProbabilityLoadData
PUBLIC	?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ		; CMuRummyMng::IsMuRummyEventOn
PUBLIC	?GetRewardScore1@CMuRummyMng@@QAEHXZ		; CMuRummyMng::GetRewardScore1
PUBLIC	?GetRewardScore2@CMuRummyMng@@QAEHXZ		; CMuRummyMng::GetRewardScore2
PUBLIC	?SetCardDeck@CMuRummyMng@@QAEXPAVCMuRummyInfo@@@Z ; CMuRummyMng::SetCardDeck
PUBLIC	?CardShuffle@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::CardShuffle
PUBLIC	?SetPlayCardInfo@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@@Z ; CMuRummyMng::SetPlayCardInfo
PUBLIC	?GetTempCardShowSlot@CMuRummyMng@@QAEEPAE@Z	; CMuRummyMng::GetTempCardShowSlot
PUBLIC	?CardSlotMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@HHPAVCMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::CardSlotMove
PUBLIC	?CardSlotReMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@H@Z ; CMuRummyMng::CardSlotReMove
PUBLIC	?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::CardMatchCheck
PUBLIC	?CardSortAscending@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::CardSortAscending
PUBLIC	?IsCardSameColor@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::IsCardSameColor
PUBLIC	?IsCardNumber@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::IsCardNumber
PUBLIC	?FillEmptySlotCard@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::FillEmptySlotCard
PUBLIC	?CGReqMuRummyEventOpen@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_EVENT_OPEN@@H@Z ; CMuRummyMng::CGReqMuRummyEventOpen
PUBLIC	?CGReqMuRummyStart@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_INFO@@H@Z ; CMuRummyMng::CGReqMuRummyStart
PUBLIC	?CGReqCardReveal@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_REVEAL_CARD@@H@Z ; CMuRummyMng::CGReqCardReveal
PUBLIC	?CGReqCardMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MOVE@@H@Z ; CMuRummyMng::CGReqCardMove
PUBLIC	?CGReqCardReMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_REMOVE@@H@Z ; CMuRummyMng::CGReqCardReMove
PUBLIC	?CGReqCardMatch@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MATCH@@H@Z ; CMuRummyMng::CGReqCardMatch
PUBLIC	?CGReqMuRummyEnd@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_END@@H@Z ; CMuRummyMng::CGReqMuRummyEnd
PUBLIC	?GCSendCardList@CMuRummyMng@@QAEXH@Z		; CMuRummyMng::GCSendCardList
PUBLIC	?GCSendMsg@CMuRummyMng@@QAEXHEH@Z		; CMuRummyMng::GCSendMsg
PUBLIC	?GDReqCardInfo@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqCardInfo
PUBLIC	?GDAnsCardInfo@CMuRummyMng@@QAEXPAU_tagPMSG_ANS_MURUMMY_SELECT_DS@@@Z ; CMuRummyMng::GDAnsCardInfo
PUBLIC	?GDReqCardInfoInsert@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqCardInfoInsert
PUBLIC	?GDReqCardInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@PAVCMuRummyCardInfo@@H@Z ; CMuRummyMng::GDReqCardInfoUpdate
PUBLIC	?GDReqScoreUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@GPAU_tagMuRummyCardUpdateDS@@@Z ; CMuRummyMng::GDReqScoreUpdate
PUBLIC	?GDReqScoreDelete@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqScoreDelete
PUBLIC	?GDReqSlotInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@EEE@Z ; CMuRummyMng::GDReqSlotInfoUpdate
PUBLIC	?GDReqMuRummyInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqMuRummyInfoUpdate
PUBLIC	?GDReqMuRummyDBLog@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::GDReqMuRummyDBLog
PUBLIC	?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z	; CMuRummyMng::Slot5Log
PUBLIC	?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z	; CMuRummyMng::Slot3Log
PUBLIC	?GetColorName@CMuRummyMng@@QAEDH@Z		; CMuRummyMng::GetColorName
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CMuRummyInfo@@6B@				; CMuRummyInfo::`vftable'
PUBLIC	?g_CMuRummyMng@@3VCMuRummyMng@@A		; g_CMuRummyMng
PUBLIC	??_C@_0BE@JCGEADCM@MuRummyEventEndYear?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BF@BBHHNNIH@MuRummyEventEndMonth?$AA@	; `string'
PUBLIC	??_C@_0BD@CPOHBIBL@MuRummyEventEndDay?$AA@	; `string'
PUBLIC	??_C@_0BE@LLHGFGNG@MuRummyEventEndHour?$AA@	; `string'
PUBLIC	??_C@_0BG@BAJOCANA@MuRummyEventEndMinute?$AA@	; `string'
PUBLIC	??_C@_0BE@IKICMDFH@MuRummyRewardScore1?$AA@	; `string'
PUBLIC	??_C@_0BE@KBKPJAJE@MuRummyRewardScore2?$AA@	; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	??_C@_0CL@DOFHGMJA@?$FLCommonSever?4cfg?$FN?5Check?5MuRummyR@ ; `string'
PUBLIC	??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@		; `string'
PUBLIC	??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ ; `string'
PUBLIC	??_C@_0DB@NJNPCKOH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ ; `string'
PUBLIC	??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ ; `string'
PUBLIC	??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ ; `string'
PUBLIC	??_C@_0CN@JPECPFKG@?$FLMuRummy?$FN?$FLError?$FN?5slot?5Not?5Empty?5@ ; `string'
PUBLIC	??_C@_0EC@HECGBNNH@?$FLMuRummy?$FN?$FLError?$FN?5CardInfo?5Index?5@ ; `string'
PUBLIC	??_C@_0DD@GJGCJJOC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Mov@ ; `string'
PUBLIC	??_C@_0DD@NFDLMECF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Mov@ ; `string'
PUBLIC	??_C@_0DH@CAEIJHPO@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@ ; `string'
PUBLIC	??_C@_0DH@GBIOFBI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@ ; `string'
PUBLIC	??_C@_0DK@DBIEBIMK@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ ; `string'
PUBLIC	??_C@_0DO@PFNOAPLF@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ ; `string'
PUBLIC	??_C@_0DF@OMEGHBAF@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5is?5Empty?5S@ ; `string'
PUBLIC	??_C@_0CI@HPEAMECE@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5Num?5diff?5?$FL@ ; `string'
PUBLIC	??_C@_0EK@CMFPDAGG@?$FLMuRummy?$FN?$FLError?$FN?5Combine?5CardInf@ ; `string'
PUBLIC	??_C@_0CN@LMGDIHHF@?$FLMuRummy?$FN?$FLError?$FN?5Card?5Cnt?5Over?5?$FL@ ; `string'
PUBLIC	??_C@_0CM@OCPFDBGL@?$FLMuRummy?$FN?$FLError?$FN?5CardDeck?5cnt?5?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CP@ICHPCBKA@?$FLMuRummy?$FN?$FLError?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5@ ; `string'
PUBLIC	??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@ ; `string'
PUBLIC	??_C@_0DK@GDGLDHIM@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@ ; `string'
PUBLIC	??_C@_0CE@CNODDPGG@?$FLMuRummy?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5Mini?5Game?5O@ ; `string'
PUBLIC	??_C@_0CI@CLFNHPNA@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@ ; `string'
PUBLIC	??_C@_0DB@OBNLPGAF@?$FLMuRummy?$FN?$FLError?$FN?5IsMuRummyInfoLo@ ; `string'
PUBLIC	??_C@_0BO@EJENEIOG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Open?$AA@ ; `string'
PUBLIC	??_C@_0CG@EKIKJFIH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@ ; `string'
PUBLIC	??_C@_0CD@KPMIGCPB@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Point?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CP@IKDBJHNO@?$FLMuRummy?$FN?$FLError?$FN?5SetPlayCardInfo@ ; `string'
PUBLIC	??_C@_0BP@BJLJBPJE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Start?$AA@ ; `string'
PUBLIC	??_C@_0CL@FAFIGCF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@ ; `string'
PUBLIC	??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@ ; `string'
PUBLIC	??_C@_0DL@POJPEBAK@?$FLMuRummy?$FN?$FLError?$FN?5dump?5fail?5Slot?5@ ; `string'
PUBLIC	??_C@_0CK@GFMCEJJH@?$FLMuRummy?$FN?$FLError?$FN?5dump?5Card?5fail?5@ ; `string'
PUBLIC	??_C@_0DD@GPAJNGEE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Jun@ ; `string'
PUBLIC	??_C@_0CK@HGICILBL@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@ ; `string'
PUBLIC	??_C@_0EB@FBJCEGJG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@ ; `string'
PUBLIC	??_C@_0DJ@GLGFEGIJ@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@ ; `string'
PUBLIC	??_C@_0CJ@JDGPLMFF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ ; `string'
PUBLIC	??_C@_0CJ@JCKNNGGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ ; `string'
PUBLIC	??_C@_0EE@HBKLNCHG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ ; `string'
PUBLIC	??_C@_0BN@EOCJBHNI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5end?$AA@ ; `string'
PUBLIC	??_C@_0DB@JJKKLNEH@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@ ; `string'
PUBLIC	??_C@_0EE@MDHKGPNB@?$FLMuRummy?$FN?5MuRummy?5Card?5Info?5Load@ ; `string'
PUBLIC	??_C@_0DC@IGBMHAPK@?$FLMuRummy?$FN?$FLError?$FN?5btSlotNum?$FL?$CFd?$FN?5?5@ ; `string'
PUBLIC	??_C@_0DH@MKDFIBOM@?$FLMuRummy?$FN?5MuRummy?5Info?5Save?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
PUBLIC	??_C@_06BMLDIMJA@?$CFc?$CI?$CFd?$CJ?$AA@	; `string'
PUBLIC	??_C@_02BMCALKD@?5?0?$AA@			; `string'
PUBLIC	??_C@_0DE@GBNFGKLM@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@ ; `string'
PUBLIC	??_C@_0CE@LIDLBALE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5?$FL?5?$CF@ ; `string'
PUBLIC	??_C@_0DE@GEGJGEPC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@ ; `string'
PUBLIC	??_C@_0CE@FHAGLFFE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5?$FL?5?$CF@ ; `string'
PUBLIC	??_R4CMuRummyInfo@@6B@				; CMuRummyInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMuRummyInfo@@@8			; CMuRummyInfo `RTTI Type Descriptor'
PUBLIC	??_R3CMuRummyInfo@@8				; CMuRummyInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMuRummyInfo@@8				; CMuRummyInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMuRummyInfo@@8			; CMuRummyInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z:PROC ; CheckInventoryEmptySpace
EXTRN	?gObjCheckMaxZen@@YAHHH@Z:PROC			; gObjCheckMaxZen
EXTRN	??_ECMuRummyInfo@@UAEPAXI@Z:PROC		; CMuRummyInfo::`vector deleting destructor'
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_CMuRummyMng@@3VCMuRummyMng@@A DB 018H DUP (?)	; g_CMuRummyMng
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CMuRummyMng$initializer$@@3P6AXXZA DD FLAT:??__Eg_CMuRummyMng@@YAXXZ ; g_CMuRummyMng$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMuRummyInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMuRummyInfo@@8 DD FLAT:??_R0?AVCMuRummyInfo@@@8 ; CMuRummyInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMuRummyInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CMuRummyInfo@@8
rdata$r	SEGMENT
??_R2CMuRummyInfo@@8 DD FLAT:??_R1A@?0A@EA@CMuRummyInfo@@8 ; CMuRummyInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMuRummyInfo@@8
rdata$r	SEGMENT
??_R3CMuRummyInfo@@8 DD 00H				; CMuRummyInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMuRummyInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMuRummyInfo@@@8
data$r	SEGMENT
??_R0?AVCMuRummyInfo@@@8 DD FLAT:??_7type_info@@6B@	; CMuRummyInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMuRummyInfo@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMuRummyInfo@@6B@
rdata$r	SEGMENT
??_R4CMuRummyInfo@@6B@ DD 00H				; CMuRummyInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMuRummyInfo@@@8
	DD	FLAT:??_R3CMuRummyInfo@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CE@FHAGLFFE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5?$FL?5?$CF@
CONST	SEGMENT
??_C@_0CE@FHAGLFFE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5?$FL?5?$CF@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - [ %s ]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GEGJGEPC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@
CONST	SEGMENT
??_C@_0DE@GEGJGEPC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - Register Result [ %s ]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LIDLBALE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5?$FL?5?$CF@
CONST	SEGMENT
??_C@_0CE@LIDLBALE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5?$FL?5?$CF@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[5] - [ %s ]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GBNFGKLM@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@
CONST	SEGMENT
??_C@_0DE@GBNFGKLM@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[5] - Register Result [ %s ]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMCALKD@?5?0?$AA@
CONST	SEGMENT
??_C@_02BMCALKD@?5?0?$AA@ DB ' ,', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMLDIMJA@?$CFc?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_06BMLDIMJA@?$CFc?$CI?$CFd?$CJ?$AA@ DB '%c(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MKDFIBOM@?$FLMuRummy?$FN?5MuRummy?5Info?5Save?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DH@MKDFIBOM@?$FLMuRummy?$FN?5MuRummy?5Info?5Save?5?$FL?$CFs?$FN@ DB '['
	DB	'MuRummy] MuRummy Info Save [%s][%s] [%d][%c][%d][%d] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IGBMHAPK@?$FLMuRummy?$FN?$FLError?$FN?5btSlotNum?$FL?$CFd?$FN?5?5@
CONST	SEGMENT
??_C@_0DC@IGBMHAPK@?$FLMuRummy?$FN?$FLError?$FN?5btSlotNum?$FL?$CFd?$FN?5?5@ DB '['
	DB	'MuRummy][Error] btSlotNum[%d]  [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MDHKGPNB@?$FLMuRummy?$FN?5MuRummy?5Card?5Info?5Load@
CONST	SEGMENT
??_C@_0EE@MDHKGPNB@?$FLMuRummy?$FN?5MuRummy?5Card?5Info?5Load@ DB '[MuRum'
	DB	'my] MuRummy Card Info Load [%s][%s] Seq:[%d] [%d][%c][%d][%d]'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JJKKLNEH@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@
CONST	SEGMENT
??_C@_0DB@JJKKLNEH@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@ DB '['
	DB	'MuRummy][Error] lpObj is NULL [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EOCJBHNI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5end?$AA@
CONST	SEGMENT
??_C@_0BN@EOCJBHNI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5end?$AA@ DB '['
	DB	'%s][%s][Mu Rummy] Event end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@HBKLNCHG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
CONST	SEGMENT
??_C@_0EE@HBKLNCHG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ DB '['
	DB	'%s][%s][Mu Rummy] Event Reward Result [Point : %d, RewardZen '
	DB	': %d]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JCKNNGGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
CONST	SEGMENT
??_C@_0CJ@JCKNNGGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ DB '['
	DB	'%s][%s][Mu Rummy] Event Reward fail (0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JDGPLMFF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
CONST	SEGMENT
??_C@_0CJ@JDGPLMFF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@ DB '['
	DB	'%s][%s][Mu Rummy] Event Reward fail (1)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GLGFEGIJ@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@
CONST	SEGMENT
??_C@_0DJ@GLGFEGIJ@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@ DB '['
	DB	'MuRummy][DebugLog][%s][%s] Waiting Item Reward(Req End)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@FBJCEGJG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@
CONST	SEGMENT
??_C@_0EB@FBJCEGJG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - Combine Success Gain Point(%d) (%'
	DB	'd)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HGICILBL@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@
CONST	SEGMENT
??_C@_0CK@HGICILBL@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - Combine Fail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GPAJNGEE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Jun@
CONST	SEGMENT
??_C@_0DD@GPAJNGEE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Jun@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[5] - Junk Slot[%d] %c : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GFMCEJJH@?$FLMuRummy?$FN?$FLError?$FN?5dump?5Card?5fail?5@
CONST	SEGMENT
??_C@_0CK@GFMCEJJH@?$FLMuRummy?$FN?$FLError?$FN?5dump?5Card?5fail?5@ DB '['
	DB	'MuRummy][Error] dump Card fail [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@POJPEBAK@?$FLMuRummy?$FN?$FLError?$FN?5dump?5fail?5Slot?5@
CONST	SEGMENT
??_C@_0DL@POJPEBAK@?$FLMuRummy?$FN?$FLError?$FN?5dump?5fail?5Slot?5@ DB '['
	DB	'MuRummy][Error] dump fail Slot Num [%d] [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
CONST	SEGMENT
??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@ DB '[M'
	DB	'uRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FAFIGCF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@
CONST	SEGMENT
??_C@_0CL@FAFIGCF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@ DB '['
	DB	'%s][%s][Mu Rummy] Event Card Cnt(%d) (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BJLJBPJE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Start?$AA@
CONST	SEGMENT
??_C@_0BP@BJLJBPJE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Start?$AA@ DB '['
	DB	'%s][%s][Mu Rummy] Event Start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IKDBJHNO@?$FLMuRummy?$FN?$FLError?$FN?5SetPlayCardInfo@
CONST	SEGMENT
??_C@_0CP@IKDBJHNO@?$FLMuRummy?$FN?$FLError?$FN?5SetPlayCardInfo@ DB '[Mu'
	DB	'Rummy][Error] SetPlayCardInfo fail [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KPMIGCPB@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Point?$CI?$CF@
CONST	SEGMENT
??_C@_0CD@KPMIGCPB@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Point?$CI?$CF@ DB '['
	DB	'%s][%s][Mu Rummy] Event Point(%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EKIKJFIH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@
CONST	SEGMENT
??_C@_0CG@EKIKJFIH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@ DB '['
	DB	'%s][%s][Mu Rummy] Event Card Cnt(%d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EJENEIOG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Open?$AA@
CONST	SEGMENT
??_C@_0BO@EJENEIOG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Open?$AA@ DB '['
	DB	'%s][%s][Mu Rummy] Event Open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OBNLPGAF@?$FLMuRummy?$FN?$FLError?$FN?5IsMuRummyInfoLo@
CONST	SEGMENT
??_C@_0DB@OBNLPGAF@?$FLMuRummy?$FN?$FLError?$FN?5IsMuRummyInfoLo@ DB '[Mu'
	DB	'Rummy][Error] IsMuRummyInfoLoad fail [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CLFNHPNA@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@
CONST	SEGMENT
??_C@_0CI@CLFNHPNA@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@ DB '['
	DB	'MuRummy][Error] lpObj is NULL [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CNODDPGG@?$FLMuRummy?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5Mini?5Game?5O@
CONST	SEGMENT
??_C@_0CE@CNODDPGG@?$FLMuRummy?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5Mini?5Game?5O@ DB '['
	DB	'MuRummy] [%s][%s] : Mini Game Open', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@GDGLDHIM@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@
CONST	SEGMENT
??_C@_0DK@GDGLDHIM@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@ DB '['
	DB	'MuRummy][DebugLog][%s][%s] Waiting Item Reward(Req Open)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
CONST	SEGMENT
??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@ DB '[M'
	DB	'uRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ICHPCBKA@?$FLMuRummy?$FN?$FLError?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5@
CONST	SEGMENT
??_C@_0CP@ICHPCBKA@?$FLMuRummy?$FN?$FLError?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5@ DB '['
	DB	'MuRummy][Error] [%s][%s][%d] : not event ofen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OCPFDBGL@?$FLMuRummy?$FN?$FLError?$FN?5CardDeck?5cnt?5?$FL?$CF@
CONST	SEGMENT
??_C@_0CM@OCPFDBGL@?$FLMuRummy?$FN?$FLError?$FN?5CardDeck?5cnt?5?$FL?$CF@ DB '['
	DB	'MuRummy][Error] CardDeck cnt [%d] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LMGDIHHF@?$FLMuRummy?$FN?$FLError?$FN?5Card?5Cnt?5Over?5?$FL@
CONST	SEGMENT
??_C@_0CN@LMGDIHHF@?$FLMuRummy?$FN?$FLError?$FN?5Card?5Cnt?5Over?5?$FL@ DB '['
	DB	'MuRummy][Error] Card Cnt Over [%d] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@CMFPDAGG@?$FLMuRummy?$FN?$FLError?$FN?5Combine?5CardInf@
CONST	SEGMENT
??_C@_0EK@CMFPDAGG@?$FLMuRummy?$FN?$FLError?$FN?5Combine?5CardInf@ DB '[M'
	DB	'uRummy][Error] Combine CardInfo Index is Overflow [%s][%s][%d'
	DB	'] [%s, %d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HPEAMECE@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5Num?5diff?5?$FL@
CONST	SEGMENT
??_C@_0CI@HPEAMECE@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5Num?5diff?5?$FL@ DB '['
	DB	'MuRummy][Error] Slot Num diff [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OMEGHBAF@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5is?5Empty?5S@
CONST	SEGMENT
??_C@_0DF@OMEGHBAF@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5is?5Empty?5S@ DB '['
	DB	'MuRummy][Error] Slot is Empty SlotNum [%d] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@PFNOAPLF@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
CONST	SEGMENT
??_C@_0DO@PFNOAPLF@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ DB '[M'
	DB	'uRummy][Error] pSlotIndexInfo is NULL SlotNum [%d] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DBIEBIMK@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
CONST	SEGMENT
??_C@_0DK@DBIEBIMK@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ DB '['
	DB	'MuRummy][Error] pCCardInfo is NULL SlotNum [%d] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GBIOFBI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@
CONST	SEGMENT
??_C@_0DH@GBIOFBI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[5] - Register Slot[%d] %c : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CAEIJHPO@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@
CONST	SEGMENT
??_C@_0DH@CAEIJHPO@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - Register Slot[%d] %c : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NFDLMECF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Mov@
CONST	SEGMENT
??_C@_0DD@NFDLMECF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Mov@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[3] - Move Slot[%d] %c : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GJGCJJOC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Mov@
CONST	SEGMENT
??_C@_0DD@GJGCJJOC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Mov@ DB '['
	DB	'%s][%s][Mu Rummy] Slot[5] - Move Slot[%d] %c : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@HECGBNNH@?$FLMuRummy?$FN?$FLError?$FN?5CardInfo?5Index?5@
CONST	SEGMENT
??_C@_0EC@HECGBNNH@?$FLMuRummy?$FN?$FLError?$FN?5CardInfo?5Index?5@ DB '['
	DB	'MuRummy][Error] CardInfo Index is Overflow [%s][%s][%d] [%s, '
	DB	'%d]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JPECPFKG@?$FLMuRummy?$FN?$FLError?$FN?5slot?5Not?5Empty?5@
CONST	SEGMENT
??_C@_0CN@JPECPFKG@?$FLMuRummy?$FN?$FLError?$FN?5slot?5Not?5Empty?5@ DB '['
	DB	'MuRummy][Error] slot Not Empty [%s][%s] %d ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
CONST	SEGMENT
??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ DB '[M'
	DB	'uRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
CONST	SEGMENT
??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ DB '['
	DB	'MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NJNPCKOH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
CONST	SEGMENT
??_C@_0DB@NJNPCKOH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@ DB '[M'
	DB	'uRummy][Error] pSlotIndexInfo is NULL [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
CONST	SEGMENT
??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@ DB '['
	DB	'MuRummy][Error] pCCardInfo is NULL [%s, %d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
CONST	SEGMENT
??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@ DB 'MuRummy.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DOFHGMJA@?$FLCommonSever?4cfg?$FN?5Check?5MuRummyR@
CONST	SEGMENT
??_C@_0CL@DOFHGMJA@?$FLCommonSever?4cfg?$FN?5Check?5MuRummyR@ DB '[Common'
	DB	'Sever.cfg] Check MuRummyRewardScore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KBKPJAJE@MuRummyRewardScore2?$AA@
CONST	SEGMENT
??_C@_0BE@KBKPJAJE@MuRummyRewardScore2?$AA@ DB 'MuRummyRewardScore2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IKICMDFH@MuRummyRewardScore1?$AA@
CONST	SEGMENT
??_C@_0BE@IKICMDFH@MuRummyRewardScore1?$AA@ DB 'MuRummyRewardScore1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BAJOCANA@MuRummyEventEndMinute?$AA@
CONST	SEGMENT
??_C@_0BG@BAJOCANA@MuRummyEventEndMinute?$AA@ DB 'MuRummyEventEndMinute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LLHGFGNG@MuRummyEventEndHour?$AA@
CONST	SEGMENT
??_C@_0BE@LLHGFGNG@MuRummyEventEndHour?$AA@ DB 'MuRummyEventEndHour', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CPOHBIBL@MuRummyEventEndDay?$AA@
CONST	SEGMENT
??_C@_0BD@CPOHBIBL@MuRummyEventEndDay?$AA@ DB 'MuRummyEventEndDay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BBHHNNIH@MuRummyEventEndMonth?$AA@
CONST	SEGMENT
??_C@_0BF@BBHHNNIH@MuRummyEventEndMonth?$AA@ DB 'MuRummyEventEndMonth', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JCGEADCM@MuRummyEventEndYear?$AA@
CONST	SEGMENT
??_C@_0BE@JCGEADCM@MuRummyEventEndYear?$AA@ DB 'MuRummyEventEndYear', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CMuRummyInfo@@6B@
CONST	SEGMENT
??_7CMuRummyInfo@@6B@ DD FLAT:??_R4CMuRummyInfo@@6B@	; CMuRummyInfo::`vftable'
	DD	FLAT:??_ECMuRummyInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z$0
__ehfuncinfo$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Init@CMuRummyInfo@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CMuRummyInfo@@QAEXXZ$0
__ehfuncinfo$?Init@CMuRummyInfo@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Init@CMuRummyInfo@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CMuRummyInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMuRummyInfo@@UAE@XZ$0
__ehfuncinfo$??1CMuRummyInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMuRummyInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECMuRummyCardInfo@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CMuRummyMng@@YAXXZ
text$yd	SEGMENT
??__Fg_CMuRummyMng@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CMuRummyMng'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CMuRummyMng@@3VCMuRummyMng@@A ; g_CMuRummyMng
  00005	e9 00 00 00 00	 jmp	 ??1CMuRummyMng@@QAE@XZ	; CMuRummyMng::~CMuRummyMng
??__Fg_CMuRummyMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CMuRummyMng''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??__Eg_CMuRummyMng@@YAXXZ
text$di	SEGMENT
??__Eg_CMuRummyMng@@YAXXZ PROC				; `dynamic initializer for 'g_CMuRummyMng'', COMDAT

; 9    : CMuRummyMng g_CMuRummyMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CMuRummyMng@@3VCMuRummyMng@@A ; g_CMuRummyMng
  00005	e8 00 00 00 00	 call	 ??0CMuRummyMng@@QAE@XZ	; CMuRummyMng::CMuRummyMng
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CMuRummyMng@@YAXXZ ; `dynamic atexit destructor for 'g_CMuRummyMng''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CMuRummyMng@@YAXXZ ENDP				; `dynamic initializer for 'g_CMuRummyMng''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetColorName@CMuRummyMng@@QAEDH@Z
_TEXT	SEGMENT
_szColor$ = -4						; size = 4
_iColorNum$ = 8						; size = 4
?GetColorName@CMuRummyMng@@QAEDH@Z PROC			; CMuRummyMng::GetColorName, COMDAT
; _this$ = ecx

; 1816 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1817 : 	char szColor[] = { 'R', 'B', 'Y', 'E' };
; 1818 : 
; 1819 : 	if (iColorNum < 0 || iColorNum > 3)

  00004	8b 45 08	 mov	 eax, DWORD PTR _iColorNum$[ebp]
  00007	c7 45 fc 52 42
	59 45		 mov	 DWORD PTR _szColor$[ebp], 1163477586 ; 45594252H
  0000e	83 f8 03	 cmp	 eax, 3
  00011	77 0a		 ja	 SHORT $LN3@GetColorNa

; 1822 : 	}
; 1823 : 
; 1824 : 	return szColor[iColorNum];

  00013	8a 44 05 fc	 mov	 al, BYTE PTR _szColor$[ebp+eax]

; 1825 : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN3@GetColorNa:

; 1820 : 	{
; 1821 : 		return szColor[3];

  0001d	b0 45		 mov	 al, 69			; 00000045H

; 1825 : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetColorName@CMuRummyMng@@QAEDH@Z ENDP			; CMuRummyMng::GetColorName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pCCardInfo$1$ = -2068					; size = 4
_this$GSCopy$1$ = -2064					; size = 4
_pSlotIndexInfo$1$ = -2060				; size = 4
_pMuRummyInfo$ = -2060					; size = 4
_obj$GSCopy$1$ = -2056					; size = 4
_szSlotInfo$ = -2052					; size = 1024
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_iLogType$ = 12						; size = 4
?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CMuRummyMng::Slot3Log, COMDAT
; _this$ = ecx

; 1748 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 08 00
	00		 sub	 esp, 2068		; 00000814H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _obj$[ebp]
  00017	89 8d f0 f7 ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001d	89 9d f8 f7 ff
	ff		 mov	 DWORD PTR _obj$GSCopy$1$[ebp], ebx

; 1749 : 	if (!OBJMAX_RANGE(obj->m_Index))

  00023	8b 13		 mov	 edx, DWORD PTR [ebx]
  00025	85 d2		 test	 edx, edx
  00027	0f 88 e2 01 00
	00		 js	 $LN13@Slot3Log
  0002d	33 c0		 xor	 eax, eax
  0002f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00035	0f 9e c0	 setle	 al
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 cf 01 00
	00		 je	 $LN13@Slot3Log

; 1750 : 	{
; 1751 : 		return;
; 1752 : 	}
; 1753 : 
; 1754 : 	CMuRummyInfo* pMuRummyInfo;// = obj->m_pCMuRummyInfo;
; 1755 : 
; 1756 : 	if (!pMuRummyInfo)

  00040	56		 push	 esi
  00041	8b b5 f4 f7 ff
	ff		 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  00047	85 f6		 test	 esi, esi
  00049	75 32		 jne	 SHORT $LN6@Slot3Log

; 1757 : 	{
; 1758 : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0004b	68 df 06 00 00	 push	 1759			; 000006dfH
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00055	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00058	50		 push	 eax
  00059	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00068	83 c4 14	 add	 esp, 20			; 00000014H
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 1812 : 	}
; 1813 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN6@Slot3Log:
  0007d	57		 push	 edi

; 1759 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1760 : 		return;
; 1761 : 	}
; 1762 : 
; 1763 : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00085	8b f8		 mov	 edi, eax
  00087	89 bd ec f7 ff
	ff		 mov	 DWORD PTR _pCCardInfo$1$[ebp], edi

; 1764 : 
; 1765 : 	if (!pCCardInfo)

  0008d	85 ff		 test	 edi, edi
  0008f	75 33		 jne	 SHORT $LN7@Slot3Log

; 1766 : 	{
; 1767 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  00091	68 e8 06 00 00	 push	 1768			; 000006e8H
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0009b	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0009e	50		 push	 eax
  0009f	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ae	83 c4 14	 add	 esp, 20			; 00000014H
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 1812 : 	}
; 1813 : }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
$LN7@Slot3Log:

; 1768 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1769 : 		return;
; 1770 : 	}
; 1771 : 
; 1772 : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  000cb	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pSlotIndexInfo$1$[ebp], eax

; 1773 : 
; 1774 : 	if (!pSlotIndexInfo)

  000d1	85 c0		 test	 eax, eax
  000d3	75 33		 jne	 SHORT $LN8@Slot3Log

; 1775 : 	{
; 1776 : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  000d5	68 f1 06 00 00	 push	 1777			; 000006f1H
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000df	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  000e2	50		 push	 eax
  000e3	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000e6	50		 push	 eax
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 1812 : 	}
; 1813 : }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 08 00	 ret	 8
$LN8@Slot3Log:

; 1777 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1778 : 		return;
; 1779 : 	}
; 1780 : 
; 1781 : 	char szSlotInfo[1024];
; 1782 : 	char szTemp[1024];
; 1783 : 	_tagMuRummyCardInfo stMuRummyCardInfo[5];
; 1784 : 
; 1785 : 	for (int n = 5; n < MURUMMY_MAX_SLOT; n++)

  00108	bb 05 00 00 00	 mov	 ebx, 5
  0010d	0f 1f 00	 npad	 3
$LL4@Slot3Log:

; 1786 : 	{
; 1787 : 		if (pSlotIndexInfo[n] == (BYTE)-1)

  00110	8a 04 03	 mov	 al, BYTE PTR [ebx+eax]
  00113	3c ff		 cmp	 al, 255			; 000000ffH
  00115	75 24		 jne	 SHORT $LN9@Slot3Log

; 1788 : 		{
; 1789 : 			strcat(szTemp, "None");

  00117	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  0011d	49		 dec	 ecx
  0011e	66 90		 npad	 2
$LL25@Slot3Log:
  00120	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00123	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00126	84 c0		 test	 al, al
  00128	75 f6		 jne	 SHORT $LL25@Slot3Log
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04OHJIHAFH@None?$AA@
  0012f	89 01		 mov	 DWORD PTR [ecx], eax
  00131	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04OHJIHAFH@None?$AA@+4
  00136	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 1790 : 		}
; 1791 : 		else

  00139	eb 65		 jmp	 SHORT $LN10@Slot3Log
$LN9@Slot3Log:

; 1792 : 		{
; 1793 : 			sprintf(szSlotInfo, "%c(%d)", 

  0013b	8b 8d f0 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00141	0f b6 c0	 movzx	 eax, al
  00144	03 c0		 add	 eax, eax
  00146	ff 74 c7 04	 push	 DWORD PTR [edi+eax*8+4]
  0014a	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]
  0014d	48		 dec	 eax
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00154	0f be c0	 movsx	 eax, al
  00157	50		 push	 eax
  00158	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _szSlotInfo$[ebp]
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_06BMLDIMJA@?$CFc?$CI?$CFd?$CJ?$AA@
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _sprintf

; 1794 : 				this->GetColorName(pCCardInfo[pSlotIndexInfo[n]].GetColor() - 1),  
; 1795 : 				pCCardInfo[pSlotIndexInfo[n]].GetNumber());
; 1796 : 			strcat(szTemp, szSlotInfo);

  00169	8d 95 fc f7 ff
	ff		 lea	 edx, DWORD PTR _szSlotInfo$[ebp]
  0016f	83 c4 10	 add	 esp, 16			; 00000010H
  00172	8b f2		 mov	 esi, edx
$LL26@Slot3Log:
  00174	8a 02		 mov	 al, BYTE PTR [edx]
  00176	42		 inc	 edx
  00177	84 c0		 test	 al, al
  00179	75 f9		 jne	 SHORT $LL26@Slot3Log
  0017b	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _szTemp$[ebp]
  00181	2b d6		 sub	 edx, esi
  00183	4f		 dec	 edi
$LL27@Slot3Log:
  00184	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00187	47		 inc	 edi
  00188	84 c0		 test	 al, al
  0018a	75 f8		 jne	 SHORT $LL27@Slot3Log
  0018c	8b ca		 mov	 ecx, edx
  0018e	c1 e9 02	 shr	 ecx, 2
  00191	f3 a5		 rep movsd
  00193	8b ca		 mov	 ecx, edx
  00195	83 e1 03	 and	 ecx, 3
  00198	f3 a4		 rep movsb
  0019a	8b bd ec f7 ff
	ff		 mov	 edi, DWORD PTR _pCCardInfo$1$[ebp]
$LN10@Slot3Log:

; 1797 : 		}
; 1798 : 
; 1799 : 		if (n != 7)

  001a0	83 fb 07	 cmp	 ebx, 7
  001a3	74 28		 je	 SHORT $LN2@Slot3Log

; 1800 : 		{
; 1801 : 			strcat(szTemp, " ,");

  001a5	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  001ab	48		 dec	 eax
  001ac	0f 1f 40 00	 npad	 4
$LL28@Slot3Log:
  001b0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001b3	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  001b6	84 c9		 test	 cl, cl
  001b8	75 f6		 jne	 SHORT $LL28@Slot3Log
  001ba	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02BMCALKD@?5?0?$AA@
  001c1	66 89 08	 mov	 WORD PTR [eax], cx
  001c4	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02BMCALKD@?5?0?$AA@+2
  001ca	88 48 02	 mov	 BYTE PTR [eax+2], cl
$LN2@Slot3Log:

; 1777 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1778 : 		return;
; 1779 : 	}
; 1780 : 
; 1781 : 	char szSlotInfo[1024];
; 1782 : 	char szTemp[1024];
; 1783 : 	_tagMuRummyCardInfo stMuRummyCardInfo[5];
; 1784 : 
; 1785 : 	for (int n = 5; n < MURUMMY_MAX_SLOT; n++)

  001cd	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
  001d3	43		 inc	 ebx
  001d4	83 fb 08	 cmp	 ebx, 8
  001d7	0f 8c 33 ff ff
	ff		 jl	 $LL4@Slot3Log

; 1802 : 		}
; 1803 : 	}
; 1804 : 
; 1805 : 	if (iLogType)

  001dd	83 7d 0c 00	 cmp	 DWORD PTR _iLogType$[ebp], 0

; 1806 : 	{
; 1807 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[3] - Register Result [ %s ]", obj->AccountID, obj->Name, szTemp);

  001e1	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  001e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _obj$GSCopy$1$[ebp]
  001ed	50		 push	 eax
  001ee	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001f1	50		 push	 eax
  001f2	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001f5	50		 push	 eax
  001f6	74 07		 je	 SHORT $LN12@Slot3Log
  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@GEGJGEPC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@

; 1808 : 	}
; 1809 :     else

  001fd	eb 05		 jmp	 SHORT $LN31@Slot3Log
$LN12@Slot3Log:

; 1810 : 	{
; 1811 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[3] - [ %s ]", obj->AccountID, obj->Name, szTemp);

  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FHAGLFFE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5?$FL?5?$CF@
$LN31@Slot3Log:
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0020a	83 c4 10	 add	 esp, 16			; 00000010H
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
$LN13@Slot3Log:

; 1812 : 	}
; 1813 : }

  0020f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00212	33 cd		 xor	 ecx, ebp
  00214	5b		 pop	 ebx
  00215	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c2 08 00	 ret	 8
?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CMuRummyMng::Slot3Log
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pCCardInfo$1$ = -2068					; size = 4
_this$GSCopy$1$ = -2064					; size = 4
_pSlotIndexInfo$1$ = -2060				; size = 4
_pMuRummyInfo$ = -2060					; size = 4
_obj$GSCopy$1$ = -2056					; size = 4
_szSlotInfo$ = -2052					; size = 1024
_szTemp$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_iLogType$ = 12						; size = 4
?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z PROC	; CMuRummyMng::Slot5Log, COMDAT
; _this$ = ecx

; 1680 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 08 00
	00		 sub	 esp, 2068		; 00000814H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _obj$[ebp]
  00017	89 8d f0 f7 ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001d	89 9d f8 f7 ff
	ff		 mov	 DWORD PTR _obj$GSCopy$1$[ebp], ebx

; 1681 : 	if (!OBJMAX_RANGE(obj->m_Index))

  00023	8b 13		 mov	 edx, DWORD PTR [ebx]
  00025	85 d2		 test	 edx, edx
  00027	0f 88 e2 01 00
	00		 js	 $LN13@Slot5Log
  0002d	33 c0		 xor	 eax, eax
  0002f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00035	0f 9e c0	 setle	 al
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 cf 01 00
	00		 je	 $LN13@Slot5Log

; 1682 : 	{
; 1683 : 		return;
; 1684 : 	}
; 1685 : 
; 1686 : 	CMuRummyInfo* pMuRummyInfo;// = obj->m_pCMuRummyInfo;
; 1687 : 
; 1688 : 	if (!pMuRummyInfo)

  00040	56		 push	 esi
  00041	8b b5 f4 f7 ff
	ff		 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  00047	85 f6		 test	 esi, esi
  00049	75 32		 jne	 SHORT $LN6@Slot5Log

; 1689 : 	{
; 1690 : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0004b	68 9b 06 00 00	 push	 1691			; 0000069bH
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00055	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00058	50		 push	 eax
  00059	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00068	83 c4 14	 add	 esp, 20			; 00000014H
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 1744 : 	}
; 1745 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
$LN6@Slot5Log:
  0007d	57		 push	 edi

; 1691 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1692 : 		return;
; 1693 : 	}
; 1694 : 
; 1695 : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00085	8b f8		 mov	 edi, eax
  00087	89 bd ec f7 ff
	ff		 mov	 DWORD PTR _pCCardInfo$1$[ebp], edi

; 1696 : 
; 1697 : 	if (!pCCardInfo)

  0008d	85 ff		 test	 edi, edi
  0008f	75 33		 jne	 SHORT $LN7@Slot5Log

; 1698 : 	{
; 1699 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  00091	68 a4 06 00 00	 push	 1700			; 000006a4H
  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0009b	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0009e	50		 push	 eax
  0009f	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ae	83 c4 14	 add	 esp, 20			; 00000014H
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 1744 : 	}
; 1745 : }

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 08 00	 ret	 8
$LN7@Slot5Log:

; 1700 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1701 : 		return;
; 1702 : 	}
; 1703 : 
; 1704 : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  000cb	89 85 f4 f7 ff
	ff		 mov	 DWORD PTR _pSlotIndexInfo$1$[ebp], eax

; 1705 : 
; 1706 : 	if (!pSlotIndexInfo)

  000d1	85 c0		 test	 eax, eax
  000d3	75 33		 jne	 SHORT $LN8@Slot5Log

; 1707 : 	{
; 1708 : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  000d5	68 ad 06 00 00	 push	 1709			; 000006adH
  000da	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000df	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  000e2	50		 push	 eax
  000e3	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000e6	50		 push	 eax
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 1744 : 	}
; 1745 : }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 08 00	 ret	 8
$LN8@Slot5Log:

; 1709 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1710 : 		return;
; 1711 : 	}
; 1712 : 
; 1713 : 	char szSlotInfo[1024];
; 1714 : 	char szTemp[1024];
; 1715 : 	_tagMuRummyCardInfo stMuRummyCardInfo[5];
; 1716 : 
; 1717 : 	for (int n = 0; n < 5; n++)

  00108	33 db		 xor	 ebx, ebx
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Slot5Log:

; 1718 : 	{
; 1719 : 		if (pSlotIndexInfo[n] == (BYTE)-1)

  00110	8a 04 03	 mov	 al, BYTE PTR [ebx+eax]
  00113	3c ff		 cmp	 al, 255			; 000000ffH
  00115	75 24		 jne	 SHORT $LN9@Slot5Log

; 1720 : 		{
; 1721 : 			strcat(szTemp, "None");

  00117	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szTemp$[ebp]
  0011d	49		 dec	 ecx
  0011e	66 90		 npad	 2
$LL25@Slot5Log:
  00120	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00123	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00126	84 c0		 test	 al, al
  00128	75 f6		 jne	 SHORT $LL25@Slot5Log
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04OHJIHAFH@None?$AA@
  0012f	89 01		 mov	 DWORD PTR [ecx], eax
  00131	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04OHJIHAFH@None?$AA@+4
  00136	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 1722 : 		}
; 1723 : 		else

  00139	eb 65		 jmp	 SHORT $LN10@Slot5Log
$LN9@Slot5Log:

; 1724 : 		{
; 1725 : 			sprintf(szSlotInfo, "%c(%d)", 

  0013b	8b 8d f0 f7 ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00141	0f b6 c0	 movzx	 eax, al
  00144	03 c0		 add	 eax, eax
  00146	ff 74 c7 04	 push	 DWORD PTR [edi+eax*8+4]
  0014a	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]
  0014d	48		 dec	 eax
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00154	0f be c0	 movsx	 eax, al
  00157	50		 push	 eax
  00158	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _szSlotInfo$[ebp]
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_06BMLDIMJA@?$CFc?$CI?$CFd?$CJ?$AA@
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 _sprintf

; 1726 : 				this->GetColorName(pCCardInfo[pSlotIndexInfo[n]].GetColor() - 1),  
; 1727 : 				pCCardInfo[pSlotIndexInfo[n]].GetNumber());
; 1728 : 			strcat(szTemp, szSlotInfo);

  00169	8d 95 fc f7 ff
	ff		 lea	 edx, DWORD PTR _szSlotInfo$[ebp]
  0016f	83 c4 10	 add	 esp, 16			; 00000010H
  00172	8b f2		 mov	 esi, edx
$LL26@Slot5Log:
  00174	8a 02		 mov	 al, BYTE PTR [edx]
  00176	42		 inc	 edx
  00177	84 c0		 test	 al, al
  00179	75 f9		 jne	 SHORT $LL26@Slot5Log
  0017b	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _szTemp$[ebp]
  00181	2b d6		 sub	 edx, esi
  00183	4f		 dec	 edi
$LL27@Slot5Log:
  00184	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00187	47		 inc	 edi
  00188	84 c0		 test	 al, al
  0018a	75 f8		 jne	 SHORT $LL27@Slot5Log
  0018c	8b ca		 mov	 ecx, edx
  0018e	c1 e9 02	 shr	 ecx, 2
  00191	f3 a5		 rep movsd
  00193	8b ca		 mov	 ecx, edx
  00195	83 e1 03	 and	 ecx, 3
  00198	f3 a4		 rep movsb
  0019a	8b bd ec f7 ff
	ff		 mov	 edi, DWORD PTR _pCCardInfo$1$[ebp]
$LN10@Slot5Log:

; 1729 : 		}
; 1730 : 
; 1731 : 		if (n != 4)

  001a0	83 fb 04	 cmp	 ebx, 4
  001a3	74 28		 je	 SHORT $LN2@Slot5Log

; 1732 : 		{
; 1733 : 			strcat(szTemp, " ,");

  001a5	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  001ab	48		 dec	 eax
  001ac	0f 1f 40 00	 npad	 4
$LL28@Slot5Log:
  001b0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  001b3	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  001b6	84 c9		 test	 cl, cl
  001b8	75 f6		 jne	 SHORT $LL28@Slot5Log
  001ba	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR ??_C@_02BMCALKD@?5?0?$AA@
  001c1	66 89 08	 mov	 WORD PTR [eax], cx
  001c4	8a 0d 02 00 00
	00		 mov	 cl, BYTE PTR ??_C@_02BMCALKD@?5?0?$AA@+2
  001ca	88 48 02	 mov	 BYTE PTR [eax+2], cl
$LN2@Slot5Log:

; 1709 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1710 : 		return;
; 1711 : 	}
; 1712 : 
; 1713 : 	char szSlotInfo[1024];
; 1714 : 	char szTemp[1024];
; 1715 : 	_tagMuRummyCardInfo stMuRummyCardInfo[5];
; 1716 : 
; 1717 : 	for (int n = 0; n < 5; n++)

  001cd	8b 85 f4 f7 ff
	ff		 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
  001d3	43		 inc	 ebx
  001d4	83 fb 05	 cmp	 ebx, 5
  001d7	0f 8c 33 ff ff
	ff		 jl	 $LL4@Slot5Log

; 1734 : 		}
; 1735 : 	}
; 1736 : 
; 1737 : 	if (iLogType)

  001dd	83 7d 0c 00	 cmp	 DWORD PTR _iLogType$[ebp], 0

; 1738 : 	{
; 1739 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[5] - Register Result [ %s ]", obj->AccountID, obj->Name, szTemp);

  001e1	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szTemp$[ebp]
  001e7	8b 8d f8 f7 ff
	ff		 mov	 ecx, DWORD PTR _obj$GSCopy$1$[ebp]
  001ed	50		 push	 eax
  001ee	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001f1	50		 push	 eax
  001f2	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001f5	50		 push	 eax
  001f6	74 07		 je	 SHORT $LN12@Slot5Log
  001f8	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@GBNFGKLM@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@

; 1740 : 	}
; 1741 :     else

  001fd	eb 05		 jmp	 SHORT $LN31@Slot5Log
$LN12@Slot5Log:

; 1742 : 	{
; 1743 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[5] - [ %s ]", obj->AccountID, obj->Name, szTemp);

  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LIDLBALE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5?$FL?5?$CF@
$LN31@Slot5Log:
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0020a	83 c4 10	 add	 esp, 16			; 00000010H
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
$LN13@Slot5Log:

; 1744 : 	}
; 1745 : }

  0020f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00212	33 cd		 xor	 ecx, ebp
  00214	5b		 pop	 ebx
  00215	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021a	8b e5		 mov	 esp, ebp
  0021c	5d		 pop	 ebp
  0021d	c2 08 00	 ret	 8
?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP	; CMuRummyMng::Slot5Log
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqMuRummyDBLog@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_iScore$ = 12						; size = 4
?GDReqMuRummyDBLog@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CMuRummyMng::GDReqMuRummyDBLog, COMDAT
; _this$ = ecx

; 1655 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 1656 : 	if (!OBJMAX_RANGE(obj->m_Index))

  00017	8b 16		 mov	 edx, DWORD PTR [esi]
  00019	85 d2		 test	 edx, edx
  0001b	0f 88 84 00 00
	00		 js	 $LN5@GDReqMuRum
  00021	33 c0		 xor	 eax, eax
  00023	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00029	0f 9e c0	 setle	 al
  0002c	85 c0		 test	 eax, eax
  0002e	74 75		 je	 SHORT $LN5@GDReqMuRum

; 1657 : 	{
; 1658 : 		return;
; 1659 : 	}
; 1660 : 
; 1661 : 	if (!gObjIsConnected(obj->m_Index))

  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00036	83 c4 04	 add	 esp, 4
  00039	85 c0		 test	 eax, eax
  0003b	74 68		 je	 SHORT $LN5@GDReqMuRum

; 1662 : 	{
; 1663 : 		return;
; 1664 : 	}
; 1665 : 
; 1666 : 	if (!this->IsMuRummyEventOn() || !g_MuRummyEventDBLog || !iScore)

  0003d	8b cf		 mov	 ecx, edi
  0003f	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  00044	85 c0		 test	 eax, eax
  00046	74 5d		 je	 SHORT $LN5@GDReqMuRum
  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_MuRummyEventDBLog@@3HA, 0 ; g_MuRummyEventDBLog
  0004f	74 54		 je	 SHORT $LN5@GDReqMuRum
  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _iScore$[ebp]
  00054	85 c9		 test	 ecx, ecx
  00056	74 4d		 je	 SHORT $LN5@GDReqMuRum

; 1667 : 	{
; 1668 : 		return;
; 1669 : 	}
; 1670 : 
; 1671 : 	_tagPMSG_REQ_MURUMMY_LOG_INSERT_DS pMsg;
; 1672 : 	pMsg.h.set((LPBYTE)&pMsg, 0xE8, 0x07, sizeof(_tagPMSG_REQ_MURUMMY_LOG_INSERT_DS));
; 1673 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  00058	0f b7 46 5a	 movzx	 eax, WORD PTR [esi+90]
  0005c	f3 0f 7e 46 52	 movq	 xmm0, QWORD PTR [esi+82]
  00061	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+12], ax
  00065	0f b6 46 5c	 movzx	 eax, BYTE PTR [esi+92]
  00069	88 45 ee	 mov	 BYTE PTR _pMsg$[ebp+14], al

; 1674 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  0006c	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  00070	66 89 45 f7	 mov	 WORD PTR _pMsg$[ebp+23], ax
  00074	0f b6 46 67	 movzx	 eax, BYTE PTR [esi+103]
  00078	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 1675 : 	pMsg.wScore = iScore;
; 1676 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  0007b	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0007e	66 0f d6 45 e4	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  00083	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00088	6a 1c		 push	 28			; 0000001cH
  0008a	66 89 4d fa	 mov	 WORD PTR _pMsg$[ebp+26], cx
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00093	50		 push	 eax
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00094	c7 45 e0 c1 1c
	e8 07		 mov	 DWORD PTR _pMsg$[ebp], 132652225 ; 07e81cc1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1674 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  0009b	66 0f d6 45 ef	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0

; 1675 : 	pMsg.wScore = iScore;
; 1676 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  000a0	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN5@GDReqMuRum:

; 1677 : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	5f		 pop	 edi
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
?GDReqMuRummyDBLog@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CMuRummyMng::GDReqMuRummyDBLog
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqMuRummyInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv488 = -120						; size = 4
_this$GSCopy$1$ = -116					; size = 4
_pCCardInfo$1$ = -112					; size = 4
tv487 = -108						; size = 4
_pMuRummyInfo$ = -108					; size = 4
_pMsg$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
?GDReqMuRummyInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::GDReqMuRummyInfoUpdate, COMDAT
; _this$ = ecx

; 1595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	89 5d 8c	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 1596 : 	if (!OBJMAX_RANGE(obj->m_Index))

  0001a	8b 16		 mov	 edx, DWORD PTR [esi]
  0001c	85 d2		 test	 edx, edx
  0001e	0f 88 6c 01 00
	00		 js	 $LN1@GDReqMuRum
  00024	33 c0		 xor	 eax, eax
  00026	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0002c	0f 9e c0	 setle	 al
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 59 01 00
	00		 je	 $LN1@GDReqMuRum

; 1597 : 	{
; 1598 : 		return;
; 1599 : 	}
; 1600 : 
; 1601 : 	if (!gObjIsConnected(obj->m_Index))

  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	0f 84 48 01 00
	00		 je	 $LN1@GDReqMuRum

; 1602 : 	{
; 1603 : 		return;
; 1604 : 	}
; 1605 : 
; 1606 : 	if (!this->IsMuRummyEventOn())

  00048	8b cb		 mov	 ecx, ebx
  0004a	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 39 01 00
	00		 je	 $LN1@GDReqMuRum

; 1607 : 	{
; 1608 : 		return;
; 1609 : 	}
; 1610 : 
; 1611 : 	CMuRummyInfo* pMuRummyInfo;// = obj->m_pCMuRummyInfo;
; 1612 : 
; 1613 :     if (!pMuRummyInfo)

  00057	57		 push	 edi
  00058	8b 7d 94	 mov	 edi, DWORD PTR _pMuRummyInfo$[ebp]
  0005b	85 ff		 test	 edi, edi
  0005d	75 33		 jne	 SHORT $LN8@GDReqMuRum

; 1614 :     {
; 1615 : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0005f	68 50 06 00 00	 push	 1616			; 00000650H
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00069	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0006c	50		 push	 eax
  0006d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 1652 : }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN8@GDReqMuRum:

; 1616 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1617 : 		return;
; 1618 : 	}
; 1619 : 
; 1620 : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  00092	8b cf		 mov	 ecx, edi
  00094	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00099	89 45 90	 mov	 DWORD PTR _pCCardInfo$1$[ebp], eax

; 1621 : 
; 1622 : 	if (!pCCardInfo)

  0009c	85 c0		 test	 eax, eax
  0009e	75 33		 jne	 SHORT $LN9@GDReqMuRum

; 1623 :     {
; 1624 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  000a0	68 59 06 00 00	 push	 1625			; 00000659H
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000aa	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000ad	50		 push	 eax
  000ae	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000b1	50		 push	 eax
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000bd	83 c4 14	 add	 esp, 20			; 00000014H
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx

; 1652 : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 04 00	 ret	 4
$LN9@GDReqMuRum:

; 1625 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1626 : 		return;
; 1627 : 	}
; 1628 : 
; 1629 : 	_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS pMsg;

  000d3	8d 4d 98	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  000d6	e8 00 00 00 00	 call	 ??0_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS@@QAE@XZ ; _tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS::_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS

; 1630 : 	pMsg.h.set((LPBYTE)&pMsg, 0xE8, 0x06, sizeof(_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS));
; 1631 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  000db	0f b7 46 5a	 movzx	 eax, WORD PTR [esi+90]
  000df	8d 4e 52	 lea	 ecx, DWORD PTR [esi+82]
  000e2	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]

; 1634 : 	
; 1635 : 	for (int i = 0; i < MURUMMY_MAX_CARD; i++)

  000e6	33 db		 xor	 ebx, ebx
  000e8	66 89 45 a4	 mov	 WORD PTR _pMsg$[ebp+12], ax
  000ec	8a 41 0a	 mov	 al, BYTE PTR [ecx+10]
  000ef	89 4d 94	 mov	 DWORD PTR tv487[ebp], ecx
  000f2	8d 4e 5d	 lea	 ecx, DWORD PTR [esi+93]
  000f5	8b 75 90	 mov	 esi, DWORD PTR _pCCardInfo$1$[ebp]
  000f8	88 45 a6	 mov	 BYTE PTR _pMsg$[ebp+14], al
  000fb	83 c6 08	 add	 esi, 8
  000fe	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]
  00102	66 89 45 af	 mov	 WORD PTR _pMsg$[ebp+23], ax
  00106	8a 41 0a	 mov	 al, BYTE PTR [ecx+10]
  00109	66 0f d6 45 9c	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  0010e	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00112	88 45 b1	 mov	 BYTE PTR _pMsg$[ebp+25], al
  00115	0f b7 47 04	 movzx	 eax, WORD PTR [edi+4]
  00119	8d 7d b6	 lea	 edi, DWORD PTR _pMsg$[ebp+30]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0011c	c7 45 98 c1 64
	e8 06		 mov	 DWORD PTR _pMsg$[ebp], 115893441 ; 06e864c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1632 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  00123	89 4d 88	 mov	 DWORD PTR tv488[ebp], ecx
  00126	66 0f d6 45 a7	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0

; 1633 : 	pMsg.wScore = pMuRummyInfo->GetScore();

  0012b	66 89 45 b2	 mov	 WORD PTR _pMsg$[ebp+26], ax
  0012f	90		 npad	 1
$LL4@GDReqMuRum:

; 1636 : 	{
; 1637 : 		pMsg.stMuRummyCardUpdateDS[i].btSlotNum = pCCardInfo[i].GetSlotNum();

  00130	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  00133	88 47 fe	 mov	 BYTE PTR [edi-2], al

; 1638 : 		pMsg.stMuRummyCardUpdateDS[i].btStatus = pCCardInfo[i].GetState();

  00136	8a 06		 mov	 al, BYTE PTR [esi]
  00138	88 07		 mov	 BYTE PTR [edi], al

; 1639 : 		pMsg.stMuRummyCardUpdateDS[i].btSeq = i;

  0013a	88 5f ff	 mov	 BYTE PTR [edi-1], bl

; 1640 : 
; 1641 : 		if (pCCardInfo[i].GetColor() != (BYTE)-1)

  0013d	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00140	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00145	74 29		 je	 SHORT $LN2@GDReqMuRum

; 1642 : 		{
; 1643 : 			LogAddTD("[MuRummy] MuRummy Info Save [%s][%s] [%d][%c][%d][%d] ",

  00147	ff 36		 push	 DWORD PTR [esi]
  00149	8b 4d 8c	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0014c	ff 76 fc	 push	 DWORD PTR [esi-4]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00155	0f be c0	 movsx	 eax, al
  00158	50		 push	 eax
  00159	ff 76 04	 push	 DWORD PTR [esi+4]
  0015c	ff 75 88	 push	 DWORD PTR tv488[ebp]
  0015f	ff 75 94	 push	 DWORD PTR tv487[ebp]
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@MKDFIBOM@?$FLMuRummy?$FN?5MuRummy?5Info?5Save?5?$FL?$CFs?$FN@
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016d	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@GDReqMuRum:

; 1634 : 	
; 1635 : 	for (int i = 0; i < MURUMMY_MAX_CARD; i++)

  00170	43		 inc	 ebx
  00171	83 c7 03	 add	 edi, 3
  00174	83 c6 10	 add	 esi, 16			; 00000010H
  00177	83 fb 18	 cmp	 ebx, 24			; 00000018H
  0017a	7c b4		 jl	 SHORT $LL4@GDReqMuRum

; 1644 : 				obj->AccountID, obj->Name, pCCardInfo[i].GetSlotNum(),
; 1645 : 				this->GetColorName(pCCardInfo[i].GetColor()),
; 1646 : 				pCCardInfo[i].GetNumber(), pCCardInfo[i].GetState());
; 1647 : 
; 1648 : 		}
; 1649 : 	}
; 1650 : 
; 1651 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  0017c	0f b6 45 99	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00180	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00185	50		 push	 eax
  00186	8d 45 98	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  0018f	5f		 pop	 edi
$LN1@GDReqMuRum:

; 1652 : }

  00190	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00193	5e		 pop	 esi
  00194	33 cd		 xor	 ecx, ebp
  00196	5b		 pop	 ebx
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c2 04 00	 ret	 4
?GDReqMuRummyInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::GDReqMuRummyInfoUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqSlotInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@EEE@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 29
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_btSeq$ = 12						; size = 1
_btSlotNum$ = 16					; size = 1
_btStatus$ = 20						; size = 1
?GDReqSlotInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@EEE@Z PROC ; CMuRummyMng::GDReqSlotInfoUpdate, COMDAT
; _this$ = ecx

; 1575 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1579 : 	if (btSlotNum < 0 || btSlotNum > 4)

  00010	8a 55 10	 mov	 dl, BYTE PTR _btSlotNum$[ebp]
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 39   : 		this->btSlotNum = -1;

  00016	66 c7 45 f6 ff
	ff		 mov	 WORD PTR _pMsg$[ebp+26], 65535 ; 0000ffffH

; 40   : 		this->btSeq = -1;
; 41   : 		this->btStatus = -1;

  0001c	c6 45 f8 ff	 mov	 BYTE PTR _pMsg$[ebp+28], 255 ; 000000ffH
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00020	c7 45 dc c1 1d
	e8 05		 mov	 DWORD PTR _pMsg$[ebp], 99098049 ; 05e81dc1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1579 : 	if (btSlotNum < 0 || btSlotNum > 4)

  00027	80 fa 04	 cmp	 dl, 4
  0002a	77 61		 ja	 SHORT $LN3@GDReqSlotI

; 1582 : 			btSlotNum, obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1583 : 		return;
; 1584 : 	}
; 1585 : 
; 1586 : 	pMsg.stCardUpdateDS.btSeq = btSeq;

  0002c	8a 45 0c	 mov	 al, BYTE PTR _btSeq$[ebp]

; 1587 :     pMsg.stCardUpdateDS.btStatus = btStatus;
; 1588 :     pMsg.stCardUpdateDS.btSlotNum = btSlotNum;
; 1589 :     memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  0002f	f3 0f 7e 41 52	 movq	 xmm0, QWORD PTR [ecx+82]
  00034	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+27], al
  00037	8a 45 14	 mov	 al, BYTE PTR _btStatus$[ebp]
  0003a	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+28], al
  0003d	0f b7 41 5a	 movzx	 eax, WORD PTR [ecx+90]
  00041	66 89 45 e8	 mov	 WORD PTR _pMsg$[ebp+12], ax
  00045	0f b6 41 5c	 movzx	 eax, BYTE PTR [ecx+92]
  00049	88 45 ea	 mov	 BYTE PTR _pMsg$[ebp+14], al

; 1590 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  0004c	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  00050	66 89 45 f3	 mov	 WORD PTR _pMsg$[ebp+23], ax
  00054	0f b6 41 67	 movzx	 eax, BYTE PTR [ecx+103]
  00058	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 1591 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  0005b	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0005e	66 0f d6 45 e0	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  00063	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0006d	6a 1d		 push	 29			; 0000001dH
  0006f	50		 push	 eax
  00070	88 55 f6	 mov	 BYTE PTR _pMsg$[ebp+26], dl
  00073	66 0f d6 45 eb	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0
  00078	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1592 : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 10 00	 ret	 16			; 00000010H
$LN3@GDReqSlotI:

; 1580 : 	{
; 1581 : 		LogAddTD("[MuRummy][Error] btSlotNum[%d]  [%s][%s] [%s, %d]",

  0008d	68 2e 06 00 00	 push	 1582			; 0000062eH
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00097	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0009a	50		 push	 eax
  0009b	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0009e	50		 push	 eax
  0009f	0f b6 c2	 movzx	 eax, dl
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@IGBMHAPK@?$FLMuRummy?$FN?$FLError?$FN?5btSlotNum?$FL?$CFd?$FN?5?5@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1592 : }

  000ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	83 c4 18	 add	 esp, 24			; 00000018H
  000b4	33 cd		 xor	 ecx, ebp
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 10 00	 ret	 16			; 00000010H
?GDReqSlotInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@EEE@Z ENDP ; CMuRummyMng::GDReqSlotInfoUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqScoreDelete@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 26
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
?GDReqScoreDelete@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::GDReqScoreDelete, COMDAT
; _this$ = ecx

; 1566 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]

; 1571 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00013	6a 26		 push	 38			; 00000026H
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00015	c7 45 e0 c1 26
	e8 04		 mov	 DWORD PTR _pMsg$[ebp], 82323137 ; 04e826c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1569 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  0001c	0f b7 41 5a	 movzx	 eax, WORD PTR [ecx+90]
  00020	f3 0f 7e 41 52	 movq	 xmm0, QWORD PTR [ecx+82]
  00025	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+12], ax
  00029	0f b6 41 5c	 movzx	 eax, BYTE PTR [ecx+92]
  0002d	88 45 ee	 mov	 BYTE PTR _pMsg$[ebp+14], al

; 1570 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  00030	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  00034	66 89 45 f7	 mov	 WORD PTR _pMsg$[ebp+23], ax
  00038	0f b6 41 67	 movzx	 eax, BYTE PTR [ecx+103]
  0003c	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 1571 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  0003f	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00042	66 0f d6 45 e4	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  00047	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00051	50		 push	 eax
  00052	66 0f d6 45 ef	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0
  00057	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1572 : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?GDReqScoreDelete@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::GDReqScoreDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqScoreUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@GPAU_tagMuRummyCardUpdateDS@@@Z
_TEXT	SEGMENT
_pMsg$ = -44						; size = 38
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_wScore$ = 12						; size = 2
_pCardUpdateDS$ = 16					; size = 4
?GDReqScoreUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@GPAU_tagMuRummyCardUpdateDS@@@Z PROC ; CMuRummyMng::GDReqScoreUpdate, COMDAT
; _this$ = ecx

; 1555 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00013	8b 55 10	 mov	 edx, DWORD PTR _pCardUpdateDS$[ebp]

; 1562 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00016	6a 26		 push	 38			; 00000026H
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00018	c7 45 d4 c1 26
	e8 02		 mov	 DWORD PTR _pMsg$[ebp], 48768705 ; 02e826c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1558 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  0001f	0f b7 41 5a	 movzx	 eax, WORD PTR [ecx+90]
  00023	f3 0f 7e 41 52	 movq	 xmm0, QWORD PTR [ecx+82]
  00028	66 89 45 e0	 mov	 WORD PTR _pMsg$[ebp+12], ax
  0002c	0f b6 41 5c	 movzx	 eax, BYTE PTR [ecx+92]
  00030	88 45 e2	 mov	 BYTE PTR _pMsg$[ebp+14], al

; 1559 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  00033	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  00037	66 89 45 eb	 mov	 WORD PTR _pMsg$[ebp+23], ax
  0003b	0f b6 41 67	 movzx	 eax, BYTE PTR [ecx+103]
  0003f	88 45 ed	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 1560 : 	memcpy(pMsg.stCardUpdateDS, &pCardUpdateDS->btSlotNum, sizeof(pMsg.stCardUpdateDS));

  00042	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00046	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+36], al

; 1561 : 	pMsg.wScore = wScore;

  00049	66 8b 45 0c	 mov	 ax, WORD PTR _wScore$[ebp]
  0004d	66 0f d6 45 d8	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  00052	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]

; 1562 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0005c	66 89 45 ee	 mov	 WORD PTR _pMsg$[ebp+26], ax
  00060	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00063	66 0f d6 45 e3	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0
  00068	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0006c	50		 push	 eax
  0006d	66 0f d6 45 f0	 movq	 QWORD PTR _pMsg$[ebp+28], xmm0
  00072	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1563 : }

  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 0c 00	 ret	 12			; 0000000cH
?GDReqScoreUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@GPAU_tagMuRummyCardUpdateDS@@@Z ENDP ; CMuRummyMng::GDReqScoreUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqCardInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@PAVCMuRummyCardInfo@@H@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 29
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
_pCCardInfo$ = 12					; size = 4
_iSeq$ = 16						; size = 4
?GDReqCardInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@PAVCMuRummyCardInfo@@H@Z PROC ; CMuRummyMng::GDReqCardInfoUpdate, COMDAT
; _this$ = ecx

; 1544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00013	8b 55 0c	 mov	 edx, DWORD PTR _pCCardInfo$[ebp]

; 1551 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00016	68 94 00 00 00	 push	 148			; 00000094H
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0001b	c7 45 dc c1 94
	e8 03		 mov	 DWORD PTR _pMsg$[ebp], 65574081 ; 03e894c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1547 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  00022	0f b7 41 5a	 movzx	 eax, WORD PTR [ecx+90]
  00026	f3 0f 7e 41 52	 movq	 xmm0, QWORD PTR [ecx+82]
  0002b	66 89 45 e8	 mov	 WORD PTR _pMsg$[ebp+12], ax
  0002f	0f b6 41 5c	 movzx	 eax, BYTE PTR [ecx+92]
  00033	88 45 ea	 mov	 BYTE PTR _pMsg$[ebp+14], al

; 1548 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  00036	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  0003a	66 89 45 f3	 mov	 WORD PTR _pMsg$[ebp+23], ax
  0003e	0f b6 41 67	 movzx	 eax, BYTE PTR [ecx+103]
  00042	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+25], al

; 1549 : 	pMsg.btSlotNum = pCCardInfo->GetSlotNum();

  00045	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00049	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+26], al

; 1550 : 	pMsg.btStatus = pCCardInfo->GetState();

  0004c	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  00050	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+27], al

; 1551 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  00053	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00056	66 0f d6 45 e0	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  0005b	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00065	50		 push	 eax
  00066	66 0f d6 45 eb	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0
  0006b	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 1552 : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
?GDReqCardInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@PAVCMuRummyCardInfo@@H@Z ENDP ; CMuRummyMng::GDReqCardInfoUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqCardInfoInsert@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pCCardInfo$1$ = -156					; size = 4
_pMuRummyInfo$ = -156					; size = 4
_pMsg$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
?GDReqCardInfoInsert@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::GDReqCardInfoInsert, COMDAT
; _this$ = ecx

; 1480 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00017	57		 push	 edi
  00018	8b f9		 mov	 edi, ecx

; 1481 : 	if (!OBJMAX_RANGE(obj->m_Index))

  0001a	8b 16		 mov	 edx, DWORD PTR [esi]
  0001c	85 d2		 test	 edx, edx
  0001e	0f 88 a1 01 00
	00		 js	 $LN1@GDReqCardI
  00024	33 c0		 xor	 eax, eax
  00026	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0002c	0f 9e c0	 setle	 al
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 8e 01 00
	00		 je	 $LN1@GDReqCardI

; 1482 : 	{
; 1483 : 		return;
; 1484 : 	}
; 1485 : 
; 1486 : 	if (!gObjIsConnected(obj->m_Index))

  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003d	83 c4 04	 add	 esp, 4
  00040	85 c0		 test	 eax, eax
  00042	0f 84 7d 01 00
	00		 je	 $LN1@GDReqCardI

; 1487 : 	{
; 1488 : 		return;
; 1489 : 	}
; 1490 : 
; 1491 : 	if (!this->IsMuRummyEventOn())

  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 6e 01 00
	00		 je	 $LN1@GDReqCardI

; 1492 : 	{
; 1493 : 		return;
; 1494 : 	}
; 1495 : 
; 1496 : 	CMuRummyInfo* pMuRummyInfo;// = obj->m_pCMuRummyInfo;
; 1497 : 
; 1498 : 	if (!pMuRummyInfo)

  00057	8b bd 64 ff ff
	ff		 mov	 edi, DWORD PTR _pMuRummyInfo$[ebp]
  0005d	85 ff		 test	 edi, edi
  0005f	75 32		 jne	 SHORT $LN8@GDReqCardI

; 1499 : 	{
; 1500 : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  00061	68 dd 05 00 00	 push	 1501			; 000005ddH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0006b	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0006e	50		 push	 eax
  0006f	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007e	83 c4 14	 add	 esp, 20			; 00000014H
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 1540 : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
$LN8@GDReqCardI:

; 1501 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1502 : 		return;
; 1503 : 	}
; 1504 : 
; 1505 : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  00093	8b cf		 mov	 ecx, edi
  00095	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  0009a	89 85 64 ff ff
	ff		 mov	 DWORD PTR _pCCardInfo$1$[ebp], eax

; 1506 : 
; 1507 : 	if (!pCCardInfo)

  000a0	85 c0		 test	 eax, eax
  000a2	75 32		 jne	 SHORT $LN9@GDReqCardI

; 1508 : 	{
; 1509 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  000a4	68 e6 05 00 00	 push	 1510			; 000005e6H
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000ae	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000b1	50		 push	 eax
  000b2	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000b5	50		 push	 eax
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi

; 1540 : }

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c9	33 cd		 xor	 ecx, ebp
  000cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN9@GDReqCardI:

; 1510 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1511 : 		return;
; 1512 : 	}
; 1513 : 
; 1514 : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  000d6	8b cf		 mov	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo

; 1515 : 
; 1516 : 	if (!pSlotIndexInfo)

  000dd	85 c0		 test	 eax, eax
  000df	75 32		 jne	 SHORT $LN10@GDReqCardI

; 1517 : 	{
; 1518 : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  000e1	68 ef 05 00 00	 push	 1519			; 000005efH
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000eb	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000ee	50		 push	 eax
  000ef	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fe	83 c4 14	 add	 esp, 20			; 00000014H
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi

; 1540 : }

  00103	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00106	33 cd		 xor	 ecx, ebp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 04 00	 ret	 4
$LN10@GDReqCardI:
  00113	53		 push	 ebx

; 1519 : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 1520 : 		return;
; 1521 : 	}
; 1522 : 
; 1523 : 	_tagPMSG_REQ_MURUMMY_INSERT_DS pMsg;

  00114	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _pMsg$[ebp]
  0011a	e8 00 00 00 00	 call	 ??0_tagPMSG_REQ_MURUMMY_INSERT_DS@@QAE@XZ ; _tagPMSG_REQ_MURUMMY_INSERT_DS::_tagPMSG_REQ_MURUMMY_INSERT_DS

; 1524 : 	pMsg.h.set((LPBYTE)&pMsg, 0xE8, 0x01, sizeof(_tagPMSG_REQ_MURUMMY_INSERT_DS));
; 1525 : 
; 1526 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  0011f	0f b7 46 5a	 movzx	 eax, WORD PTR [esi+90]

; 1528 : 	pMsg.aIndex = obj->m_Index;
; 1529 : 
; 1530 : 	for (int i = 0; i < MURUMMY_MAX_CARD; i++)

  00123	33 db		 xor	 ebx, ebx
  00125	f3 0f 7e 46 52	 movq	 xmm0, QWORD PTR [esi+82]
  0012a	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _pCCardInfo$1$[ebp]
  00130	66 89 85 74 ff
	ff ff		 mov	 WORD PTR _pMsg$[ebp+12], ax
  00137	83 c2 0c	 add	 edx, 12			; 0000000cH
  0013a	0f b6 46 5c	 movzx	 eax, BYTE PTR [esi+92]
  0013e	88 85 76 ff ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+14], al
  00144	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  00148	66 89 85 7f ff
	ff ff		 mov	 WORD PTR _pMsg$[ebp+23], ax
  0014f	0f b6 46 67	 movzx	 eax, BYTE PTR [esi+103]
  00153	88 45 81	 mov	 BYTE PTR _pMsg$[ebp+25], al
  00156	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00159	66 0f d6 85 6c
	ff ff ff	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  00161	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00166	66 89 45 82	 mov	 WORD PTR _pMsg$[ebp+26], ax
  0016a	8d 45 85	 lea	 eax, DWORD PTR _pMsg$[ebp+29]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0016d	c7 85 68 ff ff
	ff c1 94 e8 01	 mov	 DWORD PTR _pMsg$[ebp], 32019649 ; 01e894c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1527 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  00177	66 0f d6 85 77
	ff ff ff	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0
  0017f	90		 npad	 1
$LL4@GDReqCardI:

; 1531 : 	{
; 1532 : 		pMsg.stMuRummyCardInfoDS[i].btColor = pCCardInfo[i].GetColor();

  00180	0f b6 4a f4	 movzx	 ecx, BYTE PTR [edx-12]
  00184	8d 52 10	 lea	 edx, DWORD PTR [edx+16]
  00187	88 48 ff	 mov	 BYTE PTR [eax-1], cl
  0018a	8d 40 05	 lea	 eax, DWORD PTR [eax+5]

; 1533 : 		pMsg.stMuRummyCardInfoDS[i].btNumber = pCCardInfo[i].GetNumber();

  0018d	0f b6 4a e8	 movzx	 ecx, BYTE PTR [edx-24]
  00191	88 48 fb	 mov	 BYTE PTR [eax-5], cl

; 1534 :         pMsg.stMuRummyCardInfoDS[i].btSlotNum = pCCardInfo[i].GetSlotNum();

  00194	0f b6 4a f0	 movzx	 ecx, BYTE PTR [edx-16]
  00198	88 48 fc	 mov	 BYTE PTR [eax-4], cl

; 1535 : 		pMsg.stMuRummyCardInfoDS[i].btStatus = pCCardInfo[i].GetState();

  0019b	0f b6 4a ec	 movzx	 ecx, BYTE PTR [edx-20]

; 1536 : 		pMsg.stMuRummyCardInfoDS[i].btSeq = i;

  0019f	88 58 fd	 mov	 BYTE PTR [eax-3], bl
  001a2	43		 inc	 ebx
  001a3	88 48 fe	 mov	 BYTE PTR [eax-2], cl
  001a6	83 fb 18	 cmp	 ebx, 24			; 00000018H
  001a9	7c d5		 jl	 SHORT $LL4@GDReqCardI

; 1537 : 	}
; 1538 : 
; 1539 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size);

  001ab	0f b6 85 69 ff
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  001b7	50		 push	 eax
  001b8	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
  001c4	5b		 pop	 ebx
$LN1@GDReqCardI:

; 1540 : }

  001c5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c8	5f		 pop	 edi
  001c9	33 cd		 xor	 ecx, ebp
  001cb	5e		 pop	 esi
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c2 04 00	 ret	 4
?GDReqCardInfoInsert@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::GDReqCardInfoInsert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDAnsCardInfo@CMuRummyMng@@QAEXPAU_tagPMSG_ANS_MURUMMY_SELECT_DS@@@Z
_TEXT	SEGMENT
tv639 = -24						; size = 4
tv640 = -20						; size = 4
_pCCardInfo$1$ = -16					; size = 4
_pSlotIndexInfo$1$ = -12				; size = 4
_this$1$ = -8						; size = 4
_pMsg$ = -4						; size = 4
tv632 = 8						; size = 4
_pMuRummyInfo$ = 8					; size = 4
_lpMsg$ = 8						; size = 4
?GDAnsCardInfo@CMuRummyMng@@QAEXPAU_tagPMSG_ANS_MURUMMY_SELECT_DS@@@Z PROC ; CMuRummyMng::GDAnsCardInfo, COMDAT
; _this$ = ecx

; 1380 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1381 : 	int aIndex = lpMsg->aIndex;

  00006	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00009	53		 push	 ebx
  0000a	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	0f b7 58 04	 movzx	 ebx, WORD PTR [eax+4]

; 1382 : 
; 1383 : 	if (!OBJMAX_RANGE(aIndex))

  00011	85 db		 test	 ebx, ebx
  00013	0f 88 b6 01 00
	00		 js	 $LN6@GDAnsCardI
  00019	33 c0		 xor	 eax, eax
  0001b	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00021	0f 9e c0	 setle	 al
  00024	85 c0		 test	 eax, eax
  00026	0f 84 a3 01 00
	00		 je	 $LN6@GDAnsCardI

; 1384 : 	{
; 1385 : 		return;
; 1386 : 	}
; 1387 : 
; 1388 : 	if (!gObjIsConnected(aIndex))

  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	0f 84 92 01 00
	00		 je	 $LN6@GDAnsCardI

; 1389 : 	{
; 1390 : 		return;
; 1391 : 	}
; 1392 : 
; 1393 : 	LPOBJ lpObj = &gObj[aIndex];

  0003d	56		 push	 esi
  0003e	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  00044	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1394 : 
; 1395 : 	if (!lpObj)

  0004a	75 2a		 jne	 SHORT $LN10@GDAnsCardI

; 1396 : 	{
; 1397 : 		//LogAddTD("[MuRummy][Error] lpObj is NULL [%s][%s] [%s, %d]", 121, 132, __FILE__, __LINE__);
; 1398 : 		LogAddTD("[MuRummy][Error] lpObj is NULL [%s][%s] [%s, %d]", 'NONE', 'NONE', __FILE__, __LINE__);

  0004c	68 76 05 00 00	 push	 1398			; 00000576H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00056	68 45 4e 4f 4e	 push	 1313820229		; 4e4f4e45H
  0005b	68 45 4e 4f 4e	 push	 1313820229		; 4e4f4e45H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JJKKLNEH@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 1473 : 			lpObj->AccountID, lpObj->Name, nArr, pCCardInfo[nArr].GetSlotNum(),
; 1474 : 			this->GetColorName(pCCardInfo[nArr].GetColor()),
; 1475 : 			pCCardInfo[nArr].GetNumber(), pCCardInfo[nArr].GetState());
; 1476 : 	}
; 1477 : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
$LN10@GDAnsCardI:
  00076	57		 push	 edi

; 1399 : 		return;
; 1400 : 	}
; 1401 : 
; 1402 : 	CMuRummyInfo* pMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 1403 : 
; 1404 : 	if (!pMuRummyInfo)

  00077	8b 7d 08	 mov	 edi, DWORD PTR _pMuRummyInfo$[ebp]
  0007a	85 ff		 test	 edi, edi
  0007c	75 29		 jne	 SHORT $LN11@GDAnsCardI

; 1405 : 	{
; 1406 : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0007e	68 7f 05 00 00	 push	 1407			; 0000057fH
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00088	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0008b	50		 push	 eax
  0008c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0008f	50		 push	 eax
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009b	83 c4 14	 add	 esp, 20			; 00000014H
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx

; 1473 : 			lpObj->AccountID, lpObj->Name, nArr, pCCardInfo[nArr].GetSlotNum(),
; 1474 : 			this->GetColorName(pCCardInfo[nArr].GetColor()),
; 1475 : 			pCCardInfo[nArr].GetNumber(), pCCardInfo[nArr].GetState());
; 1476 : 	}
; 1477 : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
$LN11@GDAnsCardI:

; 1407 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1408 : 		return;
; 1409 : 	}
; 1410 : 
; 1411 : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  000a7	8b cf		 mov	 ecx, edi
  000a9	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  000ae	89 45 f0	 mov	 DWORD PTR _pCCardInfo$1$[ebp], eax

; 1412 : 
; 1413 : 	if (!pCCardInfo)

  000b1	85 c0		 test	 eax, eax
  000b3	75 29		 jne	 SHORT $LN12@GDAnsCardI

; 1414 : 	{
; 1415 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  000b5	68 88 05 00 00	 push	 1416			; 00000588H
  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000bf	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000c2	50		 push	 eax
  000c3	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d2	83 c4 14	 add	 esp, 20			; 00000014H
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx

; 1473 : 			lpObj->AccountID, lpObj->Name, nArr, pCCardInfo[nArr].GetSlotNum(),
; 1474 : 			this->GetColorName(pCCardInfo[nArr].GetColor()),
; 1475 : 			pCCardInfo[nArr].GetNumber(), pCCardInfo[nArr].GetState());
; 1476 : 	}
; 1477 : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
$LN12@GDAnsCardI:

; 1416 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1417 : 		return;
; 1418 : 	}
; 1419 : 
; 1420 : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  000de	8b cf		 mov	 ecx, edi
  000e0	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  000e5	89 45 f4	 mov	 DWORD PTR _pSlotIndexInfo$1$[ebp], eax

; 1421 : 
; 1422 : 	if (!pSlotIndexInfo)

  000e8	85 c0		 test	 eax, eax
  000ea	0f 84 dd 00 00
	00		 je	 $LN60@GDAnsCardI

; 1423 : 	{
; 1424 : 		return;
; 1425 : 	}
; 1426 : 
; 1427 : 	if (!this->IsMuRummyEventOn())

  000f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f3	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  000f8	85 c0		 test	 eax, eax
  000fa	0f 84 cd 00 00
	00		 je	 $LN60@GDAnsCardI

; 1435 : 	if (!lpMsg->btResult)

  00100	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00103	c7 45 fc c1 04
	4d 18		 mov	 DWORD PTR _pMsg$[ebp], 407700673 ; 184d04c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1435 : 	if (!lpMsg->btResult)

  0010a	80 79 08 00	 cmp	 BYTE PTR [ecx+8], 0
  0010e	75 1e		 jne	 SHORT $LN15@GDAnsCardI

; 1439 :         DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00110	6a 04		 push	 4
  00112	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 44   :     void SetGetPlayCard(bool bPlayCard) { this->m_bPlayCard = bPlayCard; };

  00115	66 c7 47 0c 00
	01		 mov	 WORD PTR [edi+12], 256	; 00000100H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1439 :         DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0011b	50		 push	 eax
  0011c	53		 push	 ebx
  0011d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx

; 1473 : 			lpObj->AccountID, lpObj->Name, nArr, pCCardInfo[nArr].GetSlotNum(),
; 1474 : 			this->GetColorName(pCCardInfo[nArr].GetColor()),
; 1475 : 			pCCardInfo[nArr].GetNumber(), pCCardInfo[nArr].GetState());
; 1476 : 	}
; 1477 : }

  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
$LN15@GDAnsCardI:

; 1440 : 		return;
; 1441 : 	}
; 1442 : 
; 1443 : 	pMuRummyInfo->SetScore(lpMsg->wScore);

  0012e	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]

; 1444 : 
; 1445 : 	for (int i = 0; i < MURUMMY_MAX_SLOT; i++)
; 1446 : 	{
; 1447 : 		pSlotIndexInfo[i] = (BYTE)-1;

  00132	8b 55 f4	 mov	 edx, DWORD PTR _pSlotIndexInfo$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 42   :     void SetScore(int iScore) { this->m_iScore = iScore; };

  00135	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00138	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0013b	89 45 ec	 mov	 DWORD PTR tv640[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1452 : 	for (int nCardArr = 0; nCardArr < MURUMMY_MAX_CARD; nCardArr++)

  0013e	8d 79 0b	 lea	 edi, DWORD PTR [ecx+11]
  00141	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00144	c7 45 08 18 00
	00 00		 mov	 DWORD PTR tv632[ebp], 24 ; 00000018H
  0014b	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1
  00151	c7 42 04 ff ff
	ff ff		 mov	 DWORD PTR [edx+4], -1
  00158	89 45 e8	 mov	 DWORD PTR tv639[ebp], eax
  0015b	0f 1f 44 00 00	 npad	 5
$LL7@GDAnsCardI:

; 1453 : 	{
; 1454 : 		int nArr = lpMsg->stMuRummyCardInfoDS[nCardArr].btSeq;

  00160	0f b6 5f 01	 movzx	 ebx, BYTE PTR [edi+1]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00164	8b 75 f0	 mov	 esi, DWORD PTR _pCCardInfo$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1457 : 		pCCardInfo[nArr].SetColor(lpMsg->stMuRummyCardInfoDS[nCardArr].btColor);

  00167	8b c3		 mov	 eax, ebx
  00169	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  0016c	c1 e0 04	 shl	 eax, 4
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0016f	03 f0		 add	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1457 : 		pCCardInfo[nArr].SetColor(lpMsg->stMuRummyCardInfoDS[nCardArr].btColor);

  00171	0f b6 47 fe	 movzx	 eax, BYTE PTR [edi-2]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00175	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1458 : 		pCCardInfo[nArr].SetNumber(lpMsg->stMuRummyCardInfoDS[nCardArr].btNumber);

  00177	0f b6 47 ff	 movzx	 eax, BYTE PTR [edi-1]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  0017b	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1459 :  		pCCardInfo[nArr].SetState(lpMsg->stMuRummyCardInfoDS[nCardArr].btStatus);

  0017e	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00182	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00185	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1462 : 		if (iSlotNum > -1 && iSlotNum < MURUMMY_MAX_SLOT && pCCardInfo[nArr].GetState() == 1 )

  00188	83 f9 07	 cmp	 ecx, 7
  0018b	77 08		 ja	 SHORT $LN16@GDAnsCardI
  0018d	83 f8 01	 cmp	 eax, 1
  00190	75 03		 jne	 SHORT $LN16@GDAnsCardI

; 1463 : 		{ 
; 1464 : 			pSlotIndexInfo[iSlotNum] = nArr;

  00192	88 1c 11	 mov	 BYTE PTR [ecx+edx], bl
$LN16@GDAnsCardI:

; 1465 : 		}
; 1466 : 		 
; 1467 : 		if (!pCCardInfo[nArr].GetState())
; 1468 : 		{
; 1469 : 			iCardCnt++;
; 1470 : 		}
; 1471 : 		 
; 1472 : 		LogAddTD("[MuRummy] MuRummy Card Info Load [%s][%s] Seq:[%d] [%d][%c][%d][%d]",

  00195	ff 76 08	 push	 DWORD PTR [esi+8]
  00198	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0019b	ff 76 04	 push	 DWORD PTR [esi+4]
  0019e	ff 36		 push	 DWORD PTR [esi]
  001a0	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  001a5	0f be c0	 movsx	 eax, al
  001a8	50		 push	 eax
  001a9	ff 76 0c	 push	 DWORD PTR [esi+12]
  001ac	53		 push	 ebx
  001ad	ff 75 ec	 push	 DWORD PTR tv640[ebp]
  001b0	ff 75 e8	 push	 DWORD PTR tv639[ebp]
  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@MDHKGPNB@?$FLMuRummy?$FN?5MuRummy?5Card?5Info?5Load@
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001be	8b 55 f4	 mov	 edx, DWORD PTR _pSlotIndexInfo$1$[ebp]
  001c1	83 c4 20	 add	 esp, 32			; 00000020H
  001c4	83 c7 05	 add	 edi, 5
  001c7	83 6d 08 01	 sub	 DWORD PTR tv632[ebp], 1
  001cb	75 93		 jne	 SHORT $LL7@GDAnsCardI
$LN60@GDAnsCardI:
  001cd	5f		 pop	 edi
  001ce	5e		 pop	 esi
$LN6@GDAnsCardI:
  001cf	5b		 pop	 ebx

; 1473 : 			lpObj->AccountID, lpObj->Name, nArr, pCCardInfo[nArr].GetSlotNum(),
; 1474 : 			this->GetColorName(pCCardInfo[nArr].GetColor()),
; 1475 : 			pCCardInfo[nArr].GetNumber(), pCCardInfo[nArr].GetState());
; 1476 : 	}
; 1477 : }

  001d0	8b e5		 mov	 esp, ebp
  001d2	5d		 pop	 ebp
  001d3	c2 04 00	 ret	 4
?GDAnsCardInfo@CMuRummyMng@@QAEXPAU_tagPMSG_ANS_MURUMMY_SELECT_DS@@@Z ENDP ; CMuRummyMng::GDAnsCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GDReqCardInfo@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
_obj$ = 8						; size = 4
?GDReqCardInfo@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::GDReqCardInfo, COMDAT
; _this$ = ecx

; 1353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 1354 : 	if (!OBJMAX_RANGE(obj->m_Index))

  00017	8b 16		 mov	 edx, DWORD PTR [esi]
  00019	85 d2		 test	 edx, edx
  0001b	78 77		 js	 SHORT $LN1@GDReqCardI
  0001d	33 c0		 xor	 eax, eax
  0001f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00025	0f 9e c0	 setle	 al
  00028	85 c0		 test	 eax, eax
  0002a	74 68		 je	 SHORT $LN1@GDReqCardI

; 1355 : 	{
; 1356 : 		return;
; 1357 : 	}
; 1358 : 
; 1359 : 	if (!gObjIsConnected(obj->m_Index))

  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	74 5b		 je	 SHORT $LN1@GDReqCardI

; 1360 : 	{
; 1361 : 		return;
; 1362 : 	}
; 1363 : 
; 1364 : 	if (!this->IsMuRummyEventOn())

  00039	8b cf		 mov	 ecx, edi
  0003b	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  00040	85 c0		 test	 eax, eax
  00042	74 50		 je	 SHORT $LN1@GDReqCardI

; 1365 : 	{
; 1366 : 		return;
; 1367 : 	}
; 1368 : 
; 1369 : 	_tagPMSG_REQ_MURUMMY_SELECT_DS pMsg;
; 1370 : 	pMsg.h.set((LPBYTE)&pMsg, 0xE8, 0x00, sizeof(_tagPMSG_SEND_MURUMMY_MSG));
; 1371 : 
; 1372 : 	memcpy(pMsg.AccountID, obj->AccountID, sizeof(pMsg.AccountID));

  00044	0f b7 46 5a	 movzx	 eax, WORD PTR [esi+90]

; 1374 : 	pMsg.aIndex = obj->m_Index;
; 1375 : 
; 1376 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size); 

  00048	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  0004d	f3 0f 7e 46 52	 movq	 xmm0, QWORD PTR [esi+82]
  00052	66 89 45 ec	 mov	 WORD PTR _pMsg$[ebp+12], ax
  00056	0f b6 46 5c	 movzx	 eax, BYTE PTR [esi+92]
  0005a	88 45 ee	 mov	 BYTE PTR _pMsg$[ebp+14], al
  0005d	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  00061	66 89 45 f7	 mov	 WORD PTR _pMsg$[ebp+23], ax
  00065	0f b6 46 67	 movzx	 eax, BYTE PTR [esi+103]
  00069	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+25], al
  0006c	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0006f	66 89 45 fa	 mov	 WORD PTR _pMsg$[ebp+26], ax
  00073	8d 45 e0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00076	66 0f d6 45 e4	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  0007b	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00080	6a 07		 push	 7
  00082	50		 push	 eax
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00083	c7 45 e0 c1 07
	e8 00		 mov	 DWORD PTR _pMsg$[ebp], 15206337 ; 00e807c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1373 : 	memcpy(pMsg.Name, obj->Name, sizeof(pMsg.Name));

  0008a	66 0f d6 45 ef	 movq	 QWORD PTR _pMsg$[ebp+15], xmm0

; 1374 : 	pMsg.aIndex = obj->m_Index;
; 1375 : 
; 1376 : 	cDBSMng.Send((PCHAR)&pMsg, pMsg.h.size); 

  0008f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send
$LN1@GDReqCardI:

; 1377 : }

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	5f		 pop	 edi
  00098	33 cd		 xor	 ecx, ebp
  0009a	5e		 pop	 esi
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 04 00	 ret	 4
?GDReqCardInfo@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::GDReqCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 7
_aIndex$ = 8						; size = 4
_btNotiIndex$ = 12					; size = 1
_iValue$ = 16						; size = 4
?GCSendMsg@CMuRummyMng@@QAEXHEH@Z PROC			; CMuRummyMng::GCSendMsg, COMDAT
; _this$ = ecx

; 1329 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1333 : 	if (!OBJMAX_RANGE(aIndex))

  00007	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 142  : 		lpBuf[2] = head;

  0000a	c7 45 fa 4d 17
	00 00		 mov	 DWORD PTR _pMsg$[ebp+2], 5965 ; 0000174dH
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 239  : 		this->btValueL = 0;

  00011	c6 45 fe 00	 mov	 BYTE PTR _pMsg$[ebp+6], 0
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00015	66 c7 45 f8 c1
	07		 mov	 WORD PTR _pMsg$[ebp], 1985 ; 000007c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1333 : 	if (!OBJMAX_RANGE(aIndex))

  0001b	85 f6		 test	 esi, esi
  0001d	78 42		 js	 SHORT $LN1@GCSendMsg
  0001f	33 c0		 xor	 eax, eax
  00021	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	74 33		 je	 SHORT $LN1@GCSendMsg

; 1334 : 	{
; 1335 : 		return;
; 1336 : 	}
; 1337 : 
; 1338 : 	if (!gObjIsConnected(aIndex))

  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00034	83 c4 04	 add	 esp, 4
  00037	85 c0		 test	 eax, eax
  00039	74 26		 je	 SHORT $LN1@GCSendMsg

; 1339 : 	{
; 1340 : 		return;
; 1341 : 	}
; 1342 : 
; 1343 : 	//LPOBJ lpObj = &gObj[aIndex];
; 1344 :     
; 1345 : 	pMsg.btNotiIndex = btNotiIndex;

  0003b	8a 45 0c	 mov	 al, BYTE PTR _btNotiIndex$[ebp]

; 1346 : 	pMsg.btValueH = SET_NUMBERH(iValue);

  0003e	8b 4d 10	 mov	 ecx, DWORD PTR _iValue$[ebp]
  00041	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00044	8b c1		 mov	 eax, ecx
  00046	c1 e8 08	 shr	 eax, 8
  00049	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 1347 : 	pMsg.btValueL = SET_NUMBERL(iValue);
; 1348 :     
; 1349 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0004c	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00050	50		 push	 eax
  00051	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00054	88 4d fe	 mov	 BYTE PTR _pMsg$[ebp+6], cl
  00057	50		 push	 eax
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@GCSendMsg:
  00061	5e		 pop	 esi

; 1350 : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 0c 00	 ret	 12			; 0000000cH
?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ENDP			; CMuRummyMng::GCSendMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GCSendCardList@CMuRummyMng@@QAEXH@Z
_TEXT	SEGMENT
_pSlotIndexInfo$1$ = -28				; size = 4
_pCMuRummyInfo$ = -28					; size = 4
_pMsg$ = -24						; size = 19
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
?GCSendCardList@CMuRummyMng@@QAEXH@Z PROC		; CMuRummyMng::GCSendCardList, COMDAT
; _this$ = ecx

; 1267 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR _aIndex$[ebp]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00014	c7 45 e8 c1 13
	4d 16		 mov	 DWORD PTR _pMsg$[ebp], 374150081 ; 164d13c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1271 : 	if (!OBJMAX_RANGE(aIndex))

  0001b	85 ff		 test	 edi, edi
  0001d	0f 88 1b 01 00
	00		 js	 $LN1@GCSendCard
  00023	33 c0		 xor	 eax, eax
  00025	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 08 01 00
	00		 je	 $LN1@GCSendCard

; 1272 : 	{
; 1273 : 		return;
; 1274 : 	}
; 1275 : 
; 1276 : 	if (!gObjIsConnected(aIndex))

  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003c	83 c4 04	 add	 esp, 4
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f7 00 00
	00		 je	 $LN1@GCSendCard

; 1277 : 	{
; 1278 : 		return;
; 1279 : 	}
; 1280 : 
; 1281 : 	LPOBJ lpObj = &gObj[aIndex];
; 1282 : 	CMuRummyInfo* pCMuRummyInfo;// = gObj[aIndex].m_pCMuRummyInfo;
; 1283 : 
; 1284 : 	if (!pCMuRummyInfo)

  00047	8b 45 e4	 mov	 eax, DWORD PTR _pCMuRummyInfo$[ebp]
  0004a	56		 push	 esi
  0004b	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00051	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	85 c0		 test	 eax, eax
  00059	75 32		 jne	 SHORT $LN7@GCSendCard

; 1285 : 	{
; 1286 : 		LogAddTD("[MuRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0005b	68 07 05 00 00	 push	 1287			; 00000507H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00065	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00068	50		 push	 eax
  00069	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00078	83 c4 14	 add	 esp, 20			; 00000014H
  0007b	5e		 pop	 esi
  0007c	5f		 pop	 edi

; 1326 : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	33 cd		 xor	 ecx, ebp
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN7@GCSendCard:
  0008d	53		 push	 ebx

; 1287 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1288 : 		return;
; 1289 : 	}
; 1290 : 
; 1291 : 	CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  0008e	8b c8		 mov	 ecx, eax
  00090	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00095	8b d8		 mov	 ebx, eax

; 1292 : 	
; 1293 : 	if (!pCCardInfo)

  00097	85 db		 test	 ebx, ebx
  00099	75 33		 jne	 SHORT $LN8@GCSendCard

; 1294 : 	{
; 1295 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  0009b	68 10 05 00 00	 push	 1296			; 00000510H
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000a5	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000a8	50		 push	 eax
  000a9	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000ac	50		 push	 eax
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	83 c4 14	 add	 esp, 20			; 00000014H
  000bb	5b		 pop	 ebx
  000bc	5e		 pop	 esi
  000bd	5f		 pop	 edi

; 1326 : }

  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN8@GCSendCard:

; 1296 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1297 : 		return;
; 1298 : 	}
; 1299 : 
; 1300 : 	LPBYTE pSlotIndexInfo = pCMuRummyInfo->GetSlotIndexInfo();

  000ce	8b 4d e4	 mov	 ecx, DWORD PTR _pCMuRummyInfo$[ebp]
  000d1	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  000d6	89 45 e4	 mov	 DWORD PTR _pSlotIndexInfo$1$[ebp], eax

; 1301 : 
; 1302 : 	if (!pSlotIndexInfo)

  000d9	85 c0		 test	 eax, eax
  000db	74 5f		 je	 SHORT $LN32@GCSendCard

; 1303 : 	{
; 1304 : 		return;
; 1305 : 	}
; 1306 : 
; 1307 : 	int nSlotNum = 0;
; 1308 :     
; 1309 : 	for (int i = 0; i < MURUMMY_MAX_SLOT; i++)

  000dd	33 c9		 xor	 ecx, ecx
  000df	8d 55 ed	 lea	 edx, DWORD PTR _pMsg$[ebp+5]
  000e2	33 f6		 xor	 esi, esi
$LL4@GCSendCard:

; 1310 : 	{
; 1311 : 		if (pSlotIndexInfo[i] != (BYTE)-1)

  000e4	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]
  000e7	3c ff		 cmp	 al, 255			; 000000ffH
  000e9	74 36		 je	 SHORT $LN2@GCSendCard

; 1312 : 		{
; 1313 : 			if (nSlotNum < 0 || nSlotNum > 4)

  000eb	83 fe 04	 cmp	 esi, 4
  000ee	77 4c		 ja	 SHORT $LN32@GCSendCard

; 1314 : 			{
; 1315 : 				return;
; 1316 : 			}
; 1317 : 
; 1318 : 			pMsg.stMuRummyCardInfo[nSlotNum].btColor = pCCardInfo[pSlotIndexInfo[i]].GetColor();

  000f0	0f b6 c0	 movzx	 eax, al

; 1319 : 			pMsg.stMuRummyCardInfo[nSlotNum].btNumber = pCCardInfo[pSlotIndexInfo[i]].GetNumber();
; 1320 : 			pMsg.stMuRummyCardInfo[nSlotNum].btSlotNum = pCCardInfo[pSlotIndexInfo[i]].GetSlotNum();
; 1321 : 			nSlotNum++;

  000f3	46		 inc	 esi
  000f4	03 c0		 add	 eax, eax
  000f6	0f b6 04 c3	 movzx	 eax, BYTE PTR [ebx+eax*8]
  000fa	88 42 ff	 mov	 BYTE PTR [edx-1], al
  000fd	8b 45 e4	 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
  00100	0f b6 04 01	 movzx	 eax, BYTE PTR [ecx+eax]
  00104	03 c0		 add	 eax, eax
  00106	0f b6 44 c3 04	 movzx	 eax, BYTE PTR [ebx+eax*8+4]
  0010b	88 02		 mov	 BYTE PTR [edx], al
  0010d	8b 45 e4	 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
  00110	0f b6 04 01	 movzx	 eax, BYTE PTR [ecx+eax]
  00114	03 c0		 add	 eax, eax
  00116	0f b6 44 c3 0c	 movzx	 eax, BYTE PTR [ebx+eax*8+12]
  0011b	88 42 01	 mov	 BYTE PTR [edx+1], al
  0011e	83 c2 03	 add	 edx, 3
$LN2@GCSendCard:

; 1303 : 	{
; 1304 : 		return;
; 1305 : 	}
; 1306 : 
; 1307 : 	int nSlotNum = 0;
; 1308 :     
; 1309 : 	for (int i = 0; i < MURUMMY_MAX_SLOT; i++)

  00121	8b 45 e4	 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
  00124	41		 inc	 ecx
  00125	83 f9 08	 cmp	 ecx, 8
  00128	7c ba		 jl	 SHORT $LL4@GCSendCard

; 1322 : 		}
; 1323 : 	}
; 1324 : 
; 1325 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0012a	0f b6 45 e9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0012e	50		 push	 eax
  0012f	8d 45 e8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00132	50		 push	 eax
  00133	57		 push	 edi
  00134	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@GCSendCard:
  0013c	5b		 pop	 ebx
  0013d	5e		 pop	 esi
$LN1@GCSendCard:

; 1326 : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	33 cd		 xor	 ecx, ebp
  00143	5f		 pop	 edi
  00144	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
?GCSendCardList@CMuRummyMng@@QAEXH@Z ENDP		; CMuRummyMng::GCSendCardList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqMuRummyEnd@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_END@@H@Z
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$1$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
tv290 = 12						; size = 4
_pCMuRummyInfo$ = 12					; size = 4
_aIndex$ = 12						; size = 4
?CGReqMuRummyEnd@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_END@@H@Z PROC ; CMuRummyMng::CGReqMuRummyEnd, COMDAT
; _this$ = ecx

; 1183 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 1184 : 	if (!OBJMAX_RANGE(aIndex))

  00007	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 f6		 test	 esi, esi
  0000f	0f 88 f3 01 00
	00		 js	 $LN1@CGReqMuRum
  00015	33 c0		 xor	 eax, eax
  00017	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0001d	0f 9e c0	 setle	 al
  00020	85 c0		 test	 eax, eax
  00022	0f 84 e0 01 00
	00		 je	 $LN1@CGReqMuRum

; 1185 : 	{
; 1186 : 		return;
; 1187 : 	}
; 1188 : 
; 1189 : 	if (!gObjIsConnected(aIndex))

  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002e	83 c4 04	 add	 esp, 4
  00031	85 c0		 test	 eax, eax
  00033	0f 84 cf 01 00
	00		 je	 $LN1@CGReqMuRum

; 1190 : 	{
; 1191 : 		return;
; 1192 : 	}
; 1193 : 
; 1194 : 	LPOBJ lpObj = &gObj[aIndex];

  00039	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  0003f	53		 push	 ebx
  00040	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	03 d9		 add	 ebx, ecx
  00048	89 4d 0c	 mov	 DWORD PTR tv290[ebp], ecx

; 1195 : 
; 1196 : 	if (lpObj->CloseType != -1) 

  0004b	80 7b 0d ff	 cmp	 BYTE PTR [ebx+13], -1
  0004f	0f 85 b2 01 00
	00		 jne	 $LN33@CGReqMuRum

; 1197 : 	{
; 1198 : 		return;
; 1199 : 	}
; 1200 : 
; 1201 : 	CMuRummyInfo* pCMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 1202 : 
; 1203 : 	if (!pCMuRummyInfo)

  00055	57		 push	 edi
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _pCMuRummyInfo$[ebp]
  00059	85 ff		 test	 edi, edi
  0005b	75 29		 jne	 SHORT $LN5@CGReqMuRum

; 1204 : 	{
; 1205 : 		LogAddTD("[MuRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0005d	68 b6 04 00 00	 push	 1206			; 000004b6H
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00067	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0006a	50		 push	 eax
  0006b	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0006e	50		 push	 eax
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007a	83 c4 14	 add	 esp, 20			; 00000014H
  0007d	5f		 pop	 edi
  0007e	5b		 pop	 ebx
  0007f	5e		 pop	 esi

; 1264 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN5@CGReqMuRum:

; 1206 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1207 : 		return;
; 1208 : 	}
; 1209 : 
; 1210 : 	if (pCMuRummyInfo->IsWaitReward())

  00086	80 7f 0e 00	 cmp	 BYTE PTR [edi+14], 0
  0008a	74 3b		 je	 SHORT $LN6@CGReqMuRum

; 1211 : 	{
; 1212 : 		LogAddTD("[MuRummy][DebugLog][%s][%s] Waiting Item Reward(Req End)", 

  0008c	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0008f	50		 push	 eax
  00090	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GLGFEGIJ@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1213 : 			lpObj->AccountID, lpObj->Name);
; 1214 :         GCServerMsgStringSend(lMsg.Get(3539), lpObj->m_Index, 1);

  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a7	6a 01		 push	 1
  000a9	ff 33		 push	 DWORD PTR [ebx]
  000ab	68 d3 0d 00 00	 push	 3539			; 00000dd3H
  000b0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	5f		 pop	 edi
  000bf	5b		 pop	 ebx
  000c0	5e		 pop	 esi

; 1264 : }

  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 08 00	 ret	 8
$LN6@CGReqMuRum:

; 1215 : 		return;
; 1216 : 	}
; 1217 : 
; 1218 : 	if (pCMuRummyInfo->GetScore() >= this->GetRewardScore1() && !CheckInventoryEmptySpace(lpObj, 4, 2))

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ca	e8 00 00 00 00	 call	 ?GetRewardScore1@CMuRummyMng@@QAEHXZ ; CMuRummyMng::GetRewardScore1
  000cf	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  000d2	7c 3c		 jl	 SHORT $LN7@CGReqMuRum
  000d4	6a 02		 push	 2
  000d6	6a 04		 push	 4
  000d8	53		 push	 ebx
  000d9	e8 00 00 00 00	 call	 ?CheckInventoryEmptySpace@@YAHPAUOBJECTSTRUCT@@HH@Z ; CheckInventoryEmptySpace
  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e1	85 c0		 test	 eax, eax
  000e3	75 2b		 jne	 SHORT $LN7@CGReqMuRum

; 1219 : 	{
; 1220 : 		this->GCSendMsg(aIndex, 7, 0);

  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e8	50		 push	 eax
  000e9	6a 07		 push	 7
  000eb	56		 push	 esi
  000ec	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1221 : 		LogAddTD("[%s][%s][Mu Rummy] Event Reward fail (1)", lpObj->AccountID, lpObj->Name);

  000f1	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  000f4	50		 push	 eax
  000f5	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000f8	50		 push	 eax
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JDGPLMFF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	5f		 pop	 edi
  00108	5b		 pop	 ebx
  00109	5e		 pop	 esi

; 1264 : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 08 00	 ret	 8
$LN7@CGReqMuRum:

; 1222 : 		return;
; 1223 : 	}
; 1224 : 
; 1225 : 	if (!gObjCheckMaxZen(aIndex, MURUMMY_REWARD_MONEY))

  00110	68 20 a1 07 00	 push	 500000			; 0007a120H
  00115	56		 push	 esi
  00116	e8 00 00 00 00	 call	 ?gObjCheckMaxZen@@YAHHH@Z ; gObjCheckMaxZen

; 1226 : 	{
; 1227 : 		this->GCSendMsg(aIndex, 11, 0);

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011e	83 c4 08	 add	 esp, 8
  00121	85 c0		 test	 eax, eax
  00123	75 28		 jne	 SHORT $LN8@CGReqMuRum
  00125	50		 push	 eax
  00126	6a 0b		 push	 11			; 0000000bH
  00128	56		 push	 esi
  00129	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1228 :         LogAddTD("[%s][%s][Mu Rummy] Event Reward fail (0)", lpObj->AccountID, lpObj->Name);

  0012e	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00131	50		 push	 eax
  00132	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00135	50		 push	 eax
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@JCKNNGGC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH
  00144	5f		 pop	 edi
  00145	5b		 pop	 ebx
  00146	5e		 pop	 esi

; 1264 : }

  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c2 08 00	 ret	 8
$LN8@CGReqMuRum:

; 1229 : 		return;
; 1230 : 	}
; 1231 : 
; 1232 : 	if (pCMuRummyInfo->GetScore() >= this->GetRewardScore1())

  0014d	e8 00 00 00 00	 call	 ?GetRewardScore1@CMuRummyMng@@QAEHXZ ; CMuRummyMng::GetRewardScore1
  00152	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00155	7c 04		 jl	 SHORT $LN9@CGReqMuRum
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 46   :     void SetWaitReward(bool bWaitReward) { this->m_bWaitReward = bWaitReward; };

  00157	c6 47 0e 01	 mov	 BYTE PTR [edi+14], 1
$LN9@CGReqMuRum:
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1246 : 	this->GCSendMsg(aIndex, 10, 0);

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0015e	6a 00		 push	 0
  00160	6a 0a		 push	 10			; 0000000aH
  00162	56		 push	 esi
  00163	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1247 :     gObj[aIndex].Money += MURUMMY_REWARD_MONEY;

  00168	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR tv290[ebp]
  00170	81 84 01 cc 00
	00 00 20 a1 07
	00		 add	 DWORD PTR [ecx+eax+204], 500000 ; 0007a120H

; 1248 :     GCMoneySend(aIndex, gObj[aIndex].Money);

  0017b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00180	ff b4 01 cc 00
	00 00		 push	 DWORD PTR [ecx+eax+204]
  00187	56		 push	 esi
  00188	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 1253 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0018d	6a 05		 push	 5
  0018f	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 143  : 		lpBuf[3] = sub;

  00192	66 c7 45 f7 15
	01		 mov	 WORD PTR _pMsg$[ebp+3], 277 ; 00000115H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1253 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00198	50		 push	 eax
  00199	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0019a	66 c7 45 f4 c1
	05		 mov	 WORD PTR _pMsg$[ebp], 1473 ; 000005c1H

; 141  : 		lpBuf[1] = size;
; 142  : 		lpBuf[2] = head;

  001a0	c6 45 f6 4d	 mov	 BYTE PTR _pMsg$[ebp+2], 77 ; 0000004dH
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1253 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  001a4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1254 : 
; 1255 : 	this->GCSendMsg(aIndex, 8, 0);

  001a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001ac	83 c4 14	 add	 esp, 20			; 00000014H
  001af	6a 00		 push	 0
  001b1	6a 08		 push	 8
  001b3	56		 push	 esi
  001b4	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1256 : 	LogAddTD("[%s][%s][Mu Rummy] Event Reward Result [Point : %d, RewardZen : %d]",

  001b9	8b 45 0c	 mov	 eax, DWORD PTR _pCMuRummyInfo$[ebp]
  001bc	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  001bf	68 20 a1 07 00	 push	 500000			; 0007a120H
  001c4	8d 7b 52	 lea	 edi, DWORD PTR [ebx+82]
  001c7	ff 70 04	 push	 DWORD PTR [eax+4]
  001ca	56		 push	 esi
  001cb	57		 push	 edi
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@HBKLNCHG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Reward?5@
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1257 : 		lpObj->AccountID, lpObj->Name, pCMuRummyInfo->GetScore(), MURUMMY_REWARD_MONEY);  
; 1258 : 	LogAddTD("[%s][%s][Mu Rummy] Event end", lpObj->AccountID, lpObj->Name);

  001d7	56		 push	 esi
  001d8	57		 push	 edi
  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EOCJBHNI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5end?$AA@
  001de	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1259 : 	//LogAddEvent("MuRummyEvent:MiniGameEnd", lpObj, ":Score[%d]", pCMuRummyInfo->GetScore());
; 1260 : 	this->GDReqMuRummyDBLog(lpObj, pCMuRummyInfo->GetScore());

  001e4	8b 75 0c	 mov	 esi, DWORD PTR _pCMuRummyInfo$[ebp]
  001e7	83 c4 20	 add	 esp, 32			; 00000020H
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001ed	ff 76 04	 push	 DWORD PTR [esi+4]
  001f0	53		 push	 ebx
  001f1	e8 00 00 00 00	 call	 ?GDReqMuRummyDBLog@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::GDReqMuRummyDBLog

; 1261 : 
; 1262 : 	pCMuRummyInfo->Clear();

  001f6	8b ce		 mov	 ecx, esi
  001f8	e8 00 00 00 00	 call	 ?Clear@CMuRummyInfo@@QAEXXZ ; CMuRummyInfo::Clear

; 1263 : 	this->GDReqScoreDelete(lpObj);

  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00200	53		 push	 ebx
  00201	e8 00 00 00 00	 call	 ?GDReqScoreDelete@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqScoreDelete
  00206	5f		 pop	 edi
$LN33@CGReqMuRum:
  00207	5b		 pop	 ebx
$LN1@CGReqMuRum:
  00208	5e		 pop	 esi

; 1264 : }

  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c2 08 00	 ret	 8
?CGReqMuRummyEnd@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_END@@H@Z ENDP ; CMuRummyMng::CGReqMuRummyEnd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqCardMatch@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MATCH@@H@Z
_TEXT	SEGMENT
_nScore$ = -40						; size = 4
_pMsg$ = -36						; size = 9
_btRet$1$ = -21						; size = 1
_this$GSCopy$1$ = -20					; size = 4
_pCMuRummyInfo$ = -20					; size = 4
_stCardUpdateDS$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqCardMatch@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MATCH@@H@Z PROC ; CMuRummyMng::CGReqCardMatch, COMDAT
; _this$ = ecx

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00014	89 4d ec	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00017	c7 45 dc c1 09
	4d 14		 mov	 DWORD PTR _pMsg$[ebp], 340593089 ; 144d09c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1125 : 	if (!OBJMAX_RANGE(aIndex))

  0001e	85 ff		 test	 edi, edi
  00020	0f 88 7e 01 00
	00		 js	 $LN1@CGReqCardM
  00026	33 c0		 xor	 eax, eax
  00028	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  0002e	0f 9e c0	 setle	 al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 6b 01 00
	00		 je	 $LN1@CGReqCardM

; 1126 : 	{
; 1127 : 		return;
; 1128 : 	}
; 1129 : 
; 1130 : 	if (!gObjIsConnected(aIndex))

  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	0f 84 5a 01 00
	00		 je	 $LN1@CGReqCardM

; 1131 : 	{
; 1132 : 		return;
; 1133 : 	}
; 1134 : 
; 1135 : 	LPOBJ lpObj = &gObj[aIndex];
; 1136 : 	CMuRummyInfo* pCMuRummyInfo;// = gObj[aIndex].m_pCMuRummyInfo;
; 1137 : 
; 1138 : 	if (!pCMuRummyInfo)

  0004a	53		 push	 ebx
  0004b	8b 5d ec	 mov	 ebx, DWORD PTR _pCMuRummyInfo$[ebp]
  0004e	56		 push	 esi
  0004f	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00055	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	85 db		 test	 ebx, ebx
  0005d	75 33		 jne	 SHORT $LN4@CGReqCardM

; 1139 :     {
; 1140 : 		LogAddTD("[MuRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0005f	68 75 04 00 00	 push	 1141			; 00000475H
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00069	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0006c	50		 push	 eax
  0006d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	5f		 pop	 edi

; 1180 : }

  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN4@CGReqCardM:

; 1147 : 	BYTE btRet = this->CardMatchCheck(pCMuRummyInfo, nScore, stCardUpdateDS, lpObj);

  00092	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00095	8d 45 f0	 lea	 eax, DWORD PTR _stCardUpdateDS$[ebp]
  00098	56		 push	 esi
  00099	50		 push	 eax
  0009a	8d 45 d8	 lea	 eax, DWORD PTR _nScore$[ebp]
  0009d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nScore$[ebp], 0
  000a4	50		 push	 eax
  000a5	53		 push	 ebx
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 39   : 		this->btSlotNum = -1;

  000a6	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _stCardUpdateDS$[ebp], -1

; 40   : 		this->btSeq = -1;

  000ad	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _stCardUpdateDS$[ebp+4], -1

; 41   : 		this->btStatus = -1;

  000b4	c6 45 f8 ff	 mov	 BYTE PTR _stCardUpdateDS$[ebp+8], 255 ; 000000ffH
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1147 : 	BYTE btRet = this->CardMatchCheck(pCMuRummyInfo, nScore, stCardUpdateDS, lpObj);

  000b8	e8 00 00 00 00	 call	 ?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::CardMatchCheck

; 1148 :     CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  000bd	8b cb		 mov	 ecx, ebx
  000bf	88 45 eb	 mov	 BYTE PTR _btRet$1$[ebp], al
  000c2	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo

; 1149 : 
; 1150 : 	if (!pCCardInfo)

  000c7	85 c0		 test	 eax, eax
  000c9	75 2b		 jne	 SHORT $LN5@CGReqCardM

; 1151 :     {
; 1152 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s, %d]", __FILE__, __LINE__);

  000cb	68 80 04 00 00	 push	 1152			; 00000480H
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	5f		 pop	 edi

; 1180 : }

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e9	33 cd		 xor	 ecx, ebp
  000eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
$LN5@CGReqCardM:

; 1153 : 		return;
; 1154 : 	}
; 1155 : 
; 1156 : 	if (btRet)

  000f6	80 7d eb 00	 cmp	 BYTE PTR _btRet$1$[ebp], 0
  000fa	74 25		 je	 SHORT $LN6@CGReqCardM

; 1157 : 	{
; 1158 : 		this->GCSendMsg(aIndex, 6, 0);

  000fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000ff	6a 00		 push	 0
  00101	6a 06		 push	 6
  00103	57		 push	 edi
  00104	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1159 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[3] - Combine Fail", lpObj->AccountID, lpObj->Name);

  00109	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0010c	50		 push	 eax
  0010d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00110	50		 push	 eax
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@HGICILBL@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1160 : 	}
; 1161 : 	else

  0011f	eb 78		 jmp	 SHORT $LN7@CGReqCardM
$LN6@CGReqCardM:
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 42   :     void SetScore(int iScore) { this->m_iScore = iScore; };

  00121	8b 55 ec	 mov	 edx, DWORD PTR _pCMuRummyInfo$[ebp]
  00124	8b 5d d8	 mov	 ebx, DWORD PTR _nScore$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1166 :         pMsg.btScoreH = SET_NUMBERH(nScore);

  00127	8b c3		 mov	 eax, ebx
  00129	c1 e8 08	 shr	 eax, 8
  0012c	88 45 e0	 mov	 BYTE PTR _pMsg$[ebp+4], al
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 42   :     void SetScore(int iScore) { this->m_iScore = iScore; };

  0012f	01 5a 04	 add	 DWORD PTR [edx+4], ebx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1169 :         pMsg.btTotScoreL = SET_NUMBERL(pCMuRummyInfo->GetScore());

  00132	8a 42 04	 mov	 al, BYTE PTR [edx+4]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 42   :     void SetScore(int iScore) { this->m_iScore = iScore; };

  00135	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1169 :         pMsg.btTotScoreL = SET_NUMBERL(pCMuRummyInfo->GetScore());

  00138	88 45 e3	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 1170 :         DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0013b	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0013f	50		 push	 eax
  00140	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00143	c1 e9 08	 shr	 ecx, 8
  00146	50		 push	 eax
  00147	57		 push	 edi
  00148	c6 45 e4 01	 mov	 BYTE PTR _pMsg$[ebp+8], 1
  0014c	88 5d e1	 mov	 BYTE PTR _pMsg$[ebp+5], bl
  0014f	88 4d e2	 mov	 BYTE PTR _pMsg$[ebp+6], cl
  00152	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1171 :           
; 1172 : 		this->GCSendMsg(aIndex, 5, 0);

  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015d	6a 00		 push	 0
  0015f	6a 05		 push	 5
  00161	57		 push	 edi
  00162	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1173 :         this->GDReqScoreUpdate(lpObj, pCMuRummyInfo->GetScore(), stCardUpdateDS);

  00167	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0016a	8d 45 f0	 lea	 eax, DWORD PTR _stCardUpdateDS$[ebp]
  0016d	50		 push	 eax
  0016e	8b 45 ec	 mov	 eax, DWORD PTR _pCMuRummyInfo$[ebp]
  00171	0f b7 40 04	 movzx	 eax, WORD PTR [eax+4]
  00175	50		 push	 eax
  00176	56		 push	 esi
  00177	e8 00 00 00 00	 call	 ?GDReqScoreUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@GPAU_tagMuRummyCardUpdateDS@@@Z ; CMuRummyMng::GDReqScoreUpdate

; 1174 : 
; 1175 : 		LogAddTD("[%s][%s][Mu Rummy] Slot[3] - Combine Success Gain Point(%d) (%d)",

  0017c	8b 45 ec	 mov	 eax, DWORD PTR _pCMuRummyInfo$[ebp]
  0017f	ff 70 04	 push	 DWORD PTR [eax+4]
  00182	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00185	53		 push	 ebx
  00186	50		 push	 eax
  00187	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0018a	50		 push	 eax
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@FBJCEGJG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Com@
  00190	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00196	83 c4 14	 add	 esp, 20			; 00000014H
$LN7@CGReqCardM:

; 1176 : 			lpObj->AccountID,lpObj->Name, nScore, pCMuRummyInfo->GetScore());
; 1177 : 	}
; 1178 : 
; 1179 : 	this->GCSendCardList(aIndex);

  00199	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0019c	57		 push	 edi
  0019d	e8 00 00 00 00	 call	 ?GCSendCardList@CMuRummyMng@@QAEXH@Z ; CMuRummyMng::GCSendCardList
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
$LN1@CGReqCardM:

; 1180 : }

  001a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a7	33 cd		 xor	 ecx, ebp
  001a9	5f		 pop	 edi
  001aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 08 00	 ret	 8
?CGReqCardMatch@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MATCH@@H@Z ENDP ; CMuRummyMng::CGReqCardMatch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqCardReMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_REMOVE@@H@Z
_TEXT	SEGMENT
_pMsg$ = -12						; size = 5
_this$1$ = -4						; size = 4
_sSlot$1$ = 8						; size = 4
_lpMsg$ = 8						; size = 4
_pCMuRummyInfo$ = 12					; size = 4
_aIndex$ = 12						; size = 4
_Ret$1$ = 15						; size = 1
?CGReqCardReMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_REMOVE@@H@Z PROC ; CMuRummyMng::CGReqCardReMove, COMDAT
; _this$ = ecx

; 1052 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1056 : 	if (!OBJMAX_RANGE(aIndex))

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0000d	c7 45 f4 c1 05
	4d 13		 mov	 DWORD PTR _pMsg$[ebp], 323814849 ; 134d05c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 1056 : 	if (!OBJMAX_RANGE(aIndex))

  00014	85 db		 test	 ebx, ebx
  00016	0f 88 7e 01 00
	00		 js	 $LN1@CGReqCardR
  0001c	33 c0		 xor	 eax, eax
  0001e	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00024	0f 9e c0	 setle	 al
  00027	85 c0		 test	 eax, eax
  00029	0f 84 6b 01 00
	00		 je	 $LN1@CGReqCardR

; 1057 : 	{
; 1058 : 		return;
; 1059 : 	}
; 1060 : 
; 1061 : 	if (!gObjIsConnected(aIndex))

  0002f	53		 push	 ebx
  00030	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00035	83 c4 04	 add	 esp, 4
  00038	85 c0		 test	 eax, eax
  0003a	0f 84 5a 01 00
	00		 je	 $LN1@CGReqCardR

; 1062 : 	{
; 1063 : 		return;
; 1064 : 	}
; 1065 : 
; 1066 : 	LPOBJ lpObj = &gObj[aIndex];

  00040	57		 push	 edi
  00041	69 fb 40 27 00
	00		 imul	 edi, ebx, 10048
  00047	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1067 : 
; 1068 : 	if (lpObj->CloseType != -1) 

  0004d	80 7f 0d ff	 cmp	 BYTE PTR [edi+13], -1
  00051	0f 85 42 01 00
	00		 jne	 $LN20@CGReqCardR

; 1069 : 	{
; 1070 : 		return;
; 1071 : 	}
; 1072 : 
; 1073 : 	int sSlot = lpMsg->btSlot;

  00057	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  0005a	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0005e	89 4d 08	 mov	 DWORD PTR _sSlot$1$[ebp], ecx

; 1074 : 
; 1075 : 	if (sSlot >= MURUMMY_MAX_SLOT)

  00061	83 f9 08	 cmp	 ecx, 8
  00064	7c 29		 jl	 SHORT $LN5@CGReqCardR

; 1076 :     {
; 1077 : 		LogAddTD("[MuRummy][Error] dump fail Slot Num [%d] [%s][%s] [%s, %d]",

  00066	68 36 04 00 00	 push	 1078			; 00000436H
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00070	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00073	50		 push	 eax
  00074	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00077	50		 push	 eax
  00078	51		 push	 ecx
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@POJPEBAK@?$FLMuRummy?$FN?$FLError?$FN?5dump?5fail?5Slot?5@
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00084	83 c4 18	 add	 esp, 24			; 00000018H
  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx

; 1118 : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN5@CGReqCardR:
  0008f	56		 push	 esi

; 1078 : 			sSlot, lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1079 : 		return;
; 1080 : 	}
; 1081 : 
; 1082 : 	CMuRummyInfo* pCMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 1083 : 
; 1084 : 	if (!pCMuRummyInfo)

  00090	8b 75 0c	 mov	 esi, DWORD PTR _pCMuRummyInfo$[ebp]
  00093	85 f6		 test	 esi, esi
  00095	75 29		 jne	 SHORT $LN6@CGReqCardR

; 1085 : 	{
; 1086 : 		LogAddTD("[MuRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]",

  00097	68 3f 04 00 00	 push	 1087			; 0000043fH
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000a1	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000a4	50		 push	 eax
  000a5	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	5e		 pop	 esi
  000b8	5f		 pop	 edi
  000b9	5b		 pop	 ebx

; 1118 : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 08 00	 ret	 8
$LN6@CGReqCardR:

; 1087 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1088 : 		return;
; 1089 : 	}
; 1090 : 
; 1091 : 	BYTE Ret = this->CardSlotReMove(pCMuRummyInfo, sSlot);

  000c0	51		 push	 ecx
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c4	56		 push	 esi
  000c5	e8 00 00 00 00	 call	 ?CardSlotReMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@H@Z ; CMuRummyMng::CardSlotReMove
  000ca	88 45 0f	 mov	 BYTE PTR _Ret$1$[ebp], al

; 1092 : 
; 1093 : 	if (Ret == (BYTE)-1)

  000cd	3c ff		 cmp	 al, 255			; 000000ffH
  000cf	75 1f		 jne	 SHORT $LN7@CGReqCardR

; 1094 : 	{
; 1095 : 		LogAddTD("[MuRummy][Error] dump Card fail [%s][%s] ", 

  000d1	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000d4	50		 push	 eax
  000d5	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000d8	50		 push	 eax
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GFMCEJJH@?$FLMuRummy?$FN?$FLError?$FN?5dump?5Card?5fail?5@
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e7	5e		 pop	 esi
  000e8	5f		 pop	 edi
  000e9	5b		 pop	 ebx

; 1118 : }

  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 08 00	 ret	 8
$LN7@CGReqCardR:

; 1096 : 			lpObj->AccountID, lpObj->Name);
; 1097 : 		return;
; 1098 : 	}
; 1099 : 
; 1100 : 	CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  000f0	8b ce		 mov	 ecx, esi
  000f2	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  000f7	8b d0		 mov	 edx, eax

; 1101 : 
; 1102 : 	if (!pCCardInfo)

  000f9	85 d2		 test	 edx, edx
  000fb	75 29		 jne	 SHORT $LN8@CGReqCardR

; 1103 : 	{
; 1104 : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  000fd	68 51 04 00 00	 push	 1105			; 00000451H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00107	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0010a	50		 push	 eax
  0010b	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011a	83 c4 14	 add	 esp, 20			; 00000014H
  0011d	5e		 pop	 esi
  0011e	5f		 pop	 edi
  0011f	5b		 pop	 ebx

; 1118 : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
$LN8@CGReqCardR:

; 1105 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1106 : 		return;
; 1107 : 	}
; 1108 : 
; 1109 : 	this->GDReqCardInfoUpdate(lpObj, &pCCardInfo[Ret], Ret);

  00126	0f b6 4d 0f	 movzx	 ecx, BYTE PTR _Ret$1$[ebp]
  0012a	8b f1		 mov	 esi, ecx
  0012c	51		 push	 ecx
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00130	c1 e6 04	 shl	 esi, 4
  00133	03 f2		 add	 esi, edx
  00135	56		 push	 esi
  00136	57		 push	 edi
  00137	e8 00 00 00 00	 call	 ?GDReqCardInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@PAVCMuRummyCardInfo@@H@Z ; CMuRummyMng::GDReqCardInfoUpdate

; 1110 : 	pMsg.btResult = sSlot;

  0013c	8b 45 08	 mov	 eax, DWORD PTR _sSlot$1$[ebp]
  0013f	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1111 : 	DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00142	0f b6 45 f5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00146	50		 push	 eax
  00147	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0014a	50		 push	 eax
  0014b	53		 push	 ebx
  0014c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1112 : 
; 1113 :     this->GCSendMsg(aIndex, 4, 0);

  00154	6a 00		 push	 0
  00156	6a 04		 push	 4
  00158	53		 push	 ebx
  00159	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0015c	8b cb		 mov	 ecx, ebx
  0015e	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg

; 1114 : 	LogAddTD("[%s][%s][Mu Rummy] Slot[5] - Junk Slot[%d] %c : %d",

  00163	ff 76 04	 push	 DWORD PTR [esi+4]
  00166	8b 06		 mov	 eax, DWORD PTR [esi]
  00168	8b cb		 mov	 ecx, ebx
  0016a	48		 dec	 eax
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00171	0f be c0	 movsx	 eax, al
  00174	50		 push	 eax
  00175	ff 75 08	 push	 DWORD PTR _sSlot$1$[ebp]
  00178	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0017b	50		 push	 eax
  0017c	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0017f	50		 push	 eax
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GPAJNGEE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Jun@
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0018b	83 c4 18	 add	 esp, 24			; 00000018H

; 1115 : 		lpObj->AccountID, lpObj->Name, sSlot,
; 1116 : 		this->GetColorName(pCCardInfo[Ret].GetColor() - 1), pCCardInfo[Ret].GetNumber());
; 1117 : 	this->Slot5Log(lpObj, 0);

  0018e	8b cb		 mov	 ecx, ebx
  00190	6a 00		 push	 0
  00192	57		 push	 edi
  00193	e8 00 00 00 00	 call	 ?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot5Log
  00198	5e		 pop	 esi
$LN20@CGReqCardR:
  00199	5f		 pop	 edi
$LN1@CGReqCardR:
  0019a	5b		 pop	 ebx

; 1118 : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c2 08 00	 ret	 8
?CGReqCardReMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_REMOVE@@H@Z ENDP ; CMuRummyMng::CGReqCardReMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqCardMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MOVE@@H@Z
_TEXT	SEGMENT
_pCOutCardInfo$ = -28					; size = 16
_pMsg$ = -12						; size = 8
_this$1$ = -4						; size = 4
_lpMsg$ = 8						; size = 4
_tSlot$1$ = 12						; size = 4
_pCMuRummyInfo$ = 12					; size = 4
_aIndex$ = 12						; size = 4
?CGReqCardMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MOVE@@H@Z PROC ; CMuRummyMng::CGReqCardMove, COMDAT
; _this$ = ecx

; 984  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	57		 push	 edi

; 988  : 	if (!OBJMAX_RANGE(aIndex))

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 118  : 		this->sSlot = -1;

  0000d	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+4], -1
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00014	c7 45 f4 c1 08
	4d 12		 mov	 DWORD PTR _pMsg$[ebp], 307038401 ; 124d08c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 988  : 	if (!OBJMAX_RANGE(aIndex))

  0001b	85 ff		 test	 edi, edi
  0001d	0f 88 e6 00 00
	00		 js	 $LN17@CGReqCardM
  00023	33 c0		 xor	 eax, eax
  00025	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 d3 00 00
	00		 je	 $LN17@CGReqCardM

; 989  : 	{
; 990  : 		return;
; 991  : 	}
; 992  : 
; 993  : 	if (!gObjIsConnected(aIndex))

  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003c	83 c4 04	 add	 esp, 4
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 c2 00 00
	00		 je	 $LN17@CGReqCardM

; 994  : 	{
; 995  : 		return;
; 996  : 	}
; 997  : 
; 998  : 	LPOBJ lpObj = &gObj[aIndex];

  00047	56		 push	 esi
  00048	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  0004e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 999  : 
; 1000 : 	if (lpObj->CloseType != -1) 

  00054	80 7e 0d ff	 cmp	 BYTE PTR [esi+13], -1
  00058	0f 85 aa 00 00
	00		 jne	 $LN28@CGReqCardM

; 1001 : 	{
; 1002 : 		return;
; 1003 : 	}
; 1004 : 
; 1005 : 	int sSlot = lpMsg->sSlot;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00061	53		 push	 ebx
  00062	0f b6 58 04	 movzx	 ebx, BYTE PTR [eax+4]

; 1006 :     int tSlot = lpMsg->tSlot;

  00066	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  0006a	89 45 0c	 mov	 DWORD PTR _tSlot$1$[ebp], eax

; 1007 : 
; 1008 : 	if (sSlot < 0 || sSlot >= MURUMMY_MAX_SLOT)

  0006d	83 fb 07	 cmp	 ebx, 7
  00070	0f 87 91 00 00
	00		 ja	 $LN29@CGReqCardM

; 1009 :     {
; 1010 : 		return;
; 1011 : 	}
; 1012 : 
; 1013 : 	if (tSlot < 0 || tSlot >= MURUMMY_MAX_SLOT)

  00076	83 f8 07	 cmp	 eax, 7
  00079	0f 87 88 00 00
	00		 ja	 $LN29@CGReqCardM

; 1014 :     {
; 1015 : 		return;
; 1016 : 	}
; 1017 : 
; 1018 : 	if (sSlot == tSlot)

  0007f	3b d8		 cmp	 ebx, eax
  00081	0f 84 80 00 00
	00		 je	 $LN29@CGReqCardM

; 1019 : 	{
; 1020 : 		return;
; 1021 : 	}
; 1022 : 
; 1023 : 	CMuRummyInfo* pCMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 1024 : 
; 1025 : 	if (!pCMuRummyInfo)

  00087	83 7d 0c 00	 cmp	 DWORD PTR _pCMuRummyInfo$[ebp], 0
  0008b	75 29		 jne	 SHORT $LN10@CGReqCardM

; 1026 : 	{
; 1027 : 		LogAddTD("[MuRummy][Error] pCMuRummyInfo is NULL [%s][%s] [%s, %d]",

  0008d	68 04 04 00 00	 push	 1028			; 00000404H
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00097	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0009a	50		 push	 eax
  0009b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JIKKCJIL@?$FLMuRummy?$FN?$FLError?$FN?5pCMuRummyInfo?5i@
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
  000ad	5b		 pop	 ebx
  000ae	5e		 pop	 esi
  000af	5f		 pop	 edi

; 1049 : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN10@CGReqCardM:

; 1028 : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 1029 : 		return;
; 1030 : 	}
; 1031 : 
; 1032 : 	CMuRummyCardInfo pCOutCardInfo;

  000b6	8d 4d e4	 lea	 ecx, DWORD PTR _pCOutCardInfo$[ebp]
  000b9	e8 00 00 00 00	 call	 ??0CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::CMuRummyCardInfo

; 1033 : 	BYTE Ret = this->CardSlotMove(pCMuRummyInfo, sSlot, tSlot, &pCOutCardInfo, lpObj);

  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000c1	8d 45 e4	 lea	 eax, DWORD PTR _pCOutCardInfo$[ebp]
  000c4	56		 push	 esi
  000c5	50		 push	 eax
  000c6	ff 75 0c	 push	 DWORD PTR _tSlot$1$[ebp]
  000c9	53		 push	 ebx
  000ca	ff 75 0c	 push	 DWORD PTR _pCMuRummyInfo$[ebp]
  000cd	e8 00 00 00 00	 call	 ?CardSlotMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@HHPAVCMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::CardSlotMove

; 1034 : 
; 1035 : 	if (Ret == (BYTE)-1)

  000d2	3c ff		 cmp	 al, 255			; 000000ffH
  000d4	74 31		 je	 SHORT $LN29@CGReqCardM

; 1036 : 	{
; 1037 : 		return;
; 1038 : 	}
; 1039 : 	else if (Ret == (BYTE)-2)

  000d6	3c fe		 cmp	 al, 254			; 000000feH
  000d8	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH

; 1040 : 	{
; 1041 : 		sSlot = (BYTE)-1;
; 1042 : 	}
; 1043 : 
; 1044 : 	pMsg.sSlot = sSlot;
; 1045 :     pMsg.tSlot = pCOutCardInfo.GetSlotNum();

  000dd	8a 45 f0	 mov	 al, BYTE PTR _pCOutCardInfo$[ebp+12]
  000e0	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+5], al
  000e3	0f 44 d9	 cmove	 ebx, ecx

; 1046 :     pMsg.btColor = pCOutCardInfo.GetColor();

  000e6	8a 45 e4	 mov	 al, BYTE PTR _pCOutCardInfo$[ebp]
  000e9	88 45 fa	 mov	 BYTE PTR _pMsg$[ebp+6], al

; 1047 :     pMsg.btNumber = pCOutCardInfo.GetNumber();

  000ec	8a 45 e8	 mov	 al, BYTE PTR _pCOutCardInfo$[ebp+4]
  000ef	88 45 fb	 mov	 BYTE PTR _pMsg$[ebp+7], al

; 1048 :     DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  000f2	0f b6 45 f5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000f6	50		 push	 eax
  000f7	8d 45 f4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000fa	88 5d f8	 mov	 BYTE PTR _pMsg$[ebp+4], bl
  000fd	50		 push	 eax
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@CGReqCardM:
  00107	5b		 pop	 ebx
$LN28@CGReqCardM:
  00108	5e		 pop	 esi
$LN17@CGReqCardM:
  00109	5f		 pop	 edi

; 1049 : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 08 00	 ret	 8
?CGReqCardMove@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_CARD_MOVE@@H@Z ENDP ; CMuRummyMng::CGReqCardMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqCardReveal@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_REVEAL_CARD@@H@Z
_TEXT	SEGMENT
_iBeforeCardCnt$1$ = -44				; size = 4
_pMuRummyInfo$ = -44					; size = 4
_this$GSCopy$1$ = -40					; size = 4
_pMsg$ = -36						; size = 20
_stCardInfo$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqCardReveal@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_REVEAL_CARD@@H@Z PROC ; CMuRummyMng::CGReqCardReveal, COMDAT
; _this$ = ecx

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00014	89 4d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 94   : 		this->btCardDeckCnt = 0;

  00017	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+19], 0
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  0001b	c7 45 dc c1 14
	4d 11		 mov	 DWORD PTR _pMsg$[ebp], 290264257 ; 114d14c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 900  : 	if (!OBJMAX_RANGE(aIndex))

  00022	85 ff		 test	 edi, edi
  00024	0f 88 d9 01 00
	00		 js	 $LN12@CGReqCardR
  0002a	33 c0		 xor	 eax, eax
  0002c	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
  00035	85 c0		 test	 eax, eax
  00037	0f 84 c6 01 00
	00		 je	 $LN12@CGReqCardR

; 901  : 	{
; 902  : 		return;
; 903  : 	}
; 904  : 
; 905  : 	if (!gObjIsConnected(aIndex))

  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	0f 84 b5 01 00
	00		 je	 $LN12@CGReqCardR

; 906  : 	{
; 907  : 		return;
; 908  : 	}
; 909  : 
; 910  : 	LPOBJ lpObj = &gObj[aIndex];

  0004e	56		 push	 esi
  0004f	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00055	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 911  : 
; 912  : 	if (!lpObj)

  0005b	75 2a		 jne	 SHORT $LN4@CGReqCardR

; 913  :     {
; 914  : 		LogAddTD("[MuRummy][Error] lpObj is NULL [%s, %d]", __FILE__, __LINE__);

  0005d	68 92 03 00 00	 push	 914			; 00000392H
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CLFNHPNA@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH
  00075	5e		 pop	 esi
  00076	5f		 pop	 edi

; 980  : 	}
; 981  : }

  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN4@CGReqCardR:

; 915  : 		return;
; 916  :     }
; 917  : 	
; 918  : 	if (lpObj->CloseType != -1) 

  00087	80 7e 0d ff	 cmp	 BYTE PTR [esi+13], -1
  0008b	0f 85 71 01 00
	00		 jne	 $LN28@CGReqCardR

; 919  : 	{
; 920  : 		return;
; 921  : 	}
; 922  : 
; 923  : 	CMuRummyInfo* pMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 924  : 
; 925  : 	if (!pMuRummyInfo)

  00091	53		 push	 ebx
  00092	8b 5d d4	 mov	 ebx, DWORD PTR _pMuRummyInfo$[ebp]
  00095	85 db		 test	 ebx, ebx
  00097	75 33		 jne	 SHORT $LN6@CGReqCardR

; 926  : 	{
; 927  : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  00099	68 a0 03 00 00	 push	 928			; 000003a0H
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000a3	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000a6	50		 push	 eax
  000a7	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000aa	50		 push	 eax
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b6	83 c4 14	 add	 esp, 20			; 00000014H
  000b9	5b		 pop	 ebx
  000ba	5e		 pop	 esi
  000bb	5f		 pop	 edi

; 980  : 	}
; 981  : }

  000bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 08 00	 ret	 8
$LN6@CGReqCardR:

; 928  : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 929  : 		return;
; 930  : 	}
; 931  : 
; 932  : 	if (!pMuRummyInfo->GetCardInfo())

  000cc	8b cb		 mov	 ecx, ebx
  000ce	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  000d3	85 c0		 test	 eax, eax
  000d5	75 33		 jne	 SHORT $LN7@CGReqCardR

; 933  : 	{
; 934  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]",

  000d7	68 a7 03 00 00	 push	 935			; 000003a7H
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000e1	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000e4	50		 push	 eax
  000e5	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f4	83 c4 14	 add	 esp, 20			; 00000014H
  000f7	5b		 pop	 ebx
  000f8	5e		 pop	 esi
  000f9	5f		 pop	 edi

; 980  : 	}
; 981  : }

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 08 00	 ret	 8
$LN7@CGReqCardR:

; 935  : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 936  : 		return;
; 937  : 	}
; 938  : 
; 939  : 	if (!pMuRummyInfo->GetCardDeckCnt())

  0010a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0010d	89 45 d4	 mov	 DWORD PTR _iBeforeCardCnt$1$[ebp], eax
  00110	85 c0		 test	 eax, eax
  00112	74 4b		 je	 SHORT $LN30@CGReqCardR

; 940  : 	{
; 941  : 		this->GCSendMsg(aIndex, 2, 0);
; 942  : 		return;
; 943  : 	}
; 944  : 
; 945  : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  00114	8b cb		 mov	 ecx, ebx
  00116	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo

; 946  : 
; 947  : 	if (!pSlotIndexInfo)

  0011b	85 c0		 test	 eax, eax
  0011d	75 33		 jne	 SHORT $LN9@CGReqCardR

; 948  :     {
; 949  : 		 LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  0011f	68 b6 03 00 00	 push	 950			; 000003b6H
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00129	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0012c	50		 push	 eax
  0012d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013c	83 c4 14	 add	 esp, 20			; 00000014H
  0013f	5b		 pop	 ebx
  00140	5e		 pop	 esi
  00141	5f		 pop	 edi

; 980  : 	}
; 981  : }

  00142	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00145	33 cd		 xor	 ecx, ebp
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN9@CGReqCardR:

; 950  : 			 lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 951  : 		 return;
; 952  : 	}
; 953  : 
; 954  : 	BYTE btSlotNum = -1;
; 955  :     btSlotNum = this->GetTempCardShowSlot(pSlotIndexInfo);

  00152	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00155	50		 push	 eax
  00156	e8 00 00 00 00	 call	 ?GetTempCardShowSlot@CMuRummyMng@@QAEEPAE@Z ; CMuRummyMng::GetTempCardShowSlot

; 956  :     
; 957  : 	if (btSlotNum == (BYTE)-1)

  0015b	3c ff		 cmp	 al, 255			; 000000ffH
  0015d	75 20		 jne	 SHORT $LN10@CGReqCardR
$LN30@CGReqCardR:

; 958  : 	{
; 959  : 		this->GCSendMsg(aIndex, 2, 0);

  0015f	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00162	6a 00		 push	 0
  00164	6a 02		 push	 2
  00166	57		 push	 edi
  00167	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg
  0016c	5b		 pop	 ebx
  0016d	5e		 pop	 esi
  0016e	5f		 pop	 edi

; 980  : 	}
; 981  : }

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	33 cd		 xor	 ecx, ebp
  00174	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
$LN10@CGReqCardR:

; 960  : 		return;
; 961  : 	}
; 962  : 
; 963  : 	if (btSlotNum == (BYTE)-2)
; 964  : 	{
; 965  : 		this->GCSendMsg(aIndex, 3, 0);

  0017f	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00182	3c fe		 cmp	 al, 254			; 000000feH
  00184	75 1d		 jne	 SHORT $LN11@CGReqCardR
  00186	6a 00		 push	 0
  00188	6a 03		 push	 3
  0018a	57		 push	 edi
  0018b	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg
  00190	5b		 pop	 ebx
  00191	5e		 pop	 esi
  00192	5f		 pop	 edi

; 980  : 	}
; 981  : }

  00193	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00196	33 cd		 xor	 ecx, ebp
  00198	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019d	8b e5		 mov	 esp, ebp
  0019f	5d		 pop	 ebp
  001a0	c2 08 00	 ret	 8
$LN11@CGReqCardR:

; 966  : 		return;
; 967  : 	}
; 968  : 
; 969  : 	_tagMuRummyCardInfo stCardInfo[3];
; 970  : 	int iBeforeCardCnt = pMuRummyInfo->GetCardDeckCnt();
; 971  : 
; 972  : 	if (this->FillEmptySlotCard(pMuRummyInfo, stCardInfo, lpObj))

  001a3	56		 push	 esi
  001a4	8d 45 f0	 lea	 eax, DWORD PTR _stCardInfo$[ebp]
  001a7	50		 push	 eax
  001a8	53		 push	 ebx
  001a9	e8 00 00 00 00	 call	 ?FillEmptySlotCard@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ; CMuRummyMng::FillEmptySlotCard
  001ae	84 c0		 test	 al, al
  001b0	74 4f		 je	 SHORT $LN29@CGReqCardR

; 973  : 	{
; 974  : 		 LogAddTD("[%s][%s][Mu Rummy] Event Card Cnt(%d) (%d)",

  001b2	ff 73 08	 push	 DWORD PTR [ebx+8]
  001b5	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001b8	ff 75 d4	 push	 DWORD PTR _iBeforeCardCnt$1$[ebp]
  001bb	50		 push	 eax
  001bc	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001bf	50		 push	 eax
  001c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@FAFIGCF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 975  : 			 lpObj->AccountID, lpObj->Name, iBeforeCardCnt, pMuRummyInfo->GetCardDeckCnt());
; 976  : 		 this->Slot5Log(lpObj, 0);

  001cb	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001ce	83 c4 14	 add	 esp, 20			; 00000014H
  001d1	6a 00		 push	 0
  001d3	56		 push	 esi
  001d4	e8 00 00 00 00	 call	 ?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot5Log

; 977  : 		 memcpy(pMsg.stMuRummyCardInfo, stCardInfo, sizeof(stCardInfo));

  001d9	8a 45 f8	 mov	 al, BYTE PTR _stCardInfo$[ebp+8]
  001dc	f3 0f 7e 45 f0	 movq	 xmm0, QWORD PTR _stCardInfo$[ebp]
  001e1	88 45 e8	 mov	 BYTE PTR _pMsg$[ebp+12], al

; 978  : 		 pMsg.btCardDeckCnt = pMuRummyInfo->GetCardDeckCnt();

  001e4	8a 43 08	 mov	 al, BYTE PTR [ebx+8]
  001e7	88 45 ef	 mov	 BYTE PTR _pMsg$[ebp+19], al

; 979  :          DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  001ea	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001ee	50		 push	 eax
  001ef	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001f2	66 0f d6 45 e0	 movq	 QWORD PTR _pMsg$[ebp+4], xmm0
  001f7	50		 push	 eax
  001f8	57		 push	 edi
  001f9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001fe	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN29@CGReqCardR:
  00201	5b		 pop	 ebx
$LN28@CGReqCardR:
  00202	5e		 pop	 esi
$LN12@CGReqCardR:

; 980  : 	}
; 981  : }

  00203	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00206	33 cd		 xor	 ecx, ebp
  00208	5f		 pop	 edi
  00209	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c2 08 00	 ret	 8
?CGReqCardReveal@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_REVEAL_CARD@@H@Z ENDP ; CMuRummyMng::CGReqCardReveal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqMuRummyStart@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_INFO@@H@Z
_TEXT	SEGMENT
_aIndex$GSCopy$1$ = -52					; size = 4
_this$GSCopy$1$ = -48					; size = 4
_pMuRummyInfo$ = -48					; size = 4
_bNewGame$1$ = -41					; size = 1
_pMsg$ = -40						; size = 22
_stCardInfo$ = -16					; size = 9
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqMuRummyStart@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_INFO@@H@Z PROC ; CMuRummyMng::CGReqMuRummyStart, COMDAT
; _this$ = ecx

; 796  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00014	89 4d d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00017	89 7d cc	 mov	 DWORD PTR _aIndex$GSCopy$1$[ebp], edi
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 142  : 		lpBuf[2] = head;

  0001a	c7 45 da 4d 10
	00 00		 mov	 DWORD PTR _pMsg$[ebp+2], 4173 ; 0000104dH
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h

; 75   : 		this->btCardDeckCnt = 0;

  00021	c6 45 de 00	 mov	 BYTE PTR _pMsg$[ebp+6], 0
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00025	66 c7 45 d8 c1
	16		 mov	 WORD PTR _pMsg$[ebp], 5825 ; 000016c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 800  : 	if (!OBJMAX_RANGE(aIndex))

  0002b	85 ff		 test	 edi, edi
  0002d	0f 88 c4 01 00
	00		 js	 $LN15@CGReqMuRum
  00033	33 c0		 xor	 eax, eax
  00035	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  0003b	0f 9e c0	 setle	 al
  0003e	85 c0		 test	 eax, eax
  00040	0f 84 b1 01 00
	00		 je	 $LN15@CGReqMuRum

; 801  : 	{
; 802  : 		return;
; 803  : 	}
; 804  : 
; 805  : 	if (!gObjIsConnected(aIndex))

  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0004c	83 c4 04	 add	 esp, 4
  0004f	85 c0		 test	 eax, eax
  00051	0f 84 a0 01 00
	00		 je	 $LN15@CGReqMuRum

; 806  : 	{
; 807  : 		return;
; 808  : 	}
; 809  : 
; 810  : 	LPOBJ lpObj = &gObj[aIndex];

  00057	53		 push	 ebx
  00058	69 df 40 27 00
	00		 imul	 ebx, edi, 10048
  0005e	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 811  : 
; 812  : 	if (!lpObj)

  00064	75 2a		 jne	 SHORT $LN7@CGReqMuRum

; 813  :     {
; 814  : 		LogAddTD("[MuRummy][Error] lpObj is NULL [%s, %d]", __FILE__, __LINE__);

  00066	68 2e 03 00 00	 push	 814			; 0000032eH
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CLFNHPNA@?$FLMuRummy?$FN?$FLError?$FN?5lpObj?5is?5NULL?5?$FL@
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	5b		 pop	 ebx
  0007f	5f		 pop	 edi

; 892  : 	}
; 893  : }

  00080	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00083	33 cd		 xor	 ecx, ebp
  00085	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
$LN7@CGReqMuRum:

; 815  : 		return;
; 816  :     }
; 817  : 	
; 818  : 	if (lpObj->CloseType != -1) 

  00090	80 7b 0d ff	 cmp	 BYTE PTR [ebx+13], -1
  00094	0f 85 5c 01 00
	00		 jne	 $LN39@CGReqMuRum

; 819  : 	{
; 820  : 		return;
; 821  : 	}
; 822  : 
; 823  : 	CMuRummyInfo* pMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 824  : 
; 825  : 	if (!pMuRummyInfo->IsMuRummyInfoLoad())

  0009a	56		 push	 esi
  0009b	8b 75 d0	 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  0009e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000a2	75 29		 jne	 SHORT $LN9@CGReqMuRum

; 826  : 	{
; 827  : 		LogAddTD("[MuRummy][Error] IsMuRummyInfoLoad fail [%s][%s]", lpObj->AccountID, lpObj->Name);

  000a4	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  000a7	50		 push	 eax
  000a8	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  000ab	50		 push	 eax
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@OBNLPGAF@?$FLMuRummy?$FN?$FLError?$FN?5IsMuRummyInfoLo@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	5f		 pop	 edi

; 892  : 	}
; 893  : }

  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 cd		 xor	 ecx, ebp
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
$LN9@CGReqMuRum:

; 828  :         return;
; 829  : 	}
; 830  : 
; 831  : 	_tagMuRummyCardInfo stCardInfo[3];
; 832  : 	bool bNewGame = false;
; 833  : 
; 834  : 	if (pMuRummyInfo->IsGetPlayCard())

  000cd	80 7e 0c 00	 cmp	 BYTE PTR [esi+12], 0
  000d1	c6 45 d7 00	 mov	 BYTE PTR _bNewGame$1$[ebp], 0
  000d5	0f 84 98 00 00
	00		 je	 $LN10@CGReqMuRum

; 835  : 	{
; 836  : 		if (this->SetPlayCardInfo(pMuRummyInfo, stCardInfo))

  000db	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000de	8d 45 f0	 lea	 eax, DWORD PTR _stCardInfo$[ebp]
  000e1	50		 push	 eax
  000e2	56		 push	 esi
  000e3	e8 00 00 00 00	 call	 ?SetPlayCardInfo@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@@Z ; CMuRummyMng::SetPlayCardInfo
  000e8	84 c0		 test	 al, al
  000ea	74 6c		 je	 SHORT $LN12@CGReqMuRum

; 837  : 		{
; 838  : 			LogAddTD("[%s][%s][Mu Rummy] Event Open", lpObj->AccountID, lpObj->Name);

  000ec	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  000ef	56		 push	 esi
  000f0	8d 7b 52	 lea	 edi, DWORD PTR [ebx+82]
  000f3	57		 push	 edi
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EJENEIOG@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Open?$AA@
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 839  : 			LogAddTD("[%s][%s][Mu Rummy] Event Card Cnt(%d)", lpObj->AccountID, lpObj->Name, pMuRummyInfo->GetCardDeckCnt());

  000ff	8b 45 d0	 mov	 eax, DWORD PTR _pMuRummyInfo$[ebp]
  00102	ff 70 08	 push	 DWORD PTR [eax+8]
  00105	56		 push	 esi
  00106	57		 push	 edi
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EKIKJFIH@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Card?5Cn@
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 840  : 			LogAddTD("[%s][%s][Mu Rummy] Event Point(%d)", lpObj->AccountID, lpObj->Name, pMuRummyInfo->GetScore());

  00112	8b 45 d0	 mov	 eax, DWORD PTR _pMuRummyInfo$[ebp]
  00115	ff 70 04	 push	 DWORD PTR [eax+4]
  00118	56		 push	 esi
  00119	57		 push	 edi
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KPMIGCPB@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Point?$CI?$CF@
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 841  : 			this->Slot5Log(lpObj, 1);

  00125	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00128	83 c4 2c	 add	 esp, 44			; 0000002cH
  0012b	6a 01		 push	 1
  0012d	53		 push	 ebx
  0012e	e8 00 00 00 00	 call	 ?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot5Log

; 842  : 			this->Slot3Log(lpObj, 1);

  00133	6a 01		 push	 1
  00135	53		 push	 ebx
  00136	8b 5d d0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00139	8b cb		 mov	 ecx, ebx
  0013b	e8 00 00 00 00	 call	 ?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot3Log

; 843  : 			memcpy(pMsg.stMuRummyCardInfo, stCardInfo, sizeof(stCardInfo));

  00140	f3 0f 7e 45 f0	 movq	 xmm0, QWORD PTR _stCardInfo$[ebp]
  00145	8a 45 f8	 mov	 al, BYTE PTR _stCardInfo$[ebp+8]

; 844  : 		}
; 845  : 		else

  00148	8b 75 d0	 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  0014b	8b 7d cc	 mov	 edi, DWORD PTR _aIndex$GSCopy$1$[ebp]
  0014e	66 0f d6 45 df	 movq	 QWORD PTR _pMsg$[ebp+7], xmm0
  00153	88 45 e7	 mov	 BYTE PTR _pMsg$[ebp+15], al
  00156	eb 64		 jmp	 SHORT $LN11@CGReqMuRum
$LN12@CGReqMuRum:

; 846  : 		{
; 847  : 			LogAddTD("[MuRummy][Error] SetPlayCardInfo fail [%s][%s]", lpObj->AccountID, lpObj->Name);

  00158	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0015b	50		 push	 eax
  0015c	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@IKDBJHNO@?$FLMuRummy?$FN?$FLError?$FN?5SetPlayCardInfo@
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 848  : 		}
; 849  : 	}
; 850  : 	else

  0016b	8b 5d d0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00171	eb 49		 jmp	 SHORT $LN11@CGReqMuRum
$LN10@CGReqMuRum:

; 851  : 	{
; 852  : 		bool bItem = 0;
; 853  : 
; 854  :         for (int x = 0; x < 32; x++)
; 855  :         {
; 856  : 			//if ( lpObj->pEventInventory[x].IsItem() == 1 
; 857  : 			//	&& lpObj->pEventInventory[x].m_Type == 7384 )
; 858  : 			{
; 859  : 				LogAddTD("[%s][%s][Mu Rummy] Event Start", lpObj->AccountID, lpObj->Name);

  00173	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00176	50		 push	 eax
  00177	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0017a	50		 push	 eax
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@BJLJBPJE@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Event?5Start?$AA@
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH

; 860  : //				LogAddTD("[%s][%s][Mu Rummy] Event Card register success (%u)", lpObj->AccountID, lpObj->Name, lpObj->pEventInventory[x].GetNumber());
; 861  : 				//LogAddEvent("MuRummyEvent:MiniGameStart", lpObj);
; 862  : 				//gObjEventInventoryDeleteItem(aIndex, x);
; 863  : 				//GCEventInventoryItemDeleteSend(aIndex, x, 1);
; 864  : 				bItem = true;
; 865  : 				break;
; 866  : 			}
; 867  :         }
; 868  : 
; 869  :         if (!bItem)
; 870  :         {
; 871  : 			LogAddTD("[%s][%s][Mu Rummy] Event Start Fali (0)", lpObj->AccountID, lpObj->Name);
; 872  : 			this->GCSendMsg(aIndex, 0, 0);
; 873  : 			return;
; 874  :         }
; 875  : 
; 876  :         pMuRummyInfo->Clear();

  00189	8b ce		 mov	 ecx, esi
  0018b	e8 00 00 00 00	 call	 ?Clear@CMuRummyInfo@@QAEXXZ ; CMuRummyInfo::Clear

; 878  :         this->SetCardDeck(pMuRummyInfo);

  00190	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00193	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 44   :     void SetGetPlayCard(bool bPlayCard) { this->m_bPlayCard = bPlayCard; };

  00194	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 878  :         this->SetCardDeck(pMuRummyInfo);

  00198	e8 00 00 00 00	 call	 ?SetCardDeck@CMuRummyMng@@QAEXPAVCMuRummyInfo@@@Z ; CMuRummyMng::SetCardDeck

; 879  :         this->CardShuffle(pMuRummyInfo->GetCardInfo());

  0019d	8b ce		 mov	 ecx, esi
  0019f	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  001a4	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?CardShuffle@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::CardShuffle

; 880  :         this->GDReqCardInfoInsert(lpObj);

  001ad	53		 push	 ebx
  001ae	8b 5d d0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  001b1	8b cb		 mov	 ecx, ebx
  001b3	e8 00 00 00 00	 call	 ?GDReqCardInfoInsert@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@@Z ; CMuRummyMng::GDReqCardInfoInsert

; 881  :         bNewGame = true;

  001b8	c6 45 d7 01	 mov	 BYTE PTR _bNewGame$1$[ebp], 1
$LN11@CGReqMuRum:

; 882  : 	}
; 883  : 
; 884  : 	pMsg.btCardDeckCnt = pMuRummyInfo->GetCardDeckCnt();

  001bc	8a 46 08	 mov	 al, BYTE PTR [esi+8]
  001bf	88 45 de	 mov	 BYTE PTR _pMsg$[ebp+6], al

; 885  :     pMsg.btTotScoreH = SET_NUMBERH(pMuRummyInfo->GetScore());

  001c2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001c5	c1 e8 08	 shr	 eax, 8
  001c8	88 45 dc	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 886  :     pMsg.btTotScoreL = SET_NUMBERL(pMuRummyInfo->GetScore());

  001cb	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  001ce	88 45 dd	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 887  :     DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  001d1	0f b6 45 d9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001d5	50		 push	 eax
  001d6	8d 45 d8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001d9	50		 push	 eax
  001da	57		 push	 edi
  001db	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 888  : 
; 889  :     if (bNewGame)

  001e3	80 7d d7 00	 cmp	 BYTE PTR _bNewGame$1$[ebp], 0
  001e7	74 0c		 je	 SHORT $LN40@CGReqMuRum

; 890  : 	{
; 891  : 		this->GCSendMsg( aIndex, 1, 0);

  001e9	6a 00		 push	 0
  001eb	6a 01		 push	 1
  001ed	57		 push	 edi
  001ee	8b cb		 mov	 ecx, ebx
  001f0	e8 00 00 00 00	 call	 ?GCSendMsg@CMuRummyMng@@QAEXHEH@Z ; CMuRummyMng::GCSendMsg
$LN40@CGReqMuRum:
  001f5	5e		 pop	 esi
$LN39@CGReqMuRum:
  001f6	5b		 pop	 ebx
$LN15@CGReqMuRum:

; 892  : 	}
; 893  : }

  001f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fa	33 cd		 xor	 ecx, ebp
  001fc	5f		 pop	 edi
  001fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00202	8b e5		 mov	 esp, ebp
  00204	5d		 pop	 ebp
  00205	c2 08 00	 ret	 8
?CGReqMuRummyStart@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_INFO@@H@Z ENDP ; CMuRummyMng::CGReqMuRummyStart
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CGReqMuRummyEventOpen@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_EVENT_OPEN@@H@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -20					; size = 4
_pMuRummyInfo$ = -20					; size = 4
_pMsg$ = -16						; size = 9
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?CGReqMuRummyEventOpen@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_EVENT_OPEN@@H@Z PROC ; CMuRummyMng::CGReqMuRummyEventOpen, COMDAT
; _this$ = ecx

; 716  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR _aIndex$[ebp]
  00014	89 4d ec	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  00017	c7 45 f0 c1 09
	4d 0f		 mov	 DWORD PTR _pMsg$[ebp], 256707009 ; 0f4d09c1H
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 719  : 	pMsg.btResult = -1;

  0001e	c6 45 f4 ff	 mov	 BYTE PTR _pMsg$[ebp+4], 255 ; 000000ffH

; 720  : 
; 721  : 	if (!OBJMAX_RANGE(aIndex))

  00022	85 ff		 test	 edi, edi
  00024	0f 88 f0 00 00
	00		 js	 $LN12@CGReqMuRum
  0002a	33 c0		 xor	 eax, eax
  0002c	81 ff eb 2c 00
	00		 cmp	 edi, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
  00035	85 c0		 test	 eax, eax
  00037	0f 84 dd 00 00
	00		 je	 $LN12@CGReqMuRum

; 722  : 	{
; 723  : 		return;
; 724  : 	}
; 725  : 
; 726  : 	if (!gObjIsConnected(aIndex))

  0003d	57		 push	 edi
  0003e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	0f 84 cc 00 00
	00		 je	 $LN12@CGReqMuRum

; 727  : 	{
; 728  : 		return;
; 729  : 	}
; 730  : 	
; 731  : 	LPOBJ lpObj = &gObj[aIndex];

  0004e	56		 push	 esi
  0004f	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00055	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 732  : 	
; 733  : 	if (!lpObj)

  0005b	0f 84 b8 00 00
	00		 je	 $LN25@CGReqMuRum

; 734  : 	{
; 735  : 		return;
; 736  : 	}
; 737  : 
; 738  : 	if (lpObj->CloseType != -1) 

  00061	80 7e 0d ff	 cmp	 BYTE PTR [esi+13], -1
  00065	0f 85 ae 00 00
	00		 jne	 $LN25@CGReqMuRum

; 739  : 	{
; 740  : 		return;
; 741  : 	}
; 742  : 
; 743  : 	if (lpObj->m_IfState.use > 0 && lpObj->m_IfState.type != 3)

  0006b	8b 86 b8 11 00
	00		 mov	 eax, DWORD PTR [esi+4536]
  00071	a8 03		 test	 al, 3
  00073	76 16		 jbe	 SHORT $LN6@CGReqMuRum
  00075	8b c8		 mov	 ecx, eax
  00077	c1 e9 06	 shr	 ecx, 6
  0007a	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00080	83 f9 03	 cmp	 ecx, 3
  00083	74 06		 je	 SHORT $LN6@CGReqMuRum

; 744  : 	{
; 745  : 		 LogAddTD("[MuRummy][Error] [%s][%s][%d] : not event ofen",

  00085	51		 push	 ecx

; 746  : 			 lpObj->AccountID,lpObj->Name, lpObj->m_IfState.type);
; 747  : 		 return;

  00086	e9 03 01 00 00	 jmp	 $LN28@CGReqMuRum
$LN6@CGReqMuRum:

; 748  : 	}
; 749  : 
; 750  : 	if (lpObj->m_bPShopOpen == 1 || lpObj->ChaosLock == 1)

  0008b	80 be 5c 12 00
	00 01		 cmp	 BYTE PTR [esi+4700], 1
  00092	0f 84 ed 00 00
	00		 je	 $LN8@CGReqMuRum
  00098	83 be 20 12 00
	00 01		 cmp	 DWORD PTR [esi+4640], 1
  0009f	0f 84 e0 00 00
	00		 je	 $LN8@CGReqMuRum

; 753  : 			 lpObj->AccountID,lpObj->Name, lpObj->m_IfState.type);
; 754  : 		 return;
; 755  : 	}
; 756  : 
; 757  : 	CMuRummyInfo* pMuRummyInfo;// = lpObj->m_pCMuRummyInfo;
; 758  : 
; 759  : 	if (!pMuRummyInfo)

  000a5	53		 push	 ebx
  000a6	8b 5d ec	 mov	 ebx, DWORD PTR _pMuRummyInfo$[ebp]
  000a9	85 db		 test	 ebx, ebx
  000ab	75 33		 jne	 SHORT $LN9@CGReqMuRum

; 760  : 	{
; 761  : 		LogAddTD("[MuRummy][Error] pMuRummyInfo is NULL [%s][%s] [%s, %d]",

  000ad	68 fa 02 00 00	 push	 762			; 000002faH
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000b7	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000ba	50		 push	 eax
  000bb	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HLPPLHAH@?$FLMuRummy?$FN?$FLError?$FN?5pMuRummyInfo?5is@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ca	83 c4 14	 add	 esp, 20			; 00000014H
  000cd	5b		 pop	 ebx
  000ce	5e		 pop	 esi
  000cf	5f		 pop	 edi

; 792  : 	}
; 793  : }

  000d0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d3	33 cd		 xor	 ecx, ebp
  000d5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
$LN9@CGReqMuRum:

; 762  : 			lpObj->AccountID, lpObj->Name, __FILE__, __LINE__);
; 763  : 		return;
; 764  : 	}
; 765  : 
; 766  : 	if (pMuRummyInfo->IsWaitReward())

  000e0	80 7b 0e 00	 cmp	 BYTE PTR [ebx+14], 0
  000e4	74 45		 je	 SHORT $LN10@CGReqMuRum

; 767  : 	{
; 768  : 		LogAddTD("[MuRummy][DebugLog][%s][%s] Waiting Item Reward(Req Open)", lpObj->AccountID, lpObj->Name);

  000e6	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000e9	50		 push	 eax
  000ea	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GDGLDHIM@?$FLMuRummy?$FN?$FLDebugLog?$FN?$FL?$CFs?$FN?$FL?$CFs?$FN?5Wait@
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 		GCServerMsgStringSend(lMsg.Get(3539), lpObj->m_Index, 1);

  000fc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00101	6a 01		 push	 1
  00103	ff 36		 push	 DWORD PTR [esi]
  00105	68 d3 0d 00 00	 push	 3539			; 00000dd3H
  0010a	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
$LN27@CGReqMuRum:

; 781  : 		{
; 782  : 			 pMsg.btResult = 1;
; 783  :              DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@CGReqMuRum:
  00118	5b		 pop	 ebx
$LN25@CGReqMuRum:
  00119	5e		 pop	 esi
$LN12@CGReqMuRum:
  0011a	5f		 pop	 edi

; 792  : 	}
; 793  : }

  0011b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 08 00	 ret	 8
$LN10@CGReqMuRum:

; 770  : 	}
; 771  : 	else if (this->IsMuRummyEventOn())

  0012b	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  00133	85 c0		 test	 eax, eax
  00135	74 e1		 je	 SHORT $LN26@CGReqMuRum

; 772  : 	{
; 773  : 		CTime tExpireTime; //maybe special initilizator
; 774  : 		DWORD dwExpireSec = 0;//g_PeriodItemEx.GetLeftDate(tExpireTime.GetTime());
; 775  : 		pMsg.btEventTime1 = DWORD((DWORD(dwExpireSec >> 32) >> 16) & 0xFFFF) >> 8;
; 776  : 		pMsg.btEventTime2 = DWORD((DWORD(dwExpireSec >> 32) >> 16) & 0xFFFF) & 0xFF;
; 777  : 		pMsg.btEventTime3 = DWORD((DWORD(dwExpireSec >> 32) & 0xFFFF) & 0xFFFF) >> 8;
; 778  : 		pMsg.btEventTime4 = DWORD((DWORD(dwExpireSec >> 32) & 0xFFFF) & 0xFFFF) & 0xFF;
; 779  : 		
; 780  : 		if (!pMuRummyInfo->IsGetPlayCard())

  00137	80 7b 0c 00	 cmp	 BYTE PTR [ebx+12], 0

; 781  : 		{
; 782  : 			 pMsg.btResult = 1;
; 783  :              DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0013b	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0013f	50		 push	 eax
  00140	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00143	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+5], 0
  0014a	50		 push	 eax
  0014b	57		 push	 edi
  0014c	75 0b		 jne	 SHORT $LN13@CGReqMuRum
  0014e	c6 45 f4 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1
  00152	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 784  : 			 return;

  00157	eb bc		 jmp	 SHORT $LN27@CGReqMuRum
$LN13@CGReqMuRum:

; 785  : 		}
; 786  : 
; 787  : 		pMsg.btResult = 2;

  00159	c6 45 f4 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2

; 788  :         DataSend(aIndex, (LPBYTE)&pMsg, pMsg.h.size);

  0015d	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 789  :         this->CGReqMuRummyStart(0, aIndex);

  00162	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00165	83 c4 0c	 add	 esp, 12			; 0000000cH
  00168	57		 push	 edi
  00169	6a 00		 push	 0
  0016b	e8 00 00 00 00	 call	 ?CGReqMuRummyStart@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_INFO@@H@Z ; CMuRummyMng::CGReqMuRummyStart

; 790  : 
; 791  : 		LogAddTD("[MuRummy] [%s][%s] : Mini Game Open", lpObj->AccountID, lpObj->Name);

  00170	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00173	50		 push	 eax
  00174	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00177	50		 push	 eax
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CNODDPGG@?$FLMuRummy?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5?3?5Mini?5Game?5O@
  0017d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00183	eb 90		 jmp	 SHORT $LN27@CGReqMuRum
$LN8@CGReqMuRum:

; 751  :     {
; 752  : 		LogAddTD("[MuRummy][Error] [%s][%s][%d] : not event ofen",

  00185	c1 e8 06	 shr	 eax, 6
  00188	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  0018d	50		 push	 eax
$LN28@CGReqMuRum:
  0018e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00191	50		 push	 eax
  00192	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00195	50		 push	 eax
  00196	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@ICHPCBKA@?$FLMuRummy?$FN?$FLError?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?5?3?5@
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 792  : 	}
; 793  : }

  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	83 c4 10	 add	 esp, 16			; 00000010H
  001a7	33 cd		 xor	 ecx, ebp
  001a9	5e		 pop	 esi
  001aa	5f		 pop	 edi
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 08 00	 ret	 8
?CGReqMuRummyEventOpen@CMuRummyMng@@QAEXPAU_tagPMSG_REQ_MURUMMY_EVENT_OPEN@@H@Z ENDP ; CMuRummyMng::CGReqMuRummyEventOpen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?FillEmptySlotCard@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
_nCardSeq$1$ = -12					; size = 4
_pCCardInfo$1$ = -8					; size = 4
_pSlotIndexInfo$1$ = -4					; size = 4
tv332 = 8						; size = 4
_pMuRummyInfo$ = 8					; size = 4
_nCardDeckCnt$1$ = 12					; size = 4
_pOutCardInfo$ = 12					; size = 4
_obj$ = 16						; size = 4
?FillEmptySlotCard@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::FillEmptySlotCard, COMDAT
; _this$ = ecx

; 648  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 649  : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _pMuRummyInfo$[ebp]
  0000a	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	8b cb		 mov	 ecx, ebx
  0000f	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00014	89 45 f8	 mov	 DWORD PTR _pCCardInfo$1$[ebp], eax

; 650  : 
; 651  : 	if (!pCCardInfo)

  00017	85 c0		 test	 eax, eax
  00019	75 21		 jne	 SHORT $LN5@FillEmptyS

; 652  : 	{
; 653  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s, %d]", __FILE__, __LINE__);

  0001b	68 8d 02 00 00	 push	 653			; 0000028dH
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 654  : 		return false;

  00033	32 c0		 xor	 al, al
  00035	5b		 pop	 ebx

; 713  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
$LN5@FillEmptyS:

; 655  : 	}
; 656  : 
; 657  : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  0003c	8b cb		 mov	 ecx, ebx
  0003e	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  00043	8b c8		 mov	 ecx, eax
  00045	89 4d fc	 mov	 DWORD PTR _pSlotIndexInfo$1$[ebp], ecx

; 658  : 
; 659  : 	if (!pSlotIndexInfo)

  00048	85 c9		 test	 ecx, ecx
  0004a	75 21		 jne	 SHORT $LN6@FillEmptyS

; 660  : 	{
; 661  : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s, %d]", __FILE__, __LINE__);

  0004c	68 95 02 00 00	 push	 661			; 00000295H
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@NJNPCKOH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH

; 662  : 		return false;

  00064	32 c0		 xor	 al, al
  00066	5b		 pop	 ebx

; 713  : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
$LN6@FillEmptyS:

; 663  : 	}
; 664  : 
; 665  : 	int nCardArr = 0;

  0006d	8b 45 0c	 mov	 eax, DWORD PTR _pOutCardInfo$[ebp]
  00070	56		 push	 esi
  00071	57		 push	 edi
  00072	33 ff		 xor	 edi, edi

; 666  :     
; 667  : 	for (int i = 0; i < 5; i++)

  00074	33 f6		 xor	 esi, esi
  00076	83 c0 02	 add	 eax, 2
  00079	89 45 08	 mov	 DWORD PTR tv332[ebp], eax
  0007c	0f 1f 40 00	 npad	 4
$LL4@FillEmptyS:

; 668  :     {
; 669  : 		if (pSlotIndexInfo[i] != (BYTE)-1)

  00080	80 3c 0e ff	 cmp	 BYTE PTR [esi+ecx], 255	; 000000ffH
  00084	0f 85 8e 00 00
	00		 jne	 $LN2@FillEmptyS

; 670  :         {
; 671  : 			continue;
; 672  : 		}
; 673  : 
; 674  : 		if (nCardArr < 0 || nCardArr > 4)

  0008a	85 ff		 test	 edi, edi
  0008c	0f 88 d8 00 00
	00		 js	 $LN9@FillEmptyS
  00092	83 ff 04	 cmp	 edi, 4
  00095	0f 8f cf 00 00
	00		 jg	 $LN9@FillEmptyS
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 49   :     int GetCardDeckCnt() { return this->m_iCardDeckCnt; };

  0009b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 680  :         int nCardSeq = MURUMMY_MAX_CARD - nCardDeckCnt;

  0009e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  000a3	2b c8		 sub	 ecx, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 49   :     int GetCardDeckCnt() { return this->m_iCardDeckCnt; };

  000a5	89 45 0c	 mov	 DWORD PTR _nCardDeckCnt$1$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 680  :         int nCardSeq = MURUMMY_MAX_CARD - nCardDeckCnt;

  000a8	89 4d f4	 mov	 DWORD PTR _nCardSeq$1$[ebp], ecx

; 681  : 
; 682  : 		if (nCardSeq >= MURUMMY_MAX_CARD )

  000ab	83 f9 18	 cmp	 ecx, 24			; 00000018H
  000ae	0f 8d 9d 00 00
	00		 jge	 $LN40@FillEmptyS
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  000b4	8b 55 f8	 mov	 edx, DWORD PTR _pCCardInfo$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 688  : 		pCCardInfo[nCardSeq].SetSlotNum(i);

  000b7	8b c1		 mov	 eax, ecx
  000b9	c1 e0 04	 shl	 eax, 4

; 694  :         pMuRummyInfo->SetCardDeckCnt(nCardDeckCnt - 1);
; 695  :         nCardArr++;

  000bc	47		 inc	 edi
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  000bd	03 d0		 add	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 690  :         pSlotIndexInfo[i] = nCardSeq;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _pSlotIndexInfo$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  000c2	89 72 0c	 mov	 DWORD PTR [edx+12], esi

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  000c5	c7 42 08 01 00
	00 00		 mov	 DWORD PTR [edx+8], 1
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 690  :         pSlotIndexInfo[i] = nCardSeq;

  000cc	88 0c 06	 mov	 BYTE PTR [esi+eax], cl

; 691  :         pOutCardInfo[nCardArr].btColor = pCCardInfo[nCardSeq].GetColor();

  000cf	8b 4d 08	 mov	 ecx, DWORD PTR tv332[ebp]
  000d2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000d5	88 41 fe	 mov	 BYTE PTR [ecx-2], al

; 692  :         pOutCardInfo[nCardArr].btNumber = pCCardInfo[nCardSeq].GetNumber();

  000d8	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  000dc	88 41 ff	 mov	 BYTE PTR [ecx-1], al

; 693  :         pOutCardInfo[nCardArr].btSlotNum = pCCardInfo[nCardSeq].GetSlotNum();

  000df	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  000e3	88 01		 mov	 BYTE PTR [ecx], al

; 694  :         pMuRummyInfo->SetCardDeckCnt(nCardDeckCnt - 1);
; 695  :         nCardArr++;

  000e5	83 c1 03	 add	 ecx, 3
  000e8	8b 45 0c	 mov	 eax, DWORD PTR _nCardDeckCnt$1$[ebp]
  000eb	48		 dec	 eax
  000ec	89 4d 08	 mov	 DWORD PTR tv332[ebp], ecx

; 697  : 		if (pMuRummyInfo->GetCardDeckCnt() < 0)

  000ef	8b 4d f4	 mov	 ecx, DWORD PTR _nCardSeq$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 43   :     void SetCardDeckCnt(int iCardDeckCnt) { this->m_iCardDeckCnt = iCardDeckCnt; };

  000f2	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 697  : 		if (pMuRummyInfo->GetCardDeckCnt() < 0)

  000f5	85 c0		 test	 eax, eax
  000f7	78 34		 js	 SHORT $LN41@FillEmptyS

; 702  :         }
; 703  : 
; 704  :         this->GDReqSlotInfoUpdate(obj, nCardSeq, pCCardInfo[nCardSeq].GetSlotNum(), pCCardInfo[nCardSeq].GetState());

  000f9	0f b6 42 08	 movzx	 eax, BYTE PTR [edx+8]
  000fd	50		 push	 eax
  000fe	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  00102	50		 push	 eax
  00103	51		 push	 ecx
  00104	ff 75 10	 push	 DWORD PTR _obj$[ebp]
  00107	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0010a	e8 00 00 00 00	 call	 ?GDReqSlotInfoUpdate@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@EEE@Z ; CMuRummyMng::GDReqSlotInfoUpdate

; 705  :         
; 706  : 		if (!pMuRummyInfo->GetCardDeckCnt())

  0010f	83 7b 08 00	 cmp	 DWORD PTR [ebx+8], 0
  00113	74 0d		 je	 SHORT $LN46@FillEmptyS
  00115	8b 4d fc	 mov	 ecx, DWORD PTR _pSlotIndexInfo$1$[ebp]
$LN2@FillEmptyS:

; 666  :     
; 667  : 	for (int i = 0; i < 5; i++)

  00118	46		 inc	 esi
  00119	83 fe 05	 cmp	 esi, 5
  0011c	0f 8c 5e ff ff
	ff		 jl	 $LL4@FillEmptyS
$LN46@FillEmptyS:
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi

; 707  : 		{
; 708  :            return true;
; 709  : 		}
; 710  : 	}
; 711  : 	
; 712  : 	return true;

  00124	b0 01		 mov	 al, 1
  00126	5b		 pop	 ebx

; 713  : }

  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
$LN41@FillEmptyS:

; 698  :         {
; 699  :             LogAddTD("[MuRummy][Error] CardDeck cnt [%d] [%s, %d]", pMuRummyInfo->GetCardDeckCnt(), 

  0012d	68 bc 02 00 00	 push	 700			; 000002bcH
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00137	50		 push	 eax
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OCPFDBGL@?$FLMuRummy?$FN?$FLError?$FN?5CardDeck?5cnt?5?$FL?$CF@
  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00143	83 c4 10	 add	 esp, 16			; 00000010H

; 700  : 				__FILE__, __LINE__);
; 701  :             return false;

  00146	32 c0		 xor	 al, al
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx

; 713  : }

  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 0c 00	 ret	 12			; 0000000cH
$LN40@FillEmptyS:

; 683  :         {
; 684  : 			LogAddTD("[MuRummy][Error] Card Cnt Over [%d] [%s, %d]", nCardSeq, __FILE__, __LINE__);

  00151	68 ac 02 00 00	 push	 684			; 000002acH
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0015b	51		 push	 ecx
  0015c	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LMGDIHHF@?$FLMuRummy?$FN?$FLError?$FN?5Card?5Cnt?5Over?5?$FL@
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00167	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@FillEmptyS:

; 685  :             return false;

  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	32 c0		 xor	 al, al
  0016e	5b		 pop	 ebx

; 713  : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c2 0c 00	 ret	 12			; 0000000cH
?FillEmptySlotCard@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::FillEmptySlotCard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?IsCardNumber@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z
_TEXT	SEGMENT
_pCCardInfo$ = 8					; size = 4
?IsCardNumber@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z PROC ; CMuRummyMng::IsCardNumber, COMDAT
; _this$ = ecx

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 621  : 	for (int i = 0; ; i++)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pCCardInfo$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00010	8b d6		 mov	 edx, esi
$LL4@IsCardNumb:

; 626  : 		}
; 627  : 
; 628  : 		if (pCCardInfo[i].GetNumber() != pCCardInfo[i + 1].GetNumber())

  00012	8b 02		 mov	 eax, DWORD PTR [edx]
  00014	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00017	75 15		 jne	 SHORT $LN24@IsCardNumb

; 621  : 	for (int i = 0; ; i++)

  00019	47		 inc	 edi
  0001a	83 c2 10	 add	 edx, 16			; 00000010H

; 622  : 	{
; 623  : 		if (i >= 2 )

  0001d	83 ff 02	 cmp	 edi, 2
  00020	7c f0		 jl	 SHORT $LL4@IsCardNumb

; 624  : 		{
; 625  : 			return 4;

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	b8 04 00 00 00	 mov	 eax, 4
  00029	5b		 pop	 ebx

; 645  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN24@IsCardNumb:

; 629  : 		{
; 630  : 			break;
; 631  : 		}
; 632  : 	}
; 633  : 
; 634  : 	this->CardSortAscending(pCCardInfo);

  0002e	51		 push	 ecx
  0002f	8b cb		 mov	 ecx, ebx
  00031	e8 00 00 00 00	 call	 ?CardSortAscending@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::CardSortAscending

; 635  : 
; 636  : 	for (int j = 0; j < 2; j++)

  00036	33 c9		 xor	 ecx, ecx
$LL7@IsCardNumb:

; 637  : 	{
; 638  : 		if ( pCCardInfo[j + 1].GetNumber() - pCCardInfo[j].GetNumber() != 1)

  00038	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0003b	2b 06		 sub	 eax, DWORD PTR [esi]
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 15		 jne	 SHORT $LN25@IsCardNumb

; 635  : 
; 636  : 	for (int j = 0; j < 2; j++)

  00042	41		 inc	 ecx
  00043	83 c6 10	 add	 esi, 16			; 00000010H
  00046	83 f9 02	 cmp	 ecx, 2
  00049	7c ed		 jl	 SHORT $LL7@IsCardNumb

; 641  : 		}
; 642  : 	}
; 643  : 
; 644  : 	return 3;

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	b8 03 00 00 00	 mov	 eax, 3
  00052	5b		 pop	 ebx

; 645  : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN25@IsCardNumb:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi

; 639  : 		{
; 640  : 			return 0;

  00059	33 c0		 xor	 eax, eax
  0005b	5b		 pop	 ebx

; 645  : }

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?IsCardNumber@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ENDP ; CMuRummyMng::IsCardNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?IsCardSameColor@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z
_TEXT	SEGMENT
_pCCardInfo$ = 8					; size = 4
?IsCardSameColor@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z PROC ; CMuRummyMng::IsCardSameColor, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : 	for (int i = 0; i < 2; i++)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  00006	33 d2		 xor	 edx, edx
$LL4@IsCardSame:

; 609  : 	{
; 610  : 		if (pCCardInfo[i].GetColor() != pCCardInfo[i + 1].GetColor())

  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  0000d	75 12		 jne	 SHORT $LN12@IsCardSame

; 608  : 	for (int i = 0; i < 2; i++)

  0000f	42		 inc	 edx
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	83 fa 02	 cmp	 edx, 2
  00016	7c f0		 jl	 SHORT $LL4@IsCardSame

; 613  : 		}
; 614  : 	}
; 615  : 
; 616  : 	return 2;

  00018	b8 02 00 00 00	 mov	 eax, 2

; 617  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN12@IsCardSame:

; 611  : 		{
; 612  : 			return 1;

  00021	b8 01 00 00 00	 mov	 eax, 1

; 617  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?IsCardSameColor@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ENDP ; CMuRummyMng::IsCardSameColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CardSortAscending@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z
_TEXT	SEGMENT
_CCardInfoTmp$1$ = -12					; size = 4
tv641 = -8						; size = 4
tv642 = -4						; size = 4
_pCCardInfo$ = 8					; size = 4
?CardSortAscending@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z PROC ; CMuRummyMng::CardSortAscending, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 579  : 	CMuRummyCardInfo CCardInfoTmp;
; 580  : 
; 581  : 	for (int i = 0; i < 2; i++)

  00007	b9 02 00 00 00	 mov	 ecx, 2
  0000c	89 4d f8	 mov	 DWORD PTR tv641[ebp], ecx
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 583  : 		for (int j = 0; j < 3 - i - 1; j++)

  00011	85 c9		 test	 ecx, ecx
  00013	7e 55		 jle	 SHORT $LN2@CardSortAs
$LN71@CardSortAs:
  00015	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 4d fc	 mov	 DWORD PTR tv642[ebp], ecx
  0001e	66 90		 npad	 2
$LL7@CardSortAs:

; 584  : 		{
; 585  : 			if (pCCardInfo[j].GetNumber() > pCCardInfo[j + 1].GetNumber())

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
  00022	89 75 f4	 mov	 DWORD PTR _CCardInfoTmp$1$[ebp], esi
  00025	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  00028	7e 32		 jle	 SHORT $LN5@CardSortAs
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0002a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0002d	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00030	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00033	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00036	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00039	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003c	89 08		 mov	 DWORD PTR [eax], ecx

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  0003e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00041	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00044	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00047	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR _CCardInfoTmp$1$[ebp]
  0004d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00050	8b 4d fc	 mov	 ecx, DWORD PTR tv642[ebp]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00053	89 78 0c	 mov	 DWORD PTR [eax+12], edi

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00056	89 70 14	 mov	 DWORD PTR [eax+20], esi

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00059	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN5@CardSortAs:
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 583  : 		for (int j = 0; j < 3 - i - 1; j++)

  0005c	83 c0 10	 add	 eax, 16			; 00000010H
  0005f	83 e9 01	 sub	 ecx, 1
  00062	89 4d fc	 mov	 DWORD PTR tv642[ebp], ecx
  00065	75 b9		 jne	 SHORT $LL7@CardSortAs
  00067	8b 4d f8	 mov	 ecx, DWORD PTR tv641[ebp]
$LN2@CardSortAs:

; 579  : 	CMuRummyCardInfo CCardInfoTmp;
; 580  : 
; 581  : 	for (int i = 0; i < 2; i++)

  0006a	49		 dec	 ecx
  0006b	89 4d f8	 mov	 DWORD PTR tv641[ebp], ecx
  0006e	85 c9		 test	 ecx, ecx
  00070	7f a3		 jg	 SHORT $LN71@CardSortAs
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 586  : 			{
; 587  : 				CCardInfoTmp.SetColor(pCCardInfo[j].GetColor());
; 588  : 				CCardInfoTmp.SetNumber(pCCardInfo[j].GetNumber());
; 589  : 				CCardInfoTmp.SetState(pCCardInfo[j].GetState());
; 590  : 				CCardInfoTmp.SetSlotNum(pCCardInfo[j].GetSlotNum());
; 591  : 
; 592  : 				pCCardInfo[j].SetColor(pCCardInfo[j + 1].GetColor());
; 593  : 				pCCardInfo[j].SetNumber(pCCardInfo[j + 1].GetNumber());
; 594  : 				pCCardInfo[j].SetState(pCCardInfo[j + 1].GetState());
; 595  : 				pCCardInfo[j].SetSlotNum(pCCardInfo[j + 1].GetSlotNum());
; 596  : 
; 597  : 				pCCardInfo[j + 1].SetColor(CCardInfoTmp.GetColor());
; 598  : 				pCCardInfo[j + 1].SetNumber(CCardInfoTmp.GetNumber());
; 599  : 				pCCardInfo[j + 1].SetState(CCardInfoTmp.GetState());
; 600  : 				pCCardInfo[j + 1].SetSlotNum(CCardInfoTmp.GetSlotNum());
; 601  : 			}
; 602  : 		}
; 603  : 	}
; 604  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
?CardSortAscending@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ENDP ; CMuRummyMng::CardSortAscending
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pOutCardUpdateDS$GSCopy$1$ = -80			; size = 4
_nRetCardColor$1$ = -76					; size = 4
_iOutScore$GSCopy$1$ = -72				; size = 4
_this$GSCopy$1$ = -68					; size = 4
_CCardInfoTmp$ = -64					; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCMuRummyInfo$ = 8					; size = 4
_iOutScore$ = 12					; size = 4
_pOutCardUpdateDS$ = 16					; size = 4
_obj$ = 20						; size = 4
?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::CardMatchCheck, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _iOutScore$[ebp]
  00031	8b 75 08	 mov	 esi, DWORD PTR _pCMuRummyInfo$[ebp]

; 457  : 	//Need recheck structure, maybe not valid return
; 458  : 
; 459  : 	CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  00034	8b ce		 mov	 ecx, esi
  00036	8b 5d 14	 mov	 ebx, DWORD PTR _obj$[ebp]
  00039	89 45 b8	 mov	 DWORD PTR _iOutScore$GSCopy$1$[ebp], eax
  0003c	8b 45 10	 mov	 eax, DWORD PTR _pOutCardUpdateDS$[ebp]
  0003f	89 45 b0	 mov	 DWORD PTR _pOutCardUpdateDS$GSCopy$1$[ebp], eax
  00042	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00047	8b f8		 mov	 edi, eax

; 460  : 	
; 461  : 	if (!pCCardInfo)

  00049	85 ff		 test	 edi, edi
  0004b	75 27		 jne	 SHORT $LN11@CardMatchC

; 462  : 	{
; 463  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]", 

  0004d	68 d0 01 00 00	 push	 464			; 000001d0H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00057	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0005a	50		 push	 eax
  0005b	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0005e	50		 push	 eax
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006a	83 c4 14	 add	 esp, 20			; 00000014H

; 464  : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 465  : 		return -1;

  0006d	0c ff		 or	 al, 255			; 000000ffH
  0006f	e9 48 02 00 00	 jmp	 $LN1@CardMatchC
$LN11@CardMatchC:

; 466  : 	}
; 467  : 
; 468  : 	LPBYTE pSlotIndexInfo = pCMuRummyInfo->GetSlotIndexInfo();

  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  0007b	8b f0		 mov	 esi, eax

; 469  : 	
; 470  : 	if (!pSlotIndexInfo)

  0007d	85 f6		 test	 esi, esi
  0007f	75 27		 jne	 SHORT $LN12@CardMatchC

; 471  : 	{
; 472  : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  00081	68 d9 01 00 00	 push	 473			; 000001d9H
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0008b	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0008e	50		 push	 eax
  0008f	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00092	50		 push	 eax
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009e	83 c4 14	 add	 esp, 20			; 00000014H

; 473  : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 474  : 		return -1;

  000a1	0c ff		 or	 al, 255			; 000000ffH
  000a3	e9 14 02 00 00	 jmp	 $LN1@CardMatchC
$LN12@CardMatchC:

; 475  : 	}
; 476  : 
; 477  : 	CMuRummyCardInfo CCardInfoTmp[3];

  000a8	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  000ad	68 00 00 00 00	 push	 OFFSET ??0CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::CMuRummyCardInfo
  000b2	6a 03		 push	 3
  000b4	6a 10		 push	 16			; 00000010H
  000b6	8d 45 c0	 lea	 eax, DWORD PTR _CCardInfoTmp$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 483  : 		if (pSlotIndexInfo[nCnt] != (BYTE)-1)

  000bf	8a 46 05	 mov	 al, BYTE PTR [esi+5]
  000c2	33 d2		 xor	 edx, edx
  000c4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000cb	3c ff		 cmp	 al, 255			; 000000ffH
  000cd	74 37		 je	 SHORT $LN2@CardMatchC

; 484  : 		{
; 485  : 			CCardInfoTmp[nChkCnt].SetColor(pCCardInfo[pSlotIndexInfo[nCnt]].GetColor());

  000cf	0f b6 c0	 movzx	 eax, al

; 489  : 			nChkCnt++;

  000d2	ba 01 00 00 00	 mov	 edx, 1
  000d7	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  000d9	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]
  000dc	89 45 c0	 mov	 DWORD PTR _CCardInfoTmp$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 486  : 			CCardInfoTmp[nChkCnt].SetNumber(pCCardInfo[pSlotIndexInfo[nCnt]].GetNumber());

  000df	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000e3	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  000e5	8b 44 c7 04	 mov	 eax, DWORD PTR [edi+eax*8+4]
  000e9	89 45 c4	 mov	 DWORD PTR _CCardInfoTmp$[ebp+4], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 487  : 			CCardInfoTmp[nChkCnt].SetState(pCCardInfo[pSlotIndexInfo[nCnt]].GetState());

  000ec	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000f0	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  000f2	8b 44 c7 08	 mov	 eax, DWORD PTR [edi+eax*8+8]
  000f6	89 45 c8	 mov	 DWORD PTR _CCardInfoTmp$[ebp+8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 488  : 			CCardInfoTmp[nChkCnt].SetSlotNum(pCCardInfo[pSlotIndexInfo[nCnt]].GetSlotNum());

  000f9	0f b6 46 05	 movzx	 eax, BYTE PTR [esi+5]
  000fd	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  000ff	8b 44 c7 0c	 mov	 eax, DWORD PTR [edi+eax*8+12]
  00103	89 45 cc	 mov	 DWORD PTR _CCardInfoTmp$[ebp+12], eax
$LN2@CardMatchC:
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 483  : 		if (pSlotIndexInfo[nCnt] != (BYTE)-1)

  00106	8a 46 06	 mov	 al, BYTE PTR [esi+6]
  00109	3c ff		 cmp	 al, 255			; 000000ffH
  0010b	74 3b		 je	 SHORT $LN80@CardMatchC

; 484  : 		{
; 485  : 			CCardInfoTmp[nChkCnt].SetColor(pCCardInfo[pSlotIndexInfo[nCnt]].GetColor());

  0010d	0f b6 c0	 movzx	 eax, al
  00110	8b ca		 mov	 ecx, edx
  00112	03 c0		 add	 eax, eax
  00114	03 c9		 add	 ecx, ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 16   :     int GetColor() { return this->m_iColor; };

  00116	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00119	89 44 cd c0	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 486  : 			CCardInfoTmp[nChkCnt].SetNumber(pCCardInfo[pSlotIndexInfo[nCnt]].GetNumber());

  0011d	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  00121	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 17   :     int GetNumber() { return this->m_iNumber; };

  00123	8b 44 c7 04	 mov	 eax, DWORD PTR [edi+eax*8+4]

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00127	89 44 cd c4	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+4], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 487  : 			CCardInfoTmp[nChkCnt].SetState(pCCardInfo[pSlotIndexInfo[nCnt]].GetState());

  0012b	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  0012f	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  00131	8b 44 c7 08	 mov	 eax, DWORD PTR [edi+eax*8+8]

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00135	89 44 cd c8	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 488  : 			CCardInfoTmp[nChkCnt].SetSlotNum(pCCardInfo[pSlotIndexInfo[nCnt]].GetSlotNum());

  00139	0f b6 46 06	 movzx	 eax, BYTE PTR [esi+6]
  0013d	03 c0		 add	 eax, eax

; 489  : 			nChkCnt++;

  0013f	42		 inc	 edx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 19   :     int GetSlotNum() { return this->m_iSlotNum; };

  00140	8b 44 c7 0c	 mov	 eax, DWORD PTR [edi+eax*8+12]

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00144	89 44 cd cc	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+12], eax
$LN80@CardMatchC:
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 483  : 		if (pSlotIndexInfo[nCnt] != (BYTE)-1)

  00148	8a 46 07	 mov	 al, BYTE PTR [esi+7]
  0014b	3c ff		 cmp	 al, 255			; 000000ffH
  0014d	74 3b		 je	 SHORT $LN82@CardMatchC

; 484  : 		{
; 485  : 			CCardInfoTmp[nChkCnt].SetColor(pCCardInfo[pSlotIndexInfo[nCnt]].GetColor());

  0014f	0f b6 c0	 movzx	 eax, al
  00152	8b ca		 mov	 ecx, edx
  00154	03 c0		 add	 eax, eax
  00156	03 c9		 add	 ecx, ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 16   :     int GetColor() { return this->m_iColor; };

  00158	8b 04 c7	 mov	 eax, DWORD PTR [edi+eax*8]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0015b	89 44 cd c0	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 486  : 			CCardInfoTmp[nChkCnt].SetNumber(pCCardInfo[pSlotIndexInfo[nCnt]].GetNumber());

  0015f	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00163	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 17   :     int GetNumber() { return this->m_iNumber; };

  00165	8b 44 c7 04	 mov	 eax, DWORD PTR [edi+eax*8+4]

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00169	89 44 cd c4	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+4], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 487  : 			CCardInfoTmp[nChkCnt].SetState(pCCardInfo[pSlotIndexInfo[nCnt]].GetState());

  0016d	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  00171	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  00173	8b 44 c7 08	 mov	 eax, DWORD PTR [edi+eax*8+8]

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00177	89 44 cd c8	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+8], eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 488  : 			CCardInfoTmp[nChkCnt].SetSlotNum(pCCardInfo[pSlotIndexInfo[nCnt]].GetSlotNum());

  0017b	0f b6 46 07	 movzx	 eax, BYTE PTR [esi+7]
  0017f	03 c0		 add	 eax, eax

; 489  : 			nChkCnt++;

  00181	42		 inc	 edx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 19   :     int GetSlotNum() { return this->m_iSlotNum; };

  00182	8b 44 c7 0c	 mov	 eax, DWORD PTR [edi+eax*8+12]

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00186	89 44 cd cc	 mov	 DWORD PTR _CCardInfoTmp$[ebp+ecx*8+12], eax
$LN82@CardMatchC:
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 493  : 	if (nChkCnt != 3)

  0018a	83 fa 03	 cmp	 edx, 3
  0018d	74 08		 je	 SHORT $LN14@CardMatchC
  0018f	80 cb ff	 or	 bl, 255			; 000000ffH
  00192	e9 0a 01 00 00	 jmp	 $LN31@CardMatchC
$LN14@CardMatchC:

; 494  : 	{
; 495  : 		return -1;
; 496  : 	}
; 497  : 
; 498  : 	this->Slot3Log(obj, 1);

  00197	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0019a	6a 01		 push	 1
  0019c	53		 push	 ebx
  0019d	e8 00 00 00 00	 call	 ?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot3Log

; 499  : 	int nRetCardColor = this->IsCardSameColor(CCardInfoTmp);

  001a2	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001a5	8d 45 c0	 lea	 eax, DWORD PTR _CCardInfoTmp$[ebp]
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?IsCardSameColor@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::IsCardSameColor

; 500  : 	int nRetCardNum = this->IsCardNumber(CCardInfoTmp);

  001ae	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001b1	89 45 b4	 mov	 DWORD PTR _nRetCardColor$1$[ebp], eax
  001b4	8d 45 c0	 lea	 eax, DWORD PTR _CCardInfoTmp$[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ?IsCardNumber@CMuRummyMng@@QAEHPAVCMuRummyCardInfo@@@Z ; CMuRummyMng::IsCardNumber

; 501  : 
; 502  : 	if (nRetCardColor == 1 && nRetCardNum == 3)

  001bd	8b 4d b4	 mov	 ecx, DWORD PTR _nRetCardColor$1$[ebp]
  001c0	83 f9 01	 cmp	 ecx, 1
  001c3	75 1d		 jne	 SHORT $LN15@CardMatchC
  001c5	83 f8 03	 cmp	 eax, 3
  001c8	75 08		 jne	 SHORT $LN85@CardMatchC

; 503  : 	{
; 504  : 		iOutScore = 10 * (CCardInfoTmp->GetNumber() - 1) + 10;

  001ca	8b 45 c4	 mov	 eax, DWORD PTR _CCardInfoTmp$[ebp+4]
  001cd	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]

; 505  : 	}
; 506  : 
; 507  : 	if (nRetCardColor == 2 && nRetCardNum == 3)

  001d0	eb 23		 jmp	 SHORT $LN89@CardMatchC
$LN85@CardMatchC:

; 510  : 	}
; 511  : 
; 512  : 	if (nRetCardColor == 1 && nRetCardNum == 4)

  001d2	83 f8 04	 cmp	 eax, 4
  001d5	75 25		 jne	 SHORT $LN17@CardMatchC

; 513  : 	{
; 514  : 		iOutScore = 10 * (CCardInfoTmp->GetNumber() - 1) + 20;

  001d7	8b 45 c4	 mov	 eax, DWORD PTR _CCardInfoTmp$[ebp+4]
  001da	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001dd	83 c0 05	 add	 eax, 5
  001e0	eb 13		 jmp	 SHORT $LN89@CardMatchC
$LN15@CardMatchC:

; 505  : 	}
; 506  : 
; 507  : 	if (nRetCardColor == 2 && nRetCardNum == 3)

  001e2	83 f9 02	 cmp	 ecx, 2
  001e5	75 15		 jne	 SHORT $LN17@CardMatchC
  001e7	83 f8 03	 cmp	 eax, 3
  001ea	75 10		 jne	 SHORT $LN17@CardMatchC

; 508  : 	{
; 509  : 		iOutScore = 10 * (CCardInfoTmp->GetNumber() - 1) + 50;

  001ec	8b 45 c4	 mov	 eax, DWORD PTR _CCardInfoTmp$[ebp+4]
  001ef	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001f2	83 c0 14	 add	 eax, 20			; 00000014H
$LN89@CardMatchC:
  001f5	8b 4d b8	 mov	 ecx, DWORD PTR _iOutScore$GSCopy$1$[ebp]
  001f8	03 c0		 add	 eax, eax
  001fa	89 01		 mov	 DWORD PTR [ecx], eax
$LN17@CardMatchC:

; 515  : 	}
; 516  : 
; 517  : 	int iCnt = 0;

  001fc	8b 55 b0	 mov	 edx, DWORD PTR _pOutCardUpdateDS$GSCopy$1$[ebp]

; 518  : 
; 519  :     for (int i = 5; i < MURUMMY_MAX_SLOT; i++)

  001ff	b9 05 00 00 00	 mov	 ecx, 5
  00204	83 c2 02	 add	 edx, 2
$LL7@CardMatchC:

; 520  :     {
; 521  : 		if (pSlotIndexInfo[i] == (BYTE)-1 )

  00207	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  0020a	3c ff		 cmp	 al, 255			; 000000ffH
  0020c	74 49		 je	 SHORT $LN5@CardMatchC

; 522  : 		{
; 523  : 			continue;
; 524  : 		}
; 525  : 
; 526  : 		if (pSlotIndexInfo[i] < 0 || pSlotIndexInfo[i] > MURUMMY_MAX_CARD - 1)

  0020e	3c 17		 cmp	 al, 23			; 00000017H
  00210	0f 87 c4 00 00
	00		 ja	 $LN67@CardMatchC

; 531  : 		}
; 532  : 
; 533  :         pCCardInfo[pSlotIndexInfo[i]].SetSlotNum( -1);

  00216	0f b6 c0	 movzx	 eax, al
  00219	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  0021b	c7 44 c7 0c ff
	ff ff ff	 mov	 DWORD PTR [edi+eax*8+12], -1
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 534  :         pCCardInfo[pSlotIndexInfo[i]].SetState(3);

  00223	0f b6 04 31	 movzx	 eax, BYTE PTR [ecx+esi]
  00227	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00229	c7 44 c7 08 03
	00 00 00	 mov	 DWORD PTR [edi+eax*8+8], 3
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 538  : 		pOutCardUpdateDS[iCnt].btSeq = pSlotIndexInfo[i];

  00231	8a 04 31	 mov	 al, BYTE PTR [ecx+esi]
  00234	88 42 ff	 mov	 BYTE PTR [edx-1], al

; 539  :         pOutCardUpdateDS[iCnt].btSlotNum = pCCardInfo[pSlotIndexInfo[i]].GetSlotNum();

  00237	0f b6 04 31	 movzx	 eax, BYTE PTR [ecx+esi]
  0023b	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 19   :     int GetSlotNum() { return this->m_iSlotNum; };

  0023d	8b 44 c7 0c	 mov	 eax, DWORD PTR [edi+eax*8+12]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 539  :         pOutCardUpdateDS[iCnt].btSlotNum = pCCardInfo[pSlotIndexInfo[i]].GetSlotNum();

  00241	88 42 fe	 mov	 BYTE PTR [edx-2], al

; 540  :         pOutCardUpdateDS[iCnt].btStatus = pCCardInfo[pSlotIndexInfo[i]].GetState();

  00244	0f b6 04 31	 movzx	 eax, BYTE PTR [ecx+esi]
  00248	03 c0		 add	 eax, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  0024a	8b 44 c7 08	 mov	 eax, DWORD PTR [edi+eax*8+8]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 540  :         pOutCardUpdateDS[iCnt].btStatus = pCCardInfo[pSlotIndexInfo[i]].GetState();

  0024e	88 02		 mov	 BYTE PTR [edx], al

; 541  : 
; 542  :         pSlotIndexInfo[i] = -1;
; 543  : 		iCnt++;

  00250	83 c2 03	 add	 edx, 3
  00253	c6 04 31 ff	 mov	 BYTE PTR [ecx+esi], 255	; 000000ffH
$LN5@CardMatchC:

; 518  : 
; 519  :     for (int i = 5; i < MURUMMY_MAX_SLOT; i++)

  00257	41		 inc	 ecx
  00258	83 f9 08	 cmp	 ecx, 8
  0025b	7c aa		 jl	 SHORT $LL7@CardMatchC

; 544  : 	}
; 545  : 
; 546  : 	int nSlotNum = 5;

  0025d	ba 05 00 00 00	 mov	 edx, 5

; 547  : 
; 548  : 	for (int n = 0; n < 5; n++)

  00262	33 c9		 xor	 ecx, ecx
$LL10@CardMatchC:

; 549  : 	{
; 550  : 		if (pSlotIndexInfo[n] != (BYTE)-1 )

  00264	80 3c 31 ff	 cmp	 BYTE PTR [ecx+esi], 255	; 000000ffH
  00268	75 2f		 jne	 SHORT $LN8@CardMatchC

; 551  : 		{
; 552  : 			continue;
; 553  : 		}
; 554  : 
; 555  : 		if (nSlotNum < 0 || nSlotNum > MURUMMY_MAX_SLOT - 1)

  0026a	85 d2		 test	 edx, edx
  0026c	0f 88 b2 00 00
	00		 js	 $LN23@CardMatchC
  00272	83 fa 07	 cmp	 edx, 7
  00275	0f 8f a9 00 00
	00		 jg	 $LN23@CardMatchC

; 556  : 		{
; 557  : 			return -2;
; 558  : 		}
; 559  : 
; 560  : 		pSlotIndexInfo[n] = pSlotIndexInfo[nSlotNum];

  0027b	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  0027e	88 04 31	 mov	 BYTE PTR [ecx+esi], al

; 561  : 
; 562  : 		if (pSlotIndexInfo[n] < 0 || pSlotIndexInfo[n] > MURUMMY_MAX_CARD - 1)

  00281	3c 17		 cmp	 al, 23			; 00000017H

; 567  : 		}
; 568  : 		
; 569  : 		pCCardInfo[pSlotIndexInfo[n]].SetSlotNum(n);

  00283	0f b6 c0	 movzx	 eax, al
  00286	0f 87 77 00 00
	00		 ja	 $LN69@CardMatchC
  0028c	c1 e0 04	 shl	 eax, 4
  0028f	03 c7		 add	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00291	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 570  : 		pSlotIndexInfo[nSlotNum] = -1;

  00294	c6 04 32 ff	 mov	 BYTE PTR [edx+esi], 255	; 000000ffH

; 571  : 		nSlotNum++;

  00298	42		 inc	 edx
$LN8@CardMatchC:

; 547  : 
; 548  : 	for (int n = 0; n < 5; n++)

  00299	41		 inc	 ecx
  0029a	83 f9 05	 cmp	 ecx, 5
  0029d	7c c5		 jl	 SHORT $LL10@CardMatchC

; 572  : 	}
; 573  : 
; 574  : 	return 0;

  0029f	32 db		 xor	 bl, bl
$LN31@CardMatchC:
  002a1	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  002a6	6a 03		 push	 3
  002a8	6a 10		 push	 16			; 00000010H
  002aa	8d 45 c0	 lea	 eax, DWORD PTR _CCardInfoTmp$[ebp]
  002ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b4	50		 push	 eax
  002b5	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  002ba	8a c3		 mov	 al, bl
$LN1@CardMatchC:

; 575  : }

  002bc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002bf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c6	59		 pop	 ecx
  002c7	5f		 pop	 edi
  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cd	33 cd		 xor	 ecx, ebp
  002cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d4	8b e5		 mov	 esp, ebp
  002d6	5d		 pop	 ebp
  002d7	c2 10 00	 ret	 16			; 00000010H
$LN67@CardMatchC:

; 527  : 		{
; 528  : 			LogAddTD("[MuRummy][Error] Combine CardInfo Index is Overflow [%s][%s][%d] [%s, %d]",

  002da	0f b6 04 31	 movzx	 eax, BYTE PTR [ecx+esi]
  002de	68 11 02 00 00	 push	 529			; 00000211H
  002e3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  002e8	50		 push	 eax
  002e9	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  002ec	50		 push	 eax
  002ed	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  002f0	50		 push	 eax
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@CMFPDAGG@?$FLMuRummy?$FN?$FLError?$FN?5Combine?5CardInf@
  002f6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002fc	83 c4 18	 add	 esp, 24			; 00000018H

; 529  : 				obj->AccountID, obj->Name, pSlotIndexInfo[i], __FILE__, __LINE__);
; 530  : 			return -2;

  002ff	b3 fe		 mov	 bl, 254			; 000000feH
  00301	eb 9e		 jmp	 SHORT $LN31@CardMatchC
$LN69@CardMatchC:

; 563  : 		{
; 564  : 			LogAddTD("[MuRummy][Error] CardInfo Index is Overflow [%s][%s][%d] [%s, %d]",

  00303	68 35 02 00 00	 push	 565			; 00000235H
  00308	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0030d	50		 push	 eax
  0030e	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00311	50		 push	 eax
  00312	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00315	50		 push	 eax
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@HECGBNNH@?$FLMuRummy?$FN?$FLError?$FN?5CardInfo?5Index?5@
  0031b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00321	83 c4 18	 add	 esp, 24			; 00000018H
$LN23@CardMatchC:

; 565  : 				obj->AccountID, obj->Name, pSlotIndexInfo[n], __FILE__, __LINE__);
; 566  : 			return -2;

  00324	b3 fe		 mov	 bl, 254			; 000000feH
  00326	e9 76 ff ff ff	 jmp	 $LN31@CardMatchC
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  00005	6a 03		 push	 3
  00007	6a 10		 push	 16			; 00000010H
  00009	8d 45 c0	 lea	 eax, DWORD PTR _CCardInfoTmp$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00012	c3		 ret	 0
__ehhandler$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CardMatchCheck@CMuRummyMng@@QAEEPAVCMuRummyInfo@@AAHPAU_tagMuRummyCardUpdateDS@@PAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::CardMatchCheck
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CardSlotReMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@H@Z
_TEXT	SEGMENT
_pCMuRummyInfo$ = 8					; size = 4
_sSlot$ = 12						; size = 4
?CardSlotReMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@H@Z PROC ; CMuRummyMng::CardSlotReMove, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 419  : 	CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pCMuRummyInfo$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	57		 push	 edi
  0000a	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  0000f	8b f8		 mov	 edi, eax

; 420  : 
; 421  : 	if (!pCCardInfo )

  00011	85 ff		 test	 edi, edi
  00013	75 23		 jne	 SHORT $LN2@CardSlotRe

; 422  : 	{	 
; 423  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL SlotNum [%d] [%s, %d]", sSlot, __FILE__, __LINE__);

  00015	68 a7 01 00 00	 push	 423			; 000001a7H
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0001f	ff 75 0c	 push	 DWORD PTR _sSlot$[ebp]
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@DBIEBIMK@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 424  : 		return -1;

  00030	0c ff		 or	 al, 255			; 000000ffH
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi

; 453  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN2@CardSlotRe:

; 425  : 	}
; 426  : 
; 427  : 	LPBYTE pSlotIndexInfo = pCMuRummyInfo->GetSlotIndexInfo();

  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo

; 428  :   
; 429  : 	if (!pSlotIndexInfo )

  0003f	85 c0		 test	 eax, eax
  00041	75 23		 jne	 SHORT $LN3@CardSlotRe

; 430  : 	{
; 431  : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL SlotNum [%d] [%s, %d]", sSlot, __FILE__, __LINE__);

  00043	68 af 01 00 00	 push	 431			; 000001afH
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0004d	ff 75 0c	 push	 DWORD PTR _sSlot$[ebp]
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@PFNOAPLF@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005b	83 c4 10	 add	 esp, 16			; 00000010H

; 432  : 		return -1;

  0005e	0c ff		 or	 al, 255			; 000000ffH
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 453  : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN3@CardSlotRe:

; 433  : 	}
; 434  : 
; 435  :     if (pSlotIndexInfo[sSlot] == (BYTE)-1)

  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _sSlot$[ebp]
  00069	8a 14 08	 mov	 dl, BYTE PTR [eax+ecx]
  0006c	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  0006f	80 fa ff	 cmp	 dl, 255			; 000000ffH
  00072	75 21		 jne	 SHORT $LN4@CardSlotRe

; 436  :     {
; 437  :         LogAddTD("[MuRummy][Error] Slot is Empty SlotNum [%d] [%s, %d]", sSlot, __FILE__, __LINE__);

  00074	68 b5 01 00 00	 push	 437			; 000001b5H
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  0007e	51		 push	 ecx
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@OMEGHBAF@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5is?5Empty?5S@
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 438  :         return -1;

  0008d	0c ff		 or	 al, 255			; 000000ffH
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 453  : }

  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN4@CardSlotRe:

; 443  : 	if (pCCardInfo[sCardArr].GetSlotNum() != sSlot)

  00095	0f b6 c2	 movzx	 eax, dl
  00098	c1 e0 04	 shl	 eax, 4
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 19   :     int GetSlotNum() { return this->m_iSlotNum; };

  0009b	03 c7		 add	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 443  : 	if (pCCardInfo[sCardArr].GetSlotNum() != sSlot)

  0009d	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  000a0	74 20		 je	 SHORT $LN5@CardSlotRe

; 444  : 	{
; 445  : 		LogAddTD("[MuRummy][Error] Slot Num diff [%s, %d]", __FILE__, __LINE__);

  000a2	68 bd 01 00 00	 push	 445			; 000001bdH
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HPEAMECE@?$FLMuRummy?$FN?$FLError?$FN?5Slot?5Num?5diff?5?$FL@
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 446  : 		return -1;

  000ba	0c ff		 or	 al, 255			; 000000ffH
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi

; 453  : }

  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
$LN5@CardSlotRe:
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  000c2	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  000c9	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [eax+8], 2
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 452  :     return sCardArr;

  000d0	8a c2		 mov	 al, dl
  000d2	5f		 pop	 edi
  000d3	c6 06 ff	 mov	 BYTE PTR [esi], 255	; 000000ffH
  000d6	5e		 pop	 esi

; 453  : }

  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
?CardSlotReMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@H@Z ENDP ; CMuRummyMng::CardSlotReMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CardSlotMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@HHPAVCMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv370 = -8						; size = 4
_this$1$ = -4						; size = 4
_pCMuRummyInfo$ = 8					; size = 4
_sCardArr$1$ = 11					; size = 1
_sSlot$ = 12						; size = 4
tv368 = 16						; size = 4
_tSlot$ = 16						; size = 4
_pCOutCardInfo$ = 20					; size = 4
_obj$ = 24						; size = 4
?CardSlotMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@HHPAVCMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z PROC ; CMuRummyMng::CardSlotMove, COMDAT
; _this$ = ecx

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 326  : 	CMuRummyCardInfo* pCCardInfo = pCMuRummyInfo->GetCardInfo();

  00008	8b 75 08	 mov	 esi, DWORD PTR _pCMuRummyInfo$[ebp]
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00015	8b d8		 mov	 ebx, eax

; 327  : 
; 328  : 	if (!pCCardInfo)

  00017	85 db		 test	 ebx, ebx
  00019	75 2d		 jne	 SHORT $LN2@CardSlotMo

; 329  : 	{
; 330  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s][%s] [%s, %d]", 

  0001b	8b 4d 18	 mov	 ecx, DWORD PTR _obj$[ebp]
  0001e	68 4b 01 00 00	 push	 331			; 0000014bH
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00028	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0002b	50		 push	 eax
  0002c	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0002f	50		 push	 eax
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLOFMILL@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0003b	83 c4 14	 add	 esp, 20			; 00000014H

; 331  : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 332  : 		return -1;

  0003e	0c ff		 or	 al, 255			; 000000ffH
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx

; 415  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 14 00	 ret	 20			; 00000014H
$LN2@CardSlotMo:

; 333  : 	}
; 334  : 
; 335  : 	LPBYTE pSlotIndexInfo = pCMuRummyInfo->GetSlotIndexInfo();

  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  0004f	8b c8		 mov	 ecx, eax

; 336  : 
; 337  : 	if (!pSlotIndexInfo)

  00051	85 c9		 test	 ecx, ecx
  00053	75 2d		 jne	 SHORT $LN3@CardSlotMo

; 338  : 	{
; 339  : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s][%s] [%s, %d]",

  00055	8b 4d 18	 mov	 ecx, DWORD PTR _obj$[ebp]
  00058	68 54 01 00 00	 push	 340			; 00000154H
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00062	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00065	50		 push	 eax
  00066	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IJOPKODH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00075	83 c4 14	 add	 esp, 20			; 00000014H

; 340  : 			obj->AccountID, obj->Name, __FILE__, __LINE__);
; 341  : 		return -1;

  00078	0c ff		 or	 al, 255			; 000000ffH
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx

; 415  : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 14 00	 ret	 20			; 00000014H
$LN3@CardSlotMo:

; 342  : 	}
; 343  : 
; 344  : 	BYTE sCardArr = pSlotIndexInfo[sSlot];

  00082	8b 55 0c	 mov	 edx, DWORD PTR _sSlot$[ebp]
  00085	57		 push	 edi

; 345  :     BYTE tCardArr = pSlotIndexInfo[tSlot];

  00086	8b 7d 10	 mov	 edi, DWORD PTR _tSlot$[ebp]
  00089	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  0008c	03 cf		 add	 ecx, edi
  0008e	89 45 f8	 mov	 DWORD PTR tv370[ebp], eax
  00091	8a 00		 mov	 al, BYTE PTR [eax]
  00093	89 4d 10	 mov	 DWORD PTR tv368[ebp], ecx
  00096	8a 09		 mov	 cl, BYTE PTR [ecx]
  00098	88 45 0b	 mov	 BYTE PTR _sCardArr$1$[ebp], al

; 346  : 
; 347  : 	if (sCardArr == (BYTE)-1)

  0009b	3c ff		 cmp	 al, 255			; 000000ffH
  0009d	0f 84 6a 01 00
	00		 je	 $LN8@CardSlotMo

; 348  :     {
; 349  : 		return -1;
; 350  : 	}
; 351  : 
; 352  : 	if (tCardArr != (BYTE)-1)

  000a3	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  000a6	74 28		 je	 SHORT $LN5@CardSlotMo

; 353  :     {
; 354  : 		LogAddTD("[MuRummy][Error] slot Not Empty [%s][%s] %d ", 

  000a8	0f b6 c1	 movzx	 eax, cl
  000ab	8b 4d 18	 mov	 ecx, DWORD PTR _obj$[ebp]
  000ae	50		 push	 eax
  000af	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000b2	50		 push	 eax
  000b3	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JPECPFKG@?$FLMuRummy?$FN?$FLError?$FN?5slot?5Not?5Empty?5@
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c2	83 c4 10	 add	 esp, 16			; 00000010H

; 362  : 			obj->AccountID, obj->Name, sCardArr, __FILE__, __LINE__);
; 363  :          return -2;

  000c5	b0 fe		 mov	 al, 254			; 000000feH
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx

; 415  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 14 00	 ret	 20			; 00000014H
$LN5@CardSlotMo:

; 355  : 			obj->AccountID, obj->Name, tCardArr);
; 356  : 		return -2;
; 357  : 	}
; 358  : 
; 359  : 	if (sCardArr < 0 || sCardArr > MURUMMY_MAX_CARD - 1)

  000d0	3c 17		 cmp	 al, 23			; 00000017H

; 366  : 	if (pCCardInfo[sCardArr].GetState() == 1)

  000d2	0f b6 c0	 movzx	 eax, al
  000d5	0f 87 3d 01 00
	00		 ja	 $LN7@CardSlotMo
  000db	c1 e0 04	 shl	 eax, 4
  000de	83 7c 18 08 01	 cmp	 DWORD PTR [eax+ebx+8], 1
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  000e3	8d 34 18	 lea	 esi, DWORD PTR [eax+ebx]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 366  : 	if (pCCardInfo[sCardArr].GetState() == 1)

  000e6	0f 85 21 01 00
	00		 jne	 $LN8@CardSlotMo

; 367  : 	{
; 368  : 		if (sSlot < 5 && tSlot >= 5 )

  000ec	8b 5d 18	 mov	 ebx, DWORD PTR _obj$[ebp]
  000ef	83 fa 05	 cmp	 edx, 5
  000f2	7d 2c		 jge	 SHORT $LN43@CardSlotMo
  000f4	83 ff 05	 cmp	 edi, 5
  000f7	7c 5c		 jl	 SHORT $LN10@CardSlotMo

; 369  :         {
; 370  : 			LogAddTD("[%s][%s][Mu Rummy] Slot[5] - Move Slot[%d] %c : %d",

  000f9	ff 76 04	 push	 DWORD PTR [esi+4]
  000fc	8b 06		 mov	 eax, DWORD PTR [esi]
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00101	48		 dec	 eax
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00108	0f be c0	 movsx	 eax, al
  0010b	50		 push	 eax
  0010c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0010f	40		 inc	 eax
  00110	50		 push	 eax
  00111	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00114	50		 push	 eax
  00115	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00118	50		 push	 eax
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@GJGCJJOC@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Mov@

; 371  : 				obj->AccountID, obj->Name, 
; 372  : 				pCCardInfo[sCardArr].GetSlotNum() + 1,
; 373  :                 this->GetColorName(pCCardInfo[sCardArr].GetColor() - 1),
; 374  :                 pCCardInfo[sCardArr].GetNumber());
; 375  : 		}
; 376  : 
; 377  : 		if (sSlot >= 5 && tSlot < 5)

  0011e	eb 2c		 jmp	 SHORT $LN46@CardSlotMo
$LN43@CardSlotMo:
  00120	83 ff 05	 cmp	 edi, 5
  00123	7d 30		 jge	 SHORT $LN10@CardSlotMo

; 378  :         {
; 379  : 			LogAddTD("[%s][%s][Mu Rummy] Slot[3] - Move Slot[%d] %c : %d",

  00125	ff 76 04	 push	 DWORD PTR [esi+4]
  00128	8b 06		 mov	 eax, DWORD PTR [esi]
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0012d	48		 dec	 eax
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  00134	0f be c0	 movsx	 eax, al
  00137	50		 push	 eax
  00138	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0013b	83 e8 04	 sub	 eax, 4
  0013e	50		 push	 eax
  0013f	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00142	50		 push	 eax
  00143	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00146	50		 push	 eax
  00147	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@NFDLMECF@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Mov@
$LN46@CardSlotMo:
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00152	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@CardSlotMo:

; 390  : 		
; 391  : 		if (sSlot < 5 && tSlot >= 5 )

  00155	83 7d 0c 05	 cmp	 DWORD PTR _sSlot$[ebp], 5
  00159	8b 45 f8	 mov	 eax, DWORD PTR tv370[ebp]
  0015c	8b 4d 10	 mov	 ecx, DWORD PTR tv368[ebp]
  0015f	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH
  00162	8a 45 0b	 mov	 al, BYTE PTR _sCardArr$1$[ebp]
  00165	88 01		 mov	 BYTE PTR [ecx], al
  00167	8b 45 14	 mov	 eax, DWORD PTR _pCOutCardInfo$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  0016a	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 389  : 		memcpy(pCOutCardInfo, &pCCardInfo[sCardArr], sizeof(CMuRummyCardInfo));

  0016d	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  00170	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 390  : 		
; 391  : 		if (sSlot < 5 && tSlot >= 5 )

  00173	7d 4f		 jge	 SHORT $LN42@CardSlotMo
  00175	83 ff 05	 cmp	 edi, 5
  00178	0f 8c 84 00 00
	00		 jl	 $LN12@CardSlotMo

; 392  : 		{
; 393  : 			LogAddTD("[%s][%s][Mu Rummy] Slot[3] - Register Slot[%d] %c : %d",

  0017e	ff 76 04	 push	 DWORD PTR [esi+4]
  00181	8b 06		 mov	 eax, DWORD PTR [esi]
  00183	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00186	48		 dec	 eax
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  0018d	0f be c0	 movsx	 eax, al
  00190	50		 push	 eax
  00191	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00194	83 e8 04	 sub	 eax, 4
  00197	50		 push	 eax
  00198	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0019b	50		 push	 eax
  0019c	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0019f	50		 push	 eax
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CAEIJHPO@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL3?$FN?5?9?5Reg@
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 394  : 				obj->AccountID, obj->Name,
; 395  :                 pCCardInfo[sCardArr].GetSlotNum() - 4,
; 396  :                 this->GetColorName(pCCardInfo[sCardArr].GetColor() - 1),
; 397  :                 pCCardInfo[sCardArr].GetNumber());
; 398  :             this->Slot3Log(obj, 0);

  001ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001ae	83 c4 18	 add	 esp, 24			; 00000018H
  001b1	6a 00		 push	 0
  001b3	53		 push	 ebx
  001b4	e8 00 00 00 00	 call	 ?Slot3Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot3Log
  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi

; 409  : 		}
; 410  : 
; 411  : 		return 0;

  001bb	32 c0		 xor	 al, al
  001bd	5b		 pop	 ebx

; 415  : }

  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 14 00	 ret	 20			; 00000014H
$LN42@CardSlotMo:

; 399  : 		}
; 400  : 
; 401  : 		if (sSlot >= 5 && tSlot < 5)

  001c4	83 ff 05	 cmp	 edi, 5
  001c7	7d 39		 jge	 SHORT $LN12@CardSlotMo

; 402  :         {
; 403  : 			LogAddTD("[%s][%s][Mu Rummy] Slot[5] - Register Slot[%d] %c : %d",

  001c9	ff 76 04	 push	 DWORD PTR [esi+4]
  001cc	8b 06		 mov	 eax, DWORD PTR [esi]
  001ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001d1	48		 dec	 eax
  001d2	50		 push	 eax
  001d3	e8 00 00 00 00	 call	 ?GetColorName@CMuRummyMng@@QAEDH@Z ; CMuRummyMng::GetColorName
  001d8	0f be c0	 movsx	 eax, al
  001db	50		 push	 eax
  001dc	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001df	40		 inc	 eax
  001e0	50		 push	 eax
  001e1	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  001e4	50		 push	 eax
  001e5	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  001e8	50		 push	 eax
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GBIOFBI@?$FL?$CFs?$FN?$FL?$CFs?$FN?$FLMu?5Rummy?$FN?5Slot?$FL5?$FN?5?9?5Reg@
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 404  : 				obj->AccountID, obj->Name,
; 405  :                 pCCardInfo[sCardArr].GetSlotNum() + 1,
; 406  :                 this->GetColorName(pCCardInfo[sCardArr].GetColor() - 1),
; 407  :                 pCCardInfo[sCardArr].GetNumber());
; 408  :             this->Slot5Log(obj, 0);

  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001f7	83 c4 18	 add	 esp, 24			; 00000018H
  001fa	6a 00		 push	 0
  001fc	53		 push	 ebx
  001fd	e8 00 00 00 00	 call	 ?Slot5Log@CMuRummyMng@@QAEXPAUOBJECTSTRUCT@@H@Z ; CMuRummyMng::Slot5Log
$LN12@CardSlotMo:

; 409  : 		}
; 410  : 
; 411  : 		return 0;

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	32 c0		 xor	 al, al
  00206	5b		 pop	 ebx

; 415  : }

  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 14 00	 ret	 20			; 00000014H
$LN8@CardSlotMo:
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi

; 412  : 	}
; 413  : 
; 414  : 	return -1;

  0020f	0c ff		 or	 al, 255			; 000000ffH
  00211	5b		 pop	 ebx

; 415  : }

  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	c2 14 00	 ret	 20			; 00000014H
$LN7@CardSlotMo:

; 360  : 	{
; 361  : 		LogAddTD("[MuRummy][Error] CardInfo Index is Overflow [%s][%s][%d] [%s, %d]",

  00218	8b 4d 18	 mov	 ecx, DWORD PTR _obj$[ebp]
  0021b	68 6a 01 00 00	 push	 362			; 0000016aH
  00220	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00225	50		 push	 eax
  00226	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00229	50		 push	 eax
  0022a	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0022d	50		 push	 eax
  0022e	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@HECGBNNH@?$FLMuRummy?$FN?$FLError?$FN?5CardInfo?5Index?5@
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00239	83 c4 18	 add	 esp, 24			; 00000018H

; 362  : 			obj->AccountID, obj->Name, sCardArr, __FILE__, __LINE__);
; 363  :          return -2;

  0023c	b0 fe		 mov	 al, 254			; 000000feH
  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx

; 415  : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 14 00	 ret	 20			; 00000014H
?CardSlotMove@CMuRummyMng@@QAEEPAVCMuRummyInfo@@HHPAVCMuRummyCardInfo@@PAUOBJECTSTRUCT@@@Z ENDP ; CMuRummyMng::CardSlotMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetTempCardShowSlot@CMuRummyMng@@QAEEPAE@Z
_TEXT	SEGMENT
_pSlotCardIndex$ = 8					; size = 4
?GetTempCardShowSlot@CMuRummyMng@@QAEEPAE@Z PROC	; CMuRummyMng::GetTempCardShowSlot, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 293  : 	int iSlotCnt = 0;
; 294  : 	
; 295  : 	for (int i = 0; i < 8; i++)

  00003	8b 55 08	 mov	 edx, DWORD PTR _pSlotCardIndex$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	33 c0		 xor	 eax, eax
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@GetTempCar:

; 296  : 	{
; 297  : 		if (pSlotCardIndex[i] != (BYTE)-1 )

  00010	80 3c 10 ff	 cmp	 BYTE PTR [eax+edx], 255	; 000000ffH
  00014	74 06		 je	 SHORT $LN2@GetTempCar

; 298  : 		{
; 299  : 			if (i >= 5)

  00016	83 f8 05	 cmp	 eax, 5
  00019	7d 27		 jge	 SHORT $LN15@GetTempCar

; 302  : 			}
; 303  : 
; 304  : 			iSlotCnt++;

  0001b	41		 inc	 ecx
$LN2@GetTempCar:

; 293  : 	int iSlotCnt = 0;
; 294  : 	
; 295  : 	for (int i = 0; i < 8; i++)

  0001c	40		 inc	 eax
  0001d	83 f8 08	 cmp	 eax, 8
  00020	7c ee		 jl	 SHORT $LL4@GetTempCar

; 305  : 		}
; 306  : 	}
; 307  : 
; 308  : 	if (iSlotCnt >= 5)

  00022	83 f9 05	 cmp	 ecx, 5
  00025	7d 15		 jge	 SHORT $LN24@GetTempCar

; 309  : 	{
; 310  : 		return -1;
; 311  : 	}
; 312  : 
; 313  :     for (int i = 0; i < 5; i++ )

  00027	33 c0		 xor	 eax, eax
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@GetTempCar:

; 314  :     {
; 315  : 		if (pSlotCardIndex[i] == (BYTE)-1)

  00030	80 3c 10 ff	 cmp	 BYTE PTR [eax+edx], 255	; 000000ffH
  00034	74 08		 je	 SHORT $LN1@GetTempCar

; 309  : 	{
; 310  : 		return -1;
; 311  : 	}
; 312  : 
; 313  :     for (int i = 0; i < 5; i++ )

  00036	40		 inc	 eax
  00037	83 f8 05	 cmp	 eax, 5
  0003a	7c f4		 jl	 SHORT $LL7@GetTempCar
$LN24@GetTempCar:

; 316  : 		{
; 317  : 			return i;
; 318  : 		}
; 319  :     }
; 320  : 
; 321  : 	return -1;

  0003c	0c ff		 or	 al, 255			; 000000ffH
$LN1@GetTempCar:

; 322  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN15@GetTempCar:

; 300  : 			{
; 301  : 				return -2;

  00042	b0 fe		 mov	 al, 254			; 000000feH

; 322  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
?GetTempCardShowSlot@CMuRummyMng@@QAEEPAE@Z ENDP	; CMuRummyMng::GetTempCardShowSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?SetPlayCardInfo@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@@Z
_TEXT	SEGMENT
_pCCardInfo$1$ = 8					; size = 4
_pMuRummyInfo$ = 8					; size = 4
_pOutCardInfo$ = 12					; size = 4
?SetPlayCardInfo@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@@Z PROC ; CMuRummyMng::SetPlayCardInfo, COMDAT
; _this$ = ecx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 242  : 	int nCardCnt = 0;
; 243  : 
; 244  : 	if (!pMuRummyInfo)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 26		 je	 SHORT $LN30@SetPlayCar

; 245  : 	{
; 246  : 		return false;
; 247  : 	}
; 248  : 
; 249  : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00012	89 45 08	 mov	 DWORD PTR _pCCardInfo$1$[ebp], eax

; 250  : 
; 251  : 	if (!pCCardInfo)

  00015	85 c0		 test	 eax, eax
  00017	75 1f		 jne	 SHORT $LN6@SetPlayCar

; 252  : 	{
; 253  : 		LogAddTD("[MuRummy][Error] pCCardInfo is NULL [%s, %d]", __FILE__, __LINE__);

  00019	68 fd 00 00 00	 push	 253			; 000000fdH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@OCJJNEBG@?$FLMuRummy?$FN?$FLError?$FN?5pCCardInfo?5is?5N@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN30@SetPlayCar:

; 254  : 		return false;

  00031	32 c0		 xor	 al, al
  00033	5e		 pop	 esi

; 289  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN6@SetPlayCar:
  00038	53		 push	 ebx

; 255  : 	}
; 256  : 
; 257  : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo
  00040	8b d8		 mov	 ebx, eax

; 258  : 
; 259  : 	if (!pSlotIndexInfo )

  00042	85 db		 test	 ebx, ebx
  00044	75 20		 jne	 SHORT $LN7@SetPlayCar

; 260  :     {
; 261  : 		LogAddTD("[MuRummy][Error] pSlotIndexInfo is NULL [%s, %d]", __FILE__, __LINE__);

  00046	68 05 01 00 00	 push	 261			; 00000105H
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEILNLI@MuRummy?4cpp?$AA@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@NJNPCKOH@?$FLMuRummy?$FN?$FLError?$FN?5pSlotIndexInfo?5@
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 262  : 		return false;

  0005e	32 c0		 xor	 al, al
  00060	5b		 pop	 ebx
  00061	5e		 pop	 esi

; 289  : }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN7@SetPlayCar:

; 263  : 	}
; 264  : 
; 265  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_SLOT; nCnt++)

  00066	8b 75 0c	 mov	 esi, DWORD PTR _pOutCardInfo$[ebp]
  00069	33 c9		 xor	 ecx, ecx
  0006b	57		 push	 edi
  0006c	33 ff		 xor	 edi, edi
  0006e	83 c6 02	 add	 esi, 2
$LL4@SetPlayCar:

; 266  :     {
; 267  : 		int nCardArr = pSlotIndexInfo[nCnt];

  00071	0f b6 04 19	 movzx	 eax, BYTE PTR [ecx+ebx]

; 268  : 
; 269  : 		if (nCardArr < 0 || nCardArr > MURUMMY_MAX_CARD - 1)

  00075	83 f8 17	 cmp	 eax, 23			; 00000017H
  00078	77 2a		 ja	 SHORT $LN2@SetPlayCar
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  0007a	8b 55 08	 mov	 edx, DWORD PTR _pCCardInfo$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 274  : 		if (pCCardInfo[nCardArr].GetState() == 1)

  0007d	c1 e0 04	 shl	 eax, 4
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 18   :     int GetState() { return this->m_iState; };

  00080	03 d0		 add	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 274  : 		if (pCCardInfo[nCardArr].GetState() == 1)

  00082	83 7a 08 01	 cmp	 DWORD PTR [edx+8], 1
  00086	75 1c		 jne	 SHORT $LN2@SetPlayCar

; 275  : 		{
; 276  : 			if (nCardCnt < 0 || nCardCnt > 4)

  00088	83 ff 04	 cmp	 edi, 4
  0008b	77 26		 ja	 SHORT $LN23@SetPlayCar

; 279  : 			}
; 280  : 
; 281  : 			pOutCardInfo[nCardCnt].btColor = pCCardInfo[nCardArr].GetColor();

  0008d	0f b6 02	 movzx	 eax, BYTE PTR [edx]

; 282  :             pOutCardInfo[nCardCnt].btNumber = pCCardInfo[nCardArr].GetNumber();
; 283  :             pOutCardInfo[nCardCnt].btSlotNum = pCCardInfo[nCardArr].GetSlotNum();
; 284  : 			nCardCnt++;

  00090	47		 inc	 edi
  00091	88 46 fe	 mov	 BYTE PTR [esi-2], al
  00094	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00098	88 46 ff	 mov	 BYTE PTR [esi-1], al
  0009b	0f b6 42 0c	 movzx	 eax, BYTE PTR [edx+12]
  0009f	88 06		 mov	 BYTE PTR [esi], al
  000a1	83 c6 03	 add	 esi, 3
$LN2@SetPlayCar:

; 263  : 	}
; 264  : 
; 265  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_SLOT; nCnt++)

  000a4	41		 inc	 ecx
  000a5	83 f9 08	 cmp	 ecx, 8
  000a8	7c c7		 jl	 SHORT $LL4@SetPlayCar

; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	return true;

  000aa	5f		 pop	 edi
  000ab	5b		 pop	 ebx
  000ac	b0 01		 mov	 al, 1
  000ae	5e		 pop	 esi

; 289  : }

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN23@SetPlayCar:
  000b3	5f		 pop	 edi
  000b4	5b		 pop	 ebx

; 277  : 			{
; 278  : 				return false;

  000b5	32 c0		 xor	 al, al
  000b7	5e		 pop	 esi

; 289  : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?SetPlayCardInfo@CMuRummyMng@@QAE_NPAVCMuRummyInfo@@PAU_tagMuRummyCardInfo@@@Z ENDP ; CMuRummyMng::SetPlayCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?CardShuffle@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z
_TEXT	SEGMENT
_CardInfoTmp$2$ = -12					; size = 4
_nCnt$1$ = -8						; size = 4
tv356 = -4						; size = 4
_pCCardInfo$ = 8					; size = 4
?CardShuffle@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z PROC ; CMuRummyMng::CardShuffle, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 214  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_CARD; nCnt++)

  00009	8b 7d 08	 mov	 edi, DWORD PTR _pCCardInfo$[ebp]
  0000c	33 db		 xor	 ebx, ebx
  0000e	83 c7 08	 add	 edi, 8
  00011	89 5d f8	 mov	 DWORD PTR _nCnt$1$[ebp], ebx
  00014	89 7d fc	 mov	 DWORD PTR tv356[ebp], edi
$LL4@CardShuffl:

; 215  : 	{
; 216  : 		DWORD iIndex = nCnt + GetLargeRand() % (MURUMMY_MAX_CARD - nCnt);

  00017	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0001c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00021	33 d2		 xor	 edx, edx
  00023	2b cb		 sub	 ecx, ebx
  00025	f7 f1		 div	 ecx
  00027	03 d3		 add	 edx, ebx

; 217  : 
; 218  : 		if (iIndex > MURUMMY_MAX_CARD - 1)

  00029	83 fa 17	 cmp	 edx, 23			; 00000017H
  0002c	77 66		 ja	 SHORT $LN57@CardShuffl
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0002e	8b 5f f8	 mov	 ebx, DWORD PTR [edi-8]
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 228  : 		pCCardInfo[nCnt].SetColor(pCCardInfo[iIndex].GetColor());

  00031	03 d2		 add	 edx, edx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00033	8b 45 fc	 mov	 eax, DWORD PTR tv356[ebp]

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00036	8b 77 fc	 mov	 esi, DWORD PTR [edi-4]

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00039	8b 3f		 mov	 edi, DWORD PTR [edi]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0003b	89 5d f4	 mov	 DWORD PTR _CardInfoTmp$2$[ebp], ebx

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00041	8b 5d fc	 mov	 ebx, DWORD PTR tv356[ebp]
  00044	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  00047	8b 04 d0	 mov	 eax, DWORD PTR [eax+edx*8]
  0004a	89 43 f8	 mov	 DWORD PTR [ebx-8], eax

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  0004d	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  00050	8b 44 d0 04	 mov	 eax, DWORD PTR [eax+edx*8+4]
  00054	89 43 fc	 mov	 DWORD PTR [ebx-4], eax

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00057	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  0005a	8b 44 d0 08	 mov	 eax, DWORD PTR [eax+edx*8+8]
  0005e	89 03		 mov	 DWORD PTR [ebx], eax

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00060	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  00063	8b 44 d0 0c	 mov	 eax, DWORD PTR [eax+edx*8+12]
  00067	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  0006a	8b 45 08	 mov	 eax, DWORD PTR _pCCardInfo$[ebp]
  0006d	8b 5d f4	 mov	 ebx, DWORD PTR _CardInfoTmp$2$[ebp]
  00070	89 1c d0	 mov	 DWORD PTR [eax+edx*8], ebx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 214  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_CARD; nCnt++)

  00073	8b 5d f8	 mov	 ebx, DWORD PTR _nCnt$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00076	89 7c d0 08	 mov	 DWORD PTR [eax+edx*8+8], edi
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 214  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_CARD; nCnt++)

  0007a	43		 inc	 ebx
  0007b	8b 7d fc	 mov	 edi, DWORD PTR tv356[ebp]
  0007e	83 c7 10	 add	 edi, 16			; 00000010H
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00081	89 74 d0 04	 mov	 DWORD PTR [eax+edx*8+4], esi

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00085	89 4c d0 0c	 mov	 DWORD PTR [eax+edx*8+12], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 214  : 	for (int nCnt = 0; nCnt < MURUMMY_MAX_CARD; nCnt++)

  00089	89 5d f8	 mov	 DWORD PTR _nCnt$1$[ebp], ebx
  0008c	89 7d fc	 mov	 DWORD PTR tv356[ebp], edi
  0008f	83 fb 18	 cmp	 ebx, 24			; 00000018H
  00092	7c 83		 jl	 SHORT $LL4@CardShuffl
$LN57@CardShuffl:
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx

; 229  : 		pCCardInfo[nCnt].SetNumber(pCCardInfo[iIndex].GetNumber());
; 230  : 		pCCardInfo[nCnt].SetState(pCCardInfo[iIndex].GetState());
; 231  : 		pCCardInfo[nCnt].SetSlotNum(pCCardInfo[iIndex].GetSlotNum());
; 232  : 
; 233  : 		pCCardInfo[iIndex].SetColor(CardInfoTmp.GetColor());
; 234  : 		pCCardInfo[iIndex].SetNumber(CardInfoTmp.GetNumber());
; 235  : 		pCCardInfo[iIndex].SetState(CardInfoTmp.GetState());
; 236  : 		pCCardInfo[iIndex].SetSlotNum(CardInfoTmp.GetSlotNum());
; 237  : 	}
; 238  : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?CardShuffle@CMuRummyMng@@QAEXPAVCMuRummyCardInfo@@@Z ENDP ; CMuRummyMng::CardShuffle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?SetCardDeck@CMuRummyMng@@QAEXPAVCMuRummyInfo@@@Z
_TEXT	SEGMENT
_pCCardInfo$1$ = -4					; size = 4
_pMuRummyInfo$ = 8					; size = 4
?SetCardDeck@CMuRummyMng@@QAEXPAVCMuRummyInfo@@@Z PROC	; CMuRummyMng::SetCardDeck, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 164  : 	int nCardArr = 0;
; 165  : 
; 166  : 	if (!pMuRummyInfo)

  00004	8b 45 08	 mov	 eax, DWORD PTR _pMuRummyInfo$[ebp]
  00007	53		 push	 ebx
  00008	33 db		 xor	 ebx, ebx
  0000a	85 c0		 test	 eax, eax
  0000c	74 75		 je	 SHORT $LN1@SetCardDec

; 167  : 	{
; 168  : 		return;
; 169  : 	}
; 170  : 
; 171  : 	CMuRummyCardInfo* pCCardInfo = pMuRummyInfo->GetCardInfo();

  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ; CMuRummyInfo::GetCardInfo
  00015	8b c8		 mov	 ecx, eax
  00017	89 4d fc	 mov	 DWORD PTR _pCCardInfo$1$[ebp], ecx

; 172  : 
; 173  : 	if (!pCCardInfo)

  0001a	85 c9		 test	 ecx, ecx
  0001c	74 65		 je	 SHORT $LN1@SetCardDec

; 174  :     {
; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	for (int nCardColor = 0; nCardColor < MURUMMY_MAX_CARD_COLOR; nCardColor++)

  0001e	57		 push	 edi
  0001f	33 ff		 xor	 edi, edi
  00021	56		 push	 esi
$LL4@SetCardDec:

; 179  :     {
; 180  : 		for (int nCardNum = 0; nCardNum < MURUMMY_MAX_SLOT; nCardNum++)

  00022	8b c3		 mov	 eax, ebx
  00024	33 d2		 xor	 edx, edx
  00026	c1 e0 04	 shl	 eax, 4
  00029	8b f3		 mov	 esi, ebx
  0002b	83 c0 08	 add	 eax, 8
  0002e	03 c1		 add	 eax, ecx
$LL7@SetCardDec:

; 181  :         {
; 182  : 			if (nCardArr < 0 || nCardArr > MURUMMY_MAX_CARD - 1)

  00030	83 fe 17	 cmp	 esi, 23			; 00000017H
  00033	77 4c		 ja	 SHORT $LN41@SetCardDec
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00035	42		 inc	 edx

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00036	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 187  : 			pCCardInfo[nCardArr].SetColor(nCardColor + 1);

  0003c	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  0003f	89 50 fc	 mov	 DWORD PTR [eax-4], edx

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00042	89 48 f8	 mov	 DWORD PTR [eax-8], ecx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 191  : 			nCardArr++;

  00045	43		 inc	 ebx
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00046	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 191  : 			nCardArr++;

  0004d	46		 inc	 esi
  0004e	83 c0 10	 add	 eax, 16			; 00000010H
  00051	83 fa 08	 cmp	 edx, 8
  00054	7c da		 jl	 SHORT $LL7@SetCardDec

; 174  :     {
; 175  : 		return;
; 176  : 	}
; 177  : 
; 178  : 	for (int nCardColor = 0; nCardColor < MURUMMY_MAX_CARD_COLOR; nCardColor++)

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pCCardInfo$1$[ebp]
  00059	47		 inc	 edi
  0005a	83 ff 03	 cmp	 edi, 3
  0005d	7c c3		 jl	 SHORT $LL4@SetCardDec

; 192  : 		}
; 193  : 	}
; 194  : 
; 195  : 	LPBYTE pSlotIndexInfo = pMuRummyInfo->GetSlotIndexInfo();

  0005f	8b 75 08	 mov	 esi, DWORD PTR _pMuRummyInfo$[ebp]
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ; CMuRummyInfo::GetSlotIndexInfo

; 196  : 
; 197  : 	if (!pSlotIndexInfo)

  00069	85 c0		 test	 eax, eax
  0006b	74 14		 je	 SHORT $LN41@SetCardDec

; 198  :     {
; 199  : 		return;
; 200  : 	}
; 201  : 
; 202  : 	for (int i = 0; i < MURUMMY_MAX_SLOT; i++)
; 203  : 	{
; 204  : 		pSlotIndexInfo[i] = -1;

  0006d	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00073	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 43   :     void SetCardDeckCnt(int iCardDeckCnt) { this->m_iCardDeckCnt = iCardDeckCnt; };

  0007a	c7 46 08 18 00
	00 00		 mov	 DWORD PTR [esi+8], 24	; 00000018H
$LN41@SetCardDec:
  00081	5e		 pop	 esi
  00082	5f		 pop	 edi
$LN1@SetCardDec:
  00083	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 208  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?SetCardDeck@CMuRummyMng@@QAEXPAVCMuRummyInfo@@@Z ENDP	; CMuRummyMng::SetCardDeck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetRewardScore2@CMuRummyMng@@QAEHXZ
_TEXT	SEGMENT
?GetRewardScore2@CMuRummyMng@@QAEHXZ PROC		; CMuRummyMng::GetRewardScore2, COMDAT
; _this$ = ecx

; 159  : 	return this->m_iRewardScore2;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 160  : }

  00003	c3		 ret	 0
?GetRewardScore2@CMuRummyMng@@QAEHXZ ENDP		; CMuRummyMng::GetRewardScore2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetRewardScore1@CMuRummyMng@@QAEHXZ
_TEXT	SEGMENT
?GetRewardScore1@CMuRummyMng@@QAEHXZ PROC		; CMuRummyMng::GetRewardScore1, COMDAT
; _this$ = ecx

; 154  : 	return this->m_iRewardScore1;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 155  : }

  00003	c3		 ret	 0
?GetRewardScore1@CMuRummyMng@@QAEHXZ ENDP		; CMuRummyMng::GetRewardScore1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ
_TEXT	SEGMENT
?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ PROC		; CMuRummyMng::IsMuRummyEventOn, COMDAT
; _this$ = ecx

; 149  : 	return g_bMuRummyEventOn;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_bMuRummyEventOn@@3HA ; g_bMuRummyEventOn

; 150  : }

  00005	c3		 ret	 0
?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ENDP		; CMuRummyMng::IsMuRummyEventOn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?ProbabilityLoadData@CMuRummyMng@@QAEXXZ
_TEXT	SEGMENT
?ProbabilityLoadData@CMuRummyMng@@QAEXXZ PROC		; CMuRummyMng::ProbabilityLoadData, COMDAT
; _this$ = ecx

; 144  : 	//eventitembag loading
; 145  : }

  00000	c3		 ret	 0
?ProbabilityLoadData@CMuRummyMng@@QAEXXZ ENDP		; CMuRummyMng::ProbabilityLoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?LoadPreFixData@CMuRummyMng@@QAEXPAD@Z
_TEXT	SEGMENT
_lpszFileName$ = 8					; size = 4
?LoadPreFixData@CMuRummyMng@@QAEXPAD@Z PROC		; CMuRummyMng::LoadPreFixData, COMDAT
; _this$ = ecx

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 125  : 	this->m_tmEventEndDate.wYear = GetPrivateProfileIntA("GameServerInfo", "MuRummyEventEndYear", 0, lpszFileName);

  00005	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetPrivateProfileIntA@16
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _lpszFileName$[ebp]
  00011	57		 push	 edi
  00012	6a 00		 push	 0
  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JCGEADCM@MuRummyEventEndYear?$AA@
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0001e	ff d6		 call	 esi

; 126  : 	this->m_tmEventEndDate.wMonth = GetPrivateProfileIntA("GameServerInfo", "MuRummyEventEndMonth", 0, lpszFileName);

  00020	57		 push	 edi
  00021	6a 00		 push	 0
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BBHHNNIH@MuRummyEventEndMonth?$AA@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0002d	66 89 03	 mov	 WORD PTR [ebx], ax
  00030	ff d6		 call	 esi

; 127  : 	this->m_tmEventEndDate.wDay = GetPrivateProfileIntA("GameServerInfo", "MuRummyEventEndDay", 0, lpszFileName);

  00032	57		 push	 edi
  00033	6a 00		 push	 0
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CPOHBIBL@MuRummyEventEndDay?$AA@
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0003f	66 89 43 02	 mov	 WORD PTR [ebx+2], ax
  00043	ff d6		 call	 esi

; 128  : 	this->m_tmEventEndDate.wHour = GetPrivateProfileIntA("GameServerInfo", "MuRummyEventEndHour", 0, lpszFileName);

  00045	57		 push	 edi
  00046	6a 00		 push	 0
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LLHGFGNG@MuRummyEventEndHour?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00052	66 89 43 06	 mov	 WORD PTR [ebx+6], ax
  00056	ff d6		 call	 esi

; 129  : 	this->m_tmEventEndDate.wMinute = GetPrivateProfileIntA("GameServerInfo", "MuRummyEventEndMinute", 0, lpszFileName);

  00058	57		 push	 edi
  00059	6a 00		 push	 0
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BAJOCANA@MuRummyEventEndMinute?$AA@
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00065	66 89 43 08	 mov	 WORD PTR [ebx+8], ax
  00069	ff d6		 call	 esi

; 130  : 	this->m_iRewardScore1 = GetPrivateProfileIntA("GameServerInfo", "MuRummyRewardScore1", 0, lpszFileName);

  0006b	57		 push	 edi
  0006c	6a 00		 push	 0
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IKICMDFH@MuRummyRewardScore1?$AA@
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00078	66 89 43 0a	 mov	 WORD PTR [ebx+10], ax
  0007c	ff d6		 call	 esi

; 131  : 	this->m_iRewardScore2 = GetPrivateProfileIntA("GameServerInfo", "MuRummyRewardScore2", 0, lpszFileName);

  0007e	57		 push	 edi
  0007f	6a 00		 push	 0
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KBKPJAJE@MuRummyRewardScore2?$AA@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0008b	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0008e	ff d6		 call	 esi

; 132  :   
; 133  : 	if (this->m_iRewardScore1 <= 0 || this->m_iRewardScore2 <= 0)

  00090	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00094	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  00097	7e 04		 jle	 SHORT $LN3@LoadPreFix
  00099	85 c0		 test	 eax, eax
  0009b	7f 20		 jg	 SHORT $LN4@LoadPreFix
$LN3@LoadPreFix:

; 134  : 	{
; 135  : 		if (this->IsMuRummyEventOn() == 1)

  0009d	8b cb		 mov	 ecx, ebx
  0009f	e8 00 00 00 00	 call	 ?IsMuRummyEventOn@CMuRummyMng@@QAEHXZ ; CMuRummyMng::IsMuRummyEventOn
  000a4	83 f8 01	 cmp	 eax, 1
  000a7	75 14		 jne	 SHORT $LN4@LoadPreFix

; 136  : 		{
; 137  : 			MessageBoxA(0, "[CommonSever.cfg] Check MuRummyRewardScore", "Error", 0);

  000a9	6a 00		 push	 0
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@DOFHGMJA@?$FLCommonSever?4cfg?$FN?5Check?5MuRummyR@
  000b5	6a 00		 push	 0
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$LN4@LoadPreFix:
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx

; 138  : 		}
; 139  : 	}
; 140  : }

  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
?LoadPreFixData@CMuRummyMng@@QAEXPAD@Z ENDP		; CMuRummyMng::LoadPreFixData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??1CMuRummyMng@@QAE@XZ
_TEXT	SEGMENT
??1CMuRummyMng@@QAE@XZ PROC				; CMuRummyMng::~CMuRummyMng, COMDAT
; _this$ = ecx

; 120  : 	//del m_pRewardItemBag1, m_pRewardItemBag2
; 121  : }

  00000	c3		 ret	 0
??1CMuRummyMng@@QAE@XZ ENDP				; CMuRummyMng::~CMuRummyMng
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??0CMuRummyMng@@QAE@XZ
_TEXT	SEGMENT
??0CMuRummyMng@@QAE@XZ PROC				; CMuRummyMng::CMuRummyMng, COMDAT
; _this$ = ecx

; 112  : 	//this->m_pRewardItemBag1 = 0;
; 113  : 	//this->m_pRewardItemBag2 = 0;
; 114  : 	this->m_iRewardScore1 = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 115  : 	this->m_iRewardScore2 = 0;
; 116  : }

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0CMuRummyMng@@QAE@XZ ENDP				; CMuRummyMng::CMuRummyMng
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMuRummyInfo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMuRummyInfo@@UAEPAXI@Z PROC			; CMuRummyInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMuRummyInfo@@UAE@XZ	; CMuRummyInfo::~CMuRummyInfo
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 18		 push	 24			; 00000018H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMuRummyInfo@@UAEPAXI@Z ENDP			; CMuRummyInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?IsWaitReward@CMuRummyInfo@@QAE_NXZ
_TEXT	SEGMENT
?IsWaitReward@CMuRummyInfo@@QAE_NXZ PROC		; CMuRummyInfo::IsWaitReward, COMDAT
; _this$ = ecx

; 52   :     bool IsWaitReward() { return this->m_bWaitReward; };

  00000	8a 41 0e	 mov	 al, BYTE PTR [ecx+14]
  00003	c3		 ret	 0
?IsWaitReward@CMuRummyInfo@@QAE_NXZ ENDP		; CMuRummyInfo::IsWaitReward
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?IsMuRummyInfoLoad@CMuRummyInfo@@QAE_NXZ
_TEXT	SEGMENT
?IsMuRummyInfoLoad@CMuRummyInfo@@QAE_NXZ PROC		; CMuRummyInfo::IsMuRummyInfoLoad, COMDAT
; _this$ = ecx

; 51   :     bool IsMuRummyInfoLoad() { return this->m_bMuRummyInfoLoad; };

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]
  00003	c3		 ret	 0
?IsMuRummyInfoLoad@CMuRummyInfo@@QAE_NXZ ENDP		; CMuRummyInfo::IsMuRummyInfoLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?IsGetPlayCard@CMuRummyInfo@@QAE_NXZ
_TEXT	SEGMENT
?IsGetPlayCard@CMuRummyInfo@@QAE_NXZ PROC		; CMuRummyInfo::IsGetPlayCard, COMDAT
; _this$ = ecx

; 50   :     bool IsGetPlayCard() { return this->m_bPlayCard; };

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00003	c3		 ret	 0
?IsGetPlayCard@CMuRummyInfo@@QAE_NXZ ENDP		; CMuRummyInfo::IsGetPlayCard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetCardDeckCnt@CMuRummyInfo@@QAEHXZ
_TEXT	SEGMENT
?GetCardDeckCnt@CMuRummyInfo@@QAEHXZ PROC		; CMuRummyInfo::GetCardDeckCnt, COMDAT
; _this$ = ecx

; 49   :     int GetCardDeckCnt() { return this->m_iCardDeckCnt; };

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetCardDeckCnt@CMuRummyInfo@@QAEHXZ ENDP		; CMuRummyInfo::GetCardDeckCnt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetScore@CMuRummyInfo@@QAEHXZ
_TEXT	SEGMENT
?GetScore@CMuRummyInfo@@QAEHXZ PROC			; CMuRummyInfo::GetScore, COMDAT
; _this$ = ecx

; 48   :     int GetScore() { return this->m_iScore; };

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetScore@CMuRummyInfo@@QAEHXZ ENDP			; CMuRummyInfo::GetScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetWaitReward@CMuRummyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_bWaitReward$ = 8					; size = 1
?SetWaitReward@CMuRummyInfo@@QAEX_N@Z PROC		; CMuRummyInfo::SetWaitReward, COMDAT
; _this$ = ecx

; 46   :     void SetWaitReward(bool bWaitReward) { this->m_bWaitReward = bWaitReward; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bWaitReward$[ebp]
  00006	88 41 0e	 mov	 BYTE PTR [ecx+14], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetWaitReward@CMuRummyInfo@@QAEX_N@Z ENDP		; CMuRummyInfo::SetWaitReward
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetMuRummyInfoLoad@CMuRummyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_bMuRummyInfoLoad$ = 8					; size = 1
?SetMuRummyInfoLoad@CMuRummyInfo@@QAEX_N@Z PROC		; CMuRummyInfo::SetMuRummyInfoLoad, COMDAT
; _this$ = ecx

; 45   :     void SetMuRummyInfoLoad(bool bMuRummyInfoLoad) { this->m_bMuRummyInfoLoad = bMuRummyInfoLoad; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bMuRummyInfoLoad$[ebp]
  00006	88 41 0d	 mov	 BYTE PTR [ecx+13], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMuRummyInfoLoad@CMuRummyInfo@@QAEX_N@Z ENDP		; CMuRummyInfo::SetMuRummyInfoLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetGetPlayCard@CMuRummyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_bPlayCard$ = 8						; size = 1
?SetGetPlayCard@CMuRummyInfo@@QAEX_N@Z PROC		; CMuRummyInfo::SetGetPlayCard, COMDAT
; _this$ = ecx

; 44   :     void SetGetPlayCard(bool bPlayCard) { this->m_bPlayCard = bPlayCard; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8a 45 08	 mov	 al, BYTE PTR _bPlayCard$[ebp]
  00006	88 41 0c	 mov	 BYTE PTR [ecx+12], al
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetGetPlayCard@CMuRummyInfo@@QAEX_N@Z ENDP		; CMuRummyInfo::SetGetPlayCard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetCardDeckCnt@CMuRummyInfo@@QAEXH@Z
_TEXT	SEGMENT
_iCardDeckCnt$ = 8					; size = 4
?SetCardDeckCnt@CMuRummyInfo@@QAEXH@Z PROC		; CMuRummyInfo::SetCardDeckCnt, COMDAT
; _this$ = ecx

; 43   :     void SetCardDeckCnt(int iCardDeckCnt) { this->m_iCardDeckCnt = iCardDeckCnt; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iCardDeckCnt$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetCardDeckCnt@CMuRummyInfo@@QAEXH@Z ENDP		; CMuRummyInfo::SetCardDeckCnt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetScore@CMuRummyInfo@@QAEXH@Z
_TEXT	SEGMENT
_iScore$ = 8						; size = 4
?SetScore@CMuRummyInfo@@QAEXH@Z PROC			; CMuRummyInfo::SetScore, COMDAT
; _this$ = ecx

; 42   :     void SetScore(int iScore) { this->m_iScore = iScore; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iScore$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetScore@CMuRummyInfo@@QAEXH@Z ENDP			; CMuRummyInfo::SetScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ
_TEXT	SEGMENT
?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ PROC		; CMuRummyInfo::GetSlotIndexInfo, COMDAT
; _this$ = ecx

; 102  : 	if (!this->m_pSlotCardIndex)

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 103  : 	{
; 104  : 		return 0;
; 105  : 	}
; 106  : 
; 107  : 	return this->m_pSlotCardIndex;
; 108  : }

  00003	c3		 ret	 0
?GetSlotIndexInfo@CMuRummyInfo@@QAEPAEXZ ENDP		; CMuRummyInfo::GetSlotIndexInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ
_TEXT	SEGMENT
?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ PROC ; CMuRummyInfo::GetCardInfo, COMDAT
; _this$ = ecx

; 92   : 	if (!this->m_pCCardInfo)

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 93   : 	{
; 94   : 		return 0;
; 95   : 	}
; 96   : 
; 97   : 	return this->m_pCCardInfo;
; 98   : }

  00003	c3		 ret	 0
?GetCardInfo@CMuRummyInfo@@QAEPAVCMuRummyCardInfo@@XZ ENDP ; CMuRummyInfo::GetCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?Clear@CMuRummyInfo@@QAEXXZ
_TEXT	SEGMENT
?Clear@CMuRummyInfo@@QAEXXZ PROC			; CMuRummyInfo::Clear, COMDAT
; _this$ = ecx

; 70   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 71   : 	for (int i = 0; i < MURUMMY_MAX_CARD; i++)

  00003	33 c0		 xor	 eax, eax
  00005	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Clear:
; File c:\users\michel\desktop\source\gameserver\source\murummy.h

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00010	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00013	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  0001a	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0001d	c7 44 10 04 00
	00 00 00	 mov	 DWORD PTR [eax+edx+4], 0

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00025	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00028	c7 44 08 08 00
	00 00 00	 mov	 DWORD PTR [eax+ecx+8], 0

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	c7 44 08 0c ff
	ff ff ff	 mov	 DWORD PTR [eax+ecx+12], -1
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp

; 71   : 	for (int i = 0; i < MURUMMY_MAX_CARD; i++)

  0003b	83 c0 10	 add	 eax, 16			; 00000010H
  0003e	3d 80 01 00 00	 cmp	 eax, 384		; 00000180H
  00043	7c cb		 jl	 SHORT $LL4@Clear

; 72   : 	{
; 73   : 		this->m_pCCardInfo[i].SetColor(0);
; 74   : 		this->m_pCCardInfo[i].SetNumber(0);
; 75   : 		this->m_pCCardInfo[i].SetState(0);
; 76   : 		this->m_pCCardInfo[i].SetSlotNum(-1);
; 77   : 	}
; 78   : 
; 79   : 	for (int i = 0; i < MURUMMY_MAX_SLOT; i++)
; 80   : 	{
; 81   : 		this->m_pSlotCardIndex[i] = -1;

  00045	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00048	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH
  0004b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004e	c6 40 01 ff	 mov	 BYTE PTR [eax+1], 255	; 000000ffH
  00052	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00055	c6 40 02 ff	 mov	 BYTE PTR [eax+2], 255	; 000000ffH
  00059	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0005c	c6 40 03 ff	 mov	 BYTE PTR [eax+3], 255	; 000000ffH
  00060	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00063	c6 40 04 ff	 mov	 BYTE PTR [eax+4], 255	; 000000ffH
  00067	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0006a	c6 40 05 ff	 mov	 BYTE PTR [eax+5], 255	; 000000ffH
  0006e	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00071	c6 40 06 ff	 mov	 BYTE PTR [eax+6], 255	; 000000ffH
  00075	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00078	c6 40 07 ff	 mov	 BYTE PTR [eax+7], 255	; 000000ffH

; 82   : 	}
; 83   : 
; 84   : 	this->m_iScore = 0;

  0007c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 85   : 	this->m_iCardDeckCnt = 0;

  00083	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 86   : 	this->m_bPlayCard = 0;

  0008a	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 87   : 	this->m_bWaitReward = 0;

  0008e	c6 46 0e 00	 mov	 BYTE PTR [esi+14], 0
  00092	5e		 pop	 esi

; 88   : }

  00093	c3		 ret	 0
?Clear@CMuRummyInfo@@QAEXXZ ENDP			; CMuRummyInfo::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?Release@CMuRummyInfo@@QAEXXZ
_TEXT	SEGMENT
?Release@CMuRummyInfo@@QAEXXZ PROC			; CMuRummyInfo::Release, COMDAT
; _this$ = ecx

; 66   : 
; 67   : }

  00000	c3		 ret	 0
?Release@CMuRummyInfo@@QAEXXZ ENDP			; CMuRummyInfo::Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?Init@CMuRummyInfo@@QAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@CMuRummyInfo@@QAEXXZ PROC				; CMuRummyInfo::Init, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CMuRummyInfo@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 46   : 	this->m_pCCardInfo = 0;
; 47   : 	this->m_pSlotCardIndex = 0;
; 48   : 	this->m_iScore = 0;
; 49   : 	this->m_iCardDeckCnt = 0;
; 50   : 	this->m_bPlayCard = 0;
; 51   : 	this->m_bMuRummyInfoLoad = 0;
; 52   : 
; 53   : 	if (!this->m_pCCardInfo)
; 54   : 	{
; 55   : 		this->m_pCCardInfo = new CMuRummyCardInfo[MURUMMY_MAX_CARD];

  00027	68 84 01 00 00	 push	 388			; 00000184H
  0002c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00048	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
  0004e	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00053	83 c4 04	 add	 esp, 4
  00056	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00060	85 c0		 test	 eax, eax
  00062	74 1f		 je	 SHORT $LN5@Init
  00064	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  00069	68 00 00 00 00	 push	 OFFSET ??0CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::CMuRummyCardInfo
  0006e	6a 18		 push	 24			; 00000018H
  00070	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  00073	c7 00 18 00 00
	00		 mov	 DWORD PTR [eax], 24	; 00000018H
  00079	6a 10		 push	 16			; 00000010H
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00081	eb 02		 jmp	 SHORT $LN6@Init
$LN5@Init:
  00083	33 ff		 xor	 edi, edi
$LN6@Init:

; 56   : 	}
; 57   : 
; 58   : 	if (!this->m_pSlotCardIndex)

  00085	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00089	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00090	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00093	75 0d		 jne	 SHORT $LN3@Init

; 59   : 	{
; 60   : 		this->m_pSlotCardIndex = new BYTE[MURUMMY_MAX_SLOT];

  00095	6a 08		 push	 8
  00097	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0009c	83 c4 04	 add	 esp, 4
  0009f	89 46 14	 mov	 DWORD PTR [esi+20], eax
$LN3@Init:

; 61   : 	}
; 62   : }

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CMuRummyInfo@@QAEXXZ$0:
  00000	68 84 01 00 00	 push	 388			; 00000184H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?Init@CMuRummyInfo@@QAEXXZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CMuRummyInfo@@QAEXXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CMuRummyInfo@@QAEXXZ ENDP				; CMuRummyInfo::Init
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??1CMuRummyInfo@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CMuRummyInfo@@UAE@XZ PROC				; CMuRummyInfo::~CMuRummyInfo, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CMuRummyInfo@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 31   : 	if (this->m_pCCardInfo)

  00026	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CMuRummyInfo@@6B@
  0002f	85 c0		 test	 eax, eax
  00031	74 33		 je	 SHORT $LN2@CMuRummyIn

; 32   : 	{
; 33   : 		delete []this->m_pCCardInfo;
; 34   : 		this->m_pCCardInfo = NULL;

  00033	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  00038	ff 70 fc	 push	 DWORD PTR [eax-4]
  0003b	8d 70 fc	 lea	 esi, DWORD PTR [eax-4]
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	6a 10		 push	 16			; 00000010H
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	c1 e0 04	 shl	 eax, 4
  00052	83 c0 04	 add	 eax, 4
  00055	50		 push	 eax
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005c	83 c4 08	 add	 esp, 8
  0005f	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
$LN2@CMuRummyIn:

; 35   : 	}
; 36   : 
; 37   : 	if (this->m_pSlotCardIndex)

  00066	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00069	85 c0		 test	 eax, eax
  0006b	74 12		 je	 SHORT $LN3@CMuRummyIn

; 38   : 	{
; 39   : 		delete this->m_pSlotCardIndex;

  0006d	6a 01		 push	 1
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00075	83 c4 08	 add	 esp, 8

; 40   : 		this->m_pSlotCardIndex = NULL;

  00078	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
$LN3@CMuRummyIn:

; 41   : 	}
; 42   : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMuRummyInfo@@UAE@XZ$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1CMuRummyInfo@@UAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CMuRummyInfo@@UAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CMuRummyInfo@@UAE@XZ ENDP				; CMuRummyInfo::~CMuRummyInfo
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??0CMuRummyInfo@@QAE@XZ
_TEXT	SEGMENT
??0CMuRummyInfo@@QAE@XZ PROC				; CMuRummyInfo::CMuRummyInfo, COMDAT
; _this$ = ecx

; 25   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CMuRummyInfo@@6B@

; 26   : 	this->Init();

  00009	e8 00 00 00 00	 call	 ?Init@CMuRummyInfo@@QAEXXZ ; CMuRummyInfo::Init

; 27   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CMuRummyInfo@@QAE@XZ ENDP				; CMuRummyInfo::CMuRummyInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_ECMuRummyCardInfo@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECMuRummyCardInfo@@QAEPAXI@Z PROC			; CMuRummyCardInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECMuRummyCardInfo@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 40		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1CMuRummyCardInfo@@QAE@XZ ; CMuRummyCardInfo::~CMuRummyCardInfo
  00034	ff 77 fc	 push	 DWORD PTR [edi-4]
  00037	8d 77 fc	 lea	 esi, DWORD PTR [edi-4]
  0003a	6a 10		 push	 16			; 00000010H
  0003c	57		 push	 edi
  0003d	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00042	f6 c3 01	 test	 bl, 1
  00045	74 12		 je	 SHORT $LN3@vector
  00047	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00049	c1 e1 04	 shl	 ecx, 4
  0004c	83 c1 04	 add	 ecx, 4
  0004f	51		 push	 ecx
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00056	83 c4 08	 add	 esp, 8
$LN3@vector:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN2@vector:
  0006f	f6 c3 01	 test	 bl, 1
  00072	74 0b		 je	 SHORT $LN4@vector
  00074	6a 10		 push	 16			; 00000010H
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007c	83 c4 08	 add	 esp, 8
$LN4@vector:
  0007f	8b c7		 mov	 eax, edi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECMuRummyCardInfo@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECMuRummyCardInfo@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECMuRummyCardInfo@@QAEPAXI@Z ENDP			; CMuRummyCardInfo::`vector deleting destructor'
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetSlotNum@CMuRummyCardInfo@@QAEHXZ
_TEXT	SEGMENT
?GetSlotNum@CMuRummyCardInfo@@QAEHXZ PROC		; CMuRummyCardInfo::GetSlotNum, COMDAT
; _this$ = ecx

; 19   :     int GetSlotNum() { return this->m_iSlotNum; };

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetSlotNum@CMuRummyCardInfo@@QAEHXZ ENDP		; CMuRummyCardInfo::GetSlotNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetState@CMuRummyCardInfo@@QAEHXZ
_TEXT	SEGMENT
?GetState@CMuRummyCardInfo@@QAEHXZ PROC			; CMuRummyCardInfo::GetState, COMDAT
; _this$ = ecx

; 18   :     int GetState() { return this->m_iState; };

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	c3		 ret	 0
?GetState@CMuRummyCardInfo@@QAEHXZ ENDP			; CMuRummyCardInfo::GetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetNumber@CMuRummyCardInfo@@QAEHXZ
_TEXT	SEGMENT
?GetNumber@CMuRummyCardInfo@@QAEHXZ PROC		; CMuRummyCardInfo::GetNumber, COMDAT
; _this$ = ecx

; 17   :     int GetNumber() { return this->m_iNumber; };

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetNumber@CMuRummyCardInfo@@QAEHXZ ENDP		; CMuRummyCardInfo::GetNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?GetColor@CMuRummyCardInfo@@QAEHXZ
_TEXT	SEGMENT
?GetColor@CMuRummyCardInfo@@QAEHXZ PROC			; CMuRummyCardInfo::GetColor, COMDAT
; _this$ = ecx

; 16   :     int GetColor() { return this->m_iColor; };

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?GetColor@CMuRummyCardInfo@@QAEHXZ ENDP			; CMuRummyCardInfo::GetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetSlotNum@CMuRummyCardInfo@@QAEXH@Z
_TEXT	SEGMENT
_iSlotNum$ = 8						; size = 4
?SetSlotNum@CMuRummyCardInfo@@QAEXH@Z PROC		; CMuRummyCardInfo::SetSlotNum, COMDAT
; _this$ = ecx

; 15   :     void SetSlotNum(int iSlotNum) { this->m_iSlotNum = iSlotNum; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iSlotNum$[ebp]
  00006	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSlotNum@CMuRummyCardInfo@@QAEXH@Z ENDP		; CMuRummyCardInfo::SetSlotNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetState@CMuRummyCardInfo@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetState@CMuRummyCardInfo@@QAEXH@Z PROC		; CMuRummyCardInfo::SetState, COMDAT
; _this$ = ecx

; 14   :     void SetState(int iState) { this->m_iState = iState; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetState@CMuRummyCardInfo@@QAEXH@Z ENDP		; CMuRummyCardInfo::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetNumber@CMuRummyCardInfo@@QAEXH@Z
_TEXT	SEGMENT
_iNumber$ = 8						; size = 4
?SetNumber@CMuRummyCardInfo@@QAEXH@Z PROC		; CMuRummyCardInfo::SetNumber, COMDAT
; _this$ = ecx

; 13   :     void SetNumber(int iNumber) { this->m_iNumber = iNumber; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iNumber$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetNumber@CMuRummyCardInfo@@QAEXH@Z ENDP		; CMuRummyCardInfo::SetNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.h
;	COMDAT ?SetColor@CMuRummyCardInfo@@QAEXH@Z
_TEXT	SEGMENT
_iColor$ = 8						; size = 4
?SetColor@CMuRummyCardInfo@@QAEXH@Z PROC		; CMuRummyCardInfo::SetColor, COMDAT
; _this$ = ecx

; 12   :     void SetColor(int iColor) { this->m_iColor = iColor; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iColor$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	5d		 pop	 ebp
  00009	c2 04 00	 ret	 4
?SetColor@CMuRummyCardInfo@@QAEXH@Z ENDP		; CMuRummyCardInfo::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??1CMuRummyCardInfo@@QAE@XZ
_TEXT	SEGMENT
??1CMuRummyCardInfo@@QAE@XZ PROC			; CMuRummyCardInfo::~CMuRummyCardInfo, COMDAT
; _this$ = ecx

; 21   : 
; 22   : }

  00000	c3		 ret	 0
??1CMuRummyCardInfo@@QAE@XZ ENDP			; CMuRummyCardInfo::~CMuRummyCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ??0CMuRummyCardInfo@@QAE@XZ
_TEXT	SEGMENT
??0CMuRummyCardInfo@@QAE@XZ PROC			; CMuRummyCardInfo::CMuRummyCardInfo, COMDAT
; _this$ = ecx

; 13   : 	this->m_iColor = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 14   : 	this->m_iNumber = 0;
; 15   : 	this->m_iState = 0;
; 16   : 	this->m_iSlotNum = -1;
; 17   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1
  0001d	c3		 ret	 0
??0CMuRummyCardInfo@@QAE@XZ ENDP			; CMuRummyCardInfo::CMuRummyCardInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS@@QAE@XZ PROC	; _tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS::_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS, COMDAT
; _this$ = ecx

; 322  : 
; 323  :     PBMSG_HEAD2 h;
; 324  :     char AccountID[MAX_ACCOUNT_LEN + 1];
; 325  :     char Name[MAX_ACCOUNT_LEN + 1];
; 326  :     WORD wScore;

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@tagPMSG_RE:

; 39   : 		this->btSlotNum = -1;

  00010	66 c7 00 ff ff	 mov	 WORD PTR [eax], 65535	; 0000ffffH
  00015	8d 40 03	 lea	 eax, DWORD PTR [eax+3]

; 40   : 		this->btSeq = -1;
; 41   : 		this->btStatus = -1;

  00018	c6 40 ff ff	 mov	 BYTE PTR [eax-1], 255	; 000000ffH
  0001c	83 ea 01	 sub	 edx, 1
  0001f	75 ef		 jne	 SHORT $LL4@tagPMSG_RE

; 319  : 	{
; 320  : 
; 321  : 	};

  00021	8b c1		 mov	 eax, ecx
  00023	c3		 ret	 0
??0_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS@@QAE@XZ ENDP	; _tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS::_tagPMSG_REQ_MURUMMY_INFO_UPDATE_DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS@@QAE@XZ PROC	; _tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS::_tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS, COMDAT
; _this$ = ecx

; 39   : 		this->btSlotNum = -1;

  00000	66 c7 41 1a ff
	ff		 mov	 WORD PTR [ecx+26], 65535 ; 0000ffffH

; 306  : 	{
; 307  : 
; 308  : 	};

  00006	8b c1		 mov	 eax, ecx

; 40   : 		this->btSeq = -1;
; 41   : 		this->btStatus = -1;

  00008	c6 41 1c ff	 mov	 BYTE PTR [ecx+28], 255	; 000000ffH

; 306  : 	{
; 307  : 
; 308  : 	};

  0000c	c3		 ret	 0
??0_tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS@@QAE@XZ ENDP	; _tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS::_tagPMSG_REQ_MURUMMY_SLOTUPDATE_DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS@@QAE@XZ PROC	; _tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS::_tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS, COMDAT
; _this$ = ecx

; 39   : 		this->btSlotNum = -1;

  00000	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1

; 285  : 	{
; 286  : 
; 287  : 	};

  00007	8b c1		 mov	 eax, ecx

; 40   : 		this->btSeq = -1;

  00009	c7 41 20 ff ff
	ff ff		 mov	 DWORD PTR [ecx+32], -1

; 41   : 		this->btStatus = -1;

  00010	c6 41 24 ff	 mov	 BYTE PTR [ecx+36], 255	; 000000ffH

; 285  : 	{
; 286  : 
; 287  : 	};

  00014	c3		 ret	 0
??0_tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS@@QAE@XZ ENDP	; _tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS::_tagPMSG_REQ_MURUMMY_SCORE_UPDATE_DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_REQ_MURUMMY_INSERT_DS@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_REQ_MURUMMY_INSERT_DS@@QAE@XZ PROC		; _tagPMSG_REQ_MURUMMY_INSERT_DS::_tagPMSG_REQ_MURUMMY_INSERT_DS, COMDAT
; _this$ = ecx

; 264  : 
; 265  :     PBMSG_HEAD2 h;
; 266  :     char AccountID[MAX_ACCOUNT_LEN + 1];
; 267  :     char Name[MAX_ACCOUNT_LEN + 1];
; 268  :     WORD aIndex;

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00003	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@tagPMSG_RE:

; 21   : 		this->btColor = -1;

  00010	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00016	8d 40 05	 lea	 eax, DWORD PTR [eax+5]

; 22   : 		this->btNumber = -1;
; 23   : 		this->btSlotNum = -1;
; 24   : 		this->btSeq = -1;
; 25   : 		this->btStatus = -1;

  00019	c6 40 ff ff	 mov	 BYTE PTR [eax-1], 255	; 000000ffH
  0001d	83 ea 01	 sub	 edx, 1
  00020	75 ee		 jne	 SHORT $LL4@tagPMSG_RE

; 261  : 	{
; 262  : 
; 263  : 	};

  00022	8b c1		 mov	 eax, ecx
  00024	c3		 ret	 0
??0_tagPMSG_REQ_MURUMMY_INSERT_DS@@QAE@XZ ENDP		; _tagPMSG_REQ_MURUMMY_INSERT_DS::_tagPMSG_REQ_MURUMMY_INSERT_DS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_SEND_MURUMMYEVENT_ON@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_SEND_MURUMMYEVENT_ON@@QAE@XZ PROC		; _tagPMSG_SEND_MURUMMYEVENT_ON::_tagPMSG_SEND_MURUMMYEVENT_ON, COMDAT
; _this$ = ecx

; 251  : 	{
; 252  : 
; 253  : 	};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_tagPMSG_SEND_MURUMMYEVENT_ON@@QAE@XZ ENDP		; _tagPMSG_SEND_MURUMMYEVENT_ON::_tagPMSG_SEND_MURUMMYEVENT_ON
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_SEND_MURUMMY_MSG@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_SEND_MURUMMY_MSG@@QAE@XZ PROC		; _tagPMSG_SEND_MURUMMY_MSG::_tagPMSG_SEND_MURUMMY_MSG, COMDAT
; _this$ = ecx

; 236  : 	{
; 237  : 		this->btNotiIndex = 0;

  00000	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0

; 238  : 		this->btValueH = 0;
; 239  : 		this->btValueL = 0;
; 240  : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 06 00	 mov	 BYTE PTR [ecx+6], 0
  0000c	c3		 ret	 0
??0_tagPMSG_SEND_MURUMMY_MSG@@QAE@XZ ENDP		; _tagPMSG_SEND_MURUMMY_MSG::_tagPMSG_SEND_MURUMMY_MSG
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_SEND_SLOTCARD_LIST@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_SEND_SLOTCARD_LIST@@QAE@XZ PROC		; _tagPMSG_SEND_SLOTCARD_LIST::_tagPMSG_SEND_SLOTCARD_LIST, COMDAT
; _this$ = ecx

; 203  : 	{
; 204  : 
; 205  : 	};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_tagPMSG_SEND_SLOTCARD_LIST@@QAE@XZ ENDP		; _tagPMSG_SEND_SLOTCARD_LIST::_tagPMSG_SEND_SLOTCARD_LIST
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_MURUMMY_END@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_MURUMMY_END@@QAE@XZ PROC		; _tagPMSG_ANS_MURUMMY_END::_tagPMSG_ANS_MURUMMY_END, COMDAT
; _this$ = ecx

; 191  : 	{
; 192  : 
; 193  : 	};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_tagPMSG_ANS_MURUMMY_END@@QAE@XZ ENDP		; _tagPMSG_ANS_MURUMMY_END::_tagPMSG_ANS_MURUMMY_END
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_CARD_MATCH@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_CARD_MATCH@@QAE@XZ PROC			; _tagPMSG_ANS_CARD_MATCH::_tagPMSG_ANS_CARD_MATCH, COMDAT
; _this$ = ecx

; 166  : 	{
; 167  : 
; 168  : 	};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_tagPMSG_ANS_CARD_MATCH@@QAE@XZ ENDP			; _tagPMSG_ANS_CARD_MATCH::_tagPMSG_ANS_CARD_MATCH
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_CARD_REMOVE@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_CARD_REMOVE@@QAE@XZ PROC		; _tagPMSG_ANS_CARD_REMOVE::_tagPMSG_ANS_CARD_REMOVE, COMDAT
; _this$ = ecx

; 145  : 	{
; 146  : 
; 147  : 	};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_tagPMSG_ANS_CARD_REMOVE@@QAE@XZ ENDP		; _tagPMSG_ANS_CARD_REMOVE::_tagPMSG_ANS_CARD_REMOVE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_CARD_MOVE@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_CARD_MOVE@@QAE@XZ PROC			; _tagPMSG_ANS_CARD_MOVE::_tagPMSG_ANS_CARD_MOVE, COMDAT
; _this$ = ecx

; 117  : 	{
; 118  : 		this->sSlot = -1;

  00000	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 119  : 		this->tSlot = -1;
; 120  : 		this->btColor = -1;
; 121  : 		this->btNumber = -1;
; 122  : 	};

  00007	8b c1		 mov	 eax, ecx
  00009	c3		 ret	 0
??0_tagPMSG_ANS_CARD_MOVE@@QAE@XZ ENDP			; _tagPMSG_ANS_CARD_MOVE::_tagPMSG_ANS_CARD_MOVE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_REVEAL_CARD@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_REVEAL_CARD@@QAE@XZ PROC		; _tagPMSG_ANS_REVEAL_CARD::_tagPMSG_ANS_REVEAL_CARD, COMDAT
; _this$ = ecx

; 93   : 	{
; 94   : 		this->btCardDeckCnt = 0;

  00000	c6 41 13 00	 mov	 BYTE PTR [ecx+19], 0

; 95   : 	};

  00004	8b c1		 mov	 eax, ecx
  00006	c3		 ret	 0
??0_tagPMSG_ANS_REVEAL_CARD@@QAE@XZ ENDP		; _tagPMSG_ANS_REVEAL_CARD::_tagPMSG_ANS_REVEAL_CARD
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagPMSG_ANS_MURUMMY_INFO@@QAE@XZ
_TEXT	SEGMENT
??0_tagPMSG_ANS_MURUMMY_INFO@@QAE@XZ PROC		; _tagPMSG_ANS_MURUMMY_INFO::_tagPMSG_ANS_MURUMMY_INFO, COMDAT
; _this$ = ecx

; 72   : 	{
; 73   : 		this->btTotScoreH = 0;

  00000	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0

; 74   : 		this->btTotScoreL = 0;
; 75   : 		this->btCardDeckCnt = 0;
; 76   : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 06 00	 mov	 BYTE PTR [ecx+6], 0
  0000c	c3		 ret	 0
??0_tagPMSG_ANS_MURUMMY_INFO@@QAE@XZ ENDP		; _tagPMSG_ANS_MURUMMY_INFO::_tagPMSG_ANS_MURUMMY_INFO
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagMuRummyCardUpdateDS@@QAE@XZ
_TEXT	SEGMENT
??0_tagMuRummyCardUpdateDS@@QAE@XZ PROC			; _tagMuRummyCardUpdateDS::_tagMuRummyCardUpdateDS, COMDAT
; _this$ = ecx

; 38   : 	{
; 39   : 		this->btSlotNum = -1;

  00000	66 c7 01 ff ff	 mov	 WORD PTR [ecx], 65535	; 0000ffffH

; 40   : 		this->btSeq = -1;
; 41   : 		this->btStatus = -1;
; 42   : 	};

  00005	8b c1		 mov	 eax, ecx
  00007	c6 41 02 ff	 mov	 BYTE PTR [ecx+2], 255	; 000000ffH
  0000b	c3		 ret	 0
??0_tagMuRummyCardUpdateDS@@QAE@XZ ENDP			; _tagMuRummyCardUpdateDS::_tagMuRummyCardUpdateDS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummyprotocol.h
;	COMDAT ??0_tagMuRummyCardInfoDS@@QAE@XZ
_TEXT	SEGMENT
??0_tagMuRummyCardInfoDS@@QAE@XZ PROC			; _tagMuRummyCardInfoDS::_tagMuRummyCardInfoDS, COMDAT
; _this$ = ecx

; 20   : 	{
; 21   : 		this->btColor = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 22   : 		this->btNumber = -1;
; 23   : 		this->btSlotNum = -1;
; 24   : 		this->btSeq = -1;
; 25   : 		this->btStatus = -1;
; 26   : 	};

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 04 ff	 mov	 BYTE PTR [ecx+4], 255	; 000000ffH
  0000c	c3		 ret	 0
??0_tagMuRummyCardInfoDS@@QAE@XZ ENDP			; _tagMuRummyCardInfoDS::_tagMuRummyCardInfoDS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 139  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 		lpBuf[0] = 0xC1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 141  : 		lpBuf[1] = size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 142  : 		lpBuf[2] = head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 143  : 		lpBuf[3] = sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 144  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 412  : 	m_time(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 414  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 1826 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\murummy.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1826 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
